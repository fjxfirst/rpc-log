"use strict";
(self["webpackChunkrpc_log"] = self["webpackChunkrpc_log"] || []).push([["react_vendors"],{

/***/ "./node_modules/react-dom/cjs/react-dom.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-dom/cjs/react-dom.development.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * @license React
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */function _typeof(o){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o;}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o;},_typeof(o);}if(true){(function(){'use strict';/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__!=='undefined'&&typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart==='function'){__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());}var React=__webpack_require__(/*! react */ "./node_modules/react/index.js");var Scheduler=__webpack_require__(/*! scheduler */ "./node_modules/scheduler/index.js");var ReactSharedInternals=React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;var suppressWarning=false;function setSuppressWarning(newSuppressWarning){{suppressWarning=newSuppressWarning;}}// In DEV, calls to console.warn and console.error get replaced
// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.
function warn(format){{if(!suppressWarning){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}printWarning('warn',format,args);}}}function error(format){{if(!suppressWarning){for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){args[_key2-1]=arguments[_key2];}printWarning('error',format,args);}}}function printWarning(level,format,args){// When changing this logic, you might want to also
// update consoleWithStackDev.www.js as well.
{var ReactDebugCurrentFrame=ReactSharedInternals.ReactDebugCurrentFrame;var stack=ReactDebugCurrentFrame.getStackAddendum();if(stack!==''){format+='%s';args=args.concat([stack]);}// eslint-disable-next-line react-internal/safe-string-coercion
var argsWithFormat=args.map(function(item){return String(item);});// Careful: RN currently depends on this prefix
argsWithFormat.unshift('Warning: '+format);// We intentionally don't use spread (or .apply) directly because it
// breaks IE9: https://github.com/facebook/react/issues/13610
// eslint-disable-next-line react-internal/no-production-logging
Function.prototype.apply.call(console[level],console,argsWithFormat);}}var FunctionComponent=0;var ClassComponent=1;var IndeterminateComponent=2;// Before we know whether it is function or class
var HostRoot=3;// Root of a host tree. Could be nested inside another node.
var HostPortal=4;// A subtree. Could be an entry point to a different renderer.
var HostComponent=5;var HostText=6;var Fragment=7;var Mode=8;var ContextConsumer=9;var ContextProvider=10;var ForwardRef=11;var Profiler=12;var SuspenseComponent=13;var MemoComponent=14;var SimpleMemoComponent=15;var LazyComponent=16;var IncompleteClassComponent=17;var DehydratedFragment=18;var SuspenseListComponent=19;var ScopeComponent=21;var OffscreenComponent=22;var LegacyHiddenComponent=23;var CacheComponent=24;var TracingMarkerComponent=25;// -----------------------------------------------------------------------------
var enableClientRenderFallbackOnTextMismatch=true;// TODO: Need to review this code one more time before landing
// the react-reconciler package.
var enableNewReconciler=false;// Support legacy Primer support on internal FB www
var enableLazyContextPropagation=false;// FB-only usage. The new API has different semantics.
var enableLegacyHidden=false;// Enables unstable_avoidThisFallback feature in Fiber
var enableSuspenseAvoidThisFallback=false;// Enables unstable_avoidThisFallback feature in Fizz
// React DOM Chopping Block
//
// Similar to main Chopping Block but only flags related to React DOM. These are
// grouped because we will likely batch all of them into a single major release.
// -----------------------------------------------------------------------------
// Disable support for comment nodes as React DOM containers. Already disabled
// in open source, but www codebase still relies on it. Need to remove.
var disableCommentsAsDOMContainers=true;// Disable javascript: URL strings in href for XSS protection.
// and client rendering, mostly to allow JSX attributes to apply to the custom
// element's object properties instead of only HTML attributes.
// https://github.com/facebook/react/issues/11347
var enableCustomElementPropertySupport=false;// Disables children for <textarea> elements
var warnAboutStringRefs=true;// -----------------------------------------------------------------------------
// Debugging and DevTools
// -----------------------------------------------------------------------------
// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
// for an experimental timeline tool.
var enableSchedulingProfiler=true;// Helps identify side effects in render-phase lifecycle hooks and setState
var enableProfilerTimer=true;// Record durations for commit and passive effects phases.
var enableProfilerCommitHooks=true;// Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".
var allNativeEvents=new Set();/**
 * Mapping from registration name to event name
 */var registrationNameDependencies={};/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */var possibleRegistrationNames={};// Trust the developer to only use possibleRegistrationNames in true
function registerTwoPhaseEvent(registrationName,dependencies){registerDirectEvent(registrationName,dependencies);registerDirectEvent(registrationName+'Capture',dependencies);}function registerDirectEvent(registrationName,dependencies){{if(registrationNameDependencies[registrationName]){error('EventRegistry: More than one plugin attempted to publish the same '+'registration name, `%s`.',registrationName);}}registrationNameDependencies[registrationName]=dependencies;{var lowerCasedName=registrationName.toLowerCase();possibleRegistrationNames[lowerCasedName]=registrationName;if(registrationName==='onDoubleClick'){possibleRegistrationNames.ondblclick=registrationName;}}for(var i=0;i<dependencies.length;i++){allNativeEvents.add(dependencies[i]);}}var canUseDOM=!!(typeof window!=='undefined'&&typeof window.document!=='undefined'&&typeof window.document.createElement!=='undefined');var hasOwnProperty=Object.prototype.hasOwnProperty;/*
 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
 *
 * The functions in this module will throw an easier-to-understand,
 * easier-to-debug exception with a clear errors message message explaining the
 * problem. (Instead of a confusing exception thrown inside the implementation
 * of the `value` object).
 */// $FlowFixMe only called in DEV, so void return is not possible.
function typeName(value){{// toStringTag is needed for namespaced types like Temporal.Instant
var hasToStringTag=typeof Symbol==='function'&&Symbol.toStringTag;var type=hasToStringTag&&value[Symbol.toStringTag]||value.constructor.name||'Object';return type;}}// $FlowFixMe only called in DEV, so void return is not possible.
function willCoercionThrow(value){{try{testStringCoercion(value);return false;}catch(e){return true;}}}function testStringCoercion(value){// If you ended up here by following an exception call stack, here's what's
// happened: you supplied an object or symbol value to React (as a prop, key,
// DOM attribute, CSS property, string ref, etc.) and when React tried to
// coerce it to a string using `'' + value`, an exception was thrown.
//
// The most common types that will cause this exception are `Symbol` instances
// and Temporal objects like `Temporal.Instant`. But any object that has a
// `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
// exception. (Library authors do this to prevent users from using built-in
// numeric operators like `+` or comparison operators like `>=` because custom
// methods are needed to perform accurate arithmetic or comparison.)
//
// To fix the problem, coerce this object or symbol value to a string before
// passing it to React. The most reliable way is usually `String(value)`.
//
// To find which value is throwing, check the browser or debugger console.
// Before this exception was thrown, there should be `console.error` output
// that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
// problem and how that type was used: key, atrribute, input value prop, etc.
// In most cases, this console output also shows the component and its
// ancestor components where the exception happened.
//
// eslint-disable-next-line react-internal/safe-string-coercion
return''+value;}function checkAttributeStringCoercion(value,attributeName){{if(willCoercionThrow(value)){error('The provided `%s` attribute is an unsupported type %s.'+' This value must be coerced to a string before before using it here.',attributeName,typeName(value));return testStringCoercion(value);// throw (to help callers find troubleshooting comments)
}}}function checkKeyStringCoercion(value){{if(willCoercionThrow(value)){error('The provided key is an unsupported type %s.'+' This value must be coerced to a string before before using it here.',typeName(value));return testStringCoercion(value);// throw (to help callers find troubleshooting comments)
}}}function checkPropStringCoercion(value,propName){{if(willCoercionThrow(value)){error('The provided `%s` prop is an unsupported type %s.'+' This value must be coerced to a string before before using it here.',propName,typeName(value));return testStringCoercion(value);// throw (to help callers find troubleshooting comments)
}}}function checkCSSPropertyStringCoercion(value,propName){{if(willCoercionThrow(value)){error('The provided `%s` CSS property is an unsupported type %s.'+' This value must be coerced to a string before before using it here.',propName,typeName(value));return testStringCoercion(value);// throw (to help callers find troubleshooting comments)
}}}function checkHtmlStringCoercion(value){{if(willCoercionThrow(value)){error('The provided HTML markup uses a value of unsupported type %s.'+' This value must be coerced to a string before before using it here.',typeName(value));return testStringCoercion(value);// throw (to help callers find troubleshooting comments)
}}}function checkFormFieldValueStringCoercion(value){{if(willCoercionThrow(value)){error('Form field values (value, checked, defaultValue, or defaultChecked props)'+' must be strings, not %s.'+' This value must be coerced to a string before before using it here.',typeName(value));return testStringCoercion(value);// throw (to help callers find troubleshooting comments)
}}}// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED=0;// A simple string attribute.
// Attributes that aren't in the filter are presumed to have this type.
var STRING=1;// A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.
var BOOLEANISH_STRING=2;// A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
var BOOLEAN=3;// An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.
var OVERLOADED_BOOLEAN=4;// An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.
var NUMERIC=5;// An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.
var POSITIVE_NUMERIC=6;/* eslint-disable max-len */var ATTRIBUTE_NAME_START_CHAR=":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";/* eslint-enable max-len */var ATTRIBUTE_NAME_CHAR=ATTRIBUTE_NAME_START_CHAR+"\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";var VALID_ATTRIBUTE_NAME_REGEX=new RegExp('^['+ATTRIBUTE_NAME_START_CHAR+']['+ATTRIBUTE_NAME_CHAR+']*$');var illegalAttributeNameCache={};var validatedAttributeNameCache={};function isAttributeNameSafe(attributeName){if(hasOwnProperty.call(validatedAttributeNameCache,attributeName)){return true;}if(hasOwnProperty.call(illegalAttributeNameCache,attributeName)){return false;}if(VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)){validatedAttributeNameCache[attributeName]=true;return true;}illegalAttributeNameCache[attributeName]=true;{error('Invalid attribute name: `%s`',attributeName);}return false;}function shouldIgnoreAttribute(name,propertyInfo,isCustomComponentTag){if(propertyInfo!==null){return propertyInfo.type===RESERVED;}if(isCustomComponentTag){return false;}if(name.length>2&&(name[0]==='o'||name[0]==='O')&&(name[1]==='n'||name[1]==='N')){return true;}return false;}function shouldRemoveAttributeWithWarning(name,value,propertyInfo,isCustomComponentTag){if(propertyInfo!==null&&propertyInfo.type===RESERVED){return false;}switch(_typeof(value)){case'function':// $FlowIssue symbol is perfectly valid here
case'symbol':// eslint-disable-line
return true;case'boolean':{if(isCustomComponentTag){return false;}if(propertyInfo!==null){return!propertyInfo.acceptsBooleans;}else{var prefix=name.toLowerCase().slice(0,5);return prefix!=='data-'&&prefix!=='aria-';}}default:return false;}}function shouldRemoveAttribute(name,value,propertyInfo,isCustomComponentTag){if(value===null||typeof value==='undefined'){return true;}if(shouldRemoveAttributeWithWarning(name,value,propertyInfo,isCustomComponentTag)){return true;}if(isCustomComponentTag){return false;}if(propertyInfo!==null){switch(propertyInfo.type){case BOOLEAN:return!value;case OVERLOADED_BOOLEAN:return value===false;case NUMERIC:return isNaN(value);case POSITIVE_NUMERIC:return isNaN(value)||value<1;}}return false;}function getPropertyInfo(name){return properties.hasOwnProperty(name)?properties[name]:null;}function PropertyInfoRecord(name,type,mustUseProperty,attributeName,attributeNamespace,sanitizeURL,removeEmptyString){this.acceptsBooleans=type===BOOLEANISH_STRING||type===BOOLEAN||type===OVERLOADED_BOOLEAN;this.attributeName=attributeName;this.attributeNamespace=attributeNamespace;this.mustUseProperty=mustUseProperty;this.propertyName=name;this.type=type;this.sanitizeURL=sanitizeURL;this.removeEmptyString=removeEmptyString;}// When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.
var properties={};// These props are reserved by React. They shouldn't be written to the DOM.
var reservedProps=['children','dangerouslySetInnerHTML',// TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue','defaultChecked','innerHTML','suppressContentEditableWarning','suppressHydrationWarning','style'];reservedProps.forEach(function(name){properties[name]=new PropertyInfoRecord(name,RESERVED,false,// mustUseProperty
name,// attributeName
null,// attributeNamespace
false,// sanitizeURL
false);});// A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.
[['acceptCharset','accept-charset'],['className','class'],['htmlFor','for'],['httpEquiv','http-equiv']].forEach(function(_ref){var name=_ref[0],attributeName=_ref[1];properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,// attributeName
null,// attributeNamespace
false,// sanitizeURL
false);});// These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
['contentEditable','draggable','spellCheck','value'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEANISH_STRING,false,// mustUseProperty
name.toLowerCase(),// attributeName
null,// attributeNamespace
false,// sanitizeURL
false);});// These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.
['autoReverse','externalResourcesRequired','focusable','preserveAlpha'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEANISH_STRING,false,// mustUseProperty
name,// attributeName
null,// attributeNamespace
false,// sanitizeURL
false);});// These are HTML boolean attributes.
['allowFullScreen','async',// Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus','autoPlay','controls','default','defer','disabled','disablePictureInPicture','disableRemotePlayback','formNoValidate','hidden','loop','noModule','noValidate','open','playsInline','readOnly','required','reversed','scoped','seamless',// Microdata
'itemScope'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEAN,false,// mustUseProperty
name.toLowerCase(),// attributeName
null,// attributeNamespace
false,// sanitizeURL
false);});// These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.
['checked',// Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple','muted','selected'// NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function(name){properties[name]=new PropertyInfoRecord(name,BOOLEAN,true,// mustUseProperty
name,// attributeName
null,// attributeNamespace
false,// sanitizeURL
false);});// These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.
['capture','download'// NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function(name){properties[name]=new PropertyInfoRecord(name,OVERLOADED_BOOLEAN,false,// mustUseProperty
name,// attributeName
null,// attributeNamespace
false,// sanitizeURL
false);});// These are HTML attributes that must be positive numbers.
['cols','rows','size','span'// NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function(name){properties[name]=new PropertyInfoRecord(name,POSITIVE_NUMERIC,false,// mustUseProperty
name,// attributeName
null,// attributeNamespace
false,// sanitizeURL
false);});// These are HTML attributes that must be numbers.
['rowSpan','start'].forEach(function(name){properties[name]=new PropertyInfoRecord(name,NUMERIC,false,// mustUseProperty
name.toLowerCase(),// attributeName
null,// attributeNamespace
false,// sanitizeURL
false);});var CAMELIZE=/[\-\:]([a-z])/g;var capitalize=function capitalize(token){return token[1].toUpperCase();};// This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML attribute filter.
// Some of these attributes can be hard to find. This list was created by
// scraping the MDN documentation.
['accent-height','alignment-baseline','arabic-form','baseline-shift','cap-height','clip-path','clip-rule','color-interpolation','color-interpolation-filters','color-profile','color-rendering','dominant-baseline','enable-background','fill-opacity','fill-rule','flood-color','flood-opacity','font-family','font-size','font-size-adjust','font-stretch','font-style','font-variant','font-weight','glyph-name','glyph-orientation-horizontal','glyph-orientation-vertical','horiz-adv-x','horiz-origin-x','image-rendering','letter-spacing','lighting-color','marker-end','marker-mid','marker-start','overline-position','overline-thickness','paint-order','panose-1','pointer-events','rendering-intent','shape-rendering','stop-color','stop-opacity','strikethrough-position','strikethrough-thickness','stroke-dasharray','stroke-dashoffset','stroke-linecap','stroke-linejoin','stroke-miterlimit','stroke-opacity','stroke-width','text-anchor','text-decoration','text-rendering','underline-position','underline-thickness','unicode-bidi','unicode-range','units-per-em','v-alphabetic','v-hanging','v-ideographic','v-mathematical','vector-effect','vert-adv-y','vert-origin-x','vert-origin-y','word-spacing','writing-mode','xmlns:xlink','x-height'// NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function(attributeName){var name=attributeName.replace(CAMELIZE,capitalize);properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,null,// attributeNamespace
false,// sanitizeURL
false);});// String SVG attributes with the xlink namespace.
['xlink:actuate','xlink:arcrole','xlink:role','xlink:show','xlink:title','xlink:type'// NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function(attributeName){var name=attributeName.replace(CAMELIZE,capitalize);properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,'http://www.w3.org/1999/xlink',false,// sanitizeURL
false);});// String SVG attributes with the xml namespace.
['xml:base','xml:lang','xml:space'// NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function(attributeName){var name=attributeName.replace(CAMELIZE,capitalize);properties[name]=new PropertyInfoRecord(name,STRING,false,// mustUseProperty
attributeName,'http://www.w3.org/XML/1998/namespace',false,// sanitizeURL
false);});// These attribute exists both in HTML and SVG.
// The attribute name is case-sensitive in SVG so we can't just use
// the React name like we do for attributes that exist only in HTML.
['tabIndex','crossOrigin'].forEach(function(attributeName){properties[attributeName]=new PropertyInfoRecord(attributeName,STRING,false,// mustUseProperty
attributeName.toLowerCase(),// attributeName
null,// attributeNamespace
false,// sanitizeURL
false);});// These attributes accept URLs. These must not allow javascript: URLS.
// These will also need to accept Trusted Types object in the future.
var xlinkHref='xlinkHref';properties[xlinkHref]=new PropertyInfoRecord('xlinkHref',STRING,false,// mustUseProperty
'xlink:href','http://www.w3.org/1999/xlink',true,// sanitizeURL
false);['src','href','action','formAction'].forEach(function(attributeName){properties[attributeName]=new PropertyInfoRecord(attributeName,STRING,false,// mustUseProperty
attributeName.toLowerCase(),// attributeName
null,// attributeNamespace
true,// sanitizeURL
true);});// and any newline or tab are filtered out as if they're not part of the URL.
// https://url.spec.whatwg.org/#url-parsing
// Tab or newline are defined as \r\n\t:
// https://infra.spec.whatwg.org/#ascii-tab-or-newline
// A C0 control is a code point in the range \u0000 NULL to \u001F
// INFORMATION SEPARATOR ONE, inclusive:
// https://infra.spec.whatwg.org/#c0-control-or-space
/* eslint-disable max-len */var isJavaScriptProtocol=/^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;var didWarn=false;function sanitizeURL(url){{if(!didWarn&&isJavaScriptProtocol.test(url)){didWarn=true;error('A future version of React will block javascript: URLs as a security precaution. '+'Use event handlers instead if you can. If you need to generate unsafe HTML try '+'using dangerouslySetInnerHTML instead. React was passed %s.',JSON.stringify(url));}}}/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */function getValueForProperty(node,name,expected,propertyInfo){{if(propertyInfo.mustUseProperty){var propertyName=propertyInfo.propertyName;return node[propertyName];}else{// This check protects multiple uses of `expected`, which is why the
// react-internal/safe-string-coercion rule is disabled in several spots
// below.
{checkAttributeStringCoercion(expected,name);}if(propertyInfo.sanitizeURL){// If we haven't fully disabled javascript: URLs, and if
// the hydration is successful of a javascript: URL, we
// still want to warn on the client.
// eslint-disable-next-line react-internal/safe-string-coercion
sanitizeURL(''+expected);}var attributeName=propertyInfo.attributeName;var stringValue=null;if(propertyInfo.type===OVERLOADED_BOOLEAN){if(node.hasAttribute(attributeName)){var value=node.getAttribute(attributeName);if(value===''){return true;}if(shouldRemoveAttribute(name,expected,propertyInfo,false)){return value;}// eslint-disable-next-line react-internal/safe-string-coercion
if(value===''+expected){return expected;}return value;}}else if(node.hasAttribute(attributeName)){if(shouldRemoveAttribute(name,expected,propertyInfo,false)){// We had an attribute but shouldn't have had one, so read it
// for the error message.
return node.getAttribute(attributeName);}if(propertyInfo.type===BOOLEAN){// If this was a boolean, it doesn't matter what the value is
// the fact that we have it is the same as the expected.
return expected;}// Even if this property uses a namespace we use getAttribute
// because we assume its namespaced name is the same as our config.
// To use getAttributeNS we need the local name which we don't have
// in our config atm.
stringValue=node.getAttribute(attributeName);}if(shouldRemoveAttribute(name,expected,propertyInfo,false)){return stringValue===null?expected:stringValue;// eslint-disable-next-line react-internal/safe-string-coercion
}else if(stringValue===''+expected){return expected;}else{return stringValue;}}}}/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */function getValueForAttribute(node,name,expected,isCustomComponentTag){{if(!isAttributeNameSafe(name)){return;}if(!node.hasAttribute(name)){return expected===undefined?undefined:null;}var value=node.getAttribute(name);{checkAttributeStringCoercion(expected,name);}if(value===''+expected){return expected;}return value;}}/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */function setValueForProperty(node,name,value,isCustomComponentTag){var propertyInfo=getPropertyInfo(name);if(shouldIgnoreAttribute(name,propertyInfo,isCustomComponentTag)){return;}if(shouldRemoveAttribute(name,value,propertyInfo,isCustomComponentTag)){value=null;}if(isCustomComponentTag||propertyInfo===null){if(isAttributeNameSafe(name)){var _attributeName=name;if(value===null){node.removeAttribute(_attributeName);}else{{checkAttributeStringCoercion(value,name);}node.setAttribute(_attributeName,''+value);}}return;}var mustUseProperty=propertyInfo.mustUseProperty;if(mustUseProperty){var propertyName=propertyInfo.propertyName;if(value===null){var type=propertyInfo.type;node[propertyName]=type===BOOLEAN?false:'';}else{// Contrary to `setAttribute`, object properties are properly
// `toString`ed by IE8/9.
node[propertyName]=value;}return;}// The rest are treated as attributes with special cases.
var attributeName=propertyInfo.attributeName,attributeNamespace=propertyInfo.attributeNamespace;if(value===null){node.removeAttribute(attributeName);}else{var _type=propertyInfo.type;var attributeValue;if(_type===BOOLEAN||_type===OVERLOADED_BOOLEAN&&value===true){// If attribute type is boolean, we know for sure it won't be an execution sink
// and we won't require Trusted Type here.
attributeValue='';}else{// `setAttribute` with objects becomes only `[object]` in IE8/9,
// ('' + value) makes it output the correct toString()-value.
{{checkAttributeStringCoercion(value,attributeName);}attributeValue=''+value;}if(propertyInfo.sanitizeURL){sanitizeURL(attributeValue.toString());}}if(attributeNamespace){node.setAttributeNS(attributeNamespace,attributeName,attributeValue);}else{node.setAttribute(attributeName,attributeValue);}}}// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types.
var REACT_ELEMENT_TYPE=Symbol["for"]('react.element');var REACT_PORTAL_TYPE=Symbol["for"]('react.portal');var REACT_FRAGMENT_TYPE=Symbol["for"]('react.fragment');var REACT_STRICT_MODE_TYPE=Symbol["for"]('react.strict_mode');var REACT_PROFILER_TYPE=Symbol["for"]('react.profiler');var REACT_PROVIDER_TYPE=Symbol["for"]('react.provider');var REACT_CONTEXT_TYPE=Symbol["for"]('react.context');var REACT_FORWARD_REF_TYPE=Symbol["for"]('react.forward_ref');var REACT_SUSPENSE_TYPE=Symbol["for"]('react.suspense');var REACT_SUSPENSE_LIST_TYPE=Symbol["for"]('react.suspense_list');var REACT_MEMO_TYPE=Symbol["for"]('react.memo');var REACT_LAZY_TYPE=Symbol["for"]('react.lazy');var REACT_SCOPE_TYPE=Symbol["for"]('react.scope');var REACT_DEBUG_TRACING_MODE_TYPE=Symbol["for"]('react.debug_trace_mode');var REACT_OFFSCREEN_TYPE=Symbol["for"]('react.offscreen');var REACT_LEGACY_HIDDEN_TYPE=Symbol["for"]('react.legacy_hidden');var REACT_CACHE_TYPE=Symbol["for"]('react.cache');var REACT_TRACING_MARKER_TYPE=Symbol["for"]('react.tracing_marker');var MAYBE_ITERATOR_SYMBOL=Symbol.iterator;var FAUX_ITERATOR_SYMBOL='@@iterator';function getIteratorFn(maybeIterable){if(maybeIterable===null||_typeof(maybeIterable)!=='object'){return null;}var maybeIterator=MAYBE_ITERATOR_SYMBOL&&maybeIterable[MAYBE_ITERATOR_SYMBOL]||maybeIterable[FAUX_ITERATOR_SYMBOL];if(typeof maybeIterator==='function'){return maybeIterator;}return null;}var assign=Object.assign;// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth=0;var prevLog;var prevInfo;var prevWarn;var prevError;var prevGroup;var prevGroupCollapsed;var prevGroupEnd;function disabledLog(){}disabledLog.__reactDisabledLog=true;function disableLogs(){{if(disabledDepth===0){/* eslint-disable react-internal/no-production-logging */prevLog=console.log;prevInfo=console.info;prevWarn=console.warn;prevError=console.error;prevGroup=console.group;prevGroupCollapsed=console.groupCollapsed;prevGroupEnd=console.groupEnd;// https://github.com/facebook/react/issues/19099
var props={configurable:true,enumerable:true,value:disabledLog,writable:true};// $FlowFixMe Flow thinks console is immutable.
Object.defineProperties(console,{info:props,log:props,warn:props,error:props,group:props,groupCollapsed:props,groupEnd:props});/* eslint-enable react-internal/no-production-logging */}disabledDepth++;}}function reenableLogs(){{disabledDepth--;if(disabledDepth===0){/* eslint-disable react-internal/no-production-logging */var props={configurable:true,enumerable:true,writable:true};// $FlowFixMe Flow thinks console is immutable.
Object.defineProperties(console,{log:assign({},props,{value:prevLog}),info:assign({},props,{value:prevInfo}),warn:assign({},props,{value:prevWarn}),error:assign({},props,{value:prevError}),group:assign({},props,{value:prevGroup}),groupCollapsed:assign({},props,{value:prevGroupCollapsed}),groupEnd:assign({},props,{value:prevGroupEnd})});/* eslint-enable react-internal/no-production-logging */}if(disabledDepth<0){error('disabledDepth fell below zero. '+'This is a bug in React. Please file an issue.');}}}var ReactCurrentDispatcher=ReactSharedInternals.ReactCurrentDispatcher;var prefix;function describeBuiltInComponentFrame(name,source,ownerFn){{if(prefix===undefined){// Extract the VM specific prefix used by each line.
try{throw Error();}catch(x){var match=x.stack.trim().match(/\n( *(at )?)/);prefix=match&&match[1]||'';}}// We use the prefix to ensure our stacks line up with native stack frames.
return'\n'+prefix+name;}}var reentry=false;var componentFrameCache;{var PossiblyWeakMap=typeof WeakMap==='function'?WeakMap:Map;componentFrameCache=new PossiblyWeakMap();}function describeNativeComponentFrame(fn,construct){// If something asked for a stack inside a fake render, it should get ignored.
if(!fn||reentry){return'';}{var frame=componentFrameCache.get(fn);if(frame!==undefined){return frame;}}var control;reentry=true;var previousPrepareStackTrace=Error.prepareStackTrace;// $FlowFixMe It does accept undefined.
Error.prepareStackTrace=undefined;var previousDispatcher;{previousDispatcher=ReactCurrentDispatcher.current;// Set the dispatcher in DEV because this might be call in the render function
// for warnings.
ReactCurrentDispatcher.current=null;disableLogs();}try{// This should throw.
if(construct){// Something should be setting the props in the constructor.
var Fake=function Fake(){throw Error();};// $FlowFixMe
Object.defineProperty(Fake.prototype,'props',{set:function set(){// We use a throwing setter instead of frozen or non-writable props
// because that won't throw in a non-strict mode function.
throw Error();}});if((typeof Reflect==="undefined"?"undefined":_typeof(Reflect))==='object'&&Reflect.construct){// We construct a different control for this case to include any extra
// frames added by the construct call.
try{Reflect.construct(Fake,[]);}catch(x){control=x;}Reflect.construct(fn,[],Fake);}else{try{Fake.call();}catch(x){control=x;}fn.call(Fake.prototype);}}else{try{throw Error();}catch(x){control=x;}fn();}}catch(sample){// This is inlined manually because closure doesn't do it for us.
if(sample&&control&&typeof sample.stack==='string'){// This extracts the first frame from the sample that isn't also in the control.
// Skipping one frame that we assume is the frame that calls the two.
var sampleLines=sample.stack.split('\n');var controlLines=control.stack.split('\n');var s=sampleLines.length-1;var c=controlLines.length-1;while(s>=1&&c>=0&&sampleLines[s]!==controlLines[c]){// We expect at least one stack frame to be shared.
// Typically this will be the root most one. However, stack frames may be
// cut off due to maximum stack limits. In this case, one maybe cut off
// earlier than the other. We assume that the sample is longer or the same
// and there for cut off earlier. So we should find the root most frame in
// the sample somewhere in the control.
c--;}for(;s>=1&&c>=0;s--,c--){// Next we find the first one that isn't the same which should be the
// frame that called our sample function and the control.
if(sampleLines[s]!==controlLines[c]){// In V8, the first line is describing the message but other VMs don't.
// If we're about to return the first line, and the control is also on the same
// line, that's a pretty good indicator that our sample threw at same line as
// the control. I.e. before we entered the sample frame. So we ignore this result.
// This can happen if you passed a class to function component, or non-function.
if(s!==1||c!==1){do{s--;c--;// We may still have similar intermediate frames from the construct call.
// The next one that isn't the same should be our match though.
if(c<0||sampleLines[s]!==controlLines[c]){// V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
var _frame='\n'+sampleLines[s].replace(' at new ',' at ');// If our component frame is labeled "<anonymous>"
// but we have a user-provided "displayName"
// splice it in to make the stack more readable.
if(fn.displayName&&_frame.includes('<anonymous>')){_frame=_frame.replace('<anonymous>',fn.displayName);}{if(typeof fn==='function'){componentFrameCache.set(fn,_frame);}}// Return the line we found.
return _frame;}}while(s>=1&&c>=0);}break;}}}}finally{reentry=false;{ReactCurrentDispatcher.current=previousDispatcher;reenableLogs();}Error.prepareStackTrace=previousPrepareStackTrace;}// Fallback to just using the name if we couldn't make it throw.
var name=fn?fn.displayName||fn.name:'';var syntheticFrame=name?describeBuiltInComponentFrame(name):'';{if(typeof fn==='function'){componentFrameCache.set(fn,syntheticFrame);}}return syntheticFrame;}function describeClassComponentFrame(ctor,source,ownerFn){{return describeNativeComponentFrame(ctor,true);}}function describeFunctionComponentFrame(fn,source,ownerFn){{return describeNativeComponentFrame(fn,false);}}function shouldConstruct(Component){var prototype=Component.prototype;return!!(prototype&&prototype.isReactComponent);}function describeUnknownElementTypeFrameInDEV(type,source,ownerFn){if(type==null){return'';}if(typeof type==='function'){{return describeNativeComponentFrame(type,shouldConstruct(type));}}if(typeof type==='string'){return describeBuiltInComponentFrame(type);}switch(type){case REACT_SUSPENSE_TYPE:return describeBuiltInComponentFrame('Suspense');case REACT_SUSPENSE_LIST_TYPE:return describeBuiltInComponentFrame('SuspenseList');}if(_typeof(type)==='object'){switch(type.$$typeof){case REACT_FORWARD_REF_TYPE:return describeFunctionComponentFrame(type.render);case REACT_MEMO_TYPE:// Memo may contain any component type so we recursively resolve it.
return describeUnknownElementTypeFrameInDEV(type.type,source,ownerFn);case REACT_LAZY_TYPE:{var lazyComponent=type;var payload=lazyComponent._payload;var init=lazyComponent._init;try{// Lazy may contain any component type so we recursively resolve it.
return describeUnknownElementTypeFrameInDEV(init(payload),source,ownerFn);}catch(x){}}}}return'';}function describeFiber(fiber){var owner=fiber._debugOwner?fiber._debugOwner.type:null;var source=fiber._debugSource;switch(fiber.tag){case HostComponent:return describeBuiltInComponentFrame(fiber.type);case LazyComponent:return describeBuiltInComponentFrame('Lazy');case SuspenseComponent:return describeBuiltInComponentFrame('Suspense');case SuspenseListComponent:return describeBuiltInComponentFrame('SuspenseList');case FunctionComponent:case IndeterminateComponent:case SimpleMemoComponent:return describeFunctionComponentFrame(fiber.type);case ForwardRef:return describeFunctionComponentFrame(fiber.type.render);case ClassComponent:return describeClassComponentFrame(fiber.type);default:return'';}}function getStackByFiberInDevAndProd(workInProgress){try{var info='';var node=workInProgress;do{info+=describeFiber(node);node=node["return"];}while(node);return info;}catch(x){return'\nError generating stack: '+x.message+'\n'+x.stack;}}function getWrappedName(outerType,innerType,wrapperName){var displayName=outerType.displayName;if(displayName){return displayName;}var functionName=innerType.displayName||innerType.name||'';return functionName!==''?wrapperName+"("+functionName+")":wrapperName;}// Keep in sync with react-reconciler/getComponentNameFromFiber
function getContextName(type){return type.displayName||'Context';}// Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.
function getComponentNameFromType(type){if(type==null){// Host root, text node or just invalid type.
return null;}{if(typeof type.tag==='number'){error('Received an unexpected object in getComponentNameFromType(). '+'This is likely a bug in React. Please file an issue.');}}if(typeof type==='function'){return type.displayName||type.name||null;}if(typeof type==='string'){return type;}switch(type){case REACT_FRAGMENT_TYPE:return'Fragment';case REACT_PORTAL_TYPE:return'Portal';case REACT_PROFILER_TYPE:return'Profiler';case REACT_STRICT_MODE_TYPE:return'StrictMode';case REACT_SUSPENSE_TYPE:return'Suspense';case REACT_SUSPENSE_LIST_TYPE:return'SuspenseList';}if(_typeof(type)==='object'){switch(type.$$typeof){case REACT_CONTEXT_TYPE:var context=type;return getContextName(context)+'.Consumer';case REACT_PROVIDER_TYPE:var provider=type;return getContextName(provider._context)+'.Provider';case REACT_FORWARD_REF_TYPE:return getWrappedName(type,type.render,'ForwardRef');case REACT_MEMO_TYPE:var outerName=type.displayName||null;if(outerName!==null){return outerName;}return getComponentNameFromType(type.type)||'Memo';case REACT_LAZY_TYPE:{var lazyComponent=type;var payload=lazyComponent._payload;var init=lazyComponent._init;try{return getComponentNameFromType(init(payload));}catch(x){return null;}}// eslint-disable-next-line no-fallthrough
}}return null;}function getWrappedName$1(outerType,innerType,wrapperName){var functionName=innerType.displayName||innerType.name||'';return outerType.displayName||(functionName!==''?wrapperName+"("+functionName+")":wrapperName);}// Keep in sync with shared/getComponentNameFromType
function getContextName$1(type){return type.displayName||'Context';}function getComponentNameFromFiber(fiber){var tag=fiber.tag,type=fiber.type;switch(tag){case CacheComponent:return'Cache';case ContextConsumer:var context=type;return getContextName$1(context)+'.Consumer';case ContextProvider:var provider=type;return getContextName$1(provider._context)+'.Provider';case DehydratedFragment:return'DehydratedFragment';case ForwardRef:return getWrappedName$1(type,type.render,'ForwardRef');case Fragment:return'Fragment';case HostComponent:// Host component type is the display name (e.g. "div", "View")
return type;case HostPortal:return'Portal';case HostRoot:return'Root';case HostText:return'Text';case LazyComponent:// Name comes from the type in this case; we don't have a tag.
return getComponentNameFromType(type);case Mode:if(type===REACT_STRICT_MODE_TYPE){// Don't be less specific than shared/getComponentNameFromType
return'StrictMode';}return'Mode';case OffscreenComponent:return'Offscreen';case Profiler:return'Profiler';case ScopeComponent:return'Scope';case SuspenseComponent:return'Suspense';case SuspenseListComponent:return'SuspenseList';case TracingMarkerComponent:return'TracingMarker';// The display name for this tags come from the user-provided type:
case ClassComponent:case FunctionComponent:case IncompleteClassComponent:case IndeterminateComponent:case MemoComponent:case SimpleMemoComponent:if(typeof type==='function'){return type.displayName||type.name||null;}if(typeof type==='string'){return type;}break;}return null;}var ReactDebugCurrentFrame=ReactSharedInternals.ReactDebugCurrentFrame;var current=null;var isRendering=false;function getCurrentFiberOwnerNameInDevOrNull(){{if(current===null){return null;}var owner=current._debugOwner;if(owner!==null&&typeof owner!=='undefined'){return getComponentNameFromFiber(owner);}}return null;}function getCurrentFiberStackInDev(){{if(current===null){return'';}// Safe because if current fiber exists, we are reconciling,
// and it is guaranteed to be the work-in-progress version.
return getStackByFiberInDevAndProd(current);}}function resetCurrentFiber(){{ReactDebugCurrentFrame.getCurrentStack=null;current=null;isRendering=false;}}function setCurrentFiber(fiber){{ReactDebugCurrentFrame.getCurrentStack=fiber===null?null:getCurrentFiberStackInDev;current=fiber;isRendering=false;}}function getCurrentFiber(){{return current;}}function setIsRendering(rendering){{isRendering=rendering;}}// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value){// The coercion safety check is performed in getToStringValue().
// eslint-disable-next-line react-internal/safe-string-coercion
return''+value;}function getToStringValue(value){switch(_typeof(value)){case'boolean':case'number':case'string':case'undefined':return value;case'object':{checkFormFieldValueStringCoercion(value);}return value;default:// function, symbol are assigned as empty strings
return'';}}var hasReadOnlyValue={button:true,checkbox:true,image:true,hidden:true,radio:true,reset:true,submit:true};function checkControlledValueProps(tagName,props){{if(!(hasReadOnlyValue[props.type]||props.onChange||props.onInput||props.readOnly||props.disabled||props.value==null)){error('You provided a `value` prop to a form field without an '+'`onChange` handler. This will render a read-only field. If '+'the field should be mutable use `defaultValue`. Otherwise, '+'set either `onChange` or `readOnly`.');}if(!(props.onChange||props.readOnly||props.disabled||props.checked==null)){error('You provided a `checked` prop to a form field without an '+'`onChange` handler. This will render a read-only field. If '+'the field should be mutable use `defaultChecked`. Otherwise, '+'set either `onChange` or `readOnly`.');}}}function isCheckable(elem){var type=elem.type;var nodeName=elem.nodeName;return nodeName&&nodeName.toLowerCase()==='input'&&(type==='checkbox'||type==='radio');}function getTracker(node){return node._valueTracker;}function detachTracker(node){node._valueTracker=null;}function getValueFromNode(node){var value='';if(!node){return value;}if(isCheckable(node)){value=node.checked?'true':'false';}else{value=node.value;}return value;}function trackValueOnNode(node){var valueField=isCheckable(node)?'checked':'value';var descriptor=Object.getOwnPropertyDescriptor(node.constructor.prototype,valueField);{checkFormFieldValueStringCoercion(node[valueField]);}var currentValue=''+node[valueField];// if someone has already defined a value or Safari, then bail
// and don't track value will cause over reporting of changes,
// but it's better then a hard failure
// (needed for certain tests that spyOn input values and Safari)
if(node.hasOwnProperty(valueField)||typeof descriptor==='undefined'||typeof descriptor.get!=='function'||typeof descriptor.set!=='function'){return;}var _get=descriptor.get,_set=descriptor.set;Object.defineProperty(node,valueField,{configurable:true,get:function get(){return _get.call(this);},set:function set(value){{checkFormFieldValueStringCoercion(value);}currentValue=''+value;_set.call(this,value);}});// We could've passed this the first time
// but it triggers a bug in IE11 and Edge 14/15.
// Calling defineProperty() again should be equivalent.
// https://github.com/facebook/react/issues/11768
Object.defineProperty(node,valueField,{enumerable:descriptor.enumerable});var tracker={getValue:function getValue(){return currentValue;},setValue:function setValue(value){{checkFormFieldValueStringCoercion(value);}currentValue=''+value;},stopTracking:function stopTracking(){detachTracker(node);delete node[valueField];}};return tracker;}function track(node){if(getTracker(node)){return;}// TODO: Once it's just Fiber we can move this to node._wrapperState
node._valueTracker=trackValueOnNode(node);}function updateValueIfChanged(node){if(!node){return false;}var tracker=getTracker(node);// if there is no tracker at this point it's unlikely
// that trying again will succeed
if(!tracker){return true;}var lastValue=tracker.getValue();var nextValue=getValueFromNode(node);if(nextValue!==lastValue){tracker.setValue(nextValue);return true;}return false;}function getActiveElement(doc){doc=doc||(typeof document!=='undefined'?document:undefined);if(typeof doc==='undefined'){return null;}try{return doc.activeElement||doc.body;}catch(e){return doc.body;}}var didWarnValueDefaultValue=false;var didWarnCheckedDefaultChecked=false;var didWarnControlledToUncontrolled=false;var didWarnUncontrolledToControlled=false;function isControlled(props){var usesChecked=props.type==='checkbox'||props.type==='radio';return usesChecked?props.checked!=null:props.value!=null;}/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */function getHostProps(element,props){var node=element;var checked=props.checked;var hostProps=assign({},props,{defaultChecked:undefined,defaultValue:undefined,value:undefined,checked:checked!=null?checked:node._wrapperState.initialChecked});return hostProps;}function initWrapperState(element,props){{checkControlledValueProps('input',props);if(props.checked!==undefined&&props.defaultChecked!==undefined&&!didWarnCheckedDefaultChecked){error('%s contains an input of type %s with both checked and defaultChecked props. '+'Input elements must be either controlled or uncontrolled '+'(specify either the checked prop, or the defaultChecked prop, but not '+'both). Decide between using a controlled or uncontrolled input '+'element and remove one of these props. More info: '+'https://reactjs.org/link/controlled-components',getCurrentFiberOwnerNameInDevOrNull()||'A component',props.type);didWarnCheckedDefaultChecked=true;}if(props.value!==undefined&&props.defaultValue!==undefined&&!didWarnValueDefaultValue){error('%s contains an input of type %s with both value and defaultValue props. '+'Input elements must be either controlled or uncontrolled '+'(specify either the value prop, or the defaultValue prop, but not '+'both). Decide between using a controlled or uncontrolled input '+'element and remove one of these props. More info: '+'https://reactjs.org/link/controlled-components',getCurrentFiberOwnerNameInDevOrNull()||'A component',props.type);didWarnValueDefaultValue=true;}}var node=element;var defaultValue=props.defaultValue==null?'':props.defaultValue;node._wrapperState={initialChecked:props.checked!=null?props.checked:props.defaultChecked,initialValue:getToStringValue(props.value!=null?props.value:defaultValue),controlled:isControlled(props)};}function updateChecked(element,props){var node=element;var checked=props.checked;if(checked!=null){setValueForProperty(node,'checked',checked,false);}}function updateWrapper(element,props){var node=element;{var controlled=isControlled(props);if(!node._wrapperState.controlled&&controlled&&!didWarnUncontrolledToControlled){error('A component is changing an uncontrolled input to be controlled. '+'This is likely caused by the value changing from undefined to '+'a defined value, which should not happen. '+'Decide between using a controlled or uncontrolled input '+'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');didWarnUncontrolledToControlled=true;}if(node._wrapperState.controlled&&!controlled&&!didWarnControlledToUncontrolled){error('A component is changing a controlled input to be uncontrolled. '+'This is likely caused by the value changing from a defined to '+'undefined, which should not happen. '+'Decide between using a controlled or uncontrolled input '+'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');didWarnControlledToUncontrolled=true;}}updateChecked(element,props);var value=getToStringValue(props.value);var type=props.type;if(value!=null){if(type==='number'){if(value===0&&node.value===''||// We explicitly want to coerce to number here if possible.
// eslint-disable-next-line
node.value!=value){node.value=toString(value);}}else if(node.value!==toString(value)){node.value=toString(value);}}else if(type==='submit'||type==='reset'){// Submit/reset inputs need the attribute removed completely to avoid
// blank-text buttons.
node.removeAttribute('value');return;}{// When syncing the value attribute, the value comes from a cascade of
// properties:
//  1. The value React property
//  2. The defaultValue React property
//  3. Otherwise there should be no change
if(props.hasOwnProperty('value')){setDefaultValue(node,props.type,value);}else if(props.hasOwnProperty('defaultValue')){setDefaultValue(node,props.type,getToStringValue(props.defaultValue));}}{// When syncing the checked attribute, it only changes when it needs
// to be removed, such as transitioning from a checkbox into a text input
if(props.checked==null&&props.defaultChecked!=null){node.defaultChecked=!!props.defaultChecked;}}}function postMountWrapper(element,props,isHydrating){var node=element;// Do not assign value if it is already set. This prevents user text input
// from being lost during SSR hydration.
if(props.hasOwnProperty('value')||props.hasOwnProperty('defaultValue')){var type=props.type;var isButton=type==='submit'||type==='reset';// Avoid setting value attribute on submit/reset inputs as it overrides the
// default value provided by the browser. See: #12872
if(isButton&&(props.value===undefined||props.value===null)){return;}var initialValue=toString(node._wrapperState.initialValue);// Do not assign value if it is already set. This prevents user text input
// from being lost during SSR hydration.
if(!isHydrating){{// When syncing the value attribute, the value property should use
// the wrapperState._initialValue property. This uses:
//
//   1. The value React property when present
//   2. The defaultValue React property when present
//   3. An empty string
if(initialValue!==node.value){node.value=initialValue;}}}{// Otherwise, the value attribute is synchronized to the property,
// so we assign defaultValue to the same thing as the value property
// assignment step above.
node.defaultValue=initialValue;}}// Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
// this is needed to work around a chrome bug where setting defaultChecked
// will sometimes influence the value of checked (even after detachment).
// Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
// We need to temporarily unset name to avoid disrupting radio button groups.
var name=node.name;if(name!==''){node.name='';}{// When syncing the checked attribute, both the checked property and
// attribute are assigned at the same time using defaultChecked. This uses:
//
//   1. The checked React property when present
//   2. The defaultChecked React property when present
//   3. Otherwise, false
node.defaultChecked=!node.defaultChecked;node.defaultChecked=!!node._wrapperState.initialChecked;}if(name!==''){node.name=name;}}function restoreControlledState(element,props){var node=element;updateWrapper(node,props);updateNamedCousins(node,props);}function updateNamedCousins(rootNode,props){var name=props.name;if(props.type==='radio'&&name!=null){var queryRoot=rootNode;while(queryRoot.parentNode){queryRoot=queryRoot.parentNode;}// If `rootNode.form` was non-null, then we could try `form.elements`,
// but that sometimes behaves strangely in IE8. We could also try using
// `form.getElementsByName`, but that will only return direct children
// and won't include inputs that use the HTML5 `form=` attribute. Since
// the input might not even be in a form. It might not even be in the
// document. Let's just use the local `querySelectorAll` to ensure we don't
// miss anything.
{checkAttributeStringCoercion(name,'name');}var group=queryRoot.querySelectorAll('input[name='+JSON.stringify(''+name)+'][type="radio"]');for(var i=0;i<group.length;i++){var otherNode=group[i];if(otherNode===rootNode||otherNode.form!==rootNode.form){continue;}// This will throw if radio buttons rendered by different copies of React
// and the same name are rendered into the same form (same as #1939).
// That's probably okay; we don't support it just as we don't support
// mixing React radio buttons with non-React ones.
var otherProps=getFiberCurrentPropsFromNode(otherNode);if(!otherProps){throw new Error('ReactDOMInput: Mixing React and non-React radio inputs with the '+'same `name` is not supported.');}// We need update the tracked value on the named cousin since the value
// was changed but the input saw no event or value set
updateValueIfChanged(otherNode);// If this is a controlled radio button group, forcing the input that
// was previously checked to update will cause it to be come re-checked
// as appropriate.
updateWrapper(otherNode,otherProps);}}}// In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253
function setDefaultValue(node,type,value){if(// Focused number inputs synchronize on blur. See ChangeEventPlugin.js
type!=='number'||getActiveElement(node.ownerDocument)!==node){if(value==null){node.defaultValue=toString(node._wrapperState.initialValue);}else if(node.defaultValue!==toString(value)){node.defaultValue=toString(value);}}}var didWarnSelectedSetOnOption=false;var didWarnInvalidChild=false;var didWarnInvalidInnerHTML=false;/**
 * Implements an <option> host component that warns when `selected` is set.
 */function validateProps(element,props){{// If a value is not provided, then the children must be simple.
if(props.value==null){if(_typeof(props.children)==='object'&&props.children!==null){React.Children.forEach(props.children,function(child){if(child==null){return;}if(typeof child==='string'||typeof child==='number'){return;}if(!didWarnInvalidChild){didWarnInvalidChild=true;error('Cannot infer the option value of complex children. '+'Pass a `value` prop or use a plain string as children to <option>.');}});}else if(props.dangerouslySetInnerHTML!=null){if(!didWarnInvalidInnerHTML){didWarnInvalidInnerHTML=true;error('Pass a `value` prop if you set dangerouslyInnerHTML so React knows '+'which value should be selected.');}}}// TODO: Remove support for `selected` in <option>.
if(props.selected!=null&&!didWarnSelectedSetOnOption){error('Use the `defaultValue` or `value` props on <select> instead of '+'setting `selected` on <option>.');didWarnSelectedSetOnOption=true;}}}function postMountWrapper$1(element,props){// value="" should make a value attribute (#6219)
if(props.value!=null){element.setAttribute('value',toString(getToStringValue(props.value)));}}var isArrayImpl=Array.isArray;// eslint-disable-next-line no-redeclare
function isArray(a){return isArrayImpl(a);}var didWarnValueDefaultValue$1;{didWarnValueDefaultValue$1=false;}function getDeclarationErrorAddendum(){var ownerName=getCurrentFiberOwnerNameInDevOrNull();if(ownerName){return'\n\nCheck the render method of `'+ownerName+'`.';}return'';}var valuePropNames=['value','defaultValue'];/**
 * Validation function for `value` and `defaultValue`.
 */function checkSelectPropTypes(props){{checkControlledValueProps('select',props);for(var i=0;i<valuePropNames.length;i++){var propName=valuePropNames[i];if(props[propName]==null){continue;}var propNameIsArray=isArray(props[propName]);if(props.multiple&&!propNameIsArray){error('The `%s` prop supplied to <select> must be an array if '+'`multiple` is true.%s',propName,getDeclarationErrorAddendum());}else if(!props.multiple&&propNameIsArray){error('The `%s` prop supplied to <select> must be a scalar '+'value if `multiple` is false.%s',propName,getDeclarationErrorAddendum());}}}}function updateOptions(node,multiple,propValue,setDefaultSelected){var options=node.options;if(multiple){var selectedValues=propValue;var selectedValue={};for(var i=0;i<selectedValues.length;i++){// Prefix to avoid chaos with special keys.
selectedValue['$'+selectedValues[i]]=true;}for(var _i=0;_i<options.length;_i++){var selected=selectedValue.hasOwnProperty('$'+options[_i].value);if(options[_i].selected!==selected){options[_i].selected=selected;}if(selected&&setDefaultSelected){options[_i].defaultSelected=true;}}}else{// Do not set `select.value` as exact behavior isn't consistent across all
// browsers for all cases.
var _selectedValue=toString(getToStringValue(propValue));var defaultSelected=null;for(var _i2=0;_i2<options.length;_i2++){if(options[_i2].value===_selectedValue){options[_i2].selected=true;if(setDefaultSelected){options[_i2].defaultSelected=true;}return;}if(defaultSelected===null&&!options[_i2].disabled){defaultSelected=options[_i2];}}if(defaultSelected!==null){defaultSelected.selected=true;}}}/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */function getHostProps$1(element,props){return assign({},props,{value:undefined});}function initWrapperState$1(element,props){var node=element;{checkSelectPropTypes(props);}node._wrapperState={wasMultiple:!!props.multiple};{if(props.value!==undefined&&props.defaultValue!==undefined&&!didWarnValueDefaultValue$1){error('Select elements must be either controlled or uncontrolled '+'(specify either the value prop, or the defaultValue prop, but not '+'both). Decide between using a controlled or uncontrolled select '+'element and remove one of these props. More info: '+'https://reactjs.org/link/controlled-components');didWarnValueDefaultValue$1=true;}}}function postMountWrapper$2(element,props){var node=element;node.multiple=!!props.multiple;var value=props.value;if(value!=null){updateOptions(node,!!props.multiple,value,false);}else if(props.defaultValue!=null){updateOptions(node,!!props.multiple,props.defaultValue,true);}}function postUpdateWrapper(element,props){var node=element;var wasMultiple=node._wrapperState.wasMultiple;node._wrapperState.wasMultiple=!!props.multiple;var value=props.value;if(value!=null){updateOptions(node,!!props.multiple,value,false);}else if(wasMultiple!==!!props.multiple){// For simplicity, reapply `defaultValue` if `multiple` is toggled.
if(props.defaultValue!=null){updateOptions(node,!!props.multiple,props.defaultValue,true);}else{// Revert the select back to its default unselected state.
updateOptions(node,!!props.multiple,props.multiple?[]:'',false);}}}function restoreControlledState$1(element,props){var node=element;var value=props.value;if(value!=null){updateOptions(node,!!props.multiple,value,false);}}var didWarnValDefaultVal=false;/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */function getHostProps$2(element,props){var node=element;if(props.dangerouslySetInnerHTML!=null){throw new Error('`dangerouslySetInnerHTML` does not make sense on <textarea>.');}// Always set children to the same thing. In IE9, the selection range will
// get reset if `textContent` is mutated.  We could add a check in setTextContent
// to only set the value if/when the value differs from the node value (which would
// completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
// solution. The value can be a boolean or object so that's why it's forced
// to be a string.
var hostProps=assign({},props,{value:undefined,defaultValue:undefined,children:toString(node._wrapperState.initialValue)});return hostProps;}function initWrapperState$2(element,props){var node=element;{checkControlledValueProps('textarea',props);if(props.value!==undefined&&props.defaultValue!==undefined&&!didWarnValDefaultVal){error('%s contains a textarea with both value and defaultValue props. '+'Textarea elements must be either controlled or uncontrolled '+'(specify either the value prop, or the defaultValue prop, but not '+'both). Decide between using a controlled or uncontrolled textarea '+'and remove one of these props. More info: '+'https://reactjs.org/link/controlled-components',getCurrentFiberOwnerNameInDevOrNull()||'A component');didWarnValDefaultVal=true;}}var initialValue=props.value;// Only bother fetching default value if we're going to use it
if(initialValue==null){var children=props.children,defaultValue=props.defaultValue;if(children!=null){{error('Use the `defaultValue` or `value` props instead of setting '+'children on <textarea>.');}{if(defaultValue!=null){throw new Error('If you supply `defaultValue` on a <textarea>, do not pass children.');}if(isArray(children)){if(children.length>1){throw new Error('<textarea> can only have at most one child.');}children=children[0];}defaultValue=children;}}if(defaultValue==null){defaultValue='';}initialValue=defaultValue;}node._wrapperState={initialValue:getToStringValue(initialValue)};}function updateWrapper$1(element,props){var node=element;var value=getToStringValue(props.value);var defaultValue=getToStringValue(props.defaultValue);if(value!=null){// Cast `value` to a string to ensure the value is set correctly. While
// browsers typically do this as necessary, jsdom doesn't.
var newValue=toString(value);// To avoid side effects (such as losing text selection), only set value if changed
if(newValue!==node.value){node.value=newValue;}if(props.defaultValue==null&&node.defaultValue!==newValue){node.defaultValue=newValue;}}if(defaultValue!=null){node.defaultValue=toString(defaultValue);}}function postMountWrapper$3(element,props){var node=element;// This is in postMount because we need access to the DOM node, which is not
// available until after the component has mounted.
var textContent=node.textContent;// Only set node.value if textContent is equal to the expected
// initial value. In IE10/IE11 there is a bug where the placeholder attribute
// will populate textContent as well.
// https://developer.microsoft.com/microsoft-edge/platform/issues/101525/
if(textContent===node._wrapperState.initialValue){if(textContent!==''&&textContent!==null){node.value=textContent;}}}function restoreControlledState$2(element,props){// DOM component is still mounted; update
updateWrapper$1(element,props);}var HTML_NAMESPACE='http://www.w3.org/1999/xhtml';var MATH_NAMESPACE='http://www.w3.org/1998/Math/MathML';var SVG_NAMESPACE='http://www.w3.org/2000/svg';// Assumes there is no parent namespace.
function getIntrinsicNamespace(type){switch(type){case'svg':return SVG_NAMESPACE;case'math':return MATH_NAMESPACE;default:return HTML_NAMESPACE;}}function getChildNamespace(parentNamespace,type){if(parentNamespace==null||parentNamespace===HTML_NAMESPACE){// No (or default) parent namespace: potential entry point.
return getIntrinsicNamespace(type);}if(parentNamespace===SVG_NAMESPACE&&type==='foreignObject'){// We're leaving SVG.
return HTML_NAMESPACE;}// By default, pass namespace below.
return parentNamespace;}/* globals MSApp *//**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */var createMicrosoftUnsafeLocalFunction=function createMicrosoftUnsafeLocalFunction(func){if(typeof MSApp!=='undefined'&&MSApp.execUnsafeLocalFunction){return function(arg0,arg1,arg2,arg3){MSApp.execUnsafeLocalFunction(function(){return func(arg0,arg1,arg2,arg3);});};}else{return func;}};var reusableSVGContainer;/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */var setInnerHTML=createMicrosoftUnsafeLocalFunction(function(node,html){if(node.namespaceURI===SVG_NAMESPACE){if(!('innerHTML'in node)){// IE does not have innerHTML for SVG nodes, so instead we inject the
// new markup in a temp node and then move the child nodes across into
// the target node
reusableSVGContainer=reusableSVGContainer||document.createElement('div');reusableSVGContainer.innerHTML='<svg>'+html.valueOf().toString()+'</svg>';var svgNode=reusableSVGContainer.firstChild;while(node.firstChild){node.removeChild(node.firstChild);}while(svgNode.firstChild){node.appendChild(svgNode.firstChild);}return;}}node.innerHTML=html;});/**
 * HTML nodeType values that represent the type of the node
 */var ELEMENT_NODE=1;var TEXT_NODE=3;var COMMENT_NODE=8;var DOCUMENT_NODE=9;var DOCUMENT_FRAGMENT_NODE=11;/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */var setTextContent=function setTextContent(node,text){if(text){var firstChild=node.firstChild;if(firstChild&&firstChild===node.lastChild&&firstChild.nodeType===TEXT_NODE){firstChild.nodeValue=text;return;}}node.textContent=text;};// List derived from Gecko source code:
// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
var shorthandToLonghand={animation:['animationDelay','animationDirection','animationDuration','animationFillMode','animationIterationCount','animationName','animationPlayState','animationTimingFunction'],background:['backgroundAttachment','backgroundClip','backgroundColor','backgroundImage','backgroundOrigin','backgroundPositionX','backgroundPositionY','backgroundRepeat','backgroundSize'],backgroundPosition:['backgroundPositionX','backgroundPositionY'],border:['borderBottomColor','borderBottomStyle','borderBottomWidth','borderImageOutset','borderImageRepeat','borderImageSlice','borderImageSource','borderImageWidth','borderLeftColor','borderLeftStyle','borderLeftWidth','borderRightColor','borderRightStyle','borderRightWidth','borderTopColor','borderTopStyle','borderTopWidth'],borderBlockEnd:['borderBlockEndColor','borderBlockEndStyle','borderBlockEndWidth'],borderBlockStart:['borderBlockStartColor','borderBlockStartStyle','borderBlockStartWidth'],borderBottom:['borderBottomColor','borderBottomStyle','borderBottomWidth'],borderColor:['borderBottomColor','borderLeftColor','borderRightColor','borderTopColor'],borderImage:['borderImageOutset','borderImageRepeat','borderImageSlice','borderImageSource','borderImageWidth'],borderInlineEnd:['borderInlineEndColor','borderInlineEndStyle','borderInlineEndWidth'],borderInlineStart:['borderInlineStartColor','borderInlineStartStyle','borderInlineStartWidth'],borderLeft:['borderLeftColor','borderLeftStyle','borderLeftWidth'],borderRadius:['borderBottomLeftRadius','borderBottomRightRadius','borderTopLeftRadius','borderTopRightRadius'],borderRight:['borderRightColor','borderRightStyle','borderRightWidth'],borderStyle:['borderBottomStyle','borderLeftStyle','borderRightStyle','borderTopStyle'],borderTop:['borderTopColor','borderTopStyle','borderTopWidth'],borderWidth:['borderBottomWidth','borderLeftWidth','borderRightWidth','borderTopWidth'],columnRule:['columnRuleColor','columnRuleStyle','columnRuleWidth'],columns:['columnCount','columnWidth'],flex:['flexBasis','flexGrow','flexShrink'],flexFlow:['flexDirection','flexWrap'],font:['fontFamily','fontFeatureSettings','fontKerning','fontLanguageOverride','fontSize','fontSizeAdjust','fontStretch','fontStyle','fontVariant','fontVariantAlternates','fontVariantCaps','fontVariantEastAsian','fontVariantLigatures','fontVariantNumeric','fontVariantPosition','fontWeight','lineHeight'],fontVariant:['fontVariantAlternates','fontVariantCaps','fontVariantEastAsian','fontVariantLigatures','fontVariantNumeric','fontVariantPosition'],gap:['columnGap','rowGap'],grid:['gridAutoColumns','gridAutoFlow','gridAutoRows','gridTemplateAreas','gridTemplateColumns','gridTemplateRows'],gridArea:['gridColumnEnd','gridColumnStart','gridRowEnd','gridRowStart'],gridColumn:['gridColumnEnd','gridColumnStart'],gridColumnGap:['columnGap'],gridGap:['columnGap','rowGap'],gridRow:['gridRowEnd','gridRowStart'],gridRowGap:['rowGap'],gridTemplate:['gridTemplateAreas','gridTemplateColumns','gridTemplateRows'],listStyle:['listStyleImage','listStylePosition','listStyleType'],margin:['marginBottom','marginLeft','marginRight','marginTop'],marker:['markerEnd','markerMid','markerStart'],mask:['maskClip','maskComposite','maskImage','maskMode','maskOrigin','maskPositionX','maskPositionY','maskRepeat','maskSize'],maskPosition:['maskPositionX','maskPositionY'],outline:['outlineColor','outlineStyle','outlineWidth'],overflow:['overflowX','overflowY'],padding:['paddingBottom','paddingLeft','paddingRight','paddingTop'],placeContent:['alignContent','justifyContent'],placeItems:['alignItems','justifyItems'],placeSelf:['alignSelf','justifySelf'],textDecoration:['textDecorationColor','textDecorationLine','textDecorationStyle'],textEmphasis:['textEmphasisColor','textEmphasisStyle'],transition:['transitionDelay','transitionDuration','transitionProperty','transitionTimingFunction'],wordWrap:['overflowWrap']};/**
 * CSS properties which accept numbers but are not in units of "px".
 */var isUnitlessNumber={animationIterationCount:true,aspectRatio:true,borderImageOutset:true,borderImageSlice:true,borderImageWidth:true,boxFlex:true,boxFlexGroup:true,boxOrdinalGroup:true,columnCount:true,columns:true,flex:true,flexGrow:true,flexPositive:true,flexShrink:true,flexNegative:true,flexOrder:true,gridArea:true,gridRow:true,gridRowEnd:true,gridRowSpan:true,gridRowStart:true,gridColumn:true,gridColumnEnd:true,gridColumnSpan:true,gridColumnStart:true,fontWeight:true,lineClamp:true,lineHeight:true,opacity:true,order:true,orphans:true,tabSize:true,widows:true,zIndex:true,zoom:true,// SVG-related properties
fillOpacity:true,floodOpacity:true,stopOpacity:true,strokeDasharray:true,strokeDashoffset:true,strokeMiterlimit:true,strokeOpacity:true,strokeWidth:true};/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */function prefixKey(prefix,key){return prefix+key.charAt(0).toUpperCase()+key.substring(1);}/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */var prefixes=['Webkit','ms','Moz','O'];// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function(prop){prefixes.forEach(function(prefix){isUnitlessNumber[prefixKey(prefix,prop)]=isUnitlessNumber[prop];});});/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */function dangerousStyleValue(name,value,isCustomProperty){// Note that we've removed escapeTextForBrowser() calls here since the
// whole string will be escaped when the attribute is injected into
// the markup. If you provide unsafe user data here they can inject
// arbitrary CSS which may be problematic (I couldn't repro this):
// https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
// http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
// This is not an XSS hole but instead a potential CSS injection issue
// which has lead to a greater discussion about how we're going to
// trust URLs moving forward. See #2115901
var isEmpty=value==null||typeof value==='boolean'||value==='';if(isEmpty){return'';}if(!isCustomProperty&&typeof value==='number'&&value!==0&&!(isUnitlessNumber.hasOwnProperty(name)&&isUnitlessNumber[name])){return value+'px';// Presumes implicit 'px' suffix for unitless numbers
}{checkCSSPropertyStringCoercion(value,name);}return(''+value).trim();}var uppercasePattern=/([A-Z])/g;var msPattern=/^ms-/;/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */function hyphenateStyleName(name){return name.replace(uppercasePattern,'-$1').toLowerCase().replace(msPattern,'-ms-');}var warnValidStyle=function warnValidStyle(){};{// 'msTransform' is correct, but the other prefixes should be capitalized
var badVendoredStyleNamePattern=/^(?:webkit|moz|o)[A-Z]/;var msPattern$1=/^-ms-/;var hyphenPattern=/-(.)/g;// style values shouldn't contain a semicolon
var badStyleValueWithSemicolonPattern=/;\s*$/;var warnedStyleNames={};var warnedStyleValues={};var warnedForNaNValue=false;var warnedForInfinityValue=false;var camelize=function camelize(string){return string.replace(hyphenPattern,function(_,character){return character.toUpperCase();});};var warnHyphenatedStyleName=function warnHyphenatedStyleName(name){if(warnedStyleNames.hasOwnProperty(name)&&warnedStyleNames[name]){return;}warnedStyleNames[name]=true;error('Unsupported style property %s. Did you mean %s?',name,// As Andi Smith suggests
// (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
// is converted to lowercase `ms`.
camelize(name.replace(msPattern$1,'ms-')));};var warnBadVendoredStyleName=function warnBadVendoredStyleName(name){if(warnedStyleNames.hasOwnProperty(name)&&warnedStyleNames[name]){return;}warnedStyleNames[name]=true;error('Unsupported vendor-prefixed style property %s. Did you mean %s?',name,name.charAt(0).toUpperCase()+name.slice(1));};var warnStyleValueWithSemicolon=function warnStyleValueWithSemicolon(name,value){if(warnedStyleValues.hasOwnProperty(value)&&warnedStyleValues[value]){return;}warnedStyleValues[value]=true;error("Style property values shouldn't contain a semicolon. "+'Try "%s: %s" instead.',name,value.replace(badStyleValueWithSemicolonPattern,''));};var warnStyleValueIsNaN=function warnStyleValueIsNaN(name,value){if(warnedForNaNValue){return;}warnedForNaNValue=true;error('`NaN` is an invalid value for the `%s` css style property.',name);};var warnStyleValueIsInfinity=function warnStyleValueIsInfinity(name,value){if(warnedForInfinityValue){return;}warnedForInfinityValue=true;error('`Infinity` is an invalid value for the `%s` css style property.',name);};warnValidStyle=function warnValidStyle(name,value){if(name.indexOf('-')>-1){warnHyphenatedStyleName(name);}else if(badVendoredStyleNamePattern.test(name)){warnBadVendoredStyleName(name);}else if(badStyleValueWithSemicolonPattern.test(value)){warnStyleValueWithSemicolon(name,value);}if(typeof value==='number'){if(isNaN(value)){warnStyleValueIsNaN(name,value);}else if(!isFinite(value)){warnStyleValueIsInfinity(name,value);}}};}var warnValidStyle$1=warnValidStyle;/**
 * Operations for dealing with CSS properties.
 *//**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */function createDangerousStringForStyles(styles){{var serialized='';var delimiter='';for(var styleName in styles){if(!styles.hasOwnProperty(styleName)){continue;}var styleValue=styles[styleName];if(styleValue!=null){var isCustomProperty=styleName.indexOf('--')===0;serialized+=delimiter+(isCustomProperty?styleName:hyphenateStyleName(styleName))+':';serialized+=dangerousStyleValue(styleName,styleValue,isCustomProperty);delimiter=';';}}return serialized||null;}}/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */function setValueForStyles(node,styles){var style=node.style;for(var styleName in styles){if(!styles.hasOwnProperty(styleName)){continue;}var isCustomProperty=styleName.indexOf('--')===0;{if(!isCustomProperty){warnValidStyle$1(styleName,styles[styleName]);}}var styleValue=dangerousStyleValue(styleName,styles[styleName],isCustomProperty);if(styleName==='float'){styleName='cssFloat';}if(isCustomProperty){style.setProperty(styleName,styleValue);}else{style[styleName]=styleValue;}}}function isValueEmpty(value){return value==null||typeof value==='boolean'||value==='';}/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */function expandShorthandMap(styles){var expanded={};for(var key in styles){var longhands=shorthandToLonghand[key]||[key];for(var i=0;i<longhands.length;i++){expanded[longhands[i]]=key;}}return expanded;}/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */function validateShorthandPropertyCollisionInDev(styleUpdates,nextStyles){{if(!nextStyles){return;}var expandedUpdates=expandShorthandMap(styleUpdates);var expandedStyles=expandShorthandMap(nextStyles);var warnedAbout={};for(var key in expandedUpdates){var originalKey=expandedUpdates[key];var correctOriginalKey=expandedStyles[key];if(correctOriginalKey&&originalKey!==correctOriginalKey){var warningKey=originalKey+','+correctOriginalKey;if(warnedAbout[warningKey]){continue;}warnedAbout[warningKey]=true;error('%s a style property during rerender (%s) when a '+'conflicting property is set (%s) can lead to styling bugs. To '+"avoid this, don't mix shorthand and non-shorthand properties "+'for the same value; instead, replace the shorthand with '+'separate values.',isValueEmpty(styleUpdates[originalKey])?'Removing':'Updating',originalKey,correctOriginalKey);}}}}// For HTML, certain tags should omit their close tag. We keep a list for
// those special-case tags.
var omittedCloseTags={area:true,base:true,br:true,col:true,embed:true,hr:true,img:true,input:true,keygen:true,link:true,meta:true,param:true,source:true,track:true,wbr:true// NOTE: menuitem's close tag should be omitted, but that causes problems.
};// `omittedCloseTags` except that `menuitem` should still have its closing tag.
var voidElementTags=assign({menuitem:true},omittedCloseTags);var HTML='__html';function assertValidProps(tag,props){if(!props){return;}// Note the use of `==` which checks for null or undefined.
if(voidElementTags[tag]){if(props.children!=null||props.dangerouslySetInnerHTML!=null){throw new Error(tag+" is a void element tag and must neither have `children` nor "+'use `dangerouslySetInnerHTML`.');}}if(props.dangerouslySetInnerHTML!=null){if(props.children!=null){throw new Error('Can only set one of `children` or `props.dangerouslySetInnerHTML`.');}if(_typeof(props.dangerouslySetInnerHTML)!=='object'||!(HTML in props.dangerouslySetInnerHTML)){throw new Error('`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. '+'Please visit https://reactjs.org/link/dangerously-set-inner-html '+'for more information.');}}{if(!props.suppressContentEditableWarning&&props.contentEditable&&props.children!=null){error('A component is `contentEditable` and contains `children` managed by '+'React. It is now your responsibility to guarantee that none of '+'those nodes are unexpectedly modified or duplicated. This is '+'probably not intentional.');}}if(props.style!=null&&_typeof(props.style)!=='object'){throw new Error('The `style` prop expects a mapping from style properties to values, '+"not a string. For example, style={{marginRight: spacing + 'em'}} when "+'using JSX.');}}function isCustomComponent(tagName,props){if(tagName.indexOf('-')===-1){return typeof props.is==='string';}switch(tagName){// These are reserved SVG and MathML elements.
// We don't mind this list too much because we expect it to never grow.
// The alternative is to track the namespace in a few places which is convoluted.
// https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
case'annotation-xml':case'color-profile':case'font-face':case'font-face-src':case'font-face-uri':case'font-face-format':case'font-face-name':case'missing-glyph':return false;default:return true;}}// When adding attributes to the HTML or SVG allowed attribute list, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames={// HTML
accept:'accept',acceptcharset:'acceptCharset','accept-charset':'acceptCharset',accesskey:'accessKey',action:'action',allowfullscreen:'allowFullScreen',alt:'alt',as:'as',async:'async',autocapitalize:'autoCapitalize',autocomplete:'autoComplete',autocorrect:'autoCorrect',autofocus:'autoFocus',autoplay:'autoPlay',autosave:'autoSave',capture:'capture',cellpadding:'cellPadding',cellspacing:'cellSpacing',challenge:'challenge',charset:'charSet',checked:'checked',children:'children',cite:'cite',"class":'className',classid:'classID',classname:'className',cols:'cols',colspan:'colSpan',content:'content',contenteditable:'contentEditable',contextmenu:'contextMenu',controls:'controls',controlslist:'controlsList',coords:'coords',crossorigin:'crossOrigin',dangerouslysetinnerhtml:'dangerouslySetInnerHTML',data:'data',datetime:'dateTime',"default":'default',defaultchecked:'defaultChecked',defaultvalue:'defaultValue',defer:'defer',dir:'dir',disabled:'disabled',disablepictureinpicture:'disablePictureInPicture',disableremoteplayback:'disableRemotePlayback',download:'download',draggable:'draggable',enctype:'encType',enterkeyhint:'enterKeyHint',"for":'htmlFor',form:'form',formmethod:'formMethod',formaction:'formAction',formenctype:'formEncType',formnovalidate:'formNoValidate',formtarget:'formTarget',frameborder:'frameBorder',headers:'headers',height:'height',hidden:'hidden',high:'high',href:'href',hreflang:'hrefLang',htmlfor:'htmlFor',httpequiv:'httpEquiv','http-equiv':'httpEquiv',icon:'icon',id:'id',imagesizes:'imageSizes',imagesrcset:'imageSrcSet',innerhtml:'innerHTML',inputmode:'inputMode',integrity:'integrity',is:'is',itemid:'itemID',itemprop:'itemProp',itemref:'itemRef',itemscope:'itemScope',itemtype:'itemType',keyparams:'keyParams',keytype:'keyType',kind:'kind',label:'label',lang:'lang',list:'list',loop:'loop',low:'low',manifest:'manifest',marginwidth:'marginWidth',marginheight:'marginHeight',max:'max',maxlength:'maxLength',media:'media',mediagroup:'mediaGroup',method:'method',min:'min',minlength:'minLength',multiple:'multiple',muted:'muted',name:'name',nomodule:'noModule',nonce:'nonce',novalidate:'noValidate',open:'open',optimum:'optimum',pattern:'pattern',placeholder:'placeholder',playsinline:'playsInline',poster:'poster',preload:'preload',profile:'profile',radiogroup:'radioGroup',readonly:'readOnly',referrerpolicy:'referrerPolicy',rel:'rel',required:'required',reversed:'reversed',role:'role',rows:'rows',rowspan:'rowSpan',sandbox:'sandbox',scope:'scope',scoped:'scoped',scrolling:'scrolling',seamless:'seamless',selected:'selected',shape:'shape',size:'size',sizes:'sizes',span:'span',spellcheck:'spellCheck',src:'src',srcdoc:'srcDoc',srclang:'srcLang',srcset:'srcSet',start:'start',step:'step',style:'style',summary:'summary',tabindex:'tabIndex',target:'target',title:'title',type:'type',usemap:'useMap',value:'value',width:'width',wmode:'wmode',wrap:'wrap',// SVG
about:'about',accentheight:'accentHeight','accent-height':'accentHeight',accumulate:'accumulate',additive:'additive',alignmentbaseline:'alignmentBaseline','alignment-baseline':'alignmentBaseline',allowreorder:'allowReorder',alphabetic:'alphabetic',amplitude:'amplitude',arabicform:'arabicForm','arabic-form':'arabicForm',ascent:'ascent',attributename:'attributeName',attributetype:'attributeType',autoreverse:'autoReverse',azimuth:'azimuth',basefrequency:'baseFrequency',baselineshift:'baselineShift','baseline-shift':'baselineShift',baseprofile:'baseProfile',bbox:'bbox',begin:'begin',bias:'bias',by:'by',calcmode:'calcMode',capheight:'capHeight','cap-height':'capHeight',clip:'clip',clippath:'clipPath','clip-path':'clipPath',clippathunits:'clipPathUnits',cliprule:'clipRule','clip-rule':'clipRule',color:'color',colorinterpolation:'colorInterpolation','color-interpolation':'colorInterpolation',colorinterpolationfilters:'colorInterpolationFilters','color-interpolation-filters':'colorInterpolationFilters',colorprofile:'colorProfile','color-profile':'colorProfile',colorrendering:'colorRendering','color-rendering':'colorRendering',contentscripttype:'contentScriptType',contentstyletype:'contentStyleType',cursor:'cursor',cx:'cx',cy:'cy',d:'d',datatype:'datatype',decelerate:'decelerate',descent:'descent',diffuseconstant:'diffuseConstant',direction:'direction',display:'display',divisor:'divisor',dominantbaseline:'dominantBaseline','dominant-baseline':'dominantBaseline',dur:'dur',dx:'dx',dy:'dy',edgemode:'edgeMode',elevation:'elevation',enablebackground:'enableBackground','enable-background':'enableBackground',end:'end',exponent:'exponent',externalresourcesrequired:'externalResourcesRequired',fill:'fill',fillopacity:'fillOpacity','fill-opacity':'fillOpacity',fillrule:'fillRule','fill-rule':'fillRule',filter:'filter',filterres:'filterRes',filterunits:'filterUnits',floodopacity:'floodOpacity','flood-opacity':'floodOpacity',floodcolor:'floodColor','flood-color':'floodColor',focusable:'focusable',fontfamily:'fontFamily','font-family':'fontFamily',fontsize:'fontSize','font-size':'fontSize',fontsizeadjust:'fontSizeAdjust','font-size-adjust':'fontSizeAdjust',fontstretch:'fontStretch','font-stretch':'fontStretch',fontstyle:'fontStyle','font-style':'fontStyle',fontvariant:'fontVariant','font-variant':'fontVariant',fontweight:'fontWeight','font-weight':'fontWeight',format:'format',from:'from',fx:'fx',fy:'fy',g1:'g1',g2:'g2',glyphname:'glyphName','glyph-name':'glyphName',glyphorientationhorizontal:'glyphOrientationHorizontal','glyph-orientation-horizontal':'glyphOrientationHorizontal',glyphorientationvertical:'glyphOrientationVertical','glyph-orientation-vertical':'glyphOrientationVertical',glyphref:'glyphRef',gradienttransform:'gradientTransform',gradientunits:'gradientUnits',hanging:'hanging',horizadvx:'horizAdvX','horiz-adv-x':'horizAdvX',horizoriginx:'horizOriginX','horiz-origin-x':'horizOriginX',ideographic:'ideographic',imagerendering:'imageRendering','image-rendering':'imageRendering',in2:'in2',"in":'in',inlist:'inlist',intercept:'intercept',k1:'k1',k2:'k2',k3:'k3',k4:'k4',k:'k',kernelmatrix:'kernelMatrix',kernelunitlength:'kernelUnitLength',kerning:'kerning',keypoints:'keyPoints',keysplines:'keySplines',keytimes:'keyTimes',lengthadjust:'lengthAdjust',letterspacing:'letterSpacing','letter-spacing':'letterSpacing',lightingcolor:'lightingColor','lighting-color':'lightingColor',limitingconeangle:'limitingConeAngle',local:'local',markerend:'markerEnd','marker-end':'markerEnd',markerheight:'markerHeight',markermid:'markerMid','marker-mid':'markerMid',markerstart:'markerStart','marker-start':'markerStart',markerunits:'markerUnits',markerwidth:'markerWidth',mask:'mask',maskcontentunits:'maskContentUnits',maskunits:'maskUnits',mathematical:'mathematical',mode:'mode',numoctaves:'numOctaves',offset:'offset',opacity:'opacity',operator:'operator',order:'order',orient:'orient',orientation:'orientation',origin:'origin',overflow:'overflow',overlineposition:'overlinePosition','overline-position':'overlinePosition',overlinethickness:'overlineThickness','overline-thickness':'overlineThickness',paintorder:'paintOrder','paint-order':'paintOrder',panose1:'panose1','panose-1':'panose1',pathlength:'pathLength',patterncontentunits:'patternContentUnits',patterntransform:'patternTransform',patternunits:'patternUnits',pointerevents:'pointerEvents','pointer-events':'pointerEvents',points:'points',pointsatx:'pointsAtX',pointsaty:'pointsAtY',pointsatz:'pointsAtZ',prefix:'prefix',preservealpha:'preserveAlpha',preserveaspectratio:'preserveAspectRatio',primitiveunits:'primitiveUnits',property:'property',r:'r',radius:'radius',refx:'refX',refy:'refY',renderingintent:'renderingIntent','rendering-intent':'renderingIntent',repeatcount:'repeatCount',repeatdur:'repeatDur',requiredextensions:'requiredExtensions',requiredfeatures:'requiredFeatures',resource:'resource',restart:'restart',result:'result',results:'results',rotate:'rotate',rx:'rx',ry:'ry',scale:'scale',security:'security',seed:'seed',shaperendering:'shapeRendering','shape-rendering':'shapeRendering',slope:'slope',spacing:'spacing',specularconstant:'specularConstant',specularexponent:'specularExponent',speed:'speed',spreadmethod:'spreadMethod',startoffset:'startOffset',stddeviation:'stdDeviation',stemh:'stemh',stemv:'stemv',stitchtiles:'stitchTiles',stopcolor:'stopColor','stop-color':'stopColor',stopopacity:'stopOpacity','stop-opacity':'stopOpacity',strikethroughposition:'strikethroughPosition','strikethrough-position':'strikethroughPosition',strikethroughthickness:'strikethroughThickness','strikethrough-thickness':'strikethroughThickness',string:'string',stroke:'stroke',strokedasharray:'strokeDasharray','stroke-dasharray':'strokeDasharray',strokedashoffset:'strokeDashoffset','stroke-dashoffset':'strokeDashoffset',strokelinecap:'strokeLinecap','stroke-linecap':'strokeLinecap',strokelinejoin:'strokeLinejoin','stroke-linejoin':'strokeLinejoin',strokemiterlimit:'strokeMiterlimit','stroke-miterlimit':'strokeMiterlimit',strokewidth:'strokeWidth','stroke-width':'strokeWidth',strokeopacity:'strokeOpacity','stroke-opacity':'strokeOpacity',suppresscontenteditablewarning:'suppressContentEditableWarning',suppresshydrationwarning:'suppressHydrationWarning',surfacescale:'surfaceScale',systemlanguage:'systemLanguage',tablevalues:'tableValues',targetx:'targetX',targety:'targetY',textanchor:'textAnchor','text-anchor':'textAnchor',textdecoration:'textDecoration','text-decoration':'textDecoration',textlength:'textLength',textrendering:'textRendering','text-rendering':'textRendering',to:'to',transform:'transform',"typeof":'typeof',u1:'u1',u2:'u2',underlineposition:'underlinePosition','underline-position':'underlinePosition',underlinethickness:'underlineThickness','underline-thickness':'underlineThickness',unicode:'unicode',unicodebidi:'unicodeBidi','unicode-bidi':'unicodeBidi',unicoderange:'unicodeRange','unicode-range':'unicodeRange',unitsperem:'unitsPerEm','units-per-em':'unitsPerEm',unselectable:'unselectable',valphabetic:'vAlphabetic','v-alphabetic':'vAlphabetic',values:'values',vectoreffect:'vectorEffect','vector-effect':'vectorEffect',version:'version',vertadvy:'vertAdvY','vert-adv-y':'vertAdvY',vertoriginx:'vertOriginX','vert-origin-x':'vertOriginX',vertoriginy:'vertOriginY','vert-origin-y':'vertOriginY',vhanging:'vHanging','v-hanging':'vHanging',videographic:'vIdeographic','v-ideographic':'vIdeographic',viewbox:'viewBox',viewtarget:'viewTarget',visibility:'visibility',vmathematical:'vMathematical','v-mathematical':'vMathematical',vocab:'vocab',widths:'widths',wordspacing:'wordSpacing','word-spacing':'wordSpacing',writingmode:'writingMode','writing-mode':'writingMode',x1:'x1',x2:'x2',x:'x',xchannelselector:'xChannelSelector',xheight:'xHeight','x-height':'xHeight',xlinkactuate:'xlinkActuate','xlink:actuate':'xlinkActuate',xlinkarcrole:'xlinkArcrole','xlink:arcrole':'xlinkArcrole',xlinkhref:'xlinkHref','xlink:href':'xlinkHref',xlinkrole:'xlinkRole','xlink:role':'xlinkRole',xlinkshow:'xlinkShow','xlink:show':'xlinkShow',xlinktitle:'xlinkTitle','xlink:title':'xlinkTitle',xlinktype:'xlinkType','xlink:type':'xlinkType',xmlbase:'xmlBase','xml:base':'xmlBase',xmllang:'xmlLang','xml:lang':'xmlLang',xmlns:'xmlns','xml:space':'xmlSpace',xmlnsxlink:'xmlnsXlink','xmlns:xlink':'xmlnsXlink',xmlspace:'xmlSpace',y1:'y1',y2:'y2',y:'y',ychannelselector:'yChannelSelector',z:'z',zoomandpan:'zoomAndPan'};var ariaProperties={'aria-current':0,// state
'aria-description':0,'aria-details':0,'aria-disabled':0,// state
'aria-hidden':0,// state
'aria-invalid':0,// state
'aria-keyshortcuts':0,'aria-label':0,'aria-roledescription':0,// Widget Attributes
'aria-autocomplete':0,'aria-checked':0,'aria-expanded':0,'aria-haspopup':0,'aria-level':0,'aria-modal':0,'aria-multiline':0,'aria-multiselectable':0,'aria-orientation':0,'aria-placeholder':0,'aria-pressed':0,'aria-readonly':0,'aria-required':0,'aria-selected':0,'aria-sort':0,'aria-valuemax':0,'aria-valuemin':0,'aria-valuenow':0,'aria-valuetext':0,// Live Region Attributes
'aria-atomic':0,'aria-busy':0,'aria-live':0,'aria-relevant':0,// Drag-and-Drop Attributes
'aria-dropeffect':0,'aria-grabbed':0,// Relationship Attributes
'aria-activedescendant':0,'aria-colcount':0,'aria-colindex':0,'aria-colspan':0,'aria-controls':0,'aria-describedby':0,'aria-errormessage':0,'aria-flowto':0,'aria-labelledby':0,'aria-owns':0,'aria-posinset':0,'aria-rowcount':0,'aria-rowindex':0,'aria-rowspan':0,'aria-setsize':0};var warnedProperties={};var rARIA=new RegExp('^(aria)-['+ATTRIBUTE_NAME_CHAR+']*$');var rARIACamel=new RegExp('^(aria)[A-Z]['+ATTRIBUTE_NAME_CHAR+']*$');function validateProperty(tagName,name){{if(hasOwnProperty.call(warnedProperties,name)&&warnedProperties[name]){return true;}if(rARIACamel.test(name)){var ariaName='aria-'+name.slice(4).toLowerCase();var correctName=ariaProperties.hasOwnProperty(ariaName)?ariaName:null;// If this is an aria-* attribute, but is not listed in the known DOM
// DOM properties, then it is an invalid aria-* attribute.
if(correctName==null){error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.',name);warnedProperties[name]=true;return true;}// aria-* attributes should be lowercase; suggest the lowercase version.
if(name!==correctName){error('Invalid ARIA attribute `%s`. Did you mean `%s`?',name,correctName);warnedProperties[name]=true;return true;}}if(rARIA.test(name)){var lowerCasedName=name.toLowerCase();var standardName=ariaProperties.hasOwnProperty(lowerCasedName)?lowerCasedName:null;// If this is an aria-* attribute, but is not listed in the known DOM
// DOM properties, then it is an invalid aria-* attribute.
if(standardName==null){warnedProperties[name]=true;return false;}// aria-* attributes should be lowercase; suggest the lowercase version.
if(name!==standardName){error('Unknown ARIA attribute `%s`. Did you mean `%s`?',name,standardName);warnedProperties[name]=true;return true;}}}return true;}function warnInvalidARIAProps(type,props){{var invalidProps=[];for(var key in props){var isValid=validateProperty(type,key);if(!isValid){invalidProps.push(key);}}var unknownPropString=invalidProps.map(function(prop){return'`'+prop+'`';}).join(', ');if(invalidProps.length===1){error('Invalid aria prop %s on <%s> tag. '+'For details, see https://reactjs.org/link/invalid-aria-props',unknownPropString,type);}else if(invalidProps.length>1){error('Invalid aria props %s on <%s> tag. '+'For details, see https://reactjs.org/link/invalid-aria-props',unknownPropString,type);}}}function validateProperties(type,props){if(isCustomComponent(type,props)){return;}warnInvalidARIAProps(type,props);}var didWarnValueNull=false;function validateProperties$1(type,props){{if(type!=='input'&&type!=='textarea'&&type!=='select'){return;}if(props!=null&&props.value===null&&!didWarnValueNull){didWarnValueNull=true;if(type==='select'&&props.multiple){error('`value` prop on `%s` should not be null. '+'Consider using an empty array when `multiple` is set to `true` '+'to clear the component or `undefined` for uncontrolled components.',type);}else{error('`value` prop on `%s` should not be null. '+'Consider using an empty string to clear the component or `undefined` '+'for uncontrolled components.',type);}}}}var validateProperty$1=function validateProperty$1(){};{var warnedProperties$1={};var EVENT_NAME_REGEX=/^on./;var INVALID_EVENT_NAME_REGEX=/^on[^A-Z]/;var rARIA$1=new RegExp('^(aria)-['+ATTRIBUTE_NAME_CHAR+']*$');var rARIACamel$1=new RegExp('^(aria)[A-Z]['+ATTRIBUTE_NAME_CHAR+']*$');validateProperty$1=function validateProperty$1(tagName,name,value,eventRegistry){if(hasOwnProperty.call(warnedProperties$1,name)&&warnedProperties$1[name]){return true;}var lowerCasedName=name.toLowerCase();if(lowerCasedName==='onfocusin'||lowerCasedName==='onfocusout'){error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. '+'All React events are normalized to bubble, so onFocusIn and onFocusOut '+'are not needed/supported by React.');warnedProperties$1[name]=true;return true;}// We can't rely on the event system being injected on the server.
if(eventRegistry!=null){var registrationNameDependencies=eventRegistry.registrationNameDependencies,possibleRegistrationNames=eventRegistry.possibleRegistrationNames;if(registrationNameDependencies.hasOwnProperty(name)){return true;}var registrationName=possibleRegistrationNames.hasOwnProperty(lowerCasedName)?possibleRegistrationNames[lowerCasedName]:null;if(registrationName!=null){error('Invalid event handler property `%s`. Did you mean `%s`?',name,registrationName);warnedProperties$1[name]=true;return true;}if(EVENT_NAME_REGEX.test(name)){error('Unknown event handler property `%s`. It will be ignored.',name);warnedProperties$1[name]=true;return true;}}else if(EVENT_NAME_REGEX.test(name)){// If no event plugins have been injected, we are in a server environment.
// So we can't tell if the event name is correct for sure, but we can filter
// out known bad ones like `onclick`. We can't suggest a specific replacement though.
if(INVALID_EVENT_NAME_REGEX.test(name)){error('Invalid event handler property `%s`. '+'React events use the camelCase naming convention, for example `onClick`.',name);}warnedProperties$1[name]=true;return true;}// Let the ARIA attribute hook validate ARIA attributes
if(rARIA$1.test(name)||rARIACamel$1.test(name)){return true;}if(lowerCasedName==='innerhtml'){error('Directly setting property `innerHTML` is not permitted. '+'For more information, lookup documentation on `dangerouslySetInnerHTML`.');warnedProperties$1[name]=true;return true;}if(lowerCasedName==='aria'){error('The `aria` attribute is reserved for future use in React. '+'Pass individual `aria-` attributes instead.');warnedProperties$1[name]=true;return true;}if(lowerCasedName==='is'&&value!==null&&value!==undefined&&typeof value!=='string'){error('Received a `%s` for a string attribute `is`. If this is expected, cast '+'the value to a string.',_typeof(value));warnedProperties$1[name]=true;return true;}if(typeof value==='number'&&isNaN(value)){error('Received NaN for the `%s` attribute. If this is expected, cast '+'the value to a string.',name);warnedProperties$1[name]=true;return true;}var propertyInfo=getPropertyInfo(name);var isReserved=propertyInfo!==null&&propertyInfo.type===RESERVED;// Known attributes should match the casing specified in the property config.
if(possibleStandardNames.hasOwnProperty(lowerCasedName)){var standardName=possibleStandardNames[lowerCasedName];if(standardName!==name){error('Invalid DOM property `%s`. Did you mean `%s`?',name,standardName);warnedProperties$1[name]=true;return true;}}else if(!isReserved&&name!==lowerCasedName){// Unknown attributes should have lowercase casing since that's how they
// will be cased anyway with server rendering.
error('React does not recognize the `%s` prop on a DOM element. If you '+'intentionally want it to appear in the DOM as a custom '+'attribute, spell it as lowercase `%s` instead. '+'If you accidentally passed it from a parent component, remove '+'it from the DOM element.',name,lowerCasedName);warnedProperties$1[name]=true;return true;}if(typeof value==='boolean'&&shouldRemoveAttributeWithWarning(name,value,propertyInfo,false)){if(value){error('Received `%s` for a non-boolean attribute `%s`.\n\n'+'If you want to write it to the DOM, pass a string instead: '+'%s="%s" or %s={value.toString()}.',value,name,name,value,name);}else{error('Received `%s` for a non-boolean attribute `%s`.\n\n'+'If you want to write it to the DOM, pass a string instead: '+'%s="%s" or %s={value.toString()}.\n\n'+'If you used to conditionally omit it with %s={condition && value}, '+'pass %s={condition ? value : undefined} instead.',value,name,name,value,name,name,name);}warnedProperties$1[name]=true;return true;}// Now that we've validated casing, do not validate
// data types for reserved props
if(isReserved){return true;}// Warn when a known attribute is a bad type
if(shouldRemoveAttributeWithWarning(name,value,propertyInfo,false)){warnedProperties$1[name]=true;return false;}// Warn when passing the strings 'false' or 'true' into a boolean prop
if((value==='false'||value==='true')&&propertyInfo!==null&&propertyInfo.type===BOOLEAN){error('Received the string `%s` for the boolean attribute `%s`. '+'%s '+'Did you mean %s={%s}?',value,name,value==='false'?'The browser will interpret it as a truthy value.':'Although this works, it will not work as expected if you pass the string "false".',name,value);warnedProperties$1[name]=true;return true;}return true;};}var warnUnknownProperties=function warnUnknownProperties(type,props,eventRegistry){{var unknownProps=[];for(var key in props){var isValid=validateProperty$1(type,key,props[key],eventRegistry);if(!isValid){unknownProps.push(key);}}var unknownPropString=unknownProps.map(function(prop){return'`'+prop+'`';}).join(', ');if(unknownProps.length===1){error('Invalid value for prop %s on <%s> tag. Either remove it from the element, '+'or pass a string or number value to keep it in the DOM. '+'For details, see https://reactjs.org/link/attribute-behavior ',unknownPropString,type);}else if(unknownProps.length>1){error('Invalid values for props %s on <%s> tag. Either remove them from the element, '+'or pass a string or number value to keep them in the DOM. '+'For details, see https://reactjs.org/link/attribute-behavior ',unknownPropString,type);}}};function validateProperties$2(type,props,eventRegistry){if(isCustomComponent(type,props)){return;}warnUnknownProperties(type,props,eventRegistry);}var IS_EVENT_HANDLE_NON_MANAGED_NODE=1;var IS_NON_DELEGATED=1<<1;var IS_CAPTURE_PHASE=1<<2;// set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
// we call willDeferLaterForLegacyFBSupport, thus not bailing out
// will result in endless cycles like an infinite loop.
// We also don't want to defer during event replaying.
var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS=IS_EVENT_HANDLE_NON_MANAGED_NODE|IS_NON_DELEGATED|IS_CAPTURE_PHASE;// This exists to avoid circular dependency between ReactDOMEventReplaying
// and DOMPluginEventSystem.
var currentReplayingEvent=null;function setReplayingEvent(event){{if(currentReplayingEvent!==null){error('Expected currently replaying event to be null. This error '+'is likely caused by a bug in React. Please file an issue.');}}currentReplayingEvent=event;}function resetReplayingEvent(){{if(currentReplayingEvent===null){error('Expected currently replaying event to not be null. This error '+'is likely caused by a bug in React. Please file an issue.');}}currentReplayingEvent=null;}function isReplayingEvent(event){return event===currentReplayingEvent;}/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */function getEventTarget(nativeEvent){// Fallback to nativeEvent.srcElement for IE9
// https://github.com/facebook/react/issues/12506
var target=nativeEvent.target||nativeEvent.srcElement||window;// Normalize SVG <use> element events #4963
if(target.correspondingUseElement){target=target.correspondingUseElement;}// Safari may fire events on text nodes (Node.TEXT_NODE is 3).
// @see http://www.quirksmode.org/js/events_properties.html
return target.nodeType===TEXT_NODE?target.parentNode:target;}var restoreImpl=null;var restoreTarget=null;var restoreQueue=null;function restoreStateOfTarget(target){// We perform this translation at the end of the event loop so that we
// always receive the correct fiber here
var internalInstance=getInstanceFromNode(target);if(!internalInstance){// Unmounted
return;}if(typeof restoreImpl!=='function'){throw new Error('setRestoreImplementation() needs to be called to handle a target for controlled '+'events. This error is likely caused by a bug in React. Please file an issue.');}var stateNode=internalInstance.stateNode;// Guard against Fiber being unmounted.
if(stateNode){var _props=getFiberCurrentPropsFromNode(stateNode);restoreImpl(internalInstance.stateNode,internalInstance.type,_props);}}function setRestoreImplementation(impl){restoreImpl=impl;}function enqueueStateRestore(target){if(restoreTarget){if(restoreQueue){restoreQueue.push(target);}else{restoreQueue=[target];}}else{restoreTarget=target;}}function needsStateRestore(){return restoreTarget!==null||restoreQueue!==null;}function restoreStateIfNeeded(){if(!restoreTarget){return;}var target=restoreTarget;var queuedTargets=restoreQueue;restoreTarget=null;restoreQueue=null;restoreStateOfTarget(target);if(queuedTargets){for(var i=0;i<queuedTargets.length;i++){restoreStateOfTarget(queuedTargets[i]);}}}// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.
// Defaults
var batchedUpdatesImpl=function batchedUpdatesImpl(fn,bookkeeping){return fn(bookkeeping);};var flushSyncImpl=function flushSyncImpl(){};var isInsideEventHandler=false;function finishEventHandler(){// Here we wait until all updates have propagated, which is important
// when using controlled components within layers:
// https://github.com/facebook/react/issues/1698
// Then we restore state of any controlled component.
var controlledComponentsHavePendingUpdates=needsStateRestore();if(controlledComponentsHavePendingUpdates){// If a controlled event was fired, we may need to restore the state of
// the DOM node back to the controlled value. This is necessary when React
// bails out of the update without touching the DOM.
// TODO: Restore state in the microtask, after the discrete updates flush,
// instead of early flushing them here.
flushSyncImpl();restoreStateIfNeeded();}}function batchedUpdates(fn,a,b){if(isInsideEventHandler){// If we are currently inside another batch, we need to wait until it
// fully completes before restoring state.
return fn(a,b);}isInsideEventHandler=true;try{return batchedUpdatesImpl(fn,a,b);}finally{isInsideEventHandler=false;finishEventHandler();}}// TODO: Replace with flushSync
function setBatchingImplementation(_batchedUpdatesImpl,_discreteUpdatesImpl,_flushSyncImpl){batchedUpdatesImpl=_batchedUpdatesImpl;flushSyncImpl=_flushSyncImpl;}function isInteractive(tag){return tag==='button'||tag==='input'||tag==='select'||tag==='textarea';}function shouldPreventMouseEvent(name,type,props){switch(name){case'onClick':case'onClickCapture':case'onDoubleClick':case'onDoubleClickCapture':case'onMouseDown':case'onMouseDownCapture':case'onMouseMove':case'onMouseMoveCapture':case'onMouseUp':case'onMouseUpCapture':case'onMouseEnter':return!!(props.disabled&&isInteractive(type));default:return false;}}/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */function getListener(inst,registrationName){var stateNode=inst.stateNode;if(stateNode===null){// Work in progress (ex: onload events in incremental mode).
return null;}var props=getFiberCurrentPropsFromNode(stateNode);if(props===null){// Work in progress.
return null;}var listener=props[registrationName];if(shouldPreventMouseEvent(registrationName,inst.type,props)){return null;}if(listener&&typeof listener!=='function'){throw new Error("Expected `"+registrationName+"` listener to be a function, instead got a value of `"+_typeof(listener)+"` type.");}return listener;}var passiveBrowserEventsSupported=false;// Check if browser support events with passive listeners
// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
if(canUseDOM){try{var options={};// $FlowFixMe: Ignore Flow complaining about needing a value
Object.defineProperty(options,'passive',{get:function get(){passiveBrowserEventsSupported=true;}});window.addEventListener('test',options,options);window.removeEventListener('test',options,options);}catch(e){passiveBrowserEventsSupported=false;}}function invokeGuardedCallbackProd(name,func,context,a,b,c,d,e,f){var funcArgs=Array.prototype.slice.call(arguments,3);try{func.apply(context,funcArgs);}catch(error){this.onError(error);}}var invokeGuardedCallbackImpl=invokeGuardedCallbackProd;{// In DEV mode, we swap out invokeGuardedCallback for a special version
// that plays more nicely with the browser's DevTools. The idea is to preserve
// "Pause on exceptions" behavior. Because React wraps all user-provided
// functions in invokeGuardedCallback, and the production version of
// invokeGuardedCallback uses a try-catch, all user exceptions are treated
// like caught exceptions, and the DevTools won't pause unless the developer
// takes the extra step of enabling pause on caught exceptions. This is
// unintuitive, though, because even though React has caught the error, from
// the developer's perspective, the error is uncaught.
//
// To preserve the expected "Pause on exceptions" behavior, we don't use a
// try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
// DOM node, and call the user-provided callback from inside an event handler
// for that fake event. If the callback throws, the error is "captured" using
// a global event handler. But because the error happens in a different
// event loop context, it does not interrupt the normal program flow.
// Effectively, this gives us try-catch behavior without actually using
// try-catch. Neat!
// Check that the browser supports the APIs we need to implement our special
// DEV version of invokeGuardedCallback
if(typeof window!=='undefined'&&typeof window.dispatchEvent==='function'&&typeof document!=='undefined'&&typeof document.createEvent==='function'){var fakeNode=document.createElement('react');invokeGuardedCallbackImpl=function invokeGuardedCallbackDev(name,func,context,a,b,c,d,e,f){// If document doesn't exist we know for sure we will crash in this method
// when we call document.createEvent(). However this can cause confusing
// errors: https://github.com/facebook/create-react-app/issues/3482
// So we preemptively throw with a better message instead.
if(typeof document==='undefined'||document===null){throw new Error('The `document` global was defined when React was initialized, but is not '+'defined anymore. This can happen in a test environment if a component '+'schedules an update from an asynchronous callback, but the test has already '+'finished running. To solve this, you can either unmount the component at '+'the end of your test (and ensure that any asynchronous operations get '+'canceled in `componentWillUnmount`), or you can change the test itself '+'to be asynchronous.');}var evt=document.createEvent('Event');var didCall=false;// Keeps track of whether the user-provided callback threw an error. We
// set this to true at the beginning, then set it to false right after
// calling the function. If the function errors, `didError` will never be
// set to false. This strategy works even if the browser is flaky and
// fails to call our global error handler, because it doesn't rely on
// the error event at all.
var didError=true;// Keeps track of the value of window.event so that we can reset it
// during the callback to let user code access window.event in the
// browsers that support it.
var windowEvent=window.event;// Keeps track of the descriptor of window.event to restore it after event
// dispatching: https://github.com/facebook/react/issues/13688
var windowEventDescriptor=Object.getOwnPropertyDescriptor(window,'event');function restoreAfterDispatch(){// We immediately remove the callback from event listeners so that
// nested `invokeGuardedCallback` calls do not clash. Otherwise, a
// nested call would trigger the fake event handlers of any call higher
// in the stack.
fakeNode.removeEventListener(evtType,callCallback,false);// We check for window.hasOwnProperty('event') to prevent the
// window.event assignment in both IE <= 10 as they throw an error
// "Member not found" in strict mode, and in Firefox which does not
// support window.event.
if(typeof window.event!=='undefined'&&window.hasOwnProperty('event')){window.event=windowEvent;}}// Create an event handler for our fake event. We will synchronously
// dispatch our fake event using `dispatchEvent`. Inside the handler, we
// call the user-provided callback.
var funcArgs=Array.prototype.slice.call(arguments,3);function callCallback(){didCall=true;restoreAfterDispatch();func.apply(context,funcArgs);didError=false;}// Create a global error event handler. We use this to capture the value
// that was thrown. It's possible that this error handler will fire more
// than once; for example, if non-React code also calls `dispatchEvent`
// and a handler for that event throws. We should be resilient to most of
// those cases. Even if our error event handler fires more than once, the
// last error event is always used. If the callback actually does error,
// we know that the last error event is the correct one, because it's not
// possible for anything else to have happened in between our callback
// erroring and the code that follows the `dispatchEvent` call below. If
// the callback doesn't error, but the error event was fired, we know to
// ignore it because `didError` will be false, as described above.
var error;// Use this to track whether the error event is ever called.
var didSetError=false;var isCrossOriginError=false;function handleWindowError(event){error=event.error;didSetError=true;if(error===null&&event.colno===0&&event.lineno===0){isCrossOriginError=true;}if(event.defaultPrevented){// Some other error handler has prevented default.
// Browsers silence the error report if this happens.
// We'll remember this to later decide whether to log it or not.
if(error!=null&&_typeof(error)==='object'){try{error._suppressLogging=true;}catch(inner){// Ignore.
}}}}// Create a fake event type.
var evtType="react-"+(name?name:'invokeguardedcallback');// Attach our event handlers
window.addEventListener('error',handleWindowError);fakeNode.addEventListener(evtType,callCallback,false);// Synchronously dispatch our fake event. If the user-provided function
// errors, it will trigger our global error handler.
evt.initEvent(evtType,false,false);fakeNode.dispatchEvent(evt);if(windowEventDescriptor){Object.defineProperty(window,'event',windowEventDescriptor);}if(didCall&&didError){if(!didSetError){// The callback errored, but the error event never fired.
// eslint-disable-next-line react-internal/prod-error-codes
error=new Error('An error was thrown inside one of your components, but React '+"doesn't know what it was. This is likely due to browser "+'flakiness. React does its best to preserve the "Pause on '+'exceptions" behavior of the DevTools, which requires some '+"DEV-mode only tricks. It's possible that these don't work in "+'your browser. Try triggering the error in production mode, '+'or switching to a modern browser. If you suspect that this is '+'actually an issue with React, please file an issue.');}else if(isCrossOriginError){// eslint-disable-next-line react-internal/prod-error-codes
error=new Error("A cross-origin error was thrown. React doesn't have access to "+'the actual error object in development. '+'See https://reactjs.org/link/crossorigin-error for more information.');}this.onError(error);}// Remove our event listeners
window.removeEventListener('error',handleWindowError);if(!didCall){// Something went really wrong, and our event was not dispatched.
// https://github.com/facebook/react/issues/16734
// https://github.com/facebook/react/issues/16585
// Fall back to the production implementation.
restoreAfterDispatch();return invokeGuardedCallbackProd.apply(this,arguments);}};}}var invokeGuardedCallbackImpl$1=invokeGuardedCallbackImpl;var hasError=false;var caughtError=null;// Used by event system to capture/rethrow the first error.
var hasRethrowError=false;var rethrowError=null;var reporter={onError:function onError(error){hasError=true;caughtError=error;}};/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */function invokeGuardedCallback(name,func,context,a,b,c,d,e,f){hasError=false;caughtError=null;invokeGuardedCallbackImpl$1.apply(reporter,arguments);}/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */function invokeGuardedCallbackAndCatchFirstError(name,func,context,a,b,c,d,e,f){invokeGuardedCallback.apply(this,arguments);if(hasError){var error=clearCaughtError();if(!hasRethrowError){hasRethrowError=true;rethrowError=error;}}}/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */function rethrowCaughtError(){if(hasRethrowError){var error=rethrowError;hasRethrowError=false;rethrowError=null;throw error;}}function hasCaughtError(){return hasError;}function clearCaughtError(){if(hasError){var error=caughtError;hasError=false;caughtError=null;return error;}else{throw new Error('clearCaughtError was called but no error was captured. This error '+'is likely caused by a bug in React. Please file an issue.');}}/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */function get(key){return key._reactInternals;}function has(key){return key._reactInternals!==undefined;}function set(key,value){key._reactInternals=value;}// Don't change these two values. They're used by React Dev Tools.
var NoFlags=/*                      */0;var PerformedWork=/*                */1;// You can change the rest (and add more).
var Placement=/*                    */2;var Update=/*                       */4;var ChildDeletion=/*                */16;var ContentReset=/*                 */32;var Callback=/*                     */64;var DidCapture=/*                   */128;var ForceClientRender=/*            */256;var Ref=/*                          */512;var Snapshot=/*                     */1024;var Passive=/*                      */2048;var Hydrating=/*                    */4096;var Visibility=/*                   */8192;var StoreConsistency=/*             */16384;var LifecycleEffectMask=Passive|Update|Callback|Ref|Snapshot|StoreConsistency;// Union of all commit flags (flags with the lifetime of a particular commit)
var HostEffectMask=/*               */32767;// These are not really side effects, but we still reuse this field.
var Incomplete=/*                   */32768;var ShouldCapture=/*                */65536;var ForceUpdateForLegacySuspense=/* */131072;var Forked=/*                       */1048576;// Static tags describe aspects of a fiber that are not specific to a render,
// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
// This enables us to defer more work in the unmount case,
// since we can defer traversing the tree during layout to look for Passive effects,
// and instead rely on the static flag as a signal that there may be cleanup work.
var RefStatic=/*                    */2097152;var LayoutStatic=/*                 */4194304;var PassiveStatic=/*                */8388608;// These flags allow us to traverse to fibers that have effects on mount
// without traversing the entire tree after every commit for
// double invoking
var MountLayoutDev=/*               */16777216;var MountPassiveDev=/*              */33554432;// Groups of flags that are used in the commit phase to skip over trees that
// don't contain effects, by checking subtreeFlags.
var BeforeMutationMask=// TODO: Remove Update flag from before mutation phase by re-landing Visibility
// flag logic (see #20043)
Update|Snapshot|0;var MutationMask=Placement|Update|ChildDeletion|ContentReset|Ref|Hydrating|Visibility;var LayoutMask=Update|Callback|Ref|Visibility;// TODO: Split into PassiveMountMask and PassiveUnmountMask
var PassiveMask=Passive|ChildDeletion;// Union of tags that don't get reset on clones.
// This allows certain concepts to persist without recalculating them,
// e.g. whether a subtree contains passive effects or portals.
var StaticMask=LayoutStatic|PassiveStatic|RefStatic;var ReactCurrentOwner=ReactSharedInternals.ReactCurrentOwner;function getNearestMountedFiber(fiber){var node=fiber;var nearestMounted=fiber;if(!fiber.alternate){// If there is no alternate, this might be a new tree that isn't inserted
// yet. If it is, then it will have a pending insertion effect on it.
var nextNode=node;do{node=nextNode;if((node.flags&(Placement|Hydrating))!==NoFlags){// This is an insertion or in-progress hydration. The nearest possible
// mounted fiber is the parent but we need to continue to figure out
// if that one is still mounted.
nearestMounted=node["return"];}nextNode=node["return"];}while(nextNode);}else{while(node["return"]){node=node["return"];}}if(node.tag===HostRoot){// TODO: Check if this was a nested HostRoot when used with
// renderContainerIntoSubtree.
return nearestMounted;}// If we didn't hit the root, that means that we're in an disconnected tree
// that has been unmounted.
return null;}function getSuspenseInstanceFromFiber(fiber){if(fiber.tag===SuspenseComponent){var suspenseState=fiber.memoizedState;if(suspenseState===null){var current=fiber.alternate;if(current!==null){suspenseState=current.memoizedState;}}if(suspenseState!==null){return suspenseState.dehydrated;}}return null;}function getContainerFromFiber(fiber){return fiber.tag===HostRoot?fiber.stateNode.containerInfo:null;}function isFiberMounted(fiber){return getNearestMountedFiber(fiber)===fiber;}function isMounted(component){{var owner=ReactCurrentOwner.current;if(owner!==null&&owner.tag===ClassComponent){var ownerFiber=owner;var instance=ownerFiber.stateNode;if(!instance._warnedAboutRefsInRender){error('%s is accessing isMounted inside its render() function. '+'render() should be a pure function of props and state. It should '+'never access something that requires stale data from the previous '+'render, such as refs. Move this logic to componentDidMount and '+'componentDidUpdate instead.',getComponentNameFromFiber(ownerFiber)||'A component');}instance._warnedAboutRefsInRender=true;}}var fiber=get(component);if(!fiber){return false;}return getNearestMountedFiber(fiber)===fiber;}function assertIsMounted(fiber){if(getNearestMountedFiber(fiber)!==fiber){throw new Error('Unable to find node on an unmounted component.');}}function findCurrentFiberUsingSlowPath(fiber){var alternate=fiber.alternate;if(!alternate){// If there is no alternate, then we only need to check if it is mounted.
var nearestMounted=getNearestMountedFiber(fiber);if(nearestMounted===null){throw new Error('Unable to find node on an unmounted component.');}if(nearestMounted!==fiber){return null;}return fiber;}// If we have two possible branches, we'll walk backwards up to the root
// to see what path the root points to. On the way we may hit one of the
// special cases and we'll deal with them.
var a=fiber;var b=alternate;while(true){var parentA=a["return"];if(parentA===null){// We're at the root.
break;}var parentB=parentA.alternate;if(parentB===null){// There is no alternate. This is an unusual case. Currently, it only
// happens when a Suspense component is hidden. An extra fragment fiber
// is inserted in between the Suspense fiber and its children. Skip
// over this extra fragment fiber and proceed to the next parent.
var nextParent=parentA["return"];if(nextParent!==null){a=b=nextParent;continue;}// If there's no parent, we're at the root.
break;}// If both copies of the parent fiber point to the same child, we can
// assume that the child is current. This happens when we bailout on low
// priority: the bailed out fiber's child reuses the current child.
if(parentA.child===parentB.child){var child=parentA.child;while(child){if(child===a){// We've determined that A is the current branch.
assertIsMounted(parentA);return fiber;}if(child===b){// We've determined that B is the current branch.
assertIsMounted(parentA);return alternate;}child=child.sibling;}// We should never have an alternate for any mounting node. So the only
// way this could possibly happen is if this was unmounted, if at all.
throw new Error('Unable to find node on an unmounted component.');}if(a["return"]!==b["return"]){// The return pointer of A and the return pointer of B point to different
// fibers. We assume that return pointers never criss-cross, so A must
// belong to the child set of A.return, and B must belong to the child
// set of B.return.
a=parentA;b=parentB;}else{// The return pointers point to the same fiber. We'll have to use the
// default, slow path: scan the child sets of each parent alternate to see
// which child belongs to which set.
//
// Search parent A's child set
var didFindChild=false;var _child=parentA.child;while(_child){if(_child===a){didFindChild=true;a=parentA;b=parentB;break;}if(_child===b){didFindChild=true;b=parentA;a=parentB;break;}_child=_child.sibling;}if(!didFindChild){// Search parent B's child set
_child=parentB.child;while(_child){if(_child===a){didFindChild=true;a=parentB;b=parentA;break;}if(_child===b){didFindChild=true;b=parentB;a=parentA;break;}_child=_child.sibling;}if(!didFindChild){throw new Error('Child was not found in either parent set. This indicates a bug '+'in React related to the return pointer. Please file an issue.');}}}if(a.alternate!==b){throw new Error("Return fibers should always be each others' alternates. "+'This error is likely caused by a bug in React. Please file an issue.');}}// If the root is not a host container, we're in a disconnected tree. I.e.
// unmounted.
if(a.tag!==HostRoot){throw new Error('Unable to find node on an unmounted component.');}if(a.stateNode.current===a){// We've determined that A is the current branch.
return fiber;}// Otherwise B has to be current branch.
return alternate;}function findCurrentHostFiber(parent){var currentParent=findCurrentFiberUsingSlowPath(parent);return currentParent!==null?findCurrentHostFiberImpl(currentParent):null;}function findCurrentHostFiberImpl(node){// Next we'll drill down this component to find the first HostComponent/Text.
if(node.tag===HostComponent||node.tag===HostText){return node;}var child=node.child;while(child!==null){var match=findCurrentHostFiberImpl(child);if(match!==null){return match;}child=child.sibling;}return null;}function findCurrentHostFiberWithNoPortals(parent){var currentParent=findCurrentFiberUsingSlowPath(parent);return currentParent!==null?findCurrentHostFiberWithNoPortalsImpl(currentParent):null;}function findCurrentHostFiberWithNoPortalsImpl(node){// Next we'll drill down this component to find the first HostComponent/Text.
if(node.tag===HostComponent||node.tag===HostText){return node;}var child=node.child;while(child!==null){if(child.tag!==HostPortal){var match=findCurrentHostFiberWithNoPortalsImpl(child);if(match!==null){return match;}}child=child.sibling;}return null;}// This module only exists as an ESM wrapper around the external CommonJS
var scheduleCallback=Scheduler.unstable_scheduleCallback;var cancelCallback=Scheduler.unstable_cancelCallback;var shouldYield=Scheduler.unstable_shouldYield;var requestPaint=Scheduler.unstable_requestPaint;var now=Scheduler.unstable_now;var getCurrentPriorityLevel=Scheduler.unstable_getCurrentPriorityLevel;var ImmediatePriority=Scheduler.unstable_ImmediatePriority;var UserBlockingPriority=Scheduler.unstable_UserBlockingPriority;var NormalPriority=Scheduler.unstable_NormalPriority;var LowPriority=Scheduler.unstable_LowPriority;var IdlePriority=Scheduler.unstable_IdlePriority;// this doesn't actually exist on the scheduler, but it *does*
// on scheduler/unstable_mock, which we'll need for internal testing
var unstable_yieldValue=Scheduler.unstable_yieldValue;var unstable_setDisableYieldValue=Scheduler.unstable_setDisableYieldValue;var rendererID=null;var injectedHook=null;var injectedProfilingHooks=null;var hasLoggedError=false;var isDevToolsPresent=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__!=='undefined';function injectInternals(internals){if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__==='undefined'){// No DevTools
return false;}var hook=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(hook.isDisabled){// This isn't a real property on the hook, but it can be set to opt out
// of DevTools integration and associated warnings and logs.
// https://github.com/facebook/react/issues/3877
return true;}if(!hook.supportsFiber){{error('The installed version of React DevTools is too old and will not work '+'with the current version of React. Please update React DevTools. '+'https://reactjs.org/link/react-devtools');}// DevTools exists, even though it doesn't support Fiber.
return true;}try{if(enableSchedulingProfiler){// Conditionally inject these hooks only if Timeline profiler is supported by this build.
// This gives DevTools a way to feature detect that isn't tied to version number
// (since profiling and timeline are controlled by different feature flags).
internals=assign({},internals,{getLaneLabelMap:getLaneLabelMap,injectProfilingHooks:injectProfilingHooks});}rendererID=hook.inject(internals);// We have successfully injected, so now it is safe to set up hooks.
injectedHook=hook;}catch(err){// Catch all errors because it is unsafe to throw during initialization.
{error('React instrumentation encountered an error: %s.',err);}}if(hook.checkDCE){// This is the real DevTools.
return true;}else{// This is likely a hook installed by Fast Refresh runtime.
return false;}}function onScheduleRoot(root,children){{if(injectedHook&&typeof injectedHook.onScheduleFiberRoot==='function'){try{injectedHook.onScheduleFiberRoot(rendererID,root,children);}catch(err){if(!hasLoggedError){hasLoggedError=true;error('React instrumentation encountered an error: %s',err);}}}}}function onCommitRoot(root,eventPriority){if(injectedHook&&typeof injectedHook.onCommitFiberRoot==='function'){try{var didError=(root.current.flags&DidCapture)===DidCapture;if(enableProfilerTimer){var schedulerPriority;switch(eventPriority){case DiscreteEventPriority:schedulerPriority=ImmediatePriority;break;case ContinuousEventPriority:schedulerPriority=UserBlockingPriority;break;case DefaultEventPriority:schedulerPriority=NormalPriority;break;case IdleEventPriority:schedulerPriority=IdlePriority;break;default:schedulerPriority=NormalPriority;break;}injectedHook.onCommitFiberRoot(rendererID,root,schedulerPriority,didError);}else{injectedHook.onCommitFiberRoot(rendererID,root,undefined,didError);}}catch(err){{if(!hasLoggedError){hasLoggedError=true;error('React instrumentation encountered an error: %s',err);}}}}}function onPostCommitRoot(root){if(injectedHook&&typeof injectedHook.onPostCommitFiberRoot==='function'){try{injectedHook.onPostCommitFiberRoot(rendererID,root);}catch(err){{if(!hasLoggedError){hasLoggedError=true;error('React instrumentation encountered an error: %s',err);}}}}}function onCommitUnmount(fiber){if(injectedHook&&typeof injectedHook.onCommitFiberUnmount==='function'){try{injectedHook.onCommitFiberUnmount(rendererID,fiber);}catch(err){{if(!hasLoggedError){hasLoggedError=true;error('React instrumentation encountered an error: %s',err);}}}}}function setIsStrictModeForDevtools(newIsStrictMode){{if(typeof unstable_yieldValue==='function'){// We're in a test because Scheduler.unstable_yieldValue only exists
// in SchedulerMock. To reduce the noise in strict mode tests,
// suppress warnings and disable scheduler yielding during the double render
unstable_setDisableYieldValue(newIsStrictMode);setSuppressWarning(newIsStrictMode);}if(injectedHook&&typeof injectedHook.setStrictMode==='function'){try{injectedHook.setStrictMode(rendererID,newIsStrictMode);}catch(err){{if(!hasLoggedError){hasLoggedError=true;error('React instrumentation encountered an error: %s',err);}}}}}}// Profiler API hooks
function injectProfilingHooks(profilingHooks){injectedProfilingHooks=profilingHooks;}function getLaneLabelMap(){{var map=new Map();var lane=1;for(var index=0;index<TotalLanes;index++){var label=getLabelForLane(lane);map.set(lane,label);lane*=2;}return map;}}function markCommitStarted(lanes){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markCommitStarted==='function'){injectedProfilingHooks.markCommitStarted(lanes);}}}function markCommitStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markCommitStopped==='function'){injectedProfilingHooks.markCommitStopped();}}}function markComponentRenderStarted(fiber){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentRenderStarted==='function'){injectedProfilingHooks.markComponentRenderStarted(fiber);}}}function markComponentRenderStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentRenderStopped==='function'){injectedProfilingHooks.markComponentRenderStopped();}}}function markComponentPassiveEffectMountStarted(fiber){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted==='function'){injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);}}}function markComponentPassiveEffectMountStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped==='function'){injectedProfilingHooks.markComponentPassiveEffectMountStopped();}}}function markComponentPassiveEffectUnmountStarted(fiber){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted==='function'){injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);}}}function markComponentPassiveEffectUnmountStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped==='function'){injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();}}}function markComponentLayoutEffectMountStarted(fiber){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted==='function'){injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);}}}function markComponentLayoutEffectMountStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped==='function'){injectedProfilingHooks.markComponentLayoutEffectMountStopped();}}}function markComponentLayoutEffectUnmountStarted(fiber){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted==='function'){injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);}}}function markComponentLayoutEffectUnmountStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped==='function'){injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();}}}function markComponentErrored(fiber,thrownValue,lanes){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentErrored==='function'){injectedProfilingHooks.markComponentErrored(fiber,thrownValue,lanes);}}}function markComponentSuspended(fiber,wakeable,lanes){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markComponentSuspended==='function'){injectedProfilingHooks.markComponentSuspended(fiber,wakeable,lanes);}}}function markLayoutEffectsStarted(lanes){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markLayoutEffectsStarted==='function'){injectedProfilingHooks.markLayoutEffectsStarted(lanes);}}}function markLayoutEffectsStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markLayoutEffectsStopped==='function'){injectedProfilingHooks.markLayoutEffectsStopped();}}}function markPassiveEffectsStarted(lanes){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markPassiveEffectsStarted==='function'){injectedProfilingHooks.markPassiveEffectsStarted(lanes);}}}function markPassiveEffectsStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markPassiveEffectsStopped==='function'){injectedProfilingHooks.markPassiveEffectsStopped();}}}function markRenderStarted(lanes){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markRenderStarted==='function'){injectedProfilingHooks.markRenderStarted(lanes);}}}function markRenderYielded(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markRenderYielded==='function'){injectedProfilingHooks.markRenderYielded();}}}function markRenderStopped(){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markRenderStopped==='function'){injectedProfilingHooks.markRenderStopped();}}}function markRenderScheduled(lane){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markRenderScheduled==='function'){injectedProfilingHooks.markRenderScheduled(lane);}}}function markForceUpdateScheduled(fiber,lane){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markForceUpdateScheduled==='function'){injectedProfilingHooks.markForceUpdateScheduled(fiber,lane);}}}function markStateUpdateScheduled(fiber,lane){{if(injectedProfilingHooks!==null&&typeof injectedProfilingHooks.markStateUpdateScheduled==='function'){injectedProfilingHooks.markStateUpdateScheduled(fiber,lane);}}}var NoMode=/*                         */0;// TODO: Remove ConcurrentMode by reading from the root tag instead
var ConcurrentMode=/*                 */1;var ProfileMode=/*                    */2;var StrictLegacyMode=/*               */8;var StrictEffectsMode=/*              */16;// TODO: This is pretty well supported by browsers. Maybe we can drop it.
var clz32=Math.clz32?Math.clz32:clz32Fallback;// Count leading zeros.
// Based on:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
var log=Math.log;var LN2=Math.LN2;function clz32Fallback(x){var asUint=x>>>0;if(asUint===0){return 32;}return 31-(log(asUint)/LN2|0)|0;}// If those values are changed that package should be rebuilt and redeployed.
var TotalLanes=31;var NoLanes=/*                        */0;var NoLane=/*                          */0;var SyncLane=/*                        */1;var InputContinuousHydrationLane=/*    */2;var InputContinuousLane=/*             */4;var DefaultHydrationLane=/*            */8;var DefaultLane=/*                     */16;var TransitionHydrationLane=/*                */32;var TransitionLanes=/*                       */4194240;var TransitionLane1=/*                        */64;var TransitionLane2=/*                        */128;var TransitionLane3=/*                        */256;var TransitionLane4=/*                        */512;var TransitionLane5=/*                        */1024;var TransitionLane6=/*                        */2048;var TransitionLane7=/*                        */4096;var TransitionLane8=/*                        */8192;var TransitionLane9=/*                        */16384;var TransitionLane10=/*                       */32768;var TransitionLane11=/*                       */65536;var TransitionLane12=/*                       */131072;var TransitionLane13=/*                       */262144;var TransitionLane14=/*                       */524288;var TransitionLane15=/*                       */1048576;var TransitionLane16=/*                       */2097152;var RetryLanes=/*                            */130023424;var RetryLane1=/*                             */4194304;var RetryLane2=/*                             */8388608;var RetryLane3=/*                             */16777216;var RetryLane4=/*                             */33554432;var RetryLane5=/*                             */67108864;var SomeRetryLane=RetryLane1;var SelectiveHydrationLane=/*          */134217728;var NonIdleLanes=/*                          */268435455;var IdleHydrationLane=/*               */268435456;var IdleLane=/*                        */536870912;var OffscreenLane=/*                   */1073741824;// This function is used for the experimental timeline (react-devtools-timeline)
// It should be kept in sync with the Lanes values above.
function getLabelForLane(lane){{if(lane&SyncLane){return'Sync';}if(lane&InputContinuousHydrationLane){return'InputContinuousHydration';}if(lane&InputContinuousLane){return'InputContinuous';}if(lane&DefaultHydrationLane){return'DefaultHydration';}if(lane&DefaultLane){return'Default';}if(lane&TransitionHydrationLane){return'TransitionHydration';}if(lane&TransitionLanes){return'Transition';}if(lane&RetryLanes){return'Retry';}if(lane&SelectiveHydrationLane){return'SelectiveHydration';}if(lane&IdleHydrationLane){return'IdleHydration';}if(lane&IdleLane){return'Idle';}if(lane&OffscreenLane){return'Offscreen';}}}var NoTimestamp=-1;var nextTransitionLane=TransitionLane1;var nextRetryLane=RetryLane1;function getHighestPriorityLanes(lanes){switch(getHighestPriorityLane(lanes)){case SyncLane:return SyncLane;case InputContinuousHydrationLane:return InputContinuousHydrationLane;case InputContinuousLane:return InputContinuousLane;case DefaultHydrationLane:return DefaultHydrationLane;case DefaultLane:return DefaultLane;case TransitionHydrationLane:return TransitionHydrationLane;case TransitionLane1:case TransitionLane2:case TransitionLane3:case TransitionLane4:case TransitionLane5:case TransitionLane6:case TransitionLane7:case TransitionLane8:case TransitionLane9:case TransitionLane10:case TransitionLane11:case TransitionLane12:case TransitionLane13:case TransitionLane14:case TransitionLane15:case TransitionLane16:return lanes&TransitionLanes;case RetryLane1:case RetryLane2:case RetryLane3:case RetryLane4:case RetryLane5:return lanes&RetryLanes;case SelectiveHydrationLane:return SelectiveHydrationLane;case IdleHydrationLane:return IdleHydrationLane;case IdleLane:return IdleLane;case OffscreenLane:return OffscreenLane;default:{error('Should have found matching lanes. This is a bug in React.');}// This shouldn't be reachable, but as a fallback, return the entire bitmask.
return lanes;}}function getNextLanes(root,wipLanes){// Early bailout if there's no pending work left.
var pendingLanes=root.pendingLanes;if(pendingLanes===NoLanes){return NoLanes;}var nextLanes=NoLanes;var suspendedLanes=root.suspendedLanes;var pingedLanes=root.pingedLanes;// Do not work on any idle work until all the non-idle work has finished,
// even if the work is suspended.
var nonIdlePendingLanes=pendingLanes&NonIdleLanes;if(nonIdlePendingLanes!==NoLanes){var nonIdleUnblockedLanes=nonIdlePendingLanes&~suspendedLanes;if(nonIdleUnblockedLanes!==NoLanes){nextLanes=getHighestPriorityLanes(nonIdleUnblockedLanes);}else{var nonIdlePingedLanes=nonIdlePendingLanes&pingedLanes;if(nonIdlePingedLanes!==NoLanes){nextLanes=getHighestPriorityLanes(nonIdlePingedLanes);}}}else{// The only remaining work is Idle.
var unblockedLanes=pendingLanes&~suspendedLanes;if(unblockedLanes!==NoLanes){nextLanes=getHighestPriorityLanes(unblockedLanes);}else{if(pingedLanes!==NoLanes){nextLanes=getHighestPriorityLanes(pingedLanes);}}}if(nextLanes===NoLanes){// This should only be reachable if we're suspended
// TODO: Consider warning in this path if a fallback timer is not scheduled.
return NoLanes;}// If we're already in the middle of a render, switching lanes will interrupt
// it and we'll lose our progress. We should only do this if the new lanes are
// higher priority.
if(wipLanes!==NoLanes&&wipLanes!==nextLanes&&// If we already suspended with a delay, then interrupting is fine. Don't
// bother waiting until the root is complete.
(wipLanes&suspendedLanes)===NoLanes){var nextLane=getHighestPriorityLane(nextLanes);var wipLane=getHighestPriorityLane(wipLanes);if(// Tests whether the next lane is equal or lower priority than the wip
// one. This works because the bits decrease in priority as you go left.
nextLane>=wipLane||// Default priority updates should not interrupt transition updates. The
// only difference between default updates and transition updates is that
// default updates do not support refresh transitions.
nextLane===DefaultLane&&(wipLane&TransitionLanes)!==NoLanes){// Keep working on the existing in-progress tree. Do not interrupt.
return wipLanes;}}if((nextLanes&InputContinuousLane)!==NoLanes){// When updates are sync by default, we entangle continuous priority updates
// and default updates, so they render in the same batch. The only reason
// they use separate lanes is because continuous updates should interrupt
// transitions, but default updates should not.
nextLanes|=pendingLanes&DefaultLane;}// Check for entangled lanes and add them to the batch.
//
// A lane is said to be entangled with another when it's not allowed to render
// in a batch that does not also include the other lane. Typically we do this
// when multiple updates have the same source, and we only want to respond to
// the most recent event from that source.
//
// Note that we apply entanglements *after* checking for partial work above.
// This means that if a lane is entangled during an interleaved event while
// it's already rendering, we won't interrupt it. This is intentional, since
// entanglement is usually "best effort": we'll try our best to render the
// lanes in the same batch, but it's not worth throwing out partially
// completed work in order to do it.
// TODO: Reconsider this. The counter-argument is that the partial work
// represents an intermediate state, which we don't want to show to the user.
// And by spending extra time finishing it, we're increasing the amount of
// time it takes to show the final state, which is what they are actually
// waiting for.
//
// For those exceptions where entanglement is semantically important, like
// useMutableSource, we should ensure that there is no partial work at the
// time we apply the entanglement.
var entangledLanes=root.entangledLanes;if(entangledLanes!==NoLanes){var entanglements=root.entanglements;var lanes=nextLanes&entangledLanes;while(lanes>0){var index=pickArbitraryLaneIndex(lanes);var lane=1<<index;nextLanes|=entanglements[index];lanes&=~lane;}}return nextLanes;}function getMostRecentEventTime(root,lanes){var eventTimes=root.eventTimes;var mostRecentEventTime=NoTimestamp;while(lanes>0){var index=pickArbitraryLaneIndex(lanes);var lane=1<<index;var eventTime=eventTimes[index];if(eventTime>mostRecentEventTime){mostRecentEventTime=eventTime;}lanes&=~lane;}return mostRecentEventTime;}function computeExpirationTime(lane,currentTime){switch(lane){case SyncLane:case InputContinuousHydrationLane:case InputContinuousLane:// User interactions should expire slightly more quickly.
//
// NOTE: This is set to the corresponding constant as in Scheduler.js.
// When we made it larger, a product metric in www regressed, suggesting
// there's a user interaction that's being starved by a series of
// synchronous updates. If that theory is correct, the proper solution is
// to fix the starvation. However, this scenario supports the idea that
// expiration times are an important safeguard when starvation
// does happen.
return currentTime+250;case DefaultHydrationLane:case DefaultLane:case TransitionHydrationLane:case TransitionLane1:case TransitionLane2:case TransitionLane3:case TransitionLane4:case TransitionLane5:case TransitionLane6:case TransitionLane7:case TransitionLane8:case TransitionLane9:case TransitionLane10:case TransitionLane11:case TransitionLane12:case TransitionLane13:case TransitionLane14:case TransitionLane15:case TransitionLane16:return currentTime+5000;case RetryLane1:case RetryLane2:case RetryLane3:case RetryLane4:case RetryLane5:// TODO: Retries should be allowed to expire if they are CPU bound for
// too long, but when I made this change it caused a spike in browser
// crashes. There must be some other underlying bug; not super urgent but
// ideally should figure out why and fix it. Unfortunately we don't have
// a repro for the crashes, only detected via production metrics.
return NoTimestamp;case SelectiveHydrationLane:case IdleHydrationLane:case IdleLane:case OffscreenLane:// Anything idle priority or lower should never expire.
return NoTimestamp;default:{error('Should have found matching lanes. This is a bug in React.');}return NoTimestamp;}}function markStarvedLanesAsExpired(root,currentTime){// TODO: This gets called every time we yield. We can optimize by storing
// the earliest expiration time on the root. Then use that to quickly bail out
// of this function.
var pendingLanes=root.pendingLanes;var suspendedLanes=root.suspendedLanes;var pingedLanes=root.pingedLanes;var expirationTimes=root.expirationTimes;// Iterate through the pending lanes and check if we've reached their
// expiration time. If so, we'll assume the update is being starved and mark
// it as expired to force it to finish.
var lanes=pendingLanes;while(lanes>0){var index=pickArbitraryLaneIndex(lanes);var lane=1<<index;var expirationTime=expirationTimes[index];if(expirationTime===NoTimestamp){// Found a pending lane with no expiration time. If it's not suspended, or
// if it's pinged, assume it's CPU-bound. Compute a new expiration time
// using the current time.
if((lane&suspendedLanes)===NoLanes||(lane&pingedLanes)!==NoLanes){// Assumes timestamps are monotonically increasing.
expirationTimes[index]=computeExpirationTime(lane,currentTime);}}else if(expirationTime<=currentTime){// This lane expired
root.expiredLanes|=lane;}lanes&=~lane;}}// This returns the highest priority pending lanes regardless of whether they
// are suspended.
function getHighestPriorityPendingLanes(root){return getHighestPriorityLanes(root.pendingLanes);}function getLanesToRetrySynchronouslyOnError(root){var everythingButOffscreen=root.pendingLanes&~OffscreenLane;if(everythingButOffscreen!==NoLanes){return everythingButOffscreen;}if(everythingButOffscreen&OffscreenLane){return OffscreenLane;}return NoLanes;}function includesSyncLane(lanes){return(lanes&SyncLane)!==NoLanes;}function includesNonIdleWork(lanes){return(lanes&NonIdleLanes)!==NoLanes;}function includesOnlyRetries(lanes){return(lanes&RetryLanes)===lanes;}function includesOnlyNonUrgentLanes(lanes){var UrgentLanes=SyncLane|InputContinuousLane|DefaultLane;return(lanes&UrgentLanes)===NoLanes;}function includesOnlyTransitions(lanes){return(lanes&TransitionLanes)===lanes;}function includesBlockingLane(root,lanes){var SyncDefaultLanes=InputContinuousHydrationLane|InputContinuousLane|DefaultHydrationLane|DefaultLane;return(lanes&SyncDefaultLanes)!==NoLanes;}function includesExpiredLane(root,lanes){// This is a separate check from includesBlockingLane because a lane can
// expire after a render has already started.
return(lanes&root.expiredLanes)!==NoLanes;}function isTransitionLane(lane){return(lane&TransitionLanes)!==NoLanes;}function claimNextTransitionLane(){// Cycle through the lanes, assigning each new transition to the next lane.
// In most cases, this means every transition gets its own lane, until we
// run out of lanes and cycle back to the beginning.
var lane=nextTransitionLane;nextTransitionLane<<=1;if((nextTransitionLane&TransitionLanes)===NoLanes){nextTransitionLane=TransitionLane1;}return lane;}function claimNextRetryLane(){var lane=nextRetryLane;nextRetryLane<<=1;if((nextRetryLane&RetryLanes)===NoLanes){nextRetryLane=RetryLane1;}return lane;}function getHighestPriorityLane(lanes){return lanes&-lanes;}function pickArbitraryLane(lanes){// This wrapper function gets inlined. Only exists so to communicate that it
// doesn't matter which bit is selected; you can pick any bit without
// affecting the algorithms where its used. Here I'm using
// getHighestPriorityLane because it requires the fewest operations.
return getHighestPriorityLane(lanes);}function pickArbitraryLaneIndex(lanes){return 31-clz32(lanes);}function laneToIndex(lane){return pickArbitraryLaneIndex(lane);}function includesSomeLane(a,b){return(a&b)!==NoLanes;}function isSubsetOfLanes(set,subset){return(set&subset)===subset;}function mergeLanes(a,b){return a|b;}function removeLanes(set,subset){return set&~subset;}function intersectLanes(a,b){return a&b;}// Seems redundant, but it changes the type from a single lane (used for
// updates) to a group of lanes (used for flushing work).
function laneToLanes(lane){return lane;}function higherPriorityLane(a,b){// This works because the bit ranges decrease in priority as you go left.
return a!==NoLane&&a<b?a:b;}function createLaneMap(initial){// Intentionally pushing one by one.
// https://v8.dev/blog/elements-kinds#avoid-creating-holes
var laneMap=[];for(var i=0;i<TotalLanes;i++){laneMap.push(initial);}return laneMap;}function markRootUpdated(root,updateLane,eventTime){root.pendingLanes|=updateLane;// If there are any suspended transitions, it's possible this new update
// could unblock them. Clear the suspended lanes so that we can try rendering
// them again.
//
// TODO: We really only need to unsuspend only lanes that are in the
// `subtreeLanes` of the updated fiber, or the update lanes of the return
// path. This would exclude suspended updates in an unrelated sibling tree,
// since there's no way for this update to unblock it.
//
// We don't do this if the incoming update is idle, because we never process
// idle updates until after all the regular updates have finished; there's no
// way it could unblock a transition.
if(updateLane!==IdleLane){root.suspendedLanes=NoLanes;root.pingedLanes=NoLanes;}var eventTimes=root.eventTimes;var index=laneToIndex(updateLane);// We can always overwrite an existing timestamp because we prefer the most
// recent event, and we assume time is monotonically increasing.
eventTimes[index]=eventTime;}function markRootSuspended(root,suspendedLanes){root.suspendedLanes|=suspendedLanes;root.pingedLanes&=~suspendedLanes;// The suspended lanes are no longer CPU-bound. Clear their expiration times.
var expirationTimes=root.expirationTimes;var lanes=suspendedLanes;while(lanes>0){var index=pickArbitraryLaneIndex(lanes);var lane=1<<index;expirationTimes[index]=NoTimestamp;lanes&=~lane;}}function markRootPinged(root,pingedLanes,eventTime){root.pingedLanes|=root.suspendedLanes&pingedLanes;}function markRootFinished(root,remainingLanes){var noLongerPendingLanes=root.pendingLanes&~remainingLanes;root.pendingLanes=remainingLanes;// Let's try everything again
root.suspendedLanes=NoLanes;root.pingedLanes=NoLanes;root.expiredLanes&=remainingLanes;root.mutableReadLanes&=remainingLanes;root.entangledLanes&=remainingLanes;var entanglements=root.entanglements;var eventTimes=root.eventTimes;var expirationTimes=root.expirationTimes;// Clear the lanes that no longer have pending work
var lanes=noLongerPendingLanes;while(lanes>0){var index=pickArbitraryLaneIndex(lanes);var lane=1<<index;entanglements[index]=NoLanes;eventTimes[index]=NoTimestamp;expirationTimes[index]=NoTimestamp;lanes&=~lane;}}function markRootEntangled(root,entangledLanes){// In addition to entangling each of the given lanes with each other, we also
// have to consider _transitive_ entanglements. For each lane that is already
// entangled with *any* of the given lanes, that lane is now transitively
// entangled with *all* the given lanes.
//
// Translated: If C is entangled with A, then entangling A with B also
// entangles C with B.
//
// If this is hard to grasp, it might help to intentionally break this
// function and look at the tests that fail in ReactTransition-test.js. Try
// commenting out one of the conditions below.
var rootEntangledLanes=root.entangledLanes|=entangledLanes;var entanglements=root.entanglements;var lanes=rootEntangledLanes;while(lanes){var index=pickArbitraryLaneIndex(lanes);var lane=1<<index;if(// Is this one of the newly entangled lanes?
lane&entangledLanes|// Is this lane transitively entangled with the newly entangled lanes?
entanglements[index]&entangledLanes){entanglements[index]|=entangledLanes;}lanes&=~lane;}}function getBumpedLaneForHydration(root,renderLanes){var renderLane=getHighestPriorityLane(renderLanes);var lane;switch(renderLane){case InputContinuousLane:lane=InputContinuousHydrationLane;break;case DefaultLane:lane=DefaultHydrationLane;break;case TransitionLane1:case TransitionLane2:case TransitionLane3:case TransitionLane4:case TransitionLane5:case TransitionLane6:case TransitionLane7:case TransitionLane8:case TransitionLane9:case TransitionLane10:case TransitionLane11:case TransitionLane12:case TransitionLane13:case TransitionLane14:case TransitionLane15:case TransitionLane16:case RetryLane1:case RetryLane2:case RetryLane3:case RetryLane4:case RetryLane5:lane=TransitionHydrationLane;break;case IdleLane:lane=IdleHydrationLane;break;default:// Everything else is already either a hydration lane, or shouldn't
// be retried at a hydration lane.
lane=NoLane;break;}// Check if the lane we chose is suspended. If so, that indicates that we
// already attempted and failed to hydrate at that level. Also check if we're
// already rendering that lane, which is rare but could happen.
if((lane&(root.suspendedLanes|renderLanes))!==NoLane){// Give up trying to hydrate and fall back to client render.
return NoLane;}return lane;}function addFiberToLanesMap(root,fiber,lanes){if(!isDevToolsPresent){return;}var pendingUpdatersLaneMap=root.pendingUpdatersLaneMap;while(lanes>0){var index=laneToIndex(lanes);var lane=1<<index;var updaters=pendingUpdatersLaneMap[index];updaters.add(fiber);lanes&=~lane;}}function movePendingFibersToMemoized(root,lanes){if(!isDevToolsPresent){return;}var pendingUpdatersLaneMap=root.pendingUpdatersLaneMap;var memoizedUpdaters=root.memoizedUpdaters;while(lanes>0){var index=laneToIndex(lanes);var lane=1<<index;var updaters=pendingUpdatersLaneMap[index];if(updaters.size>0){updaters.forEach(function(fiber){var alternate=fiber.alternate;if(alternate===null||!memoizedUpdaters.has(alternate)){memoizedUpdaters.add(fiber);}});updaters.clear();}lanes&=~lane;}}function getTransitionsForLanes(root,lanes){{return null;}}var DiscreteEventPriority=SyncLane;var ContinuousEventPriority=InputContinuousLane;var DefaultEventPriority=DefaultLane;var IdleEventPriority=IdleLane;var currentUpdatePriority=NoLane;function getCurrentUpdatePriority(){return currentUpdatePriority;}function setCurrentUpdatePriority(newPriority){currentUpdatePriority=newPriority;}function runWithPriority(priority,fn){var previousPriority=currentUpdatePriority;try{currentUpdatePriority=priority;return fn();}finally{currentUpdatePriority=previousPriority;}}function higherEventPriority(a,b){return a!==0&&a<b?a:b;}function lowerEventPriority(a,b){return a===0||a>b?a:b;}function isHigherEventPriority(a,b){return a!==0&&a<b;}function lanesToEventPriority(lanes){var lane=getHighestPriorityLane(lanes);if(!isHigherEventPriority(DiscreteEventPriority,lane)){return DiscreteEventPriority;}if(!isHigherEventPriority(ContinuousEventPriority,lane)){return ContinuousEventPriority;}if(includesNonIdleWork(lane)){return DefaultEventPriority;}return IdleEventPriority;}// This is imported by the event replaying implementation in React DOM. It's
// in a separate file to break a circular dependency between the renderer and
// the reconciler.
function isRootDehydrated(root){var currentState=root.current.memoizedState;return currentState.isDehydrated;}var _attemptSynchronousHydration;function setAttemptSynchronousHydration(fn){_attemptSynchronousHydration=fn;}function attemptSynchronousHydration(fiber){_attemptSynchronousHydration(fiber);}var attemptContinuousHydration;function setAttemptContinuousHydration(fn){attemptContinuousHydration=fn;}var attemptHydrationAtCurrentPriority;function setAttemptHydrationAtCurrentPriority(fn){attemptHydrationAtCurrentPriority=fn;}var getCurrentUpdatePriority$1;function setGetCurrentUpdatePriority(fn){getCurrentUpdatePriority$1=fn;}var attemptHydrationAtPriority;function setAttemptHydrationAtPriority(fn){attemptHydrationAtPriority=fn;}// TODO: Upgrade this definition once we're on a newer version of Flow that
// has this definition built-in.
var hasScheduledReplayAttempt=false;// The queue of discrete events to be replayed.
var queuedDiscreteEvents=[];// Indicates if any continuous event targets are non-null for early bailout.
// if the last target was dehydrated.
var queuedFocus=null;var queuedDrag=null;var queuedMouse=null;// For pointer events there can be one latest event per pointerId.
var queuedPointers=new Map();var queuedPointerCaptures=new Map();// We could consider replaying selectionchange and touchmoves too.
var queuedExplicitHydrationTargets=[];var discreteReplayableEvents=['mousedown','mouseup','touchcancel','touchend','touchstart','auxclick','dblclick','pointercancel','pointerdown','pointerup','dragend','dragstart','drop','compositionend','compositionstart','keydown','keypress','keyup','input','textInput',// Intentionally camelCase
'copy','cut','paste','click','change','contextmenu','reset','submit'];function isDiscreteEventThatRequiresHydration(eventType){return discreteReplayableEvents.indexOf(eventType)>-1;}function createQueuedReplayableEvent(blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent){return{blockedOn:blockedOn,domEventName:domEventName,eventSystemFlags:eventSystemFlags,nativeEvent:nativeEvent,targetContainers:[targetContainer]};}function clearIfContinuousEvent(domEventName,nativeEvent){switch(domEventName){case'focusin':case'focusout':queuedFocus=null;break;case'dragenter':case'dragleave':queuedDrag=null;break;case'mouseover':case'mouseout':queuedMouse=null;break;case'pointerover':case'pointerout':{var pointerId=nativeEvent.pointerId;queuedPointers["delete"](pointerId);break;}case'gotpointercapture':case'lostpointercapture':{var _pointerId=nativeEvent.pointerId;queuedPointerCaptures["delete"](_pointerId);break;}}}function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent,blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent){if(existingQueuedEvent===null||existingQueuedEvent.nativeEvent!==nativeEvent){var queuedEvent=createQueuedReplayableEvent(blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent);if(blockedOn!==null){var _fiber2=getInstanceFromNode(blockedOn);if(_fiber2!==null){// Attempt to increase the priority of this target.
attemptContinuousHydration(_fiber2);}}return queuedEvent;}// If we have already queued this exact event, then it's because
// the different event systems have different DOM event listeners.
// We can accumulate the flags, and the targetContainers, and
// store a single event to be replayed.
existingQueuedEvent.eventSystemFlags|=eventSystemFlags;var targetContainers=existingQueuedEvent.targetContainers;if(targetContainer!==null&&targetContainers.indexOf(targetContainer)===-1){targetContainers.push(targetContainer);}return existingQueuedEvent;}function queueIfContinuousEvent(blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent){// These set relatedTarget to null because the replayed event will be treated as if we
// moved from outside the window (no target) onto the target once it hydrates.
// Instead of mutating we could clone the event.
switch(domEventName){case'focusin':{var focusEvent=nativeEvent;queuedFocus=accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus,blockedOn,domEventName,eventSystemFlags,targetContainer,focusEvent);return true;}case'dragenter':{var dragEvent=nativeEvent;queuedDrag=accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag,blockedOn,domEventName,eventSystemFlags,targetContainer,dragEvent);return true;}case'mouseover':{var mouseEvent=nativeEvent;queuedMouse=accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse,blockedOn,domEventName,eventSystemFlags,targetContainer,mouseEvent);return true;}case'pointerover':{var pointerEvent=nativeEvent;var pointerId=pointerEvent.pointerId;queuedPointers.set(pointerId,accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId)||null,blockedOn,domEventName,eventSystemFlags,targetContainer,pointerEvent));return true;}case'gotpointercapture':{var _pointerEvent=nativeEvent;var _pointerId2=_pointerEvent.pointerId;queuedPointerCaptures.set(_pointerId2,accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2)||null,blockedOn,domEventName,eventSystemFlags,targetContainer,_pointerEvent));return true;}}return false;}// Check if this target is unblocked. Returns true if it's unblocked.
function attemptExplicitHydrationTarget(queuedTarget){// TODO: This function shares a lot of logic with findInstanceBlockingEvent.
// Try to unify them. It's a bit tricky since it would require two return
// values.
var targetInst=getClosestInstanceFromNode(queuedTarget.target);if(targetInst!==null){var nearestMounted=getNearestMountedFiber(targetInst);if(nearestMounted!==null){var tag=nearestMounted.tag;if(tag===SuspenseComponent){var instance=getSuspenseInstanceFromFiber(nearestMounted);if(instance!==null){// We're blocked on hydrating this boundary.
// Increase its priority.
queuedTarget.blockedOn=instance;attemptHydrationAtPriority(queuedTarget.priority,function(){attemptHydrationAtCurrentPriority(nearestMounted);});return;}}else if(tag===HostRoot){var root=nearestMounted.stateNode;if(isRootDehydrated(root)){queuedTarget.blockedOn=getContainerFromFiber(nearestMounted);// We don't currently have a way to increase the priority of
// a root other than sync.
return;}}}}queuedTarget.blockedOn=null;}function queueExplicitHydrationTarget(target){// TODO: This will read the priority if it's dispatched by the React
// event system but not native events. Should read window.event.type, like
// we do for updates (getCurrentEventPriority).
var updatePriority=getCurrentUpdatePriority$1();var queuedTarget={blockedOn:null,target:target,priority:updatePriority};var i=0;for(;i<queuedExplicitHydrationTargets.length;i++){// Stop once we hit the first target with lower priority than
if(!isHigherEventPriority(updatePriority,queuedExplicitHydrationTargets[i].priority)){break;}}queuedExplicitHydrationTargets.splice(i,0,queuedTarget);if(i===0){attemptExplicitHydrationTarget(queuedTarget);}}function attemptReplayContinuousQueuedEvent(queuedEvent){if(queuedEvent.blockedOn!==null){return false;}var targetContainers=queuedEvent.targetContainers;while(targetContainers.length>0){var targetContainer=targetContainers[0];var nextBlockedOn=findInstanceBlockingEvent(queuedEvent.domEventName,queuedEvent.eventSystemFlags,targetContainer,queuedEvent.nativeEvent);if(nextBlockedOn===null){{var nativeEvent=queuedEvent.nativeEvent;var nativeEventClone=new nativeEvent.constructor(nativeEvent.type,nativeEvent);setReplayingEvent(nativeEventClone);nativeEvent.target.dispatchEvent(nativeEventClone);resetReplayingEvent();}}else{// We're still blocked. Try again later.
var _fiber3=getInstanceFromNode(nextBlockedOn);if(_fiber3!==null){attemptContinuousHydration(_fiber3);}queuedEvent.blockedOn=nextBlockedOn;return false;}// This target container was successfully dispatched. Try the next.
targetContainers.shift();}return true;}function attemptReplayContinuousQueuedEventInMap(queuedEvent,key,map){if(attemptReplayContinuousQueuedEvent(queuedEvent)){map["delete"](key);}}function replayUnblockedEvents(){hasScheduledReplayAttempt=false;if(queuedFocus!==null&&attemptReplayContinuousQueuedEvent(queuedFocus)){queuedFocus=null;}if(queuedDrag!==null&&attemptReplayContinuousQueuedEvent(queuedDrag)){queuedDrag=null;}if(queuedMouse!==null&&attemptReplayContinuousQueuedEvent(queuedMouse)){queuedMouse=null;}queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);}function scheduleCallbackIfUnblocked(queuedEvent,unblocked){if(queuedEvent.blockedOn===unblocked){queuedEvent.blockedOn=null;if(!hasScheduledReplayAttempt){hasScheduledReplayAttempt=true;// Schedule a callback to attempt replaying as many events as are
// now unblocked. This first might not actually be unblocked yet.
// We could check it early to avoid scheduling an unnecessary callback.
Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority,replayUnblockedEvents);}}}function retryIfBlockedOn(unblocked){// Mark anything that was blocked on this as no longer blocked
// and eligible for a replay.
if(queuedDiscreteEvents.length>0){scheduleCallbackIfUnblocked(queuedDiscreteEvents[0],unblocked);// This is a exponential search for each boundary that commits. I think it's
// worth it because we expect very few discrete events to queue up and once
// we are actually fully unblocked it will be fast to replay them.
for(var i=1;i<queuedDiscreteEvents.length;i++){var queuedEvent=queuedDiscreteEvents[i];if(queuedEvent.blockedOn===unblocked){queuedEvent.blockedOn=null;}}}if(queuedFocus!==null){scheduleCallbackIfUnblocked(queuedFocus,unblocked);}if(queuedDrag!==null){scheduleCallbackIfUnblocked(queuedDrag,unblocked);}if(queuedMouse!==null){scheduleCallbackIfUnblocked(queuedMouse,unblocked);}var unblock=function unblock(queuedEvent){return scheduleCallbackIfUnblocked(queuedEvent,unblocked);};queuedPointers.forEach(unblock);queuedPointerCaptures.forEach(unblock);for(var _i=0;_i<queuedExplicitHydrationTargets.length;_i++){var queuedTarget=queuedExplicitHydrationTargets[_i];if(queuedTarget.blockedOn===unblocked){queuedTarget.blockedOn=null;}}while(queuedExplicitHydrationTargets.length>0){var nextExplicitTarget=queuedExplicitHydrationTargets[0];if(nextExplicitTarget.blockedOn!==null){// We're still blocked.
break;}else{attemptExplicitHydrationTarget(nextExplicitTarget);if(nextExplicitTarget.blockedOn===null){// We're unblocked.
queuedExplicitHydrationTargets.shift();}}}}var ReactCurrentBatchConfig=ReactSharedInternals.ReactCurrentBatchConfig;// TODO: can we stop exporting these?
var _enabled=true;// This is exported in FB builds for use by legacy FB layer infra.
// We'd like to remove this but it's not clear if this is safe.
function setEnabled(enabled){_enabled=!!enabled;}function isEnabled(){return _enabled;}function createEventListenerWrapperWithPriority(targetContainer,domEventName,eventSystemFlags){var eventPriority=getEventPriority(domEventName);var listenerWrapper;switch(eventPriority){case DiscreteEventPriority:listenerWrapper=dispatchDiscreteEvent;break;case ContinuousEventPriority:listenerWrapper=dispatchContinuousEvent;break;case DefaultEventPriority:default:listenerWrapper=dispatchEvent;break;}return listenerWrapper.bind(null,domEventName,eventSystemFlags,targetContainer);}function dispatchDiscreteEvent(domEventName,eventSystemFlags,container,nativeEvent){var previousPriority=getCurrentUpdatePriority();var prevTransition=ReactCurrentBatchConfig.transition;ReactCurrentBatchConfig.transition=null;try{setCurrentUpdatePriority(DiscreteEventPriority);dispatchEvent(domEventName,eventSystemFlags,container,nativeEvent);}finally{setCurrentUpdatePriority(previousPriority);ReactCurrentBatchConfig.transition=prevTransition;}}function dispatchContinuousEvent(domEventName,eventSystemFlags,container,nativeEvent){var previousPriority=getCurrentUpdatePriority();var prevTransition=ReactCurrentBatchConfig.transition;ReactCurrentBatchConfig.transition=null;try{setCurrentUpdatePriority(ContinuousEventPriority);dispatchEvent(domEventName,eventSystemFlags,container,nativeEvent);}finally{setCurrentUpdatePriority(previousPriority);ReactCurrentBatchConfig.transition=prevTransition;}}function dispatchEvent(domEventName,eventSystemFlags,targetContainer,nativeEvent){if(!_enabled){return;}{dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName,eventSystemFlags,targetContainer,nativeEvent);}}function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName,eventSystemFlags,targetContainer,nativeEvent){var blockedOn=findInstanceBlockingEvent(domEventName,eventSystemFlags,targetContainer,nativeEvent);if(blockedOn===null){dispatchEventForPluginEventSystem(domEventName,eventSystemFlags,nativeEvent,return_targetInst,targetContainer);clearIfContinuousEvent(domEventName,nativeEvent);return;}if(queueIfContinuousEvent(blockedOn,domEventName,eventSystemFlags,targetContainer,nativeEvent)){nativeEvent.stopPropagation();return;}// We need to clear only if we didn't queue because
// queueing is accumulative.
clearIfContinuousEvent(domEventName,nativeEvent);if(eventSystemFlags&IS_CAPTURE_PHASE&&isDiscreteEventThatRequiresHydration(domEventName)){while(blockedOn!==null){var fiber=getInstanceFromNode(blockedOn);if(fiber!==null){attemptSynchronousHydration(fiber);}var nextBlockedOn=findInstanceBlockingEvent(domEventName,eventSystemFlags,targetContainer,nativeEvent);if(nextBlockedOn===null){dispatchEventForPluginEventSystem(domEventName,eventSystemFlags,nativeEvent,return_targetInst,targetContainer);}if(nextBlockedOn===blockedOn){break;}blockedOn=nextBlockedOn;}if(blockedOn!==null){nativeEvent.stopPropagation();}return;}// This is not replayable so we'll invoke it but without a target,
// in case the event system needs to trace it.
dispatchEventForPluginEventSystem(domEventName,eventSystemFlags,nativeEvent,null,targetContainer);}var return_targetInst=null;// Returns a SuspenseInstance or Container if it's blocked.
// The return_targetInst field above is conceptually part of the return value.
function findInstanceBlockingEvent(domEventName,eventSystemFlags,targetContainer,nativeEvent){// TODO: Warn if _enabled is false.
return_targetInst=null;var nativeEventTarget=getEventTarget(nativeEvent);var targetInst=getClosestInstanceFromNode(nativeEventTarget);if(targetInst!==null){var nearestMounted=getNearestMountedFiber(targetInst);if(nearestMounted===null){// This tree has been unmounted already. Dispatch without a target.
targetInst=null;}else{var tag=nearestMounted.tag;if(tag===SuspenseComponent){var instance=getSuspenseInstanceFromFiber(nearestMounted);if(instance!==null){// Queue the event to be replayed later. Abort dispatching since we
// don't want this event dispatched twice through the event system.
// TODO: If this is the first discrete event in the queue. Schedule an increased
// priority for this boundary.
return instance;}// This shouldn't happen, something went wrong but to avoid blocking
// the whole system, dispatch the event without a target.
// TODO: Warn.
targetInst=null;}else if(tag===HostRoot){var root=nearestMounted.stateNode;if(isRootDehydrated(root)){// If this happens during a replay something went wrong and it might block
// the whole system.
return getContainerFromFiber(nearestMounted);}targetInst=null;}else if(nearestMounted!==targetInst){// If we get an event (ex: img onload) before committing that
// component's mount, ignore it for now (that is, treat it as if it was an
// event on a non-React tree). We might also consider queueing events and
// dispatching them after the mount.
targetInst=null;}}}return_targetInst=targetInst;// We're not blocked on anything.
return null;}function getEventPriority(domEventName){switch(domEventName){// Used by SimpleEventPlugin:
case'cancel':case'click':case'close':case'contextmenu':case'copy':case'cut':case'auxclick':case'dblclick':case'dragend':case'dragstart':case'drop':case'focusin':case'focusout':case'input':case'invalid':case'keydown':case'keypress':case'keyup':case'mousedown':case'mouseup':case'paste':case'pause':case'play':case'pointercancel':case'pointerdown':case'pointerup':case'ratechange':case'reset':case'resize':case'seeked':case'submit':case'touchcancel':case'touchend':case'touchstart':case'volumechange':// Used by polyfills:
// eslint-disable-next-line no-fallthrough
case'change':case'selectionchange':case'textInput':case'compositionstart':case'compositionend':case'compositionupdate':// Only enableCreateEventHandleAPI:
// eslint-disable-next-line no-fallthrough
case'beforeblur':case'afterblur':// Not used by React but could be by user code:
// eslint-disable-next-line no-fallthrough
case'beforeinput':case'blur':case'fullscreenchange':case'focus':case'hashchange':case'popstate':case'select':case'selectstart':return DiscreteEventPriority;case'drag':case'dragenter':case'dragexit':case'dragleave':case'dragover':case'mousemove':case'mouseout':case'mouseover':case'pointermove':case'pointerout':case'pointerover':case'scroll':case'toggle':case'touchmove':case'wheel':// Not used by React but could be by user code:
// eslint-disable-next-line no-fallthrough
case'mouseenter':case'mouseleave':case'pointerenter':case'pointerleave':return ContinuousEventPriority;case'message':{// We might be in the Scheduler callback.
// Eventually this mechanism will be replaced by a check
// of the current priority on the native scheduler.
var schedulerPriority=getCurrentPriorityLevel();switch(schedulerPriority){case ImmediatePriority:return DiscreteEventPriority;case UserBlockingPriority:return ContinuousEventPriority;case NormalPriority:case LowPriority:// TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
return DefaultEventPriority;case IdlePriority:return IdleEventPriority;default:return DefaultEventPriority;}}default:return DefaultEventPriority;}}function addEventBubbleListener(target,eventType,listener){target.addEventListener(eventType,listener,false);return listener;}function addEventCaptureListener(target,eventType,listener){target.addEventListener(eventType,listener,true);return listener;}function addEventCaptureListenerWithPassiveFlag(target,eventType,listener,passive){target.addEventListener(eventType,listener,{capture:true,passive:passive});return listener;}function addEventBubbleListenerWithPassiveFlag(target,eventType,listener,passive){target.addEventListener(eventType,listener,{passive:passive});return listener;}/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */var root=null;var startText=null;var fallbackText=null;function initialize(nativeEventTarget){root=nativeEventTarget;startText=getText();return true;}function reset(){root=null;startText=null;fallbackText=null;}function getData(){if(fallbackText){return fallbackText;}var start;var startValue=startText;var startLength=startValue.length;var end;var endValue=getText();var endLength=endValue.length;for(start=0;start<startLength;start++){if(startValue[start]!==endValue[start]){break;}}var minEnd=startLength-start;for(end=1;end<=minEnd;end++){if(startValue[startLength-end]!==endValue[endLength-end]){break;}}var sliceTail=end>1?1-end:undefined;fallbackText=endValue.slice(start,sliceTail);return fallbackText;}function getText(){if('value'in root){return root.value;}return root.textContent;}/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */function getEventCharCode(nativeEvent){var charCode;var keyCode=nativeEvent.keyCode;if('charCode'in nativeEvent){charCode=nativeEvent.charCode;// FF does not set `charCode` for the Enter-key, check against `keyCode`.
if(charCode===0&&keyCode===13){charCode=13;}}else{// IE8 does not implement `charCode`, but `keyCode` has the correct value.
charCode=keyCode;}// IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
// report Enter as charCode 10 when ctrl is pressed.
if(charCode===10){charCode=13;}// Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
// Must not discard the (non-)printable Enter-key.
if(charCode>=32||charCode===13){return charCode;}return 0;}function functionThatReturnsTrue(){return true;}function functionThatReturnsFalse(){return false;}// This is intentionally a factory so that we have different returned constructors.
// If we had a single constructor, it would be megamorphic and engines would deopt.
function createSyntheticEvent(Interface){/**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */function SyntheticBaseEvent(reactName,reactEventType,targetInst,nativeEvent,nativeEventTarget){this._reactName=reactName;this._targetInst=targetInst;this.type=reactEventType;this.nativeEvent=nativeEvent;this.target=nativeEventTarget;this.currentTarget=null;for(var _propName in Interface){if(!Interface.hasOwnProperty(_propName)){continue;}var normalize=Interface[_propName];if(normalize){this[_propName]=normalize(nativeEvent);}else{this[_propName]=nativeEvent[_propName];}}var defaultPrevented=nativeEvent.defaultPrevented!=null?nativeEvent.defaultPrevented:nativeEvent.returnValue===false;if(defaultPrevented){this.isDefaultPrevented=functionThatReturnsTrue;}else{this.isDefaultPrevented=functionThatReturnsFalse;}this.isPropagationStopped=functionThatReturnsFalse;return this;}assign(SyntheticBaseEvent.prototype,{preventDefault:function preventDefault(){this.defaultPrevented=true;var event=this.nativeEvent;if(!event){return;}if(event.preventDefault){event.preventDefault();// $FlowFixMe - flow is not aware of `unknown` in IE
}else if(typeof event.returnValue!=='unknown'){event.returnValue=false;}this.isDefaultPrevented=functionThatReturnsTrue;},stopPropagation:function stopPropagation(){var event=this.nativeEvent;if(!event){return;}if(event.stopPropagation){event.stopPropagation();// $FlowFixMe - flow is not aware of `unknown` in IE
}else if(typeof event.cancelBubble!=='unknown'){// The ChangeEventPlugin registers a "propertychange" event for
// IE. This event does not support bubbling or cancelling, and
// any references to cancelBubble throw "Member not found".  A
// typeof check of "unknown" circumvents this issue (and is also
// IE specific).
event.cancelBubble=true;}this.isPropagationStopped=functionThatReturnsTrue;},/**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */persist:function persist(){// Modern event system doesn't use pooling.
},/**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */isPersistent:functionThatReturnsTrue});return SyntheticBaseEvent;}/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var EventInterface={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function timeStamp(event){return event.timeStamp||Date.now();},defaultPrevented:0,isTrusted:0};var SyntheticEvent=createSyntheticEvent(EventInterface);var UIEventInterface=assign({},EventInterface,{view:0,detail:0});var SyntheticUIEvent=createSyntheticEvent(UIEventInterface);var lastMovementX;var lastMovementY;var lastMouseEvent;function updateMouseMovementPolyfillState(event){if(event!==lastMouseEvent){if(lastMouseEvent&&event.type==='mousemove'){lastMovementX=event.screenX-lastMouseEvent.screenX;lastMovementY=event.screenY-lastMouseEvent.screenY;}else{lastMovementX=0;lastMovementY=0;}lastMouseEvent=event;}}/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var MouseEventInterface=assign({},UIEventInterface,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:getEventModifierState,button:0,buttons:0,relatedTarget:function relatedTarget(event){if(event.relatedTarget===undefined)return event.fromElement===event.srcElement?event.toElement:event.fromElement;return event.relatedTarget;},movementX:function movementX(event){if('movementX'in event){return event.movementX;}updateMouseMovementPolyfillState(event);return lastMovementX;},movementY:function movementY(event){if('movementY'in event){return event.movementY;}// Don't need to call updateMouseMovementPolyfillState() here
// because it's guaranteed to have already run when movementX
// was copied.
return lastMovementY;}});var SyntheticMouseEvent=createSyntheticEvent(MouseEventInterface);/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var DragEventInterface=assign({},MouseEventInterface,{dataTransfer:0});var SyntheticDragEvent=createSyntheticEvent(DragEventInterface);/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var FocusEventInterface=assign({},UIEventInterface,{relatedTarget:0});var SyntheticFocusEvent=createSyntheticEvent(FocusEventInterface);/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */var AnimationEventInterface=assign({},EventInterface,{animationName:0,elapsedTime:0,pseudoElement:0});var SyntheticAnimationEvent=createSyntheticEvent(AnimationEventInterface);/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */var ClipboardEventInterface=assign({},EventInterface,{clipboardData:function clipboardData(event){return'clipboardData'in event?event.clipboardData:window.clipboardData;}});var SyntheticClipboardEvent=createSyntheticEvent(ClipboardEventInterface);/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */var CompositionEventInterface=assign({},EventInterface,{data:0});var SyntheticCompositionEvent=createSyntheticEvent(CompositionEventInterface);/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */// Happens to share the same list for now.
var SyntheticInputEvent=SyntheticCompositionEvent;/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */var normalizeKey={Esc:'Escape',Spacebar:' ',Left:'ArrowLeft',Up:'ArrowUp',Right:'ArrowRight',Down:'ArrowDown',Del:'Delete',Win:'OS',Menu:'ContextMenu',Apps:'ContextMenu',Scroll:'ScrollLock',MozPrintableKey:'Unidentified'};/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */var translateToKey={'8':'Backspace','9':'Tab','12':'Clear','13':'Enter','16':'Shift','17':'Control','18':'Alt','19':'Pause','20':'CapsLock','27':'Escape','32':' ','33':'PageUp','34':'PageDown','35':'End','36':'Home','37':'ArrowLeft','38':'ArrowUp','39':'ArrowRight','40':'ArrowDown','45':'Insert','46':'Delete','112':'F1','113':'F2','114':'F3','115':'F4','116':'F5','117':'F6','118':'F7','119':'F8','120':'F9','121':'F10','122':'F11','123':'F12','144':'NumLock','145':'ScrollLock','224':'Meta'};/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */function getEventKey(nativeEvent){if(nativeEvent.key){// Normalize inconsistent values reported by browsers due to
// implementations of a working draft specification.
// FireFox implements `key` but returns `MozPrintableKey` for all
// printable characters (normalized to `Unidentified`), ignore it.
var key=normalizeKey[nativeEvent.key]||nativeEvent.key;if(key!=='Unidentified'){return key;}}// Browser does not implement `key`, polyfill as much of it as we can.
if(nativeEvent.type==='keypress'){var charCode=getEventCharCode(nativeEvent);// The enter-key is technically both printable and non-printable and can
// thus be captured by `keypress`, no other non-printable key should.
return charCode===13?'Enter':String.fromCharCode(charCode);}if(nativeEvent.type==='keydown'||nativeEvent.type==='keyup'){// While user keyboard layout determines the actual meaning of each
// `keyCode` value, almost all function keys have a universal value.
return translateToKey[nativeEvent.keyCode]||'Unidentified';}return'';}/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */var modifierKeyToProp={Alt:'altKey',Control:'ctrlKey',Meta:'metaKey',Shift:'shiftKey'};// Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
// getModifierState. If getModifierState is not supported, we map it to a set of
// modifier keys exposed by the event. In this case, Lock-keys are not supported.
function modifierStateGetter(keyArg){var syntheticEvent=this;var nativeEvent=syntheticEvent.nativeEvent;if(nativeEvent.getModifierState){return nativeEvent.getModifierState(keyArg);}var keyProp=modifierKeyToProp[keyArg];return keyProp?!!nativeEvent[keyProp]:false;}function getEventModifierState(nativeEvent){return modifierStateGetter;}/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var KeyboardEventInterface=assign({},UIEventInterface,{key:getEventKey,code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:getEventModifierState,// Legacy Interface
charCode:function charCode(event){// `charCode` is the result of a KeyPress event and represents the value of
// the actual printable character.
// KeyPress is deprecated, but its replacement is not yet final and not
// implemented in any major browser. Only KeyPress has charCode.
if(event.type==='keypress'){return getEventCharCode(event);}return 0;},keyCode:function keyCode(event){// `keyCode` is the result of a KeyDown/Up event and represents the value of
// physical keyboard key.
// The actual meaning of the value depends on the users' keyboard layout
// which cannot be detected. Assuming that it is a US keyboard layout
// provides a surprisingly accurate mapping for US and European users.
// Due to this, it is left to the user to implement at this time.
if(event.type==='keydown'||event.type==='keyup'){return event.keyCode;}return 0;},which:function which(event){// `which` is an alias for either `keyCode` or `charCode` depending on the
// type of the event.
if(event.type==='keypress'){return getEventCharCode(event);}if(event.type==='keydown'||event.type==='keyup'){return event.keyCode;}return 0;}});var SyntheticKeyboardEvent=createSyntheticEvent(KeyboardEventInterface);/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */var PointerEventInterface=assign({},MouseEventInterface,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0});var SyntheticPointerEvent=createSyntheticEvent(PointerEventInterface);/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */var TouchEventInterface=assign({},UIEventInterface,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:getEventModifierState});var SyntheticTouchEvent=createSyntheticEvent(TouchEventInterface);/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */var TransitionEventInterface=assign({},EventInterface,{propertyName:0,elapsedTime:0,pseudoElement:0});var SyntheticTransitionEvent=createSyntheticEvent(TransitionEventInterface);/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */var WheelEventInterface=assign({},MouseEventInterface,{deltaX:function deltaX(event){return'deltaX'in event?event.deltaX:// Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
'wheelDeltaX'in event?-event.wheelDeltaX:0;},deltaY:function deltaY(event){return'deltaY'in event?event.deltaY:// Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
'wheelDeltaY'in event?-event.wheelDeltaY:// Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
'wheelDelta'in event?-event.wheelDelta:0;},deltaZ:0,// Browsers without "deltaMode" is reporting in raw wheel delta where one
// notch on the scroll is always +/- 120, roughly equivalent to pixels.
// A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
// ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
deltaMode:0});var SyntheticWheelEvent=createSyntheticEvent(WheelEventInterface);var END_KEYCODES=[9,13,27,32];// Tab, Return, Esc, Space
var START_KEYCODE=229;var canUseCompositionEvent=canUseDOM&&'CompositionEvent'in window;var documentMode=null;if(canUseDOM&&'documentMode'in document){documentMode=document.documentMode;}// Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.
var canUseTextInputEvent=canUseDOM&&'TextEvent'in window&&!documentMode;// In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.
var useFallbackCompositionData=canUseDOM&&(!canUseCompositionEvent||documentMode&&documentMode>8&&documentMode<=11);var SPACEBAR_CODE=32;var SPACEBAR_CHAR=String.fromCharCode(SPACEBAR_CODE);function registerEvents(){registerTwoPhaseEvent('onBeforeInput',['compositionend','keypress','textInput','paste']);registerTwoPhaseEvent('onCompositionEnd',['compositionend','focusout','keydown','keypress','keyup','mousedown']);registerTwoPhaseEvent('onCompositionStart',['compositionstart','focusout','keydown','keypress','keyup','mousedown']);registerTwoPhaseEvent('onCompositionUpdate',['compositionupdate','focusout','keydown','keypress','keyup','mousedown']);}// Track whether we've ever handled a keypress on the space key.
var hasSpaceKeypress=false;/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */function isKeypressCommand(nativeEvent){return(nativeEvent.ctrlKey||nativeEvent.altKey||nativeEvent.metaKey)&&// ctrlKey && altKey is equivalent to AltGr, and is not a command.
!(nativeEvent.ctrlKey&&nativeEvent.altKey);}/**
 * Translate native top level events into event types.
 */function getCompositionEventType(domEventName){switch(domEventName){case'compositionstart':return'onCompositionStart';case'compositionend':return'onCompositionEnd';case'compositionupdate':return'onCompositionUpdate';}}/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */function isFallbackCompositionStart(domEventName,nativeEvent){return domEventName==='keydown'&&nativeEvent.keyCode===START_KEYCODE;}/**
 * Does our fallback mode think that this event is the end of composition?
 */function isFallbackCompositionEnd(domEventName,nativeEvent){switch(domEventName){case'keyup':// Command keys insert or clear IME input.
return END_KEYCODES.indexOf(nativeEvent.keyCode)!==-1;case'keydown':// Expect IME keyCode on each keydown. If we get any other
// code we must have exited earlier.
return nativeEvent.keyCode!==START_KEYCODE;case'keypress':case'mousedown':case'focusout':// Events are not possible without cancelling IME.
return true;default:return false;}}/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */function getDataFromCustomEvent(nativeEvent){var detail=nativeEvent.detail;if(_typeof(detail)==='object'&&'data'in detail){return detail.data;}return null;}/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */function isUsingKoreanIME(nativeEvent){return nativeEvent.locale==='ko';}// Track the current IME composition status, if any.
var isComposing=false;/**
 * @return {?object} A SyntheticCompositionEvent.
 */function extractCompositionEvent(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget){var eventType;var fallbackData;if(canUseCompositionEvent){eventType=getCompositionEventType(domEventName);}else if(!isComposing){if(isFallbackCompositionStart(domEventName,nativeEvent)){eventType='onCompositionStart';}}else if(isFallbackCompositionEnd(domEventName,nativeEvent)){eventType='onCompositionEnd';}if(!eventType){return null;}if(useFallbackCompositionData&&!isUsingKoreanIME(nativeEvent)){// The current composition is stored statically and must not be
// overwritten while composition continues.
if(!isComposing&&eventType==='onCompositionStart'){isComposing=initialize(nativeEventTarget);}else if(eventType==='onCompositionEnd'){if(isComposing){fallbackData=getData();}}}var listeners=accumulateTwoPhaseListeners(targetInst,eventType);if(listeners.length>0){var event=new SyntheticCompositionEvent(eventType,domEventName,null,nativeEvent,nativeEventTarget);dispatchQueue.push({event:event,listeners:listeners});if(fallbackData){// Inject data generated from fallback path into the synthetic event.
// This matches the property of native CompositionEventInterface.
event.data=fallbackData;}else{var customData=getDataFromCustomEvent(nativeEvent);if(customData!==null){event.data=customData;}}}}function getNativeBeforeInputChars(domEventName,nativeEvent){switch(domEventName){case'compositionend':return getDataFromCustomEvent(nativeEvent);case'keypress':/**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */var which=nativeEvent.which;if(which!==SPACEBAR_CODE){return null;}hasSpaceKeypress=true;return SPACEBAR_CHAR;case'textInput':// Record the characters to be added to the DOM.
var chars=nativeEvent.data;// If it's a spacebar character, assume that we have already handled
// it at the keypress level and bail immediately. Android Chrome
// doesn't give us keycodes, so we need to ignore it.
if(chars===SPACEBAR_CHAR&&hasSpaceKeypress){return null;}return chars;default:// For other native event types, do nothing.
return null;}}/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */function getFallbackBeforeInputChars(domEventName,nativeEvent){// If we are currently composing (IME) and using a fallback to do so,
// try to extract the composed characters from the fallback object.
// If composition event is available, we extract a string only at
// compositionevent, otherwise extract it at fallback events.
if(isComposing){if(domEventName==='compositionend'||!canUseCompositionEvent&&isFallbackCompositionEnd(domEventName,nativeEvent)){var chars=getData();reset();isComposing=false;return chars;}return null;}switch(domEventName){case'paste':// If a paste event occurs after a keypress, throw out the input
// chars. Paste events should not lead to BeforeInput events.
return null;case'keypress':/**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */if(!isKeypressCommand(nativeEvent)){// IE fires the `keypress` event when a user types an emoji via
// Touch keyboard of Windows.  In such a case, the `char` property
// holds an emoji character like `\uD83D\uDE0A`.  Because its length
// is 2, the property `which` does not represent an emoji correctly.
// In such a case, we directly return the `char` property instead of
// using `which`.
if(nativeEvent["char"]&&nativeEvent["char"].length>1){return nativeEvent["char"];}else if(nativeEvent.which){return String.fromCharCode(nativeEvent.which);}}return null;case'compositionend':return useFallbackCompositionData&&!isUsingKoreanIME(nativeEvent)?null:nativeEvent.data;default:return null;}}/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */function extractBeforeInputEvent(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget){var chars;if(canUseTextInputEvent){chars=getNativeBeforeInputChars(domEventName,nativeEvent);}else{chars=getFallbackBeforeInputChars(domEventName,nativeEvent);}// If no characters are being inserted, no BeforeInput event should
// be fired.
if(!chars){return null;}var listeners=accumulateTwoPhaseListeners(targetInst,'onBeforeInput');if(listeners.length>0){var event=new SyntheticInputEvent('onBeforeInput','beforeinput',null,nativeEvent,nativeEventTarget);dispatchQueue.push({event:event,listeners:listeners});event.data=chars;}}/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */function extractEvents(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags,targetContainer){extractCompositionEvent(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget);extractBeforeInputEvent(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget);}/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */var supportedInputTypes={color:true,date:true,datetime:true,'datetime-local':true,email:true,month:true,number:true,password:true,range:true,search:true,tel:true,text:true,time:true,url:true,week:true};function isTextInputElement(elem){var nodeName=elem&&elem.nodeName&&elem.nodeName.toLowerCase();if(nodeName==='input'){return!!supportedInputTypes[elem.type];}if(nodeName==='textarea'){return true;}return false;}/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */function isEventSupported(eventNameSuffix){if(!canUseDOM){return false;}var eventName='on'+eventNameSuffix;var isSupported=eventName in document;if(!isSupported){var element=document.createElement('div');element.setAttribute(eventName,'return;');isSupported=typeof element[eventName]==='function';}return isSupported;}function registerEvents$1(){registerTwoPhaseEvent('onChange',['change','click','focusin','focusout','input','keydown','keyup','selectionchange']);}function createAndAccumulateChangeEvent(dispatchQueue,inst,nativeEvent,target){// Flag this event loop as needing state restore.
enqueueStateRestore(target);var listeners=accumulateTwoPhaseListeners(inst,'onChange');if(listeners.length>0){var event=new SyntheticEvent('onChange','change',null,nativeEvent,target);dispatchQueue.push({event:event,listeners:listeners});}}/**
 * For IE shims
 */var activeElement=null;var activeElementInst=null;/**
 * SECTION: handle `change` event
 */function shouldUseChangeEvent(elem){var nodeName=elem.nodeName&&elem.nodeName.toLowerCase();return nodeName==='select'||nodeName==='input'&&elem.type==='file';}function manualDispatchChangeEvent(nativeEvent){var dispatchQueue=[];createAndAccumulateChangeEvent(dispatchQueue,activeElementInst,nativeEvent,getEventTarget(nativeEvent));// If change and propertychange bubbled, we'd just bind to it like all the
// other events and have it go through ReactBrowserEventEmitter. Since it
// doesn't, we manually listen for the events and so we have to enqueue and
// process the abstract event manually.
//
// Batching is necessary here in order to ensure that all event handlers run
// before the next rerender (including event handlers attached to ancestor
// elements instead of directly on the input). Without this, controlled
// components don't work properly in conjunction with event bubbling because
// the component is rerendered and the value reverted before all the event
// handlers can run. See https://github.com/facebook/react/issues/708.
batchedUpdates(runEventInBatch,dispatchQueue);}function runEventInBatch(dispatchQueue){processDispatchQueue(dispatchQueue,0);}function getInstIfValueChanged(targetInst){var targetNode=getNodeFromInstance(targetInst);if(updateValueIfChanged(targetNode)){return targetInst;}}function getTargetInstForChangeEvent(domEventName,targetInst){if(domEventName==='change'){return targetInst;}}/**
 * SECTION: handle `input` event
 */var isInputEventSupported=false;if(canUseDOM){// IE9 claims to support the input event but fails to trigger it when
// deleting text, so we ignore its input events.
isInputEventSupported=isEventSupported('input')&&(!document.documentMode||document.documentMode>9);}/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */function startWatchingForValueChange(target,targetInst){activeElement=target;activeElementInst=targetInst;activeElement.attachEvent('onpropertychange',handlePropertyChange);}/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */function stopWatchingForValueChange(){if(!activeElement){return;}activeElement.detachEvent('onpropertychange',handlePropertyChange);activeElement=null;activeElementInst=null;}/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */function handlePropertyChange(nativeEvent){if(nativeEvent.propertyName!=='value'){return;}if(getInstIfValueChanged(activeElementInst)){manualDispatchChangeEvent(nativeEvent);}}function handleEventsForInputEventPolyfill(domEventName,target,targetInst){if(domEventName==='focusin'){// In IE9, propertychange fires for most input events but is buggy and
// doesn't fire when text is deleted, but conveniently, selectionchange
// appears to fire in all of the remaining cases so we catch those and
// forward the event if the value has changed
// In either case, we don't want to call the event handler if the value
// is changed from JS so we redefine a setter for `.value` that updates
// our activeElementValue variable, allowing us to ignore those changes
//
// stopWatching() should be a noop here but we call it just in case we
// missed a blur event somehow.
stopWatchingForValueChange();startWatchingForValueChange(target,targetInst);}else if(domEventName==='focusout'){stopWatchingForValueChange();}}// For IE8 and IE9.
function getTargetInstForInputEventPolyfill(domEventName,targetInst){if(domEventName==='selectionchange'||domEventName==='keyup'||domEventName==='keydown'){// On the selectionchange event, the target is just document which isn't
// helpful for us so just check activeElement instead.
//
// 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
// propertychange on the first input event after setting `value` from a
// script and fires only keydown, keypress, keyup. Catching keyup usually
// gets it and catching keydown lets us fire an event for the first
// keystroke if user does a key repeat (it'll be a little delayed: right
// before the second keystroke). Other input methods (e.g., paste) seem to
// fire selectionchange normally.
return getInstIfValueChanged(activeElementInst);}}/**
 * SECTION: handle `click` event
 */function shouldUseClickEvent(elem){// Use the `click` event to detect changes to checkbox and radio inputs.
// This approach works across all browsers, whereas `change` does not fire
// until `blur` in IE8.
var nodeName=elem.nodeName;return nodeName&&nodeName.toLowerCase()==='input'&&(elem.type==='checkbox'||elem.type==='radio');}function getTargetInstForClickEvent(domEventName,targetInst){if(domEventName==='click'){return getInstIfValueChanged(targetInst);}}function getTargetInstForInputOrChangeEvent(domEventName,targetInst){if(domEventName==='input'||domEventName==='change'){return getInstIfValueChanged(targetInst);}}function handleControlledInputBlur(node){var state=node._wrapperState;if(!state||!state.controlled||node.type!=='number'){return;}{// If controlled, assign the value attribute to the current value on blur
setDefaultValue(node,'number',node.value);}}/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */function extractEvents$1(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags,targetContainer){var targetNode=targetInst?getNodeFromInstance(targetInst):window;var getTargetInstFunc,handleEventFunc;if(shouldUseChangeEvent(targetNode)){getTargetInstFunc=getTargetInstForChangeEvent;}else if(isTextInputElement(targetNode)){if(isInputEventSupported){getTargetInstFunc=getTargetInstForInputOrChangeEvent;}else{getTargetInstFunc=getTargetInstForInputEventPolyfill;handleEventFunc=handleEventsForInputEventPolyfill;}}else if(shouldUseClickEvent(targetNode)){getTargetInstFunc=getTargetInstForClickEvent;}if(getTargetInstFunc){var inst=getTargetInstFunc(domEventName,targetInst);if(inst){createAndAccumulateChangeEvent(dispatchQueue,inst,nativeEvent,nativeEventTarget);return;}}if(handleEventFunc){handleEventFunc(domEventName,targetNode,targetInst);}// When blurring, set the value attribute for number inputs
if(domEventName==='focusout'){handleControlledInputBlur(targetNode);}}function registerEvents$2(){registerDirectEvent('onMouseEnter',['mouseout','mouseover']);registerDirectEvent('onMouseLeave',['mouseout','mouseover']);registerDirectEvent('onPointerEnter',['pointerout','pointerover']);registerDirectEvent('onPointerLeave',['pointerout','pointerover']);}/**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */function extractEvents$2(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags,targetContainer){var isOverEvent=domEventName==='mouseover'||domEventName==='pointerover';var isOutEvent=domEventName==='mouseout'||domEventName==='pointerout';if(isOverEvent&&!isReplayingEvent(nativeEvent)){// If this is an over event with a target, we might have already dispatched
// the event in the out event of the other target. If this is replayed,
// then it's because we couldn't dispatch against this target previously
// so we have to do it now instead.
var related=nativeEvent.relatedTarget||nativeEvent.fromElement;if(related){// If the related node is managed by React, we can assume that we have
// already dispatched the corresponding events during its mouseout.
if(getClosestInstanceFromNode(related)||isContainerMarkedAsRoot(related)){return;}}}if(!isOutEvent&&!isOverEvent){// Must not be a mouse or pointer in or out - ignoring.
return;}var win;// TODO: why is this nullable in the types but we read from it?
if(nativeEventTarget.window===nativeEventTarget){// `nativeEventTarget` is probably a window object.
win=nativeEventTarget;}else{// TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
var doc=nativeEventTarget.ownerDocument;if(doc){win=doc.defaultView||doc.parentWindow;}else{win=window;}}var from;var to;if(isOutEvent){var _related=nativeEvent.relatedTarget||nativeEvent.toElement;from=targetInst;to=_related?getClosestInstanceFromNode(_related):null;if(to!==null){var nearestMounted=getNearestMountedFiber(to);if(to!==nearestMounted||to.tag!==HostComponent&&to.tag!==HostText){to=null;}}}else{// Moving to a node from outside the window.
from=null;to=targetInst;}if(from===to){// Nothing pertains to our managed components.
return;}var SyntheticEventCtor=SyntheticMouseEvent;var leaveEventType='onMouseLeave';var enterEventType='onMouseEnter';var eventTypePrefix='mouse';if(domEventName==='pointerout'||domEventName==='pointerover'){SyntheticEventCtor=SyntheticPointerEvent;leaveEventType='onPointerLeave';enterEventType='onPointerEnter';eventTypePrefix='pointer';}var fromNode=from==null?win:getNodeFromInstance(from);var toNode=to==null?win:getNodeFromInstance(to);var leave=new SyntheticEventCtor(leaveEventType,eventTypePrefix+'leave',from,nativeEvent,nativeEventTarget);leave.target=fromNode;leave.relatedTarget=toNode;var enter=null;// We should only process this nativeEvent if we are processing
// the first ancestor. Next time, we will ignore the event.
var nativeTargetInst=getClosestInstanceFromNode(nativeEventTarget);if(nativeTargetInst===targetInst){var enterEvent=new SyntheticEventCtor(enterEventType,eventTypePrefix+'enter',to,nativeEvent,nativeEventTarget);enterEvent.target=toNode;enterEvent.relatedTarget=fromNode;enter=enterEvent;}accumulateEnterLeaveTwoPhaseListeners(dispatchQueue,leave,enter,from,to);}/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */function is(x,y){return x===y&&(x!==0||1/x===1/y)||x!==x&&y!==y// eslint-disable-line no-self-compare
;}var objectIs=typeof Object.is==='function'?Object.is:is;/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */function shallowEqual(objA,objB){if(objectIs(objA,objB)){return true;}if(_typeof(objA)!=='object'||objA===null||_typeof(objB)!=='object'||objB===null){return false;}var keysA=Object.keys(objA);var keysB=Object.keys(objB);if(keysA.length!==keysB.length){return false;}// Test for A's keys different from B.
for(var i=0;i<keysA.length;i++){var currentKey=keysA[i];if(!hasOwnProperty.call(objB,currentKey)||!objectIs(objA[currentKey],objB[currentKey])){return false;}}return true;}/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */function getLeafNode(node){while(node&&node.firstChild){node=node.firstChild;}return node;}/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */function getSiblingNode(node){while(node){if(node.nextSibling){return node.nextSibling;}node=node.parentNode;}}/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */function getNodeForCharacterOffset(root,offset){var node=getLeafNode(root);var nodeStart=0;var nodeEnd=0;while(node){if(node.nodeType===TEXT_NODE){nodeEnd=nodeStart+node.textContent.length;if(nodeStart<=offset&&nodeEnd>=offset){return{node:node,offset:offset-nodeStart};}nodeStart=nodeEnd;}node=getLeafNode(getSiblingNode(node));}}/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */function getOffsets(outerNode){var ownerDocument=outerNode.ownerDocument;var win=ownerDocument&&ownerDocument.defaultView||window;var selection=win.getSelection&&win.getSelection();if(!selection||selection.rangeCount===0){return null;}var anchorNode=selection.anchorNode,anchorOffset=selection.anchorOffset,focusNode=selection.focusNode,focusOffset=selection.focusOffset;// In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
// up/down buttons on an <input type="number">. Anonymous divs do not seem to
// expose properties, triggering a "Permission denied error" if any of its
// properties are accessed. The only seemingly possible way to avoid erroring
// is to access a property that typically works for non-anonymous divs and
// catch any error that may otherwise arise. See
// https://bugzilla.mozilla.org/show_bug.cgi?id=208427
try{/* eslint-disable no-unused-expressions */anchorNode.nodeType;focusNode.nodeType;/* eslint-enable no-unused-expressions */}catch(e){return null;}return getModernOffsetsFromPoints(outerNode,anchorNode,anchorOffset,focusNode,focusOffset);}/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */function getModernOffsetsFromPoints(outerNode,anchorNode,anchorOffset,focusNode,focusOffset){var length=0;var start=-1;var end=-1;var indexWithinAnchor=0;var indexWithinFocus=0;var node=outerNode;var parentNode=null;outer:while(true){var next=null;while(true){if(node===anchorNode&&(anchorOffset===0||node.nodeType===TEXT_NODE)){start=length+anchorOffset;}if(node===focusNode&&(focusOffset===0||node.nodeType===TEXT_NODE)){end=length+focusOffset;}if(node.nodeType===TEXT_NODE){length+=node.nodeValue.length;}if((next=node.firstChild)===null){break;}// Moving from `node` to its first child `next`.
parentNode=node;node=next;}while(true){if(node===outerNode){// If `outerNode` has children, this is always the second time visiting
// it. If it has no children, this is still the first loop, and the only
// valid selection is anchorNode and focusNode both equal to this node
// and both offsets 0, in which case we will have handled above.
break outer;}if(parentNode===anchorNode&&++indexWithinAnchor===anchorOffset){start=length;}if(parentNode===focusNode&&++indexWithinFocus===focusOffset){end=length;}if((next=node.nextSibling)!==null){break;}node=parentNode;parentNode=node.parentNode;}// Moving from `node` to its next sibling `next`.
node=next;}if(start===-1||end===-1){// This should never happen. (Would happen if the anchor/focus nodes aren't
// actually inside the passed-in node.)
return null;}return{start:start,end:end};}/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */function setOffsets(node,offsets){var doc=node.ownerDocument||document;var win=doc&&doc.defaultView||window;// Edge fails with "Object expected" in some scenarios.
// (For instance: TinyMCE editor used in a list component that supports pasting to add more,
// fails when pasting 100+ items)
if(!win.getSelection){return;}var selection=win.getSelection();var length=node.textContent.length;var start=Math.min(offsets.start,length);var end=offsets.end===undefined?start:Math.min(offsets.end,length);// IE 11 uses modern selection, but doesn't support the extend method.
// Flip backward selections, so we can set with a single range.
if(!selection.extend&&start>end){var temp=end;end=start;start=temp;}var startMarker=getNodeForCharacterOffset(node,start);var endMarker=getNodeForCharacterOffset(node,end);if(startMarker&&endMarker){if(selection.rangeCount===1&&selection.anchorNode===startMarker.node&&selection.anchorOffset===startMarker.offset&&selection.focusNode===endMarker.node&&selection.focusOffset===endMarker.offset){return;}var range=doc.createRange();range.setStart(startMarker.node,startMarker.offset);selection.removeAllRanges();if(start>end){selection.addRange(range);selection.extend(endMarker.node,endMarker.offset);}else{range.setEnd(endMarker.node,endMarker.offset);selection.addRange(range);}}}function isTextNode(node){return node&&node.nodeType===TEXT_NODE;}function containsNode(outerNode,innerNode){if(!outerNode||!innerNode){return false;}else if(outerNode===innerNode){return true;}else if(isTextNode(outerNode)){return false;}else if(isTextNode(innerNode)){return containsNode(outerNode,innerNode.parentNode);}else if('contains'in outerNode){return outerNode.contains(innerNode);}else if(outerNode.compareDocumentPosition){return!!(outerNode.compareDocumentPosition(innerNode)&16);}else{return false;}}function isInDocument(node){return node&&node.ownerDocument&&containsNode(node.ownerDocument.documentElement,node);}function isSameOriginFrame(iframe){try{// Accessing the contentDocument of a HTMLIframeElement can cause the browser
// to throw, e.g. if it has a cross-origin src attribute.
// Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
// iframe.contentDocument.defaultView;
// A safety way is to access one of the cross origin properties: Window or Location
// Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
// https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
return typeof iframe.contentWindow.location.href==='string';}catch(err){return false;}}function getActiveElementDeep(){var win=window;var element=getActiveElement();while(element instanceof win.HTMLIFrameElement){if(isSameOriginFrame(element)){win=element.contentWindow;}else{return element;}element=getActiveElement(win.document);}return element;}/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 *//**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */function hasSelectionCapabilities(elem){var nodeName=elem&&elem.nodeName&&elem.nodeName.toLowerCase();return nodeName&&(nodeName==='input'&&(elem.type==='text'||elem.type==='search'||elem.type==='tel'||elem.type==='url'||elem.type==='password')||nodeName==='textarea'||elem.contentEditable==='true');}function getSelectionInformation(){var focusedElem=getActiveElementDeep();return{focusedElem:focusedElem,selectionRange:hasSelectionCapabilities(focusedElem)?getSelection(focusedElem):null};}/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */function restoreSelection(priorSelectionInformation){var curFocusedElem=getActiveElementDeep();var priorFocusedElem=priorSelectionInformation.focusedElem;var priorSelectionRange=priorSelectionInformation.selectionRange;if(curFocusedElem!==priorFocusedElem&&isInDocument(priorFocusedElem)){if(priorSelectionRange!==null&&hasSelectionCapabilities(priorFocusedElem)){setSelection(priorFocusedElem,priorSelectionRange);}// Focusing a node can change the scroll position, which is undesirable
var ancestors=[];var ancestor=priorFocusedElem;while(ancestor=ancestor.parentNode){if(ancestor.nodeType===ELEMENT_NODE){ancestors.push({element:ancestor,left:ancestor.scrollLeft,top:ancestor.scrollTop});}}if(typeof priorFocusedElem.focus==='function'){priorFocusedElem.focus();}for(var i=0;i<ancestors.length;i++){var info=ancestors[i];info.element.scrollLeft=info.left;info.element.scrollTop=info.top;}}}/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */function getSelection(input){var selection;if('selectionStart'in input){// Modern browser with input or textarea.
selection={start:input.selectionStart,end:input.selectionEnd};}else{// Content editable or old IE textarea.
selection=getOffsets(input);}return selection||{start:0,end:0};}/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */function setSelection(input,offsets){var start=offsets.start;var end=offsets.end;if(end===undefined){end=start;}if('selectionStart'in input){input.selectionStart=start;input.selectionEnd=Math.min(end,input.value.length);}else{setOffsets(input,offsets);}}var skipSelectionChangeEvent=canUseDOM&&'documentMode'in document&&document.documentMode<=11;function registerEvents$3(){registerTwoPhaseEvent('onSelect',['focusout','contextmenu','dragend','focusin','keydown','keyup','mousedown','mouseup','selectionchange']);}var activeElement$1=null;var activeElementInst$1=null;var lastSelection=null;var mouseDown=false;/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */function getSelection$1(node){if('selectionStart'in node&&hasSelectionCapabilities(node)){return{start:node.selectionStart,end:node.selectionEnd};}else{var win=node.ownerDocument&&node.ownerDocument.defaultView||window;var selection=win.getSelection();return{anchorNode:selection.anchorNode,anchorOffset:selection.anchorOffset,focusNode:selection.focusNode,focusOffset:selection.focusOffset};}}/**
 * Get document associated with the event target.
 */function getEventTargetDocument(eventTarget){return eventTarget.window===eventTarget?eventTarget.document:eventTarget.nodeType===DOCUMENT_NODE?eventTarget:eventTarget.ownerDocument;}/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */function constructSelectEvent(dispatchQueue,nativeEvent,nativeEventTarget){// Ensure we have the right element, and that the user is not dragging a
// selection (this matches native `select` event behavior). In HTML5, select
// fires only on input and textarea thus if there's no focused element we
// won't dispatch.
var doc=getEventTargetDocument(nativeEventTarget);if(mouseDown||activeElement$1==null||activeElement$1!==getActiveElement(doc)){return;}// Only fire when selection has actually changed.
var currentSelection=getSelection$1(activeElement$1);if(!lastSelection||!shallowEqual(lastSelection,currentSelection)){lastSelection=currentSelection;var listeners=accumulateTwoPhaseListeners(activeElementInst$1,'onSelect');if(listeners.length>0){var event=new SyntheticEvent('onSelect','select',null,nativeEvent,nativeEventTarget);dispatchQueue.push({event:event,listeners:listeners});event.target=activeElement$1;}}}/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */function extractEvents$3(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags,targetContainer){var targetNode=targetInst?getNodeFromInstance(targetInst):window;switch(domEventName){// Track the input node that has focus.
case'focusin':if(isTextInputElement(targetNode)||targetNode.contentEditable==='true'){activeElement$1=targetNode;activeElementInst$1=targetInst;lastSelection=null;}break;case'focusout':activeElement$1=null;activeElementInst$1=null;lastSelection=null;break;// Don't fire the event while the user is dragging. This matches the
// semantics of the native select event.
case'mousedown':mouseDown=true;break;case'contextmenu':case'mouseup':case'dragend':mouseDown=false;constructSelectEvent(dispatchQueue,nativeEvent,nativeEventTarget);break;// Chrome and IE fire non-standard event when selection is changed (and
// sometimes when it hasn't). IE's event fires out of order with respect
// to key and input events on deletion, so we discard it.
//
// Firefox doesn't support selectionchange, so check selection status
// after each key entry. The selection changes after keydown and before
// keyup, but we check on keydown as well in the case of holding down a
// key, when multiple keydown events are fired but only one keyup is.
// This is also our approach for IE handling, for the reason above.
case'selectionchange':if(skipSelectionChangeEvent){break;}// falls through
case'keydown':case'keyup':constructSelectEvent(dispatchQueue,nativeEvent,nativeEventTarget);}}/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */function makePrefixMap(styleProp,eventName){var prefixes={};prefixes[styleProp.toLowerCase()]=eventName.toLowerCase();prefixes['Webkit'+styleProp]='webkit'+eventName;prefixes['Moz'+styleProp]='moz'+eventName;return prefixes;}/**
 * A list of event names to a configurable list of vendor prefixes.
 */var vendorPrefixes={animationend:makePrefixMap('Animation','AnimationEnd'),animationiteration:makePrefixMap('Animation','AnimationIteration'),animationstart:makePrefixMap('Animation','AnimationStart'),transitionend:makePrefixMap('Transition','TransitionEnd')};/**
 * Event names that have already been detected and prefixed (if applicable).
 */var prefixedEventNames={};/**
 * Element to check for prefixes on.
 */var style={};/**
 * Bootstrap if a DOM exists.
 */if(canUseDOM){style=document.createElement('div').style;// On some platforms, in particular some releases of Android 4.x,
// the un-prefixed "animation" and "transition" properties are defined on the
// style object but the events that fire will still be prefixed, so we need
// to check if the un-prefixed events are usable, and if not remove them from the map.
if(!('AnimationEvent'in window)){delete vendorPrefixes.animationend.animation;delete vendorPrefixes.animationiteration.animation;delete vendorPrefixes.animationstart.animation;}// Same as above
if(!('TransitionEvent'in window)){delete vendorPrefixes.transitionend.transition;}}/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */function getVendorPrefixedEventName(eventName){if(prefixedEventNames[eventName]){return prefixedEventNames[eventName];}else if(!vendorPrefixes[eventName]){return eventName;}var prefixMap=vendorPrefixes[eventName];for(var styleProp in prefixMap){if(prefixMap.hasOwnProperty(styleProp)&&styleProp in style){return prefixedEventNames[eventName]=prefixMap[styleProp];}}return eventName;}var ANIMATION_END=getVendorPrefixedEventName('animationend');var ANIMATION_ITERATION=getVendorPrefixedEventName('animationiteration');var ANIMATION_START=getVendorPrefixedEventName('animationstart');var TRANSITION_END=getVendorPrefixedEventName('transitionend');var topLevelEventsToReactNames=new Map();// NOTE: Capitalization is important in this list!
//
// E.g. it needs "pointerDown", not "pointerdown".
// This is because we derive both React name ("onPointerDown")
// and DOM name ("pointerdown") from the same list.
//
// Exceptions that don't match this convention are listed separately.
//
// prettier-ignore
var simpleEventPluginEvents=['abort','auxClick','cancel','canPlay','canPlayThrough','click','close','contextMenu','copy','cut','drag','dragEnd','dragEnter','dragExit','dragLeave','dragOver','dragStart','drop','durationChange','emptied','encrypted','ended','error','gotPointerCapture','input','invalid','keyDown','keyPress','keyUp','load','loadedData','loadedMetadata','loadStart','lostPointerCapture','mouseDown','mouseMove','mouseOut','mouseOver','mouseUp','paste','pause','play','playing','pointerCancel','pointerDown','pointerMove','pointerOut','pointerOver','pointerUp','progress','rateChange','reset','resize','seeked','seeking','stalled','submit','suspend','timeUpdate','touchCancel','touchEnd','touchStart','volumeChange','scroll','toggle','touchMove','waiting','wheel'];function registerSimpleEvent(domEventName,reactName){topLevelEventsToReactNames.set(domEventName,reactName);registerTwoPhaseEvent(reactName,[domEventName]);}function registerSimpleEvents(){for(var i=0;i<simpleEventPluginEvents.length;i++){var eventName=simpleEventPluginEvents[i];var domEventName=eventName.toLowerCase();var capitalizedEvent=eventName[0].toUpperCase()+eventName.slice(1);registerSimpleEvent(domEventName,'on'+capitalizedEvent);}// Special cases where event names don't match.
registerSimpleEvent(ANIMATION_END,'onAnimationEnd');registerSimpleEvent(ANIMATION_ITERATION,'onAnimationIteration');registerSimpleEvent(ANIMATION_START,'onAnimationStart');registerSimpleEvent('dblclick','onDoubleClick');registerSimpleEvent('focusin','onFocus');registerSimpleEvent('focusout','onBlur');registerSimpleEvent(TRANSITION_END,'onTransitionEnd');}function extractEvents$4(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags,targetContainer){var reactName=topLevelEventsToReactNames.get(domEventName);if(reactName===undefined){return;}var SyntheticEventCtor=SyntheticEvent;var reactEventType=domEventName;switch(domEventName){case'keypress':// Firefox creates a keypress event for function keys too. This removes
// the unwanted keypress events. Enter is however both printable and
// non-printable. One would expect Tab to be as well (but it isn't).
if(getEventCharCode(nativeEvent)===0){return;}/* falls through */case'keydown':case'keyup':SyntheticEventCtor=SyntheticKeyboardEvent;break;case'focusin':reactEventType='focus';SyntheticEventCtor=SyntheticFocusEvent;break;case'focusout':reactEventType='blur';SyntheticEventCtor=SyntheticFocusEvent;break;case'beforeblur':case'afterblur':SyntheticEventCtor=SyntheticFocusEvent;break;case'click':// Firefox creates a click event on right mouse clicks. This removes the
// unwanted click events.
if(nativeEvent.button===2){return;}/* falls through */case'auxclick':case'dblclick':case'mousedown':case'mousemove':case'mouseup':// TODO: Disabled elements should not respond to mouse events
/* falls through */case'mouseout':case'mouseover':case'contextmenu':SyntheticEventCtor=SyntheticMouseEvent;break;case'drag':case'dragend':case'dragenter':case'dragexit':case'dragleave':case'dragover':case'dragstart':case'drop':SyntheticEventCtor=SyntheticDragEvent;break;case'touchcancel':case'touchend':case'touchmove':case'touchstart':SyntheticEventCtor=SyntheticTouchEvent;break;case ANIMATION_END:case ANIMATION_ITERATION:case ANIMATION_START:SyntheticEventCtor=SyntheticAnimationEvent;break;case TRANSITION_END:SyntheticEventCtor=SyntheticTransitionEvent;break;case'scroll':SyntheticEventCtor=SyntheticUIEvent;break;case'wheel':SyntheticEventCtor=SyntheticWheelEvent;break;case'copy':case'cut':case'paste':SyntheticEventCtor=SyntheticClipboardEvent;break;case'gotpointercapture':case'lostpointercapture':case'pointercancel':case'pointerdown':case'pointermove':case'pointerout':case'pointerover':case'pointerup':SyntheticEventCtor=SyntheticPointerEvent;break;}var inCapturePhase=(eventSystemFlags&IS_CAPTURE_PHASE)!==0;{// Some events don't bubble in the browser.
// In the past, React has always bubbled them, but this can be surprising.
// We're going to try aligning closer to the browser behavior by not bubbling
// them in React either. We'll start by not bubbling onScroll, and then expand.
var accumulateTargetOnly=!inCapturePhase&&// TODO: ideally, we'd eventually add all events from
// nonDelegatedEvents list in DOMPluginEventSystem.
// Then we can remove this special list.
// This is a breaking change that can wait until React 18.
domEventName==='scroll';var _listeners=accumulateSinglePhaseListeners(targetInst,reactName,nativeEvent.type,inCapturePhase,accumulateTargetOnly);if(_listeners.length>0){// Intentionally create event lazily.
var _event=new SyntheticEventCtor(reactName,reactEventType,null,nativeEvent,nativeEventTarget);dispatchQueue.push({event:_event,listeners:_listeners});}}}// TODO: remove top-level side effect.
registerSimpleEvents();registerEvents$2();registerEvents$1();registerEvents$3();registerEvents();function extractEvents$5(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags,targetContainer){// TODO: we should remove the concept of a "SimpleEventPlugin".
// This is the basic functionality of the event system. All
// the other plugins are essentially polyfills. So the plugin
// should probably be inlined somewhere and have its logic
// be core the to event system. This would potentially allow
// us to ship builds of React without the polyfilled plugins below.
extractEvents$4(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags);var shouldProcessPolyfillPlugins=(eventSystemFlags&SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS)===0;// We don't process these events unless we are in the
// event's native "bubble" phase, which means that we're
// not in the capture phase. That's because we emulate
// the capture phase here still. This is a trade-off,
// because in an ideal world we would not emulate and use
// the phases properly, like we do with the SimpleEvent
// plugin. However, the plugins below either expect
// emulation (EnterLeave) or use state localized to that
// plugin (BeforeInput, Change, Select). The state in
// these modules complicates things, as you'll essentially
// get the case where the capture phase event might change
// state, only for the following bubble event to come in
// later and not trigger anything as the state now
// invalidates the heuristics of the event plugin. We
// could alter all these plugins to work in such ways, but
// that might cause other unknown side-effects that we
// can't foresee right now.
if(shouldProcessPolyfillPlugins){extractEvents$2(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget);extractEvents$1(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget);extractEvents$3(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget);extractEvents(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget);}}// List of events that need to be individually attached to media elements.
var mediaEventTypes=['abort','canplay','canplaythrough','durationchange','emptied','encrypted','ended','error','loadeddata','loadedmetadata','loadstart','pause','play','playing','progress','ratechange','resize','seeked','seeking','stalled','suspend','timeupdate','volumechange','waiting'];// We should not delegate these events to the container, but rather
// set them on the actual target element itself. This is primarily
// because these events do not consistently bubble in the DOM.
var nonDelegatedEvents=new Set(['cancel','close','invalid','load','scroll','toggle'].concat(mediaEventTypes));function executeDispatch(event,listener,currentTarget){var type=event.type||'unknown-event';event.currentTarget=currentTarget;invokeGuardedCallbackAndCatchFirstError(type,listener,undefined,event);event.currentTarget=null;}function processDispatchQueueItemsInOrder(event,dispatchListeners,inCapturePhase){var previousInstance;if(inCapturePhase){for(var i=dispatchListeners.length-1;i>=0;i--){var _dispatchListeners$i=dispatchListeners[i],instance=_dispatchListeners$i.instance,currentTarget=_dispatchListeners$i.currentTarget,listener=_dispatchListeners$i.listener;if(instance!==previousInstance&&event.isPropagationStopped()){return;}executeDispatch(event,listener,currentTarget);previousInstance=instance;}}else{for(var _i=0;_i<dispatchListeners.length;_i++){var _dispatchListeners$_i=dispatchListeners[_i],_instance=_dispatchListeners$_i.instance,_currentTarget=_dispatchListeners$_i.currentTarget,_listener=_dispatchListeners$_i.listener;if(_instance!==previousInstance&&event.isPropagationStopped()){return;}executeDispatch(event,_listener,_currentTarget);previousInstance=_instance;}}}function processDispatchQueue(dispatchQueue,eventSystemFlags){var inCapturePhase=(eventSystemFlags&IS_CAPTURE_PHASE)!==0;for(var i=0;i<dispatchQueue.length;i++){var _dispatchQueue$i=dispatchQueue[i],event=_dispatchQueue$i.event,listeners=_dispatchQueue$i.listeners;processDispatchQueueItemsInOrder(event,listeners,inCapturePhase);//  event system doesn't use pooling.
}// This would be a good time to rethrow if any of the event handlers threw.
rethrowCaughtError();}function dispatchEventsForPlugins(domEventName,eventSystemFlags,nativeEvent,targetInst,targetContainer){var nativeEventTarget=getEventTarget(nativeEvent);var dispatchQueue=[];extractEvents$5(dispatchQueue,domEventName,targetInst,nativeEvent,nativeEventTarget,eventSystemFlags);processDispatchQueue(dispatchQueue,eventSystemFlags);}function listenToNonDelegatedEvent(domEventName,targetElement){{if(!nonDelegatedEvents.has(domEventName)){error('Did not expect a listenToNonDelegatedEvent() call for "%s". '+'This is a bug in React. Please file an issue.',domEventName);}}var isCapturePhaseListener=false;var listenerSet=getEventListenerSet(targetElement);var listenerSetKey=getListenerSetKey(domEventName,isCapturePhaseListener);if(!listenerSet.has(listenerSetKey)){addTrappedEventListener(targetElement,domEventName,IS_NON_DELEGATED,isCapturePhaseListener);listenerSet.add(listenerSetKey);}}function listenToNativeEvent(domEventName,isCapturePhaseListener,target){{if(nonDelegatedEvents.has(domEventName)&&!isCapturePhaseListener){error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. '+'This is a bug in React. Please file an issue.',domEventName);}}var eventSystemFlags=0;if(isCapturePhaseListener){eventSystemFlags|=IS_CAPTURE_PHASE;}addTrappedEventListener(target,domEventName,eventSystemFlags,isCapturePhaseListener);}// This is only used by createEventHandle when the
var listeningMarker='_reactListening'+Math.random().toString(36).slice(2);function listenToAllSupportedEvents(rootContainerElement){if(!rootContainerElement[listeningMarker]){rootContainerElement[listeningMarker]=true;allNativeEvents.forEach(function(domEventName){// We handle selectionchange separately because it
// doesn't bubble and needs to be on the document.
if(domEventName!=='selectionchange'){if(!nonDelegatedEvents.has(domEventName)){listenToNativeEvent(domEventName,false,rootContainerElement);}listenToNativeEvent(domEventName,true,rootContainerElement);}});var ownerDocument=rootContainerElement.nodeType===DOCUMENT_NODE?rootContainerElement:rootContainerElement.ownerDocument;if(ownerDocument!==null){// The selectionchange event also needs deduplication
// but it is attached to the document.
if(!ownerDocument[listeningMarker]){ownerDocument[listeningMarker]=true;listenToNativeEvent('selectionchange',false,ownerDocument);}}}}function addTrappedEventListener(targetContainer,domEventName,eventSystemFlags,isCapturePhaseListener,isDeferredListenerForLegacyFBSupport){var listener=createEventListenerWrapperWithPriority(targetContainer,domEventName,eventSystemFlags);// If passive option is not supported, then the event will be
// active and not passive.
var isPassiveListener=undefined;if(passiveBrowserEventsSupported){// Browsers introduced an intervention, making these events
// passive by default on document. React doesn't bind them
// to document anymore, but changing this now would undo
// the performance wins from the change. So we emulate
// the existing behavior manually on the roots now.
// https://github.com/facebook/react/issues/19651
if(domEventName==='touchstart'||domEventName==='touchmove'||domEventName==='wheel'){isPassiveListener=true;}}targetContainer=targetContainer;var unsubscribeListener;// When legacyFBSupport is enabled, it's for when we
if(isCapturePhaseListener){if(isPassiveListener!==undefined){unsubscribeListener=addEventCaptureListenerWithPassiveFlag(targetContainer,domEventName,listener,isPassiveListener);}else{unsubscribeListener=addEventCaptureListener(targetContainer,domEventName,listener);}}else{if(isPassiveListener!==undefined){unsubscribeListener=addEventBubbleListenerWithPassiveFlag(targetContainer,domEventName,listener,isPassiveListener);}else{unsubscribeListener=addEventBubbleListener(targetContainer,domEventName,listener);}}}function isMatchingRootContainer(grandContainer,targetContainer){return grandContainer===targetContainer||grandContainer.nodeType===COMMENT_NODE&&grandContainer.parentNode===targetContainer;}function dispatchEventForPluginEventSystem(domEventName,eventSystemFlags,nativeEvent,targetInst,targetContainer){var ancestorInst=targetInst;if((eventSystemFlags&IS_EVENT_HANDLE_NON_MANAGED_NODE)===0&&(eventSystemFlags&IS_NON_DELEGATED)===0){var targetContainerNode=targetContainer;// If we are using the legacy FB support flag, we
if(targetInst!==null){// The below logic attempts to work out if we need to change
// the target fiber to a different ancestor. We had similar logic
// in the legacy event system, except the big difference between
// systems is that the modern event system now has an event listener
// attached to each React Root and React Portal Root. Together,
// the DOM nodes representing these roots are the "rootContainer".
// To figure out which ancestor instance we should use, we traverse
// up the fiber tree from the target instance and attempt to find
// root boundaries that match that of our current "rootContainer".
// If we find that "rootContainer", we find the parent fiber
// sub-tree for that root and make that our ancestor instance.
var node=targetInst;mainLoop:while(true){if(node===null){return;}var nodeTag=node.tag;if(nodeTag===HostRoot||nodeTag===HostPortal){var container=node.stateNode.containerInfo;if(isMatchingRootContainer(container,targetContainerNode)){break;}if(nodeTag===HostPortal){// The target is a portal, but it's not the rootContainer we're looking for.
// Normally portals handle their own events all the way down to the root.
// So we should be able to stop now. However, we don't know if this portal
// was part of *our* root.
var grandNode=node["return"];while(grandNode!==null){var grandTag=grandNode.tag;if(grandTag===HostRoot||grandTag===HostPortal){var grandContainer=grandNode.stateNode.containerInfo;if(isMatchingRootContainer(grandContainer,targetContainerNode)){// This is the rootContainer we're looking for and we found it as
// a parent of the Portal. That means we can ignore it because the
// Portal will bubble through to us.
return;}}grandNode=grandNode["return"];}}// Now we need to find it's corresponding host fiber in the other
// tree. To do this we can use getClosestInstanceFromNode, but we
// need to validate that the fiber is a host instance, otherwise
// we need to traverse up through the DOM till we find the correct
// node that is from the other tree.
while(container!==null){var parentNode=getClosestInstanceFromNode(container);if(parentNode===null){return;}var parentTag=parentNode.tag;if(parentTag===HostComponent||parentTag===HostText){node=ancestorInst=parentNode;continue mainLoop;}container=container.parentNode;}}node=node["return"];}}}batchedUpdates(function(){return dispatchEventsForPlugins(domEventName,eventSystemFlags,nativeEvent,ancestorInst);});}function createDispatchListener(instance,listener,currentTarget){return{instance:instance,listener:listener,currentTarget:currentTarget};}function accumulateSinglePhaseListeners(targetFiber,reactName,nativeEventType,inCapturePhase,accumulateTargetOnly,nativeEvent){var captureName=reactName!==null?reactName+'Capture':null;var reactEventName=inCapturePhase?captureName:reactName;var listeners=[];var instance=targetFiber;var lastHostComponent=null;// Accumulate all instances and listeners via the target -> root path.
while(instance!==null){var _instance2=instance,stateNode=_instance2.stateNode,tag=_instance2.tag;// Handle listeners that are on HostComponents (i.e. <div>)
if(tag===HostComponent&&stateNode!==null){lastHostComponent=stateNode;// createEventHandle listeners
if(reactEventName!==null){var listener=getListener(instance,reactEventName);if(listener!=null){listeners.push(createDispatchListener(instance,listener,lastHostComponent));}}}// If we are only accumulating events for the target, then we don't
// continue to propagate through the React fiber tree to find other
// listeners.
if(accumulateTargetOnly){break;}// If we are processing the onBeforeBlur event, then we need to take
instance=instance["return"];}return listeners;}// We should only use this function for:
// - BeforeInputEventPlugin
// - ChangeEventPlugin
// - SelectEventPlugin
// This is because we only process these plugins
// in the bubble phase, so we need to accumulate two
// phase event listeners (via emulation).
function accumulateTwoPhaseListeners(targetFiber,reactName){var captureName=reactName+'Capture';var listeners=[];var instance=targetFiber;// Accumulate all instances and listeners via the target -> root path.
while(instance!==null){var _instance3=instance,stateNode=_instance3.stateNode,tag=_instance3.tag;// Handle listeners that are on HostComponents (i.e. <div>)
if(tag===HostComponent&&stateNode!==null){var currentTarget=stateNode;var captureListener=getListener(instance,captureName);if(captureListener!=null){listeners.unshift(createDispatchListener(instance,captureListener,currentTarget));}var bubbleListener=getListener(instance,reactName);if(bubbleListener!=null){listeners.push(createDispatchListener(instance,bubbleListener,currentTarget));}}instance=instance["return"];}return listeners;}function getParent(inst){if(inst===null){return null;}do{inst=inst["return"];// TODO: If this is a HostRoot we might want to bail out.
// That is depending on if we want nested subtrees (layers) to bubble
// events to their parent. We could also go through parentNode on the
// host node but that wouldn't work for React Native and doesn't let us
// do the portal feature.
}while(inst&&inst.tag!==HostComponent);if(inst){return inst;}return null;}/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */function getLowestCommonAncestor(instA,instB){var nodeA=instA;var nodeB=instB;var depthA=0;for(var tempA=nodeA;tempA;tempA=getParent(tempA)){depthA++;}var depthB=0;for(var tempB=nodeB;tempB;tempB=getParent(tempB)){depthB++;}// If A is deeper, crawl up.
while(depthA-depthB>0){nodeA=getParent(nodeA);depthA--;}// If B is deeper, crawl up.
while(depthB-depthA>0){nodeB=getParent(nodeB);depthB--;}// Walk in lockstep until we find a match.
var depth=depthA;while(depth--){if(nodeA===nodeB||nodeB!==null&&nodeA===nodeB.alternate){return nodeA;}nodeA=getParent(nodeA);nodeB=getParent(nodeB);}return null;}function accumulateEnterLeaveListenersForEvent(dispatchQueue,event,target,common,inCapturePhase){var registrationName=event._reactName;var listeners=[];var instance=target;while(instance!==null){if(instance===common){break;}var _instance4=instance,alternate=_instance4.alternate,stateNode=_instance4.stateNode,tag=_instance4.tag;if(alternate!==null&&alternate===common){break;}if(tag===HostComponent&&stateNode!==null){var currentTarget=stateNode;if(inCapturePhase){var captureListener=getListener(instance,registrationName);if(captureListener!=null){listeners.unshift(createDispatchListener(instance,captureListener,currentTarget));}}else if(!inCapturePhase){var bubbleListener=getListener(instance,registrationName);if(bubbleListener!=null){listeners.push(createDispatchListener(instance,bubbleListener,currentTarget));}}}instance=instance["return"];}if(listeners.length!==0){dispatchQueue.push({event:event,listeners:listeners});}}// We should only use this function for:
// - EnterLeaveEventPlugin
// This is because we only process this plugin
// in the bubble phase, so we need to accumulate two
// phase event listeners.
function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue,leaveEvent,enterEvent,from,to){var common=from&&to?getLowestCommonAncestor(from,to):null;if(from!==null){accumulateEnterLeaveListenersForEvent(dispatchQueue,leaveEvent,from,common,false);}if(to!==null&&enterEvent!==null){accumulateEnterLeaveListenersForEvent(dispatchQueue,enterEvent,to,common,true);}}function getListenerSetKey(domEventName,capture){return domEventName+"__"+(capture?'capture':'bubble');}var didWarnInvalidHydration=false;var DANGEROUSLY_SET_INNER_HTML='dangerouslySetInnerHTML';var SUPPRESS_CONTENT_EDITABLE_WARNING='suppressContentEditableWarning';var SUPPRESS_HYDRATION_WARNING='suppressHydrationWarning';var AUTOFOCUS='autoFocus';var CHILDREN='children';var STYLE='style';var HTML$1='__html';var warnedUnknownTags;var validatePropertiesInDevelopment;var warnForPropDifference;var warnForExtraAttributes;var warnForInvalidEventListener;var canDiffStyleForHydrationWarning;var normalizeHTML;{warnedUnknownTags={// There are working polyfills for <dialog>. Let people use it.
dialog:true,// Electron ships a custom <webview> tag to display external web content in
// an isolated frame and process.
// This tag is not present in non Electron environments such as JSDom which
// is often used for testing purposes.
// @see https://electronjs.org/docs/api/webview-tag
webview:true};validatePropertiesInDevelopment=function validatePropertiesInDevelopment(type,props){validateProperties(type,props);validateProperties$1(type,props);validateProperties$2(type,props,{registrationNameDependencies:registrationNameDependencies,possibleRegistrationNames:possibleRegistrationNames});};// IE 11 parses & normalizes the style attribute as opposed to other
// browsers. It adds spaces and sorts the properties in some
// non-alphabetical order. Handling that would require sorting CSS
// properties in the client & server versions or applying
// `expectedStyle` to a temporary DOM node to read its `style` attribute
// normalized. Since it only affects IE, we're skipping style warnings
// in that browser completely in favor of doing all that work.
// See https://github.com/facebook/react/issues/11807
canDiffStyleForHydrationWarning=canUseDOM&&!document.documentMode;warnForPropDifference=function warnForPropDifference(propName,serverValue,clientValue){if(didWarnInvalidHydration){return;}var normalizedClientValue=normalizeMarkupForTextOrAttribute(clientValue);var normalizedServerValue=normalizeMarkupForTextOrAttribute(serverValue);if(normalizedServerValue===normalizedClientValue){return;}didWarnInvalidHydration=true;error('Prop `%s` did not match. Server: %s Client: %s',propName,JSON.stringify(normalizedServerValue),JSON.stringify(normalizedClientValue));};warnForExtraAttributes=function warnForExtraAttributes(attributeNames){if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;var names=[];attributeNames.forEach(function(name){names.push(name);});error('Extra attributes from the server: %s',names);};warnForInvalidEventListener=function warnForInvalidEventListener(registrationName,listener){if(listener===false){error('Expected `%s` listener to be a function, instead got `false`.\n\n'+'If you used to conditionally omit it with %s={condition && value}, '+'pass %s={condition ? value : undefined} instead.',registrationName,registrationName,registrationName);}else{error('Expected `%s` listener to be a function, instead got a value of `%s` type.',registrationName,_typeof(listener));}};// Parse the HTML and read it back to normalize the HTML string so that it
// can be used for comparison.
normalizeHTML=function normalizeHTML(parent,html){// We could have created a separate document here to avoid
// re-initializing custom elements if they exist. But this breaks
// how <noscript> is being handled. So we use the same document.
// See the discussion in https://github.com/facebook/react/pull/11157.
var testElement=parent.namespaceURI===HTML_NAMESPACE?parent.ownerDocument.createElement(parent.tagName):parent.ownerDocument.createElementNS(parent.namespaceURI,parent.tagName);testElement.innerHTML=html;return testElement.innerHTML;};}// HTML parsing normalizes CR and CRLF to LF.
// It also can turn \u0000 into \uFFFD inside attributes.
// https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
// If we have a mismatch, it might be caused by that.
// We will still patch up in this case but not fire the warning.
var NORMALIZE_NEWLINES_REGEX=/\r\n?/g;var NORMALIZE_NULL_AND_REPLACEMENT_REGEX=/\u0000|\uFFFD/g;function normalizeMarkupForTextOrAttribute(markup){{checkHtmlStringCoercion(markup);}var markupString=typeof markup==='string'?markup:''+markup;return markupString.replace(NORMALIZE_NEWLINES_REGEX,'\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX,'');}function checkForUnmatchedText(serverText,clientText,isConcurrentMode,shouldWarnDev){var normalizedClientText=normalizeMarkupForTextOrAttribute(clientText);var normalizedServerText=normalizeMarkupForTextOrAttribute(serverText);if(normalizedServerText===normalizedClientText){return;}if(shouldWarnDev){{if(!didWarnInvalidHydration){didWarnInvalidHydration=true;error('Text content did not match. Server: "%s" Client: "%s"',normalizedServerText,normalizedClientText);}}}if(isConcurrentMode&&enableClientRenderFallbackOnTextMismatch){// In concurrent roots, we throw when there's a text mismatch and revert to
// client rendering, up to the nearest Suspense boundary.
throw new Error('Text content does not match server-rendered HTML.');}}function getOwnerDocumentFromRootContainer(rootContainerElement){return rootContainerElement.nodeType===DOCUMENT_NODE?rootContainerElement:rootContainerElement.ownerDocument;}function noop(){}function trapClickOnNonInteractiveElement(node){// Mobile Safari does not fire properly bubble click events on
// non-interactive elements, which means delegated click listeners do not
// fire. The workaround for this bug involves attaching an empty click
// listener on the target node.
// https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
// Just set it using the onclick property so that we don't have to manage any
// bookkeeping for it. Not sure if we need to clear it when the listener is
// removed.
// TODO: Only do this for the relevant Safaris maybe?
node.onclick=noop;}function setInitialDOMProperties(tag,domElement,rootContainerElement,nextProps,isCustomComponentTag){for(var propKey in nextProps){if(!nextProps.hasOwnProperty(propKey)){continue;}var nextProp=nextProps[propKey];if(propKey===STYLE){{if(nextProp){// Freeze the next style object so that we can assume it won't be
// mutated. We have already warned for this in the past.
Object.freeze(nextProp);}}// Relies on `updateStylesByID` not mutating `styleUpdates`.
setValueForStyles(domElement,nextProp);}else if(propKey===DANGEROUSLY_SET_INNER_HTML){var nextHtml=nextProp?nextProp[HTML$1]:undefined;if(nextHtml!=null){setInnerHTML(domElement,nextHtml);}}else if(propKey===CHILDREN){if(typeof nextProp==='string'){// Avoid setting initial textContent when the text is empty. In IE11 setting
// textContent on a <textarea> will cause the placeholder to not
// show within the <textarea> until it has been focused and blurred again.
// https://github.com/facebook/react/issues/6731#issuecomment-254874553
var canSetTextContent=tag!=='textarea'||nextProp!=='';if(canSetTextContent){setTextContent(domElement,nextProp);}}else if(typeof nextProp==='number'){setTextContent(domElement,''+nextProp);}}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING);else if(propKey===AUTOFOCUS);else if(registrationNameDependencies.hasOwnProperty(propKey)){if(nextProp!=null){if(typeof nextProp!=='function'){warnForInvalidEventListener(propKey,nextProp);}if(propKey==='onScroll'){listenToNonDelegatedEvent('scroll',domElement);}}}else if(nextProp!=null){setValueForProperty(domElement,propKey,nextProp,isCustomComponentTag);}}}function updateDOMProperties(domElement,updatePayload,wasCustomComponentTag,isCustomComponentTag){// TODO: Handle wasCustomComponentTag
for(var i=0;i<updatePayload.length;i+=2){var propKey=updatePayload[i];var propValue=updatePayload[i+1];if(propKey===STYLE){setValueForStyles(domElement,propValue);}else if(propKey===DANGEROUSLY_SET_INNER_HTML){setInnerHTML(domElement,propValue);}else if(propKey===CHILDREN){setTextContent(domElement,propValue);}else{setValueForProperty(domElement,propKey,propValue,isCustomComponentTag);}}}function createElement(type,props,rootContainerElement,parentNamespace){var isCustomComponentTag;// We create tags in the namespace of their parent container, except HTML
// tags get no namespace.
var ownerDocument=getOwnerDocumentFromRootContainer(rootContainerElement);var domElement;var namespaceURI=parentNamespace;if(namespaceURI===HTML_NAMESPACE){namespaceURI=getIntrinsicNamespace(type);}if(namespaceURI===HTML_NAMESPACE){{isCustomComponentTag=isCustomComponent(type,props);// Should this check be gated by parent namespace? Not sure we want to
// allow <SVG> or <mATH>.
if(!isCustomComponentTag&&type!==type.toLowerCase()){error('<%s /> is using incorrect casing. '+'Use PascalCase for React components, '+'or lowercase for HTML elements.',type);}}if(type==='script'){// Create the script via .innerHTML so its "parser-inserted" flag is
// set to true and it does not execute
var div=ownerDocument.createElement('div');div.innerHTML='<script><'+'/script>';// eslint-disable-line
// This is guaranteed to yield a script element.
var firstChild=div.firstChild;domElement=div.removeChild(firstChild);}else if(typeof props.is==='string'){// $FlowIssue `createElement` should be updated for Web Components
domElement=ownerDocument.createElement(type,{is:props.is});}else{// Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
// See discussion in https://github.com/facebook/react/pull/6896
// and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
domElement=ownerDocument.createElement(type);// Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
// attributes on `select`s needs to be added before `option`s are inserted.
// This prevents:
// - a bug where the `select` does not scroll to the correct option because singular
//  `select` elements automatically pick the first item #13222
// - a bug where the `select` set the first item as selected despite the `size` attribute #14239
// See https://github.com/facebook/react/issues/13222
// and https://github.com/facebook/react/issues/14239
if(type==='select'){var node=domElement;if(props.multiple){node.multiple=true;}else if(props.size){// Setting a size greater than 1 causes a select to behave like `multiple=true`, where
// it is possible that no option is selected.
//
// This is only necessary when a select in "single selection mode".
node.size=props.size;}}}}else{domElement=ownerDocument.createElementNS(namespaceURI,type);}{if(namespaceURI===HTML_NAMESPACE){if(!isCustomComponentTag&&Object.prototype.toString.call(domElement)==='[object HTMLUnknownElement]'&&!hasOwnProperty.call(warnedUnknownTags,type)){warnedUnknownTags[type]=true;error('The tag <%s> is unrecognized in this browser. '+'If you meant to render a React component, start its name with '+'an uppercase letter.',type);}}}return domElement;}function createTextNode(text,rootContainerElement){return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);}function setInitialProperties(domElement,tag,rawProps,rootContainerElement){var isCustomComponentTag=isCustomComponent(tag,rawProps);{validatePropertiesInDevelopment(tag,rawProps);}// TODO: Make sure that we check isMounted before firing any of these events.
var props;switch(tag){case'dialog':listenToNonDelegatedEvent('cancel',domElement);listenToNonDelegatedEvent('close',domElement);props=rawProps;break;case'iframe':case'object':case'embed':// We listen to this event in case to ensure emulated bubble
// listeners still fire for the load event.
listenToNonDelegatedEvent('load',domElement);props=rawProps;break;case'video':case'audio':// We listen to these events in case to ensure emulated bubble
// listeners still fire for all the media events.
for(var i=0;i<mediaEventTypes.length;i++){listenToNonDelegatedEvent(mediaEventTypes[i],domElement);}props=rawProps;break;case'source':// We listen to this event in case to ensure emulated bubble
// listeners still fire for the error event.
listenToNonDelegatedEvent('error',domElement);props=rawProps;break;case'img':case'image':case'link':// We listen to these events in case to ensure emulated bubble
// listeners still fire for error and load events.
listenToNonDelegatedEvent('error',domElement);listenToNonDelegatedEvent('load',domElement);props=rawProps;break;case'details':// We listen to this event in case to ensure emulated bubble
// listeners still fire for the toggle event.
listenToNonDelegatedEvent('toggle',domElement);props=rawProps;break;case'input':initWrapperState(domElement,rawProps);props=getHostProps(domElement,rawProps);// We listen to this event in case to ensure emulated bubble
// listeners still fire for the invalid event.
listenToNonDelegatedEvent('invalid',domElement);break;case'option':validateProps(domElement,rawProps);props=rawProps;break;case'select':initWrapperState$1(domElement,rawProps);props=getHostProps$1(domElement,rawProps);// We listen to this event in case to ensure emulated bubble
// listeners still fire for the invalid event.
listenToNonDelegatedEvent('invalid',domElement);break;case'textarea':initWrapperState$2(domElement,rawProps);props=getHostProps$2(domElement,rawProps);// We listen to this event in case to ensure emulated bubble
// listeners still fire for the invalid event.
listenToNonDelegatedEvent('invalid',domElement);break;default:props=rawProps;}assertValidProps(tag,props);setInitialDOMProperties(tag,domElement,rootContainerElement,props,isCustomComponentTag);switch(tag){case'input':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper(domElement,rawProps,false);break;case'textarea':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper$3(domElement);break;case'option':postMountWrapper$1(domElement,rawProps);break;case'select':postMountWrapper$2(domElement,rawProps);break;default:if(typeof props.onClick==='function'){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(domElement);}break;}}// Calculate the diff between the two objects.
function diffProperties(domElement,tag,lastRawProps,nextRawProps,rootContainerElement){{validatePropertiesInDevelopment(tag,nextRawProps);}var updatePayload=null;var lastProps;var nextProps;switch(tag){case'input':lastProps=getHostProps(domElement,lastRawProps);nextProps=getHostProps(domElement,nextRawProps);updatePayload=[];break;case'select':lastProps=getHostProps$1(domElement,lastRawProps);nextProps=getHostProps$1(domElement,nextRawProps);updatePayload=[];break;case'textarea':lastProps=getHostProps$2(domElement,lastRawProps);nextProps=getHostProps$2(domElement,nextRawProps);updatePayload=[];break;default:lastProps=lastRawProps;nextProps=nextRawProps;if(typeof lastProps.onClick!=='function'&&typeof nextProps.onClick==='function'){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(domElement);}break;}assertValidProps(tag,nextProps);var propKey;var styleName;var styleUpdates=null;for(propKey in lastProps){if(nextProps.hasOwnProperty(propKey)||!lastProps.hasOwnProperty(propKey)||lastProps[propKey]==null){continue;}if(propKey===STYLE){var lastStyle=lastProps[propKey];for(styleName in lastStyle){if(lastStyle.hasOwnProperty(styleName)){if(!styleUpdates){styleUpdates={};}styleUpdates[styleName]='';}}}else if(propKey===DANGEROUSLY_SET_INNER_HTML||propKey===CHILDREN);else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING);else if(propKey===AUTOFOCUS);else if(registrationNameDependencies.hasOwnProperty(propKey)){// This is a special case. If any listener updates we need to ensure
// that the "current" fiber pointer gets updated so we need a commit
// to update this element.
if(!updatePayload){updatePayload=[];}}else{// For all other deleted properties we add it to the queue. We use
// the allowed property list in the commit phase instead.
(updatePayload=updatePayload||[]).push(propKey,null);}}for(propKey in nextProps){var nextProp=nextProps[propKey];var lastProp=lastProps!=null?lastProps[propKey]:undefined;if(!nextProps.hasOwnProperty(propKey)||nextProp===lastProp||nextProp==null&&lastProp==null){continue;}if(propKey===STYLE){{if(nextProp){// Freeze the next style object so that we can assume it won't be
// mutated. We have already warned for this in the past.
Object.freeze(nextProp);}}if(lastProp){// Unset styles on `lastProp` but not on `nextProp`.
for(styleName in lastProp){if(lastProp.hasOwnProperty(styleName)&&(!nextProp||!nextProp.hasOwnProperty(styleName))){if(!styleUpdates){styleUpdates={};}styleUpdates[styleName]='';}}// Update styles that changed since `lastProp`.
for(styleName in nextProp){if(nextProp.hasOwnProperty(styleName)&&lastProp[styleName]!==nextProp[styleName]){if(!styleUpdates){styleUpdates={};}styleUpdates[styleName]=nextProp[styleName];}}}else{// Relies on `updateStylesByID` not mutating `styleUpdates`.
if(!styleUpdates){if(!updatePayload){updatePayload=[];}updatePayload.push(propKey,styleUpdates);}styleUpdates=nextProp;}}else if(propKey===DANGEROUSLY_SET_INNER_HTML){var nextHtml=nextProp?nextProp[HTML$1]:undefined;var lastHtml=lastProp?lastProp[HTML$1]:undefined;if(nextHtml!=null){if(lastHtml!==nextHtml){(updatePayload=updatePayload||[]).push(propKey,nextHtml);}}}else if(propKey===CHILDREN){if(typeof nextProp==='string'||typeof nextProp==='number'){(updatePayload=updatePayload||[]).push(propKey,''+nextProp);}}else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING);else if(registrationNameDependencies.hasOwnProperty(propKey)){if(nextProp!=null){// We eagerly listen to this even though we haven't committed yet.
if(typeof nextProp!=='function'){warnForInvalidEventListener(propKey,nextProp);}if(propKey==='onScroll'){listenToNonDelegatedEvent('scroll',domElement);}}if(!updatePayload&&lastProp!==nextProp){// This is a special case. If any listener updates we need to ensure
// that the "current" props pointer gets updated so we need a commit
// to update this element.
updatePayload=[];}}else{// For any other property we always add it to the queue and then we
// filter it out using the allowed property list during the commit.
(updatePayload=updatePayload||[]).push(propKey,nextProp);}}if(styleUpdates){{validateShorthandPropertyCollisionInDev(styleUpdates,nextProps[STYLE]);}(updatePayload=updatePayload||[]).push(STYLE,styleUpdates);}return updatePayload;}// Apply the diff.
function updateProperties(domElement,updatePayload,tag,lastRawProps,nextRawProps){// Update checked *before* name.
// In the middle of an update, it is possible to have multiple checked.
// When a checked radio tries to change name, browser makes another radio's checked false.
if(tag==='input'&&nextRawProps.type==='radio'&&nextRawProps.name!=null){updateChecked(domElement,nextRawProps);}var wasCustomComponentTag=isCustomComponent(tag,lastRawProps);var isCustomComponentTag=isCustomComponent(tag,nextRawProps);// Apply the diff.
updateDOMProperties(domElement,updatePayload,wasCustomComponentTag,isCustomComponentTag);// TODO: Ensure that an update gets scheduled if any of the special props
// changed.
switch(tag){case'input':// Update the wrapper around inputs *after* updating props. This has to
// happen after `updateDOMProperties`. Otherwise HTML5 input validations
// raise warnings and prevent the new value from being assigned.
updateWrapper(domElement,nextRawProps);break;case'textarea':updateWrapper$1(domElement,nextRawProps);break;case'select':// <select> value update needs to occur after <option> children
// reconciliation
postUpdateWrapper(domElement,nextRawProps);break;}}function getPossibleStandardName(propName){{var lowerCasedName=propName.toLowerCase();if(!possibleStandardNames.hasOwnProperty(lowerCasedName)){return null;}return possibleStandardNames[lowerCasedName]||null;}}function diffHydratedProperties(domElement,tag,rawProps,parentNamespace,rootContainerElement,isConcurrentMode,shouldWarnDev){var isCustomComponentTag;var extraAttributeNames;{isCustomComponentTag=isCustomComponent(tag,rawProps);validatePropertiesInDevelopment(tag,rawProps);}// TODO: Make sure that we check isMounted before firing any of these events.
switch(tag){case'dialog':listenToNonDelegatedEvent('cancel',domElement);listenToNonDelegatedEvent('close',domElement);break;case'iframe':case'object':case'embed':// We listen to this event in case to ensure emulated bubble
// listeners still fire for the load event.
listenToNonDelegatedEvent('load',domElement);break;case'video':case'audio':// We listen to these events in case to ensure emulated bubble
// listeners still fire for all the media events.
for(var i=0;i<mediaEventTypes.length;i++){listenToNonDelegatedEvent(mediaEventTypes[i],domElement);}break;case'source':// We listen to this event in case to ensure emulated bubble
// listeners still fire for the error event.
listenToNonDelegatedEvent('error',domElement);break;case'img':case'image':case'link':// We listen to these events in case to ensure emulated bubble
// listeners still fire for error and load events.
listenToNonDelegatedEvent('error',domElement);listenToNonDelegatedEvent('load',domElement);break;case'details':// We listen to this event in case to ensure emulated bubble
// listeners still fire for the toggle event.
listenToNonDelegatedEvent('toggle',domElement);break;case'input':initWrapperState(domElement,rawProps);// We listen to this event in case to ensure emulated bubble
// listeners still fire for the invalid event.
listenToNonDelegatedEvent('invalid',domElement);break;case'option':validateProps(domElement,rawProps);break;case'select':initWrapperState$1(domElement,rawProps);// We listen to this event in case to ensure emulated bubble
// listeners still fire for the invalid event.
listenToNonDelegatedEvent('invalid',domElement);break;case'textarea':initWrapperState$2(domElement,rawProps);// We listen to this event in case to ensure emulated bubble
// listeners still fire for the invalid event.
listenToNonDelegatedEvent('invalid',domElement);break;}assertValidProps(tag,rawProps);{extraAttributeNames=new Set();var attributes=domElement.attributes;for(var _i=0;_i<attributes.length;_i++){var name=attributes[_i].name.toLowerCase();switch(name){// Controlled attributes are not validated
// TODO: Only ignore them on controlled tags.
case'value':break;case'checked':break;case'selected':break;default:// Intentionally use the original name.
// See discussion in https://github.com/facebook/react/pull/10676.
extraAttributeNames.add(attributes[_i].name);}}}var updatePayload=null;for(var propKey in rawProps){if(!rawProps.hasOwnProperty(propKey)){continue;}var nextProp=rawProps[propKey];if(propKey===CHILDREN){// For text content children we compare against textContent. This
// might match additional HTML that is hidden when we read it using
// textContent. E.g. "foo" will match "f<span>oo</span>" but that still
// satisfies our requirement. Our requirement is not to produce perfect
// HTML and attributes. Ideally we should preserve structure but it's
// ok not to if the visible content is still enough to indicate what
// even listeners these nodes might be wired up to.
// TODO: Warn if there is more than a single textNode as a child.
// TODO: Should we use domElement.firstChild.nodeValue to compare?
if(typeof nextProp==='string'){if(domElement.textContent!==nextProp){if(rawProps[SUPPRESS_HYDRATION_WARNING]!==true){checkForUnmatchedText(domElement.textContent,nextProp,isConcurrentMode,shouldWarnDev);}updatePayload=[CHILDREN,nextProp];}}else if(typeof nextProp==='number'){if(domElement.textContent!==''+nextProp){if(rawProps[SUPPRESS_HYDRATION_WARNING]!==true){checkForUnmatchedText(domElement.textContent,nextProp,isConcurrentMode,shouldWarnDev);}updatePayload=[CHILDREN,''+nextProp];}}}else if(registrationNameDependencies.hasOwnProperty(propKey)){if(nextProp!=null){if(typeof nextProp!=='function'){warnForInvalidEventListener(propKey,nextProp);}if(propKey==='onScroll'){listenToNonDelegatedEvent('scroll',domElement);}}}else if(shouldWarnDev&&true&&// Convince Flow we've calculated it (it's DEV-only in this method.)
typeof isCustomComponentTag==='boolean'){// Validate that the properties correspond to their expected values.
var serverValue=void 0;var propertyInfo=isCustomComponentTag&&enableCustomElementPropertySupport?null:getPropertyInfo(propKey);if(rawProps[SUPPRESS_HYDRATION_WARNING]===true);else if(propKey===SUPPRESS_CONTENT_EDITABLE_WARNING||propKey===SUPPRESS_HYDRATION_WARNING||// Controlled attributes are not validated
// TODO: Only ignore them on controlled tags.
propKey==='value'||propKey==='checked'||propKey==='selected');else if(propKey===DANGEROUSLY_SET_INNER_HTML){var serverHTML=domElement.innerHTML;var nextHtml=nextProp?nextProp[HTML$1]:undefined;if(nextHtml!=null){var expectedHTML=normalizeHTML(domElement,nextHtml);if(expectedHTML!==serverHTML){warnForPropDifference(propKey,serverHTML,expectedHTML);}}}else if(propKey===STYLE){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames["delete"](propKey);if(canDiffStyleForHydrationWarning){var expectedStyle=createDangerousStringForStyles(nextProp);serverValue=domElement.getAttribute('style');if(expectedStyle!==serverValue){warnForPropDifference(propKey,serverValue,expectedStyle);}}}else if(isCustomComponentTag&&!enableCustomElementPropertySupport){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames["delete"](propKey.toLowerCase());serverValue=getValueForAttribute(domElement,propKey,nextProp);if(nextProp!==serverValue){warnForPropDifference(propKey,serverValue,nextProp);}}else if(!shouldIgnoreAttribute(propKey,propertyInfo,isCustomComponentTag)&&!shouldRemoveAttribute(propKey,nextProp,propertyInfo,isCustomComponentTag)){var isMismatchDueToBadCasing=false;if(propertyInfo!==null){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames["delete"](propertyInfo.attributeName);serverValue=getValueForProperty(domElement,propKey,nextProp,propertyInfo);}else{var ownNamespace=parentNamespace;if(ownNamespace===HTML_NAMESPACE){ownNamespace=getIntrinsicNamespace(tag);}if(ownNamespace===HTML_NAMESPACE){// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames["delete"](propKey.toLowerCase());}else{var standardName=getPossibleStandardName(propKey);if(standardName!==null&&standardName!==propKey){// If an SVG prop is supplied with bad casing, it will
// be successfully parsed from HTML, but will produce a mismatch
// (and would be incorrectly rendered on the client).
// However, we already warn about bad casing elsewhere.
// So we'll skip the misleading extra mismatch warning in this case.
isMismatchDueToBadCasing=true;// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames["delete"](standardName);}// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames["delete"](propKey);}serverValue=getValueForAttribute(domElement,propKey,nextProp);}var dontWarnCustomElement=enableCustomElementPropertySupport;if(!dontWarnCustomElement&&nextProp!==serverValue&&!isMismatchDueToBadCasing){warnForPropDifference(propKey,serverValue,nextProp);}}}}{if(shouldWarnDev){if(// $FlowFixMe - Should be inferred as not undefined.
extraAttributeNames.size>0&&rawProps[SUPPRESS_HYDRATION_WARNING]!==true){// $FlowFixMe - Should be inferred as not undefined.
warnForExtraAttributes(extraAttributeNames);}}}switch(tag){case'input':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper(domElement,rawProps,true);break;case'textarea':// TODO: Make sure we check if this is still unmounted or do any clean
// up necessary since we never stop tracking anymore.
track(domElement);postMountWrapper$3(domElement);break;case'select':case'option':// For input and textarea we current always set the value property at
// post mount to force it to diverge from attributes. However, for
// option and select we don't quite do the same thing and select
// is not resilient to the DOM state changing so we don't do that here.
// TODO: Consider not doing this for input and textarea.
break;default:if(typeof rawProps.onClick==='function'){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(domElement);}break;}return updatePayload;}function diffHydratedText(textNode,text,isConcurrentMode){var isDifferent=textNode.nodeValue!==text;return isDifferent;}function warnForDeletedHydratableElement(parentNode,child){{if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;error('Did not expect server HTML to contain a <%s> in <%s>.',child.nodeName.toLowerCase(),parentNode.nodeName.toLowerCase());}}function warnForDeletedHydratableText(parentNode,child){{if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;error('Did not expect server HTML to contain the text node "%s" in <%s>.',child.nodeValue,parentNode.nodeName.toLowerCase());}}function warnForInsertedHydratedElement(parentNode,tag,props){{if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;error('Expected server HTML to contain a matching <%s> in <%s>.',tag,parentNode.nodeName.toLowerCase());}}function warnForInsertedHydratedText(parentNode,text){{if(text===''){// We expect to insert empty text nodes since they're not represented in
// the HTML.
// TODO: Remove this special case if we can just avoid inserting empty
// text nodes.
return;}if(didWarnInvalidHydration){return;}didWarnInvalidHydration=true;error('Expected server HTML to contain a matching text node for "%s" in <%s>.',text,parentNode.nodeName.toLowerCase());}}function restoreControlledState$3(domElement,tag,props){switch(tag){case'input':restoreControlledState(domElement,props);return;case'textarea':restoreControlledState$2(domElement,props);return;case'select':restoreControlledState$1(domElement,props);return;}}var validateDOMNesting=function validateDOMNesting(){};var updatedAncestorInfo=function updatedAncestorInfo(){};{// This validation code was written based on the HTML5 parsing spec:
// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
//
// Note: this does not catch all invalid nesting, nor does it try to (as it's
// not clear what practical benefit doing so provides); instead, we warn only
// for cases where the parser will give a parse tree differing from what React
// intended. For example, <b><div></div></b> is invalid but we don't warn
// because it still parses correctly; we do warn for other cases like nested
// <p> tags where the beginning of the second element implicitly closes the
// first, causing a confusing mess.
// https://html.spec.whatwg.org/multipage/syntax.html#special
var specialTags=['address','applet','area','article','aside','base','basefont','bgsound','blockquote','body','br','button','caption','center','col','colgroup','dd','details','dir','div','dl','dt','embed','fieldset','figcaption','figure','footer','form','frame','frameset','h1','h2','h3','h4','h5','h6','head','header','hgroup','hr','html','iframe','img','input','isindex','li','link','listing','main','marquee','menu','menuitem','meta','nav','noembed','noframes','noscript','object','ol','p','param','plaintext','pre','script','section','select','source','style','summary','table','tbody','td','template','textarea','tfoot','th','thead','title','tr','track','ul','wbr','xmp'];// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
var inScopeTags=['applet','caption','html','table','td','th','marquee','object','template',// https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
// TODO: Distinguish by namespace here -- for <title>, including it here
// errs on the side of fewer warnings
'foreignObject','desc','title'];// https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope
var buttonScopeTags=inScopeTags.concat(['button']);// https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags
var impliedEndTags=['dd','dt','li','option','optgroup','p','rp','rt'];var emptyAncestorInfo={current:null,formTag:null,aTagInScope:null,buttonTagInScope:null,nobrTagInScope:null,pTagInButtonScope:null,listItemTagAutoclosing:null,dlItemTagAutoclosing:null};updatedAncestorInfo=function updatedAncestorInfo(oldInfo,tag){var ancestorInfo=assign({},oldInfo||emptyAncestorInfo);var info={tag:tag};if(inScopeTags.indexOf(tag)!==-1){ancestorInfo.aTagInScope=null;ancestorInfo.buttonTagInScope=null;ancestorInfo.nobrTagInScope=null;}if(buttonScopeTags.indexOf(tag)!==-1){ancestorInfo.pTagInButtonScope=null;}// See rules for 'li', 'dd', 'dt' start tags in
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
if(specialTags.indexOf(tag)!==-1&&tag!=='address'&&tag!=='div'&&tag!=='p'){ancestorInfo.listItemTagAutoclosing=null;ancestorInfo.dlItemTagAutoclosing=null;}ancestorInfo.current=info;if(tag==='form'){ancestorInfo.formTag=info;}if(tag==='a'){ancestorInfo.aTagInScope=info;}if(tag==='button'){ancestorInfo.buttonTagInScope=info;}if(tag==='nobr'){ancestorInfo.nobrTagInScope=info;}if(tag==='p'){ancestorInfo.pTagInButtonScope=info;}if(tag==='li'){ancestorInfo.listItemTagAutoclosing=info;}if(tag==='dd'||tag==='dt'){ancestorInfo.dlItemTagAutoclosing=info;}return ancestorInfo;};/**
   * Returns whether
   */var isTagValidWithParent=function isTagValidWithParent(tag,parentTag){// First, let's check if we're in an unusual parsing mode...
switch(parentTag){// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
case'select':return tag==='option'||tag==='optgroup'||tag==='#text';case'optgroup':return tag==='option'||tag==='#text';// Strictly speaking, seeing an <option> doesn't mean we're in a <select>
// but
case'option':return tag==='#text';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
// No special behavior since these rules fall back to "in body" mode for
// all except special table nodes which cause bad parsing behavior anyway.
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
case'tr':return tag==='th'||tag==='td'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
case'tbody':case'thead':case'tfoot':return tag==='tr'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
case'colgroup':return tag==='col'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
case'table':return tag==='caption'||tag==='colgroup'||tag==='tbody'||tag==='tfoot'||tag==='thead'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
case'head':return tag==='base'||tag==='basefont'||tag==='bgsound'||tag==='link'||tag==='meta'||tag==='title'||tag==='noscript'||tag==='noframes'||tag==='style'||tag==='script'||tag==='template';// https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
case'html':return tag==='head'||tag==='body'||tag==='frameset';case'frameset':return tag==='frame';case'#document':return tag==='html';}// Probably in the "in body" parsing mode, so we outlaw only tag combos
// where the parsing rules cause implicit opens or closes to be added.
// https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody
switch(tag){case'h1':case'h2':case'h3':case'h4':case'h5':case'h6':return parentTag!=='h1'&&parentTag!=='h2'&&parentTag!=='h3'&&parentTag!=='h4'&&parentTag!=='h5'&&parentTag!=='h6';case'rp':case'rt':return impliedEndTags.indexOf(parentTag)===-1;case'body':case'caption':case'col':case'colgroup':case'frameset':case'frame':case'head':case'html':case'tbody':case'td':case'tfoot':case'th':case'thead':case'tr':// These tags are only valid with a few parents that have special child
// parsing rules -- if we're down here, then none of those matched and
// so we allow it only if we don't know what the parent is, as all other
// cases are invalid.
return parentTag==null;}return true;};/**
   * Returns whether
   */var findInvalidAncestorForTag=function findInvalidAncestorForTag(tag,ancestorInfo){switch(tag){case'address':case'article':case'aside':case'blockquote':case'center':case'details':case'dialog':case'dir':case'div':case'dl':case'fieldset':case'figcaption':case'figure':case'footer':case'header':case'hgroup':case'main':case'menu':case'nav':case'ol':case'p':case'section':case'summary':case'ul':case'pre':case'listing':case'table':case'hr':case'xmp':case'h1':case'h2':case'h3':case'h4':case'h5':case'h6':return ancestorInfo.pTagInButtonScope;case'form':return ancestorInfo.formTag||ancestorInfo.pTagInButtonScope;case'li':return ancestorInfo.listItemTagAutoclosing;case'dd':case'dt':return ancestorInfo.dlItemTagAutoclosing;case'button':return ancestorInfo.buttonTagInScope;case'a':// Spec says something about storing a list of markers, but it sounds
// equivalent to this check.
return ancestorInfo.aTagInScope;case'nobr':return ancestorInfo.nobrTagInScope;}return null;};var didWarn$1={};validateDOMNesting=function validateDOMNesting(childTag,childText,ancestorInfo){ancestorInfo=ancestorInfo||emptyAncestorInfo;var parentInfo=ancestorInfo.current;var parentTag=parentInfo&&parentInfo.tag;if(childText!=null){if(childTag!=null){error('validateDOMNesting: when childText is passed, childTag should be null');}childTag='#text';}var invalidParent=isTagValidWithParent(childTag,parentTag)?null:parentInfo;var invalidAncestor=invalidParent?null:findInvalidAncestorForTag(childTag,ancestorInfo);var invalidParentOrAncestor=invalidParent||invalidAncestor;if(!invalidParentOrAncestor){return;}var ancestorTag=invalidParentOrAncestor.tag;var warnKey=!!invalidParent+'|'+childTag+'|'+ancestorTag;if(didWarn$1[warnKey]){return;}didWarn$1[warnKey]=true;var tagDisplayName=childTag;var whitespaceInfo='';if(childTag==='#text'){if(/\S/.test(childText)){tagDisplayName='Text nodes';}else{tagDisplayName='Whitespace text nodes';whitespaceInfo=" Make sure you don't have any extra whitespace between tags on "+'each line of your source code.';}}else{tagDisplayName='<'+childTag+'>';}if(invalidParent){var info='';if(ancestorTag==='table'&&childTag==='tr'){info+=' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by '+'the browser.';}error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s',tagDisplayName,ancestorTag,whitespaceInfo,info);}else{error('validateDOMNesting(...): %s cannot appear as a descendant of '+'<%s>.',tagDisplayName,ancestorTag);}};}var SUPPRESS_HYDRATION_WARNING$1='suppressHydrationWarning';var SUSPENSE_START_DATA='$';var SUSPENSE_END_DATA='/$';var SUSPENSE_PENDING_START_DATA='$?';var SUSPENSE_FALLBACK_START_DATA='$!';var STYLE$1='style';var eventsEnabled=null;var selectionInformation=null;function getRootHostContext(rootContainerInstance){var type;var namespace;var nodeType=rootContainerInstance.nodeType;switch(nodeType){case DOCUMENT_NODE:case DOCUMENT_FRAGMENT_NODE:{type=nodeType===DOCUMENT_NODE?'#document':'#fragment';var root=rootContainerInstance.documentElement;namespace=root?root.namespaceURI:getChildNamespace(null,'');break;}default:{var container=nodeType===COMMENT_NODE?rootContainerInstance.parentNode:rootContainerInstance;var ownNamespace=container.namespaceURI||null;type=container.tagName;namespace=getChildNamespace(ownNamespace,type);break;}}{var validatedTag=type.toLowerCase();var ancestorInfo=updatedAncestorInfo(null,validatedTag);return{namespace:namespace,ancestorInfo:ancestorInfo};}}function getChildHostContext(parentHostContext,type,rootContainerInstance){{var parentHostContextDev=parentHostContext;var namespace=getChildNamespace(parentHostContextDev.namespace,type);var ancestorInfo=updatedAncestorInfo(parentHostContextDev.ancestorInfo,type);return{namespace:namespace,ancestorInfo:ancestorInfo};}}function getPublicInstance(instance){return instance;}function prepareForCommit(containerInfo){eventsEnabled=isEnabled();selectionInformation=getSelectionInformation();var activeInstance=null;setEnabled(false);return activeInstance;}function resetAfterCommit(containerInfo){restoreSelection(selectionInformation);setEnabled(eventsEnabled);eventsEnabled=null;selectionInformation=null;}function createInstance(type,props,rootContainerInstance,hostContext,internalInstanceHandle){var parentNamespace;{// TODO: take namespace into account when validating.
var hostContextDev=hostContext;validateDOMNesting(type,null,hostContextDev.ancestorInfo);if(typeof props.children==='string'||typeof props.children==='number'){var string=''+props.children;var ownAncestorInfo=updatedAncestorInfo(hostContextDev.ancestorInfo,type);validateDOMNesting(null,string,ownAncestorInfo);}parentNamespace=hostContextDev.namespace;}var domElement=createElement(type,props,rootContainerInstance,parentNamespace);precacheFiberNode(internalInstanceHandle,domElement);updateFiberProps(domElement,props);return domElement;}function appendInitialChild(parentInstance,child){parentInstance.appendChild(child);}function finalizeInitialChildren(domElement,type,props,rootContainerInstance,hostContext){setInitialProperties(domElement,type,props,rootContainerInstance);switch(type){case'button':case'input':case'select':case'textarea':return!!props.autoFocus;case'img':return true;default:return false;}}function prepareUpdate(domElement,type,oldProps,newProps,rootContainerInstance,hostContext){{var hostContextDev=hostContext;if(_typeof(newProps.children)!==_typeof(oldProps.children)&&(typeof newProps.children==='string'||typeof newProps.children==='number')){var string=''+newProps.children;var ownAncestorInfo=updatedAncestorInfo(hostContextDev.ancestorInfo,type);validateDOMNesting(null,string,ownAncestorInfo);}}return diffProperties(domElement,type,oldProps,newProps);}function shouldSetTextContent(type,props){return type==='textarea'||type==='noscript'||typeof props.children==='string'||typeof props.children==='number'||_typeof(props.dangerouslySetInnerHTML)==='object'&&props.dangerouslySetInnerHTML!==null&&props.dangerouslySetInnerHTML.__html!=null;}function createTextInstance(text,rootContainerInstance,hostContext,internalInstanceHandle){{var hostContextDev=hostContext;validateDOMNesting(null,text,hostContextDev.ancestorInfo);}var textNode=createTextNode(text,rootContainerInstance);precacheFiberNode(internalInstanceHandle,textNode);return textNode;}function getCurrentEventPriority(){var currentEvent=window.event;if(currentEvent===undefined){return DefaultEventPriority;}return getEventPriority(currentEvent.type);}// if a component just imports ReactDOM (e.g. for findDOMNode).
// Some environments might not have setTimeout or clearTimeout.
var scheduleTimeout=typeof setTimeout==='function'?setTimeout:undefined;var cancelTimeout=typeof clearTimeout==='function'?clearTimeout:undefined;var noTimeout=-1;var localPromise=typeof Promise==='function'?Promise:undefined;// -------------------
var scheduleMicrotask=typeof queueMicrotask==='function'?queueMicrotask:typeof localPromise!=='undefined'?function(callback){return localPromise.resolve(null).then(callback)["catch"](handleErrorInNextTick);}:scheduleTimeout;// TODO: Determine the best fallback here.
function handleErrorInNextTick(error){setTimeout(function(){throw error;});}// -------------------
function commitMount(domElement,type,newProps,internalInstanceHandle){// Despite the naming that might imply otherwise, this method only
// fires if there is an `Update` effect scheduled during mounting.
// This happens if `finalizeInitialChildren` returns `true` (which it
// does to implement the `autoFocus` attribute on the client). But
// there are also other cases when this might happen (such as patching
// up text content during hydration mismatch). So we'll check this again.
switch(type){case'button':case'input':case'select':case'textarea':if(newProps.autoFocus){domElement.focus();}return;case'img':{if(newProps.src){domElement.src=newProps.src;}return;}}}function commitUpdate(domElement,updatePayload,type,oldProps,newProps,internalInstanceHandle){// Apply the diff to the DOM node.
updateProperties(domElement,updatePayload,type,oldProps,newProps);// Update the props handle so that we know which props are the ones with
// with current event handlers.
updateFiberProps(domElement,newProps);}function resetTextContent(domElement){setTextContent(domElement,'');}function commitTextUpdate(textInstance,oldText,newText){textInstance.nodeValue=newText;}function appendChild(parentInstance,child){parentInstance.appendChild(child);}function appendChildToContainer(container,child){var parentNode;if(container.nodeType===COMMENT_NODE){parentNode=container.parentNode;parentNode.insertBefore(child,container);}else{parentNode=container;parentNode.appendChild(child);}// This container might be used for a portal.
// If something inside a portal is clicked, that click should bubble
// through the React tree. However, on Mobile Safari the click would
// never bubble through the *DOM* tree unless an ancestor with onclick
// event exists. So we wouldn't see it and dispatch it.
// This is why we ensure that non React root containers have inline onclick
// defined.
// https://github.com/facebook/react/issues/11918
var reactRootContainer=container._reactRootContainer;if((reactRootContainer===null||reactRootContainer===undefined)&&parentNode.onclick===null){// TODO: This cast may not be sound for SVG, MathML or custom elements.
trapClickOnNonInteractiveElement(parentNode);}}function insertBefore(parentInstance,child,beforeChild){parentInstance.insertBefore(child,beforeChild);}function insertInContainerBefore(container,child,beforeChild){if(container.nodeType===COMMENT_NODE){container.parentNode.insertBefore(child,beforeChild);}else{container.insertBefore(child,beforeChild);}}function removeChild(parentInstance,child){parentInstance.removeChild(child);}function removeChildFromContainer(container,child){if(container.nodeType===COMMENT_NODE){container.parentNode.removeChild(child);}else{container.removeChild(child);}}function clearSuspenseBoundary(parentInstance,suspenseInstance){var node=suspenseInstance;// Delete all nodes within this suspense boundary.
// There might be nested nodes so we need to keep track of how
// deep we are and only break out when we're back on top.
var depth=0;do{var nextNode=node.nextSibling;parentInstance.removeChild(node);if(nextNode&&nextNode.nodeType===COMMENT_NODE){var data=nextNode.data;if(data===SUSPENSE_END_DATA){if(depth===0){parentInstance.removeChild(nextNode);// Retry if any event replaying was blocked on this.
retryIfBlockedOn(suspenseInstance);return;}else{depth--;}}else if(data===SUSPENSE_START_DATA||data===SUSPENSE_PENDING_START_DATA||data===SUSPENSE_FALLBACK_START_DATA){depth++;}}node=nextNode;}while(node);// TODO: Warn, we didn't find the end comment boundary.
// Retry if any event replaying was blocked on this.
retryIfBlockedOn(suspenseInstance);}function clearSuspenseBoundaryFromContainer(container,suspenseInstance){if(container.nodeType===COMMENT_NODE){clearSuspenseBoundary(container.parentNode,suspenseInstance);}else if(container.nodeType===ELEMENT_NODE){clearSuspenseBoundary(container,suspenseInstance);}// Retry if any event replaying was blocked on this.
retryIfBlockedOn(container);}function hideInstance(instance){// TODO: Does this work for all element types? What about MathML? Should we
// pass host context to this method?
instance=instance;var style=instance.style;if(typeof style.setProperty==='function'){style.setProperty('display','none','important');}else{style.display='none';}}function hideTextInstance(textInstance){textInstance.nodeValue='';}function unhideInstance(instance,props){instance=instance;var styleProp=props[STYLE$1];var display=styleProp!==undefined&&styleProp!==null&&styleProp.hasOwnProperty('display')?styleProp.display:null;instance.style.display=dangerousStyleValue('display',display);}function unhideTextInstance(textInstance,text){textInstance.nodeValue=text;}function clearContainer(container){if(container.nodeType===ELEMENT_NODE){container.textContent='';}else if(container.nodeType===DOCUMENT_NODE){if(container.documentElement){container.removeChild(container.documentElement);}}}// -------------------
function canHydrateInstance(instance,type,props){if(instance.nodeType!==ELEMENT_NODE||type.toLowerCase()!==instance.nodeName.toLowerCase()){return null;}// This has now been refined to an element node.
return instance;}function canHydrateTextInstance(instance,text){if(text===''||instance.nodeType!==TEXT_NODE){// Empty strings are not parsed by HTML so there won't be a correct match here.
return null;}// This has now been refined to a text node.
return instance;}function canHydrateSuspenseInstance(instance){if(instance.nodeType!==COMMENT_NODE){// Empty strings are not parsed by HTML so there won't be a correct match here.
return null;}// This has now been refined to a suspense node.
return instance;}function isSuspenseInstancePending(instance){return instance.data===SUSPENSE_PENDING_START_DATA;}function isSuspenseInstanceFallback(instance){return instance.data===SUSPENSE_FALLBACK_START_DATA;}function getSuspenseInstanceFallbackErrorDetails(instance){var dataset=instance.nextSibling&&instance.nextSibling.dataset;var digest,message,stack;if(dataset){digest=dataset.dgst;{message=dataset.msg;stack=dataset.stck;}}{return{message:message,digest:digest,stack:stack};}// let value = {message: undefined, hash: undefined};
// const nextSibling = instance.nextSibling;
// if (nextSibling) {
//   const dataset = ((nextSibling: any): HTMLTemplateElement).dataset;
//   value.message = dataset.msg;
//   value.hash = dataset.hash;
//   if (true) {
//     value.stack = dataset.stack;
//   }
// }
// return value;
}function registerSuspenseInstanceRetry(instance,callback){instance._reactRetry=callback;}function getNextHydratable(node){// Skip non-hydratable nodes.
for(;node!=null;node=node.nextSibling){var nodeType=node.nodeType;if(nodeType===ELEMENT_NODE||nodeType===TEXT_NODE){break;}if(nodeType===COMMENT_NODE){var nodeData=node.data;if(nodeData===SUSPENSE_START_DATA||nodeData===SUSPENSE_FALLBACK_START_DATA||nodeData===SUSPENSE_PENDING_START_DATA){break;}if(nodeData===SUSPENSE_END_DATA){return null;}}}return node;}function getNextHydratableSibling(instance){return getNextHydratable(instance.nextSibling);}function getFirstHydratableChild(parentInstance){return getNextHydratable(parentInstance.firstChild);}function getFirstHydratableChildWithinContainer(parentContainer){return getNextHydratable(parentContainer.firstChild);}function getFirstHydratableChildWithinSuspenseInstance(parentInstance){return getNextHydratable(parentInstance.nextSibling);}function hydrateInstance(instance,type,props,rootContainerInstance,hostContext,internalInstanceHandle,shouldWarnDev){precacheFiberNode(internalInstanceHandle,instance);// TODO: Possibly defer this until the commit phase where all the events
// get attached.
updateFiberProps(instance,props);var parentNamespace;{var hostContextDev=hostContext;parentNamespace=hostContextDev.namespace;}// TODO: Temporary hack to check if we're in a concurrent root. We can delete
// when the legacy root API is removed.
var isConcurrentMode=(internalInstanceHandle.mode&ConcurrentMode)!==NoMode;return diffHydratedProperties(instance,type,props,parentNamespace,rootContainerInstance,isConcurrentMode,shouldWarnDev);}function hydrateTextInstance(textInstance,text,internalInstanceHandle,shouldWarnDev){precacheFiberNode(internalInstanceHandle,textInstance);// TODO: Temporary hack to check if we're in a concurrent root. We can delete
// when the legacy root API is removed.
var isConcurrentMode=(internalInstanceHandle.mode&ConcurrentMode)!==NoMode;return diffHydratedText(textInstance,text);}function hydrateSuspenseInstance(suspenseInstance,internalInstanceHandle){precacheFiberNode(internalInstanceHandle,suspenseInstance);}function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance){var node=suspenseInstance.nextSibling;// Skip past all nodes within this suspense boundary.
// There might be nested nodes so we need to keep track of how
// deep we are and only break out when we're back on top.
var depth=0;while(node){if(node.nodeType===COMMENT_NODE){var data=node.data;if(data===SUSPENSE_END_DATA){if(depth===0){return getNextHydratableSibling(node);}else{depth--;}}else if(data===SUSPENSE_START_DATA||data===SUSPENSE_FALLBACK_START_DATA||data===SUSPENSE_PENDING_START_DATA){depth++;}}node=node.nextSibling;}// TODO: Warn, we didn't find the end comment boundary.
return null;}// Returns the SuspenseInstance if this node is a direct child of a
// SuspenseInstance. I.e. if its previous sibling is a Comment with
// SUSPENSE_x_START_DATA. Otherwise, null.
function getParentSuspenseInstance(targetInstance){var node=targetInstance.previousSibling;// Skip past all nodes within this suspense boundary.
// There might be nested nodes so we need to keep track of how
// deep we are and only break out when we're back on top.
var depth=0;while(node){if(node.nodeType===COMMENT_NODE){var data=node.data;if(data===SUSPENSE_START_DATA||data===SUSPENSE_FALLBACK_START_DATA||data===SUSPENSE_PENDING_START_DATA){if(depth===0){return node;}else{depth--;}}else if(data===SUSPENSE_END_DATA){depth++;}}node=node.previousSibling;}return null;}function commitHydratedContainer(container){// Retry if any event replaying was blocked on this.
retryIfBlockedOn(container);}function commitHydratedSuspenseInstance(suspenseInstance){// Retry if any event replaying was blocked on this.
retryIfBlockedOn(suspenseInstance);}function shouldDeleteUnhydratedTailInstances(parentType){return parentType!=='head'&&parentType!=='body';}function didNotMatchHydratedContainerTextInstance(parentContainer,textInstance,text,isConcurrentMode){var shouldWarnDev=true;checkForUnmatchedText(textInstance.nodeValue,text,isConcurrentMode,shouldWarnDev);}function didNotMatchHydratedTextInstance(parentType,parentProps,parentInstance,textInstance,text,isConcurrentMode){if(parentProps[SUPPRESS_HYDRATION_WARNING$1]!==true){var shouldWarnDev=true;checkForUnmatchedText(textInstance.nodeValue,text,isConcurrentMode,shouldWarnDev);}}function didNotHydrateInstanceWithinContainer(parentContainer,instance){{if(instance.nodeType===ELEMENT_NODE){warnForDeletedHydratableElement(parentContainer,instance);}else if(instance.nodeType===COMMENT_NODE);else{warnForDeletedHydratableText(parentContainer,instance);}}}function didNotHydrateInstanceWithinSuspenseInstance(parentInstance,instance){{// $FlowFixMe: Only Element or Document can be parent nodes.
var parentNode=parentInstance.parentNode;if(parentNode!==null){if(instance.nodeType===ELEMENT_NODE){warnForDeletedHydratableElement(parentNode,instance);}else if(instance.nodeType===COMMENT_NODE);else{warnForDeletedHydratableText(parentNode,instance);}}}}function didNotHydrateInstance(parentType,parentProps,parentInstance,instance,isConcurrentMode){{if(isConcurrentMode||parentProps[SUPPRESS_HYDRATION_WARNING$1]!==true){if(instance.nodeType===ELEMENT_NODE){warnForDeletedHydratableElement(parentInstance,instance);}else if(instance.nodeType===COMMENT_NODE);else{warnForDeletedHydratableText(parentInstance,instance);}}}}function didNotFindHydratableInstanceWithinContainer(parentContainer,type,props){{warnForInsertedHydratedElement(parentContainer,type);}}function didNotFindHydratableTextInstanceWithinContainer(parentContainer,text){{warnForInsertedHydratedText(parentContainer,text);}}function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance,type,props){{// $FlowFixMe: Only Element or Document can be parent nodes.
var parentNode=parentInstance.parentNode;if(parentNode!==null)warnForInsertedHydratedElement(parentNode,type);}}function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance,text){{// $FlowFixMe: Only Element or Document can be parent nodes.
var parentNode=parentInstance.parentNode;if(parentNode!==null)warnForInsertedHydratedText(parentNode,text);}}function didNotFindHydratableInstance(parentType,parentProps,parentInstance,type,props,isConcurrentMode){{if(isConcurrentMode||parentProps[SUPPRESS_HYDRATION_WARNING$1]!==true){warnForInsertedHydratedElement(parentInstance,type);}}}function didNotFindHydratableTextInstance(parentType,parentProps,parentInstance,text,isConcurrentMode){{if(isConcurrentMode||parentProps[SUPPRESS_HYDRATION_WARNING$1]!==true){warnForInsertedHydratedText(parentInstance,text);}}}function errorHydratingContainer(parentContainer){{// TODO: This gets logged by onRecoverableError, too, so we should be
// able to remove it.
error('An error occurred during hydration. The server HTML was replaced with client content in <%s>.',parentContainer.nodeName.toLowerCase());}}function preparePortalMount(portalInstance){listenToAllSupportedEvents(portalInstance);}var randomKey=Math.random().toString(36).slice(2);var internalInstanceKey='__reactFiber$'+randomKey;var internalPropsKey='__reactProps$'+randomKey;var internalContainerInstanceKey='__reactContainer$'+randomKey;var internalEventHandlersKey='__reactEvents$'+randomKey;var internalEventHandlerListenersKey='__reactListeners$'+randomKey;var internalEventHandlesSetKey='__reactHandles$'+randomKey;function detachDeletedInstance(node){// TODO: This function is only called on host components. I don't think all of
// these fields are relevant.
delete node[internalInstanceKey];delete node[internalPropsKey];delete node[internalEventHandlersKey];delete node[internalEventHandlerListenersKey];delete node[internalEventHandlesSetKey];}function precacheFiberNode(hostInst,node){node[internalInstanceKey]=hostInst;}function markContainerAsRoot(hostRoot,node){node[internalContainerInstanceKey]=hostRoot;}function unmarkContainerAsRoot(node){node[internalContainerInstanceKey]=null;}function isContainerMarkedAsRoot(node){return!!node[internalContainerInstanceKey];}// Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
// If the target node is part of a hydrated or not yet rendered subtree, then
// this may also return a SuspenseComponent or HostRoot to indicate that.
// Conceptually the HostRoot fiber is a child of the Container node. So if you
// pass the Container node as the targetNode, you will not actually get the
// HostRoot back. To get to the HostRoot, you need to pass a child of it.
// The same thing applies to Suspense boundaries.
function getClosestInstanceFromNode(targetNode){var targetInst=targetNode[internalInstanceKey];if(targetInst){// Don't return HostRoot or SuspenseComponent here.
return targetInst;}// If the direct event target isn't a React owned DOM node, we need to look
// to see if one of its parents is a React owned DOM node.
var parentNode=targetNode.parentNode;while(parentNode){// We'll check if this is a container root that could include
// React nodes in the future. We need to check this first because
// if we're a child of a dehydrated container, we need to first
// find that inner container before moving on to finding the parent
// instance. Note that we don't check this field on  the targetNode
// itself because the fibers are conceptually between the container
// node and the first child. It isn't surrounding the container node.
// If it's not a container, we check if it's an instance.
targetInst=parentNode[internalContainerInstanceKey]||parentNode[internalInstanceKey];if(targetInst){// Since this wasn't the direct target of the event, we might have
// stepped past dehydrated DOM nodes to get here. However they could
// also have been non-React nodes. We need to answer which one.
// If we the instance doesn't have any children, then there can't be
// a nested suspense boundary within it. So we can use this as a fast
// bailout. Most of the time, when people add non-React children to
// the tree, it is using a ref to a child-less DOM node.
// Normally we'd only need to check one of the fibers because if it
// has ever gone from having children to deleting them or vice versa
// it would have deleted the dehydrated boundary nested inside already.
// However, since the HostRoot starts out with an alternate it might
// have one on the alternate so we need to check in case this was a
// root.
var alternate=targetInst.alternate;if(targetInst.child!==null||alternate!==null&&alternate.child!==null){// Next we need to figure out if the node that skipped past is
// nested within a dehydrated boundary and if so, which one.
var suspenseInstance=getParentSuspenseInstance(targetNode);while(suspenseInstance!==null){// We found a suspense instance. That means that we haven't
// hydrated it yet. Even though we leave the comments in the
// DOM after hydrating, and there are boundaries in the DOM
// that could already be hydrated, we wouldn't have found them
// through this pass since if the target is hydrated it would
// have had an internalInstanceKey on it.
// Let's get the fiber associated with the SuspenseComponent
// as the deepest instance.
var targetSuspenseInst=suspenseInstance[internalInstanceKey];if(targetSuspenseInst){return targetSuspenseInst;}// If we don't find a Fiber on the comment, it might be because
// we haven't gotten to hydrate it yet. There might still be a
// parent boundary that hasn't above this one so we need to find
// the outer most that is known.
suspenseInstance=getParentSuspenseInstance(suspenseInstance);// If we don't find one, then that should mean that the parent
// host component also hasn't hydrated yet. We can return it
// below since it will bail out on the isMounted check later.
}}return targetInst;}targetNode=parentNode;parentNode=targetNode.parentNode;}return null;}/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */function getInstanceFromNode(node){var inst=node[internalInstanceKey]||node[internalContainerInstanceKey];if(inst){if(inst.tag===HostComponent||inst.tag===HostText||inst.tag===SuspenseComponent||inst.tag===HostRoot){return inst;}else{return null;}}return null;}/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */function getNodeFromInstance(inst){if(inst.tag===HostComponent||inst.tag===HostText){// In Fiber this, is just the state node right now. We assume it will be
// a host component or host text.
return inst.stateNode;}// Without this first invariant, passing a non-DOM-component triggers the next
// invariant for a missing parent, which is super confusing.
throw new Error('getNodeFromInstance: Invalid argument.');}function getFiberCurrentPropsFromNode(node){return node[internalPropsKey]||null;}function updateFiberProps(node,props){node[internalPropsKey]=props;}function getEventListenerSet(node){var elementListenerSet=node[internalEventHandlersKey];if(elementListenerSet===undefined){elementListenerSet=node[internalEventHandlersKey]=new Set();}return elementListenerSet;}var loggedTypeFailures={};var ReactDebugCurrentFrame$1=ReactSharedInternals.ReactDebugCurrentFrame;function setCurrentlyValidatingElement(element){{if(element){var owner=element._owner;var stack=describeUnknownElementTypeFrameInDEV(element.type,element._source,owner?owner.type:null);ReactDebugCurrentFrame$1.setExtraStackFrame(stack);}else{ReactDebugCurrentFrame$1.setExtraStackFrame(null);}}}function checkPropTypes(typeSpecs,values,location,componentName,element){{// $FlowFixMe This is okay but Flow doesn't know it.
var has=Function.call.bind(hasOwnProperty);for(var typeSpecName in typeSpecs){if(has(typeSpecs,typeSpecName)){var error$1=void 0;// Prop type validation may throw. In case they do, we don't want to
// fail the render phase where it didn't fail before. So we log it.
// After these have been cleaned up, we'll let them throw.
try{// This is intentionally an invariant that gets caught. It's the same
// behavior as without this statement except with a better message.
if(typeof typeSpecs[typeSpecName]!=='function'){// eslint-disable-next-line react-internal/prod-error-codes
var err=Error((componentName||'React class')+': '+location+' type `'+typeSpecName+'` is invalid; '+'it must be a function, usually from the `prop-types` package, but received `'+_typeof(typeSpecs[typeSpecName])+'`.'+'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');err.name='Invariant Violation';throw err;}error$1=typeSpecs[typeSpecName](values,typeSpecName,componentName,location,null,'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');}catch(ex){error$1=ex;}if(error$1&&!(error$1 instanceof Error)){setCurrentlyValidatingElement(element);error('%s: type specification of %s'+' `%s` is invalid; the type checker '+'function must return `null` or an `Error` but returned a %s. '+'You may have forgotten to pass an argument to the type checker '+'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and '+'shape all require an argument).',componentName||'React class',location,typeSpecName,_typeof(error$1));setCurrentlyValidatingElement(null);}if(error$1 instanceof Error&&!(error$1.message in loggedTypeFailures)){// Only monitor this failure once because there tends to be a lot of the
// same error.
loggedTypeFailures[error$1.message]=true;setCurrentlyValidatingElement(element);error('Failed %s type: %s',location,error$1.message);setCurrentlyValidatingElement(null);}}}}}var valueStack=[];var fiberStack;{fiberStack=[];}var index=-1;function createCursor(defaultValue){return{current:defaultValue};}function pop(cursor,fiber){if(index<0){{error('Unexpected pop.');}return;}{if(fiber!==fiberStack[index]){error('Unexpected Fiber popped.');}}cursor.current=valueStack[index];valueStack[index]=null;{fiberStack[index]=null;}index--;}function push(cursor,value,fiber){index++;valueStack[index]=cursor.current;{fiberStack[index]=fiber;}cursor.current=value;}var warnedAboutMissingGetChildContext;{warnedAboutMissingGetChildContext={};}var emptyContextObject={};{Object.freeze(emptyContextObject);}// A cursor to the current merged context object on the stack.
var contextStackCursor=createCursor(emptyContextObject);// A cursor to a boolean indicating whether the context has changed.
var didPerformWorkStackCursor=createCursor(false);// Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.
var previousContext=emptyContextObject;function getUnmaskedContext(workInProgress,Component,didPushOwnContextIfProvider){{if(didPushOwnContextIfProvider&&isContextProvider(Component)){// If the fiber is a context provider itself, when we read its context
// we may have already pushed its own child context on the stack. A context
// provider should not "see" its own child context. Therefore we read the
// previous (parent) context instead for a context provider.
return previousContext;}return contextStackCursor.current;}}function cacheContext(workInProgress,unmaskedContext,maskedContext){{var instance=workInProgress.stateNode;instance.__reactInternalMemoizedUnmaskedChildContext=unmaskedContext;instance.__reactInternalMemoizedMaskedChildContext=maskedContext;}}function getMaskedContext(workInProgress,unmaskedContext){{var type=workInProgress.type;var contextTypes=type.contextTypes;if(!contextTypes){return emptyContextObject;}// Avoid recreating masked context unless unmasked context has changed.
// Failing to do this will result in unnecessary calls to componentWillReceiveProps.
// This may trigger infinite loops if componentWillReceiveProps calls setState.
var instance=workInProgress.stateNode;if(instance&&instance.__reactInternalMemoizedUnmaskedChildContext===unmaskedContext){return instance.__reactInternalMemoizedMaskedChildContext;}var context={};for(var key in contextTypes){context[key]=unmaskedContext[key];}{var name=getComponentNameFromFiber(workInProgress)||'Unknown';checkPropTypes(contextTypes,context,'context',name);}// Cache unmasked context so we can avoid recreating masked context unless necessary.
// Context is created before the class component is instantiated so check for instance.
if(instance){cacheContext(workInProgress,unmaskedContext,context);}return context;}}function hasContextChanged(){{return didPerformWorkStackCursor.current;}}function isContextProvider(type){{var childContextTypes=type.childContextTypes;return childContextTypes!==null&&childContextTypes!==undefined;}}function popContext(fiber){{pop(didPerformWorkStackCursor,fiber);pop(contextStackCursor,fiber);}}function popTopLevelContextObject(fiber){{pop(didPerformWorkStackCursor,fiber);pop(contextStackCursor,fiber);}}function pushTopLevelContextObject(fiber,context,didChange){{if(contextStackCursor.current!==emptyContextObject){throw new Error('Unexpected context found on stack. '+'This error is likely caused by a bug in React. Please file an issue.');}push(contextStackCursor,context,fiber);push(didPerformWorkStackCursor,didChange,fiber);}}function processChildContext(fiber,type,parentContext){{var instance=fiber.stateNode;var childContextTypes=type.childContextTypes;// TODO (bvaughn) Replace this behavior with an invariant() in the future.
// It has only been added in Fiber to match the (unintentional) behavior in Stack.
if(typeof instance.getChildContext!=='function'){{var componentName=getComponentNameFromFiber(fiber)||'Unknown';if(!warnedAboutMissingGetChildContext[componentName]){warnedAboutMissingGetChildContext[componentName]=true;error('%s.childContextTypes is specified but there is no getChildContext() method '+'on the instance. You can either define getChildContext() on %s or remove '+'childContextTypes from it.',componentName,componentName);}}return parentContext;}var childContext=instance.getChildContext();for(var contextKey in childContext){if(!(contextKey in childContextTypes)){throw new Error((getComponentNameFromFiber(fiber)||'Unknown')+".getChildContext(): key \""+contextKey+"\" is not defined in childContextTypes.");}}{var name=getComponentNameFromFiber(fiber)||'Unknown';checkPropTypes(childContextTypes,childContext,'child context',name);}return assign({},parentContext,childContext);}}function pushContextProvider(workInProgress){{var instance=workInProgress.stateNode;// We push the context as early as possible to ensure stack integrity.
// If the instance does not exist yet, we will push null at first,
// and replace it on the stack later when invalidating the context.
var memoizedMergedChildContext=instance&&instance.__reactInternalMemoizedMergedChildContext||emptyContextObject;// Remember the parent context so we can merge with it later.
// Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.
previousContext=contextStackCursor.current;push(contextStackCursor,memoizedMergedChildContext,workInProgress);push(didPerformWorkStackCursor,didPerformWorkStackCursor.current,workInProgress);return true;}}function invalidateContextProvider(workInProgress,type,didChange){{var instance=workInProgress.stateNode;if(!instance){throw new Error('Expected to have an instance by this point. '+'This error is likely caused by a bug in React. Please file an issue.');}if(didChange){// Merge parent and own context.
// Skip this if we're not updating due to sCU.
// This avoids unnecessarily recomputing memoized values.
var mergedContext=processChildContext(workInProgress,type,previousContext);instance.__reactInternalMemoizedMergedChildContext=mergedContext;// Replace the old (or empty) context with the new one.
// It is important to unwind the context in the reverse order.
pop(didPerformWorkStackCursor,workInProgress);pop(contextStackCursor,workInProgress);// Now push the new context and mark that it has changed.
push(contextStackCursor,mergedContext,workInProgress);push(didPerformWorkStackCursor,didChange,workInProgress);}else{pop(didPerformWorkStackCursor,workInProgress);push(didPerformWorkStackCursor,didChange,workInProgress);}}}function findCurrentUnmaskedContext(fiber){{// Currently this is only used with renderSubtreeIntoContainer; not sure if it
// makes sense elsewhere
if(!isFiberMounted(fiber)||fiber.tag!==ClassComponent){throw new Error('Expected subtree parent to be a mounted class component. '+'This error is likely caused by a bug in React. Please file an issue.');}var node=fiber;do{switch(node.tag){case HostRoot:return node.stateNode.context;case ClassComponent:{var Component=node.type;if(isContextProvider(Component)){return node.stateNode.__reactInternalMemoizedMergedChildContext;}break;}}node=node["return"];}while(node!==null);throw new Error('Found unexpected detached subtree parent. '+'This error is likely caused by a bug in React. Please file an issue.');}}var LegacyRoot=0;var ConcurrentRoot=1;var syncQueue=null;var includesLegacySyncCallbacks=false;var isFlushingSyncQueue=false;function scheduleSyncCallback(callback){// Push this callback into an internal queue. We'll flush these either in
// the next tick, or earlier if something calls `flushSyncCallbackQueue`.
if(syncQueue===null){syncQueue=[callback];}else{// Push onto existing queue. Don't need to schedule a callback because
// we already scheduled one when we created the queue.
syncQueue.push(callback);}}function scheduleLegacySyncCallback(callback){includesLegacySyncCallbacks=true;scheduleSyncCallback(callback);}function flushSyncCallbacksOnlyInLegacyMode(){// Only flushes the queue if there's a legacy sync callback scheduled.
// TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
// it might make more sense for the queue to be a list of roots instead of a
// list of generic callbacks. Then we can have two: one for legacy roots, one
// for concurrent roots. And this method would only flush the legacy ones.
if(includesLegacySyncCallbacks){flushSyncCallbacks();}}function flushSyncCallbacks(){if(!isFlushingSyncQueue&&syncQueue!==null){// Prevent re-entrance.
isFlushingSyncQueue=true;var i=0;var previousUpdatePriority=getCurrentUpdatePriority();try{var isSync=true;var queue=syncQueue;// TODO: Is this necessary anymore? The only user code that runs in this
// queue is in the render or commit phases.
setCurrentUpdatePriority(DiscreteEventPriority);for(;i<queue.length;i++){var callback=queue[i];do{callback=callback(isSync);}while(callback!==null);}syncQueue=null;includesLegacySyncCallbacks=false;}catch(error){// If something throws, leave the remaining callbacks on the queue.
if(syncQueue!==null){syncQueue=syncQueue.slice(i+1);}// Resume flushing in the next tick
scheduleCallback(ImmediatePriority,flushSyncCallbacks);throw error;}finally{setCurrentUpdatePriority(previousUpdatePriority);isFlushingSyncQueue=false;}}return null;}// TODO: Use the unified fiber stack module instead of this local one?
// Intentionally not using it yet to derisk the initial implementation, because
// the way we push/pop these values is a bit unusual. If there's a mistake, I'd
// rather the ids be wrong than crash the whole reconciler.
var forkStack=[];var forkStackIndex=0;var treeForkProvider=null;var treeForkCount=0;var idStack=[];var idStackIndex=0;var treeContextProvider=null;var treeContextId=1;var treeContextOverflow='';function isForkedChild(workInProgress){warnIfNotHydrating();return(workInProgress.flags&Forked)!==NoFlags;}function getForksAtLevel(workInProgress){warnIfNotHydrating();return treeForkCount;}function getTreeId(){var overflow=treeContextOverflow;var idWithLeadingBit=treeContextId;var id=idWithLeadingBit&~getLeadingBit(idWithLeadingBit);return id.toString(32)+overflow;}function pushTreeFork(workInProgress,totalChildren){// This is called right after we reconcile an array (or iterator) of child
// fibers, because that's the only place where we know how many children in
// the whole set without doing extra work later, or storing addtional
// information on the fiber.
//
// That's why this function is separate from pushTreeId — it's called during
// the render phase of the fork parent, not the child, which is where we push
// the other context values.
//
// In the Fizz implementation this is much simpler because the child is
// rendered in the same callstack as the parent.
//
// It might be better to just add a `forks` field to the Fiber type. It would
// make this module simpler.
warnIfNotHydrating();forkStack[forkStackIndex++]=treeForkCount;forkStack[forkStackIndex++]=treeForkProvider;treeForkProvider=workInProgress;treeForkCount=totalChildren;}function pushTreeId(workInProgress,totalChildren,index){warnIfNotHydrating();idStack[idStackIndex++]=treeContextId;idStack[idStackIndex++]=treeContextOverflow;idStack[idStackIndex++]=treeContextProvider;treeContextProvider=workInProgress;var baseIdWithLeadingBit=treeContextId;var baseOverflow=treeContextOverflow;// The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
// of the id; we use it to account for leading 0s.
var baseLength=getBitLength(baseIdWithLeadingBit)-1;var baseId=baseIdWithLeadingBit&~(1<<baseLength);var slot=index+1;var length=getBitLength(totalChildren)+baseLength;// 30 is the max length we can store without overflowing, taking into
// consideration the leading 1 we use to mark the end of the sequence.
if(length>30){// We overflowed the bitwise-safe range. Fall back to slower algorithm.
// This branch assumes the length of the base id is greater than 5; it won't
// work for smaller ids, because you need 5 bits per character.
//
// We encode the id in multiple steps: first the base id, then the
// remaining digits.
//
// Each 5 bit sequence corresponds to a single base 32 character. So for
// example, if the current id is 23 bits long, we can convert 20 of those
// bits into a string of 4 characters, with 3 bits left over.
//
// First calculate how many bits in the base id represent a complete
// sequence of characters.
var numberOfOverflowBits=baseLength-baseLength%5;// Then create a bitmask that selects only those bits.
var newOverflowBits=(1<<numberOfOverflowBits)-1;// Select the bits, and convert them to a base 32 string.
var newOverflow=(baseId&newOverflowBits).toString(32);// Now we can remove those bits from the base id.
var restOfBaseId=baseId>>numberOfOverflowBits;var restOfBaseLength=baseLength-numberOfOverflowBits;// Finally, encode the rest of the bits using the normal algorithm. Because
// we made more room, this time it won't overflow.
var restOfLength=getBitLength(totalChildren)+restOfBaseLength;var restOfNewBits=slot<<restOfBaseLength;var id=restOfNewBits|restOfBaseId;var overflow=newOverflow+baseOverflow;treeContextId=1<<restOfLength|id;treeContextOverflow=overflow;}else{// Normal path
var newBits=slot<<baseLength;var _id=newBits|baseId;var _overflow=baseOverflow;treeContextId=1<<length|_id;treeContextOverflow=_overflow;}}function pushMaterializedTreeId(workInProgress){warnIfNotHydrating();// This component materialized an id. This will affect any ids that appear
// in its children.
var returnFiber=workInProgress["return"];if(returnFiber!==null){var numberOfForks=1;var slotIndex=0;pushTreeFork(workInProgress,numberOfForks);pushTreeId(workInProgress,numberOfForks,slotIndex);}}function getBitLength(number){return 32-clz32(number);}function getLeadingBit(id){return 1<<getBitLength(id)-1;}function popTreeContext(workInProgress){// Restore the previous values.
// This is a bit more complicated than other context-like modules in Fiber
// because the same Fiber may appear on the stack multiple times and for
// different reasons. We have to keep popping until the work-in-progress is
// no longer at the top of the stack.
while(workInProgress===treeForkProvider){treeForkProvider=forkStack[--forkStackIndex];forkStack[forkStackIndex]=null;treeForkCount=forkStack[--forkStackIndex];forkStack[forkStackIndex]=null;}while(workInProgress===treeContextProvider){treeContextProvider=idStack[--idStackIndex];idStack[idStackIndex]=null;treeContextOverflow=idStack[--idStackIndex];idStack[idStackIndex]=null;treeContextId=idStack[--idStackIndex];idStack[idStackIndex]=null;}}function getSuspendedTreeContext(){warnIfNotHydrating();if(treeContextProvider!==null){return{id:treeContextId,overflow:treeContextOverflow};}else{return null;}}function restoreSuspendedTreeContext(workInProgress,suspendedContext){warnIfNotHydrating();idStack[idStackIndex++]=treeContextId;idStack[idStackIndex++]=treeContextOverflow;idStack[idStackIndex++]=treeContextProvider;treeContextId=suspendedContext.id;treeContextOverflow=suspendedContext.overflow;treeContextProvider=workInProgress;}function warnIfNotHydrating(){{if(!getIsHydrating()){error('Expected to be hydrating. This is a bug in React. Please file '+'an issue.');}}}// This may have been an insertion or a hydration.
var hydrationParentFiber=null;var nextHydratableInstance=null;var isHydrating=false;// This flag allows for warning supression when we expect there to be mismatches
// due to earlier mismatches or a suspended fiber.
var didSuspendOrErrorDEV=false;// Hydration errors that were thrown inside this boundary
var hydrationErrors=null;function warnIfHydrating(){{if(isHydrating){error('We should not be hydrating here. This is a bug in React. Please file a bug.');}}}function markDidThrowWhileHydratingDEV(){{didSuspendOrErrorDEV=true;}}function didSuspendOrErrorWhileHydratingDEV(){{return didSuspendOrErrorDEV;}}function enterHydrationState(fiber){var parentInstance=fiber.stateNode.containerInfo;nextHydratableInstance=getFirstHydratableChildWithinContainer(parentInstance);hydrationParentFiber=fiber;isHydrating=true;hydrationErrors=null;didSuspendOrErrorDEV=false;return true;}function reenterHydrationStateFromDehydratedSuspenseInstance(fiber,suspenseInstance,treeContext){nextHydratableInstance=getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);hydrationParentFiber=fiber;isHydrating=true;hydrationErrors=null;didSuspendOrErrorDEV=false;if(treeContext!==null){restoreSuspendedTreeContext(fiber,treeContext);}return true;}function warnUnhydratedInstance(returnFiber,instance){{switch(returnFiber.tag){case HostRoot:{didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo,instance);break;}case HostComponent:{var isConcurrentMode=(returnFiber.mode&ConcurrentMode)!==NoMode;didNotHydrateInstance(returnFiber.type,returnFiber.memoizedProps,returnFiber.stateNode,instance,// TODO: Delete this argument when we remove the legacy root API.
isConcurrentMode);break;}case SuspenseComponent:{var suspenseState=returnFiber.memoizedState;if(suspenseState.dehydrated!==null)didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated,instance);break;}}}}function deleteHydratableInstance(returnFiber,instance){warnUnhydratedInstance(returnFiber,instance);var childToDelete=createFiberFromHostInstanceForDeletion();childToDelete.stateNode=instance;childToDelete["return"]=returnFiber;var deletions=returnFiber.deletions;if(deletions===null){returnFiber.deletions=[childToDelete];returnFiber.flags|=ChildDeletion;}else{deletions.push(childToDelete);}}function warnNonhydratedInstance(returnFiber,fiber){{if(didSuspendOrErrorDEV){// Inside a boundary that already suspended. We're currently rendering the
// siblings of a suspended node. The mismatch may be due to the missing
// data, so it's probably a false positive.
return;}switch(returnFiber.tag){case HostRoot:{var parentContainer=returnFiber.stateNode.containerInfo;switch(fiber.tag){case HostComponent:var type=fiber.type;var props=fiber.pendingProps;didNotFindHydratableInstanceWithinContainer(parentContainer,type);break;case HostText:var text=fiber.pendingProps;didNotFindHydratableTextInstanceWithinContainer(parentContainer,text);break;}break;}case HostComponent:{var parentType=returnFiber.type;var parentProps=returnFiber.memoizedProps;var parentInstance=returnFiber.stateNode;switch(fiber.tag){case HostComponent:{var _type=fiber.type;var _props=fiber.pendingProps;var isConcurrentMode=(returnFiber.mode&ConcurrentMode)!==NoMode;didNotFindHydratableInstance(parentType,parentProps,parentInstance,_type,_props,// TODO: Delete this argument when we remove the legacy root API.
isConcurrentMode);break;}case HostText:{var _text=fiber.pendingProps;var _isConcurrentMode=(returnFiber.mode&ConcurrentMode)!==NoMode;didNotFindHydratableTextInstance(parentType,parentProps,parentInstance,_text,// TODO: Delete this argument when we remove the legacy root API.
_isConcurrentMode);break;}}break;}case SuspenseComponent:{var suspenseState=returnFiber.memoizedState;var _parentInstance=suspenseState.dehydrated;if(_parentInstance!==null)switch(fiber.tag){case HostComponent:var _type2=fiber.type;var _props2=fiber.pendingProps;didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance,_type2);break;case HostText:var _text2=fiber.pendingProps;didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance,_text2);break;}break;}default:return;}}}function insertNonHydratedInstance(returnFiber,fiber){fiber.flags=fiber.flags&~Hydrating|Placement;warnNonhydratedInstance(returnFiber,fiber);}function tryHydrate(fiber,nextInstance){switch(fiber.tag){case HostComponent:{var type=fiber.type;var props=fiber.pendingProps;var instance=canHydrateInstance(nextInstance,type);if(instance!==null){fiber.stateNode=instance;hydrationParentFiber=fiber;nextHydratableInstance=getFirstHydratableChild(instance);return true;}return false;}case HostText:{var text=fiber.pendingProps;var textInstance=canHydrateTextInstance(nextInstance,text);if(textInstance!==null){fiber.stateNode=textInstance;hydrationParentFiber=fiber;// Text Instances don't have children so there's nothing to hydrate.
nextHydratableInstance=null;return true;}return false;}case SuspenseComponent:{var suspenseInstance=canHydrateSuspenseInstance(nextInstance);if(suspenseInstance!==null){var suspenseState={dehydrated:suspenseInstance,treeContext:getSuspendedTreeContext(),retryLane:OffscreenLane};fiber.memoizedState=suspenseState;// Store the dehydrated fragment as a child fiber.
// This simplifies the code for getHostSibling and deleting nodes,
// since it doesn't have to consider all Suspense boundaries and
// check if they're dehydrated ones or not.
var dehydratedFragment=createFiberFromDehydratedFragment(suspenseInstance);dehydratedFragment["return"]=fiber;fiber.child=dehydratedFragment;hydrationParentFiber=fiber;// While a Suspense Instance does have children, we won't step into
// it during the first pass. Instead, we'll reenter it later.
nextHydratableInstance=null;return true;}return false;}default:return false;}}function shouldClientRenderOnMismatch(fiber){return(fiber.mode&ConcurrentMode)!==NoMode&&(fiber.flags&DidCapture)===NoFlags;}function throwOnHydrationMismatch(fiber){throw new Error('Hydration failed because the initial UI does not match what was '+'rendered on the server.');}function tryToClaimNextHydratableInstance(fiber){if(!isHydrating){return;}var nextInstance=nextHydratableInstance;if(!nextInstance){if(shouldClientRenderOnMismatch(fiber)){warnNonhydratedInstance(hydrationParentFiber,fiber);throwOnHydrationMismatch();}// Nothing to hydrate. Make it an insertion.
insertNonHydratedInstance(hydrationParentFiber,fiber);isHydrating=false;hydrationParentFiber=fiber;return;}var firstAttemptedInstance=nextInstance;if(!tryHydrate(fiber,nextInstance)){if(shouldClientRenderOnMismatch(fiber)){warnNonhydratedInstance(hydrationParentFiber,fiber);throwOnHydrationMismatch();}// If we can't hydrate this instance let's try the next one.
// We use this as a heuristic. It's based on intuition and not data so it
// might be flawed or unnecessary.
nextInstance=getNextHydratableSibling(firstAttemptedInstance);var prevHydrationParentFiber=hydrationParentFiber;if(!nextInstance||!tryHydrate(fiber,nextInstance)){// Nothing to hydrate. Make it an insertion.
insertNonHydratedInstance(hydrationParentFiber,fiber);isHydrating=false;hydrationParentFiber=fiber;return;}// We matched the next one, we'll now assume that the first one was
// superfluous and we'll delete it. Since we can't eagerly delete it
// we'll have to schedule a deletion. To do that, this node needs a dummy
// fiber associated with it.
deleteHydratableInstance(prevHydrationParentFiber,firstAttemptedInstance);}}function prepareToHydrateHostInstance(fiber,rootContainerInstance,hostContext){var instance=fiber.stateNode;var shouldWarnIfMismatchDev=!didSuspendOrErrorDEV;var updatePayload=hydrateInstance(instance,fiber.type,fiber.memoizedProps,rootContainerInstance,hostContext,fiber,shouldWarnIfMismatchDev);// TODO: Type this specific to this type of component.
fiber.updateQueue=updatePayload;// If the update payload indicates that there is a change or if there
// is a new ref we mark this as an update.
if(updatePayload!==null){return true;}return false;}function prepareToHydrateHostTextInstance(fiber){var textInstance=fiber.stateNode;var textContent=fiber.memoizedProps;var shouldUpdate=hydrateTextInstance(textInstance,textContent,fiber);if(shouldUpdate){// We assume that prepareToHydrateHostTextInstance is called in a context where the
// hydration parent is the parent host component of this host text.
var returnFiber=hydrationParentFiber;if(returnFiber!==null){switch(returnFiber.tag){case HostRoot:{var parentContainer=returnFiber.stateNode.containerInfo;var isConcurrentMode=(returnFiber.mode&ConcurrentMode)!==NoMode;didNotMatchHydratedContainerTextInstance(parentContainer,textInstance,textContent,// TODO: Delete this argument when we remove the legacy root API.
isConcurrentMode);break;}case HostComponent:{var parentType=returnFiber.type;var parentProps=returnFiber.memoizedProps;var parentInstance=returnFiber.stateNode;var _isConcurrentMode2=(returnFiber.mode&ConcurrentMode)!==NoMode;didNotMatchHydratedTextInstance(parentType,parentProps,parentInstance,textInstance,textContent,// TODO: Delete this argument when we remove the legacy root API.
_isConcurrentMode2);break;}}}}return shouldUpdate;}function prepareToHydrateHostSuspenseInstance(fiber){var suspenseState=fiber.memoizedState;var suspenseInstance=suspenseState!==null?suspenseState.dehydrated:null;if(!suspenseInstance){throw new Error('Expected to have a hydrated suspense instance. '+'This error is likely caused by a bug in React. Please file an issue.');}hydrateSuspenseInstance(suspenseInstance,fiber);}function skipPastDehydratedSuspenseInstance(fiber){var suspenseState=fiber.memoizedState;var suspenseInstance=suspenseState!==null?suspenseState.dehydrated:null;if(!suspenseInstance){throw new Error('Expected to have a hydrated suspense instance. '+'This error is likely caused by a bug in React. Please file an issue.');}return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);}function popToNextHostParent(fiber){var parent=fiber["return"];while(parent!==null&&parent.tag!==HostComponent&&parent.tag!==HostRoot&&parent.tag!==SuspenseComponent){parent=parent["return"];}hydrationParentFiber=parent;}function popHydrationState(fiber){if(fiber!==hydrationParentFiber){// We're deeper than the current hydration context, inside an inserted
// tree.
return false;}if(!isHydrating){// If we're not currently hydrating but we're in a hydration context, then
// we were an insertion and now need to pop up reenter hydration of our
// siblings.
popToNextHostParent(fiber);isHydrating=true;return false;}// If we have any remaining hydratable nodes, we need to delete them now.
// We only do this deeper than head and body since they tend to have random
// other nodes in them. We also ignore components with pure text content in
// side of them. We also don't delete anything inside the root container.
if(fiber.tag!==HostRoot&&(fiber.tag!==HostComponent||shouldDeleteUnhydratedTailInstances(fiber.type)&&!shouldSetTextContent(fiber.type,fiber.memoizedProps))){var nextInstance=nextHydratableInstance;if(nextInstance){if(shouldClientRenderOnMismatch(fiber)){warnIfUnhydratedTailNodes(fiber);throwOnHydrationMismatch();}else{while(nextInstance){deleteHydratableInstance(fiber,nextInstance);nextInstance=getNextHydratableSibling(nextInstance);}}}}popToNextHostParent(fiber);if(fiber.tag===SuspenseComponent){nextHydratableInstance=skipPastDehydratedSuspenseInstance(fiber);}else{nextHydratableInstance=hydrationParentFiber?getNextHydratableSibling(fiber.stateNode):null;}return true;}function hasUnhydratedTailNodes(){return isHydrating&&nextHydratableInstance!==null;}function warnIfUnhydratedTailNodes(fiber){var nextInstance=nextHydratableInstance;while(nextInstance){warnUnhydratedInstance(fiber,nextInstance);nextInstance=getNextHydratableSibling(nextInstance);}}function resetHydrationState(){hydrationParentFiber=null;nextHydratableInstance=null;isHydrating=false;didSuspendOrErrorDEV=false;}function upgradeHydrationErrorsToRecoverable(){if(hydrationErrors!==null){// Successfully completed a forced client render. The errors that occurred
// during the hydration attempt are now recovered. We will log them in
// commit phase, once the entire tree has finished.
queueRecoverableErrors(hydrationErrors);hydrationErrors=null;}}function getIsHydrating(){return isHydrating;}function queueHydrationError(error){if(hydrationErrors===null){hydrationErrors=[error];}else{hydrationErrors.push(error);}}var ReactCurrentBatchConfig$1=ReactSharedInternals.ReactCurrentBatchConfig;var NoTransition=null;function requestCurrentTransition(){return ReactCurrentBatchConfig$1.transition;}var ReactStrictModeWarnings={recordUnsafeLifecycleWarnings:function recordUnsafeLifecycleWarnings(fiber,instance){},flushPendingUnsafeLifecycleWarnings:function flushPendingUnsafeLifecycleWarnings(){},recordLegacyContextWarning:function recordLegacyContextWarning(fiber,instance){},flushLegacyContextWarning:function flushLegacyContextWarning(){},discardPendingWarnings:function discardPendingWarnings(){}};{var findStrictRoot=function findStrictRoot(fiber){var maybeStrictRoot=null;var node=fiber;while(node!==null){if(node.mode&StrictLegacyMode){maybeStrictRoot=node;}node=node["return"];}return maybeStrictRoot;};var setToSortedString=function setToSortedString(set){var array=[];set.forEach(function(value){array.push(value);});return array.sort().join(', ');};var pendingComponentWillMountWarnings=[];var pendingUNSAFE_ComponentWillMountWarnings=[];var pendingComponentWillReceivePropsWarnings=[];var pendingUNSAFE_ComponentWillReceivePropsWarnings=[];var pendingComponentWillUpdateWarnings=[];var pendingUNSAFE_ComponentWillUpdateWarnings=[];// Tracks components we have already warned about.
var didWarnAboutUnsafeLifecycles=new Set();ReactStrictModeWarnings.recordUnsafeLifecycleWarnings=function(fiber,instance){// Dedupe strategy: Warn once per component.
if(didWarnAboutUnsafeLifecycles.has(fiber.type)){return;}if(typeof instance.componentWillMount==='function'&&// Don't warn about react-lifecycles-compat polyfilled components.
instance.componentWillMount.__suppressDeprecationWarning!==true){pendingComponentWillMountWarnings.push(fiber);}if(fiber.mode&StrictLegacyMode&&typeof instance.UNSAFE_componentWillMount==='function'){pendingUNSAFE_ComponentWillMountWarnings.push(fiber);}if(typeof instance.componentWillReceiveProps==='function'&&instance.componentWillReceiveProps.__suppressDeprecationWarning!==true){pendingComponentWillReceivePropsWarnings.push(fiber);}if(fiber.mode&StrictLegacyMode&&typeof instance.UNSAFE_componentWillReceiveProps==='function'){pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);}if(typeof instance.componentWillUpdate==='function'&&instance.componentWillUpdate.__suppressDeprecationWarning!==true){pendingComponentWillUpdateWarnings.push(fiber);}if(fiber.mode&StrictLegacyMode&&typeof instance.UNSAFE_componentWillUpdate==='function'){pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);}};ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings=function(){// We do an initial pass to gather component names
var componentWillMountUniqueNames=new Set();if(pendingComponentWillMountWarnings.length>0){pendingComponentWillMountWarnings.forEach(function(fiber){componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingComponentWillMountWarnings=[];}var UNSAFE_componentWillMountUniqueNames=new Set();if(pendingUNSAFE_ComponentWillMountWarnings.length>0){pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber){UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingUNSAFE_ComponentWillMountWarnings=[];}var componentWillReceivePropsUniqueNames=new Set();if(pendingComponentWillReceivePropsWarnings.length>0){pendingComponentWillReceivePropsWarnings.forEach(function(fiber){componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingComponentWillReceivePropsWarnings=[];}var UNSAFE_componentWillReceivePropsUniqueNames=new Set();if(pendingUNSAFE_ComponentWillReceivePropsWarnings.length>0){pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber){UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingUNSAFE_ComponentWillReceivePropsWarnings=[];}var componentWillUpdateUniqueNames=new Set();if(pendingComponentWillUpdateWarnings.length>0){pendingComponentWillUpdateWarnings.forEach(function(fiber){componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingComponentWillUpdateWarnings=[];}var UNSAFE_componentWillUpdateUniqueNames=new Set();if(pendingUNSAFE_ComponentWillUpdateWarnings.length>0){pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber){UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber)||'Component');didWarnAboutUnsafeLifecycles.add(fiber.type);});pendingUNSAFE_ComponentWillUpdateWarnings=[];}// Finally, we flush all the warnings
// UNSAFE_ ones before the deprecated ones, since they'll be 'louder'
if(UNSAFE_componentWillMountUniqueNames.size>0){var sortedNames=setToSortedString(UNSAFE_componentWillMountUniqueNames);error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. '+'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n'+'* Move code with side effects to componentDidMount, and set initial state in the constructor.\n'+'\nPlease update the following components: %s',sortedNames);}if(UNSAFE_componentWillReceivePropsUniqueNames.size>0){var _sortedNames=setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended '+'and may indicate bugs in your code. '+'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n'+'* Move data fetching code or side effects to componentDidUpdate.\n'+"* If you're updating state whenever props change, "+'refactor your code to use memoization techniques or move it to '+'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n'+'\nPlease update the following components: %s',_sortedNames);}if(UNSAFE_componentWillUpdateUniqueNames.size>0){var _sortedNames2=setToSortedString(UNSAFE_componentWillUpdateUniqueNames);error('Using UNSAFE_componentWillUpdate in strict mode is not recommended '+'and may indicate bugs in your code. '+'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n'+'* Move data fetching code or side effects to componentDidUpdate.\n'+'\nPlease update the following components: %s',_sortedNames2);}if(componentWillMountUniqueNames.size>0){var _sortedNames3=setToSortedString(componentWillMountUniqueNames);warn('componentWillMount has been renamed, and is not recommended for use. '+'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n'+'* Move code with side effects to componentDidMount, and set initial state in the constructor.\n'+'* Rename componentWillMount to UNSAFE_componentWillMount to suppress '+'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. '+'To rename all deprecated lifecycles to their new names, you can run '+'`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n'+'\nPlease update the following components: %s',_sortedNames3);}if(componentWillReceivePropsUniqueNames.size>0){var _sortedNames4=setToSortedString(componentWillReceivePropsUniqueNames);warn('componentWillReceiveProps has been renamed, and is not recommended for use. '+'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n'+'* Move data fetching code or side effects to componentDidUpdate.\n'+"* If you're updating state whenever props change, refactor your "+'code to use memoization techniques or move it to '+'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n'+'* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress '+'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. '+'To rename all deprecated lifecycles to their new names, you can run '+'`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n'+'\nPlease update the following components: %s',_sortedNames4);}if(componentWillUpdateUniqueNames.size>0){var _sortedNames5=setToSortedString(componentWillUpdateUniqueNames);warn('componentWillUpdate has been renamed, and is not recommended for use. '+'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n'+'* Move data fetching code or side effects to componentDidUpdate.\n'+'* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress '+'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. '+'To rename all deprecated lifecycles to their new names, you can run '+'`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n'+'\nPlease update the following components: %s',_sortedNames5);}};var pendingLegacyContextWarning=new Map();// Tracks components we have already warned about.
var didWarnAboutLegacyContext=new Set();ReactStrictModeWarnings.recordLegacyContextWarning=function(fiber,instance){var strictRoot=findStrictRoot(fiber);if(strictRoot===null){error('Expected to find a StrictMode component in a strict mode tree. '+'This error is likely caused by a bug in React. Please file an issue.');return;}// Dedup strategy: Warn once per component.
if(didWarnAboutLegacyContext.has(fiber.type)){return;}var warningsForRoot=pendingLegacyContextWarning.get(strictRoot);if(fiber.type.contextTypes!=null||fiber.type.childContextTypes!=null||instance!==null&&typeof instance.getChildContext==='function'){if(warningsForRoot===undefined){warningsForRoot=[];pendingLegacyContextWarning.set(strictRoot,warningsForRoot);}warningsForRoot.push(fiber);}};ReactStrictModeWarnings.flushLegacyContextWarning=function(){pendingLegacyContextWarning.forEach(function(fiberArray,strictRoot){if(fiberArray.length===0){return;}var firstFiber=fiberArray[0];var uniqueNames=new Set();fiberArray.forEach(function(fiber){uniqueNames.add(getComponentNameFromFiber(fiber)||'Component');didWarnAboutLegacyContext.add(fiber.type);});var sortedNames=setToSortedString(uniqueNames);try{setCurrentFiber(firstFiber);error('Legacy context API has been detected within a strict-mode tree.'+'\n\nThe old API will be supported in all 16.x releases, but applications '+'using it should migrate to the new version.'+'\n\nPlease update the following components: %s'+'\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context',sortedNames);}finally{resetCurrentFiber();}});};ReactStrictModeWarnings.discardPendingWarnings=function(){pendingComponentWillMountWarnings=[];pendingUNSAFE_ComponentWillMountWarnings=[];pendingComponentWillReceivePropsWarnings=[];pendingUNSAFE_ComponentWillReceivePropsWarnings=[];pendingComponentWillUpdateWarnings=[];pendingUNSAFE_ComponentWillUpdateWarnings=[];pendingLegacyContextWarning=new Map();};}var didWarnAboutMaps;var didWarnAboutGenerators;var didWarnAboutStringRefs;var ownerHasKeyUseWarning;var ownerHasFunctionTypeWarning;var warnForMissingKey=function warnForMissingKey(child,returnFiber){};{didWarnAboutMaps=false;didWarnAboutGenerators=false;didWarnAboutStringRefs={};/**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */ownerHasKeyUseWarning={};ownerHasFunctionTypeWarning={};warnForMissingKey=function warnForMissingKey(child,returnFiber){if(child===null||_typeof(child)!=='object'){return;}if(!child._store||child._store.validated||child.key!=null){return;}if(_typeof(child._store)!=='object'){throw new Error('React Component in warnForMissingKey should have a _store. '+'This error is likely caused by a bug in React. Please file an issue.');}child._store.validated=true;var componentName=getComponentNameFromFiber(returnFiber)||'Component';if(ownerHasKeyUseWarning[componentName]){return;}ownerHasKeyUseWarning[componentName]=true;error('Each child in a list should have a unique '+'"key" prop. See https://reactjs.org/link/warning-keys for '+'more information.');};}function isReactClass(type){return type.prototype&&type.prototype.isReactComponent;}function coerceRef(returnFiber,current,element){var mixedRef=element.ref;if(mixedRef!==null&&typeof mixedRef!=='function'&&_typeof(mixedRef)!=='object'){{// TODO: Clean this up once we turn on the string ref warning for
// everyone, because the strict mode case will no longer be relevant
if((returnFiber.mode&StrictLegacyMode||warnAboutStringRefs)&&// We warn in ReactElement.js if owner and self are equal for string refs
// because these cannot be automatically converted to an arrow function
// using a codemod. Therefore, we don't have to warn about string refs again.
!(element._owner&&element._self&&element._owner.stateNode!==element._self)&&// Will already throw with "Function components cannot have string refs"
!(element._owner&&element._owner.tag!==ClassComponent)&&// Will already warn with "Function components cannot be given refs"
!(typeof element.type==='function'&&!isReactClass(element.type))&&// Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
element._owner){var componentName=getComponentNameFromFiber(returnFiber)||'Component';if(!didWarnAboutStringRefs[componentName]){{error('Component "%s" contains the string ref "%s". Support for string refs '+'will be removed in a future major release. We recommend using '+'useRef() or createRef() instead. '+'Learn more about using refs safely here: '+'https://reactjs.org/link/strict-mode-string-ref',componentName,mixedRef);}didWarnAboutStringRefs[componentName]=true;}}}if(element._owner){var owner=element._owner;var inst;if(owner){var ownerFiber=owner;if(ownerFiber.tag!==ClassComponent){throw new Error('Function components cannot have string refs. '+'We recommend using useRef() instead. '+'Learn more about using refs safely here: '+'https://reactjs.org/link/strict-mode-string-ref');}inst=ownerFiber.stateNode;}if(!inst){throw new Error("Missing owner for string ref "+mixedRef+". This error is likely caused by a "+'bug in React. Please file an issue.');}// Assigning this to a const so Flow knows it won't change in the closure
var resolvedInst=inst;{checkPropStringCoercion(mixedRef,'ref');}var stringRef=''+mixedRef;// Check if previous string ref matches new string ref
if(current!==null&&current.ref!==null&&typeof current.ref==='function'&&current.ref._stringRef===stringRef){return current.ref;}var ref=function ref(value){var refs=resolvedInst.refs;if(value===null){delete refs[stringRef];}else{refs[stringRef]=value;}};ref._stringRef=stringRef;return ref;}else{if(typeof mixedRef!=='string'){throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');}if(!element._owner){throw new Error("Element ref was specified as a string ("+mixedRef+") but no owner was set. This could happen for one of"+' the following reasons:\n'+'1. You may be adding a ref to a function component\n'+"2. You may be adding a ref to a component that was not created inside a component's render method\n"+'3. You have multiple copies of React loaded\n'+'See https://reactjs.org/link/refs-must-have-owner for more information.');}}}return mixedRef;}function throwOnInvalidObjectType(returnFiber,newChild){var childString=Object.prototype.toString.call(newChild);throw new Error("Objects are not valid as a React child (found: "+(childString==='[object Object]'?'object with keys {'+Object.keys(newChild).join(', ')+'}':childString)+"). "+'If you meant to render a collection of children, use an array '+'instead.');}function warnOnFunctionType(returnFiber){{var componentName=getComponentNameFromFiber(returnFiber)||'Component';if(ownerHasFunctionTypeWarning[componentName]){return;}ownerHasFunctionTypeWarning[componentName]=true;error('Functions are not valid as a React child. This may happen if '+'you return a Component instead of <Component /> from render. '+'Or maybe you meant to call this function rather than return it.');}}function resolveLazy(lazyType){var payload=lazyType._payload;var init=lazyType._init;return init(payload);}// This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.
function ChildReconciler(shouldTrackSideEffects){function deleteChild(returnFiber,childToDelete){if(!shouldTrackSideEffects){// Noop.
return;}var deletions=returnFiber.deletions;if(deletions===null){returnFiber.deletions=[childToDelete];returnFiber.flags|=ChildDeletion;}else{deletions.push(childToDelete);}}function deleteRemainingChildren(returnFiber,currentFirstChild){if(!shouldTrackSideEffects){// Noop.
return null;}// TODO: For the shouldClone case, this could be micro-optimized a bit by
// assuming that after the first child we've already added everything.
var childToDelete=currentFirstChild;while(childToDelete!==null){deleteChild(returnFiber,childToDelete);childToDelete=childToDelete.sibling;}return null;}function mapRemainingChildren(returnFiber,currentFirstChild){// Add the remaining children to a temporary map so that we can find them by
// keys quickly. Implicit (null) keys get added to this set with their index
// instead.
var existingChildren=new Map();var existingChild=currentFirstChild;while(existingChild!==null){if(existingChild.key!==null){existingChildren.set(existingChild.key,existingChild);}else{existingChildren.set(existingChild.index,existingChild);}existingChild=existingChild.sibling;}return existingChildren;}function useFiber(fiber,pendingProps){// We currently set sibling to null and index to 0 here because it is easy
// to forget to do before returning it. E.g. for the single child case.
var clone=createWorkInProgress(fiber,pendingProps);clone.index=0;clone.sibling=null;return clone;}function placeChild(newFiber,lastPlacedIndex,newIndex){newFiber.index=newIndex;if(!shouldTrackSideEffects){// During hydration, the useId algorithm needs to know which fibers are
// part of a list of children (arrays, iterators).
newFiber.flags|=Forked;return lastPlacedIndex;}var current=newFiber.alternate;if(current!==null){var oldIndex=current.index;if(oldIndex<lastPlacedIndex){// This is a move.
newFiber.flags|=Placement;return lastPlacedIndex;}else{// This item can stay in place.
return oldIndex;}}else{// This is an insertion.
newFiber.flags|=Placement;return lastPlacedIndex;}}function placeSingleChild(newFiber){// This is simpler for the single child case. We only need to do a
// placement for inserting new children.
if(shouldTrackSideEffects&&newFiber.alternate===null){newFiber.flags|=Placement;}return newFiber;}function updateTextNode(returnFiber,current,textContent,lanes){if(current===null||current.tag!==HostText){// Insert
var created=createFiberFromText(textContent,returnFiber.mode,lanes);created["return"]=returnFiber;return created;}else{// Update
var existing=useFiber(current,textContent);existing["return"]=returnFiber;return existing;}}function updateElement(returnFiber,current,element,lanes){var elementType=element.type;if(elementType===REACT_FRAGMENT_TYPE){return updateFragment(returnFiber,current,element.props.children,lanes,element.key);}if(current!==null){if(current.elementType===elementType||// Keep this check inline so it only runs on the false path:
isCompatibleFamilyForHotReloading(current,element)||// Lazy types should reconcile their resolved type.
// We need to do this after the Hot Reloading check above,
// because hot reloading has different semantics than prod because
// it doesn't resuspend. So we can't let the call below suspend.
_typeof(elementType)==='object'&&elementType!==null&&elementType.$$typeof===REACT_LAZY_TYPE&&resolveLazy(elementType)===current.type){// Move based on index
var existing=useFiber(current,element.props);existing.ref=coerceRef(returnFiber,current,element);existing["return"]=returnFiber;{existing._debugSource=element._source;existing._debugOwner=element._owner;}return existing;}}// Insert
var created=createFiberFromElement(element,returnFiber.mode,lanes);created.ref=coerceRef(returnFiber,current,element);created["return"]=returnFiber;return created;}function updatePortal(returnFiber,current,portal,lanes){if(current===null||current.tag!==HostPortal||current.stateNode.containerInfo!==portal.containerInfo||current.stateNode.implementation!==portal.implementation){// Insert
var created=createFiberFromPortal(portal,returnFiber.mode,lanes);created["return"]=returnFiber;return created;}else{// Update
var existing=useFiber(current,portal.children||[]);existing["return"]=returnFiber;return existing;}}function updateFragment(returnFiber,current,fragment,lanes,key){if(current===null||current.tag!==Fragment){// Insert
var created=createFiberFromFragment(fragment,returnFiber.mode,lanes,key);created["return"]=returnFiber;return created;}else{// Update
var existing=useFiber(current,fragment);existing["return"]=returnFiber;return existing;}}function createChild(returnFiber,newChild,lanes){if(typeof newChild==='string'&&newChild!==''||typeof newChild==='number'){// Text nodes don't have keys. If the previous node is implicitly keyed
// we can continue to replace it without aborting even if it is not a text
// node.
var created=createFiberFromText(''+newChild,returnFiber.mode,lanes);created["return"]=returnFiber;return created;}if(_typeof(newChild)==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{var _created=createFiberFromElement(newChild,returnFiber.mode,lanes);_created.ref=coerceRef(returnFiber,null,newChild);_created["return"]=returnFiber;return _created;}case REACT_PORTAL_TYPE:{var _created2=createFiberFromPortal(newChild,returnFiber.mode,lanes);_created2["return"]=returnFiber;return _created2;}case REACT_LAZY_TYPE:{var payload=newChild._payload;var init=newChild._init;return createChild(returnFiber,init(payload),lanes);}}if(isArray(newChild)||getIteratorFn(newChild)){var _created3=createFiberFromFragment(newChild,returnFiber.mode,lanes,null);_created3["return"]=returnFiber;return _created3;}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType(returnFiber);}}return null;}function updateSlot(returnFiber,oldFiber,newChild,lanes){// Update the fiber if the keys match, otherwise return null.
var key=oldFiber!==null?oldFiber.key:null;if(typeof newChild==='string'&&newChild!==''||typeof newChild==='number'){// Text nodes don't have keys. If the previous node is implicitly keyed
// we can continue to replace it without aborting even if it is not a text
// node.
if(key!==null){return null;}return updateTextNode(returnFiber,oldFiber,''+newChild,lanes);}if(_typeof(newChild)==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{if(newChild.key===key){return updateElement(returnFiber,oldFiber,newChild,lanes);}else{return null;}}case REACT_PORTAL_TYPE:{if(newChild.key===key){return updatePortal(returnFiber,oldFiber,newChild,lanes);}else{return null;}}case REACT_LAZY_TYPE:{var payload=newChild._payload;var init=newChild._init;return updateSlot(returnFiber,oldFiber,init(payload),lanes);}}if(isArray(newChild)||getIteratorFn(newChild)){if(key!==null){return null;}return updateFragment(returnFiber,oldFiber,newChild,lanes,null);}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType(returnFiber);}}return null;}function updateFromMap(existingChildren,returnFiber,newIdx,newChild,lanes){if(typeof newChild==='string'&&newChild!==''||typeof newChild==='number'){// Text nodes don't have keys, so we neither have to check the old nor
// new node for the key. If both are text nodes, they match.
var matchedFiber=existingChildren.get(newIdx)||null;return updateTextNode(returnFiber,matchedFiber,''+newChild,lanes);}if(_typeof(newChild)==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:{var _matchedFiber=existingChildren.get(newChild.key===null?newIdx:newChild.key)||null;return updateElement(returnFiber,_matchedFiber,newChild,lanes);}case REACT_PORTAL_TYPE:{var _matchedFiber2=existingChildren.get(newChild.key===null?newIdx:newChild.key)||null;return updatePortal(returnFiber,_matchedFiber2,newChild,lanes);}case REACT_LAZY_TYPE:var payload=newChild._payload;var init=newChild._init;return updateFromMap(existingChildren,returnFiber,newIdx,init(payload),lanes);}if(isArray(newChild)||getIteratorFn(newChild)){var _matchedFiber3=existingChildren.get(newIdx)||null;return updateFragment(returnFiber,_matchedFiber3,newChild,lanes,null);}throwOnInvalidObjectType(returnFiber,newChild);}{if(typeof newChild==='function'){warnOnFunctionType(returnFiber);}}return null;}/**
   * Warns if there is a duplicate or missing key
   */function warnOnInvalidKey(child,knownKeys,returnFiber){{if(_typeof(child)!=='object'||child===null){return knownKeys;}switch(child.$$typeof){case REACT_ELEMENT_TYPE:case REACT_PORTAL_TYPE:warnForMissingKey(child,returnFiber);var key=child.key;if(typeof key!=='string'){break;}if(knownKeys===null){knownKeys=new Set();knownKeys.add(key);break;}if(!knownKeys.has(key)){knownKeys.add(key);break;}error('Encountered two children with the same key, `%s`. '+'Keys should be unique so that components maintain their identity '+'across updates. Non-unique keys may cause children to be '+'duplicated and/or omitted — the behavior is unsupported and '+'could change in a future version.',key);break;case REACT_LAZY_TYPE:var payload=child._payload;var init=child._init;warnOnInvalidKey(init(payload),knownKeys,returnFiber);break;}}return knownKeys;}function reconcileChildrenArray(returnFiber,currentFirstChild,newChildren,lanes){// This algorithm can't optimize by searching from both ends since we
// don't have backpointers on fibers. I'm trying to see how far we can get
// with that model. If it ends up not being worth the tradeoffs, we can
// add it later.
// Even with a two ended optimization, we'd want to optimize for the case
// where there are few changes and brute force the comparison instead of
// going for the Map. It'd like to explore hitting that path first in
// forward-only mode and only go for the Map once we notice that we need
// lots of look ahead. This doesn't handle reversal as well as two ended
// search but that's unusual. Besides, for the two ended optimization to
// work on Iterables, we'd need to copy the whole set.
// In this first iteration, we'll just live with hitting the bad case
// (adding everything to a Map) in for every insert/move.
// If you change this code, also update reconcileChildrenIterator() which
// uses the same algorithm.
{// First, validate keys.
var knownKeys=null;for(var i=0;i<newChildren.length;i++){var child=newChildren[i];knownKeys=warnOnInvalidKey(child,knownKeys,returnFiber);}}var resultingFirstChild=null;var previousNewFiber=null;var oldFiber=currentFirstChild;var lastPlacedIndex=0;var newIdx=0;var nextOldFiber=null;for(;oldFiber!==null&&newIdx<newChildren.length;newIdx++){if(oldFiber.index>newIdx){nextOldFiber=oldFiber;oldFiber=null;}else{nextOldFiber=oldFiber.sibling;}var newFiber=updateSlot(returnFiber,oldFiber,newChildren[newIdx],lanes);if(newFiber===null){// TODO: This breaks on empty slots like null children. That's
// unfortunate because it triggers the slow path all the time. We need
// a better way to communicate whether this was a miss or null,
// boolean, undefined, etc.
if(oldFiber===null){oldFiber=nextOldFiber;}break;}if(shouldTrackSideEffects){if(oldFiber&&newFiber.alternate===null){// We matched the slot, but we didn't reuse the existing fiber, so we
// need to delete the existing child.
deleteChild(returnFiber,oldFiber);}}lastPlacedIndex=placeChild(newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=newFiber;}else{// TODO: Defer siblings if we're not at the right index for this slot.
// I.e. if we had null values before, then we want to defer this
// for each null value. However, we also don't want to call updateSlot
// with the previous one.
previousNewFiber.sibling=newFiber;}previousNewFiber=newFiber;oldFiber=nextOldFiber;}if(newIdx===newChildren.length){// We've reached the end of the new children. We can delete the rest.
deleteRemainingChildren(returnFiber,oldFiber);if(getIsHydrating()){var numberOfForks=newIdx;pushTreeFork(returnFiber,numberOfForks);}return resultingFirstChild;}if(oldFiber===null){// If we don't have any more existing children we can choose a fast path
// since the rest will all be insertions.
for(;newIdx<newChildren.length;newIdx++){var _newFiber=createChild(returnFiber,newChildren[newIdx],lanes);if(_newFiber===null){continue;}lastPlacedIndex=placeChild(_newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=_newFiber;}else{previousNewFiber.sibling=_newFiber;}previousNewFiber=_newFiber;}if(getIsHydrating()){var _numberOfForks=newIdx;pushTreeFork(returnFiber,_numberOfForks);}return resultingFirstChild;}// Add all children to a key map for quick lookups.
var existingChildren=mapRemainingChildren(returnFiber,oldFiber);// Keep scanning and use the map to restore deleted items as moves.
for(;newIdx<newChildren.length;newIdx++){var _newFiber2=updateFromMap(existingChildren,returnFiber,newIdx,newChildren[newIdx],lanes);if(_newFiber2!==null){if(shouldTrackSideEffects){if(_newFiber2.alternate!==null){// The new fiber is a work in progress, but if there exists a
// current, that means that we reused the fiber. We need to delete
// it from the child list so that we don't add it to the deletion
// list.
existingChildren["delete"](_newFiber2.key===null?newIdx:_newFiber2.key);}}lastPlacedIndex=placeChild(_newFiber2,lastPlacedIndex,newIdx);if(previousNewFiber===null){resultingFirstChild=_newFiber2;}else{previousNewFiber.sibling=_newFiber2;}previousNewFiber=_newFiber2;}}if(shouldTrackSideEffects){// Any existing children that weren't consumed above were deleted. We need
// to add them to the deletion list.
existingChildren.forEach(function(child){return deleteChild(returnFiber,child);});}if(getIsHydrating()){var _numberOfForks2=newIdx;pushTreeFork(returnFiber,_numberOfForks2);}return resultingFirstChild;}function reconcileChildrenIterator(returnFiber,currentFirstChild,newChildrenIterable,lanes){// This is the same implementation as reconcileChildrenArray(),
// but using the iterator instead.
var iteratorFn=getIteratorFn(newChildrenIterable);if(typeof iteratorFn!=='function'){throw new Error('An object is not an iterable. This error is likely caused by a bug in '+'React. Please file an issue.');}{// We don't support rendering Generators because it's a mutation.
// See https://github.com/facebook/react/issues/12995
if(typeof Symbol==='function'&&// $FlowFixMe Flow doesn't know about toStringTag
newChildrenIterable[Symbol.toStringTag]==='Generator'){if(!didWarnAboutGenerators){error('Using Generators as children is unsupported and will likely yield '+'unexpected results because enumerating a generator mutates it. '+'You may convert it to an array with `Array.from()` or the '+'`[...spread]` operator before rendering. Keep in mind '+'you might need to polyfill these features for older browsers.');}didWarnAboutGenerators=true;}// Warn about using Maps as children
if(newChildrenIterable.entries===iteratorFn){if(!didWarnAboutMaps){error('Using Maps as children is not supported. '+'Use an array of keyed ReactElements instead.');}didWarnAboutMaps=true;}// First, validate keys.
// We'll get a different iterator later for the main pass.
var _newChildren=iteratorFn.call(newChildrenIterable);if(_newChildren){var knownKeys=null;var _step=_newChildren.next();for(;!_step.done;_step=_newChildren.next()){var child=_step.value;knownKeys=warnOnInvalidKey(child,knownKeys,returnFiber);}}}var newChildren=iteratorFn.call(newChildrenIterable);if(newChildren==null){throw new Error('An iterable object provided no iterator.');}var resultingFirstChild=null;var previousNewFiber=null;var oldFiber=currentFirstChild;var lastPlacedIndex=0;var newIdx=0;var nextOldFiber=null;var step=newChildren.next();for(;oldFiber!==null&&!step.done;newIdx++,step=newChildren.next()){if(oldFiber.index>newIdx){nextOldFiber=oldFiber;oldFiber=null;}else{nextOldFiber=oldFiber.sibling;}var newFiber=updateSlot(returnFiber,oldFiber,step.value,lanes);if(newFiber===null){// TODO: This breaks on empty slots like null children. That's
// unfortunate because it triggers the slow path all the time. We need
// a better way to communicate whether this was a miss or null,
// boolean, undefined, etc.
if(oldFiber===null){oldFiber=nextOldFiber;}break;}if(shouldTrackSideEffects){if(oldFiber&&newFiber.alternate===null){// We matched the slot, but we didn't reuse the existing fiber, so we
// need to delete the existing child.
deleteChild(returnFiber,oldFiber);}}lastPlacedIndex=placeChild(newFiber,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=newFiber;}else{// TODO: Defer siblings if we're not at the right index for this slot.
// I.e. if we had null values before, then we want to defer this
// for each null value. However, we also don't want to call updateSlot
// with the previous one.
previousNewFiber.sibling=newFiber;}previousNewFiber=newFiber;oldFiber=nextOldFiber;}if(step.done){// We've reached the end of the new children. We can delete the rest.
deleteRemainingChildren(returnFiber,oldFiber);if(getIsHydrating()){var numberOfForks=newIdx;pushTreeFork(returnFiber,numberOfForks);}return resultingFirstChild;}if(oldFiber===null){// If we don't have any more existing children we can choose a fast path
// since the rest will all be insertions.
for(;!step.done;newIdx++,step=newChildren.next()){var _newFiber3=createChild(returnFiber,step.value,lanes);if(_newFiber3===null){continue;}lastPlacedIndex=placeChild(_newFiber3,lastPlacedIndex,newIdx);if(previousNewFiber===null){// TODO: Move out of the loop. This only happens for the first run.
resultingFirstChild=_newFiber3;}else{previousNewFiber.sibling=_newFiber3;}previousNewFiber=_newFiber3;}if(getIsHydrating()){var _numberOfForks3=newIdx;pushTreeFork(returnFiber,_numberOfForks3);}return resultingFirstChild;}// Add all children to a key map for quick lookups.
var existingChildren=mapRemainingChildren(returnFiber,oldFiber);// Keep scanning and use the map to restore deleted items as moves.
for(;!step.done;newIdx++,step=newChildren.next()){var _newFiber4=updateFromMap(existingChildren,returnFiber,newIdx,step.value,lanes);if(_newFiber4!==null){if(shouldTrackSideEffects){if(_newFiber4.alternate!==null){// The new fiber is a work in progress, but if there exists a
// current, that means that we reused the fiber. We need to delete
// it from the child list so that we don't add it to the deletion
// list.
existingChildren["delete"](_newFiber4.key===null?newIdx:_newFiber4.key);}}lastPlacedIndex=placeChild(_newFiber4,lastPlacedIndex,newIdx);if(previousNewFiber===null){resultingFirstChild=_newFiber4;}else{previousNewFiber.sibling=_newFiber4;}previousNewFiber=_newFiber4;}}if(shouldTrackSideEffects){// Any existing children that weren't consumed above were deleted. We need
// to add them to the deletion list.
existingChildren.forEach(function(child){return deleteChild(returnFiber,child);});}if(getIsHydrating()){var _numberOfForks4=newIdx;pushTreeFork(returnFiber,_numberOfForks4);}return resultingFirstChild;}function reconcileSingleTextNode(returnFiber,currentFirstChild,textContent,lanes){// There's no need to check for keys on text nodes since we don't have a
// way to define them.
if(currentFirstChild!==null&&currentFirstChild.tag===HostText){// We already have an existing node so let's just update it and delete
// the rest.
deleteRemainingChildren(returnFiber,currentFirstChild.sibling);var existing=useFiber(currentFirstChild,textContent);existing["return"]=returnFiber;return existing;}// The existing first child is not a text node so we need to create one
// and delete the existing ones.
deleteRemainingChildren(returnFiber,currentFirstChild);var created=createFiberFromText(textContent,returnFiber.mode,lanes);created["return"]=returnFiber;return created;}function reconcileSingleElement(returnFiber,currentFirstChild,element,lanes){var key=element.key;var child=currentFirstChild;while(child!==null){// TODO: If key === null and child.key === null, then this only applies to
// the first item in the list.
if(child.key===key){var elementType=element.type;if(elementType===REACT_FRAGMENT_TYPE){if(child.tag===Fragment){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,element.props.children);existing["return"]=returnFiber;{existing._debugSource=element._source;existing._debugOwner=element._owner;}return existing;}}else{if(child.elementType===elementType||// Keep this check inline so it only runs on the false path:
isCompatibleFamilyForHotReloading(child,element)||// Lazy types should reconcile their resolved type.
// We need to do this after the Hot Reloading check above,
// because hot reloading has different semantics than prod because
// it doesn't resuspend. So we can't let the call below suspend.
_typeof(elementType)==='object'&&elementType!==null&&elementType.$$typeof===REACT_LAZY_TYPE&&resolveLazy(elementType)===child.type){deleteRemainingChildren(returnFiber,child.sibling);var _existing=useFiber(child,element.props);_existing.ref=coerceRef(returnFiber,child,element);_existing["return"]=returnFiber;{_existing._debugSource=element._source;_existing._debugOwner=element._owner;}return _existing;}}// Didn't match.
deleteRemainingChildren(returnFiber,child);break;}else{deleteChild(returnFiber,child);}child=child.sibling;}if(element.type===REACT_FRAGMENT_TYPE){var created=createFiberFromFragment(element.props.children,returnFiber.mode,lanes,element.key);created["return"]=returnFiber;return created;}else{var _created4=createFiberFromElement(element,returnFiber.mode,lanes);_created4.ref=coerceRef(returnFiber,currentFirstChild,element);_created4["return"]=returnFiber;return _created4;}}function reconcileSinglePortal(returnFiber,currentFirstChild,portal,lanes){var key=portal.key;var child=currentFirstChild;while(child!==null){// TODO: If key === null and child.key === null, then this only applies to
// the first item in the list.
if(child.key===key){if(child.tag===HostPortal&&child.stateNode.containerInfo===portal.containerInfo&&child.stateNode.implementation===portal.implementation){deleteRemainingChildren(returnFiber,child.sibling);var existing=useFiber(child,portal.children||[]);existing["return"]=returnFiber;return existing;}else{deleteRemainingChildren(returnFiber,child);break;}}else{deleteChild(returnFiber,child);}child=child.sibling;}var created=createFiberFromPortal(portal,returnFiber.mode,lanes);created["return"]=returnFiber;return created;}// This API will tag the children with the side-effect of the reconciliation
// itself. They will be added to the side-effect list as we pass through the
// children and the parent.
function reconcileChildFibers(returnFiber,currentFirstChild,newChild,lanes){// This function is not recursive.
// If the top level item is an array, we treat it as a set of children,
// not as a fragment. Nested arrays on the other hand will be treated as
// fragment nodes. Recursion happens at the normal flow.
// Handle top level unkeyed fragments as if they were arrays.
// This leads to an ambiguity between <>{[...]}</> and <>...</>.
// We treat the ambiguous cases above the same.
var isUnkeyedTopLevelFragment=_typeof(newChild)==='object'&&newChild!==null&&newChild.type===REACT_FRAGMENT_TYPE&&newChild.key===null;if(isUnkeyedTopLevelFragment){newChild=newChild.props.children;}// Handle object types
if(_typeof(newChild)==='object'&&newChild!==null){switch(newChild.$$typeof){case REACT_ELEMENT_TYPE:return placeSingleChild(reconcileSingleElement(returnFiber,currentFirstChild,newChild,lanes));case REACT_PORTAL_TYPE:return placeSingleChild(reconcileSinglePortal(returnFiber,currentFirstChild,newChild,lanes));case REACT_LAZY_TYPE:var payload=newChild._payload;var init=newChild._init;// TODO: This function is supposed to be non-recursive.
return reconcileChildFibers(returnFiber,currentFirstChild,init(payload),lanes);}if(isArray(newChild)){return reconcileChildrenArray(returnFiber,currentFirstChild,newChild,lanes);}if(getIteratorFn(newChild)){return reconcileChildrenIterator(returnFiber,currentFirstChild,newChild,lanes);}throwOnInvalidObjectType(returnFiber,newChild);}if(typeof newChild==='string'&&newChild!==''||typeof newChild==='number'){return placeSingleChild(reconcileSingleTextNode(returnFiber,currentFirstChild,''+newChild,lanes));}{if(typeof newChild==='function'){warnOnFunctionType(returnFiber);}}// Remaining cases are all treated as empty.
return deleteRemainingChildren(returnFiber,currentFirstChild);}return reconcileChildFibers;}var reconcileChildFibers=ChildReconciler(true);var mountChildFibers=ChildReconciler(false);function cloneChildFibers(current,workInProgress){if(current!==null&&workInProgress.child!==current.child){throw new Error('Resuming work not yet implemented.');}if(workInProgress.child===null){return;}var currentChild=workInProgress.child;var newChild=createWorkInProgress(currentChild,currentChild.pendingProps);workInProgress.child=newChild;newChild["return"]=workInProgress;while(currentChild.sibling!==null){currentChild=currentChild.sibling;newChild=newChild.sibling=createWorkInProgress(currentChild,currentChild.pendingProps);newChild["return"]=workInProgress;}newChild.sibling=null;}// Reset a workInProgress child set to prepare it for a second pass.
function resetChildFibers(workInProgress,lanes){var child=workInProgress.child;while(child!==null){resetWorkInProgress(child,lanes);child=child.sibling;}}var valueCursor=createCursor(null);var rendererSigil;{// Use this to detect multiple renderers using the same context
rendererSigil={};}var currentlyRenderingFiber=null;var lastContextDependency=null;var lastFullyObservedContext=null;var isDisallowedContextReadInDEV=false;function resetContextDependencies(){// This is called right before React yields execution, to ensure `readContext`
// cannot be called outside the render phase.
currentlyRenderingFiber=null;lastContextDependency=null;lastFullyObservedContext=null;{isDisallowedContextReadInDEV=false;}}function enterDisallowedContextReadInDEV(){{isDisallowedContextReadInDEV=true;}}function exitDisallowedContextReadInDEV(){{isDisallowedContextReadInDEV=false;}}function pushProvider(providerFiber,context,nextValue){{push(valueCursor,context._currentValue,providerFiber);context._currentValue=nextValue;{if(context._currentRenderer!==undefined&&context._currentRenderer!==null&&context._currentRenderer!==rendererSigil){error('Detected multiple renderers concurrently rendering the '+'same context provider. This is currently unsupported.');}context._currentRenderer=rendererSigil;}}}function popProvider(context,providerFiber){var currentValue=valueCursor.current;pop(valueCursor,providerFiber);{{context._currentValue=currentValue;}}}function scheduleContextWorkOnParentPath(parent,renderLanes,propagationRoot){// Update the child lanes of all the ancestors, including the alternates.
var node=parent;while(node!==null){var alternate=node.alternate;if(!isSubsetOfLanes(node.childLanes,renderLanes)){node.childLanes=mergeLanes(node.childLanes,renderLanes);if(alternate!==null){alternate.childLanes=mergeLanes(alternate.childLanes,renderLanes);}}else if(alternate!==null&&!isSubsetOfLanes(alternate.childLanes,renderLanes)){alternate.childLanes=mergeLanes(alternate.childLanes,renderLanes);}if(node===propagationRoot){break;}node=node["return"];}{if(node!==propagationRoot){error('Expected to find the propagation root when scheduling context work. '+'This error is likely caused by a bug in React. Please file an issue.');}}}function propagateContextChange(workInProgress,context,renderLanes){{propagateContextChange_eager(workInProgress,context,renderLanes);}}function propagateContextChange_eager(workInProgress,context,renderLanes){var fiber=workInProgress.child;if(fiber!==null){// Set the return pointer of the child to the work-in-progress fiber.
fiber["return"]=workInProgress;}while(fiber!==null){var nextFiber=void 0;// Visit this fiber.
var list=fiber.dependencies;if(list!==null){nextFiber=fiber.child;var dependency=list.firstContext;while(dependency!==null){// Check if the context matches.
if(dependency.context===context){// Match! Schedule an update on this fiber.
if(fiber.tag===ClassComponent){// Schedule a force update on the work-in-progress.
var lane=pickArbitraryLane(renderLanes);var update=createUpdate(NoTimestamp,lane);update.tag=ForceUpdate;// TODO: Because we don't have a work-in-progress, this will add the
// update to the current fiber, too, which means it will persist even if
// this render is thrown away. Since it's a race condition, not sure it's
// worth fixing.
// Inlined `enqueueUpdate` to remove interleaved update check
var updateQueue=fiber.updateQueue;if(updateQueue===null);else{var sharedQueue=updateQueue.shared;var pending=sharedQueue.pending;if(pending===null){// This is the first update. Create a circular list.
update.next=update;}else{update.next=pending.next;pending.next=update;}sharedQueue.pending=update;}}fiber.lanes=mergeLanes(fiber.lanes,renderLanes);var alternate=fiber.alternate;if(alternate!==null){alternate.lanes=mergeLanes(alternate.lanes,renderLanes);}scheduleContextWorkOnParentPath(fiber["return"],renderLanes,workInProgress);// Mark the updated lanes on the list, too.
list.lanes=mergeLanes(list.lanes,renderLanes);// Since we already found a match, we can stop traversing the
// dependency list.
break;}dependency=dependency.next;}}else if(fiber.tag===ContextProvider){// Don't scan deeper if this is a matching provider
nextFiber=fiber.type===workInProgress.type?null:fiber.child;}else if(fiber.tag===DehydratedFragment){// If a dehydrated suspense boundary is in this subtree, we don't know
// if it will have any context consumers in it. The best we can do is
// mark it as having updates.
var parentSuspense=fiber["return"];if(parentSuspense===null){throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');}parentSuspense.lanes=mergeLanes(parentSuspense.lanes,renderLanes);var _alternate=parentSuspense.alternate;if(_alternate!==null){_alternate.lanes=mergeLanes(_alternate.lanes,renderLanes);}// This is intentionally passing this fiber as the parent
// because we want to schedule this fiber as having work
// on its children. We'll use the childLanes on
// this fiber to indicate that a context has changed.
scheduleContextWorkOnParentPath(parentSuspense,renderLanes,workInProgress);nextFiber=fiber.sibling;}else{// Traverse down.
nextFiber=fiber.child;}if(nextFiber!==null){// Set the return pointer of the child to the work-in-progress fiber.
nextFiber["return"]=fiber;}else{// No child. Traverse to next sibling.
nextFiber=fiber;while(nextFiber!==null){if(nextFiber===workInProgress){// We're back to the root of this subtree. Exit.
nextFiber=null;break;}var sibling=nextFiber.sibling;if(sibling!==null){// Set the return pointer of the sibling to the work-in-progress fiber.
sibling["return"]=nextFiber["return"];nextFiber=sibling;break;}// No more siblings. Traverse up.
nextFiber=nextFiber["return"];}}fiber=nextFiber;}}function prepareToReadContext(workInProgress,renderLanes){currentlyRenderingFiber=workInProgress;lastContextDependency=null;lastFullyObservedContext=null;var dependencies=workInProgress.dependencies;if(dependencies!==null){{var firstContext=dependencies.firstContext;if(firstContext!==null){if(includesSomeLane(dependencies.lanes,renderLanes)){// Context list has a pending update. Mark that this fiber performed work.
markWorkInProgressReceivedUpdate();}// Reset the work-in-progress list
dependencies.firstContext=null;}}}}function _readContext(context){{// This warning would fire if you read context inside a Hook like useMemo.
// Unlike the class check below, it's not enforced in production for perf.
if(isDisallowedContextReadInDEV){error('Context can only be read while React is rendering. '+'In classes, you can read it in the render method or getDerivedStateFromProps. '+'In function components, you can read it directly in the function body, but not '+'inside Hooks like useReducer() or useMemo().');}}var value=context._currentValue;if(lastFullyObservedContext===context);else{var contextItem={context:context,memoizedValue:value,next:null};if(lastContextDependency===null){if(currentlyRenderingFiber===null){throw new Error('Context can only be read while React is rendering. '+'In classes, you can read it in the render method or getDerivedStateFromProps. '+'In function components, you can read it directly in the function body, but not '+'inside Hooks like useReducer() or useMemo().');}// This is the first dependency for this component. Create a new list.
lastContextDependency=contextItem;currentlyRenderingFiber.dependencies={lanes:NoLanes,firstContext:contextItem};}else{// Append a new context item.
lastContextDependency=lastContextDependency.next=contextItem;}}return value;}// render. When this render exits, either because it finishes or because it is
// interrupted, the interleaved updates will be transferred onto the main part
// of the queue.
var concurrentQueues=null;function pushConcurrentUpdateQueue(queue){if(concurrentQueues===null){concurrentQueues=[queue];}else{concurrentQueues.push(queue);}}function finishQueueingConcurrentUpdates(){// Transfer the interleaved updates onto the main queue. Each queue has a
// `pending` field and an `interleaved` field. When they are not null, they
// point to the last node in a circular linked list. We need to append the
// interleaved list to the end of the pending list by joining them into a
// single, circular list.
if(concurrentQueues!==null){for(var i=0;i<concurrentQueues.length;i++){var queue=concurrentQueues[i];var lastInterleavedUpdate=queue.interleaved;if(lastInterleavedUpdate!==null){queue.interleaved=null;var firstInterleavedUpdate=lastInterleavedUpdate.next;var lastPendingUpdate=queue.pending;if(lastPendingUpdate!==null){var firstPendingUpdate=lastPendingUpdate.next;lastPendingUpdate.next=firstInterleavedUpdate;lastInterleavedUpdate.next=firstPendingUpdate;}queue.pending=lastInterleavedUpdate;}}concurrentQueues=null;}}function enqueueConcurrentHookUpdate(fiber,queue,update,lane){var interleaved=queue.interleaved;if(interleaved===null){// This is the first update. Create a circular list.
update.next=update;// At the end of the current render, this queue's interleaved updates will
// be transferred to the pending queue.
pushConcurrentUpdateQueue(queue);}else{update.next=interleaved.next;interleaved.next=update;}queue.interleaved=update;return markUpdateLaneFromFiberToRoot(fiber,lane);}function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber,queue,update,lane){var interleaved=queue.interleaved;if(interleaved===null){// This is the first update. Create a circular list.
update.next=update;// At the end of the current render, this queue's interleaved updates will
// be transferred to the pending queue.
pushConcurrentUpdateQueue(queue);}else{update.next=interleaved.next;interleaved.next=update;}queue.interleaved=update;}function enqueueConcurrentClassUpdate(fiber,queue,update,lane){var interleaved=queue.interleaved;if(interleaved===null){// This is the first update. Create a circular list.
update.next=update;// At the end of the current render, this queue's interleaved updates will
// be transferred to the pending queue.
pushConcurrentUpdateQueue(queue);}else{update.next=interleaved.next;interleaved.next=update;}queue.interleaved=update;return markUpdateLaneFromFiberToRoot(fiber,lane);}function enqueueConcurrentRenderForLane(fiber,lane){return markUpdateLaneFromFiberToRoot(fiber,lane);}// Calling this function outside this module should only be done for backwards
// compatibility and should always be accompanied by a warning.
var unsafe_markUpdateLaneFromFiberToRoot=markUpdateLaneFromFiberToRoot;function markUpdateLaneFromFiberToRoot(sourceFiber,lane){// Update the source fiber's lanes
sourceFiber.lanes=mergeLanes(sourceFiber.lanes,lane);var alternate=sourceFiber.alternate;if(alternate!==null){alternate.lanes=mergeLanes(alternate.lanes,lane);}{if(alternate===null&&(sourceFiber.flags&(Placement|Hydrating))!==NoFlags){warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);}}// Walk the parent path to the root and update the child lanes.
var node=sourceFiber;var parent=sourceFiber["return"];while(parent!==null){parent.childLanes=mergeLanes(parent.childLanes,lane);alternate=parent.alternate;if(alternate!==null){alternate.childLanes=mergeLanes(alternate.childLanes,lane);}else{{if((parent.flags&(Placement|Hydrating))!==NoFlags){warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);}}}node=parent;parent=parent["return"];}if(node.tag===HostRoot){var root=node.stateNode;return root;}else{return null;}}var UpdateState=0;var ReplaceState=1;var ForceUpdate=2;var CaptureUpdate=3;// Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.
var hasForceUpdate=false;var didWarnUpdateInsideUpdate;var currentlyProcessingQueue;{didWarnUpdateInsideUpdate=false;currentlyProcessingQueue=null;}function initializeUpdateQueue(fiber){var queue={baseState:fiber.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:NoLanes},effects:null};fiber.updateQueue=queue;}function cloneUpdateQueue(current,workInProgress){// Clone the update queue from current. Unless it's already a clone.
var queue=workInProgress.updateQueue;var currentQueue=current.updateQueue;if(queue===currentQueue){var clone={baseState:currentQueue.baseState,firstBaseUpdate:currentQueue.firstBaseUpdate,lastBaseUpdate:currentQueue.lastBaseUpdate,shared:currentQueue.shared,effects:currentQueue.effects};workInProgress.updateQueue=clone;}}function createUpdate(eventTime,lane){var update={eventTime:eventTime,lane:lane,tag:UpdateState,payload:null,callback:null,next:null};return update;}function enqueueUpdate(fiber,update,lane){var updateQueue=fiber.updateQueue;if(updateQueue===null){// Only occurs if the fiber has been unmounted.
return null;}var sharedQueue=updateQueue.shared;{if(currentlyProcessingQueue===sharedQueue&&!didWarnUpdateInsideUpdate){error('An update (setState, replaceState, or forceUpdate) was scheduled '+'from inside an update function. Update functions should be pure, '+'with zero side-effects. Consider using componentDidUpdate or a '+'callback.');didWarnUpdateInsideUpdate=true;}}if(isUnsafeClassRenderPhaseUpdate()){// This is an unsafe render phase update. Add directly to the update
// queue so we can process it immediately during the current render.
var pending=sharedQueue.pending;if(pending===null){// This is the first update. Create a circular list.
update.next=update;}else{update.next=pending.next;pending.next=update;}sharedQueue.pending=update;// Update the childLanes even though we're most likely already rendering
// this fiber. This is for backwards compatibility in the case where you
// update a different component during render phase than the one that is
// currently renderings (a pattern that is accompanied by a warning).
return unsafe_markUpdateLaneFromFiberToRoot(fiber,lane);}else{return enqueueConcurrentClassUpdate(fiber,sharedQueue,update,lane);}}function entangleTransitions(root,fiber,lane){var updateQueue=fiber.updateQueue;if(updateQueue===null){// Only occurs if the fiber has been unmounted.
return;}var sharedQueue=updateQueue.shared;if(isTransitionLane(lane)){var queueLanes=sharedQueue.lanes;// If any entangled lanes are no longer pending on the root, then they must
// have finished. We can remove them from the shared queue, which represents
// a superset of the actually pending lanes. In some cases we may entangle
// more than we need to, but that's OK. In fact it's worse if we *don't*
// entangle when we should.
queueLanes=intersectLanes(queueLanes,root.pendingLanes);// Entangle the new transition lane with the other transition lanes.
var newQueueLanes=mergeLanes(queueLanes,lane);sharedQueue.lanes=newQueueLanes;// Even if queue.lanes already include lane, we don't know for certain if
// the lane finished since the last time we entangled it. So we need to
// entangle it again, just to be sure.
markRootEntangled(root,newQueueLanes);}}function enqueueCapturedUpdate(workInProgress,capturedUpdate){// Captured updates are updates that are thrown by a child during the render
// phase. They should be discarded if the render is aborted. Therefore,
// we should only put them on the work-in-progress queue, not the current one.
var queue=workInProgress.updateQueue;// Check if the work-in-progress queue is a clone.
var current=workInProgress.alternate;if(current!==null){var currentQueue=current.updateQueue;if(queue===currentQueue){// The work-in-progress queue is the same as current. This happens when
// we bail out on a parent fiber that then captures an error thrown by
// a child. Since we want to append the update only to the work-in
// -progress queue, we need to clone the updates. We usually clone during
// processUpdateQueue, but that didn't happen in this case because we
// skipped over the parent when we bailed out.
var newFirst=null;var newLast=null;var firstBaseUpdate=queue.firstBaseUpdate;if(firstBaseUpdate!==null){// Loop through the updates and clone them.
var update=firstBaseUpdate;do{var clone={eventTime:update.eventTime,lane:update.lane,tag:update.tag,payload:update.payload,callback:update.callback,next:null};if(newLast===null){newFirst=newLast=clone;}else{newLast.next=clone;newLast=clone;}update=update.next;}while(update!==null);// Append the captured update the end of the cloned list.
if(newLast===null){newFirst=newLast=capturedUpdate;}else{newLast.next=capturedUpdate;newLast=capturedUpdate;}}else{// There are no base updates.
newFirst=newLast=capturedUpdate;}queue={baseState:currentQueue.baseState,firstBaseUpdate:newFirst,lastBaseUpdate:newLast,shared:currentQueue.shared,effects:currentQueue.effects};workInProgress.updateQueue=queue;return;}}// Append the update to the end of the list.
var lastBaseUpdate=queue.lastBaseUpdate;if(lastBaseUpdate===null){queue.firstBaseUpdate=capturedUpdate;}else{lastBaseUpdate.next=capturedUpdate;}queue.lastBaseUpdate=capturedUpdate;}function getStateFromUpdate(workInProgress,queue,update,prevState,nextProps,instance){switch(update.tag){case ReplaceState:{var payload=update.payload;if(typeof payload==='function'){// Updater function
{enterDisallowedContextReadInDEV();}var nextState=payload.call(instance,prevState,nextProps);{if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{payload.call(instance,prevState,nextProps);}finally{setIsStrictModeForDevtools(false);}}exitDisallowedContextReadInDEV();}return nextState;}// State object
return payload;}case CaptureUpdate:{workInProgress.flags=workInProgress.flags&~ShouldCapture|DidCapture;}// Intentional fallthrough
case UpdateState:{var _payload=update.payload;var partialState;if(typeof _payload==='function'){// Updater function
{enterDisallowedContextReadInDEV();}partialState=_payload.call(instance,prevState,nextProps);{if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{_payload.call(instance,prevState,nextProps);}finally{setIsStrictModeForDevtools(false);}}exitDisallowedContextReadInDEV();}}else{// Partial state object
partialState=_payload;}if(partialState===null||partialState===undefined){// Null and undefined are treated as no-ops.
return prevState;}// Merge the partial state and the previous state.
return assign({},prevState,partialState);}case ForceUpdate:{hasForceUpdate=true;return prevState;}}return prevState;}function processUpdateQueue(workInProgress,props,instance,renderLanes){// This is always non-null on a ClassComponent or HostRoot
var queue=workInProgress.updateQueue;hasForceUpdate=false;{currentlyProcessingQueue=queue.shared;}var firstBaseUpdate=queue.firstBaseUpdate;var lastBaseUpdate=queue.lastBaseUpdate;// Check if there are pending updates. If so, transfer them to the base queue.
var pendingQueue=queue.shared.pending;if(pendingQueue!==null){queue.shared.pending=null;// The pending queue is circular. Disconnect the pointer between first
// and last so that it's non-circular.
var lastPendingUpdate=pendingQueue;var firstPendingUpdate=lastPendingUpdate.next;lastPendingUpdate.next=null;// Append pending updates to base queue
if(lastBaseUpdate===null){firstBaseUpdate=firstPendingUpdate;}else{lastBaseUpdate.next=firstPendingUpdate;}lastBaseUpdate=lastPendingUpdate;// If there's a current queue, and it's different from the base queue, then
// we need to transfer the updates to that queue, too. Because the base
// queue is a singly-linked list with no cycles, we can append to both
// lists and take advantage of structural sharing.
// TODO: Pass `current` as argument
var current=workInProgress.alternate;if(current!==null){// This is always non-null on a ClassComponent or HostRoot
var currentQueue=current.updateQueue;var currentLastBaseUpdate=currentQueue.lastBaseUpdate;if(currentLastBaseUpdate!==lastBaseUpdate){if(currentLastBaseUpdate===null){currentQueue.firstBaseUpdate=firstPendingUpdate;}else{currentLastBaseUpdate.next=firstPendingUpdate;}currentQueue.lastBaseUpdate=lastPendingUpdate;}}}// These values may change as we process the queue.
if(firstBaseUpdate!==null){// Iterate through the list of updates to compute the result.
var newState=queue.baseState;// TODO: Don't need to accumulate this. Instead, we can remove renderLanes
// from the original lanes.
var newLanes=NoLanes;var newBaseState=null;var newFirstBaseUpdate=null;var newLastBaseUpdate=null;var update=firstBaseUpdate;do{var updateLane=update.lane;var updateEventTime=update.eventTime;if(!isSubsetOfLanes(renderLanes,updateLane)){// Priority is insufficient. Skip this update. If this is the first
// skipped update, the previous update/state is the new base
// update/state.
var clone={eventTime:updateEventTime,lane:updateLane,tag:update.tag,payload:update.payload,callback:update.callback,next:null};if(newLastBaseUpdate===null){newFirstBaseUpdate=newLastBaseUpdate=clone;newBaseState=newState;}else{newLastBaseUpdate=newLastBaseUpdate.next=clone;}// Update the remaining priority in the queue.
newLanes=mergeLanes(newLanes,updateLane);}else{// This update does have sufficient priority.
if(newLastBaseUpdate!==null){var _clone={eventTime:updateEventTime,// This update is going to be committed so we never want uncommit
// it. Using NoLane works because 0 is a subset of all bitmasks, so
// this will never be skipped by the check above.
lane:NoLane,tag:update.tag,payload:update.payload,callback:update.callback,next:null};newLastBaseUpdate=newLastBaseUpdate.next=_clone;}// Process this update.
newState=getStateFromUpdate(workInProgress,queue,update,newState,props,instance);var callback=update.callback;if(callback!==null&&// If the update was already committed, we should not queue its
// callback again.
update.lane!==NoLane){workInProgress.flags|=Callback;var effects=queue.effects;if(effects===null){queue.effects=[update];}else{effects.push(update);}}}update=update.next;if(update===null){pendingQueue=queue.shared.pending;if(pendingQueue===null){break;}else{// An update was scheduled from inside a reducer. Add the new
// pending updates to the end of the list and keep processing.
var _lastPendingUpdate=pendingQueue;// Intentionally unsound. Pending updates form a circular list, but we
// unravel them when transferring them to the base queue.
var _firstPendingUpdate=_lastPendingUpdate.next;_lastPendingUpdate.next=null;update=_firstPendingUpdate;queue.lastBaseUpdate=_lastPendingUpdate;queue.shared.pending=null;}}}while(true);if(newLastBaseUpdate===null){newBaseState=newState;}queue.baseState=newBaseState;queue.firstBaseUpdate=newFirstBaseUpdate;queue.lastBaseUpdate=newLastBaseUpdate;// Interleaved updates are stored on a separate queue. We aren't going to
// process them during this render, but we do need to track which lanes
// are remaining.
var lastInterleaved=queue.shared.interleaved;if(lastInterleaved!==null){var interleaved=lastInterleaved;do{newLanes=mergeLanes(newLanes,interleaved.lane);interleaved=interleaved.next;}while(interleaved!==lastInterleaved);}else if(firstBaseUpdate===null){// `queue.lanes` is used for entangling transitions. We can set it back to
// zero once the queue is empty.
queue.shared.lanes=NoLanes;}// Set the remaining expiration time to be whatever is remaining in the queue.
// This should be fine because the only two other things that contribute to
// expiration time are props and context. We're already in the middle of the
// begin phase by the time we start processing the queue, so we've already
// dealt with the props. Context in components that specify
// shouldComponentUpdate is tricky; but we'll have to account for
// that regardless.
markSkippedUpdateLanes(newLanes);workInProgress.lanes=newLanes;workInProgress.memoizedState=newState;}{currentlyProcessingQueue=null;}}function callCallback(callback,context){if(typeof callback!=='function'){throw new Error('Invalid argument passed as callback. Expected a function. Instead '+("received: "+callback));}callback.call(context);}function resetHasForceUpdateBeforeProcessing(){hasForceUpdate=false;}function checkHasForceUpdateAfterProcessing(){return hasForceUpdate;}function commitUpdateQueue(finishedWork,finishedQueue,instance){// Commit the effects
var effects=finishedQueue.effects;finishedQueue.effects=null;if(effects!==null){for(var i=0;i<effects.length;i++){var effect=effects[i];var callback=effect.callback;if(callback!==null){effect.callback=null;callCallback(callback,instance);}}}}var NO_CONTEXT={};var contextStackCursor$1=createCursor(NO_CONTEXT);var contextFiberStackCursor=createCursor(NO_CONTEXT);var rootInstanceStackCursor=createCursor(NO_CONTEXT);function requiredContext(c){if(c===NO_CONTEXT){throw new Error('Expected host context to exist. This error is likely caused by a bug '+'in React. Please file an issue.');}return c;}function getRootHostContainer(){var rootInstance=requiredContext(rootInstanceStackCursor.current);return rootInstance;}function pushHostContainer(fiber,nextRootInstance){// Push current root instance onto the stack;
// This allows us to reset root when portals are popped.
push(rootInstanceStackCursor,nextRootInstance,fiber);// Track the context and the Fiber that provided it.
// This enables us to pop only Fibers that provide unique contexts.
push(contextFiberStackCursor,fiber,fiber);// Finally, we need to push the host context to the stack.
// However, we can't just call getRootHostContext() and push it because
// we'd have a different number of entries on the stack depending on
// whether getRootHostContext() throws somewhere in renderer code or not.
// So we push an empty value first. This lets us safely unwind on errors.
push(contextStackCursor$1,NO_CONTEXT,fiber);var nextRootContext=getRootHostContext(nextRootInstance);// Now that we know this function doesn't throw, replace it.
pop(contextStackCursor$1,fiber);push(contextStackCursor$1,nextRootContext,fiber);}function popHostContainer(fiber){pop(contextStackCursor$1,fiber);pop(contextFiberStackCursor,fiber);pop(rootInstanceStackCursor,fiber);}function getHostContext(){var context=requiredContext(contextStackCursor$1.current);return context;}function pushHostContext(fiber){var rootInstance=requiredContext(rootInstanceStackCursor.current);var context=requiredContext(contextStackCursor$1.current);var nextContext=getChildHostContext(context,fiber.type);// Don't push this Fiber's context unless it's unique.
if(context===nextContext){return;}// Track the context and the Fiber that provided it.
// This enables us to pop only Fibers that provide unique contexts.
push(contextFiberStackCursor,fiber,fiber);push(contextStackCursor$1,nextContext,fiber);}function popHostContext(fiber){// Do not pop unless this Fiber provided the current context.
// pushHostContext() only pushes Fibers that provide unique contexts.
if(contextFiberStackCursor.current!==fiber){return;}pop(contextStackCursor$1,fiber);pop(contextFiberStackCursor,fiber);}var DefaultSuspenseContext=0;// The Suspense Context is split into two parts. The lower bits is
// inherited deeply down the subtree. The upper bits only affect
// this immediate suspense boundary and gets reset each new
// boundary or suspense list.
var SubtreeSuspenseContextMask=1;// Subtree Flags:
// InvisibleParentSuspenseContext indicates that one of our parent Suspense
// boundaries is not currently showing visible main content.
// Either because it is already showing a fallback or is not mounted at all.
// We can use this to determine if it is desirable to trigger a fallback at
// the parent. If not, then we might need to trigger undesirable boundaries
// and/or suspend the commit to avoid hiding the parent content.
var InvisibleParentSuspenseContext=1;// Shallow Flags:
// ForceSuspenseFallback can be used by SuspenseList to force newly added
// items into their fallback state during one of the render passes.
var ForceSuspenseFallback=2;var suspenseStackCursor=createCursor(DefaultSuspenseContext);function hasSuspenseContext(parentContext,flag){return(parentContext&flag)!==0;}function setDefaultShallowSuspenseContext(parentContext){return parentContext&SubtreeSuspenseContextMask;}function setShallowSuspenseContext(parentContext,shallowContext){return parentContext&SubtreeSuspenseContextMask|shallowContext;}function addSubtreeSuspenseContext(parentContext,subtreeContext){return parentContext|subtreeContext;}function pushSuspenseContext(fiber,newContext){push(suspenseStackCursor,newContext,fiber);}function popSuspenseContext(fiber){pop(suspenseStackCursor,fiber);}function shouldCaptureSuspense(workInProgress,hasInvisibleParent){// If it was the primary children that just suspended, capture and render the
// fallback. Otherwise, don't capture and bubble to the next boundary.
var nextState=workInProgress.memoizedState;if(nextState!==null){if(nextState.dehydrated!==null){// A dehydrated boundary always captures.
return true;}return false;}var props=workInProgress.memoizedProps;// Regular boundaries always capture.
{return true;}// If it's a boundary we should avoid, then we prefer to bubble up to the
}function findFirstSuspended(row){var node=row;while(node!==null){if(node.tag===SuspenseComponent){var state=node.memoizedState;if(state!==null){var dehydrated=state.dehydrated;if(dehydrated===null||isSuspenseInstancePending(dehydrated)||isSuspenseInstanceFallback(dehydrated)){return node;}}}else if(node.tag===SuspenseListComponent&&// revealOrder undefined can't be trusted because it don't
// keep track of whether it suspended or not.
node.memoizedProps.revealOrder!==undefined){var didSuspend=(node.flags&DidCapture)!==NoFlags;if(didSuspend){return node;}}else if(node.child!==null){node.child["return"]=node;node=node.child;continue;}if(node===row){return null;}while(node.sibling===null){if(node["return"]===null||node["return"]===row){return null;}node=node["return"];}node.sibling["return"]=node["return"];node=node.sibling;}return null;}var NoFlags$1=/*   */0;// Represents whether effect should fire.
var HasEffect=/* */1;// Represents the phase in which the effect (not the clean-up) fires.
var Insertion=/*  */2;var Layout=/*    */4;var Passive$1=/*   */8;// and should be reset before starting a new render.
// This tracks which mutable sources need to be reset after a render.
var workInProgressSources=[];function resetWorkInProgressVersions(){for(var i=0;i<workInProgressSources.length;i++){var mutableSource=workInProgressSources[i];{mutableSource._workInProgressVersionPrimary=null;}}workInProgressSources.length=0;}// This ensures that the version used for server rendering matches the one
// that is eventually read during hydration.
// If they don't match there's a potential tear and a full deopt render is required.
function registerMutableSourceForHydration(root,mutableSource){var getVersion=mutableSource._getVersion;var version=getVersion(mutableSource._source);// TODO Clear this data once all pending hydration work is finished.
// Retaining it forever may interfere with GC.
if(root.mutableSourceEagerHydrationData==null){root.mutableSourceEagerHydrationData=[mutableSource,version];}else{root.mutableSourceEagerHydrationData.push(mutableSource,version);}}var ReactCurrentDispatcher$1=ReactSharedInternals.ReactCurrentDispatcher,ReactCurrentBatchConfig$2=ReactSharedInternals.ReactCurrentBatchConfig;var didWarnAboutMismatchedHooksForComponent;var didWarnUncachedGetSnapshot;{didWarnAboutMismatchedHooksForComponent=new Set();}// These are set right before calling the component.
var renderLanes=NoLanes;// The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.
var currentlyRenderingFiber$1=null;// Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.
var currentHook=null;var workInProgressHook=null;// Whether an update was scheduled at any point during the render phase. This
// does not get reset if we do another render pass; only when we're completely
// finished evaluating this component. This is an optimization so we know
// whether we need to clear render phase updates after a throw.
var didScheduleRenderPhaseUpdate=false;// Where an update was scheduled only during the current render pass. This
// gets reset after each attempt.
// TODO: Maybe there's some way to consolidate this with
// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.
var didScheduleRenderPhaseUpdateDuringThisPass=false;// Counts the number of useId hooks in this component.
var localIdCounter=0;// Used for ids that are generated completely client-side (i.e. not during
// hydration). This counter is global, so client ids are not stable across
// render attempts.
var globalClientIdCounter=0;var RE_RENDER_LIMIT=25;// In DEV, this is the name of the currently executing primitive hook
var currentHookNameInDev=null;// In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.
var hookTypesDev=null;var hookTypesUpdateIndexDev=-1;// In DEV, this tracks whether currently rendering component needs to ignore
// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
// When true, such Hooks will always be "remounted". Only used during hot reload.
var ignorePreviousDependencies=false;function mountHookTypesDev(){{var hookName=currentHookNameInDev;if(hookTypesDev===null){hookTypesDev=[hookName];}else{hookTypesDev.push(hookName);}}}function updateHookTypesDev(){{var hookName=currentHookNameInDev;if(hookTypesDev!==null){hookTypesUpdateIndexDev++;if(hookTypesDev[hookTypesUpdateIndexDev]!==hookName){warnOnHookMismatchInDev(hookName);}}}}function checkDepsAreArrayDev(deps){{if(deps!==undefined&&deps!==null&&!isArray(deps)){// Verify deps, but only on mount to avoid extra checks.
// It's unlikely their type would change as usually you define them inline.
error('%s received a final argument that is not an array (instead, received `%s`). When '+'specified, the final argument must be an array.',currentHookNameInDev,_typeof(deps));}}}function warnOnHookMismatchInDev(currentHookName){{var componentName=getComponentNameFromFiber(currentlyRenderingFiber$1);if(!didWarnAboutMismatchedHooksForComponent.has(componentName)){didWarnAboutMismatchedHooksForComponent.add(componentName);if(hookTypesDev!==null){var table='';var secondColumnStart=30;for(var i=0;i<=hookTypesUpdateIndexDev;i++){var oldHookName=hookTypesDev[i];var newHookName=i===hookTypesUpdateIndexDev?currentHookName:oldHookName;var row=i+1+". "+oldHookName;// Extra space so second column lines up
// lol @ IE not supporting String#repeat
while(row.length<secondColumnStart){row+=' ';}row+=newHookName+'\n';table+=row;}error('React has detected a change in the order of Hooks called by %s. '+'This will lead to bugs and errors if not fixed. '+'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n'+'   Previous render            Next render\n'+'   ------------------------------------------------------\n'+'%s'+'   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n',componentName,table);}}}}function throwInvalidHookError(){throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for'+' one of the following reasons:\n'+'1. You might have mismatching versions of React and the renderer (such as React DOM)\n'+'2. You might be breaking the Rules of Hooks\n'+'3. You might have more than one copy of React in the same app\n'+'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');}function areHookInputsEqual(nextDeps,prevDeps){{if(ignorePreviousDependencies){// Only true when this component is being hot reloaded.
return false;}}if(prevDeps===null){{error('%s received a final argument during this render, but not during '+'the previous render. Even though the final argument is optional, '+'its type cannot change between renders.',currentHookNameInDev);}return false;}{// Don't bother comparing lengths in prod because these arrays should be
// passed inline.
if(nextDeps.length!==prevDeps.length){error('The final argument passed to %s changed size between renders. The '+'order and size of this array must remain constant.\n\n'+'Previous: %s\n'+'Incoming: %s',currentHookNameInDev,"["+prevDeps.join(', ')+"]","["+nextDeps.join(', ')+"]");}}for(var i=0;i<prevDeps.length&&i<nextDeps.length;i++){if(objectIs(nextDeps[i],prevDeps[i])){continue;}return false;}return true;}function renderWithHooks(current,workInProgress,Component,props,secondArg,nextRenderLanes){renderLanes=nextRenderLanes;currentlyRenderingFiber$1=workInProgress;{hookTypesDev=current!==null?current._debugHookTypes:null;hookTypesUpdateIndexDev=-1;// Used for hot reloading:
ignorePreviousDependencies=current!==null&&current.type!==workInProgress.type;}workInProgress.memoizedState=null;workInProgress.updateQueue=null;workInProgress.lanes=NoLanes;// The following should have already been reset
// currentHook = null;
// workInProgressHook = null;
// didScheduleRenderPhaseUpdate = false;
// localIdCounter = 0;
// TODO Warn if no hooks are used at all during mount, then some are used during update.
// Currently we will identify the update render as a mount because memoizedState === null.
// This is tricky because it's valid for certain types of components (e.g. React.lazy)
// Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
// Non-stateful hooks (e.g. context) don't get added to memoizedState,
// so memoizedState would be null during updates and mounts.
{if(current!==null&&current.memoizedState!==null){ReactCurrentDispatcher$1.current=HooksDispatcherOnUpdateInDEV;}else if(hookTypesDev!==null){// This dispatcher handles an edge case where a component is updating,
// but no stateful hooks have been used.
// We want to match the production code behavior (which will use HooksDispatcherOnMount),
// but with the extra DEV validation to ensure hooks ordering hasn't changed.
// This dispatcher does that.
ReactCurrentDispatcher$1.current=HooksDispatcherOnMountWithHookTypesInDEV;}else{ReactCurrentDispatcher$1.current=HooksDispatcherOnMountInDEV;}}var children=Component(props,secondArg);// Check if there was a render phase update
if(didScheduleRenderPhaseUpdateDuringThisPass){// Keep rendering in a loop for as long as render phase updates continue to
// be scheduled. Use a counter to prevent infinite loops.
var numberOfReRenders=0;do{didScheduleRenderPhaseUpdateDuringThisPass=false;localIdCounter=0;if(numberOfReRenders>=RE_RENDER_LIMIT){throw new Error('Too many re-renders. React limits the number of renders to prevent '+'an infinite loop.');}numberOfReRenders+=1;{// Even when hot reloading, allow dependencies to stabilize
// after first render to prevent infinite render phase updates.
ignorePreviousDependencies=false;}// Start over from the beginning of the list
currentHook=null;workInProgressHook=null;workInProgress.updateQueue=null;{// Also validate hook order for cascading updates.
hookTypesUpdateIndexDev=-1;}ReactCurrentDispatcher$1.current=HooksDispatcherOnRerenderInDEV;children=Component(props,secondArg);}while(didScheduleRenderPhaseUpdateDuringThisPass);}// We can assume the previous dispatcher is always this one, since we set it
// at the beginning of the render phase and there's no re-entrance.
ReactCurrentDispatcher$1.current=ContextOnlyDispatcher;{workInProgress._debugHookTypes=hookTypesDev;}// This check uses currentHook so that it works the same in DEV and prod bundles.
// hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.
var didRenderTooFewHooks=currentHook!==null&&currentHook.next!==null;renderLanes=NoLanes;currentlyRenderingFiber$1=null;currentHook=null;workInProgressHook=null;{currentHookNameInDev=null;hookTypesDev=null;hookTypesUpdateIndexDev=-1;// Confirm that a static flag was not added or removed since the last
// render. If this fires, it suggests that we incorrectly reset the static
// flags in some other part of the codebase. This has happened before, for
// example, in the SuspenseList implementation.
if(current!==null&&(current.flags&StaticMask)!==(workInProgress.flags&StaticMask)&&// Disable this warning in legacy mode, because legacy Suspense is weird
// and creates false positives. To make this work in legacy mode, we'd
// need to mark fibers that commit in an incomplete state, somehow. For
// now I'll disable the warning that most of the bugs that would trigger
// it are either exclusive to concurrent mode or exist in both.
(current.mode&ConcurrentMode)!==NoMode){error('Internal React error: Expected static flag was missing. Please '+'notify the React team.');}}didScheduleRenderPhaseUpdate=false;// This is reset by checkDidRenderIdHook
// localIdCounter = 0;
if(didRenderTooFewHooks){throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental '+'early return statement.');}return children;}function checkDidRenderIdHook(){// This should be called immediately after every renderWithHooks call.
// Conceptually, it's part of the return value of renderWithHooks; it's only a
// separate function to avoid using an array tuple.
var didRenderIdHook=localIdCounter!==0;localIdCounter=0;return didRenderIdHook;}function bailoutHooks(current,workInProgress,lanes){workInProgress.updateQueue=current.updateQueue;// TODO: Don't need to reset the flags here, because they're reset in the
// complete phase (bubbleProperties).
if((workInProgress.mode&StrictEffectsMode)!==NoMode){workInProgress.flags&=~(MountPassiveDev|MountLayoutDev|Passive|Update);}else{workInProgress.flags&=~(Passive|Update);}current.lanes=removeLanes(current.lanes,lanes);}function resetHooksAfterThrow(){// We can assume the previous dispatcher is always this one, since we set it
// at the beginning of the render phase and there's no re-entrance.
ReactCurrentDispatcher$1.current=ContextOnlyDispatcher;if(didScheduleRenderPhaseUpdate){// There were render phase updates. These are only valid for this render
// phase, which we are now aborting. Remove the updates from the queues so
// they do not persist to the next render. Do not remove updates from hooks
// that weren't processed.
//
// Only reset the updates from the queue if it has a clone. If it does
// not have a clone, that means it wasn't processed, and the updates were
// scheduled before we entered the render phase.
var hook=currentlyRenderingFiber$1.memoizedState;while(hook!==null){var queue=hook.queue;if(queue!==null){queue.pending=null;}hook=hook.next;}didScheduleRenderPhaseUpdate=false;}renderLanes=NoLanes;currentlyRenderingFiber$1=null;currentHook=null;workInProgressHook=null;{hookTypesDev=null;hookTypesUpdateIndexDev=-1;currentHookNameInDev=null;isUpdatingOpaqueValueInRenderPhase=false;}didScheduleRenderPhaseUpdateDuringThisPass=false;localIdCounter=0;}function mountWorkInProgressHook(){var hook={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};if(workInProgressHook===null){// This is the first hook in the list
currentlyRenderingFiber$1.memoizedState=workInProgressHook=hook;}else{// Append to the end of the list
workInProgressHook=workInProgressHook.next=hook;}return workInProgressHook;}function updateWorkInProgressHook(){// This function is used both for updates and for re-renders triggered by a
// render phase update. It assumes there is either a current hook we can
// clone, or a work-in-progress hook from a previous render pass that we can
// use as a base. When we reach the end of the base list, we must switch to
// the dispatcher used for mounts.
var nextCurrentHook;if(currentHook===null){var current=currentlyRenderingFiber$1.alternate;if(current!==null){nextCurrentHook=current.memoizedState;}else{nextCurrentHook=null;}}else{nextCurrentHook=currentHook.next;}var nextWorkInProgressHook;if(workInProgressHook===null){nextWorkInProgressHook=currentlyRenderingFiber$1.memoizedState;}else{nextWorkInProgressHook=workInProgressHook.next;}if(nextWorkInProgressHook!==null){// There's already a work-in-progress. Reuse it.
workInProgressHook=nextWorkInProgressHook;nextWorkInProgressHook=workInProgressHook.next;currentHook=nextCurrentHook;}else{// Clone from the current hook.
if(nextCurrentHook===null){throw new Error('Rendered more hooks than during the previous render.');}currentHook=nextCurrentHook;var newHook={memoizedState:currentHook.memoizedState,baseState:currentHook.baseState,baseQueue:currentHook.baseQueue,queue:currentHook.queue,next:null};if(workInProgressHook===null){// This is the first hook in the list.
currentlyRenderingFiber$1.memoizedState=workInProgressHook=newHook;}else{// Append to the end of the list.
workInProgressHook=workInProgressHook.next=newHook;}}return workInProgressHook;}function createFunctionComponentUpdateQueue(){return{lastEffect:null,stores:null};}function basicStateReducer(state,action){// $FlowFixMe: Flow doesn't like mixed types
return typeof action==='function'?action(state):action;}function mountReducer(reducer,initialArg,init){var hook=mountWorkInProgressHook();var initialState;if(init!==undefined){initialState=init(initialArg);}else{initialState=initialArg;}hook.memoizedState=hook.baseState=initialState;var queue={pending:null,interleaved:null,lanes:NoLanes,dispatch:null,lastRenderedReducer:reducer,lastRenderedState:initialState};hook.queue=queue;var dispatch=queue.dispatch=dispatchReducerAction.bind(null,currentlyRenderingFiber$1,queue);return[hook.memoizedState,dispatch];}function updateReducer(reducer,initialArg,init){var hook=updateWorkInProgressHook();var queue=hook.queue;if(queue===null){throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');}queue.lastRenderedReducer=reducer;var current=currentHook;// The last rebase update that is NOT part of the base state.
var baseQueue=current.baseQueue;// The last pending update that hasn't been processed yet.
var pendingQueue=queue.pending;if(pendingQueue!==null){// We have new updates that haven't been processed yet.
// We'll add them to the base queue.
if(baseQueue!==null){// Merge the pending queue and the base queue.
var baseFirst=baseQueue.next;var pendingFirst=pendingQueue.next;baseQueue.next=pendingFirst;pendingQueue.next=baseFirst;}{if(current.baseQueue!==baseQueue){// Internal invariant that should never happen, but feasibly could in
// the future if we implement resuming, or some form of that.
error('Internal error: Expected work-in-progress queue to be a clone. '+'This is a bug in React.');}}current.baseQueue=baseQueue=pendingQueue;queue.pending=null;}if(baseQueue!==null){// We have a queue to process.
var first=baseQueue.next;var newState=current.baseState;var newBaseState=null;var newBaseQueueFirst=null;var newBaseQueueLast=null;var update=first;do{var updateLane=update.lane;if(!isSubsetOfLanes(renderLanes,updateLane)){// Priority is insufficient. Skip this update. If this is the first
// skipped update, the previous update/state is the new base
// update/state.
var clone={lane:updateLane,action:update.action,hasEagerState:update.hasEagerState,eagerState:update.eagerState,next:null};if(newBaseQueueLast===null){newBaseQueueFirst=newBaseQueueLast=clone;newBaseState=newState;}else{newBaseQueueLast=newBaseQueueLast.next=clone;}// Update the remaining priority in the queue.
// TODO: Don't need to accumulate this. Instead, we can remove
// renderLanes from the original lanes.
currentlyRenderingFiber$1.lanes=mergeLanes(currentlyRenderingFiber$1.lanes,updateLane);markSkippedUpdateLanes(updateLane);}else{// This update does have sufficient priority.
if(newBaseQueueLast!==null){var _clone={// This update is going to be committed so we never want uncommit
// it. Using NoLane works because 0 is a subset of all bitmasks, so
// this will never be skipped by the check above.
lane:NoLane,action:update.action,hasEagerState:update.hasEagerState,eagerState:update.eagerState,next:null};newBaseQueueLast=newBaseQueueLast.next=_clone;}// Process this update.
if(update.hasEagerState){// If this update is a state update (not a reducer) and was processed eagerly,
// we can use the eagerly computed state
newState=update.eagerState;}else{var action=update.action;newState=reducer(newState,action);}}update=update.next;}while(update!==null&&update!==first);if(newBaseQueueLast===null){newBaseState=newState;}else{newBaseQueueLast.next=newBaseQueueFirst;}// Mark that the fiber performed work, but only if the new state is
// different from the current state.
if(!objectIs(newState,hook.memoizedState)){markWorkInProgressReceivedUpdate();}hook.memoizedState=newState;hook.baseState=newBaseState;hook.baseQueue=newBaseQueueLast;queue.lastRenderedState=newState;}// Interleaved updates are stored on a separate queue. We aren't going to
// process them during this render, but we do need to track which lanes
// are remaining.
var lastInterleaved=queue.interleaved;if(lastInterleaved!==null){var interleaved=lastInterleaved;do{var interleavedLane=interleaved.lane;currentlyRenderingFiber$1.lanes=mergeLanes(currentlyRenderingFiber$1.lanes,interleavedLane);markSkippedUpdateLanes(interleavedLane);interleaved=interleaved.next;}while(interleaved!==lastInterleaved);}else if(baseQueue===null){// `queue.lanes` is used for entangling transitions. We can set it back to
// zero once the queue is empty.
queue.lanes=NoLanes;}var dispatch=queue.dispatch;return[hook.memoizedState,dispatch];}function rerenderReducer(reducer,initialArg,init){var hook=updateWorkInProgressHook();var queue=hook.queue;if(queue===null){throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');}queue.lastRenderedReducer=reducer;// This is a re-render. Apply the new render phase updates to the previous
// work-in-progress hook.
var dispatch=queue.dispatch;var lastRenderPhaseUpdate=queue.pending;var newState=hook.memoizedState;if(lastRenderPhaseUpdate!==null){// The queue doesn't persist past this render pass.
queue.pending=null;var firstRenderPhaseUpdate=lastRenderPhaseUpdate.next;var update=firstRenderPhaseUpdate;do{// Process this render phase update. We don't have to check the
// priority because it will always be the same as the current
// render's.
var action=update.action;newState=reducer(newState,action);update=update.next;}while(update!==firstRenderPhaseUpdate);// Mark that the fiber performed work, but only if the new state is
// different from the current state.
if(!objectIs(newState,hook.memoizedState)){markWorkInProgressReceivedUpdate();}hook.memoizedState=newState;// Don't persist the state accumulated from the render phase updates to
// the base state unless the queue is empty.
// TODO: Not sure if this is the desired semantics, but it's what we
// do for gDSFP. I can't remember why.
if(hook.baseQueue===null){hook.baseState=newState;}queue.lastRenderedState=newState;}return[newState,dispatch];}function mountMutableSource(source,getSnapshot,subscribe){{return undefined;}}function updateMutableSource(source,getSnapshot,subscribe){{return undefined;}}function mountSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){var fiber=currentlyRenderingFiber$1;var hook=mountWorkInProgressHook();var nextSnapshot;var isHydrating=getIsHydrating();if(isHydrating){if(getServerSnapshot===undefined){throw new Error('Missing getServerSnapshot, which is required for '+'server-rendered content. Will revert to client rendering.');}nextSnapshot=getServerSnapshot();{if(!didWarnUncachedGetSnapshot){if(nextSnapshot!==getServerSnapshot()){error('The result of getServerSnapshot should be cached to avoid an infinite loop');didWarnUncachedGetSnapshot=true;}}}}else{nextSnapshot=getSnapshot();{if(!didWarnUncachedGetSnapshot){var cachedSnapshot=getSnapshot();if(!objectIs(nextSnapshot,cachedSnapshot)){error('The result of getSnapshot should be cached to avoid an infinite loop');didWarnUncachedGetSnapshot=true;}}}// Unless we're rendering a blocking lane, schedule a consistency check.
// Right before committing, we will walk the tree and check if any of the
// stores were mutated.
//
// We won't do this if we're hydrating server-rendered content, because if
// the content is stale, it's already visible anyway. Instead we'll patch
// it up in a passive effect.
var root=getWorkInProgressRoot();if(root===null){throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');}if(!includesBlockingLane(root,renderLanes)){pushStoreConsistencyCheck(fiber,getSnapshot,nextSnapshot);}}// Read the current snapshot from the store on every render. This breaks the
// normal rules of React, and only works because store updates are
// always synchronous.
hook.memoizedState=nextSnapshot;var inst={value:nextSnapshot,getSnapshot:getSnapshot};hook.queue=inst;// Schedule an effect to subscribe to the store.
mountEffect(subscribeToStore.bind(null,fiber,inst,subscribe),[subscribe]);// Schedule an effect to update the mutable instance fields. We will update
// this whenever subscribe, getSnapshot, or value changes. Because there's no
// clean-up function, and we track the deps correctly, we can call pushEffect
// directly, without storing any additional state. For the same reason, we
// don't need to set a static flag, either.
// TODO: We can move this to the passive phase once we add a pre-commit
// consistency check. See the next comment.
fiber.flags|=Passive;pushEffect(HasEffect|Passive$1,updateStoreInstance.bind(null,fiber,inst,nextSnapshot,getSnapshot),undefined,null);return nextSnapshot;}function updateSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){var fiber=currentlyRenderingFiber$1;var hook=updateWorkInProgressHook();// Read the current snapshot from the store on every render. This breaks the
// normal rules of React, and only works because store updates are
// always synchronous.
var nextSnapshot=getSnapshot();{if(!didWarnUncachedGetSnapshot){var cachedSnapshot=getSnapshot();if(!objectIs(nextSnapshot,cachedSnapshot)){error('The result of getSnapshot should be cached to avoid an infinite loop');didWarnUncachedGetSnapshot=true;}}}var prevSnapshot=hook.memoizedState;var snapshotChanged=!objectIs(prevSnapshot,nextSnapshot);if(snapshotChanged){hook.memoizedState=nextSnapshot;markWorkInProgressReceivedUpdate();}var inst=hook.queue;updateEffect(subscribeToStore.bind(null,fiber,inst,subscribe),[subscribe]);// Whenever getSnapshot or subscribe changes, we need to check in the
// commit phase if there was an interleaved mutation. In concurrent mode
// this can happen all the time, but even in synchronous mode, an earlier
// effect may have mutated the store.
if(inst.getSnapshot!==getSnapshot||snapshotChanged||// Check if the susbcribe function changed. We can save some memory by
// checking whether we scheduled a subscription effect above.
workInProgressHook!==null&&workInProgressHook.memoizedState.tag&HasEffect){fiber.flags|=Passive;pushEffect(HasEffect|Passive$1,updateStoreInstance.bind(null,fiber,inst,nextSnapshot,getSnapshot),undefined,null);// Unless we're rendering a blocking lane, schedule a consistency check.
// Right before committing, we will walk the tree and check if any of the
// stores were mutated.
var root=getWorkInProgressRoot();if(root===null){throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');}if(!includesBlockingLane(root,renderLanes)){pushStoreConsistencyCheck(fiber,getSnapshot,nextSnapshot);}}return nextSnapshot;}function pushStoreConsistencyCheck(fiber,getSnapshot,renderedSnapshot){fiber.flags|=StoreConsistency;var check={getSnapshot:getSnapshot,value:renderedSnapshot};var componentUpdateQueue=currentlyRenderingFiber$1.updateQueue;if(componentUpdateQueue===null){componentUpdateQueue=createFunctionComponentUpdateQueue();currentlyRenderingFiber$1.updateQueue=componentUpdateQueue;componentUpdateQueue.stores=[check];}else{var stores=componentUpdateQueue.stores;if(stores===null){componentUpdateQueue.stores=[check];}else{stores.push(check);}}}function updateStoreInstance(fiber,inst,nextSnapshot,getSnapshot){// These are updated in the passive phase
inst.value=nextSnapshot;inst.getSnapshot=getSnapshot;// Something may have been mutated in between render and commit. This could
// have been in an event that fired before the passive effects, or it could
// have been in a layout effect. In that case, we would have used the old
// snapsho and getSnapshot values to bail out. We need to check one more time.
if(checkIfSnapshotChanged(inst)){// Force a re-render.
forceStoreRerender(fiber);}}function subscribeToStore(fiber,inst,subscribe){var handleStoreChange=function handleStoreChange(){// The store changed. Check if the snapshot changed since the last time we
// read from the store.
if(checkIfSnapshotChanged(inst)){// Force a re-render.
forceStoreRerender(fiber);}};// Subscribe to the store and return a clean-up function.
return subscribe(handleStoreChange);}function checkIfSnapshotChanged(inst){var latestGetSnapshot=inst.getSnapshot;var prevValue=inst.value;try{var nextValue=latestGetSnapshot();return!objectIs(prevValue,nextValue);}catch(error){return true;}}function forceStoreRerender(fiber){var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}}function mountState(initialState){var hook=mountWorkInProgressHook();if(typeof initialState==='function'){// $FlowFixMe: Flow doesn't like mixed types
initialState=initialState();}hook.memoizedState=hook.baseState=initialState;var queue={pending:null,interleaved:null,lanes:NoLanes,dispatch:null,lastRenderedReducer:basicStateReducer,lastRenderedState:initialState};hook.queue=queue;var dispatch=queue.dispatch=dispatchSetState.bind(null,currentlyRenderingFiber$1,queue);return[hook.memoizedState,dispatch];}function updateState(initialState){return updateReducer(basicStateReducer);}function rerenderState(initialState){return rerenderReducer(basicStateReducer);}function pushEffect(tag,create,destroy,deps){var effect={tag:tag,create:create,destroy:destroy,deps:deps,// Circular
next:null};var componentUpdateQueue=currentlyRenderingFiber$1.updateQueue;if(componentUpdateQueue===null){componentUpdateQueue=createFunctionComponentUpdateQueue();currentlyRenderingFiber$1.updateQueue=componentUpdateQueue;componentUpdateQueue.lastEffect=effect.next=effect;}else{var lastEffect=componentUpdateQueue.lastEffect;if(lastEffect===null){componentUpdateQueue.lastEffect=effect.next=effect;}else{var firstEffect=lastEffect.next;lastEffect.next=effect;effect.next=firstEffect;componentUpdateQueue.lastEffect=effect;}}return effect;}function mountRef(initialValue){var hook=mountWorkInProgressHook();{var _ref2={current:initialValue};hook.memoizedState=_ref2;return _ref2;}}function updateRef(initialValue){var hook=updateWorkInProgressHook();return hook.memoizedState;}function mountEffectImpl(fiberFlags,hookFlags,create,deps){var hook=mountWorkInProgressHook();var nextDeps=deps===undefined?null:deps;currentlyRenderingFiber$1.flags|=fiberFlags;hook.memoizedState=pushEffect(HasEffect|hookFlags,create,undefined,nextDeps);}function updateEffectImpl(fiberFlags,hookFlags,create,deps){var hook=updateWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var destroy=undefined;if(currentHook!==null){var prevEffect=currentHook.memoizedState;destroy=prevEffect.destroy;if(nextDeps!==null){var prevDeps=prevEffect.deps;if(areHookInputsEqual(nextDeps,prevDeps)){hook.memoizedState=pushEffect(hookFlags,create,destroy,nextDeps);return;}}}currentlyRenderingFiber$1.flags|=fiberFlags;hook.memoizedState=pushEffect(HasEffect|hookFlags,create,destroy,nextDeps);}function mountEffect(create,deps){if((currentlyRenderingFiber$1.mode&StrictEffectsMode)!==NoMode){return mountEffectImpl(MountPassiveDev|Passive|PassiveStatic,Passive$1,create,deps);}else{return mountEffectImpl(Passive|PassiveStatic,Passive$1,create,deps);}}function updateEffect(create,deps){return updateEffectImpl(Passive,Passive$1,create,deps);}function mountInsertionEffect(create,deps){return mountEffectImpl(Update,Insertion,create,deps);}function updateInsertionEffect(create,deps){return updateEffectImpl(Update,Insertion,create,deps);}function mountLayoutEffect(create,deps){var fiberFlags=Update;{fiberFlags|=LayoutStatic;}if((currentlyRenderingFiber$1.mode&StrictEffectsMode)!==NoMode){fiberFlags|=MountLayoutDev;}return mountEffectImpl(fiberFlags,Layout,create,deps);}function updateLayoutEffect(create,deps){return updateEffectImpl(Update,Layout,create,deps);}function imperativeHandleEffect(create,ref){if(typeof ref==='function'){var refCallback=ref;var _inst=create();refCallback(_inst);return function(){refCallback(null);};}else if(ref!==null&&ref!==undefined){var refObject=ref;{if(!refObject.hasOwnProperty('current')){error('Expected useImperativeHandle() first argument to either be a '+'ref callback or React.createRef() object. Instead received: %s.','an object with keys {'+Object.keys(refObject).join(', ')+'}');}}var _inst2=create();refObject.current=_inst2;return function(){refObject.current=null;};}}function mountImperativeHandle(ref,create,deps){{if(typeof create!=='function'){error('Expected useImperativeHandle() second argument to be a function '+'that creates a handle. Instead received: %s.',create!==null?_typeof(create):'null');}}// TODO: If deps are provided, should we skip comparing the ref itself?
var effectDeps=deps!==null&&deps!==undefined?deps.concat([ref]):null;var fiberFlags=Update;{fiberFlags|=LayoutStatic;}if((currentlyRenderingFiber$1.mode&StrictEffectsMode)!==NoMode){fiberFlags|=MountLayoutDev;}return mountEffectImpl(fiberFlags,Layout,imperativeHandleEffect.bind(null,create,ref),effectDeps);}function updateImperativeHandle(ref,create,deps){{if(typeof create!=='function'){error('Expected useImperativeHandle() second argument to be a function '+'that creates a handle. Instead received: %s.',create!==null?_typeof(create):'null');}}// TODO: If deps are provided, should we skip comparing the ref itself?
var effectDeps=deps!==null&&deps!==undefined?deps.concat([ref]):null;return updateEffectImpl(Update,Layout,imperativeHandleEffect.bind(null,create,ref),effectDeps);}function mountDebugValue(value,formatterFn){// This hook is normally a no-op.
// The react-debug-hooks package injects its own implementation
// so that e.g. DevTools can display custom hook values.
}var updateDebugValue=mountDebugValue;function mountCallback(callback,deps){var hook=mountWorkInProgressHook();var nextDeps=deps===undefined?null:deps;hook.memoizedState=[callback,nextDeps];return callback;}function updateCallback(callback,deps){var hook=updateWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var prevState=hook.memoizedState;if(prevState!==null){if(nextDeps!==null){var prevDeps=prevState[1];if(areHookInputsEqual(nextDeps,prevDeps)){return prevState[0];}}}hook.memoizedState=[callback,nextDeps];return callback;}function mountMemo(nextCreate,deps){var hook=mountWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var nextValue=nextCreate();hook.memoizedState=[nextValue,nextDeps];return nextValue;}function updateMemo(nextCreate,deps){var hook=updateWorkInProgressHook();var nextDeps=deps===undefined?null:deps;var prevState=hook.memoizedState;if(prevState!==null){// Assume these are defined. If they're not, areHookInputsEqual will warn.
if(nextDeps!==null){var prevDeps=prevState[1];if(areHookInputsEqual(nextDeps,prevDeps)){return prevState[0];}}}var nextValue=nextCreate();hook.memoizedState=[nextValue,nextDeps];return nextValue;}function mountDeferredValue(value){var hook=mountWorkInProgressHook();hook.memoizedState=value;return value;}function updateDeferredValue(value){var hook=updateWorkInProgressHook();var resolvedCurrentHook=currentHook;var prevValue=resolvedCurrentHook.memoizedState;return updateDeferredValueImpl(hook,prevValue,value);}function rerenderDeferredValue(value){var hook=updateWorkInProgressHook();if(currentHook===null){// This is a rerender during a mount.
hook.memoizedState=value;return value;}else{// This is a rerender during an update.
var prevValue=currentHook.memoizedState;return updateDeferredValueImpl(hook,prevValue,value);}}function updateDeferredValueImpl(hook,prevValue,value){var shouldDeferValue=!includesOnlyNonUrgentLanes(renderLanes);if(shouldDeferValue){// This is an urgent update. If the value has changed, keep using the
// previous value and spawn a deferred render to update it later.
if(!objectIs(value,prevValue)){// Schedule a deferred render
var deferredLane=claimNextTransitionLane();currentlyRenderingFiber$1.lanes=mergeLanes(currentlyRenderingFiber$1.lanes,deferredLane);markSkippedUpdateLanes(deferredLane);// Set this to true to indicate that the rendered value is inconsistent
// from the latest value. The name "baseState" doesn't really match how we
// use it because we're reusing a state hook field instead of creating a
// new one.
hook.baseState=true;}// Reuse the previous value
return prevValue;}else{// This is not an urgent update, so we can use the latest value regardless
// of what it is. No need to defer it.
// However, if we're currently inside a spawned render, then we need to mark
// this as an update to prevent the fiber from bailing out.
//
// `baseState` is true when the current value is different from the rendered
// value. The name doesn't really match how we use it because we're reusing
// a state hook field instead of creating a new one.
if(hook.baseState){// Flip this back to false.
hook.baseState=false;markWorkInProgressReceivedUpdate();}hook.memoizedState=value;return value;}}function startTransition(setPending,callback,options){var previousPriority=getCurrentUpdatePriority();setCurrentUpdatePriority(higherEventPriority(previousPriority,ContinuousEventPriority));setPending(true);var prevTransition=ReactCurrentBatchConfig$2.transition;ReactCurrentBatchConfig$2.transition={};var currentTransition=ReactCurrentBatchConfig$2.transition;{ReactCurrentBatchConfig$2.transition._updatedFibers=new Set();}try{setPending(false);callback();}finally{setCurrentUpdatePriority(previousPriority);ReactCurrentBatchConfig$2.transition=prevTransition;{if(prevTransition===null&&currentTransition._updatedFibers){var updatedFibersCount=currentTransition._updatedFibers.size;if(updatedFibersCount>10){warn('Detected a large number of updates inside startTransition. '+'If this is due to a subscription please re-write it to use React provided hooks. '+'Otherwise concurrent mode guarantees are off the table.');}currentTransition._updatedFibers.clear();}}}}function mountTransition(){var _mountState=mountState(false),isPending=_mountState[0],setPending=_mountState[1];// The `start` method never changes.
var start=startTransition.bind(null,setPending);var hook=mountWorkInProgressHook();hook.memoizedState=start;return[isPending,start];}function updateTransition(){var _updateState=updateState(),isPending=_updateState[0];var hook=updateWorkInProgressHook();var start=hook.memoizedState;return[isPending,start];}function rerenderTransition(){var _rerenderState=rerenderState(),isPending=_rerenderState[0];var hook=updateWorkInProgressHook();var start=hook.memoizedState;return[isPending,start];}var isUpdatingOpaqueValueInRenderPhase=false;function getIsUpdatingOpaqueValueInRenderPhaseInDEV(){{return isUpdatingOpaqueValueInRenderPhase;}}function mountId(){var hook=mountWorkInProgressHook();var root=getWorkInProgressRoot();// TODO: In Fizz, id generation is specific to each server config. Maybe we
// should do this in Fiber, too? Deferring this decision for now because
// there's no other place to store the prefix except for an internal field on
// the public createRoot object, which the fiber tree does not currently have
// a reference to.
var identifierPrefix=root.identifierPrefix;var id;if(getIsHydrating()){var treeId=getTreeId();// Use a captial R prefix for server-generated ids.
id=':'+identifierPrefix+'R'+treeId;// Unless this is the first id at this level, append a number at the end
// that represents the position of this useId hook among all the useId
// hooks for this fiber.
var localId=localIdCounter++;if(localId>0){id+='H'+localId.toString(32);}id+=':';}else{// Use a lowercase r prefix for client-generated ids.
var globalClientId=globalClientIdCounter++;id=':'+identifierPrefix+'r'+globalClientId.toString(32)+':';}hook.memoizedState=id;return id;}function updateId(){var hook=updateWorkInProgressHook();var id=hook.memoizedState;return id;}function dispatchReducerAction(fiber,queue,action){{if(typeof arguments[3]==='function'){error("State updates from the useState() and useReducer() Hooks don't support the "+'second callback argument. To execute a side effect after '+'rendering, declare it in the component body with useEffect().');}}var lane=requestUpdateLane(fiber);var update={lane:lane,action:action,hasEagerState:false,eagerState:null,next:null};if(isRenderPhaseUpdate(fiber)){enqueueRenderPhaseUpdate(queue,update);}else{var root=enqueueConcurrentHookUpdate(fiber,queue,update,lane);if(root!==null){var eventTime=requestEventTime();scheduleUpdateOnFiber(root,fiber,lane,eventTime);entangleTransitionUpdate(root,queue,lane);}}markUpdateInDevTools(fiber,lane);}function dispatchSetState(fiber,queue,action){{if(typeof arguments[3]==='function'){error("State updates from the useState() and useReducer() Hooks don't support the "+'second callback argument. To execute a side effect after '+'rendering, declare it in the component body with useEffect().');}}var lane=requestUpdateLane(fiber);var update={lane:lane,action:action,hasEagerState:false,eagerState:null,next:null};if(isRenderPhaseUpdate(fiber)){enqueueRenderPhaseUpdate(queue,update);}else{var alternate=fiber.alternate;if(fiber.lanes===NoLanes&&(alternate===null||alternate.lanes===NoLanes)){// The queue is currently empty, which means we can eagerly compute the
// next state before entering the render phase. If the new state is the
// same as the current state, we may be able to bail out entirely.
var lastRenderedReducer=queue.lastRenderedReducer;if(lastRenderedReducer!==null){var prevDispatcher;{prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;}try{var currentState=queue.lastRenderedState;var eagerState=lastRenderedReducer(currentState,action);// Stash the eagerly computed state, and the reducer used to compute
// it, on the update object. If the reducer hasn't changed by the
// time we enter the render phase, then the eager state can be used
// without calling the reducer again.
update.hasEagerState=true;update.eagerState=eagerState;if(objectIs(eagerState,currentState)){// Fast path. We can bail out without scheduling React to re-render.
// It's still possible that we'll need to rebase this update later,
// if the component re-renders for a different reason and by that
// time the reducer has changed.
// TODO: Do we still need to entangle transitions in this case?
enqueueConcurrentHookUpdateAndEagerlyBailout(fiber,queue,update,lane);return;}}catch(error){// Suppress the error. It will throw again in the render phase.
}finally{{ReactCurrentDispatcher$1.current=prevDispatcher;}}}}var root=enqueueConcurrentHookUpdate(fiber,queue,update,lane);if(root!==null){var eventTime=requestEventTime();scheduleUpdateOnFiber(root,fiber,lane,eventTime);entangleTransitionUpdate(root,queue,lane);}}markUpdateInDevTools(fiber,lane);}function isRenderPhaseUpdate(fiber){var alternate=fiber.alternate;return fiber===currentlyRenderingFiber$1||alternate!==null&&alternate===currentlyRenderingFiber$1;}function enqueueRenderPhaseUpdate(queue,update){// This is a render phase update. Stash it in a lazily-created map of
// queue -> linked list of updates. After this render pass, we'll restart
// and apply the stashed updates on top of the work-in-progress hook.
didScheduleRenderPhaseUpdateDuringThisPass=didScheduleRenderPhaseUpdate=true;var pending=queue.pending;if(pending===null){// This is the first update. Create a circular list.
update.next=update;}else{update.next=pending.next;pending.next=update;}queue.pending=update;}// TODO: Move to ReactFiberConcurrentUpdates?
function entangleTransitionUpdate(root,queue,lane){if(isTransitionLane(lane)){var queueLanes=queue.lanes;// If any entangled lanes are no longer pending on the root, then they
// must have finished. We can remove them from the shared queue, which
// represents a superset of the actually pending lanes. In some cases we
// may entangle more than we need to, but that's OK. In fact it's worse if
// we *don't* entangle when we should.
queueLanes=intersectLanes(queueLanes,root.pendingLanes);// Entangle the new transition lane with the other transition lanes.
var newQueueLanes=mergeLanes(queueLanes,lane);queue.lanes=newQueueLanes;// Even if queue.lanes already include lane, we don't know for certain if
// the lane finished since the last time we entangled it. So we need to
// entangle it again, just to be sure.
markRootEntangled(root,newQueueLanes);}}function markUpdateInDevTools(fiber,lane,action){{markStateUpdateScheduled(fiber,lane);}}var ContextOnlyDispatcher={readContext:_readContext,useCallback:throwInvalidHookError,useContext:throwInvalidHookError,useEffect:throwInvalidHookError,useImperativeHandle:throwInvalidHookError,useInsertionEffect:throwInvalidHookError,useLayoutEffect:throwInvalidHookError,useMemo:throwInvalidHookError,useReducer:throwInvalidHookError,useRef:throwInvalidHookError,useState:throwInvalidHookError,useDebugValue:throwInvalidHookError,useDeferredValue:throwInvalidHookError,useTransition:throwInvalidHookError,useMutableSource:throwInvalidHookError,useSyncExternalStore:throwInvalidHookError,useId:throwInvalidHookError,unstable_isNewReconciler:enableNewReconciler};var HooksDispatcherOnMountInDEV=null;var HooksDispatcherOnMountWithHookTypesInDEV=null;var HooksDispatcherOnUpdateInDEV=null;var HooksDispatcherOnRerenderInDEV=null;var InvalidNestedHooksDispatcherOnMountInDEV=null;var InvalidNestedHooksDispatcherOnUpdateInDEV=null;var InvalidNestedHooksDispatcherOnRerenderInDEV=null;{var warnInvalidContextAccess=function warnInvalidContextAccess(){error('Context can only be read while React is rendering. '+'In classes, you can read it in the render method or getDerivedStateFromProps. '+'In function components, you can read it directly in the function body, but not '+'inside Hooks like useReducer() or useMemo().');};var warnInvalidHookAccess=function warnInvalidHookAccess(){error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. '+'You can only call Hooks at the top level of your React function. '+'For more information, see '+'https://reactjs.org/link/rules-of-hooks');};HooksDispatcherOnMountInDEV={readContext:function readContext(context){return _readContext(context);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';mountHookTypesDev();checkDepsAreArrayDev(deps);return mountCallback(callback,deps);},useContext:function useContext(context){currentHookNameInDev='useContext';mountHookTypesDev();return _readContext(context);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';mountHookTypesDev();checkDepsAreArrayDev(deps);return mountEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';mountHookTypesDev();checkDepsAreArrayDev(deps);return mountImperativeHandle(ref,create,deps);},useInsertionEffect:function useInsertionEffect(create,deps){currentHookNameInDev='useInsertionEffect';mountHookTypesDev();checkDepsAreArrayDev(deps);return mountInsertionEffect(create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';mountHookTypesDev();checkDepsAreArrayDev(deps);return mountLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';mountHookTypesDev();checkDepsAreArrayDev(deps);var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';mountHookTypesDev();return mountRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';mountHookTypesDev();return mountDebugValue();},useDeferredValue:function useDeferredValue(value){currentHookNameInDev='useDeferredValue';mountHookTypesDev();return mountDeferredValue(value);},useTransition:function useTransition(){currentHookNameInDev='useTransition';mountHookTypesDev();return mountTransition();},useMutableSource:function useMutableSource(source,getSnapshot,subscribe){currentHookNameInDev='useMutableSource';mountHookTypesDev();return mountMutableSource();},useSyncExternalStore:function useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){currentHookNameInDev='useSyncExternalStore';mountHookTypesDev();return mountSyncExternalStore(subscribe,getSnapshot,getServerSnapshot);},useId:function useId(){currentHookNameInDev='useId';mountHookTypesDev();return mountId();},unstable_isNewReconciler:enableNewReconciler};HooksDispatcherOnMountWithHookTypesInDEV={readContext:function readContext(context){return _readContext(context);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';updateHookTypesDev();return mountCallback(callback,deps);},useContext:function useContext(context){currentHookNameInDev='useContext';updateHookTypesDev();return _readContext(context);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';updateHookTypesDev();return mountEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';updateHookTypesDev();return mountImperativeHandle(ref,create,deps);},useInsertionEffect:function useInsertionEffect(create,deps){currentHookNameInDev='useInsertionEffect';updateHookTypesDev();return mountInsertionEffect(create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';updateHookTypesDev();return mountLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';updateHookTypesDev();return mountRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';updateHookTypesDev();return mountDebugValue();},useDeferredValue:function useDeferredValue(value){currentHookNameInDev='useDeferredValue';updateHookTypesDev();return mountDeferredValue(value);},useTransition:function useTransition(){currentHookNameInDev='useTransition';updateHookTypesDev();return mountTransition();},useMutableSource:function useMutableSource(source,getSnapshot,subscribe){currentHookNameInDev='useMutableSource';updateHookTypesDev();return mountMutableSource();},useSyncExternalStore:function useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){currentHookNameInDev='useSyncExternalStore';updateHookTypesDev();return mountSyncExternalStore(subscribe,getSnapshot,getServerSnapshot);},useId:function useId(){currentHookNameInDev='useId';updateHookTypesDev();return mountId();},unstable_isNewReconciler:enableNewReconciler};HooksDispatcherOnUpdateInDEV={readContext:function readContext(context){return _readContext(context);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';updateHookTypesDev();return updateCallback(callback,deps);},useContext:function useContext(context){currentHookNameInDev='useContext';updateHookTypesDev();return _readContext(context);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';updateHookTypesDev();return updateEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';updateHookTypesDev();return updateImperativeHandle(ref,create,deps);},useInsertionEffect:function useInsertionEffect(create,deps){currentHookNameInDev='useInsertionEffect';updateHookTypesDev();return updateInsertionEffect(create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';updateHookTypesDev();return updateLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';updateHookTypesDev();return updateRef();},useState:function useState(initialState){currentHookNameInDev='useState';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';updateHookTypesDev();return updateDebugValue();},useDeferredValue:function useDeferredValue(value){currentHookNameInDev='useDeferredValue';updateHookTypesDev();return updateDeferredValue(value);},useTransition:function useTransition(){currentHookNameInDev='useTransition';updateHookTypesDev();return updateTransition();},useMutableSource:function useMutableSource(source,getSnapshot,subscribe){currentHookNameInDev='useMutableSource';updateHookTypesDev();return updateMutableSource();},useSyncExternalStore:function useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){currentHookNameInDev='useSyncExternalStore';updateHookTypesDev();return updateSyncExternalStore(subscribe,getSnapshot);},useId:function useId(){currentHookNameInDev='useId';updateHookTypesDev();return updateId();},unstable_isNewReconciler:enableNewReconciler};HooksDispatcherOnRerenderInDEV={readContext:function readContext(context){return _readContext(context);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';updateHookTypesDev();return updateCallback(callback,deps);},useContext:function useContext(context){currentHookNameInDev='useContext';updateHookTypesDev();return _readContext(context);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';updateHookTypesDev();return updateEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';updateHookTypesDev();return updateImperativeHandle(ref,create,deps);},useInsertionEffect:function useInsertionEffect(create,deps){currentHookNameInDev='useInsertionEffect';updateHookTypesDev();return updateInsertionEffect(create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';updateHookTypesDev();return updateLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnRerenderInDEV;try{return updateMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnRerenderInDEV;try{return rerenderReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';updateHookTypesDev();return updateRef();},useState:function useState(initialState){currentHookNameInDev='useState';updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnRerenderInDEV;try{return rerenderState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';updateHookTypesDev();return updateDebugValue();},useDeferredValue:function useDeferredValue(value){currentHookNameInDev='useDeferredValue';updateHookTypesDev();return rerenderDeferredValue(value);},useTransition:function useTransition(){currentHookNameInDev='useTransition';updateHookTypesDev();return rerenderTransition();},useMutableSource:function useMutableSource(source,getSnapshot,subscribe){currentHookNameInDev='useMutableSource';updateHookTypesDev();return updateMutableSource();},useSyncExternalStore:function useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){currentHookNameInDev='useSyncExternalStore';updateHookTypesDev();return updateSyncExternalStore(subscribe,getSnapshot);},useId:function useId(){currentHookNameInDev='useId';updateHookTypesDev();return updateId();},unstable_isNewReconciler:enableNewReconciler};InvalidNestedHooksDispatcherOnMountInDEV={readContext:function readContext(context){warnInvalidContextAccess();return _readContext(context);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';warnInvalidHookAccess();mountHookTypesDev();return mountCallback(callback,deps);},useContext:function useContext(context){currentHookNameInDev='useContext';warnInvalidHookAccess();mountHookTypesDev();return _readContext(context);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';warnInvalidHookAccess();mountHookTypesDev();return mountEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';warnInvalidHookAccess();mountHookTypesDev();return mountImperativeHandle(ref,create,deps);},useInsertionEffect:function useInsertionEffect(create,deps){currentHookNameInDev='useInsertionEffect';warnInvalidHookAccess();mountHookTypesDev();return mountInsertionEffect(create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';warnInvalidHookAccess();mountHookTypesDev();return mountLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';warnInvalidHookAccess();mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';warnInvalidHookAccess();mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';warnInvalidHookAccess();mountHookTypesDev();return mountRef(initialValue);},useState:function useState(initialState){currentHookNameInDev='useState';warnInvalidHookAccess();mountHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnMountInDEV;try{return mountState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';warnInvalidHookAccess();mountHookTypesDev();return mountDebugValue();},useDeferredValue:function useDeferredValue(value){currentHookNameInDev='useDeferredValue';warnInvalidHookAccess();mountHookTypesDev();return mountDeferredValue(value);},useTransition:function useTransition(){currentHookNameInDev='useTransition';warnInvalidHookAccess();mountHookTypesDev();return mountTransition();},useMutableSource:function useMutableSource(source,getSnapshot,subscribe){currentHookNameInDev='useMutableSource';warnInvalidHookAccess();mountHookTypesDev();return mountMutableSource();},useSyncExternalStore:function useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){currentHookNameInDev='useSyncExternalStore';warnInvalidHookAccess();mountHookTypesDev();return mountSyncExternalStore(subscribe,getSnapshot,getServerSnapshot);},useId:function useId(){currentHookNameInDev='useId';warnInvalidHookAccess();mountHookTypesDev();return mountId();},unstable_isNewReconciler:enableNewReconciler};InvalidNestedHooksDispatcherOnUpdateInDEV={readContext:function readContext(context){warnInvalidContextAccess();return _readContext(context);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';warnInvalidHookAccess();updateHookTypesDev();return updateCallback(callback,deps);},useContext:function useContext(context){currentHookNameInDev='useContext';warnInvalidHookAccess();updateHookTypesDev();return _readContext(context);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';warnInvalidHookAccess();updateHookTypesDev();return updateEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';warnInvalidHookAccess();updateHookTypesDev();return updateImperativeHandle(ref,create,deps);},useInsertionEffect:function useInsertionEffect(create,deps){currentHookNameInDev='useInsertionEffect';warnInvalidHookAccess();updateHookTypesDev();return updateInsertionEffect(create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';warnInvalidHookAccess();updateHookTypesDev();return updateLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';warnInvalidHookAccess();updateHookTypesDev();return updateRef();},useState:function useState(initialState){currentHookNameInDev='useState';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';warnInvalidHookAccess();updateHookTypesDev();return updateDebugValue();},useDeferredValue:function useDeferredValue(value){currentHookNameInDev='useDeferredValue';warnInvalidHookAccess();updateHookTypesDev();return updateDeferredValue(value);},useTransition:function useTransition(){currentHookNameInDev='useTransition';warnInvalidHookAccess();updateHookTypesDev();return updateTransition();},useMutableSource:function useMutableSource(source,getSnapshot,subscribe){currentHookNameInDev='useMutableSource';warnInvalidHookAccess();updateHookTypesDev();return updateMutableSource();},useSyncExternalStore:function useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){currentHookNameInDev='useSyncExternalStore';warnInvalidHookAccess();updateHookTypesDev();return updateSyncExternalStore(subscribe,getSnapshot);},useId:function useId(){currentHookNameInDev='useId';warnInvalidHookAccess();updateHookTypesDev();return updateId();},unstable_isNewReconciler:enableNewReconciler};InvalidNestedHooksDispatcherOnRerenderInDEV={readContext:function readContext(context){warnInvalidContextAccess();return _readContext(context);},useCallback:function useCallback(callback,deps){currentHookNameInDev='useCallback';warnInvalidHookAccess();updateHookTypesDev();return updateCallback(callback,deps);},useContext:function useContext(context){currentHookNameInDev='useContext';warnInvalidHookAccess();updateHookTypesDev();return _readContext(context);},useEffect:function useEffect(create,deps){currentHookNameInDev='useEffect';warnInvalidHookAccess();updateHookTypesDev();return updateEffect(create,deps);},useImperativeHandle:function useImperativeHandle(ref,create,deps){currentHookNameInDev='useImperativeHandle';warnInvalidHookAccess();updateHookTypesDev();return updateImperativeHandle(ref,create,deps);},useInsertionEffect:function useInsertionEffect(create,deps){currentHookNameInDev='useInsertionEffect';warnInvalidHookAccess();updateHookTypesDev();return updateInsertionEffect(create,deps);},useLayoutEffect:function useLayoutEffect(create,deps){currentHookNameInDev='useLayoutEffect';warnInvalidHookAccess();updateHookTypesDev();return updateLayoutEffect(create,deps);},useMemo:function useMemo(create,deps){currentHookNameInDev='useMemo';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return updateMemo(create,deps);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useReducer:function useReducer(reducer,initialArg,init){currentHookNameInDev='useReducer';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return rerenderReducer(reducer,initialArg,init);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useRef:function useRef(initialValue){currentHookNameInDev='useRef';warnInvalidHookAccess();updateHookTypesDev();return updateRef();},useState:function useState(initialState){currentHookNameInDev='useState';warnInvalidHookAccess();updateHookTypesDev();var prevDispatcher=ReactCurrentDispatcher$1.current;ReactCurrentDispatcher$1.current=InvalidNestedHooksDispatcherOnUpdateInDEV;try{return rerenderState(initialState);}finally{ReactCurrentDispatcher$1.current=prevDispatcher;}},useDebugValue:function useDebugValue(value,formatterFn){currentHookNameInDev='useDebugValue';warnInvalidHookAccess();updateHookTypesDev();return updateDebugValue();},useDeferredValue:function useDeferredValue(value){currentHookNameInDev='useDeferredValue';warnInvalidHookAccess();updateHookTypesDev();return rerenderDeferredValue(value);},useTransition:function useTransition(){currentHookNameInDev='useTransition';warnInvalidHookAccess();updateHookTypesDev();return rerenderTransition();},useMutableSource:function useMutableSource(source,getSnapshot,subscribe){currentHookNameInDev='useMutableSource';warnInvalidHookAccess();updateHookTypesDev();return updateMutableSource();},useSyncExternalStore:function useSyncExternalStore(subscribe,getSnapshot,getServerSnapshot){currentHookNameInDev='useSyncExternalStore';warnInvalidHookAccess();updateHookTypesDev();return updateSyncExternalStore(subscribe,getSnapshot);},useId:function useId(){currentHookNameInDev='useId';warnInvalidHookAccess();updateHookTypesDev();return updateId();},unstable_isNewReconciler:enableNewReconciler};}var now$1=Scheduler.unstable_now;var commitTime=0;var layoutEffectStartTime=-1;var profilerStartTime=-1;var passiveEffectStartTime=-1;/**
 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
 *
 * The overall sequence is:
 *   1. render
 *   2. commit (and call `onRender`, `onCommit`)
 *   3. check for nested updates
 *   4. flush passive effects (and call `onPostCommit`)
 *
 * Nested updates are identified in step 3 above,
 * but step 4 still applies to the work that was just committed.
 * We use two flags to track nested updates then:
 * one tracks whether the upcoming update is a nested update,
 * and the other tracks whether the current update was a nested update.
 * The first value gets synced to the second at the start of the render phase.
 */var currentUpdateIsNested=false;var nestedUpdateScheduled=false;function isCurrentUpdateNested(){return currentUpdateIsNested;}function markNestedUpdateScheduled(){{nestedUpdateScheduled=true;}}function resetNestedUpdateFlag(){{currentUpdateIsNested=false;nestedUpdateScheduled=false;}}function syncNestedUpdateFlag(){{currentUpdateIsNested=nestedUpdateScheduled;nestedUpdateScheduled=false;}}function getCommitTime(){return commitTime;}function recordCommitTime(){commitTime=now$1();}function startProfilerTimer(fiber){profilerStartTime=now$1();if(fiber.actualStartTime<0){fiber.actualStartTime=now$1();}}function stopProfilerTimerIfRunning(fiber){profilerStartTime=-1;}function stopProfilerTimerIfRunningAndRecordDelta(fiber,overrideBaseTime){if(profilerStartTime>=0){var elapsedTime=now$1()-profilerStartTime;fiber.actualDuration+=elapsedTime;if(overrideBaseTime){fiber.selfBaseDuration=elapsedTime;}profilerStartTime=-1;}}function recordLayoutEffectDuration(fiber){if(layoutEffectStartTime>=0){var elapsedTime=now$1()-layoutEffectStartTime;layoutEffectStartTime=-1;// Store duration on the next nearest Profiler ancestor
// Or the root (for the DevTools Profiler to read)
var parentFiber=fiber["return"];while(parentFiber!==null){switch(parentFiber.tag){case HostRoot:var root=parentFiber.stateNode;root.effectDuration+=elapsedTime;return;case Profiler:var parentStateNode=parentFiber.stateNode;parentStateNode.effectDuration+=elapsedTime;return;}parentFiber=parentFiber["return"];}}}function recordPassiveEffectDuration(fiber){if(passiveEffectStartTime>=0){var elapsedTime=now$1()-passiveEffectStartTime;passiveEffectStartTime=-1;// Store duration on the next nearest Profiler ancestor
// Or the root (for the DevTools Profiler to read)
var parentFiber=fiber["return"];while(parentFiber!==null){switch(parentFiber.tag){case HostRoot:var root=parentFiber.stateNode;if(root!==null){root.passiveEffectDuration+=elapsedTime;}return;case Profiler:var parentStateNode=parentFiber.stateNode;if(parentStateNode!==null){// Detached fibers have their state node cleared out.
// In this case, the return pointer is also cleared out,
// so we won't be able to report the time spent in this Profiler's subtree.
parentStateNode.passiveEffectDuration+=elapsedTime;}return;}parentFiber=parentFiber["return"];}}}function startLayoutEffectTimer(){layoutEffectStartTime=now$1();}function startPassiveEffectTimer(){passiveEffectStartTime=now$1();}function transferActualDuration(fiber){// Transfer time spent rendering these children so we don't lose it
// after we rerender. This is used as a helper in special cases
// where we should count the work of multiple passes.
var child=fiber.child;while(child){fiber.actualDuration+=child.actualDuration;child=child.sibling;}}function resolveDefaultProps(Component,baseProps){if(Component&&Component.defaultProps){// Resolve default props. Taken from ReactElement
var props=assign({},baseProps);var defaultProps=Component.defaultProps;for(var propName in defaultProps){if(props[propName]===undefined){props[propName]=defaultProps[propName];}}return props;}return baseProps;}var fakeInternalInstance={};var didWarnAboutStateAssignmentForComponent;var didWarnAboutUninitializedState;var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;var didWarnAboutLegacyLifecyclesAndDerivedState;var didWarnAboutUndefinedDerivedState;var warnOnUndefinedDerivedState;var warnOnInvalidCallback;var didWarnAboutDirectlyAssigningPropsToState;var didWarnAboutContextTypeAndContextTypes;var didWarnAboutInvalidateContextType;var didWarnAboutLegacyContext$1;{didWarnAboutStateAssignmentForComponent=new Set();didWarnAboutUninitializedState=new Set();didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate=new Set();didWarnAboutLegacyLifecyclesAndDerivedState=new Set();didWarnAboutDirectlyAssigningPropsToState=new Set();didWarnAboutUndefinedDerivedState=new Set();didWarnAboutContextTypeAndContextTypes=new Set();didWarnAboutInvalidateContextType=new Set();didWarnAboutLegacyContext$1=new Set();var didWarnOnInvalidCallback=new Set();warnOnInvalidCallback=function warnOnInvalidCallback(callback,callerName){if(callback===null||typeof callback==='function'){return;}var key=callerName+'_'+callback;if(!didWarnOnInvalidCallback.has(key)){didWarnOnInvalidCallback.add(key);error('%s(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callerName,callback);}};warnOnUndefinedDerivedState=function warnOnUndefinedDerivedState(type,partialState){if(partialState===undefined){var componentName=getComponentNameFromType(type)||'Component';if(!didWarnAboutUndefinedDerivedState.has(componentName)){didWarnAboutUndefinedDerivedState.add(componentName);error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. '+'You have returned undefined.',componentName);}}};// This is so gross but it's at least non-critical and can be removed if
// it causes problems. This is meant to give a nicer error message for
// ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
// ...)) which otherwise throws a "_processChildContext is not a function"
// exception.
Object.defineProperty(fakeInternalInstance,'_processChildContext',{enumerable:false,value:function value(){throw new Error('_processChildContext is not available in React 16+. This likely '+'means you have multiple copies of React and are attempting to nest '+'a React 15 tree inside a React 16 tree using '+"unstable_renderSubtreeIntoContainer, which isn't supported. Try "+'to make sure you have only one copy of React (and ideally, switch '+'to ReactDOM.createPortal).');}});Object.freeze(fakeInternalInstance);}function applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,nextProps){var prevState=workInProgress.memoizedState;var partialState=getDerivedStateFromProps(nextProps,prevState);{if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{// Invoke the function an extra time to help detect side-effects.
partialState=getDerivedStateFromProps(nextProps,prevState);}finally{setIsStrictModeForDevtools(false);}}warnOnUndefinedDerivedState(ctor,partialState);}// Merge the partial state and the previous state.
var memoizedState=partialState===null||partialState===undefined?prevState:assign({},prevState,partialState);workInProgress.memoizedState=memoizedState;// Once the update queue is empty, persist the derived state onto the
// base state.
if(workInProgress.lanes===NoLanes){// Queue is always non-null for classes
var updateQueue=workInProgress.updateQueue;updateQueue.baseState=memoizedState;}}var classComponentUpdater={isMounted:isMounted,enqueueSetState:function enqueueSetState(inst,payload,callback){var fiber=get(inst);var eventTime=requestEventTime();var lane=requestUpdateLane(fiber);var update=createUpdate(eventTime,lane);update.payload=payload;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback(callback,'setState');}update.callback=callback;}var root=enqueueUpdate(fiber,update,lane);if(root!==null){scheduleUpdateOnFiber(root,fiber,lane,eventTime);entangleTransitions(root,fiber,lane);}{markStateUpdateScheduled(fiber,lane);}},enqueueReplaceState:function enqueueReplaceState(inst,payload,callback){var fiber=get(inst);var eventTime=requestEventTime();var lane=requestUpdateLane(fiber);var update=createUpdate(eventTime,lane);update.tag=ReplaceState;update.payload=payload;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback(callback,'replaceState');}update.callback=callback;}var root=enqueueUpdate(fiber,update,lane);if(root!==null){scheduleUpdateOnFiber(root,fiber,lane,eventTime);entangleTransitions(root,fiber,lane);}{markStateUpdateScheduled(fiber,lane);}},enqueueForceUpdate:function enqueueForceUpdate(inst,callback){var fiber=get(inst);var eventTime=requestEventTime();var lane=requestUpdateLane(fiber);var update=createUpdate(eventTime,lane);update.tag=ForceUpdate;if(callback!==undefined&&callback!==null){{warnOnInvalidCallback(callback,'forceUpdate');}update.callback=callback;}var root=enqueueUpdate(fiber,update,lane);if(root!==null){scheduleUpdateOnFiber(root,fiber,lane,eventTime);entangleTransitions(root,fiber,lane);}{markForceUpdateScheduled(fiber,lane);}}};function checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext){var instance=workInProgress.stateNode;if(typeof instance.shouldComponentUpdate==='function'){var shouldUpdate=instance.shouldComponentUpdate(newProps,newState,nextContext);{if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{// Invoke the function an extra time to help detect side-effects.
shouldUpdate=instance.shouldComponentUpdate(newProps,newState,nextContext);}finally{setIsStrictModeForDevtools(false);}}if(shouldUpdate===undefined){error('%s.shouldComponentUpdate(): Returned undefined instead of a '+'boolean value. Make sure to return true or false.',getComponentNameFromType(ctor)||'Component');}}return shouldUpdate;}if(ctor.prototype&&ctor.prototype.isPureReactComponent){return!shallowEqual(oldProps,newProps)||!shallowEqual(oldState,newState);}return true;}function checkClassInstance(workInProgress,ctor,newProps){var instance=workInProgress.stateNode;{var name=getComponentNameFromType(ctor)||'Component';var renderPresent=instance.render;if(!renderPresent){if(ctor.prototype&&typeof ctor.prototype.render==='function'){error('%s(...): No `render` method found on the returned component '+'instance: did you accidentally return an object from the constructor?',name);}else{error('%s(...): No `render` method found on the returned component '+'instance: you may have forgotten to define `render`.',name);}}if(instance.getInitialState&&!instance.getInitialState.isReactClassApproved&&!instance.state){error('getInitialState was defined on %s, a plain JavaScript class. '+'This is only supported for classes created using React.createClass. '+'Did you mean to define a state property instead?',name);}if(instance.getDefaultProps&&!instance.getDefaultProps.isReactClassApproved){error('getDefaultProps was defined on %s, a plain JavaScript class. '+'This is only supported for classes created using React.createClass. '+'Use a static property to define defaultProps instead.',name);}if(instance.propTypes){error('propTypes was defined as an instance property on %s. Use a static '+'property to define propTypes instead.',name);}if(instance.contextType){error('contextType was defined as an instance property on %s. Use a static '+'property to define contextType instead.',name);}{if(ctor.childContextTypes&&!didWarnAboutLegacyContext$1.has(ctor)&&// Strict Mode has its own warning for legacy context, so we can skip
// this one.
(workInProgress.mode&StrictLegacyMode)===NoMode){didWarnAboutLegacyContext$1.add(ctor);error('%s uses the legacy childContextTypes API which is no longer '+'supported and will be removed in the next major release. Use '+'React.createContext() instead\n\n.'+'Learn more about this warning here: https://reactjs.org/link/legacy-context',name);}if(ctor.contextTypes&&!didWarnAboutLegacyContext$1.has(ctor)&&// Strict Mode has its own warning for legacy context, so we can skip
// this one.
(workInProgress.mode&StrictLegacyMode)===NoMode){didWarnAboutLegacyContext$1.add(ctor);error('%s uses the legacy contextTypes API which is no longer supported '+'and will be removed in the next major release. Use '+'React.createContext() with static contextType instead.\n\n'+'Learn more about this warning here: https://reactjs.org/link/legacy-context',name);}if(instance.contextTypes){error('contextTypes was defined as an instance property on %s. Use a static '+'property to define contextTypes instead.',name);}if(ctor.contextType&&ctor.contextTypes&&!didWarnAboutContextTypeAndContextTypes.has(ctor)){didWarnAboutContextTypeAndContextTypes.add(ctor);error('%s declares both contextTypes and contextType static properties. '+'The legacy contextTypes property will be ignored.',name);}}if(typeof instance.componentShouldUpdate==='function'){error('%s has a method called '+'componentShouldUpdate(). Did you mean shouldComponentUpdate()? '+'The name is phrased as a question because the function is '+'expected to return a value.',name);}if(ctor.prototype&&ctor.prototype.isPureReactComponent&&typeof instance.shouldComponentUpdate!=='undefined'){error('%s has a method called shouldComponentUpdate(). '+'shouldComponentUpdate should not be used when extending React.PureComponent. '+'Please extend React.Component if shouldComponentUpdate is used.',getComponentNameFromType(ctor)||'A pure component');}if(typeof instance.componentDidUnmount==='function'){error('%s has a method called '+'componentDidUnmount(). But there is no such lifecycle method. '+'Did you mean componentWillUnmount()?',name);}if(typeof instance.componentDidReceiveProps==='function'){error('%s has a method called '+'componentDidReceiveProps(). But there is no such lifecycle method. '+'If you meant to update the state in response to changing props, '+'use componentWillReceiveProps(). If you meant to fetch data or '+'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',name);}if(typeof instance.componentWillRecieveProps==='function'){error('%s has a method called '+'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',name);}if(typeof instance.UNSAFE_componentWillRecieveProps==='function'){error('%s has a method called '+'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',name);}var hasMutatedProps=instance.props!==newProps;if(instance.props!==undefined&&hasMutatedProps){error('%s(...): When calling super() in `%s`, make sure to pass '+"up the same props that your component's constructor was passed.",name,name);}if(instance.defaultProps){error('Setting defaultProps as an instance property on %s is not supported and will be ignored.'+' Instead, define defaultProps as a static property on %s.',name,name);}if(typeof instance.getSnapshotBeforeUpdate==='function'&&typeof instance.componentDidUpdate!=='function'&&!didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)){didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). '+'This component defines getSnapshotBeforeUpdate() only.',getComponentNameFromType(ctor));}if(typeof instance.getDerivedStateFromProps==='function'){error('%s: getDerivedStateFromProps() is defined as an instance method '+'and will be ignored. Instead, declare it as a static method.',name);}if(typeof instance.getDerivedStateFromError==='function'){error('%s: getDerivedStateFromError() is defined as an instance method '+'and will be ignored. Instead, declare it as a static method.',name);}if(typeof ctor.getSnapshotBeforeUpdate==='function'){error('%s: getSnapshotBeforeUpdate() is defined as a static method '+'and will be ignored. Instead, declare it as an instance method.',name);}var _state=instance.state;if(_state&&(_typeof(_state)!=='object'||isArray(_state))){error('%s.state: must be set to an object or null',name);}if(typeof instance.getChildContext==='function'&&_typeof(ctor.childContextTypes)!=='object'){error('%s.getChildContext(): childContextTypes must be defined in order to '+'use getChildContext().',name);}}}function adoptClassInstance(workInProgress,instance){instance.updater=classComponentUpdater;workInProgress.stateNode=instance;// The instance needs access to the fiber so that it can schedule updates
set(instance,workInProgress);{instance._reactInternalInstance=fakeInternalInstance;}}function constructClassInstance(workInProgress,ctor,props){var isLegacyContextConsumer=false;var unmaskedContext=emptyContextObject;var context=emptyContextObject;var contextType=ctor.contextType;{if('contextType'in ctor){var isValid=// Allow null for conditional declaration
contextType===null||contextType!==undefined&&contextType.$$typeof===REACT_CONTEXT_TYPE&&contextType._context===undefined;// Not a <Context.Consumer>
if(!isValid&&!didWarnAboutInvalidateContextType.has(ctor)){didWarnAboutInvalidateContextType.add(ctor);var addendum='';if(contextType===undefined){addendum=' However, it is set to undefined. '+'This can be caused by a typo or by mixing up named and default imports. '+'This can also happen due to a circular dependency, so '+'try moving the createContext() call to a separate file.';}else if(_typeof(contextType)!=='object'){addendum=' However, it is set to a '+_typeof(contextType)+'.';}else if(contextType.$$typeof===REACT_PROVIDER_TYPE){addendum=' Did you accidentally pass the Context.Provider instead?';}else if(contextType._context!==undefined){// <Context.Consumer>
addendum=' Did you accidentally pass the Context.Consumer instead?';}else{addendum=' However, it is set to an object with keys {'+Object.keys(contextType).join(', ')+'}.';}error('%s defines an invalid contextType. '+'contextType should point to the Context object returned by React.createContext().%s',getComponentNameFromType(ctor)||'Component',addendum);}}}if(_typeof(contextType)==='object'&&contextType!==null){context=_readContext(contextType);}else{unmaskedContext=getUnmaskedContext(workInProgress,ctor,true);var contextTypes=ctor.contextTypes;isLegacyContextConsumer=contextTypes!==null&&contextTypes!==undefined;context=isLegacyContextConsumer?getMaskedContext(workInProgress,unmaskedContext):emptyContextObject;}var instance=new ctor(props,context);// Instantiate twice to help detect side-effects.
{if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{instance=new ctor(props,context);// eslint-disable-line no-new
}finally{setIsStrictModeForDevtools(false);}}}var state=workInProgress.memoizedState=instance.state!==null&&instance.state!==undefined?instance.state:null;adoptClassInstance(workInProgress,instance);{if(typeof ctor.getDerivedStateFromProps==='function'&&state===null){var componentName=getComponentNameFromType(ctor)||'Component';if(!didWarnAboutUninitializedState.has(componentName)){didWarnAboutUninitializedState.add(componentName);error('`%s` uses `getDerivedStateFromProps` but its initial state is '+'%s. This is not recommended. Instead, define the initial state by '+'assigning an object to `this.state` in the constructor of `%s`. '+'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',componentName,instance.state===null?'null':'undefined',componentName);}}// If new component APIs are defined, "unsafe" lifecycles won't be called.
// Warn about these lifecycles if they are present.
// Don't warn about react-lifecycles-compat polyfilled methods though.
if(typeof ctor.getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function'){var foundWillMountName=null;var foundWillReceivePropsName=null;var foundWillUpdateName=null;if(typeof instance.componentWillMount==='function'&&instance.componentWillMount.__suppressDeprecationWarning!==true){foundWillMountName='componentWillMount';}else if(typeof instance.UNSAFE_componentWillMount==='function'){foundWillMountName='UNSAFE_componentWillMount';}if(typeof instance.componentWillReceiveProps==='function'&&instance.componentWillReceiveProps.__suppressDeprecationWarning!==true){foundWillReceivePropsName='componentWillReceiveProps';}else if(typeof instance.UNSAFE_componentWillReceiveProps==='function'){foundWillReceivePropsName='UNSAFE_componentWillReceiveProps';}if(typeof instance.componentWillUpdate==='function'&&instance.componentWillUpdate.__suppressDeprecationWarning!==true){foundWillUpdateName='componentWillUpdate';}else if(typeof instance.UNSAFE_componentWillUpdate==='function'){foundWillUpdateName='UNSAFE_componentWillUpdate';}if(foundWillMountName!==null||foundWillReceivePropsName!==null||foundWillUpdateName!==null){var _componentName=getComponentNameFromType(ctor)||'Component';var newApiName=typeof ctor.getDerivedStateFromProps==='function'?'getDerivedStateFromProps()':'getSnapshotBeforeUpdate()';if(!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)){didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n'+'%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n'+'The above lifecycles should be removed. Learn more about this warning here:\n'+'https://reactjs.org/link/unsafe-component-lifecycles',_componentName,newApiName,foundWillMountName!==null?"\n  "+foundWillMountName:'',foundWillReceivePropsName!==null?"\n  "+foundWillReceivePropsName:'',foundWillUpdateName!==null?"\n  "+foundWillUpdateName:'');}}}}// Cache unmasked context so we can avoid recreating masked context unless necessary.
// ReactFiberContext usually updates this cache but can't for newly-created instances.
if(isLegacyContextConsumer){cacheContext(workInProgress,unmaskedContext,context);}return instance;}function callComponentWillMount(workInProgress,instance){var oldState=instance.state;if(typeof instance.componentWillMount==='function'){instance.componentWillMount();}if(typeof instance.UNSAFE_componentWillMount==='function'){instance.UNSAFE_componentWillMount();}if(oldState!==instance.state){{error('%s.componentWillMount(): Assigning directly to this.state is '+"deprecated (except inside a component's "+'constructor). Use setState instead.',getComponentNameFromFiber(workInProgress)||'Component');}classComponentUpdater.enqueueReplaceState(instance,instance.state,null);}}function callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext){var oldState=instance.state;if(typeof instance.componentWillReceiveProps==='function'){instance.componentWillReceiveProps(newProps,nextContext);}if(typeof instance.UNSAFE_componentWillReceiveProps==='function'){instance.UNSAFE_componentWillReceiveProps(newProps,nextContext);}if(instance.state!==oldState){{var componentName=getComponentNameFromFiber(workInProgress)||'Component';if(!didWarnAboutStateAssignmentForComponent.has(componentName)){didWarnAboutStateAssignmentForComponent.add(componentName);error('%s.componentWillReceiveProps(): Assigning directly to '+"this.state is deprecated (except inside a component's "+'constructor). Use setState instead.',componentName);}}classComponentUpdater.enqueueReplaceState(instance,instance.state,null);}}// Invokes the mount life-cycles on a previously never rendered instance.
function mountClassInstance(workInProgress,ctor,newProps,renderLanes){{checkClassInstance(workInProgress,ctor,newProps);}var instance=workInProgress.stateNode;instance.props=newProps;instance.state=workInProgress.memoizedState;instance.refs={};initializeUpdateQueue(workInProgress);var contextType=ctor.contextType;if(_typeof(contextType)==='object'&&contextType!==null){instance.context=_readContext(contextType);}else{var unmaskedContext=getUnmaskedContext(workInProgress,ctor,true);instance.context=getMaskedContext(workInProgress,unmaskedContext);}{if(instance.state===newProps){var componentName=getComponentNameFromType(ctor)||'Component';if(!didWarnAboutDirectlyAssigningPropsToState.has(componentName)){didWarnAboutDirectlyAssigningPropsToState.add(componentName);error('%s: It is not recommended to assign props directly to state '+"because updates to props won't be reflected in state. "+'In most cases, it is better to use props directly.',componentName);}}if(workInProgress.mode&StrictLegacyMode){ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress,instance);}{ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress,instance);}}instance.state=workInProgress.memoizedState;var getDerivedStateFromProps=ctor.getDerivedStateFromProps;if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);instance.state=workInProgress.memoizedState;}// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(typeof ctor.getDerivedStateFromProps!=='function'&&typeof instance.getSnapshotBeforeUpdate!=='function'&&(typeof instance.UNSAFE_componentWillMount==='function'||typeof instance.componentWillMount==='function')){callComponentWillMount(workInProgress,instance);// If we had additional state updates during this life-cycle, let's
// process them now.
processUpdateQueue(workInProgress,newProps,instance,renderLanes);instance.state=workInProgress.memoizedState;}if(typeof instance.componentDidMount==='function'){var fiberFlags=Update;{fiberFlags|=LayoutStatic;}if((workInProgress.mode&StrictEffectsMode)!==NoMode){fiberFlags|=MountLayoutDev;}workInProgress.flags|=fiberFlags;}}function resumeMountClassInstance(workInProgress,ctor,newProps,renderLanes){var instance=workInProgress.stateNode;var oldProps=workInProgress.memoizedProps;instance.props=oldProps;var oldContext=instance.context;var contextType=ctor.contextType;var nextContext=emptyContextObject;if(_typeof(contextType)==='object'&&contextType!==null){nextContext=_readContext(contextType);}else{var nextLegacyUnmaskedContext=getUnmaskedContext(workInProgress,ctor,true);nextContext=getMaskedContext(workInProgress,nextLegacyUnmaskedContext);}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;var hasNewLifecycles=typeof getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function';// Note: During these life-cycles, instance.props/instance.state are what
// ever the previously attempted to render - not the "current". However,
// during componentDidUpdate we pass the "current" props.
// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillReceiveProps==='function'||typeof instance.componentWillReceiveProps==='function')){if(oldProps!==newProps||oldContext!==nextContext){callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext);}}resetHasForceUpdateBeforeProcessing();var oldState=workInProgress.memoizedState;var newState=instance.state=oldState;processUpdateQueue(workInProgress,newProps,instance,renderLanes);newState=workInProgress.memoizedState;if(oldProps===newProps&&oldState===newState&&!hasContextChanged()&&!checkHasForceUpdateAfterProcessing()){// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidMount==='function'){var fiberFlags=Update;{fiberFlags|=LayoutStatic;}if((workInProgress.mode&StrictEffectsMode)!==NoMode){fiberFlags|=MountLayoutDev;}workInProgress.flags|=fiberFlags;}return false;}if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);newState=workInProgress.memoizedState;}var shouldUpdate=checkHasForceUpdateAfterProcessing()||checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext);if(shouldUpdate){// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillMount==='function'||typeof instance.componentWillMount==='function')){if(typeof instance.componentWillMount==='function'){instance.componentWillMount();}if(typeof instance.UNSAFE_componentWillMount==='function'){instance.UNSAFE_componentWillMount();}}if(typeof instance.componentDidMount==='function'){var _fiberFlags=Update;{_fiberFlags|=LayoutStatic;}if((workInProgress.mode&StrictEffectsMode)!==NoMode){_fiberFlags|=MountLayoutDev;}workInProgress.flags|=_fiberFlags;}}else{// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidMount==='function'){var _fiberFlags2=Update;{_fiberFlags2|=LayoutStatic;}if((workInProgress.mode&StrictEffectsMode)!==NoMode){_fiberFlags2|=MountLayoutDev;}workInProgress.flags|=_fiberFlags2;}// If shouldComponentUpdate returned false, we should still update the
// memoized state to indicate that this work can be reused.
workInProgress.memoizedProps=newProps;workInProgress.memoizedState=newState;}// Update the existing instance's state, props, and context pointers even
// if shouldComponentUpdate returns false.
instance.props=newProps;instance.state=newState;instance.context=nextContext;return shouldUpdate;}// Invokes the update life-cycles and returns false if it shouldn't rerender.
function updateClassInstance(current,workInProgress,ctor,newProps,renderLanes){var instance=workInProgress.stateNode;cloneUpdateQueue(current,workInProgress);var unresolvedOldProps=workInProgress.memoizedProps;var oldProps=workInProgress.type===workInProgress.elementType?unresolvedOldProps:resolveDefaultProps(workInProgress.type,unresolvedOldProps);instance.props=oldProps;var unresolvedNewProps=workInProgress.pendingProps;var oldContext=instance.context;var contextType=ctor.contextType;var nextContext=emptyContextObject;if(_typeof(contextType)==='object'&&contextType!==null){nextContext=_readContext(contextType);}else{var nextUnmaskedContext=getUnmaskedContext(workInProgress,ctor,true);nextContext=getMaskedContext(workInProgress,nextUnmaskedContext);}var getDerivedStateFromProps=ctor.getDerivedStateFromProps;var hasNewLifecycles=typeof getDerivedStateFromProps==='function'||typeof instance.getSnapshotBeforeUpdate==='function';// Note: During these life-cycles, instance.props/instance.state are what
// ever the previously attempted to render - not the "current". However,
// during componentDidUpdate we pass the "current" props.
// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillReceiveProps==='function'||typeof instance.componentWillReceiveProps==='function')){if(unresolvedOldProps!==unresolvedNewProps||oldContext!==nextContext){callComponentWillReceiveProps(workInProgress,instance,newProps,nextContext);}}resetHasForceUpdateBeforeProcessing();var oldState=workInProgress.memoizedState;var newState=instance.state=oldState;processUpdateQueue(workInProgress,newProps,instance,renderLanes);newState=workInProgress.memoizedState;if(unresolvedOldProps===unresolvedNewProps&&oldState===newState&&!hasContextChanged()&&!checkHasForceUpdateAfterProcessing()&&!enableLazyContextPropagation){// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidUpdate==='function'){if(unresolvedOldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.flags|=Update;}}if(typeof instance.getSnapshotBeforeUpdate==='function'){if(unresolvedOldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.flags|=Snapshot;}}return false;}if(typeof getDerivedStateFromProps==='function'){applyDerivedStateFromProps(workInProgress,ctor,getDerivedStateFromProps,newProps);newState=workInProgress.memoizedState;}var shouldUpdate=checkHasForceUpdateAfterProcessing()||checkShouldComponentUpdate(workInProgress,ctor,oldProps,newProps,oldState,newState,nextContext)||// TODO: In some cases, we'll end up checking if context has changed twice,
// both before and after `shouldComponentUpdate` has been called. Not ideal,
// but I'm loath to refactor this function. This only happens for memoized
// components so it's not that common.
enableLazyContextPropagation;if(shouldUpdate){// In order to support react-lifecycles-compat polyfilled components,
// Unsafe lifecycles should not be invoked for components using the new APIs.
if(!hasNewLifecycles&&(typeof instance.UNSAFE_componentWillUpdate==='function'||typeof instance.componentWillUpdate==='function')){if(typeof instance.componentWillUpdate==='function'){instance.componentWillUpdate(newProps,newState,nextContext);}if(typeof instance.UNSAFE_componentWillUpdate==='function'){instance.UNSAFE_componentWillUpdate(newProps,newState,nextContext);}}if(typeof instance.componentDidUpdate==='function'){workInProgress.flags|=Update;}if(typeof instance.getSnapshotBeforeUpdate==='function'){workInProgress.flags|=Snapshot;}}else{// If an update was already in progress, we should schedule an Update
// effect even though we're bailing out, so that cWU/cDU are called.
if(typeof instance.componentDidUpdate==='function'){if(unresolvedOldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.flags|=Update;}}if(typeof instance.getSnapshotBeforeUpdate==='function'){if(unresolvedOldProps!==current.memoizedProps||oldState!==current.memoizedState){workInProgress.flags|=Snapshot;}}// If shouldComponentUpdate returned false, we should still update the
// memoized props/state to indicate that this work can be reused.
workInProgress.memoizedProps=newProps;workInProgress.memoizedState=newState;}// Update the existing instance's state, props, and context pointers even
// if shouldComponentUpdate returns false.
instance.props=newProps;instance.state=newState;instance.context=nextContext;return shouldUpdate;}function createCapturedValueAtFiber(value,source){// If the value is an error, call this function immediately after it is thrown
// so the stack is accurate.
return{value:value,source:source,stack:getStackByFiberInDevAndProd(source),digest:null};}function createCapturedValue(value,digest,stack){return{value:value,source:null,stack:stack!=null?stack:null,digest:digest!=null?digest:null};}// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(boundary,errorInfo){return true;}function logCapturedError(boundary,errorInfo){try{var logError=showErrorDialog(boundary,errorInfo);// Allow injected showErrorDialog() to prevent default console.error logging.
// This enables renderers like ReactNative to better manage redbox behavior.
if(logError===false){return;}var error=errorInfo.value;if(true){var source=errorInfo.source;var stack=errorInfo.stack;var componentStack=stack!==null?stack:'';// Browsers support silencing uncaught errors by calling
// `preventDefault()` in window `error` handler.
// We record this information as an expando on the error.
if(error!=null&&error._suppressLogging){if(boundary.tag===ClassComponent){// The error is recoverable and was silenced.
// Ignore it and don't print the stack addendum.
// This is handy for testing error boundaries without noise.
return;}// The error is fatal. Since the silencing might have
// been accidental, we'll surface it anyway.
// However, the browser would have silenced the original error
// so we'll print it first, and then print the stack addendum.
console['error'](error);// Don't transform to our wrapper
// For a more detailed description of this block, see:
// https://github.com/facebook/react/pull/13384
}var componentName=source?getComponentNameFromFiber(source):null;var componentNameMessage=componentName?"The above error occurred in the <"+componentName+"> component:":'The above error occurred in one of your React components:';var errorBoundaryMessage;if(boundary.tag===HostRoot){errorBoundaryMessage='Consider adding an error boundary to your tree to customize error handling behavior.\n'+'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';}else{var errorBoundaryName=getComponentNameFromFiber(boundary)||'Anonymous';errorBoundaryMessage="React will try to recreate this component tree from scratch "+("using the error boundary you provided, "+errorBoundaryName+".");}var combinedMessage=componentNameMessage+"\n"+componentStack+"\n\n"+(""+errorBoundaryMessage);// In development, we provide our own message with just the component stack.
// We don't include the original error message and JS stack because the browser
// has already printed it. Even if the application swallows the error, it is still
// displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.
console['error'](combinedMessage);// Don't transform to our wrapper
}else{}}catch(e){// This method must not throw, or React internal state will get messed up.
// If console.error is overridden, or logCapturedError() shows a dialog that throws,
// we want to report this error outside of the normal stack as a last resort.
// https://github.com/facebook/react/issues/13188
setTimeout(function(){throw e;});}}var PossiblyWeakMap$1=typeof WeakMap==='function'?WeakMap:Map;function createRootErrorUpdate(fiber,errorInfo,lane){var update=createUpdate(NoTimestamp,lane);// Unmount the root by rendering null.
update.tag=CaptureUpdate;// Caution: React DevTools currently depends on this property
// being called "element".
update.payload={element:null};var error=errorInfo.value;update.callback=function(){onUncaughtError(error);logCapturedError(fiber,errorInfo);};return update;}function createClassErrorUpdate(fiber,errorInfo,lane){var update=createUpdate(NoTimestamp,lane);update.tag=CaptureUpdate;var getDerivedStateFromError=fiber.type.getDerivedStateFromError;if(typeof getDerivedStateFromError==='function'){var error$1=errorInfo.value;update.payload=function(){return getDerivedStateFromError(error$1);};update.callback=function(){{markFailedErrorBoundaryForHotReloading(fiber);}logCapturedError(fiber,errorInfo);};}var inst=fiber.stateNode;if(inst!==null&&typeof inst.componentDidCatch==='function'){update.callback=function callback(){{markFailedErrorBoundaryForHotReloading(fiber);}logCapturedError(fiber,errorInfo);if(typeof getDerivedStateFromError!=='function'){// To preserve the preexisting retry behavior of error boundaries,
// we keep track of which ones already failed during this batch.
// This gets reset before we yield back to the browser.
// TODO: Warn in strict mode if getDerivedStateFromError is
// not defined.
markLegacyErrorBoundaryAsFailed(this);}var error$1=errorInfo.value;var stack=errorInfo.stack;this.componentDidCatch(error$1,{componentStack:stack!==null?stack:''});{if(typeof getDerivedStateFromError!=='function'){// If componentDidCatch is the only error boundary method defined,
// then it needs to call setState to recover from errors.
// If no state update is scheduled then the boundary will swallow the error.
if(!includesSomeLane(fiber.lanes,SyncLane)){error('%s: Error boundaries should implement getDerivedStateFromError(). '+'In that method, return a state update to display an error message or fallback UI.',getComponentNameFromFiber(fiber)||'Unknown');}}}};}return update;}function attachPingListener(root,wakeable,lanes){// Attach a ping listener
//
// The data might resolve before we have a chance to commit the fallback. Or,
// in the case of a refresh, we'll never commit a fallback. So we need to
// attach a listener now. When it resolves ("pings"), we can decide whether to
// try rendering the tree again.
//
// Only attach a listener if one does not already exist for the lanes
// we're currently rendering (which acts like a "thread ID" here).
//
// We only need to do this in concurrent mode. Legacy Suspense always
// commits fallbacks synchronously, so there are no pings.
var pingCache=root.pingCache;var threadIDs;if(pingCache===null){pingCache=root.pingCache=new PossiblyWeakMap$1();threadIDs=new Set();pingCache.set(wakeable,threadIDs);}else{threadIDs=pingCache.get(wakeable);if(threadIDs===undefined){threadIDs=new Set();pingCache.set(wakeable,threadIDs);}}if(!threadIDs.has(lanes)){// Memoize using the thread ID to prevent redundant listeners.
threadIDs.add(lanes);var ping=pingSuspendedRoot.bind(null,root,wakeable,lanes);{if(isDevToolsPresent){// If we have pending work still, restore the original updaters
restorePendingUpdaters(root,lanes);}}wakeable.then(ping,ping);}}function attachRetryListener(suspenseBoundary,root,wakeable,lanes){// Retry listener
//
// If the fallback does commit, we need to attach a different type of
// listener. This one schedules an update on the Suspense boundary to turn
// the fallback state off.
//
// Stash the wakeable on the boundary fiber so we can access it in the
// commit phase.
//
// When the wakeable resolves, we'll attempt to render the boundary
// again ("retry").
var wakeables=suspenseBoundary.updateQueue;if(wakeables===null){var updateQueue=new Set();updateQueue.add(wakeable);suspenseBoundary.updateQueue=updateQueue;}else{wakeables.add(wakeable);}}function resetSuspendedComponent(sourceFiber,rootRenderLanes){// A legacy mode Suspense quirk, only relevant to hook components.
var tag=sourceFiber.tag;if((sourceFiber.mode&ConcurrentMode)===NoMode&&(tag===FunctionComponent||tag===ForwardRef||tag===SimpleMemoComponent)){var currentSource=sourceFiber.alternate;if(currentSource){sourceFiber.updateQueue=currentSource.updateQueue;sourceFiber.memoizedState=currentSource.memoizedState;sourceFiber.lanes=currentSource.lanes;}else{sourceFiber.updateQueue=null;sourceFiber.memoizedState=null;}}}function getNearestSuspenseBoundaryToCapture(returnFiber){var node=returnFiber;do{if(node.tag===SuspenseComponent&&shouldCaptureSuspense(node)){return node;}// This boundary already captured during this render. Continue to the next
// boundary.
node=node["return"];}while(node!==null);return null;}function markSuspenseBoundaryShouldCapture(suspenseBoundary,returnFiber,sourceFiber,root,rootRenderLanes){// This marks a Suspense boundary so that when we're unwinding the stack,
// it captures the suspended "exception" and does a second (fallback) pass.
if((suspenseBoundary.mode&ConcurrentMode)===NoMode){// Legacy Mode Suspense
//
// If the boundary is in legacy mode, we should *not*
// suspend the commit. Pretend as if the suspended component rendered
// null and keep rendering. When the Suspense boundary completes,
// we'll do a second pass to render the fallback.
if(suspenseBoundary===returnFiber){// Special case where we suspended while reconciling the children of
// a Suspense boundary's inner Offscreen wrapper fiber. This happens
// when a React.lazy component is a direct child of a
// Suspense boundary.
//
// Suspense boundaries are implemented as multiple fibers, but they
// are a single conceptual unit. The legacy mode behavior where we
// pretend the suspended fiber committed as `null` won't work,
// because in this case the "suspended" fiber is the inner
// Offscreen wrapper.
//
// Because the contents of the boundary haven't started rendering
// yet (i.e. nothing in the tree has partially rendered) we can
// switch to the regular, concurrent mode behavior: mark the
// boundary with ShouldCapture and enter the unwind phase.
suspenseBoundary.flags|=ShouldCapture;}else{suspenseBoundary.flags|=DidCapture;sourceFiber.flags|=ForceUpdateForLegacySuspense;// We're going to commit this fiber even though it didn't complete.
// But we shouldn't call any lifecycle methods or callbacks. Remove
// all lifecycle effect tags.
sourceFiber.flags&=~(LifecycleEffectMask|Incomplete);if(sourceFiber.tag===ClassComponent){var currentSourceFiber=sourceFiber.alternate;if(currentSourceFiber===null){// This is a new mount. Change the tag so it's not mistaken for a
// completed class component. For example, we should not call
// componentWillUnmount if it is deleted.
sourceFiber.tag=IncompleteClassComponent;}else{// When we try rendering again, we should not reuse the current fiber,
// since it's known to be in an inconsistent state. Use a force update to
// prevent a bail out.
var update=createUpdate(NoTimestamp,SyncLane);update.tag=ForceUpdate;enqueueUpdate(sourceFiber,update,SyncLane);}}// The source fiber did not complete. Mark it with Sync priority to
// indicate that it still has pending work.
sourceFiber.lanes=mergeLanes(sourceFiber.lanes,SyncLane);}return suspenseBoundary;}// Confirmed that the boundary is in a concurrent mode tree. Continue
// with the normal suspend path.
//
// After this we'll use a set of heuristics to determine whether this
// render pass will run to completion or restart or "suspend" the commit.
// The actual logic for this is spread out in different places.
//
// This first principle is that if we're going to suspend when we complete
// a root, then we should also restart if we get an update or ping that
// might unsuspend it, and vice versa. The only reason to suspend is
// because you think you might want to restart before committing. However,
// it doesn't make sense to restart only while in the period we're suspended.
//
// Restarting too aggressively is also not good because it starves out any
// intermediate loading state. So we use heuristics to determine when.
// Suspense Heuristics
//
// If nothing threw a Promise or all the same fallbacks are already showing,
// then don't suspend/restart.
//
// If this is an initial render of a new tree of Suspense boundaries and
// those trigger a fallback, then don't suspend/restart. We want to ensure
// that we can show the initial loading state as quickly as possible.
//
// If we hit a "Delayed" case, such as when we'd switch from content back into
// a fallback, then we should always suspend/restart. Transitions apply
// to this case. If none is defined, JND is used instead.
//
// If we're already showing a fallback and it gets "retried", allowing us to show
// another level, but there's still an inner boundary that would show a fallback,
// then we suspend/restart for 500ms since the last time we showed a fallback
// anywhere in the tree. This effectively throttles progressive loading into a
// consistent train of commits. This also gives us an opportunity to restart to
// get to the completed state slightly earlier.
//
// If there's ambiguity due to batching it's resolved in preference of:
// 1) "delayed", 2) "initial render", 3) "retry".
//
// We want to ensure that a "busy" state doesn't get force committed. We want to
// ensure that new initial loading states can commit as soon as possible.
suspenseBoundary.flags|=ShouldCapture;// TODO: I think we can remove this, since we now use `DidCapture` in
// the begin phase to prevent an early bailout.
suspenseBoundary.lanes=rootRenderLanes;return suspenseBoundary;}function throwException(root,returnFiber,sourceFiber,value,rootRenderLanes){// The source fiber did not complete.
sourceFiber.flags|=Incomplete;{if(isDevToolsPresent){// If we have pending work still, restore the original updaters
restorePendingUpdaters(root,rootRenderLanes);}}if(value!==null&&_typeof(value)==='object'&&typeof value.then==='function'){// This is a wakeable. The component suspended.
var wakeable=value;resetSuspendedComponent(sourceFiber);{if(getIsHydrating()&&sourceFiber.mode&ConcurrentMode){markDidThrowWhileHydratingDEV();}}var suspenseBoundary=getNearestSuspenseBoundaryToCapture(returnFiber);if(suspenseBoundary!==null){suspenseBoundary.flags&=~ForceClientRender;markSuspenseBoundaryShouldCapture(suspenseBoundary,returnFiber,sourceFiber,root,rootRenderLanes);// We only attach ping listeners in concurrent mode. Legacy Suspense always
// commits fallbacks synchronously, so there are no pings.
if(suspenseBoundary.mode&ConcurrentMode){attachPingListener(root,wakeable,rootRenderLanes);}attachRetryListener(suspenseBoundary,root,wakeable);return;}else{// No boundary was found. Unless this is a sync update, this is OK.
// We can suspend and wait for more data to arrive.
if(!includesSyncLane(rootRenderLanes)){// This is not a sync update. Suspend. Since we're not activating a
// Suspense boundary, this will unwind all the way to the root without
// performing a second pass to render a fallback. (This is arguably how
// refresh transitions should work, too, since we're not going to commit
// the fallbacks anyway.)
//
// This case also applies to initial hydration.
attachPingListener(root,wakeable,rootRenderLanes);renderDidSuspendDelayIfPossible();return;}// This is a sync/discrete update. We treat this case like an error
// because discrete renders are expected to produce a complete tree
// synchronously to maintain consistency with external state.
var uncaughtSuspenseError=new Error('A component suspended while responding to synchronous input. This '+'will cause the UI to be replaced with a loading indicator. To '+'fix, updates that suspend should be wrapped '+'with startTransition.');// If we're outside a transition, fall through to the regular error path.
// The error will be caught by the nearest suspense boundary.
value=uncaughtSuspenseError;}}else{// This is a regular error, not a Suspense wakeable.
if(getIsHydrating()&&sourceFiber.mode&ConcurrentMode){markDidThrowWhileHydratingDEV();var _suspenseBoundary=getNearestSuspenseBoundaryToCapture(returnFiber);// If the error was thrown during hydration, we may be able to recover by
// discarding the dehydrated content and switching to a client render.
// Instead of surfacing the error, find the nearest Suspense boundary
// and render it again without hydration.
if(_suspenseBoundary!==null){if((_suspenseBoundary.flags&ShouldCapture)===NoFlags){// Set a flag to indicate that we should try rendering the normal
// children again, not the fallback.
_suspenseBoundary.flags|=ForceClientRender;}markSuspenseBoundaryShouldCapture(_suspenseBoundary,returnFiber,sourceFiber,root,rootRenderLanes);// Even though the user may not be affected by this error, we should
// still log it so it can be fixed.
queueHydrationError(createCapturedValueAtFiber(value,sourceFiber));return;}}}value=createCapturedValueAtFiber(value,sourceFiber);renderDidError(value);// We didn't find a boundary that could handle this type of exception. Start
// over and traverse parent path again, this time treating the exception
// as an error.
var workInProgress=returnFiber;do{switch(workInProgress.tag){case HostRoot:{var _errorInfo=value;workInProgress.flags|=ShouldCapture;var lane=pickArbitraryLane(rootRenderLanes);workInProgress.lanes=mergeLanes(workInProgress.lanes,lane);var update=createRootErrorUpdate(workInProgress,_errorInfo,lane);enqueueCapturedUpdate(workInProgress,update);return;}case ClassComponent:// Capture and retry
var errorInfo=value;var ctor=workInProgress.type;var instance=workInProgress.stateNode;if((workInProgress.flags&DidCapture)===NoFlags&&(typeof ctor.getDerivedStateFromError==='function'||instance!==null&&typeof instance.componentDidCatch==='function'&&!isAlreadyFailedLegacyErrorBoundary(instance))){workInProgress.flags|=ShouldCapture;var _lane=pickArbitraryLane(rootRenderLanes);workInProgress.lanes=mergeLanes(workInProgress.lanes,_lane);// Schedule the error boundary to re-render using updated state
var _update=createClassErrorUpdate(workInProgress,errorInfo,_lane);enqueueCapturedUpdate(workInProgress,_update);return;}break;}workInProgress=workInProgress["return"];}while(workInProgress!==null);}function getSuspendedCache(){{return null;}// This function is called when a Suspense boundary suspends. It returns the
}var ReactCurrentOwner$1=ReactSharedInternals.ReactCurrentOwner;var didReceiveUpdate=false;var didWarnAboutBadClass;var didWarnAboutModulePatternComponent;var didWarnAboutContextTypeOnFunctionComponent;var didWarnAboutGetDerivedStateOnFunctionComponent;var didWarnAboutFunctionRefs;var didWarnAboutReassigningProps;var didWarnAboutRevealOrder;var didWarnAboutTailOptions;var didWarnAboutDefaultPropsOnFunctionComponent;{didWarnAboutBadClass={};didWarnAboutModulePatternComponent={};didWarnAboutContextTypeOnFunctionComponent={};didWarnAboutGetDerivedStateOnFunctionComponent={};didWarnAboutFunctionRefs={};didWarnAboutReassigningProps=false;didWarnAboutRevealOrder={};didWarnAboutTailOptions={};didWarnAboutDefaultPropsOnFunctionComponent={};}function reconcileChildren(current,workInProgress,nextChildren,renderLanes){if(current===null){// If this is a fresh new component that hasn't been rendered yet, we
// won't update its child set by applying minimal side-effects. Instead,
// we will add them all to the child before it gets rendered. That means
// we can optimize this reconciliation pass by not tracking side-effects.
workInProgress.child=mountChildFibers(workInProgress,null,nextChildren,renderLanes);}else{// If the current child is the same as the work in progress, it means that
// we haven't yet started any work on these children. Therefore, we use
// the clone algorithm to create a copy of all the current children.
// If we had any progressed work already, that is invalid at this point so
// let's throw it out.
workInProgress.child=reconcileChildFibers(workInProgress,current.child,nextChildren,renderLanes);}}function forceUnmountCurrentAndReconcile(current,workInProgress,nextChildren,renderLanes){// This function is fork of reconcileChildren. It's used in cases where we
// want to reconcile without matching against the existing set. This has the
// effect of all current children being unmounted; even if the type and key
// are the same, the old child is unmounted and a new child is created.
//
// To do this, we're going to go through the reconcile algorithm twice. In
// the first pass, we schedule a deletion for all the current children by
// passing null.
workInProgress.child=reconcileChildFibers(workInProgress,current.child,null,renderLanes);// In the second pass, we mount the new children. The trick here is that we
// pass null in place of where we usually pass the current child set. This has
// the effect of remounting all children regardless of whether their
// identities match.
workInProgress.child=reconcileChildFibers(workInProgress,null,nextChildren,renderLanes);}function updateForwardRef(current,workInProgress,Component,nextProps,renderLanes){// TODO: current can be non-null here even if the component
// hasn't yet mounted. This happens after the first render suspends.
// We'll need to figure out if this is fine or can cause issues.
{if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement
// because they're only guaranteed to be resolved here.
var innerPropTypes=Component.propTypes;if(innerPropTypes){checkPropTypes(innerPropTypes,nextProps,// Resolved props
'prop',getComponentNameFromType(Component));}}}var render=Component.render;var ref=workInProgress.ref;// The rest is a fork of updateFunctionComponent
var nextChildren;var hasId;prepareToReadContext(workInProgress,renderLanes);{markComponentRenderStarted(workInProgress);}{ReactCurrentOwner$1.current=workInProgress;setIsRendering(true);nextChildren=renderWithHooks(current,workInProgress,render,nextProps,ref,renderLanes);hasId=checkDidRenderIdHook();if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{nextChildren=renderWithHooks(current,workInProgress,render,nextProps,ref,renderLanes);hasId=checkDidRenderIdHook();}finally{setIsStrictModeForDevtools(false);}}setIsRendering(false);}{markComponentRenderStopped();}if(current!==null&&!didReceiveUpdate){bailoutHooks(current,workInProgress,renderLanes);return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}if(getIsHydrating()&&hasId){pushMaterializedTreeId(workInProgress);}// React DevTools reads this flag.
workInProgress.flags|=PerformedWork;reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}function updateMemoComponent(current,workInProgress,Component,nextProps,renderLanes){if(current===null){var type=Component.type;if(isSimpleFunctionComponent(type)&&Component.compare===null&&// SimpleMemoComponent codepath doesn't resolve outer props either.
Component.defaultProps===undefined){var resolvedType=type;{resolvedType=resolveFunctionForHotReloading(type);}// If this is a plain function component without default props,
// and with only the default shallow comparison, we upgrade it
// to a SimpleMemoComponent to allow fast path updates.
workInProgress.tag=SimpleMemoComponent;workInProgress.type=resolvedType;{validateFunctionComponentInDev(workInProgress,type);}return updateSimpleMemoComponent(current,workInProgress,resolvedType,nextProps,renderLanes);}{var innerPropTypes=type.propTypes;if(innerPropTypes){// Inner memo component props aren't currently validated in createElement.
// We could move it there, but we'd still need this for lazy code path.
checkPropTypes(innerPropTypes,nextProps,// Resolved props
'prop',getComponentNameFromType(type));}if(Component.defaultProps!==undefined){var componentName=getComponentNameFromType(type)||'Unknown';if(!didWarnAboutDefaultPropsOnFunctionComponent[componentName]){error('%s: Support for defaultProps will be removed from memo components '+'in a future major release. Use JavaScript default parameters instead.',componentName);didWarnAboutDefaultPropsOnFunctionComponent[componentName]=true;}}}var child=createFiberFromTypeAndProps(Component.type,null,nextProps,workInProgress,workInProgress.mode,renderLanes);child.ref=workInProgress.ref;child["return"]=workInProgress;workInProgress.child=child;return child;}{var _type=Component.type;var _innerPropTypes=_type.propTypes;if(_innerPropTypes){// Inner memo component props aren't currently validated in createElement.
// We could move it there, but we'd still need this for lazy code path.
checkPropTypes(_innerPropTypes,nextProps,// Resolved props
'prop',getComponentNameFromType(_type));}}var currentChild=current.child;// This is always exactly one child
var hasScheduledUpdateOrContext=checkScheduledUpdateOrContext(current,renderLanes);if(!hasScheduledUpdateOrContext){// This will be the props with resolved defaultProps,
// unlike current.memoizedProps which will be the unresolved ones.
var prevProps=currentChild.memoizedProps;// Default to shallow comparison
var compare=Component.compare;compare=compare!==null?compare:shallowEqual;if(compare(prevProps,nextProps)&&current.ref===workInProgress.ref){return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}}// React DevTools reads this flag.
workInProgress.flags|=PerformedWork;var newChild=createWorkInProgress(currentChild,nextProps);newChild.ref=workInProgress.ref;newChild["return"]=workInProgress;workInProgress.child=newChild;return newChild;}function updateSimpleMemoComponent(current,workInProgress,Component,nextProps,renderLanes){// TODO: current can be non-null here even if the component
// hasn't yet mounted. This happens when the inner render suspends.
// We'll need to figure out if this is fine or can cause issues.
{if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement
// because they're only guaranteed to be resolved here.
var outerMemoType=workInProgress.elementType;if(outerMemoType.$$typeof===REACT_LAZY_TYPE){// We warn when you define propTypes on lazy()
// so let's just skip over it to find memo() outer wrapper.
// Inner props for memo are validated later.
var lazyComponent=outerMemoType;var payload=lazyComponent._payload;var init=lazyComponent._init;try{outerMemoType=init(payload);}catch(x){outerMemoType=null;}// Inner propTypes will be validated in the function component path.
var outerPropTypes=outerMemoType&&outerMemoType.propTypes;if(outerPropTypes){checkPropTypes(outerPropTypes,nextProps,// Resolved (SimpleMemoComponent has no defaultProps)
'prop',getComponentNameFromType(outerMemoType));}}}}if(current!==null){var prevProps=current.memoizedProps;if(shallowEqual(prevProps,nextProps)&&current.ref===workInProgress.ref&&// Prevent bailout if the implementation changed due to hot reload.
workInProgress.type===current.type){didReceiveUpdate=false;// The props are shallowly equal. Reuse the previous props object, like we
// would during a normal fiber bailout.
//
// We don't have strong guarantees that the props object is referentially
// equal during updates where we can't bail out anyway — like if the props
// are shallowly equal, but there's a local state or context update in the
// same batch.
//
// However, as a principle, we should aim to make the behavior consistent
// across different ways of memoizing a component. For example, React.memo
// has a different internal Fiber layout if you pass a normal function
// component (SimpleMemoComponent) versus if you pass a different type
// like forwardRef (MemoComponent). But this is an implementation detail.
// Wrapping a component in forwardRef (or React.lazy, etc) shouldn't
// affect whether the props object is reused during a bailout.
workInProgress.pendingProps=nextProps=prevProps;if(!checkScheduledUpdateOrContext(current,renderLanes)){// The pending lanes were cleared at the beginning of beginWork. We're
// about to bail out, but there might be other lanes that weren't
// included in the current render. Usually, the priority level of the
// remaining updates is accumulated during the evaluation of the
// component (i.e. when processing the update queue). But since since
// we're bailing out early *without* evaluating the component, we need
// to account for it here, too. Reset to the value of the current fiber.
// NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
// because a MemoComponent fiber does not have hooks or an update queue;
// rather, it wraps around an inner component, which may or may not
// contains hooks.
// TODO: Move the reset at in beginWork out of the common path so that
// this is no longer necessary.
workInProgress.lanes=current.lanes;return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}else if((current.flags&ForceUpdateForLegacySuspense)!==NoFlags){// This is a special case that only exists for legacy mode.
// See https://github.com/facebook/react/pull/19216.
didReceiveUpdate=true;}}}return updateFunctionComponent(current,workInProgress,Component,nextProps,renderLanes);}function updateOffscreenComponent(current,workInProgress,renderLanes){var nextProps=workInProgress.pendingProps;var nextChildren=nextProps.children;var prevState=current!==null?current.memoizedState:null;if(nextProps.mode==='hidden'||enableLegacyHidden){// Rendering a hidden tree.
if((workInProgress.mode&ConcurrentMode)===NoMode){// In legacy sync mode, don't defer the subtree. Render it now.
// TODO: Consider how Offscreen should work with transitions in the future
var nextState={baseLanes:NoLanes,cachePool:null,transitions:null};workInProgress.memoizedState=nextState;pushRenderLanes(workInProgress,renderLanes);}else if(!includesSomeLane(renderLanes,OffscreenLane)){var spawnedCachePool=null;// We're hidden, and we're not rendering at Offscreen. We will bail out
// and resume this tree later.
var nextBaseLanes;if(prevState!==null){var prevBaseLanes=prevState.baseLanes;nextBaseLanes=mergeLanes(prevBaseLanes,renderLanes);}else{nextBaseLanes=renderLanes;}// Schedule this fiber to re-render at offscreen priority. Then bailout.
workInProgress.lanes=workInProgress.childLanes=laneToLanes(OffscreenLane);var _nextState={baseLanes:nextBaseLanes,cachePool:spawnedCachePool,transitions:null};workInProgress.memoizedState=_nextState;workInProgress.updateQueue=null;// to avoid a push/pop misalignment.
pushRenderLanes(workInProgress,nextBaseLanes);return null;}else{// This is the second render. The surrounding visible content has already
// committed. Now we resume rendering the hidden tree.
// Rendering at offscreen, so we can clear the base lanes.
var _nextState2={baseLanes:NoLanes,cachePool:null,transitions:null};workInProgress.memoizedState=_nextState2;// Push the lanes that were skipped when we bailed out.
var subtreeRenderLanes=prevState!==null?prevState.baseLanes:renderLanes;pushRenderLanes(workInProgress,subtreeRenderLanes);}}else{// Rendering a visible tree.
var _subtreeRenderLanes;if(prevState!==null){// We're going from hidden -> visible.
_subtreeRenderLanes=mergeLanes(prevState.baseLanes,renderLanes);workInProgress.memoizedState=null;}else{// We weren't previously hidden, and we still aren't, so there's nothing
// special to do. Need to push to the stack regardless, though, to avoid
// a push/pop misalignment.
_subtreeRenderLanes=renderLanes;}pushRenderLanes(workInProgress,_subtreeRenderLanes);}reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}// Note: These happen to have identical begin phases, for now. We shouldn't hold
function updateFragment(current,workInProgress,renderLanes){var nextChildren=workInProgress.pendingProps;reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}function updateMode(current,workInProgress,renderLanes){var nextChildren=workInProgress.pendingProps.children;reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}function updateProfiler(current,workInProgress,renderLanes){{workInProgress.flags|=Update;{// Reset effect durations for the next eventual effect phase.
// These are reset during render to allow the DevTools commit hook a chance to read them,
var stateNode=workInProgress.stateNode;stateNode.effectDuration=0;stateNode.passiveEffectDuration=0;}}var nextProps=workInProgress.pendingProps;var nextChildren=nextProps.children;reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}function markRef(current,workInProgress){var ref=workInProgress.ref;if(current===null&&ref!==null||current!==null&&current.ref!==ref){// Schedule a Ref effect
workInProgress.flags|=Ref;{workInProgress.flags|=RefStatic;}}}function updateFunctionComponent(current,workInProgress,Component,nextProps,renderLanes){{if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement
// because they're only guaranteed to be resolved here.
var innerPropTypes=Component.propTypes;if(innerPropTypes){checkPropTypes(innerPropTypes,nextProps,// Resolved props
'prop',getComponentNameFromType(Component));}}}var context;{var unmaskedContext=getUnmaskedContext(workInProgress,Component,true);context=getMaskedContext(workInProgress,unmaskedContext);}var nextChildren;var hasId;prepareToReadContext(workInProgress,renderLanes);{markComponentRenderStarted(workInProgress);}{ReactCurrentOwner$1.current=workInProgress;setIsRendering(true);nextChildren=renderWithHooks(current,workInProgress,Component,nextProps,context,renderLanes);hasId=checkDidRenderIdHook();if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{nextChildren=renderWithHooks(current,workInProgress,Component,nextProps,context,renderLanes);hasId=checkDidRenderIdHook();}finally{setIsStrictModeForDevtools(false);}}setIsRendering(false);}{markComponentRenderStopped();}if(current!==null&&!didReceiveUpdate){bailoutHooks(current,workInProgress,renderLanes);return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}if(getIsHydrating()&&hasId){pushMaterializedTreeId(workInProgress);}// React DevTools reads this flag.
workInProgress.flags|=PerformedWork;reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}function updateClassComponent(current,workInProgress,Component,nextProps,renderLanes){{// This is used by DevTools to force a boundary to error.
switch(shouldError(workInProgress)){case false:{var _instance=workInProgress.stateNode;var ctor=workInProgress.type;// TODO This way of resetting the error boundary state is a hack.
// Is there a better way to do this?
var tempInstance=new ctor(workInProgress.memoizedProps,_instance.context);var state=tempInstance.state;_instance.updater.enqueueSetState(_instance,state,null);break;}case true:{workInProgress.flags|=DidCapture;workInProgress.flags|=ShouldCapture;// eslint-disable-next-line react-internal/prod-error-codes
var error$1=new Error('Simulated error coming from DevTools');var lane=pickArbitraryLane(renderLanes);workInProgress.lanes=mergeLanes(workInProgress.lanes,lane);// Schedule the error boundary to re-render using updated state
var update=createClassErrorUpdate(workInProgress,createCapturedValueAtFiber(error$1,workInProgress),lane);enqueueCapturedUpdate(workInProgress,update);break;}}if(workInProgress.type!==workInProgress.elementType){// Lazy component props can't be validated in createElement
// because they're only guaranteed to be resolved here.
var innerPropTypes=Component.propTypes;if(innerPropTypes){checkPropTypes(innerPropTypes,nextProps,// Resolved props
'prop',getComponentNameFromType(Component));}}}// Push context providers early to prevent context stack mismatches.
// During mounting we don't know the child context yet as the instance doesn't exist.
// We will invalidate the child context in finishClassComponent() right after rendering.
var hasContext;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else{hasContext=false;}prepareToReadContext(workInProgress,renderLanes);var instance=workInProgress.stateNode;var shouldUpdate;if(instance===null){resetSuspendedCurrentOnMountInLegacyMode(current,workInProgress);// In the initial pass we might need to construct the instance.
constructClassInstance(workInProgress,Component,nextProps);mountClassInstance(workInProgress,Component,nextProps,renderLanes);shouldUpdate=true;}else if(current===null){// In a resume, we'll already have an instance we can reuse.
shouldUpdate=resumeMountClassInstance(workInProgress,Component,nextProps,renderLanes);}else{shouldUpdate=updateClassInstance(current,workInProgress,Component,nextProps,renderLanes);}var nextUnitOfWork=finishClassComponent(current,workInProgress,Component,shouldUpdate,hasContext,renderLanes);{var inst=workInProgress.stateNode;if(shouldUpdate&&inst.props!==nextProps){if(!didWarnAboutReassigningProps){error('It looks like %s is reassigning its own `this.props` while rendering. '+'This is not supported and can lead to confusing bugs.',getComponentNameFromFiber(workInProgress)||'a component');}didWarnAboutReassigningProps=true;}}return nextUnitOfWork;}function finishClassComponent(current,workInProgress,Component,shouldUpdate,hasContext,renderLanes){// Refs should update even if shouldComponentUpdate returns false
markRef(current,workInProgress);var didCaptureError=(workInProgress.flags&DidCapture)!==NoFlags;if(!shouldUpdate&&!didCaptureError){// Context providers should defer to sCU for rendering
if(hasContext){invalidateContextProvider(workInProgress,Component,false);}return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}var instance=workInProgress.stateNode;// Rerender
ReactCurrentOwner$1.current=workInProgress;var nextChildren;if(didCaptureError&&typeof Component.getDerivedStateFromError!=='function'){// If we captured an error, but getDerivedStateFromError is not defined,
// unmount all the children. componentDidCatch will schedule an update to
// re-render a fallback. This is temporary until we migrate everyone to
// the new API.
// TODO: Warn in a future release.
nextChildren=null;{stopProfilerTimerIfRunning();}}else{{markComponentRenderStarted(workInProgress);}{setIsRendering(true);nextChildren=instance.render();if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{instance.render();}finally{setIsStrictModeForDevtools(false);}}setIsRendering(false);}{markComponentRenderStopped();}}// React DevTools reads this flag.
workInProgress.flags|=PerformedWork;if(current!==null&&didCaptureError){// If we're recovering from an error, reconcile without reusing any of
// the existing children. Conceptually, the normal children and the children
// that are shown on error are two different sets, so we shouldn't reuse
// normal children even if their identities match.
forceUnmountCurrentAndReconcile(current,workInProgress,nextChildren,renderLanes);}else{reconcileChildren(current,workInProgress,nextChildren,renderLanes);}// Memoize state using the values we just used to render.
// TODO: Restructure so we never read values from the instance.
workInProgress.memoizedState=instance.state;// The context might have changed so we need to recalculate it.
if(hasContext){invalidateContextProvider(workInProgress,Component,true);}return workInProgress.child;}function pushHostRootContext(workInProgress){var root=workInProgress.stateNode;if(root.pendingContext){pushTopLevelContextObject(workInProgress,root.pendingContext,root.pendingContext!==root.context);}else if(root.context){// Should always be set
pushTopLevelContextObject(workInProgress,root.context,false);}pushHostContainer(workInProgress,root.containerInfo);}function updateHostRoot(current,workInProgress,renderLanes){pushHostRootContext(workInProgress);if(current===null){throw new Error('Should have a current fiber. This is a bug in React.');}var nextProps=workInProgress.pendingProps;var prevState=workInProgress.memoizedState;var prevChildren=prevState.element;cloneUpdateQueue(current,workInProgress);processUpdateQueue(workInProgress,nextProps,null,renderLanes);var nextState=workInProgress.memoizedState;var root=workInProgress.stateNode;// being called "element".
var nextChildren=nextState.element;if(prevState.isDehydrated){// This is a hydration root whose shell has not yet hydrated. We should
// attempt to hydrate.
// Flip isDehydrated to false to indicate that when this render
// finishes, the root will no longer be dehydrated.
var overrideState={element:nextChildren,isDehydrated:false,cache:nextState.cache,pendingSuspenseBoundaries:nextState.pendingSuspenseBoundaries,transitions:nextState.transitions};var updateQueue=workInProgress.updateQueue;// `baseState` can always be the last state because the root doesn't
// have reducer functions so it doesn't need rebasing.
updateQueue.baseState=overrideState;workInProgress.memoizedState=overrideState;if(workInProgress.flags&ForceClientRender){// Something errored during a previous attempt to hydrate the shell, so we
// forced a client render.
var recoverableError=createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside '+'of a Suspense boundary, the entire root will switch to '+'client rendering.'),workInProgress);return mountHostRootWithoutHydrating(current,workInProgress,nextChildren,renderLanes,recoverableError);}else if(nextChildren!==prevChildren){var _recoverableError=createCapturedValueAtFiber(new Error('This root received an early update, before anything was able '+'hydrate. Switched the entire root to client rendering.'),workInProgress);return mountHostRootWithoutHydrating(current,workInProgress,nextChildren,renderLanes,_recoverableError);}else{// The outermost shell has not hydrated yet. Start hydrating.
enterHydrationState(workInProgress);var child=mountChildFibers(workInProgress,null,nextChildren,renderLanes);workInProgress.child=child;var node=child;while(node){// Mark each child as hydrating. This is a fast path to know whether this
// tree is part of a hydrating tree. This is used to determine if a child
// node has fully mounted yet, and for scheduling event replaying.
// Conceptually this is similar to Placement in that a new subtree is
// inserted into the React tree here. It just happens to not need DOM
// mutations because it already exists.
node.flags=node.flags&~Placement|Hydrating;node=node.sibling;}}}else{// Root is not dehydrated. Either this is a client-only root, or it
// already hydrated.
resetHydrationState();if(nextChildren===prevChildren){return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}reconcileChildren(current,workInProgress,nextChildren,renderLanes);}return workInProgress.child;}function mountHostRootWithoutHydrating(current,workInProgress,nextChildren,renderLanes,recoverableError){// Revert to client rendering.
resetHydrationState();queueHydrationError(recoverableError);workInProgress.flags|=ForceClientRender;reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}function updateHostComponent(current,workInProgress,renderLanes){pushHostContext(workInProgress);if(current===null){tryToClaimNextHydratableInstance(workInProgress);}var type=workInProgress.type;var nextProps=workInProgress.pendingProps;var prevProps=current!==null?current.memoizedProps:null;var nextChildren=nextProps.children;var isDirectTextChild=shouldSetTextContent(type,nextProps);if(isDirectTextChild){// We special case a direct text child of a host node. This is a common
// case. We won't handle it as a reified child. We will instead handle
// this in the host environment that also has access to this prop. That
// avoids allocating another HostText fiber and traversing it.
nextChildren=null;}else if(prevProps!==null&&shouldSetTextContent(type,prevProps)){// If we're switching from a direct text child to a normal child, or to
// empty, we need to schedule the text content to be reset.
workInProgress.flags|=ContentReset;}markRef(current,workInProgress);reconcileChildren(current,workInProgress,nextChildren,renderLanes);return workInProgress.child;}function updateHostText(current,workInProgress){if(current===null){tryToClaimNextHydratableInstance(workInProgress);}// Nothing to do here. This is terminal. We'll do the completion step
// immediately after.
return null;}function mountLazyComponent(_current,workInProgress,elementType,renderLanes){resetSuspendedCurrentOnMountInLegacyMode(_current,workInProgress);var props=workInProgress.pendingProps;var lazyComponent=elementType;var payload=lazyComponent._payload;var init=lazyComponent._init;var Component=init(payload);// Store the unwrapped component in the type.
workInProgress.type=Component;var resolvedTag=workInProgress.tag=resolveLazyComponentTag(Component);var resolvedProps=resolveDefaultProps(Component,props);var child;switch(resolvedTag){case FunctionComponent:{{validateFunctionComponentInDev(workInProgress,Component);workInProgress.type=Component=resolveFunctionForHotReloading(Component);}child=updateFunctionComponent(null,workInProgress,Component,resolvedProps,renderLanes);return child;}case ClassComponent:{{workInProgress.type=Component=resolveClassForHotReloading(Component);}child=updateClassComponent(null,workInProgress,Component,resolvedProps,renderLanes);return child;}case ForwardRef:{{workInProgress.type=Component=resolveForwardRefForHotReloading(Component);}child=updateForwardRef(null,workInProgress,Component,resolvedProps,renderLanes);return child;}case MemoComponent:{{if(workInProgress.type!==workInProgress.elementType){var outerPropTypes=Component.propTypes;if(outerPropTypes){checkPropTypes(outerPropTypes,resolvedProps,// Resolved for outer only
'prop',getComponentNameFromType(Component));}}}child=updateMemoComponent(null,workInProgress,Component,resolveDefaultProps(Component.type,resolvedProps),// The inner type can have defaults too
renderLanes);return child;}}var hint='';{if(Component!==null&&_typeof(Component)==='object'&&Component.$$typeof===REACT_LAZY_TYPE){hint=' Did you wrap a component in React.lazy() more than once?';}}// This message intentionally doesn't mention ForwardRef or MemoComponent
// because the fact that it's a separate type of work is an
// implementation detail.
throw new Error("Element type is invalid. Received a promise that resolves to: "+Component+". "+("Lazy element type must resolve to a class or function."+hint));}function mountIncompleteClassComponent(_current,workInProgress,Component,nextProps,renderLanes){resetSuspendedCurrentOnMountInLegacyMode(_current,workInProgress);// Promote the fiber to a class and try rendering again.
workInProgress.tag=ClassComponent;// The rest of this function is a fork of `updateClassComponent`
// Push context providers early to prevent context stack mismatches.
// During mounting we don't know the child context yet as the instance doesn't exist.
// We will invalidate the child context in finishClassComponent() right after rendering.
var hasContext;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else{hasContext=false;}prepareToReadContext(workInProgress,renderLanes);constructClassInstance(workInProgress,Component,nextProps);mountClassInstance(workInProgress,Component,nextProps,renderLanes);return finishClassComponent(null,workInProgress,Component,true,hasContext,renderLanes);}function mountIndeterminateComponent(_current,workInProgress,Component,renderLanes){resetSuspendedCurrentOnMountInLegacyMode(_current,workInProgress);var props=workInProgress.pendingProps;var context;{var unmaskedContext=getUnmaskedContext(workInProgress,Component,false);context=getMaskedContext(workInProgress,unmaskedContext);}prepareToReadContext(workInProgress,renderLanes);var value;var hasId;{markComponentRenderStarted(workInProgress);}{if(Component.prototype&&typeof Component.prototype.render==='function'){var componentName=getComponentNameFromType(Component)||'Unknown';if(!didWarnAboutBadClass[componentName]){error("The <%s /> component appears to have a render method, but doesn't extend React.Component. "+'This is likely to cause errors. Change %s to extend React.Component instead.',componentName,componentName);didWarnAboutBadClass[componentName]=true;}}if(workInProgress.mode&StrictLegacyMode){ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress,null);}setIsRendering(true);ReactCurrentOwner$1.current=workInProgress;value=renderWithHooks(null,workInProgress,Component,props,context,renderLanes);hasId=checkDidRenderIdHook();setIsRendering(false);}{markComponentRenderStopped();}// React DevTools reads this flag.
workInProgress.flags|=PerformedWork;{// Support for module components is deprecated and is removed behind a flag.
// Whether or not it would crash later, we want to show a good message in DEV first.
if(_typeof(value)==='object'&&value!==null&&typeof value.render==='function'&&value.$$typeof===undefined){var _componentName=getComponentNameFromType(Component)||'Unknown';if(!didWarnAboutModulePatternComponent[_componentName]){error('The <%s /> component appears to be a function component that returns a class instance. '+'Change %s to a class that extends React.Component instead. '+"If you can't use a class try assigning the prototype on the function as a workaround. "+"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it "+'cannot be called with `new` by React.',_componentName,_componentName,_componentName);didWarnAboutModulePatternComponent[_componentName]=true;}}}if(// Run these checks in production only if the flag is off.
// Eventually we'll delete this branch altogether.
_typeof(value)==='object'&&value!==null&&typeof value.render==='function'&&value.$$typeof===undefined){{var _componentName2=getComponentNameFromType(Component)||'Unknown';if(!didWarnAboutModulePatternComponent[_componentName2]){error('The <%s /> component appears to be a function component that returns a class instance. '+'Change %s to a class that extends React.Component instead. '+"If you can't use a class try assigning the prototype on the function as a workaround. "+"`%s.prototype = React.Component.prototype`. Don't use an arrow function since it "+'cannot be called with `new` by React.',_componentName2,_componentName2,_componentName2);didWarnAboutModulePatternComponent[_componentName2]=true;}}// Proceed under the assumption that this is a class instance
workInProgress.tag=ClassComponent;// Throw out any hooks that were used.
workInProgress.memoizedState=null;workInProgress.updateQueue=null;// Push context providers early to prevent context stack mismatches.
// During mounting we don't know the child context yet as the instance doesn't exist.
// We will invalidate the child context in finishClassComponent() right after rendering.
var hasContext=false;if(isContextProvider(Component)){hasContext=true;pushContextProvider(workInProgress);}else{hasContext=false;}workInProgress.memoizedState=value.state!==null&&value.state!==undefined?value.state:null;initializeUpdateQueue(workInProgress);adoptClassInstance(workInProgress,value);mountClassInstance(workInProgress,Component,props,renderLanes);return finishClassComponent(null,workInProgress,Component,true,hasContext,renderLanes);}else{// Proceed under the assumption that this is a function component
workInProgress.tag=FunctionComponent;{if(workInProgress.mode&StrictLegacyMode){setIsStrictModeForDevtools(true);try{value=renderWithHooks(null,workInProgress,Component,props,context,renderLanes);hasId=checkDidRenderIdHook();}finally{setIsStrictModeForDevtools(false);}}}if(getIsHydrating()&&hasId){pushMaterializedTreeId(workInProgress);}reconcileChildren(null,workInProgress,value,renderLanes);{validateFunctionComponentInDev(workInProgress,Component);}return workInProgress.child;}}function validateFunctionComponentInDev(workInProgress,Component){{if(Component){if(Component.childContextTypes){error('%s(...): childContextTypes cannot be defined on a function component.',Component.displayName||Component.name||'Component');}}if(workInProgress.ref!==null){var info='';var ownerName=getCurrentFiberOwnerNameInDevOrNull();if(ownerName){info+='\n\nCheck the render method of `'+ownerName+'`.';}var warningKey=ownerName||'';var debugSource=workInProgress._debugSource;if(debugSource){warningKey=debugSource.fileName+':'+debugSource.lineNumber;}if(!didWarnAboutFunctionRefs[warningKey]){didWarnAboutFunctionRefs[warningKey]=true;error('Function components cannot be given refs. '+'Attempts to access this ref will fail. '+'Did you mean to use React.forwardRef()?%s',info);}}if(Component.defaultProps!==undefined){var componentName=getComponentNameFromType(Component)||'Unknown';if(!didWarnAboutDefaultPropsOnFunctionComponent[componentName]){error('%s: Support for defaultProps will be removed from function components '+'in a future major release. Use JavaScript default parameters instead.',componentName);didWarnAboutDefaultPropsOnFunctionComponent[componentName]=true;}}if(typeof Component.getDerivedStateFromProps==='function'){var _componentName3=getComponentNameFromType(Component)||'Unknown';if(!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]){error('%s: Function components do not support getDerivedStateFromProps.',_componentName3);didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]=true;}}if(_typeof(Component.contextType)==='object'&&Component.contextType!==null){var _componentName4=getComponentNameFromType(Component)||'Unknown';if(!didWarnAboutContextTypeOnFunctionComponent[_componentName4]){error('%s: Function components do not support contextType.',_componentName4);didWarnAboutContextTypeOnFunctionComponent[_componentName4]=true;}}}}var SUSPENDED_MARKER={dehydrated:null,treeContext:null,retryLane:NoLane};function mountSuspenseOffscreenState(renderLanes){return{baseLanes:renderLanes,cachePool:getSuspendedCache(),transitions:null};}function updateSuspenseOffscreenState(prevOffscreenState,renderLanes){var cachePool=null;return{baseLanes:mergeLanes(prevOffscreenState.baseLanes,renderLanes),cachePool:cachePool,transitions:prevOffscreenState.transitions};}// TODO: Probably should inline this back
function shouldRemainOnFallback(suspenseContext,current,workInProgress,renderLanes){// If we're already showing a fallback, there are cases where we need to
// remain on that fallback regardless of whether the content has resolved.
// For example, SuspenseList coordinates when nested content appears.
if(current!==null){var suspenseState=current.memoizedState;if(suspenseState===null){// Currently showing content. Don't hide it, even if ForceSuspenseFallback
// is true. More precise name might be "ForceRemainSuspenseFallback".
// Note: This is a factoring smell. Can't remain on a fallback if there's
// no fallback to remain on.
return false;}}// Not currently showing content. Consult the Suspense context.
return hasSuspenseContext(suspenseContext,ForceSuspenseFallback);}function getRemainingWorkInPrimaryTree(current,renderLanes){// TODO: Should not remove render lanes that were pinged during this render
return removeLanes(current.childLanes,renderLanes);}function updateSuspenseComponent(current,workInProgress,renderLanes){var nextProps=workInProgress.pendingProps;// This is used by DevTools to force a boundary to suspend.
{if(shouldSuspend(workInProgress)){workInProgress.flags|=DidCapture;}}var suspenseContext=suspenseStackCursor.current;var showFallback=false;var didSuspend=(workInProgress.flags&DidCapture)!==NoFlags;if(didSuspend||shouldRemainOnFallback(suspenseContext,current)){// Something in this boundary's subtree already suspended. Switch to
// rendering the fallback children.
showFallback=true;workInProgress.flags&=~DidCapture;}else{// Attempting the main content
if(current===null||current.memoizedState!==null){// This is a new mount or this boundary is already showing a fallback state.
// Mark this subtree context as having at least one invisible parent that could
// handle the fallback state.
// Avoided boundaries are not considered since they cannot handle preferred fallback states.
{suspenseContext=addSubtreeSuspenseContext(suspenseContext,InvisibleParentSuspenseContext);}}}suspenseContext=setDefaultShallowSuspenseContext(suspenseContext);pushSuspenseContext(workInProgress,suspenseContext);// OK, the next part is confusing. We're about to reconcile the Suspense
// boundary's children. This involves some custom reconciliation logic. Two
// main reasons this is so complicated.
//
// First, Legacy Mode has different semantics for backwards compatibility. The
// primary tree will commit in an inconsistent state, so when we do the
// second pass to render the fallback, we do some exceedingly, uh, clever
// hacks to make that not totally break. Like transferring effects and
// deletions from hidden tree. In Concurrent Mode, it's much simpler,
// because we bailout on the primary tree completely and leave it in its old
// state, no effects. Same as what we do for Offscreen (except that
// Offscreen doesn't have the first render pass).
//
// Second is hydration. During hydration, the Suspense fiber has a slightly
// different layout, where the child points to a dehydrated fragment, which
// contains the DOM rendered by the server.
//
// Third, even if you set all that aside, Suspense is like error boundaries in
// that we first we try to render one tree, and if that fails, we render again
// and switch to a different tree. Like a try/catch block. So we have to track
// which branch we're currently rendering. Ideally we would model this using
// a stack.
if(current===null){// Initial mount
// Special path for hydration
// If we're currently hydrating, try to hydrate this boundary.
tryToClaimNextHydratableInstance(workInProgress);// This could've been a dehydrated suspense component.
var suspenseState=workInProgress.memoizedState;if(suspenseState!==null){var dehydrated=suspenseState.dehydrated;if(dehydrated!==null){return mountDehydratedSuspenseComponent(workInProgress,dehydrated);}}var nextPrimaryChildren=nextProps.children;var nextFallbackChildren=nextProps.fallback;if(showFallback){var fallbackFragment=mountSuspenseFallbackChildren(workInProgress,nextPrimaryChildren,nextFallbackChildren,renderLanes);var primaryChildFragment=workInProgress.child;primaryChildFragment.memoizedState=mountSuspenseOffscreenState(renderLanes);workInProgress.memoizedState=SUSPENDED_MARKER;return fallbackFragment;}else{return mountSuspensePrimaryChildren(workInProgress,nextPrimaryChildren);}}else{// This is an update.
// Special path for hydration
var prevState=current.memoizedState;if(prevState!==null){var _dehydrated=prevState.dehydrated;if(_dehydrated!==null){return updateDehydratedSuspenseComponent(current,workInProgress,didSuspend,nextProps,_dehydrated,prevState,renderLanes);}}if(showFallback){var _nextFallbackChildren=nextProps.fallback;var _nextPrimaryChildren=nextProps.children;var fallbackChildFragment=updateSuspenseFallbackChildren(current,workInProgress,_nextPrimaryChildren,_nextFallbackChildren,renderLanes);var _primaryChildFragment2=workInProgress.child;var prevOffscreenState=current.child.memoizedState;_primaryChildFragment2.memoizedState=prevOffscreenState===null?mountSuspenseOffscreenState(renderLanes):updateSuspenseOffscreenState(prevOffscreenState,renderLanes);_primaryChildFragment2.childLanes=getRemainingWorkInPrimaryTree(current,renderLanes);workInProgress.memoizedState=SUSPENDED_MARKER;return fallbackChildFragment;}else{var _nextPrimaryChildren2=nextProps.children;var _primaryChildFragment3=updateSuspensePrimaryChildren(current,workInProgress,_nextPrimaryChildren2,renderLanes);workInProgress.memoizedState=null;return _primaryChildFragment3;}}}function mountSuspensePrimaryChildren(workInProgress,primaryChildren,renderLanes){var mode=workInProgress.mode;var primaryChildProps={mode:'visible',children:primaryChildren};var primaryChildFragment=mountWorkInProgressOffscreenFiber(primaryChildProps,mode);primaryChildFragment["return"]=workInProgress;workInProgress.child=primaryChildFragment;return primaryChildFragment;}function mountSuspenseFallbackChildren(workInProgress,primaryChildren,fallbackChildren,renderLanes){var mode=workInProgress.mode;var progressedPrimaryFragment=workInProgress.child;var primaryChildProps={mode:'hidden',children:primaryChildren};var primaryChildFragment;var fallbackChildFragment;if((mode&ConcurrentMode)===NoMode&&progressedPrimaryFragment!==null){// In legacy mode, we commit the primary tree as if it successfully
// completed, even though it's in an inconsistent state.
primaryChildFragment=progressedPrimaryFragment;primaryChildFragment.childLanes=NoLanes;primaryChildFragment.pendingProps=primaryChildProps;if(workInProgress.mode&ProfileMode){// Reset the durations from the first pass so they aren't included in the
// final amounts. This seems counterintuitive, since we're intentionally
// not measuring part of the render phase, but this makes it match what we
// do in Concurrent Mode.
primaryChildFragment.actualDuration=0;primaryChildFragment.actualStartTime=-1;primaryChildFragment.selfBaseDuration=0;primaryChildFragment.treeBaseDuration=0;}fallbackChildFragment=createFiberFromFragment(fallbackChildren,mode,renderLanes,null);}else{primaryChildFragment=mountWorkInProgressOffscreenFiber(primaryChildProps,mode);fallbackChildFragment=createFiberFromFragment(fallbackChildren,mode,renderLanes,null);}primaryChildFragment["return"]=workInProgress;fallbackChildFragment["return"]=workInProgress;primaryChildFragment.sibling=fallbackChildFragment;workInProgress.child=primaryChildFragment;return fallbackChildFragment;}function mountWorkInProgressOffscreenFiber(offscreenProps,mode,renderLanes){// The props argument to `createFiberFromOffscreen` is `any` typed, so we use
// this wrapper function to constrain it.
return createFiberFromOffscreen(offscreenProps,mode,NoLanes,null);}function updateWorkInProgressOffscreenFiber(current,offscreenProps){// The props argument to `createWorkInProgress` is `any` typed, so we use this
// wrapper function to constrain it.
return createWorkInProgress(current,offscreenProps);}function updateSuspensePrimaryChildren(current,workInProgress,primaryChildren,renderLanes){var currentPrimaryChildFragment=current.child;var currentFallbackChildFragment=currentPrimaryChildFragment.sibling;var primaryChildFragment=updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment,{mode:'visible',children:primaryChildren});if((workInProgress.mode&ConcurrentMode)===NoMode){primaryChildFragment.lanes=renderLanes;}primaryChildFragment["return"]=workInProgress;primaryChildFragment.sibling=null;if(currentFallbackChildFragment!==null){// Delete the fallback child fragment
var deletions=workInProgress.deletions;if(deletions===null){workInProgress.deletions=[currentFallbackChildFragment];workInProgress.flags|=ChildDeletion;}else{deletions.push(currentFallbackChildFragment);}}workInProgress.child=primaryChildFragment;return primaryChildFragment;}function updateSuspenseFallbackChildren(current,workInProgress,primaryChildren,fallbackChildren,renderLanes){var mode=workInProgress.mode;var currentPrimaryChildFragment=current.child;var currentFallbackChildFragment=currentPrimaryChildFragment.sibling;var primaryChildProps={mode:'hidden',children:primaryChildren};var primaryChildFragment;if(// In legacy mode, we commit the primary tree as if it successfully
// completed, even though it's in an inconsistent state.
(mode&ConcurrentMode)===NoMode&&// Make sure we're on the second pass, i.e. the primary child fragment was
// already cloned. In legacy mode, the only case where this isn't true is
// when DevTools forces us to display a fallback; we skip the first render
// pass entirely and go straight to rendering the fallback. (In Concurrent
// Mode, SuspenseList can also trigger this scenario, but this is a legacy-
// only codepath.)
workInProgress.child!==currentPrimaryChildFragment){var progressedPrimaryFragment=workInProgress.child;primaryChildFragment=progressedPrimaryFragment;primaryChildFragment.childLanes=NoLanes;primaryChildFragment.pendingProps=primaryChildProps;if(workInProgress.mode&ProfileMode){// Reset the durations from the first pass so they aren't included in the
// final amounts. This seems counterintuitive, since we're intentionally
// not measuring part of the render phase, but this makes it match what we
// do in Concurrent Mode.
primaryChildFragment.actualDuration=0;primaryChildFragment.actualStartTime=-1;primaryChildFragment.selfBaseDuration=currentPrimaryChildFragment.selfBaseDuration;primaryChildFragment.treeBaseDuration=currentPrimaryChildFragment.treeBaseDuration;}// The fallback fiber was added as a deletion during the first pass.
// However, since we're going to remain on the fallback, we no longer want
// to delete it.
workInProgress.deletions=null;}else{primaryChildFragment=updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment,primaryChildProps);// Since we're reusing a current tree, we need to reuse the flags, too.
// (We don't do this in legacy mode, because in legacy mode we don't re-use
// the current tree; see previous branch.)
primaryChildFragment.subtreeFlags=currentPrimaryChildFragment.subtreeFlags&StaticMask;}var fallbackChildFragment;if(currentFallbackChildFragment!==null){fallbackChildFragment=createWorkInProgress(currentFallbackChildFragment,fallbackChildren);}else{fallbackChildFragment=createFiberFromFragment(fallbackChildren,mode,renderLanes,null);// Needs a placement effect because the parent (the Suspense boundary) already
// mounted but this is a new fiber.
fallbackChildFragment.flags|=Placement;}fallbackChildFragment["return"]=workInProgress;primaryChildFragment["return"]=workInProgress;primaryChildFragment.sibling=fallbackChildFragment;workInProgress.child=primaryChildFragment;return fallbackChildFragment;}function retrySuspenseComponentWithoutHydrating(current,workInProgress,renderLanes,recoverableError){// Falling back to client rendering. Because this has performance
// implications, it's considered a recoverable error, even though the user
// likely won't observe anything wrong with the UI.
//
// The error is passed in as an argument to enforce that every caller provide
// a custom message, or explicitly opt out (currently the only path that opts
// out is legacy mode; every concurrent path provides an error).
if(recoverableError!==null){queueHydrationError(recoverableError);}// This will add the old fiber to the deletion list
reconcileChildFibers(workInProgress,current.child,null,renderLanes);// We're now not suspended nor dehydrated.
var nextProps=workInProgress.pendingProps;var primaryChildren=nextProps.children;var primaryChildFragment=mountSuspensePrimaryChildren(workInProgress,primaryChildren);// Needs a placement effect because the parent (the Suspense boundary) already
// mounted but this is a new fiber.
primaryChildFragment.flags|=Placement;workInProgress.memoizedState=null;return primaryChildFragment;}function mountSuspenseFallbackAfterRetryWithoutHydrating(current,workInProgress,primaryChildren,fallbackChildren,renderLanes){var fiberMode=workInProgress.mode;var primaryChildProps={mode:'visible',children:primaryChildren};var primaryChildFragment=mountWorkInProgressOffscreenFiber(primaryChildProps,fiberMode);var fallbackChildFragment=createFiberFromFragment(fallbackChildren,fiberMode,renderLanes,null);// Needs a placement effect because the parent (the Suspense
// boundary) already mounted but this is a new fiber.
fallbackChildFragment.flags|=Placement;primaryChildFragment["return"]=workInProgress;fallbackChildFragment["return"]=workInProgress;primaryChildFragment.sibling=fallbackChildFragment;workInProgress.child=primaryChildFragment;if((workInProgress.mode&ConcurrentMode)!==NoMode){// We will have dropped the effect list which contains the
// deletion. We need to reconcile to delete the current child.
reconcileChildFibers(workInProgress,current.child,null,renderLanes);}return fallbackChildFragment;}function mountDehydratedSuspenseComponent(workInProgress,suspenseInstance,renderLanes){// During the first pass, we'll bail out and not drill into the children.
// Instead, we'll leave the content in place and try to hydrate it later.
if((workInProgress.mode&ConcurrentMode)===NoMode){{error('Cannot hydrate Suspense in legacy mode. Switch from '+'ReactDOM.hydrate(element, container) to '+'ReactDOMClient.hydrateRoot(container, <App />)'+'.render(element) or remove the Suspense components from '+'the server rendered components.');}workInProgress.lanes=laneToLanes(SyncLane);}else if(isSuspenseInstanceFallback(suspenseInstance)){// This is a client-only boundary. Since we won't get any content from the server
// for this, we need to schedule that at a higher priority based on when it would
// have timed out. In theory we could render it in this pass but it would have the
// wrong priority associated with it and will prevent hydration of parent path.
// Instead, we'll leave work left on it to render it in a separate commit.
// TODO This time should be the time at which the server rendered response that is
// a parent to this boundary was displayed. However, since we currently don't have
// a protocol to transfer that time, we'll just estimate it by using the current
// time. This will mean that Suspense timeouts are slightly shifted to later than
// they should be.
// Schedule a normal pri update to render this content.
workInProgress.lanes=laneToLanes(DefaultHydrationLane);}else{// We'll continue hydrating the rest at offscreen priority since we'll already
// be showing the right content coming from the server, it is no rush.
workInProgress.lanes=laneToLanes(OffscreenLane);}return null;}function updateDehydratedSuspenseComponent(current,workInProgress,didSuspend,nextProps,suspenseInstance,suspenseState,renderLanes){if(!didSuspend){// This is the first render pass. Attempt to hydrate.
// We should never be hydrating at this point because it is the first pass,
// but after we've already committed once.
warnIfHydrating();if((workInProgress.mode&ConcurrentMode)===NoMode){return retrySuspenseComponentWithoutHydrating(current,workInProgress,renderLanes,// TODO: When we delete legacy mode, we should make this error argument
// required — every concurrent mode path that causes hydration to
// de-opt to client rendering should have an error message.
null);}if(isSuspenseInstanceFallback(suspenseInstance)){// This boundary is in a permanent fallback state. In this case, we'll never
// get an update and we'll never be able to hydrate the final content. Let's just try the
// client side render instead.
var digest,message,stack;{var _getSuspenseInstanceF=getSuspenseInstanceFallbackErrorDetails(suspenseInstance);digest=_getSuspenseInstanceF.digest;message=_getSuspenseInstanceF.message;stack=_getSuspenseInstanceF.stack;}var error;if(message){// eslint-disable-next-line react-internal/prod-error-codes
error=new Error(message);}else{error=new Error('The server could not finish this Suspense boundary, likely '+'due to an error during server rendering. Switched to '+'client rendering.');}var capturedValue=createCapturedValue(error,digest,stack);return retrySuspenseComponentWithoutHydrating(current,workInProgress,renderLanes,capturedValue);}// any context has changed, we need to treat is as if the input might have changed.
var hasContextChanged=includesSomeLane(renderLanes,current.childLanes);if(didReceiveUpdate||hasContextChanged){// This boundary has changed since the first render. This means that we are now unable to
// hydrate it. We might still be able to hydrate it using a higher priority lane.
var root=getWorkInProgressRoot();if(root!==null){var attemptHydrationAtLane=getBumpedLaneForHydration(root,renderLanes);if(attemptHydrationAtLane!==NoLane&&attemptHydrationAtLane!==suspenseState.retryLane){// Intentionally mutating since this render will get interrupted. This
// is one of the very rare times where we mutate the current tree
// during the render phase.
suspenseState.retryLane=attemptHydrationAtLane;// TODO: Ideally this would inherit the event time of the current render
var eventTime=NoTimestamp;enqueueConcurrentRenderForLane(current,attemptHydrationAtLane);scheduleUpdateOnFiber(root,current,attemptHydrationAtLane,eventTime);}}// If we have scheduled higher pri work above, this will probably just abort the render
// since we now have higher priority work, but in case it doesn't, we need to prepare to
// render something, if we time out. Even if that requires us to delete everything and
// skip hydration.
// Delay having to do this as long as the suspense timeout allows us.
renderDidSuspendDelayIfPossible();var _capturedValue=createCapturedValue(new Error('This Suspense boundary received an update before it finished '+'hydrating. This caused the boundary to switch to client rendering. '+'The usual way to fix this is to wrap the original update '+'in startTransition.'));return retrySuspenseComponentWithoutHydrating(current,workInProgress,renderLanes,_capturedValue);}else if(isSuspenseInstancePending(suspenseInstance)){// This component is still pending more data from the server, so we can't hydrate its
// content. We treat it as if this component suspended itself. It might seem as if
// we could just try to render it client-side instead. However, this will perform a
// lot of unnecessary work and is unlikely to complete since it often will suspend
// on missing data anyway. Additionally, the server might be able to render more
// than we can on the client yet. In that case we'd end up with more fallback states
// on the client than if we just leave it alone. If the server times out or errors
// these should update this boundary to the permanent Fallback state instead.
// Mark it as having captured (i.e. suspended).
workInProgress.flags|=DidCapture;// Leave the child in place. I.e. the dehydrated fragment.
workInProgress.child=current.child;// Register a callback to retry this boundary once the server has sent the result.
var retry=retryDehydratedSuspenseBoundary.bind(null,current);registerSuspenseInstanceRetry(suspenseInstance,retry);return null;}else{// This is the first attempt.
reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress,suspenseInstance,suspenseState.treeContext);var primaryChildren=nextProps.children;var primaryChildFragment=mountSuspensePrimaryChildren(workInProgress,primaryChildren);// Mark the children as hydrating. This is a fast path to know whether this
// tree is part of a hydrating tree. This is used to determine if a child
// node has fully mounted yet, and for scheduling event replaying.
// Conceptually this is similar to Placement in that a new subtree is
// inserted into the React tree here. It just happens to not need DOM
// mutations because it already exists.
primaryChildFragment.flags|=Hydrating;return primaryChildFragment;}}else{// This is the second render pass. We already attempted to hydrated, but
// something either suspended or errored.
if(workInProgress.flags&ForceClientRender){// Something errored during hydration. Try again without hydrating.
workInProgress.flags&=~ForceClientRender;var _capturedValue2=createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. '+'Switched to client rendering.'));return retrySuspenseComponentWithoutHydrating(current,workInProgress,renderLanes,_capturedValue2);}else if(workInProgress.memoizedState!==null){// Something suspended and we should still be in dehydrated mode.
// Leave the existing child in place.
workInProgress.child=current.child;// The dehydrated completion pass expects this flag to be there
// but the normal suspense pass doesn't.
workInProgress.flags|=DidCapture;return null;}else{// Suspended but we should no longer be in dehydrated mode.
// Therefore we now have to render the fallback.
var nextPrimaryChildren=nextProps.children;var nextFallbackChildren=nextProps.fallback;var fallbackChildFragment=mountSuspenseFallbackAfterRetryWithoutHydrating(current,workInProgress,nextPrimaryChildren,nextFallbackChildren,renderLanes);var _primaryChildFragment4=workInProgress.child;_primaryChildFragment4.memoizedState=mountSuspenseOffscreenState(renderLanes);workInProgress.memoizedState=SUSPENDED_MARKER;return fallbackChildFragment;}}}function scheduleSuspenseWorkOnFiber(fiber,renderLanes,propagationRoot){fiber.lanes=mergeLanes(fiber.lanes,renderLanes);var alternate=fiber.alternate;if(alternate!==null){alternate.lanes=mergeLanes(alternate.lanes,renderLanes);}scheduleContextWorkOnParentPath(fiber["return"],renderLanes,propagationRoot);}function propagateSuspenseContextChange(workInProgress,firstChild,renderLanes){// Mark any Suspense boundaries with fallbacks as having work to do.
// If they were previously forced into fallbacks, they may now be able
// to unblock.
var node=firstChild;while(node!==null){if(node.tag===SuspenseComponent){var state=node.memoizedState;if(state!==null){scheduleSuspenseWorkOnFiber(node,renderLanes,workInProgress);}}else if(node.tag===SuspenseListComponent){// If the tail is hidden there might not be an Suspense boundaries
// to schedule work on. In this case we have to schedule it on the
// list itself.
// We don't have to traverse to the children of the list since
// the list will propagate the change when it rerenders.
scheduleSuspenseWorkOnFiber(node,renderLanes,workInProgress);}else if(node.child!==null){node.child["return"]=node;node=node.child;continue;}if(node===workInProgress){return;}while(node.sibling===null){if(node["return"]===null||node["return"]===workInProgress){return;}node=node["return"];}node.sibling["return"]=node["return"];node=node.sibling;}}function findLastContentRow(firstChild){// This is going to find the last row among these children that is already
// showing content on the screen, as opposed to being in fallback state or
// new. If a row has multiple Suspense boundaries, any of them being in the
// fallback state, counts as the whole row being in a fallback state.
// Note that the "rows" will be workInProgress, but any nested children
// will still be current since we haven't rendered them yet. The mounted
// order may not be the same as the new order. We use the new order.
var row=firstChild;var lastContentRow=null;while(row!==null){var currentRow=row.alternate;// New rows can't be content rows.
if(currentRow!==null&&findFirstSuspended(currentRow)===null){lastContentRow=row;}row=row.sibling;}return lastContentRow;}function validateRevealOrder(revealOrder){{if(revealOrder!==undefined&&revealOrder!=='forwards'&&revealOrder!=='backwards'&&revealOrder!=='together'&&!didWarnAboutRevealOrder[revealOrder]){didWarnAboutRevealOrder[revealOrder]=true;if(typeof revealOrder==='string'){switch(revealOrder.toLowerCase()){case'together':case'forwards':case'backwards':{error('"%s" is not a valid value for revealOrder on <SuspenseList />. '+'Use lowercase "%s" instead.',revealOrder,revealOrder.toLowerCase());break;}case'forward':case'backward':{error('"%s" is not a valid value for revealOrder on <SuspenseList />. '+'React uses the -s suffix in the spelling. Use "%ss" instead.',revealOrder,revealOrder.toLowerCase());break;}default:error('"%s" is not a supported revealOrder on <SuspenseList />. '+'Did you mean "together", "forwards" or "backwards"?',revealOrder);break;}}else{error('%s is not a supported value for revealOrder on <SuspenseList />. '+'Did you mean "together", "forwards" or "backwards"?',revealOrder);}}}}function validateTailOptions(tailMode,revealOrder){{if(tailMode!==undefined&&!didWarnAboutTailOptions[tailMode]){if(tailMode!=='collapsed'&&tailMode!=='hidden'){didWarnAboutTailOptions[tailMode]=true;error('"%s" is not a supported value for tail on <SuspenseList />. '+'Did you mean "collapsed" or "hidden"?',tailMode);}else if(revealOrder!=='forwards'&&revealOrder!=='backwards'){didWarnAboutTailOptions[tailMode]=true;error('<SuspenseList tail="%s" /> is only valid if revealOrder is '+'"forwards" or "backwards". '+'Did you mean to specify revealOrder="forwards"?',tailMode);}}}}function validateSuspenseListNestedChild(childSlot,index){{var isAnArray=isArray(childSlot);var isIterable=!isAnArray&&typeof getIteratorFn(childSlot)==='function';if(isAnArray||isIterable){var type=isAnArray?'array':'iterable';error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in '+'an additional SuspenseList to configure its revealOrder: '+'<SuspenseList revealOrder=...> ... '+'<SuspenseList revealOrder=...>{%s}</SuspenseList> ... '+'</SuspenseList>',type,index,type);return false;}}return true;}function validateSuspenseListChildren(children,revealOrder){{if((revealOrder==='forwards'||revealOrder==='backwards')&&children!==undefined&&children!==null&&children!==false){if(isArray(children)){for(var i=0;i<children.length;i++){if(!validateSuspenseListNestedChild(children[i],i)){return;}}}else{var iteratorFn=getIteratorFn(children);if(typeof iteratorFn==='function'){var childrenIterator=iteratorFn.call(children);if(childrenIterator){var step=childrenIterator.next();var _i=0;for(;!step.done;step=childrenIterator.next()){if(!validateSuspenseListNestedChild(step.value,_i)){return;}_i++;}}}else{error('A single row was passed to a <SuspenseList revealOrder="%s" />. '+'This is not useful since it needs multiple rows. '+'Did you mean to pass multiple children or an array?',revealOrder);}}}}}function initSuspenseListRenderState(workInProgress,isBackwards,tail,lastContentRow,tailMode){var renderState=workInProgress.memoizedState;if(renderState===null){workInProgress.memoizedState={isBackwards:isBackwards,rendering:null,renderingStartTime:0,last:lastContentRow,tail:tail,tailMode:tailMode};}else{// We can reuse the existing object from previous renders.
renderState.isBackwards=isBackwards;renderState.rendering=null;renderState.renderingStartTime=0;renderState.last=lastContentRow;renderState.tail=tail;renderState.tailMode=tailMode;}}// This can end up rendering this component multiple passes.
// The first pass splits the children fibers into two sets. A head and tail.
// We first render the head. If anything is in fallback state, we do another
// pass through beginWork to rerender all children (including the tail) with
// the force suspend context. If the first render didn't have anything in
// in fallback state. Then we render each row in the tail one-by-one.
// That happens in the completeWork phase without going back to beginWork.
function updateSuspenseListComponent(current,workInProgress,renderLanes){var nextProps=workInProgress.pendingProps;var revealOrder=nextProps.revealOrder;var tailMode=nextProps.tail;var newChildren=nextProps.children;validateRevealOrder(revealOrder);validateTailOptions(tailMode,revealOrder);validateSuspenseListChildren(newChildren,revealOrder);reconcileChildren(current,workInProgress,newChildren,renderLanes);var suspenseContext=suspenseStackCursor.current;var shouldForceFallback=hasSuspenseContext(suspenseContext,ForceSuspenseFallback);if(shouldForceFallback){suspenseContext=setShallowSuspenseContext(suspenseContext,ForceSuspenseFallback);workInProgress.flags|=DidCapture;}else{var didSuspendBefore=current!==null&&(current.flags&DidCapture)!==NoFlags;if(didSuspendBefore){// If we previously forced a fallback, we need to schedule work
// on any nested boundaries to let them know to try to render
// again. This is the same as context updating.
propagateSuspenseContextChange(workInProgress,workInProgress.child,renderLanes);}suspenseContext=setDefaultShallowSuspenseContext(suspenseContext);}pushSuspenseContext(workInProgress,suspenseContext);if((workInProgress.mode&ConcurrentMode)===NoMode){// In legacy mode, SuspenseList doesn't work so we just
// use make it a noop by treating it as the default revealOrder.
workInProgress.memoizedState=null;}else{switch(revealOrder){case'forwards':{var lastContentRow=findLastContentRow(workInProgress.child);var tail;if(lastContentRow===null){// The whole list is part of the tail.
// TODO: We could fast path by just rendering the tail now.
tail=workInProgress.child;workInProgress.child=null;}else{// Disconnect the tail rows after the content row.
// We're going to render them separately later.
tail=lastContentRow.sibling;lastContentRow.sibling=null;}initSuspenseListRenderState(workInProgress,false,// isBackwards
tail,lastContentRow,tailMode);break;}case'backwards':{// We're going to find the first row that has existing content.
// At the same time we're going to reverse the list of everything
// we pass in the meantime. That's going to be our tail in reverse
// order.
var _tail=null;var row=workInProgress.child;workInProgress.child=null;while(row!==null){var currentRow=row.alternate;// New rows can't be content rows.
if(currentRow!==null&&findFirstSuspended(currentRow)===null){// This is the beginning of the main content.
workInProgress.child=row;break;}var nextRow=row.sibling;row.sibling=_tail;_tail=row;row=nextRow;}// TODO: If workInProgress.child is null, we can continue on the tail immediately.
initSuspenseListRenderState(workInProgress,true,// isBackwards
_tail,null,// last
tailMode);break;}case'together':{initSuspenseListRenderState(workInProgress,false,// isBackwards
null,// tail
null,// last
undefined);break;}default:{// The default reveal order is the same as not having
// a boundary.
workInProgress.memoizedState=null;}}}return workInProgress.child;}function updatePortalComponent(current,workInProgress,renderLanes){pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo);var nextChildren=workInProgress.pendingProps;if(current===null){// Portals are special because we don't append the children during mount
// but at commit. Therefore we need to track insertions which the normal
// flow doesn't do during mount. This doesn't happen at the root because
// the root always starts with a "current" with a null child.
// TODO: Consider unifying this with how the root works.
workInProgress.child=reconcileChildFibers(workInProgress,null,nextChildren,renderLanes);}else{reconcileChildren(current,workInProgress,nextChildren,renderLanes);}return workInProgress.child;}var hasWarnedAboutUsingNoValuePropOnContextProvider=false;function updateContextProvider(current,workInProgress,renderLanes){var providerType=workInProgress.type;var context=providerType._context;var newProps=workInProgress.pendingProps;var oldProps=workInProgress.memoizedProps;var newValue=newProps.value;{if(!('value'in newProps)){if(!hasWarnedAboutUsingNoValuePropOnContextProvider){hasWarnedAboutUsingNoValuePropOnContextProvider=true;error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');}}var providerPropTypes=workInProgress.type.propTypes;if(providerPropTypes){checkPropTypes(providerPropTypes,newProps,'prop','Context.Provider');}}pushProvider(workInProgress,context,newValue);{if(oldProps!==null){var oldValue=oldProps.value;if(objectIs(oldValue,newValue)){// No change. Bailout early if children are the same.
if(oldProps.children===newProps.children&&!hasContextChanged()){return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}}else{// The context value changed. Search for matching consumers and schedule
// them to update.
propagateContextChange(workInProgress,context,renderLanes);}}}var newChildren=newProps.children;reconcileChildren(current,workInProgress,newChildren,renderLanes);return workInProgress.child;}var hasWarnedAboutUsingContextAsConsumer=false;function updateContextConsumer(current,workInProgress,renderLanes){var context=workInProgress.type;// The logic below for Context differs depending on PROD or DEV mode. In
// DEV mode, we create a separate object for Context.Consumer that acts
// like a proxy to Context. This proxy object adds unnecessary code in PROD
// so we use the old behaviour (Context.Consumer references Context) to
// reduce size and overhead. The separate object references context via
// a property called "_context", which also gives us the ability to check
// in DEV mode if this property exists or not and warn if it does not.
{if(context._context===undefined){// This may be because it's a Context (rather than a Consumer).
// Or it may be because it's older React where they're the same thing.
// We only want to warn if we're sure it's a new React.
if(context!==context.Consumer){if(!hasWarnedAboutUsingContextAsConsumer){hasWarnedAboutUsingContextAsConsumer=true;error('Rendering <Context> directly is not supported and will be removed in '+'a future major release. Did you mean to render <Context.Consumer> instead?');}}}else{context=context._context;}}var newProps=workInProgress.pendingProps;var render=newProps.children;{if(typeof render!=='function'){error('A context consumer was rendered with multiple children, or a child '+"that isn't a function. A context consumer expects a single child "+'that is a function. If you did pass a function, make sure there '+'is no trailing or leading whitespace around it.');}}prepareToReadContext(workInProgress,renderLanes);var newValue=_readContext(context);{markComponentRenderStarted(workInProgress);}var newChildren;{ReactCurrentOwner$1.current=workInProgress;setIsRendering(true);newChildren=render(newValue);setIsRendering(false);}{markComponentRenderStopped();}// React DevTools reads this flag.
workInProgress.flags|=PerformedWork;reconcileChildren(current,workInProgress,newChildren,renderLanes);return workInProgress.child;}function markWorkInProgressReceivedUpdate(){didReceiveUpdate=true;}function resetSuspendedCurrentOnMountInLegacyMode(current,workInProgress){if((workInProgress.mode&ConcurrentMode)===NoMode){if(current!==null){// A lazy component only mounts if it suspended inside a non-
// concurrent tree, in an inconsistent state. We want to treat it like
// a new mount, even though an empty version of it already committed.
// Disconnect the alternate pointers.
current.alternate=null;workInProgress.alternate=null;// Since this is conceptually a new fiber, schedule a Placement effect
workInProgress.flags|=Placement;}}}function bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes){if(current!==null){// Reuse previous dependencies
workInProgress.dependencies=current.dependencies;}{// Don't update "base" render times for bailouts.
stopProfilerTimerIfRunning();}markSkippedUpdateLanes(workInProgress.lanes);// Check if the children have any pending work.
if(!includesSomeLane(renderLanes,workInProgress.childLanes)){// The children don't have any work either. We can skip them.
// TODO: Once we add back resuming, we should check if the children are
// a work-in-progress set. If so, we need to transfer their effects.
{return null;}}// This fiber doesn't have work, but its subtree does. Clone the child
// fibers and continue.
cloneChildFibers(current,workInProgress);return workInProgress.child;}function remountFiber(current,oldWorkInProgress,newWorkInProgress){{var returnFiber=oldWorkInProgress["return"];if(returnFiber===null){// eslint-disable-next-line react-internal/prod-error-codes
throw new Error('Cannot swap the root fiber.');}// Disconnect from the old current.
// It will get deleted.
current.alternate=null;oldWorkInProgress.alternate=null;// Connect to the new tree.
newWorkInProgress.index=oldWorkInProgress.index;newWorkInProgress.sibling=oldWorkInProgress.sibling;newWorkInProgress["return"]=oldWorkInProgress["return"];newWorkInProgress.ref=oldWorkInProgress.ref;// Replace the child/sibling pointers above it.
if(oldWorkInProgress===returnFiber.child){returnFiber.child=newWorkInProgress;}else{var prevSibling=returnFiber.child;if(prevSibling===null){// eslint-disable-next-line react-internal/prod-error-codes
throw new Error('Expected parent to have a child.');}while(prevSibling.sibling!==oldWorkInProgress){prevSibling=prevSibling.sibling;if(prevSibling===null){// eslint-disable-next-line react-internal/prod-error-codes
throw new Error('Expected to find the previous sibling.');}}prevSibling.sibling=newWorkInProgress;}// Delete the old fiber and place the new one.
// Since the old fiber is disconnected, we have to schedule it manually.
var deletions=returnFiber.deletions;if(deletions===null){returnFiber.deletions=[current];returnFiber.flags|=ChildDeletion;}else{deletions.push(current);}newWorkInProgress.flags|=Placement;// Restart work from the new fiber.
return newWorkInProgress;}}function checkScheduledUpdateOrContext(current,renderLanes){// Before performing an early bailout, we must check if there are pending
// updates or context.
var updateLanes=current.lanes;if(includesSomeLane(updateLanes,renderLanes)){return true;}// No pending update, but because context is propagated lazily, we need
return false;}function attemptEarlyBailoutIfNoScheduledUpdate(current,workInProgress,renderLanes){// This fiber does not have any pending work. Bailout without entering
// the begin phase. There's still some bookkeeping we that needs to be done
// in this optimized path, mostly pushing stuff onto the stack.
switch(workInProgress.tag){case HostRoot:pushHostRootContext(workInProgress);var root=workInProgress.stateNode;resetHydrationState();break;case HostComponent:pushHostContext(workInProgress);break;case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){pushContextProvider(workInProgress);}break;}case HostPortal:pushHostContainer(workInProgress,workInProgress.stateNode.containerInfo);break;case ContextProvider:{var newValue=workInProgress.memoizedProps.value;var context=workInProgress.type._context;pushProvider(workInProgress,context,newValue);break;}case Profiler:{// Profiler should only call onRender when one of its descendants actually rendered.
var hasChildWork=includesSomeLane(renderLanes,workInProgress.childLanes);if(hasChildWork){workInProgress.flags|=Update;}{// Reset effect durations for the next eventual effect phase.
// These are reset during render to allow the DevTools commit hook a chance to read them,
var stateNode=workInProgress.stateNode;stateNode.effectDuration=0;stateNode.passiveEffectDuration=0;}}break;case SuspenseComponent:{var state=workInProgress.memoizedState;if(state!==null){if(state.dehydrated!==null){pushSuspenseContext(workInProgress,setDefaultShallowSuspenseContext(suspenseStackCursor.current));// We know that this component will suspend again because if it has
// been unsuspended it has committed as a resolved Suspense component.
// If it needs to be retried, it should have work scheduled on it.
workInProgress.flags|=DidCapture;// We should never render the children of a dehydrated boundary until we
// upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.
return null;}// If this boundary is currently timed out, we need to decide
// whether to retry the primary children, or to skip over it and
// go straight to the fallback. Check the priority of the primary
// child fragment.
var primaryChildFragment=workInProgress.child;var primaryChildLanes=primaryChildFragment.childLanes;if(includesSomeLane(renderLanes,primaryChildLanes)){// The primary children have pending work. Use the normal path
// to attempt to render the primary children again.
return updateSuspenseComponent(current,workInProgress,renderLanes);}else{// The primary child fragment does not have pending work marked
// on it
pushSuspenseContext(workInProgress,setDefaultShallowSuspenseContext(suspenseStackCursor.current));// The primary children do not have pending work with sufficient
// priority. Bailout.
var child=bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);if(child!==null){// The fallback children have pending work. Skip over the
// primary children and work on the fallback.
return child.sibling;}else{// Note: We can return `null` here because we already checked
// whether there were nested context consumers, via the call to
// `bailoutOnAlreadyFinishedWork` above.
return null;}}}else{pushSuspenseContext(workInProgress,setDefaultShallowSuspenseContext(suspenseStackCursor.current));}break;}case SuspenseListComponent:{var didSuspendBefore=(current.flags&DidCapture)!==NoFlags;var _hasChildWork=includesSomeLane(renderLanes,workInProgress.childLanes);if(didSuspendBefore){if(_hasChildWork){// If something was in fallback state last time, and we have all the
// same children then we're still in progressive loading state.
// Something might get unblocked by state updates or retries in the
// tree which will affect the tail. So we need to use the normal
// path to compute the correct tail.
return updateSuspenseListComponent(current,workInProgress,renderLanes);}// If none of the children had any work, that means that none of
// them got retried so they'll still be blocked in the same way
// as before. We can fast bail out.
workInProgress.flags|=DidCapture;}// If nothing suspended before and we're rendering the same children,
// then the tail doesn't matter. Anything new that suspends will work
// in the "together" mode, so we can continue from the state we had.
var renderState=workInProgress.memoizedState;if(renderState!==null){// Reset to the "together" mode in case we've started a different
// update in the past but didn't complete it.
renderState.rendering=null;renderState.tail=null;renderState.lastEffect=null;}pushSuspenseContext(workInProgress,suspenseStackCursor.current);if(_hasChildWork){break;}else{// If none of the children had any work, that means that none of
// them got retried so they'll still be blocked in the same way
// as before. We can fast bail out.
return null;}}case OffscreenComponent:case LegacyHiddenComponent:{// Need to check if the tree still needs to be deferred. This is
// almost identical to the logic used in the normal update path,
// so we'll just enter that. The only difference is we'll bail out
// at the next level instead of this one, because the child props
// have not changed. Which is fine.
// TODO: Probably should refactor `beginWork` to split the bailout
// path from the normal path. I'm tempted to do a labeled break here
// but I won't :)
workInProgress.lanes=NoLanes;return updateOffscreenComponent(current,workInProgress,renderLanes);}}return bailoutOnAlreadyFinishedWork(current,workInProgress,renderLanes);}function beginWork(current,workInProgress,renderLanes){{if(workInProgress._debugNeedsRemount&&current!==null){// This will restart the begin phase with a new fiber.
return remountFiber(current,workInProgress,createFiberFromTypeAndProps(workInProgress.type,workInProgress.key,workInProgress.pendingProps,workInProgress._debugOwner||null,workInProgress.mode,workInProgress.lanes));}}if(current!==null){var oldProps=current.memoizedProps;var newProps=workInProgress.pendingProps;if(oldProps!==newProps||hasContextChanged()||// Force a re-render if the implementation changed due to hot reload:
workInProgress.type!==current.type){// If props or context changed, mark the fiber as having performed work.
// This may be unset if the props are determined to be equal later (memo).
didReceiveUpdate=true;}else{// Neither props nor legacy context changes. Check if there's a pending
// update or context change.
var hasScheduledUpdateOrContext=checkScheduledUpdateOrContext(current,renderLanes);if(!hasScheduledUpdateOrContext&&// If this is the second pass of an error or suspense boundary, there
// may not be work scheduled on `current`, so we check for this flag.
(workInProgress.flags&DidCapture)===NoFlags){// No pending updates or context. Bail out now.
didReceiveUpdate=false;return attemptEarlyBailoutIfNoScheduledUpdate(current,workInProgress,renderLanes);}if((current.flags&ForceUpdateForLegacySuspense)!==NoFlags){// This is a special case that only exists for legacy mode.
// See https://github.com/facebook/react/pull/19216.
didReceiveUpdate=true;}else{// An update was scheduled on this fiber, but there are no new props
// nor legacy context. Set this to false. If an update queue or context
// consumer produces a changed value, it will set this to true. Otherwise,
// the component will assume the children have not changed and bail out.
didReceiveUpdate=false;}}}else{didReceiveUpdate=false;if(getIsHydrating()&&isForkedChild(workInProgress)){// Check if this child belongs to a list of muliple children in
// its parent.
//
// In a true multi-threaded implementation, we would render children on
// parallel threads. This would represent the beginning of a new render
// thread for this subtree.
//
// We only use this for id generation during hydration, which is why the
// logic is located in this special branch.
var slotIndex=workInProgress.index;var numberOfForks=getForksAtLevel();pushTreeId(workInProgress,numberOfForks,slotIndex);}}// Before entering the begin phase, clear pending update priority.
// TODO: This assumes that we're about to evaluate the component and process
// the update queue. However, there's an exception: SimpleMemoComponent
// sometimes bails out later in the begin phase. This indicates that we should
// move this assignment out of the common path and into each branch.
workInProgress.lanes=NoLanes;switch(workInProgress.tag){case IndeterminateComponent:{return mountIndeterminateComponent(current,workInProgress,workInProgress.type,renderLanes);}case LazyComponent:{var elementType=workInProgress.elementType;return mountLazyComponent(current,workInProgress,elementType,renderLanes);}case FunctionComponent:{var Component=workInProgress.type;var unresolvedProps=workInProgress.pendingProps;var resolvedProps=workInProgress.elementType===Component?unresolvedProps:resolveDefaultProps(Component,unresolvedProps);return updateFunctionComponent(current,workInProgress,Component,resolvedProps,renderLanes);}case ClassComponent:{var _Component=workInProgress.type;var _unresolvedProps=workInProgress.pendingProps;var _resolvedProps=workInProgress.elementType===_Component?_unresolvedProps:resolveDefaultProps(_Component,_unresolvedProps);return updateClassComponent(current,workInProgress,_Component,_resolvedProps,renderLanes);}case HostRoot:return updateHostRoot(current,workInProgress,renderLanes);case HostComponent:return updateHostComponent(current,workInProgress,renderLanes);case HostText:return updateHostText(current,workInProgress);case SuspenseComponent:return updateSuspenseComponent(current,workInProgress,renderLanes);case HostPortal:return updatePortalComponent(current,workInProgress,renderLanes);case ForwardRef:{var type=workInProgress.type;var _unresolvedProps2=workInProgress.pendingProps;var _resolvedProps2=workInProgress.elementType===type?_unresolvedProps2:resolveDefaultProps(type,_unresolvedProps2);return updateForwardRef(current,workInProgress,type,_resolvedProps2,renderLanes);}case Fragment:return updateFragment(current,workInProgress,renderLanes);case Mode:return updateMode(current,workInProgress,renderLanes);case Profiler:return updateProfiler(current,workInProgress,renderLanes);case ContextProvider:return updateContextProvider(current,workInProgress,renderLanes);case ContextConsumer:return updateContextConsumer(current,workInProgress,renderLanes);case MemoComponent:{var _type2=workInProgress.type;var _unresolvedProps3=workInProgress.pendingProps;// Resolve outer props first, then resolve inner props.
var _resolvedProps3=resolveDefaultProps(_type2,_unresolvedProps3);{if(workInProgress.type!==workInProgress.elementType){var outerPropTypes=_type2.propTypes;if(outerPropTypes){checkPropTypes(outerPropTypes,_resolvedProps3,// Resolved for outer only
'prop',getComponentNameFromType(_type2));}}}_resolvedProps3=resolveDefaultProps(_type2.type,_resolvedProps3);return updateMemoComponent(current,workInProgress,_type2,_resolvedProps3,renderLanes);}case SimpleMemoComponent:{return updateSimpleMemoComponent(current,workInProgress,workInProgress.type,workInProgress.pendingProps,renderLanes);}case IncompleteClassComponent:{var _Component2=workInProgress.type;var _unresolvedProps4=workInProgress.pendingProps;var _resolvedProps4=workInProgress.elementType===_Component2?_unresolvedProps4:resolveDefaultProps(_Component2,_unresolvedProps4);return mountIncompleteClassComponent(current,workInProgress,_Component2,_resolvedProps4,renderLanes);}case SuspenseListComponent:{return updateSuspenseListComponent(current,workInProgress,renderLanes);}case ScopeComponent:{break;}case OffscreenComponent:{return updateOffscreenComponent(current,workInProgress,renderLanes);}}throw new Error("Unknown unit of work tag ("+workInProgress.tag+"). This error is likely caused by a bug in "+'React. Please file an issue.');}function markUpdate(workInProgress){// Tag the fiber with an update effect. This turns a Placement into
// a PlacementAndUpdate.
workInProgress.flags|=Update;}function markRef$1(workInProgress){workInProgress.flags|=Ref;{workInProgress.flags|=RefStatic;}}var appendAllChildren;var updateHostContainer;var updateHostComponent$1;var updateHostText$1;{// Mutation mode
appendAllChildren=function appendAllChildren(parent,workInProgress,needsVisibilityToggle,isHidden){// We only have the top Fiber that was created but we need recurse down its
// children to find all the terminal nodes.
var node=workInProgress.child;while(node!==null){if(node.tag===HostComponent||node.tag===HostText){appendInitialChild(parent,node.stateNode);}else if(node.tag===HostPortal);else if(node.child!==null){node.child["return"]=node;node=node.child;continue;}if(node===workInProgress){return;}while(node.sibling===null){if(node["return"]===null||node["return"]===workInProgress){return;}node=node["return"];}node.sibling["return"]=node["return"];node=node.sibling;}};updateHostContainer=function updateHostContainer(current,workInProgress){// Noop
};updateHostComponent$1=function updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance){// If we have an alternate, that means this is an update and we need to
// schedule a side-effect to do the updates.
var oldProps=current.memoizedProps;if(oldProps===newProps){// In mutation mode, this is sufficient for a bailout because
// we won't touch this node even if children changed.
return;}// If we get updated because one of our children updated, we don't
// have newProps so we'll have to reuse them.
// TODO: Split the update API as separate for the props vs. children.
// Even better would be if children weren't special cased at all tho.
var instance=workInProgress.stateNode;var currentHostContext=getHostContext();// TODO: Experiencing an error where oldProps is null. Suggests a host
// component is hitting the resume path. Figure out why. Possibly
// related to `hidden`.
var updatePayload=prepareUpdate(instance,type,oldProps,newProps,rootContainerInstance,currentHostContext);// TODO: Type this specific to this type of component.
workInProgress.updateQueue=updatePayload;// If the update payload indicates that there is a change or if there
// is a new ref we mark this as an update. All the work is done in commitWork.
if(updatePayload){markUpdate(workInProgress);}};updateHostText$1=function updateHostText$1(current,workInProgress,oldText,newText){// If the text differs, mark it as an update. All the work in done in commitWork.
if(oldText!==newText){markUpdate(workInProgress);}};}function cutOffTailIfNeeded(renderState,hasRenderedATailFallback){if(getIsHydrating()){// If we're hydrating, we should consume as many items as we can
// so we don't leave any behind.
return;}switch(renderState.tailMode){case'hidden':{// Any insertions at the end of the tail list after this point
// should be invisible. If there are already mounted boundaries
// anything before them are not considered for collapsing.
// Therefore we need to go through the whole tail to find if
// there are any.
var tailNode=renderState.tail;var lastTailNode=null;while(tailNode!==null){if(tailNode.alternate!==null){lastTailNode=tailNode;}tailNode=tailNode.sibling;}// Next we're simply going to delete all insertions after the
// last rendered item.
if(lastTailNode===null){// All remaining items in the tail are insertions.
renderState.tail=null;}else{// Detach the insertion after the last node that was already
// inserted.
lastTailNode.sibling=null;}break;}case'collapsed':{// Any insertions at the end of the tail list after this point
// should be invisible. If there are already mounted boundaries
// anything before them are not considered for collapsing.
// Therefore we need to go through the whole tail to find if
// there are any.
var _tailNode=renderState.tail;var _lastTailNode=null;while(_tailNode!==null){if(_tailNode.alternate!==null){_lastTailNode=_tailNode;}_tailNode=_tailNode.sibling;}// Next we're simply going to delete all insertions after the
// last rendered item.
if(_lastTailNode===null){// All remaining items in the tail are insertions.
if(!hasRenderedATailFallback&&renderState.tail!==null){// We suspended during the head. We want to show at least one
// row at the tail. So we'll keep on and cut off the rest.
renderState.tail.sibling=null;}else{renderState.tail=null;}}else{// Detach the insertion after the last node that was already
// inserted.
_lastTailNode.sibling=null;}break;}}}function bubbleProperties(completedWork){var didBailout=completedWork.alternate!==null&&completedWork.alternate.child===completedWork.child;var newChildLanes=NoLanes;var subtreeFlags=NoFlags;if(!didBailout){// Bubble up the earliest expiration time.
if((completedWork.mode&ProfileMode)!==NoMode){// In profiling mode, resetChildExpirationTime is also used to reset
// profiler durations.
var actualDuration=completedWork.actualDuration;var treeBaseDuration=completedWork.selfBaseDuration;var child=completedWork.child;while(child!==null){newChildLanes=mergeLanes(newChildLanes,mergeLanes(child.lanes,child.childLanes));subtreeFlags|=child.subtreeFlags;subtreeFlags|=child.flags;// When a fiber is cloned, its actualDuration is reset to 0. This value will
// only be updated if work is done on the fiber (i.e. it doesn't bailout).
// When work is done, it should bubble to the parent's actualDuration. If
// the fiber has not been cloned though, (meaning no work was done), then
// this value will reflect the amount of time spent working on a previous
// render. In that case it should not bubble. We determine whether it was
// cloned by comparing the child pointer.
actualDuration+=child.actualDuration;treeBaseDuration+=child.treeBaseDuration;child=child.sibling;}completedWork.actualDuration=actualDuration;completedWork.treeBaseDuration=treeBaseDuration;}else{var _child=completedWork.child;while(_child!==null){newChildLanes=mergeLanes(newChildLanes,mergeLanes(_child.lanes,_child.childLanes));subtreeFlags|=_child.subtreeFlags;subtreeFlags|=_child.flags;// Update the return pointer so the tree is consistent. This is a code
// smell because it assumes the commit phase is never concurrent with
// the render phase. Will address during refactor to alternate model.
_child["return"]=completedWork;_child=_child.sibling;}}completedWork.subtreeFlags|=subtreeFlags;}else{// Bubble up the earliest expiration time.
if((completedWork.mode&ProfileMode)!==NoMode){// In profiling mode, resetChildExpirationTime is also used to reset
// profiler durations.
var _treeBaseDuration=completedWork.selfBaseDuration;var _child2=completedWork.child;while(_child2!==null){newChildLanes=mergeLanes(newChildLanes,mergeLanes(_child2.lanes,_child2.childLanes));// "Static" flags share the lifetime of the fiber/hook they belong to,
// so we should bubble those up even during a bailout. All the other
// flags have a lifetime only of a single render + commit, so we should
// ignore them.
subtreeFlags|=_child2.subtreeFlags&StaticMask;subtreeFlags|=_child2.flags&StaticMask;_treeBaseDuration+=_child2.treeBaseDuration;_child2=_child2.sibling;}completedWork.treeBaseDuration=_treeBaseDuration;}else{var _child3=completedWork.child;while(_child3!==null){newChildLanes=mergeLanes(newChildLanes,mergeLanes(_child3.lanes,_child3.childLanes));// "Static" flags share the lifetime of the fiber/hook they belong to,
// so we should bubble those up even during a bailout. All the other
// flags have a lifetime only of a single render + commit, so we should
// ignore them.
subtreeFlags|=_child3.subtreeFlags&StaticMask;subtreeFlags|=_child3.flags&StaticMask;// Update the return pointer so the tree is consistent. This is a code
// smell because it assumes the commit phase is never concurrent with
// the render phase. Will address during refactor to alternate model.
_child3["return"]=completedWork;_child3=_child3.sibling;}}completedWork.subtreeFlags|=subtreeFlags;}completedWork.childLanes=newChildLanes;return didBailout;}function completeDehydratedSuspenseBoundary(current,workInProgress,nextState){if(hasUnhydratedTailNodes()&&(workInProgress.mode&ConcurrentMode)!==NoMode&&(workInProgress.flags&DidCapture)===NoFlags){warnIfUnhydratedTailNodes(workInProgress);resetHydrationState();workInProgress.flags|=ForceClientRender|Incomplete|ShouldCapture;return false;}var wasHydrated=popHydrationState(workInProgress);if(nextState!==null&&nextState.dehydrated!==null){// We might be inside a hydration state the first time we're picking up this
// Suspense boundary, and also after we've reentered it for further hydration.
if(current===null){if(!wasHydrated){throw new Error('A dehydrated suspense component was completed without a hydrated node. '+'This is probably a bug in React.');}prepareToHydrateHostSuspenseInstance(workInProgress);bubbleProperties(workInProgress);{if((workInProgress.mode&ProfileMode)!==NoMode){var isTimedOutSuspense=nextState!==null;if(isTimedOutSuspense){// Don't count time spent in a timed out Suspense subtree as part of the base duration.
var primaryChildFragment=workInProgress.child;if(primaryChildFragment!==null){// $FlowFixMe Flow doesn't support type casting in combination with the -= operator
workInProgress.treeBaseDuration-=primaryChildFragment.treeBaseDuration;}}}}return false;}else{// We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
// state since we're now exiting out of it. popHydrationState doesn't do that for us.
resetHydrationState();if((workInProgress.flags&DidCapture)===NoFlags){// This boundary did not suspend so it's now hydrated and unsuspended.
workInProgress.memoizedState=null;}// If nothing suspended, we need to schedule an effect to mark this boundary
// as having hydrated so events know that they're free to be invoked.
// It's also a signal to replay events and the suspense callback.
// If something suspended, schedule an effect to attach retry listeners.
// So we might as well always mark this.
workInProgress.flags|=Update;bubbleProperties(workInProgress);{if((workInProgress.mode&ProfileMode)!==NoMode){var _isTimedOutSuspense=nextState!==null;if(_isTimedOutSuspense){// Don't count time spent in a timed out Suspense subtree as part of the base duration.
var _primaryChildFragment=workInProgress.child;if(_primaryChildFragment!==null){// $FlowFixMe Flow doesn't support type casting in combination with the -= operator
workInProgress.treeBaseDuration-=_primaryChildFragment.treeBaseDuration;}}}}return false;}}else{// Successfully completed this tree. If this was a forced client render,
// there may have been recoverable errors during first hydration
// attempt. If so, add them to a queue so we can log them in the
// commit phase.
upgradeHydrationErrorsToRecoverable();// Fall through to normal Suspense path
return true;}}function completeWork(current,workInProgress,renderLanes){var newProps=workInProgress.pendingProps;// Note: This intentionally doesn't check if we're hydrating because comparing
// to the current tree provider fiber is just as fast and less error-prone.
// Ideally we would have a special version of the work loop only
// for hydration.
popTreeContext(workInProgress);switch(workInProgress.tag){case IndeterminateComponent:case LazyComponent:case SimpleMemoComponent:case FunctionComponent:case ForwardRef:case Fragment:case Mode:case Profiler:case ContextConsumer:case MemoComponent:bubbleProperties(workInProgress);return null;case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){popContext(workInProgress);}bubbleProperties(workInProgress);return null;}case HostRoot:{var fiberRoot=workInProgress.stateNode;popHostContainer(workInProgress);popTopLevelContextObject(workInProgress);resetWorkInProgressVersions();if(fiberRoot.pendingContext){fiberRoot.context=fiberRoot.pendingContext;fiberRoot.pendingContext=null;}if(current===null||current.child===null){// If we hydrated, pop so that we can delete any remaining children
// that weren't hydrated.
var wasHydrated=popHydrationState(workInProgress);if(wasHydrated){// If we hydrated, then we'll need to schedule an update for
// the commit side-effects on the root.
markUpdate(workInProgress);}else{if(current!==null){var prevState=current.memoizedState;if(// Check if this is a client root
!prevState.isDehydrated||// Check if we reverted to client rendering (e.g. due to an error)
(workInProgress.flags&ForceClientRender)!==NoFlags){// Schedule an effect to clear this container at the start of the
// next commit. This handles the case of React rendering into a
// container with previous children. It's also safe to do for
// updates too, because current.child would only be null if the
// previous render was null (so the container would already
// be empty).
workInProgress.flags|=Snapshot;// If this was a forced client render, there may have been
// recoverable errors during first hydration attempt. If so, add
// them to a queue so we can log them in the commit phase.
upgradeHydrationErrorsToRecoverable();}}}}updateHostContainer(current,workInProgress);bubbleProperties(workInProgress);return null;}case HostComponent:{popHostContext(workInProgress);var rootContainerInstance=getRootHostContainer();var type=workInProgress.type;if(current!==null&&workInProgress.stateNode!=null){updateHostComponent$1(current,workInProgress,type,newProps,rootContainerInstance);if(current.ref!==workInProgress.ref){markRef$1(workInProgress);}}else{if(!newProps){if(workInProgress.stateNode===null){throw new Error('We must have new props for new mounts. This error is likely '+'caused by a bug in React. Please file an issue.');}// This can happen when we abort work.
bubbleProperties(workInProgress);return null;}var currentHostContext=getHostContext();// TODO: Move createInstance to beginWork and keep it on a context
// "stack" as the parent. Then append children as we go in beginWork
// or completeWork depending on whether we want to add them top->down or
// bottom->up. Top->down is faster in IE11.
var _wasHydrated=popHydrationState(workInProgress);if(_wasHydrated){// TODO: Move this and createInstance step into the beginPhase
// to consolidate.
if(prepareToHydrateHostInstance(workInProgress,rootContainerInstance,currentHostContext)){// If changes to the hydrated node need to be applied at the
// commit-phase we mark this as such.
markUpdate(workInProgress);}}else{var instance=createInstance(type,newProps,rootContainerInstance,currentHostContext,workInProgress);appendAllChildren(instance,workInProgress,false,false);workInProgress.stateNode=instance;// Certain renderers require commit-time effects for initial mount.
// (eg DOM renderer supports auto-focus for certain elements).
// Make sure such renderers get scheduled for later work.
if(finalizeInitialChildren(instance,type,newProps,rootContainerInstance)){markUpdate(workInProgress);}}if(workInProgress.ref!==null){// If there is a ref on a host node we need to schedule a callback
markRef$1(workInProgress);}}bubbleProperties(workInProgress);return null;}case HostText:{var newText=newProps;if(current&&workInProgress.stateNode!=null){var oldText=current.memoizedProps;// If we have an alternate, that means this is an update and we need
// to schedule a side-effect to do the updates.
updateHostText$1(current,workInProgress,oldText,newText);}else{if(typeof newText!=='string'){if(workInProgress.stateNode===null){throw new Error('We must have new props for new mounts. This error is likely '+'caused by a bug in React. Please file an issue.');}// This can happen when we abort work.
}var _rootContainerInstance=getRootHostContainer();var _currentHostContext=getHostContext();var _wasHydrated2=popHydrationState(workInProgress);if(_wasHydrated2){if(prepareToHydrateHostTextInstance(workInProgress)){markUpdate(workInProgress);}}else{workInProgress.stateNode=createTextInstance(newText,_rootContainerInstance,_currentHostContext,workInProgress);}}bubbleProperties(workInProgress);return null;}case SuspenseComponent:{popSuspenseContext(workInProgress);var nextState=workInProgress.memoizedState;// Special path for dehydrated boundaries. We may eventually move this
// to its own fiber type so that we can add other kinds of hydration
// boundaries that aren't associated with a Suspense tree. In anticipation
// of such a refactor, all the hydration logic is contained in
// this branch.
if(current===null||current.memoizedState!==null&&current.memoizedState.dehydrated!==null){var fallthroughToNormalSuspensePath=completeDehydratedSuspenseBoundary(current,workInProgress,nextState);if(!fallthroughToNormalSuspensePath){if(workInProgress.flags&ShouldCapture){// Special case. There were remaining unhydrated nodes. We treat
// this as a mismatch. Revert to client rendering.
return workInProgress;}else{// Did not finish hydrating, either because this is the initial
// render or because something suspended.
return null;}}// Continue with the normal Suspense path.
}if((workInProgress.flags&DidCapture)!==NoFlags){// Something suspended. Re-render with the fallback children.
workInProgress.lanes=renderLanes;// Do not reset the effect list.
if((workInProgress.mode&ProfileMode)!==NoMode){transferActualDuration(workInProgress);}// Don't bubble properties in this case.
return workInProgress;}var nextDidTimeout=nextState!==null;var prevDidTimeout=current!==null&&current.memoizedState!==null;// a passive effect, which is when we process the transitions
if(nextDidTimeout!==prevDidTimeout){// an effect to toggle the subtree's visibility. When we switch from
// fallback -> primary, the inner Offscreen fiber schedules this effect
// as part of its normal complete phase. But when we switch from
// primary -> fallback, the inner Offscreen fiber does not have a complete
// phase. So we need to schedule its effect here.
//
// We also use this flag to connect/disconnect the effects, but the same
// logic applies: when re-connecting, the Offscreen fiber's complete
// phase will handle scheduling the effect. It's only when the fallback
// is active that we have to do anything special.
if(nextDidTimeout){var _offscreenFiber2=workInProgress.child;_offscreenFiber2.flags|=Visibility;// TODO: This will still suspend a synchronous tree if anything
// in the concurrent tree already suspended during this render.
// This is a known bug.
if((workInProgress.mode&ConcurrentMode)!==NoMode){// TODO: Move this back to throwException because this is too late
// if this is a large tree which is common for initial loads. We
// don't know if we should restart a render or not until we get
// this marker, and this is too late.
// If this render already had a ping or lower pri updates,
// and this is the first time we know we're going to suspend we
// should be able to immediately restart from within throwException.
var hasInvisibleChildContext=current===null&&(workInProgress.memoizedProps.unstable_avoidThisFallback!==true||!enableSuspenseAvoidThisFallback);if(hasInvisibleChildContext||hasSuspenseContext(suspenseStackCursor.current,InvisibleParentSuspenseContext)){// If this was in an invisible tree or a new render, then showing
// this boundary is ok.
renderDidSuspend();}else{// Otherwise, we're going to have to hide content so we should
// suspend for longer if possible.
renderDidSuspendDelayIfPossible();}}}}var wakeables=workInProgress.updateQueue;if(wakeables!==null){// Schedule an effect to attach a retry listener to the promise.
// TODO: Move to passive phase
workInProgress.flags|=Update;}bubbleProperties(workInProgress);{if((workInProgress.mode&ProfileMode)!==NoMode){if(nextDidTimeout){// Don't count time spent in a timed out Suspense subtree as part of the base duration.
var primaryChildFragment=workInProgress.child;if(primaryChildFragment!==null){// $FlowFixMe Flow doesn't support type casting in combination with the -= operator
workInProgress.treeBaseDuration-=primaryChildFragment.treeBaseDuration;}}}}return null;}case HostPortal:popHostContainer(workInProgress);updateHostContainer(current,workInProgress);if(current===null){preparePortalMount(workInProgress.stateNode.containerInfo);}bubbleProperties(workInProgress);return null;case ContextProvider:// Pop provider fiber
var context=workInProgress.type._context;popProvider(context,workInProgress);bubbleProperties(workInProgress);return null;case IncompleteClassComponent:{// Same as class component case. I put it down here so that the tags are
// sequential to ensure this switch is compiled to a jump table.
var _Component=workInProgress.type;if(isContextProvider(_Component)){popContext(workInProgress);}bubbleProperties(workInProgress);return null;}case SuspenseListComponent:{popSuspenseContext(workInProgress);var renderState=workInProgress.memoizedState;if(renderState===null){// We're running in the default, "independent" mode.
// We don't do anything in this mode.
bubbleProperties(workInProgress);return null;}var didSuspendAlready=(workInProgress.flags&DidCapture)!==NoFlags;var renderedTail=renderState.rendering;if(renderedTail===null){// We just rendered the head.
if(!didSuspendAlready){// This is the first pass. We need to figure out if anything is still
// suspended in the rendered set.
// If new content unsuspended, but there's still some content that
// didn't. Then we need to do a second pass that forces everything
// to keep showing their fallbacks.
// We might be suspended if something in this render pass suspended, or
// something in the previous committed pass suspended. Otherwise,
// there's no chance so we can skip the expensive call to
// findFirstSuspended.
var cannotBeSuspended=renderHasNotSuspendedYet()&&(current===null||(current.flags&DidCapture)===NoFlags);if(!cannotBeSuspended){var row=workInProgress.child;while(row!==null){var suspended=findFirstSuspended(row);if(suspended!==null){didSuspendAlready=true;workInProgress.flags|=DidCapture;cutOffTailIfNeeded(renderState,false);// If this is a newly suspended tree, it might not get committed as
// part of the second pass. In that case nothing will subscribe to
// its thenables. Instead, we'll transfer its thenables to the
// SuspenseList so that it can retry if they resolve.
// There might be multiple of these in the list but since we're
// going to wait for all of them anyway, it doesn't really matter
// which ones gets to ping. In theory we could get clever and keep
// track of how many dependencies remain but it gets tricky because
// in the meantime, we can add/remove/change items and dependencies.
// We might bail out of the loop before finding any but that
// doesn't matter since that means that the other boundaries that
// we did find already has their listeners attached.
var newThenables=suspended.updateQueue;if(newThenables!==null){workInProgress.updateQueue=newThenables;workInProgress.flags|=Update;}// Rerender the whole list, but this time, we'll force fallbacks
// to stay in place.
// Reset the effect flags before doing the second pass since that's now invalid.
// Reset the child fibers to their original state.
workInProgress.subtreeFlags=NoFlags;resetChildFibers(workInProgress,renderLanes);// Set up the Suspense Context to force suspense and immediately
// rerender the children.
pushSuspenseContext(workInProgress,setShallowSuspenseContext(suspenseStackCursor.current,ForceSuspenseFallback));// Don't bubble properties in this case.
return workInProgress.child;}row=row.sibling;}}if(renderState.tail!==null&&now()>getRenderTargetTime()){// We have already passed our CPU deadline but we still have rows
// left in the tail. We'll just give up further attempts to render
// the main content and only render fallbacks.
workInProgress.flags|=DidCapture;didSuspendAlready=true;cutOffTailIfNeeded(renderState,false);// Since nothing actually suspended, there will nothing to ping this
// to get it started back up to attempt the next item. While in terms
// of priority this work has the same priority as this current render,
// it's not part of the same transition once the transition has
// committed. If it's sync, we still want to yield so that it can be
// painted. Conceptually, this is really the same as pinging.
// We can use any RetryLane even if it's the one currently rendering
// since we're leaving it behind on this node.
workInProgress.lanes=SomeRetryLane;}}else{cutOffTailIfNeeded(renderState,false);}// Next we're going to render the tail.
}else{// Append the rendered row to the child list.
if(!didSuspendAlready){var _suspended=findFirstSuspended(renderedTail);if(_suspended!==null){workInProgress.flags|=DidCapture;didSuspendAlready=true;// Ensure we transfer the update queue to the parent so that it doesn't
// get lost if this row ends up dropped during a second pass.
var _newThenables=_suspended.updateQueue;if(_newThenables!==null){workInProgress.updateQueue=_newThenables;workInProgress.flags|=Update;}cutOffTailIfNeeded(renderState,true);// This might have been modified.
if(renderState.tail===null&&renderState.tailMode==='hidden'&&!renderedTail.alternate&&!getIsHydrating()// We don't cut it if we're hydrating.
){// We're done.
bubbleProperties(workInProgress);return null;}}else if(// The time it took to render last row is greater than the remaining
// time we have to render. So rendering one more row would likely
// exceed it.
now()*2-renderState.renderingStartTime>getRenderTargetTime()&&renderLanes!==OffscreenLane){// We have now passed our CPU deadline and we'll just give up further
// attempts to render the main content and only render fallbacks.
// The assumption is that this is usually faster.
workInProgress.flags|=DidCapture;didSuspendAlready=true;cutOffTailIfNeeded(renderState,false);// Since nothing actually suspended, there will nothing to ping this
// to get it started back up to attempt the next item. While in terms
// of priority this work has the same priority as this current render,
// it's not part of the same transition once the transition has
// committed. If it's sync, we still want to yield so that it can be
// painted. Conceptually, this is really the same as pinging.
// We can use any RetryLane even if it's the one currently rendering
// since we're leaving it behind on this node.
workInProgress.lanes=SomeRetryLane;}}if(renderState.isBackwards){// The effect list of the backwards tail will have been added
// to the end. This breaks the guarantee that life-cycles fire in
// sibling order but that isn't a strong guarantee promised by React.
// Especially since these might also just pop in during future commits.
// Append to the beginning of the list.
renderedTail.sibling=workInProgress.child;workInProgress.child=renderedTail;}else{var previousSibling=renderState.last;if(previousSibling!==null){previousSibling.sibling=renderedTail;}else{workInProgress.child=renderedTail;}renderState.last=renderedTail;}}if(renderState.tail!==null){// We still have tail rows to render.
// Pop a row.
var next=renderState.tail;renderState.rendering=next;renderState.tail=next.sibling;renderState.renderingStartTime=now();next.sibling=null;// Restore the context.
// TODO: We can probably just avoid popping it instead and only
// setting it the first time we go from not suspended to suspended.
var suspenseContext=suspenseStackCursor.current;if(didSuspendAlready){suspenseContext=setShallowSuspenseContext(suspenseContext,ForceSuspenseFallback);}else{suspenseContext=setDefaultShallowSuspenseContext(suspenseContext);}pushSuspenseContext(workInProgress,suspenseContext);// Do a pass over the next row.
// Don't bubble properties in this case.
return next;}bubbleProperties(workInProgress);return null;}case ScopeComponent:{break;}case OffscreenComponent:case LegacyHiddenComponent:{popRenderLanes(workInProgress);var _nextState=workInProgress.memoizedState;var nextIsHidden=_nextState!==null;if(current!==null){var _prevState=current.memoizedState;var prevIsHidden=_prevState!==null;if(prevIsHidden!==nextIsHidden&&// LegacyHidden doesn't do any hiding — it only pre-renders.
!enableLegacyHidden){workInProgress.flags|=Visibility;}}if(!nextIsHidden||(workInProgress.mode&ConcurrentMode)===NoMode){bubbleProperties(workInProgress);}else{// Don't bubble properties for hidden children unless we're rendering
// at offscreen priority.
if(includesSomeLane(subtreeRenderLanes,OffscreenLane)){bubbleProperties(workInProgress);{// Check if there was an insertion or update in the hidden subtree.
// If so, we need to hide those nodes in the commit phase, so
// schedule a visibility effect.
if(workInProgress.subtreeFlags&(Placement|Update)){workInProgress.flags|=Visibility;}}}}return null;}case CacheComponent:{return null;}case TracingMarkerComponent:{return null;}}throw new Error("Unknown unit of work tag ("+workInProgress.tag+"). This error is likely caused by a bug in "+'React. Please file an issue.');}function unwindWork(current,workInProgress,renderLanes){// Note: This intentionally doesn't check if we're hydrating because comparing
// to the current tree provider fiber is just as fast and less error-prone.
// Ideally we would have a special version of the work loop only
// for hydration.
popTreeContext(workInProgress);switch(workInProgress.tag){case ClassComponent:{var Component=workInProgress.type;if(isContextProvider(Component)){popContext(workInProgress);}var flags=workInProgress.flags;if(flags&ShouldCapture){workInProgress.flags=flags&~ShouldCapture|DidCapture;if((workInProgress.mode&ProfileMode)!==NoMode){transferActualDuration(workInProgress);}return workInProgress;}return null;}case HostRoot:{var root=workInProgress.stateNode;popHostContainer(workInProgress);popTopLevelContextObject(workInProgress);resetWorkInProgressVersions();var _flags=workInProgress.flags;if((_flags&ShouldCapture)!==NoFlags&&(_flags&DidCapture)===NoFlags){// There was an error during render that wasn't captured by a suspense
// boundary. Do a second pass on the root to unmount the children.
workInProgress.flags=_flags&~ShouldCapture|DidCapture;return workInProgress;}// We unwound to the root without completing it. Exit.
return null;}case HostComponent:{// TODO: popHydrationState
popHostContext(workInProgress);return null;}case SuspenseComponent:{popSuspenseContext(workInProgress);var suspenseState=workInProgress.memoizedState;if(suspenseState!==null&&suspenseState.dehydrated!==null){if(workInProgress.alternate===null){throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in '+'React. Please file an issue.');}resetHydrationState();}var _flags2=workInProgress.flags;if(_flags2&ShouldCapture){workInProgress.flags=_flags2&~ShouldCapture|DidCapture;// Captured a suspense effect. Re-render the boundary.
if((workInProgress.mode&ProfileMode)!==NoMode){transferActualDuration(workInProgress);}return workInProgress;}return null;}case SuspenseListComponent:{popSuspenseContext(workInProgress);// SuspenseList doesn't actually catch anything. It should've been
// caught by a nested boundary. If not, it should bubble through.
return null;}case HostPortal:popHostContainer(workInProgress);return null;case ContextProvider:var context=workInProgress.type._context;popProvider(context,workInProgress);return null;case OffscreenComponent:case LegacyHiddenComponent:popRenderLanes(workInProgress);return null;case CacheComponent:return null;default:return null;}}function unwindInterruptedWork(current,interruptedWork,renderLanes){// Note: This intentionally doesn't check if we're hydrating because comparing
// to the current tree provider fiber is just as fast and less error-prone.
// Ideally we would have a special version of the work loop only
// for hydration.
popTreeContext(interruptedWork);switch(interruptedWork.tag){case ClassComponent:{var childContextTypes=interruptedWork.type.childContextTypes;if(childContextTypes!==null&&childContextTypes!==undefined){popContext(interruptedWork);}break;}case HostRoot:{var root=interruptedWork.stateNode;popHostContainer(interruptedWork);popTopLevelContextObject(interruptedWork);resetWorkInProgressVersions();break;}case HostComponent:{popHostContext(interruptedWork);break;}case HostPortal:popHostContainer(interruptedWork);break;case SuspenseComponent:popSuspenseContext(interruptedWork);break;case SuspenseListComponent:popSuspenseContext(interruptedWork);break;case ContextProvider:var context=interruptedWork.type._context;popProvider(context,interruptedWork);break;case OffscreenComponent:case LegacyHiddenComponent:popRenderLanes(interruptedWork);break;}}var didWarnAboutUndefinedSnapshotBeforeUpdate=null;{didWarnAboutUndefinedSnapshotBeforeUpdate=new Set();}// Used during the commit phase to track the state of the Offscreen component stack.
// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
// Only used when enableSuspenseLayoutEffectSemantics is enabled.
var offscreenSubtreeIsHidden=false;var offscreenSubtreeWasHidden=false;var PossiblyWeakSet=typeof WeakSet==='function'?WeakSet:Set;var nextEffect=null;// Used for Profiling builds to track updaters.
var inProgressLanes=null;var inProgressRoot=null;function reportUncaughtErrorInDEV(error){// Wrapping each small part of the commit phase into a guarded
// callback is a bit too slow (https://github.com/facebook/react/pull/21666).
// But we rely on it to surface errors to DEV tools like overlays
// (https://github.com/facebook/react/issues/21712).
// As a compromise, rethrow only caught errors in a guard.
{invokeGuardedCallback(null,function(){throw error;});clearCaughtError();}}var callComponentWillUnmountWithTimer=function callComponentWillUnmountWithTimer(current,instance){instance.props=current.memoizedProps;instance.state=current.memoizedState;if(current.mode&ProfileMode){try{startLayoutEffectTimer();instance.componentWillUnmount();}finally{recordLayoutEffectDuration(current);}}else{instance.componentWillUnmount();}};// Capture errors so they don't interrupt mounting.
function safelyCallCommitHookLayoutEffectListMount(current,nearestMountedAncestor){try{commitHookEffectListMount(Layout,current);}catch(error){captureCommitPhaseError(current,nearestMountedAncestor,error);}}// Capture errors so they don't interrupt unmounting.
function safelyCallComponentWillUnmount(current,nearestMountedAncestor,instance){try{callComponentWillUnmountWithTimer(current,instance);}catch(error){captureCommitPhaseError(current,nearestMountedAncestor,error);}}// Capture errors so they don't interrupt mounting.
function safelyCallComponentDidMount(current,nearestMountedAncestor,instance){try{instance.componentDidMount();}catch(error){captureCommitPhaseError(current,nearestMountedAncestor,error);}}// Capture errors so they don't interrupt mounting.
function safelyAttachRef(current,nearestMountedAncestor){try{commitAttachRef(current);}catch(error){captureCommitPhaseError(current,nearestMountedAncestor,error);}}function safelyDetachRef(current,nearestMountedAncestor){var ref=current.ref;if(ref!==null){if(typeof ref==='function'){var retVal;try{if(enableProfilerTimer&&enableProfilerCommitHooks&&current.mode&ProfileMode){try{startLayoutEffectTimer();retVal=ref(null);}finally{recordLayoutEffectDuration(current);}}else{retVal=ref(null);}}catch(error){captureCommitPhaseError(current,nearestMountedAncestor,error);}{if(typeof retVal==='function'){error('Unexpected return value from a callback ref in %s. '+'A callback ref should not return a function.',getComponentNameFromFiber(current));}}}else{ref.current=null;}}}function safelyCallDestroy(current,nearestMountedAncestor,destroy){try{destroy();}catch(error){captureCommitPhaseError(current,nearestMountedAncestor,error);}}var focusedInstanceHandle=null;var shouldFireAfterActiveInstanceBlur=false;function commitBeforeMutationEffects(root,firstChild){focusedInstanceHandle=prepareForCommit(root.containerInfo);nextEffect=firstChild;commitBeforeMutationEffects_begin();// We no longer need to track the active instance fiber
var shouldFire=shouldFireAfterActiveInstanceBlur;shouldFireAfterActiveInstanceBlur=false;focusedInstanceHandle=null;return shouldFire;}function commitBeforeMutationEffects_begin(){while(nextEffect!==null){var fiber=nextEffect;// This phase is only used for beforeActiveInstanceBlur.
var child=fiber.child;if((fiber.subtreeFlags&BeforeMutationMask)!==NoFlags&&child!==null){child["return"]=fiber;nextEffect=child;}else{commitBeforeMutationEffects_complete();}}}function commitBeforeMutationEffects_complete(){while(nextEffect!==null){var fiber=nextEffect;setCurrentFiber(fiber);try{commitBeforeMutationEffectsOnFiber(fiber);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}resetCurrentFiber();var sibling=fiber.sibling;if(sibling!==null){sibling["return"]=fiber["return"];nextEffect=sibling;return;}nextEffect=fiber["return"];}}function commitBeforeMutationEffectsOnFiber(finishedWork){var current=finishedWork.alternate;var flags=finishedWork.flags;if((flags&Snapshot)!==NoFlags){setCurrentFiber(finishedWork);switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{break;}case ClassComponent:{if(current!==null){var prevProps=current.memoizedProps;var prevState=current.memoizedState;var instance=finishedWork.stateNode;// We could update instance props and state here,
// but instead we rely on them being set during last render.
// TODO: revisit this when we implement resuming.
{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){if(instance.props!==finishedWork.memoizedProps){error('Expected %s props to match memoized props before '+'getSnapshotBeforeUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}if(instance.state!==finishedWork.memoizedState){error('Expected %s state to match memoized state before '+'getSnapshotBeforeUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.state`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}}}var snapshot=instance.getSnapshotBeforeUpdate(finishedWork.elementType===finishedWork.type?prevProps:resolveDefaultProps(finishedWork.type,prevProps),prevState);{var didWarnSet=didWarnAboutUndefinedSnapshotBeforeUpdate;if(snapshot===undefined&&!didWarnSet.has(finishedWork.type)){didWarnSet.add(finishedWork.type);error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) '+'must be returned. You have returned undefined.',getComponentNameFromFiber(finishedWork));}}instance.__reactInternalSnapshotBeforeUpdate=snapshot;}break;}case HostRoot:{{var root=finishedWork.stateNode;clearContainer(root.containerInfo);}break;}case HostComponent:case HostText:case HostPortal:case IncompleteClassComponent:// Nothing to do for these component types
break;default:{throw new Error('This unit of work tag should not have side-effects. This error is '+'likely caused by a bug in React. Please file an issue.');}}resetCurrentFiber();}}function commitHookEffectListUnmount(flags,finishedWork,nearestMountedAncestor){var updateQueue=finishedWork.updateQueue;var lastEffect=updateQueue!==null?updateQueue.lastEffect:null;if(lastEffect!==null){var firstEffect=lastEffect.next;var effect=firstEffect;do{if((effect.tag&flags)===flags){// Unmount
var destroy=effect.destroy;effect.destroy=undefined;if(destroy!==undefined){{if((flags&Passive$1)!==NoFlags$1){markComponentPassiveEffectUnmountStarted(finishedWork);}else if((flags&Layout)!==NoFlags$1){markComponentLayoutEffectUnmountStarted(finishedWork);}}{if((flags&Insertion)!==NoFlags$1){setIsRunningInsertionEffect(true);}}safelyCallDestroy(finishedWork,nearestMountedAncestor,destroy);{if((flags&Insertion)!==NoFlags$1){setIsRunningInsertionEffect(false);}}{if((flags&Passive$1)!==NoFlags$1){markComponentPassiveEffectUnmountStopped();}else if((flags&Layout)!==NoFlags$1){markComponentLayoutEffectUnmountStopped();}}}}effect=effect.next;}while(effect!==firstEffect);}}function commitHookEffectListMount(flags,finishedWork){var updateQueue=finishedWork.updateQueue;var lastEffect=updateQueue!==null?updateQueue.lastEffect:null;if(lastEffect!==null){var firstEffect=lastEffect.next;var effect=firstEffect;do{if((effect.tag&flags)===flags){{if((flags&Passive$1)!==NoFlags$1){markComponentPassiveEffectMountStarted(finishedWork);}else if((flags&Layout)!==NoFlags$1){markComponentLayoutEffectMountStarted(finishedWork);}}// Mount
var create=effect.create;{if((flags&Insertion)!==NoFlags$1){setIsRunningInsertionEffect(true);}}effect.destroy=create();{if((flags&Insertion)!==NoFlags$1){setIsRunningInsertionEffect(false);}}{if((flags&Passive$1)!==NoFlags$1){markComponentPassiveEffectMountStopped();}else if((flags&Layout)!==NoFlags$1){markComponentLayoutEffectMountStopped();}}{var destroy=effect.destroy;if(destroy!==undefined&&typeof destroy!=='function'){var hookName=void 0;if((effect.tag&Layout)!==NoFlags){hookName='useLayoutEffect';}else if((effect.tag&Insertion)!==NoFlags){hookName='useInsertionEffect';}else{hookName='useEffect';}var addendum=void 0;if(destroy===null){addendum=' You returned null. If your effect does not require clean '+'up, return undefined (or nothing).';}else if(typeof destroy.then==='function'){addendum='\n\nIt looks like you wrote '+hookName+'(async () => ...) or returned a Promise. '+'Instead, write the async function inside your effect '+'and call it immediately:\n\n'+hookName+'(() => {\n'+'  async function fetchData() {\n'+'    // You can await here\n'+'    const response = await MyAPI.getData(someId);\n'+'    // ...\n'+'  }\n'+'  fetchData();\n'+"}, [someId]); // Or [] if effect doesn't need props or state\n\n"+'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';}else{addendum=' You returned: '+destroy;}error('%s must not return anything besides a function, '+'which is used for clean-up.%s',hookName,addendum);}}}effect=effect.next;}while(effect!==firstEffect);}}function commitPassiveEffectDurations(finishedRoot,finishedWork){{// Only Profilers with work in their subtree will have an Update effect scheduled.
if((finishedWork.flags&Update)!==NoFlags){switch(finishedWork.tag){case Profiler:{var passiveEffectDuration=finishedWork.stateNode.passiveEffectDuration;var _finishedWork$memoize=finishedWork.memoizedProps,id=_finishedWork$memoize.id,onPostCommit=_finishedWork$memoize.onPostCommit;// This value will still reflect the previous commit phase.
// It does not get reset until the start of the next commit phase.
var commitTime=getCommitTime();var phase=finishedWork.alternate===null?'mount':'update';{if(isCurrentUpdateNested()){phase='nested-update';}}if(typeof onPostCommit==='function'){onPostCommit(id,phase,passiveEffectDuration,commitTime);}// Bubble times to the next nearest ancestor Profiler.
// After we process that Profiler, we'll bubble further up.
var parentFiber=finishedWork["return"];outer:while(parentFiber!==null){switch(parentFiber.tag){case HostRoot:var root=parentFiber.stateNode;root.passiveEffectDuration+=passiveEffectDuration;break outer;case Profiler:var parentStateNode=parentFiber.stateNode;parentStateNode.passiveEffectDuration+=passiveEffectDuration;break outer;}parentFiber=parentFiber["return"];}break;}}}}}function commitLayoutEffectOnFiber(finishedRoot,current,finishedWork,committedLanes){if((finishedWork.flags&LayoutMask)!==NoFlags){switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{if(!offscreenSubtreeWasHidden){// At this point layout effects have already been destroyed (during mutation phase).
// This is done to prevent sibling component effects from interfering with each other,
// e.g. a destroy function in one component should never override a ref set
// by a create function in another component during the same commit.
if(finishedWork.mode&ProfileMode){try{startLayoutEffectTimer();commitHookEffectListMount(Layout|HasEffect,finishedWork);}finally{recordLayoutEffectDuration(finishedWork);}}else{commitHookEffectListMount(Layout|HasEffect,finishedWork);}}break;}case ClassComponent:{var instance=finishedWork.stateNode;if(finishedWork.flags&Update){if(!offscreenSubtreeWasHidden){if(current===null){// We could update instance props and state here,
// but instead we rely on them being set during last render.
// TODO: revisit this when we implement resuming.
{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){if(instance.props!==finishedWork.memoizedProps){error('Expected %s props to match memoized props before '+'componentDidMount. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}if(instance.state!==finishedWork.memoizedState){error('Expected %s state to match memoized state before '+'componentDidMount. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.state`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}}}if(finishedWork.mode&ProfileMode){try{startLayoutEffectTimer();instance.componentDidMount();}finally{recordLayoutEffectDuration(finishedWork);}}else{instance.componentDidMount();}}else{var prevProps=finishedWork.elementType===finishedWork.type?current.memoizedProps:resolveDefaultProps(finishedWork.type,current.memoizedProps);var prevState=current.memoizedState;// We could update instance props and state here,
// but instead we rely on them being set during last render.
// TODO: revisit this when we implement resuming.
{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){if(instance.props!==finishedWork.memoizedProps){error('Expected %s props to match memoized props before '+'componentDidUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}if(instance.state!==finishedWork.memoizedState){error('Expected %s state to match memoized state before '+'componentDidUpdate. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.state`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}}}if(finishedWork.mode&ProfileMode){try{startLayoutEffectTimer();instance.componentDidUpdate(prevProps,prevState,instance.__reactInternalSnapshotBeforeUpdate);}finally{recordLayoutEffectDuration(finishedWork);}}else{instance.componentDidUpdate(prevProps,prevState,instance.__reactInternalSnapshotBeforeUpdate);}}}}// TODO: I think this is now always non-null by the time it reaches the
// commit phase. Consider removing the type check.
var updateQueue=finishedWork.updateQueue;if(updateQueue!==null){{if(finishedWork.type===finishedWork.elementType&&!didWarnAboutReassigningProps){if(instance.props!==finishedWork.memoizedProps){error('Expected %s props to match memoized props before '+'processing the update queue. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.props`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}if(instance.state!==finishedWork.memoizedState){error('Expected %s state to match memoized state before '+'processing the update queue. '+'This might either be because of a bug in React, or because '+'a component reassigns its own `this.state`. '+'Please file an issue.',getComponentNameFromFiber(finishedWork)||'instance');}}}// We could update instance props and state here,
// but instead we rely on them being set during last render.
// TODO: revisit this when we implement resuming.
commitUpdateQueue(finishedWork,updateQueue,instance);}break;}case HostRoot:{// TODO: I think this is now always non-null by the time it reaches the
// commit phase. Consider removing the type check.
var _updateQueue=finishedWork.updateQueue;if(_updateQueue!==null){var _instance=null;if(finishedWork.child!==null){switch(finishedWork.child.tag){case HostComponent:_instance=getPublicInstance(finishedWork.child.stateNode);break;case ClassComponent:_instance=finishedWork.child.stateNode;break;}}commitUpdateQueue(finishedWork,_updateQueue,_instance);}break;}case HostComponent:{var _instance2=finishedWork.stateNode;// Renderers may schedule work to be done after host components are mounted
// (eg DOM renderer may schedule auto-focus for inputs and form controls).
// These effects should only be committed when components are first mounted,
// aka when there is no current/alternate.
if(current===null&&finishedWork.flags&Update){var type=finishedWork.type;var props=finishedWork.memoizedProps;commitMount(_instance2,type,props);}break;}case HostText:{// We have no life-cycles associated with text.
break;}case HostPortal:{// We have no life-cycles associated with portals.
break;}case Profiler:{{var _finishedWork$memoize2=finishedWork.memoizedProps,onCommit=_finishedWork$memoize2.onCommit,onRender=_finishedWork$memoize2.onRender;var effectDuration=finishedWork.stateNode.effectDuration;var commitTime=getCommitTime();var phase=current===null?'mount':'update';{if(isCurrentUpdateNested()){phase='nested-update';}}if(typeof onRender==='function'){onRender(finishedWork.memoizedProps.id,phase,finishedWork.actualDuration,finishedWork.treeBaseDuration,finishedWork.actualStartTime,commitTime);}{if(typeof onCommit==='function'){onCommit(finishedWork.memoizedProps.id,phase,effectDuration,commitTime);}// Schedule a passive effect for this Profiler to call onPostCommit hooks.
// This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
// because the effect is also where times bubble to parent Profilers.
enqueuePendingPassiveProfilerEffect(finishedWork);// Propagate layout effect durations to the next nearest Profiler ancestor.
// Do not reset these values until the next render so DevTools has a chance to read them first.
var parentFiber=finishedWork["return"];outer:while(parentFiber!==null){switch(parentFiber.tag){case HostRoot:var root=parentFiber.stateNode;root.effectDuration+=effectDuration;break outer;case Profiler:var parentStateNode=parentFiber.stateNode;parentStateNode.effectDuration+=effectDuration;break outer;}parentFiber=parentFiber["return"];}}}break;}case SuspenseComponent:{commitSuspenseHydrationCallbacks(finishedRoot,finishedWork);break;}case SuspenseListComponent:case IncompleteClassComponent:case ScopeComponent:case OffscreenComponent:case LegacyHiddenComponent:case TracingMarkerComponent:{break;}default:throw new Error('This unit of work tag should not have side-effects. This error is '+'likely caused by a bug in React. Please file an issue.');}}if(!offscreenSubtreeWasHidden){{if(finishedWork.flags&Ref){commitAttachRef(finishedWork);}}}}function reappearLayoutEffectsOnFiber(node){// Turn on layout effects in a tree that previously disappeared.
// TODO (Offscreen) Check: flags & LayoutStatic
switch(node.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{if(node.mode&ProfileMode){try{startLayoutEffectTimer();safelyCallCommitHookLayoutEffectListMount(node,node["return"]);}finally{recordLayoutEffectDuration(node);}}else{safelyCallCommitHookLayoutEffectListMount(node,node["return"]);}break;}case ClassComponent:{var instance=node.stateNode;if(typeof instance.componentDidMount==='function'){safelyCallComponentDidMount(node,node["return"],instance);}safelyAttachRef(node,node["return"]);break;}case HostComponent:{safelyAttachRef(node,node["return"]);break;}}}function hideOrUnhideAllChildren(finishedWork,isHidden){// Only hide or unhide the top-most host nodes.
var hostSubtreeRoot=null;{// We only have the top Fiber that was inserted but we need to recurse down its
// children to find all the terminal nodes.
var node=finishedWork;while(true){if(node.tag===HostComponent){if(hostSubtreeRoot===null){hostSubtreeRoot=node;try{var instance=node.stateNode;if(isHidden){hideInstance(instance);}else{unhideInstance(node.stateNode,node.memoizedProps);}}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}}}else if(node.tag===HostText){if(hostSubtreeRoot===null){try{var _instance3=node.stateNode;if(isHidden){hideTextInstance(_instance3);}else{unhideTextInstance(_instance3,node.memoizedProps);}}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}}}else if((node.tag===OffscreenComponent||node.tag===LegacyHiddenComponent)&&node.memoizedState!==null&&node!==finishedWork);else if(node.child!==null){node.child["return"]=node;node=node.child;continue;}if(node===finishedWork){return;}while(node.sibling===null){if(node["return"]===null||node["return"]===finishedWork){return;}if(hostSubtreeRoot===node){hostSubtreeRoot=null;}node=node["return"];}if(hostSubtreeRoot===node){hostSubtreeRoot=null;}node.sibling["return"]=node["return"];node=node.sibling;}}}function commitAttachRef(finishedWork){var ref=finishedWork.ref;if(ref!==null){var instance=finishedWork.stateNode;var instanceToUse;switch(finishedWork.tag){case HostComponent:instanceToUse=getPublicInstance(instance);break;default:instanceToUse=instance;}// Moved outside to ensure DCE works with this flag
if(typeof ref==='function'){var retVal;if(finishedWork.mode&ProfileMode){try{startLayoutEffectTimer();retVal=ref(instanceToUse);}finally{recordLayoutEffectDuration(finishedWork);}}else{retVal=ref(instanceToUse);}{if(typeof retVal==='function'){error('Unexpected return value from a callback ref in %s. '+'A callback ref should not return a function.',getComponentNameFromFiber(finishedWork));}}}else{{if(!ref.hasOwnProperty('current')){error('Unexpected ref object provided for %s. '+'Use either a ref-setter function or React.createRef().',getComponentNameFromFiber(finishedWork));}}ref.current=instanceToUse;}}}function detachFiberMutation(fiber){// Cut off the return pointer to disconnect it from the tree.
// This enables us to detect and warn against state updates on an unmounted component.
// It also prevents events from bubbling from within disconnected components.
//
// Ideally, we should also clear the child pointer of the parent alternate to let this
// get GC:ed but we don't know which for sure which parent is the current
// one so we'll settle for GC:ing the subtree of this child.
// This child itself will be GC:ed when the parent updates the next time.
//
// Note that we can't clear child or sibling pointers yet.
// They're needed for passive effects and for findDOMNode.
// We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
//
// Don't reset the alternate yet, either. We need that so we can detach the
// alternate's fields in the passive phase. Clearing the return pointer is
// sufficient for findDOMNode semantics.
var alternate=fiber.alternate;if(alternate!==null){alternate["return"]=null;}fiber["return"]=null;}function detachFiberAfterEffects(fiber){var alternate=fiber.alternate;if(alternate!==null){fiber.alternate=null;detachFiberAfterEffects(alternate);}// Note: Defensively using negation instead of < in case
// `deletedTreeCleanUpLevel` is undefined.
{// Clear cyclical Fiber fields. This level alone is designed to roughly
// approximate the planned Fiber refactor. In that world, `setState` will be
// bound to a special "instance" object instead of a Fiber. The Instance
// object will not have any of these fields. It will only be connected to
// the fiber tree via a single link at the root. So if this level alone is
// sufficient to fix memory issues, that bodes well for our plans.
fiber.child=null;fiber.deletions=null;fiber.sibling=null;// The `stateNode` is cyclical because on host nodes it points to the host
// tree, which has its own pointers to children, parents, and siblings.
// The other host nodes also point back to fibers, so we should detach that
// one, too.
if(fiber.tag===HostComponent){var hostInstance=fiber.stateNode;if(hostInstance!==null){detachDeletedInstance(hostInstance);}}fiber.stateNode=null;// I'm intentionally not clearing the `return` field in this level. We
// already disconnect the `return` pointer at the root of the deleted
// subtree (in `detachFiberMutation`). Besides, `return` by itself is not
// cyclical — it's only cyclical when combined with `child`, `sibling`, and
// `alternate`. But we'll clear it in the next level anyway, just in case.
{fiber._debugOwner=null;}{// Theoretically, nothing in here should be necessary, because we already
// disconnected the fiber from the tree. So even if something leaks this
// particular fiber, it won't leak anything else
//
// The purpose of this branch is to be super aggressive so we can measure
// if there's any difference in memory impact. If there is, that could
// indicate a React leak we don't know about.
fiber["return"]=null;fiber.dependencies=null;fiber.memoizedProps=null;fiber.memoizedState=null;fiber.pendingProps=null;fiber.stateNode=null;// TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.
fiber.updateQueue=null;}}}function getHostParentFiber(fiber){var parent=fiber["return"];while(parent!==null){if(isHostParent(parent)){return parent;}parent=parent["return"];}throw new Error('Expected to find a host parent. This error is likely caused by a bug '+'in React. Please file an issue.');}function isHostParent(fiber){return fiber.tag===HostComponent||fiber.tag===HostRoot||fiber.tag===HostPortal;}function getHostSibling(fiber){// We're going to search forward into the tree until we find a sibling host
// node. Unfortunately, if multiple insertions are done in a row we have to
// search past them. This leads to exponential search for the next sibling.
// TODO: Find a more efficient way to do this.
var node=fiber;siblings:while(true){// If we didn't find anything, let's try the next sibling.
while(node.sibling===null){if(node["return"]===null||isHostParent(node["return"])){// If we pop out of the root or hit the parent the fiber we are the
// last sibling.
return null;}node=node["return"];}node.sibling["return"]=node["return"];node=node.sibling;while(node.tag!==HostComponent&&node.tag!==HostText&&node.tag!==DehydratedFragment){// If it is not host node and, we might have a host node inside it.
// Try to search down until we find one.
if(node.flags&Placement){// If we don't have a child, try the siblings instead.
continue siblings;}// If we don't have a child, try the siblings instead.
// We also skip portals because they are not part of this host tree.
if(node.child===null||node.tag===HostPortal){continue siblings;}else{node.child["return"]=node;node=node.child;}}// Check if this host node is stable or about to be placed.
if(!(node.flags&Placement)){// Found it!
return node.stateNode;}}}function commitPlacement(finishedWork){var parentFiber=getHostParentFiber(finishedWork);// Note: these two variables *must* always be updated together.
switch(parentFiber.tag){case HostComponent:{var parent=parentFiber.stateNode;if(parentFiber.flags&ContentReset){// Reset the text content of the parent before doing any insertions
resetTextContent(parent);// Clear ContentReset from the effect tag
parentFiber.flags&=~ContentReset;}var before=getHostSibling(finishedWork);// We only have the top Fiber that was inserted but we need to recurse down its
// children to find all the terminal nodes.
insertOrAppendPlacementNode(finishedWork,before,parent);break;}case HostRoot:case HostPortal:{var _parent=parentFiber.stateNode.containerInfo;var _before=getHostSibling(finishedWork);insertOrAppendPlacementNodeIntoContainer(finishedWork,_before,_parent);break;}// eslint-disable-next-line-no-fallthrough
default:throw new Error('Invalid host parent fiber. This error is likely caused by a bug '+'in React. Please file an issue.');}}function insertOrAppendPlacementNodeIntoContainer(node,before,parent){var tag=node.tag;var isHost=tag===HostComponent||tag===HostText;if(isHost){var stateNode=node.stateNode;if(before){insertInContainerBefore(parent,stateNode,before);}else{appendChildToContainer(parent,stateNode);}}else if(tag===HostPortal);else{var child=node.child;if(child!==null){insertOrAppendPlacementNodeIntoContainer(child,before,parent);var sibling=child.sibling;while(sibling!==null){insertOrAppendPlacementNodeIntoContainer(sibling,before,parent);sibling=sibling.sibling;}}}}function insertOrAppendPlacementNode(node,before,parent){var tag=node.tag;var isHost=tag===HostComponent||tag===HostText;if(isHost){var stateNode=node.stateNode;if(before){insertBefore(parent,stateNode,before);}else{appendChild(parent,stateNode);}}else if(tag===HostPortal);else{var child=node.child;if(child!==null){insertOrAppendPlacementNode(child,before,parent);var sibling=child.sibling;while(sibling!==null){insertOrAppendPlacementNode(sibling,before,parent);sibling=sibling.sibling;}}}}// These are tracked on the stack as we recursively traverse a
// deleted subtree.
// TODO: Update these during the whole mutation phase, not just during
// a deletion.
var hostParent=null;var hostParentIsContainer=false;function commitDeletionEffects(root,returnFiber,deletedFiber){{// We only have the top Fiber that was deleted but we need to recurse down its
// children to find all the terminal nodes.
// Recursively delete all host nodes from the parent, detach refs, clean
// up mounted layout effects, and call componentWillUnmount.
// We only need to remove the topmost host child in each branch. But then we
// still need to keep traversing to unmount effects, refs, and cWU. TODO: We
// could split this into two separate traversals functions, where the second
// one doesn't include any removeChild logic. This is maybe the same
// function as "disappearLayoutEffects" (or whatever that turns into after
// the layout phase is refactored to use recursion).
// Before starting, find the nearest host parent on the stack so we know
// which instance/container to remove the children from.
// TODO: Instead of searching up the fiber return path on every deletion, we
// can track the nearest host component on the JS stack as we traverse the
// tree during the commit phase. This would make insertions faster, too.
var parent=returnFiber;findParent:while(parent!==null){switch(parent.tag){case HostComponent:{hostParent=parent.stateNode;hostParentIsContainer=false;break findParent;}case HostRoot:{hostParent=parent.stateNode.containerInfo;hostParentIsContainer=true;break findParent;}case HostPortal:{hostParent=parent.stateNode.containerInfo;hostParentIsContainer=true;break findParent;}}parent=parent["return"];}if(hostParent===null){throw new Error('Expected to find a host parent. This error is likely caused by '+'a bug in React. Please file an issue.');}commitDeletionEffectsOnFiber(root,returnFiber,deletedFiber);hostParent=null;hostParentIsContainer=false;}detachFiberMutation(deletedFiber);}function recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,parent){// TODO: Use a static flag to skip trees that don't have unmount effects
var child=parent.child;while(child!==null){commitDeletionEffectsOnFiber(finishedRoot,nearestMountedAncestor,child);child=child.sibling;}}function commitDeletionEffectsOnFiber(finishedRoot,nearestMountedAncestor,deletedFiber){onCommitUnmount(deletedFiber);// The cases in this outer switch modify the stack before they traverse
// into their subtree. There are simpler cases in the inner switch
// that don't modify the stack.
switch(deletedFiber.tag){case HostComponent:{if(!offscreenSubtreeWasHidden){safelyDetachRef(deletedFiber,nearestMountedAncestor);}// Intentional fallthrough to next branch
}// eslint-disable-next-line-no-fallthrough
case HostText:{// We only need to remove the nearest host child. Set the host parent
// to `null` on the stack to indicate that nested children don't
// need to be removed.
{var prevHostParent=hostParent;var prevHostParentIsContainer=hostParentIsContainer;hostParent=null;recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);hostParent=prevHostParent;hostParentIsContainer=prevHostParentIsContainer;if(hostParent!==null){// Now that all the child effects have unmounted, we can remove the
// node from the tree.
if(hostParentIsContainer){removeChildFromContainer(hostParent,deletedFiber.stateNode);}else{removeChild(hostParent,deletedFiber.stateNode);}}}return;}case DehydratedFragment:{// Delete the dehydrated suspense boundary and all of its content.
{if(hostParent!==null){if(hostParentIsContainer){clearSuspenseBoundaryFromContainer(hostParent,deletedFiber.stateNode);}else{clearSuspenseBoundary(hostParent,deletedFiber.stateNode);}}}return;}case HostPortal:{{// When we go into a portal, it becomes the parent to remove from.
var _prevHostParent=hostParent;var _prevHostParentIsContainer=hostParentIsContainer;hostParent=deletedFiber.stateNode.containerInfo;hostParentIsContainer=true;recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);hostParent=_prevHostParent;hostParentIsContainer=_prevHostParentIsContainer;}return;}case FunctionComponent:case ForwardRef:case MemoComponent:case SimpleMemoComponent:{if(!offscreenSubtreeWasHidden){var updateQueue=deletedFiber.updateQueue;if(updateQueue!==null){var lastEffect=updateQueue.lastEffect;if(lastEffect!==null){var firstEffect=lastEffect.next;var effect=firstEffect;do{var _effect=effect,destroy=_effect.destroy,tag=_effect.tag;if(destroy!==undefined){if((tag&Insertion)!==NoFlags$1){safelyCallDestroy(deletedFiber,nearestMountedAncestor,destroy);}else if((tag&Layout)!==NoFlags$1){{markComponentLayoutEffectUnmountStarted(deletedFiber);}if(deletedFiber.mode&ProfileMode){startLayoutEffectTimer();safelyCallDestroy(deletedFiber,nearestMountedAncestor,destroy);recordLayoutEffectDuration(deletedFiber);}else{safelyCallDestroy(deletedFiber,nearestMountedAncestor,destroy);}{markComponentLayoutEffectUnmountStopped();}}}effect=effect.next;}while(effect!==firstEffect);}}}recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);return;}case ClassComponent:{if(!offscreenSubtreeWasHidden){safelyDetachRef(deletedFiber,nearestMountedAncestor);var instance=deletedFiber.stateNode;if(typeof instance.componentWillUnmount==='function'){safelyCallComponentWillUnmount(deletedFiber,nearestMountedAncestor,instance);}}recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);return;}case ScopeComponent:{recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);return;}case OffscreenComponent:{if(// TODO: Remove this dead flag
deletedFiber.mode&ConcurrentMode){// If this offscreen component is hidden, we already unmounted it. Before
// deleting the children, track that it's already unmounted so that we
// don't attempt to unmount the effects again.
// TODO: If the tree is hidden, in most cases we should be able to skip
// over the nested children entirely. An exception is we haven't yet found
// the topmost host node to delete, which we already track on the stack.
// But the other case is portals, which need to be detached no matter how
// deeply they are nested. We should use a subtree flag to track whether a
// subtree includes a nested portal.
var prevOffscreenSubtreeWasHidden=offscreenSubtreeWasHidden;offscreenSubtreeWasHidden=prevOffscreenSubtreeWasHidden||deletedFiber.memoizedState!==null;recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);offscreenSubtreeWasHidden=prevOffscreenSubtreeWasHidden;}else{recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);}break;}default:{recursivelyTraverseDeletionEffects(finishedRoot,nearestMountedAncestor,deletedFiber);return;}}}function commitSuspenseCallback(finishedWork){// TODO: Move this to passive phase
var newState=finishedWork.memoizedState;}function commitSuspenseHydrationCallbacks(finishedRoot,finishedWork){var newState=finishedWork.memoizedState;if(newState===null){var current=finishedWork.alternate;if(current!==null){var prevState=current.memoizedState;if(prevState!==null){var suspenseInstance=prevState.dehydrated;if(suspenseInstance!==null){commitHydratedSuspenseInstance(suspenseInstance);}}}}}function attachSuspenseRetryListeners(finishedWork){// If this boundary just timed out, then it will have a set of wakeables.
// For each wakeable, attach a listener so that when it resolves, React
// attempts to re-render the boundary in the primary (pre-timeout) state.
var wakeables=finishedWork.updateQueue;if(wakeables!==null){finishedWork.updateQueue=null;var retryCache=finishedWork.stateNode;if(retryCache===null){retryCache=finishedWork.stateNode=new PossiblyWeakSet();}wakeables.forEach(function(wakeable){// Memoize using the boundary fiber to prevent redundant listeners.
var retry=resolveRetryWakeable.bind(null,finishedWork,wakeable);if(!retryCache.has(wakeable)){retryCache.add(wakeable);{if(isDevToolsPresent){if(inProgressLanes!==null&&inProgressRoot!==null){// If we have pending work still, associate the original updaters with it.
restorePendingUpdaters(inProgressRoot,inProgressLanes);}else{throw Error('Expected finished root and lanes to be set. This is a bug in React.');}}}wakeable.then(retry,retry);}});}}// This function detects when a Suspense boundary goes from visible to hidden.
function commitMutationEffects(root,finishedWork,committedLanes){inProgressLanes=committedLanes;inProgressRoot=root;setCurrentFiber(finishedWork);commitMutationEffectsOnFiber(finishedWork,root);setCurrentFiber(finishedWork);inProgressLanes=null;inProgressRoot=null;}function recursivelyTraverseMutationEffects(root,parentFiber,lanes){// Deletions effects can be scheduled on any fiber type. They need to happen
// before the children effects hae fired.
var deletions=parentFiber.deletions;if(deletions!==null){for(var i=0;i<deletions.length;i++){var childToDelete=deletions[i];try{commitDeletionEffects(root,parentFiber,childToDelete);}catch(error){captureCommitPhaseError(childToDelete,parentFiber,error);}}}var prevDebugFiber=getCurrentFiber();if(parentFiber.subtreeFlags&MutationMask){var child=parentFiber.child;while(child!==null){setCurrentFiber(child);commitMutationEffectsOnFiber(child,root);child=child.sibling;}}setCurrentFiber(prevDebugFiber);}function commitMutationEffectsOnFiber(finishedWork,root,lanes){var current=finishedWork.alternate;var flags=finishedWork.flags;// The effect flag should be checked *after* we refine the type of fiber,
// because the fiber tag is more specific. An exception is any flag related
// to reconcilation, because those can be set on all fiber types.
switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case MemoComponent:case SimpleMemoComponent:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);if(flags&Update){try{commitHookEffectListUnmount(Insertion|HasEffect,finishedWork,finishedWork["return"]);commitHookEffectListMount(Insertion|HasEffect,finishedWork);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}// Layout effects are destroyed during the mutation phase so that all
// destroy functions for all fibers are called before any create functions.
// This prevents sibling component effects from interfering with each other,
// e.g. a destroy function in one component should never override a ref set
// by a create function in another component during the same commit.
if(finishedWork.mode&ProfileMode){try{startLayoutEffectTimer();commitHookEffectListUnmount(Layout|HasEffect,finishedWork,finishedWork["return"]);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}recordLayoutEffectDuration(finishedWork);}else{try{commitHookEffectListUnmount(Layout|HasEffect,finishedWork,finishedWork["return"]);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}}}return;}case ClassComponent:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);if(flags&Ref){if(current!==null){safelyDetachRef(current,current["return"]);}}return;}case HostComponent:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);if(flags&Ref){if(current!==null){safelyDetachRef(current,current["return"]);}}{// TODO: ContentReset gets cleared by the children during the commit
// phase. This is a refactor hazard because it means we must read
// flags the flags after `commitReconciliationEffects` has already run;
// the order matters. We should refactor so that ContentReset does not
// rely on mutating the flag during commit. Like by setting a flag
// during the render phase instead.
if(finishedWork.flags&ContentReset){var instance=finishedWork.stateNode;try{resetTextContent(instance);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}}if(flags&Update){var _instance4=finishedWork.stateNode;if(_instance4!=null){// Commit the work prepared earlier.
var newProps=finishedWork.memoizedProps;// For hydration we reuse the update path but we treat the oldProps
// as the newProps. The updatePayload will contain the real change in
// this case.
var oldProps=current!==null?current.memoizedProps:newProps;var type=finishedWork.type;// TODO: Type the updateQueue to be specific to host components.
var updatePayload=finishedWork.updateQueue;finishedWork.updateQueue=null;if(updatePayload!==null){try{commitUpdate(_instance4,updatePayload,type,oldProps,newProps,finishedWork);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}}}}}return;}case HostText:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);if(flags&Update){{if(finishedWork.stateNode===null){throw new Error('This should have a text node initialized. This error is likely '+'caused by a bug in React. Please file an issue.');}var textInstance=finishedWork.stateNode;var newText=finishedWork.memoizedProps;// For hydration we reuse the update path but we treat the oldProps
// as the newProps. The updatePayload will contain the real change in
// this case.
var oldText=current!==null?current.memoizedProps:newText;try{commitTextUpdate(textInstance,oldText,newText);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}}}return;}case HostRoot:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);if(flags&Update){{if(current!==null){var prevRootState=current.memoizedState;if(prevRootState.isDehydrated){try{commitHydratedContainer(root.containerInfo);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}}}}}return;}case HostPortal:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);return;}case SuspenseComponent:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);var offscreenFiber=finishedWork.child;if(offscreenFiber.flags&Visibility){var offscreenInstance=offscreenFiber.stateNode;var newState=offscreenFiber.memoizedState;var isHidden=newState!==null;// Track the current state on the Offscreen instance so we can
// read it during an event
offscreenInstance.isHidden=isHidden;if(isHidden){var wasHidden=offscreenFiber.alternate!==null&&offscreenFiber.alternate.memoizedState!==null;if(!wasHidden){// TODO: Move to passive phase
markCommitTimeOfFallback();}}}if(flags&Update){try{commitSuspenseCallback(finishedWork);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}attachSuspenseRetryListeners(finishedWork);}return;}case OffscreenComponent:{var _wasHidden=current!==null&&current.memoizedState!==null;if(// TODO: Remove this dead flag
finishedWork.mode&ConcurrentMode){// Before committing the children, track on the stack whether this
// offscreen subtree was already hidden, so that we don't unmount the
// effects again.
var prevOffscreenSubtreeWasHidden=offscreenSubtreeWasHidden;offscreenSubtreeWasHidden=prevOffscreenSubtreeWasHidden||_wasHidden;recursivelyTraverseMutationEffects(root,finishedWork);offscreenSubtreeWasHidden=prevOffscreenSubtreeWasHidden;}else{recursivelyTraverseMutationEffects(root,finishedWork);}commitReconciliationEffects(finishedWork);if(flags&Visibility){var _offscreenInstance=finishedWork.stateNode;var _newState=finishedWork.memoizedState;var _isHidden=_newState!==null;var offscreenBoundary=finishedWork;// Track the current state on the Offscreen instance so we can
// read it during an event
_offscreenInstance.isHidden=_isHidden;{if(_isHidden){if(!_wasHidden){if((offscreenBoundary.mode&ConcurrentMode)!==NoMode){nextEffect=offscreenBoundary;var offscreenChild=offscreenBoundary.child;while(offscreenChild!==null){nextEffect=offscreenChild;disappearLayoutEffects_begin(offscreenChild);offscreenChild=offscreenChild.sibling;}}}}}{// TODO: This needs to run whenever there's an insertion or update
// inside a hidden Offscreen tree.
hideOrUnhideAllChildren(offscreenBoundary,_isHidden);}}return;}case SuspenseListComponent:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);if(flags&Update){attachSuspenseRetryListeners(finishedWork);}return;}case ScopeComponent:{return;}default:{recursivelyTraverseMutationEffects(root,finishedWork);commitReconciliationEffects(finishedWork);return;}}}function commitReconciliationEffects(finishedWork){// Placement effects (insertions, reorders) can be scheduled on any fiber
// type. They needs to happen after the children effects have fired, but
// before the effects on this fiber have fired.
var flags=finishedWork.flags;if(flags&Placement){try{commitPlacement(finishedWork);}catch(error){captureCommitPhaseError(finishedWork,finishedWork["return"],error);}// Clear the "placement" from effect tag so that we know that this is
// inserted, before any life-cycles like componentDidMount gets called.
// TODO: findDOMNode doesn't rely on this any more but isMounted does
// and isMounted is deprecated anyway so we should be able to kill this.
finishedWork.flags&=~Placement;}if(flags&Hydrating){finishedWork.flags&=~Hydrating;}}function commitLayoutEffects(finishedWork,root,committedLanes){inProgressLanes=committedLanes;inProgressRoot=root;nextEffect=finishedWork;commitLayoutEffects_begin(finishedWork,root,committedLanes);inProgressLanes=null;inProgressRoot=null;}function commitLayoutEffects_begin(subtreeRoot,root,committedLanes){// Suspense layout effects semantics don't change for legacy roots.
var isModernRoot=(subtreeRoot.mode&ConcurrentMode)!==NoMode;while(nextEffect!==null){var fiber=nextEffect;var firstChild=fiber.child;if(fiber.tag===OffscreenComponent&&isModernRoot){// Keep track of the current Offscreen stack's state.
var isHidden=fiber.memoizedState!==null;var newOffscreenSubtreeIsHidden=isHidden||offscreenSubtreeIsHidden;if(newOffscreenSubtreeIsHidden){// The Offscreen tree is hidden. Skip over its layout effects.
commitLayoutMountEffects_complete(subtreeRoot,root,committedLanes);continue;}else{// TODO (Offscreen) Also check: subtreeFlags & LayoutMask
var current=fiber.alternate;var wasHidden=current!==null&&current.memoizedState!==null;var newOffscreenSubtreeWasHidden=wasHidden||offscreenSubtreeWasHidden;var prevOffscreenSubtreeIsHidden=offscreenSubtreeIsHidden;var prevOffscreenSubtreeWasHidden=offscreenSubtreeWasHidden;// Traverse the Offscreen subtree with the current Offscreen as the root.
offscreenSubtreeIsHidden=newOffscreenSubtreeIsHidden;offscreenSubtreeWasHidden=newOffscreenSubtreeWasHidden;if(offscreenSubtreeWasHidden&&!prevOffscreenSubtreeWasHidden){// This is the root of a reappearing boundary. Turn its layout effects
// back on.
nextEffect=fiber;reappearLayoutEffects_begin(fiber);}var child=firstChild;while(child!==null){nextEffect=child;commitLayoutEffects_begin(child,// New root; bubble back up to here and stop.
root,committedLanes);child=child.sibling;}// Restore Offscreen state and resume in our-progress traversal.
nextEffect=fiber;offscreenSubtreeIsHidden=prevOffscreenSubtreeIsHidden;offscreenSubtreeWasHidden=prevOffscreenSubtreeWasHidden;commitLayoutMountEffects_complete(subtreeRoot,root,committedLanes);continue;}}if((fiber.subtreeFlags&LayoutMask)!==NoFlags&&firstChild!==null){firstChild["return"]=fiber;nextEffect=firstChild;}else{commitLayoutMountEffects_complete(subtreeRoot,root,committedLanes);}}}function commitLayoutMountEffects_complete(subtreeRoot,root,committedLanes){while(nextEffect!==null){var fiber=nextEffect;if((fiber.flags&LayoutMask)!==NoFlags){var current=fiber.alternate;setCurrentFiber(fiber);try{commitLayoutEffectOnFiber(root,current,fiber,committedLanes);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}resetCurrentFiber();}if(fiber===subtreeRoot){nextEffect=null;return;}var sibling=fiber.sibling;if(sibling!==null){sibling["return"]=fiber["return"];nextEffect=sibling;return;}nextEffect=fiber["return"];}}function disappearLayoutEffects_begin(subtreeRoot){while(nextEffect!==null){var fiber=nextEffect;var firstChild=fiber.child;// TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)
switch(fiber.tag){case FunctionComponent:case ForwardRef:case MemoComponent:case SimpleMemoComponent:{if(fiber.mode&ProfileMode){try{startLayoutEffectTimer();commitHookEffectListUnmount(Layout,fiber,fiber["return"]);}finally{recordLayoutEffectDuration(fiber);}}else{commitHookEffectListUnmount(Layout,fiber,fiber["return"]);}break;}case ClassComponent:{// TODO (Offscreen) Check: flags & RefStatic
safelyDetachRef(fiber,fiber["return"]);var instance=fiber.stateNode;if(typeof instance.componentWillUnmount==='function'){safelyCallComponentWillUnmount(fiber,fiber["return"],instance);}break;}case HostComponent:{safelyDetachRef(fiber,fiber["return"]);break;}case OffscreenComponent:{// Check if this is a
var isHidden=fiber.memoizedState!==null;if(isHidden){// Nested Offscreen tree is already hidden. Don't disappear
// its effects.
disappearLayoutEffects_complete(subtreeRoot);continue;}break;}}// TODO (Offscreen) Check: subtreeFlags & LayoutStatic
if(firstChild!==null){firstChild["return"]=fiber;nextEffect=firstChild;}else{disappearLayoutEffects_complete(subtreeRoot);}}}function disappearLayoutEffects_complete(subtreeRoot){while(nextEffect!==null){var fiber=nextEffect;if(fiber===subtreeRoot){nextEffect=null;return;}var sibling=fiber.sibling;if(sibling!==null){sibling["return"]=fiber["return"];nextEffect=sibling;return;}nextEffect=fiber["return"];}}function reappearLayoutEffects_begin(subtreeRoot){while(nextEffect!==null){var fiber=nextEffect;var firstChild=fiber.child;if(fiber.tag===OffscreenComponent){var isHidden=fiber.memoizedState!==null;if(isHidden){// Nested Offscreen tree is still hidden. Don't re-appear its effects.
reappearLayoutEffects_complete(subtreeRoot);continue;}}// TODO (Offscreen) Check: subtreeFlags & LayoutStatic
if(firstChild!==null){// This node may have been reused from a previous render, so we can't
// assume its return pointer is correct.
firstChild["return"]=fiber;nextEffect=firstChild;}else{reappearLayoutEffects_complete(subtreeRoot);}}}function reappearLayoutEffects_complete(subtreeRoot){while(nextEffect!==null){var fiber=nextEffect;// TODO (Offscreen) Check: flags & LayoutStatic
setCurrentFiber(fiber);try{reappearLayoutEffectsOnFiber(fiber);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}resetCurrentFiber();if(fiber===subtreeRoot){nextEffect=null;return;}var sibling=fiber.sibling;if(sibling!==null){// This node may have been reused from a previous render, so we can't
// assume its return pointer is correct.
sibling["return"]=fiber["return"];nextEffect=sibling;return;}nextEffect=fiber["return"];}}function commitPassiveMountEffects(root,finishedWork,committedLanes,committedTransitions){nextEffect=finishedWork;commitPassiveMountEffects_begin(finishedWork,root,committedLanes,committedTransitions);}function commitPassiveMountEffects_begin(subtreeRoot,root,committedLanes,committedTransitions){while(nextEffect!==null){var fiber=nextEffect;var firstChild=fiber.child;if((fiber.subtreeFlags&PassiveMask)!==NoFlags&&firstChild!==null){firstChild["return"]=fiber;nextEffect=firstChild;}else{commitPassiveMountEffects_complete(subtreeRoot,root,committedLanes,committedTransitions);}}}function commitPassiveMountEffects_complete(subtreeRoot,root,committedLanes,committedTransitions){while(nextEffect!==null){var fiber=nextEffect;if((fiber.flags&Passive)!==NoFlags){setCurrentFiber(fiber);try{commitPassiveMountOnFiber(root,fiber,committedLanes,committedTransitions);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}resetCurrentFiber();}if(fiber===subtreeRoot){nextEffect=null;return;}var sibling=fiber.sibling;if(sibling!==null){sibling["return"]=fiber["return"];nextEffect=sibling;return;}nextEffect=fiber["return"];}}function commitPassiveMountOnFiber(finishedRoot,finishedWork,committedLanes,committedTransitions){switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{if(finishedWork.mode&ProfileMode){startPassiveEffectTimer();try{commitHookEffectListMount(Passive$1|HasEffect,finishedWork);}finally{recordPassiveEffectDuration(finishedWork);}}else{commitHookEffectListMount(Passive$1|HasEffect,finishedWork);}break;}}}function commitPassiveUnmountEffects(firstChild){nextEffect=firstChild;commitPassiveUnmountEffects_begin();}function commitPassiveUnmountEffects_begin(){while(nextEffect!==null){var fiber=nextEffect;var child=fiber.child;if((nextEffect.flags&ChildDeletion)!==NoFlags){var deletions=fiber.deletions;if(deletions!==null){for(var i=0;i<deletions.length;i++){var fiberToDelete=deletions[i];nextEffect=fiberToDelete;commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete,fiber);}{// A fiber was deleted from this parent fiber, but it's still part of
// the previous (alternate) parent fiber's list of children. Because
// children are a linked list, an earlier sibling that's still alive
// will be connected to the deleted fiber via its `alternate`:
//
//   live fiber
//   --alternate--> previous live fiber
//   --sibling--> deleted fiber
//
// We can't disconnect `alternate` on nodes that haven't been deleted
// yet, but we can disconnect the `sibling` and `child` pointers.
var previousFiber=fiber.alternate;if(previousFiber!==null){var detachedChild=previousFiber.child;if(detachedChild!==null){previousFiber.child=null;do{var detachedSibling=detachedChild.sibling;detachedChild.sibling=null;detachedChild=detachedSibling;}while(detachedChild!==null);}}}nextEffect=fiber;}}if((fiber.subtreeFlags&PassiveMask)!==NoFlags&&child!==null){child["return"]=fiber;nextEffect=child;}else{commitPassiveUnmountEffects_complete();}}}function commitPassiveUnmountEffects_complete(){while(nextEffect!==null){var fiber=nextEffect;if((fiber.flags&Passive)!==NoFlags){setCurrentFiber(fiber);commitPassiveUnmountOnFiber(fiber);resetCurrentFiber();}var sibling=fiber.sibling;if(sibling!==null){sibling["return"]=fiber["return"];nextEffect=sibling;return;}nextEffect=fiber["return"];}}function commitPassiveUnmountOnFiber(finishedWork){switch(finishedWork.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{if(finishedWork.mode&ProfileMode){startPassiveEffectTimer();commitHookEffectListUnmount(Passive$1|HasEffect,finishedWork,finishedWork["return"]);recordPassiveEffectDuration(finishedWork);}else{commitHookEffectListUnmount(Passive$1|HasEffect,finishedWork,finishedWork["return"]);}break;}}}function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot,nearestMountedAncestor){while(nextEffect!==null){var fiber=nextEffect;// Deletion effects fire in parent -> child order
// TODO: Check if fiber has a PassiveStatic flag
setCurrentFiber(fiber);commitPassiveUnmountInsideDeletedTreeOnFiber(fiber,nearestMountedAncestor);resetCurrentFiber();var child=fiber.child;// TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
// do this, still need to handle `deletedTreeCleanUpLevel` correctly.)
if(child!==null){child["return"]=fiber;nextEffect=child;}else{commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);}}}function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot){while(nextEffect!==null){var fiber=nextEffect;var sibling=fiber.sibling;var returnFiber=fiber["return"];{// Recursively traverse the entire deleted tree and clean up fiber fields.
// This is more aggressive than ideal, and the long term goal is to only
// have to detach the deleted tree at the root.
detachFiberAfterEffects(fiber);if(fiber===deletedSubtreeRoot){nextEffect=null;return;}}if(sibling!==null){sibling["return"]=returnFiber;nextEffect=sibling;return;}nextEffect=returnFiber;}}function commitPassiveUnmountInsideDeletedTreeOnFiber(current,nearestMountedAncestor){switch(current.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{if(current.mode&ProfileMode){startPassiveEffectTimer();commitHookEffectListUnmount(Passive$1,current,nearestMountedAncestor);recordPassiveEffectDuration(current);}else{commitHookEffectListUnmount(Passive$1,current,nearestMountedAncestor);}break;}}}// TODO: Reuse reappearLayoutEffects traversal here?
function invokeLayoutEffectMountInDEV(fiber){{// We don't need to re-check StrictEffectsMode here.
// This function is only called if that check has already passed.
switch(fiber.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{try{commitHookEffectListMount(Layout|HasEffect,fiber);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}break;}case ClassComponent:{var instance=fiber.stateNode;try{instance.componentDidMount();}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}break;}}}}function invokePassiveEffectMountInDEV(fiber){{// We don't need to re-check StrictEffectsMode here.
// This function is only called if that check has already passed.
switch(fiber.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{try{commitHookEffectListMount(Passive$1|HasEffect,fiber);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}break;}}}}function invokeLayoutEffectUnmountInDEV(fiber){{// We don't need to re-check StrictEffectsMode here.
// This function is only called if that check has already passed.
switch(fiber.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{try{commitHookEffectListUnmount(Layout|HasEffect,fiber,fiber["return"]);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}break;}case ClassComponent:{var instance=fiber.stateNode;if(typeof instance.componentWillUnmount==='function'){safelyCallComponentWillUnmount(fiber,fiber["return"],instance);}break;}}}}function invokePassiveEffectUnmountInDEV(fiber){{// We don't need to re-check StrictEffectsMode here.
// This function is only called if that check has already passed.
switch(fiber.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{try{commitHookEffectListUnmount(Passive$1|HasEffect,fiber,fiber["return"]);}catch(error){captureCommitPhaseError(fiber,fiber["return"],error);}}}}}var COMPONENT_TYPE=0;var HAS_PSEUDO_CLASS_TYPE=1;var ROLE_TYPE=2;var TEST_NAME_TYPE=3;var TEXT_TYPE=4;if(typeof Symbol==='function'&&Symbol["for"]){var symbolFor=Symbol["for"];COMPONENT_TYPE=symbolFor('selector.component');HAS_PSEUDO_CLASS_TYPE=symbolFor('selector.has_pseudo_class');ROLE_TYPE=symbolFor('selector.role');TEST_NAME_TYPE=symbolFor('selector.test_id');TEXT_TYPE=symbolFor('selector.text');}var commitHooks=[];function onCommitRoot$1(){{commitHooks.forEach(function(commitHook){return commitHook();});}}var ReactCurrentActQueue=ReactSharedInternals.ReactCurrentActQueue;function isLegacyActEnvironment(fiber){{// Legacy mode. We preserve the behavior of React 17's act. It assumes an
// act environment whenever `jest` is defined, but you can still turn off
// spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
// to false.
var isReactActEnvironmentGlobal=// $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
typeof IS_REACT_ACT_ENVIRONMENT!=='undefined'?IS_REACT_ACT_ENVIRONMENT:undefined;// $FlowExpectedError - Flow doesn't know about jest
var jestIsDefined=typeof jest!=='undefined';return jestIsDefined&&isReactActEnvironmentGlobal!==false;}}function isConcurrentActEnvironment(){{var isReactActEnvironmentGlobal=// $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
typeof IS_REACT_ACT_ENVIRONMENT!=='undefined'?IS_REACT_ACT_ENVIRONMENT:undefined;if(!isReactActEnvironmentGlobal&&ReactCurrentActQueue.current!==null){// TODO: Include link to relevant documentation page.
error('The current testing environment is not configured to support '+'act(...)');}return isReactActEnvironmentGlobal;}}var ceil=Math.ceil;var ReactCurrentDispatcher$2=ReactSharedInternals.ReactCurrentDispatcher,ReactCurrentOwner$2=ReactSharedInternals.ReactCurrentOwner,ReactCurrentBatchConfig$3=ReactSharedInternals.ReactCurrentBatchConfig,ReactCurrentActQueue$1=ReactSharedInternals.ReactCurrentActQueue;var NoContext=/*             */0;var BatchedContext=/*               */1;var RenderContext=/*                */2;var CommitContext=/*                */4;var RootInProgress=0;var RootFatalErrored=1;var RootErrored=2;var RootSuspended=3;var RootSuspendedWithDelay=4;var RootCompleted=5;var RootDidNotComplete=6;// Describes where we are in the React execution stack
var executionContext=NoContext;// The root we're working on
var workInProgressRoot=null;// The fiber we're working on
var workInProgress=null;// The lanes we're rendering
var workInProgressRootRenderLanes=NoLanes;// Stack that allows components to change the render lanes for its subtree
// This is a superset of the lanes we started working on at the root. The only
// case where it's different from `workInProgressRootRenderLanes` is when we
// enter a subtree that is hidden and needs to be unhidden: Suspense and
// Offscreen component.
//
// Most things in the work loop should deal with workInProgressRootRenderLanes.
// Most things in begin/complete phases should deal with subtreeRenderLanes.
var subtreeRenderLanes=NoLanes;var subtreeRenderLanesCursor=createCursor(NoLanes);// Whether to root completed, errored, suspended, etc.
var workInProgressRootExitStatus=RootInProgress;// A fatal error, if one is thrown
var workInProgressRootFatalError=null;// "Included" lanes refer to lanes that were worked on during this render. It's
// slightly different than `renderLanes` because `renderLanes` can change as you
// enter and exit an Offscreen tree. This value is the combination of all render
// lanes for the entire render phase.
var workInProgressRootIncludedLanes=NoLanes;// The work left over by components that were visited during this render. Only
// includes unprocessed updates, not work in bailed out children.
var workInProgressRootSkippedLanes=NoLanes;// Lanes that were updated (in an interleaved event) during this render.
var workInProgressRootInterleavedUpdatedLanes=NoLanes;// Lanes that were updated during the render phase (*not* an interleaved event).
var workInProgressRootPingedLanes=NoLanes;// Errors that are thrown during the render phase.
var workInProgressRootConcurrentErrors=null;// These are errors that we recovered from without surfacing them to the UI.
// We will log them once the tree commits.
var workInProgressRootRecoverableErrors=null;// The most recent time we committed a fallback. This lets us ensure a train
// model where we don't commit new loading states in too quick succession.
var globalMostRecentFallbackTime=0;var FALLBACK_THROTTLE_MS=500;// The absolute time for when we should start giving up on rendering
// more and prefer CPU suspense heuristics instead.
var workInProgressRootRenderTargetTime=Infinity;// How long a render is supposed to take before we start following CPU
// suspense heuristics and opt out of rendering more content.
var RENDER_TIMEOUT_MS=500;var workInProgressTransitions=null;function resetRenderTimer(){workInProgressRootRenderTargetTime=now()+RENDER_TIMEOUT_MS;}function getRenderTargetTime(){return workInProgressRootRenderTargetTime;}var hasUncaughtError=false;var firstUncaughtError=null;var legacyErrorBoundariesThatAlreadyFailed=null;// Only used when enableProfilerNestedUpdateScheduledHook is true;
var rootDoesHavePassiveEffects=false;var rootWithPendingPassiveEffects=null;var pendingPassiveEffectsLanes=NoLanes;var pendingPassiveProfilerEffects=[];var pendingPassiveTransitions=null;// Use these to prevent an infinite loop of nested updates
var NESTED_UPDATE_LIMIT=50;var nestedUpdateCount=0;var rootWithNestedUpdates=null;var isFlushingPassiveEffects=false;var didScheduleUpdateDuringPassiveEffects=false;var NESTED_PASSIVE_UPDATE_LIMIT=50;var nestedPassiveUpdateCount=0;var rootWithPassiveNestedUpdates=null;// If two updates are scheduled within the same event, we should treat their
// event times as simultaneous, even if the actual clock time has advanced
// between the first and second call.
var currentEventTime=NoTimestamp;var currentEventTransitionLane=NoLanes;var isRunningInsertionEffect=false;function getWorkInProgressRoot(){return workInProgressRoot;}function requestEventTime(){if((executionContext&(RenderContext|CommitContext))!==NoContext){// We're inside React, so it's fine to read the actual time.
return now();}// We're not inside React, so we may be in the middle of a browser event.
if(currentEventTime!==NoTimestamp){// Use the same start time for all updates until we enter React again.
return currentEventTime;}// This is the first update since React yielded. Compute a new start time.
currentEventTime=now();return currentEventTime;}function requestUpdateLane(fiber){// Special cases
var mode=fiber.mode;if((mode&ConcurrentMode)===NoMode){return SyncLane;}else if((executionContext&RenderContext)!==NoContext&&workInProgressRootRenderLanes!==NoLanes){// This is a render phase update. These are not officially supported. The
// old behavior is to give this the same "thread" (lanes) as
// whatever is currently rendering. So if you call `setState` on a component
// that happens later in the same render, it will flush. Ideally, we want to
// remove the special case and treat them as if they came from an
// interleaved event. Regardless, this pattern is not officially supported.
// This behavior is only a fallback. The flag only exists until we can roll
// out the setState warning, since existing code might accidentally rely on
// the current behavior.
return pickArbitraryLane(workInProgressRootRenderLanes);}var isTransition=requestCurrentTransition()!==NoTransition;if(isTransition){if(ReactCurrentBatchConfig$3.transition!==null){var transition=ReactCurrentBatchConfig$3.transition;if(!transition._updatedFibers){transition._updatedFibers=new Set();}transition._updatedFibers.add(fiber);}// The algorithm for assigning an update to a lane should be stable for all
// updates at the same priority within the same event. To do this, the
// inputs to the algorithm must be the same.
//
// The trick we use is to cache the first of each of these inputs within an
// event. Then reset the cached values once we can be sure the event is
// over. Our heuristic for that is whenever we enter a concurrent work loop.
if(currentEventTransitionLane===NoLane){// All transitions within the same event are assigned the same lane.
currentEventTransitionLane=claimNextTransitionLane();}return currentEventTransitionLane;}// Updates originating inside certain React methods, like flushSync, have
// their priority set by tracking it with a context variable.
//
// The opaque type returned by the host config is internally a lane, so we can
// use that directly.
// TODO: Move this type conversion to the event priority module.
var updateLane=getCurrentUpdatePriority();if(updateLane!==NoLane){return updateLane;}// This update originated outside React. Ask the host environment for an
// appropriate priority, based on the type of event.
//
// The opaque type returned by the host config is internally a lane, so we can
// use that directly.
// TODO: Move this type conversion to the event priority module.
var eventLane=getCurrentEventPriority();return eventLane;}function requestRetryLane(fiber){// This is a fork of `requestUpdateLane` designed specifically for Suspense
// "retries" — a special update that attempts to flip a Suspense boundary
// from its placeholder state to its primary/resolved state.
// Special cases
var mode=fiber.mode;if((mode&ConcurrentMode)===NoMode){return SyncLane;}return claimNextRetryLane();}function scheduleUpdateOnFiber(root,fiber,lane,eventTime){checkForNestedUpdates();{if(isRunningInsertionEffect){error('useInsertionEffect must not schedule updates.');}}{if(isFlushingPassiveEffects){didScheduleUpdateDuringPassiveEffects=true;}}// Mark that the root has a pending update.
markRootUpdated(root,lane,eventTime);if((executionContext&RenderContext)!==NoLanes&&root===workInProgressRoot){// This update was dispatched during the render phase. This is a mistake
// if the update originates from user space (with the exception of local
// hook updates, which are handled differently and don't reach this
// function), but there are some internal React features that use this as
// an implementation detail, like selective hydration.
warnAboutRenderPhaseUpdatesInDEV(fiber);// Track lanes that were updated during the render phase
}else{// This is a normal update, scheduled from outside the render phase. For
// example, during an input event.
{if(isDevToolsPresent){addFiberToLanesMap(root,fiber,lane);}}warnIfUpdatesNotWrappedWithActDEV(fiber);if(root===workInProgressRoot){// Received an update to a tree that's in the middle of rendering. Mark
// that there was an interleaved update work on this root. Unless the
// `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
// phase update. In that case, we don't treat render phase updates as if
// they were interleaved, for backwards compat reasons.
if((executionContext&RenderContext)===NoContext){workInProgressRootInterleavedUpdatedLanes=mergeLanes(workInProgressRootInterleavedUpdatedLanes,lane);}if(workInProgressRootExitStatus===RootSuspendedWithDelay){// The root already suspended with a delay, which means this render
// definitely won't finish. Since we have a new update, let's mark it as
// suspended now, right before marking the incoming update. This has the
// effect of interrupting the current render and switching to the update.
// TODO: Make sure this doesn't override pings that happen while we've
// already started rendering.
markRootSuspended$1(root,workInProgressRootRenderLanes);}}ensureRootIsScheduled(root,eventTime);if(lane===SyncLane&&executionContext===NoContext&&(fiber.mode&ConcurrentMode)===NoMode&&// Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
!ReactCurrentActQueue$1.isBatchingLegacy){// Flush the synchronous work now, unless we're already working or inside
// a batch. This is intentionally inside scheduleUpdateOnFiber instead of
// scheduleCallbackForFiber to preserve the ability to schedule a callback
// without immediately flushing it. We only do this for user-initiated
// updates, to preserve historical behavior of legacy mode.
resetRenderTimer();flushSyncCallbacksOnlyInLegacyMode();}}}function scheduleInitialHydrationOnRoot(root,lane,eventTime){// This is a special fork of scheduleUpdateOnFiber that is only used to
// schedule the initial hydration of a root that has just been created. Most
// of the stuff in scheduleUpdateOnFiber can be skipped.
//
// The main reason for this separate path, though, is to distinguish the
// initial children from subsequent updates. In fully client-rendered roots
// (createRoot instead of hydrateRoot), all top-level renders are modeled as
// updates, but hydration roots are special because the initial render must
// match what was rendered on the server.
var current=root.current;current.lanes=lane;markRootUpdated(root,lane,eventTime);ensureRootIsScheduled(root,eventTime);}function isUnsafeClassRenderPhaseUpdate(fiber){// Check if this is a render phase update. Only called by class components,
// which special (deprecated) behavior for UNSAFE_componentWillReceive props.
return(// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
// decided not to enable it.
(executionContext&RenderContext)!==NoContext);}// Use this function to schedule a task for a root. There's only one task per
// root; if a task was already scheduled, we'll check to make sure the priority
// of the existing task is the same as the priority of the next level that the
// root has work on. This function is called on every update, and right before
// exiting a task.
function ensureRootIsScheduled(root,currentTime){var existingCallbackNode=root.callbackNode;// Check if any lanes are being starved by other work. If so, mark them as
// expired so we know to work on those next.
markStarvedLanesAsExpired(root,currentTime);// Determine the next lanes to work on, and their priority.
var nextLanes=getNextLanes(root,root===workInProgressRoot?workInProgressRootRenderLanes:NoLanes);if(nextLanes===NoLanes){// Special case: There's nothing to work on.
if(existingCallbackNode!==null){cancelCallback$1(existingCallbackNode);}root.callbackNode=null;root.callbackPriority=NoLane;return;}// We use the highest priority lane to represent the priority of the callback.
var newCallbackPriority=getHighestPriorityLane(nextLanes);// Check if there's an existing task. We may be able to reuse it.
var existingCallbackPriority=root.callbackPriority;if(existingCallbackPriority===newCallbackPriority&&// Special case related to `act`. If the currently scheduled task is a
// Scheduler task, rather than an `act` task, cancel it and re-scheduled
// on the `act` queue.
!(ReactCurrentActQueue$1.current!==null&&existingCallbackNode!==fakeActCallbackNode)){{// If we're going to re-use an existing task, it needs to exist.
// Assume that discrete update microtasks are non-cancellable and null.
// TODO: Temporary until we confirm this warning is not fired.
if(existingCallbackNode==null&&existingCallbackPriority!==SyncLane){error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');}}// The priority hasn't changed. We can reuse the existing task. Exit.
return;}if(existingCallbackNode!=null){// Cancel the existing callback. We'll schedule a new one below.
cancelCallback$1(existingCallbackNode);}// Schedule a new callback.
var newCallbackNode;if(newCallbackPriority===SyncLane){// Special case: Sync React callbacks are scheduled on a special
// internal queue
if(root.tag===LegacyRoot){if(ReactCurrentActQueue$1.isBatchingLegacy!==null){ReactCurrentActQueue$1.didScheduleLegacyUpdate=true;}scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null,root));}else{scheduleSyncCallback(performSyncWorkOnRoot.bind(null,root));}{// Flush the queue in a microtask.
if(ReactCurrentActQueue$1.current!==null){// Inside `act`, use our internal `act` queue so that these get flushed
// at the end of the current scope even when using the sync version
// of `act`.
ReactCurrentActQueue$1.current.push(flushSyncCallbacks);}else{scheduleMicrotask(function(){// In Safari, appending an iframe forces microtasks to run.
// https://github.com/facebook/react/issues/22459
// We don't support running callbacks in the middle of render
// or commit so we need to check against that.
if((executionContext&(RenderContext|CommitContext))===NoContext){// Note that this would still prematurely flush the callbacks
// if this happens outside render or commit phase (e.g. in an event).
flushSyncCallbacks();}});}}newCallbackNode=null;}else{var schedulerPriorityLevel;switch(lanesToEventPriority(nextLanes)){case DiscreteEventPriority:schedulerPriorityLevel=ImmediatePriority;break;case ContinuousEventPriority:schedulerPriorityLevel=UserBlockingPriority;break;case DefaultEventPriority:schedulerPriorityLevel=NormalPriority;break;case IdleEventPriority:schedulerPriorityLevel=IdlePriority;break;default:schedulerPriorityLevel=NormalPriority;break;}newCallbackNode=scheduleCallback$1(schedulerPriorityLevel,performConcurrentWorkOnRoot.bind(null,root));}root.callbackPriority=newCallbackPriority;root.callbackNode=newCallbackNode;}// This is the entry point for every concurrent task, i.e. anything that
// goes through Scheduler.
function performConcurrentWorkOnRoot(root,didTimeout){{resetNestedUpdateFlag();}// Since we know we're in a React event, we can clear the current
// event time. The next update will compute a new event time.
currentEventTime=NoTimestamp;currentEventTransitionLane=NoLanes;if((executionContext&(RenderContext|CommitContext))!==NoContext){throw new Error('Should not already be working.');}// Flush any pending passive effects before deciding which lanes to work on,
// in case they schedule additional work.
var originalCallbackNode=root.callbackNode;var didFlushPassiveEffects=flushPassiveEffects();if(didFlushPassiveEffects){// Something in the passive effect phase may have canceled the current task.
// Check if the task node for this root was changed.
if(root.callbackNode!==originalCallbackNode){// The current task was canceled. Exit. We don't need to call
// `ensureRootIsScheduled` because the check above implies either that
// there's a new task, or that there's no remaining work on this root.
return null;}}// Determine the next lanes to work on, using the fields stored
// on the root.
var lanes=getNextLanes(root,root===workInProgressRoot?workInProgressRootRenderLanes:NoLanes);if(lanes===NoLanes){// Defensive coding. This is never expected to happen.
return null;}// We disable time-slicing in some cases: if the work has been CPU-bound
// for too long ("expired" work, to prevent starvation), or we're in
// sync-updates-by-default mode.
// TODO: We only check `didTimeout` defensively, to account for a Scheduler
// bug we're still investigating. Once the bug in Scheduler is fixed,
// we can remove this, since we track expiration ourselves.
var shouldTimeSlice=!includesBlockingLane(root,lanes)&&!includesExpiredLane(root,lanes)&&!didTimeout;var exitStatus=shouldTimeSlice?renderRootConcurrent(root,lanes):renderRootSync(root,lanes);if(exitStatus!==RootInProgress){if(exitStatus===RootErrored){// If something threw an error, try rendering one more time. We'll
// render synchronously to block concurrent data mutations, and we'll
// includes all pending updates are included. If it still fails after
// the second attempt, we'll give up and commit the resulting tree.
var errorRetryLanes=getLanesToRetrySynchronouslyOnError(root);if(errorRetryLanes!==NoLanes){lanes=errorRetryLanes;exitStatus=recoverFromConcurrentError(root,errorRetryLanes);}}if(exitStatus===RootFatalErrored){var fatalError=workInProgressRootFatalError;prepareFreshStack(root,NoLanes);markRootSuspended$1(root,lanes);ensureRootIsScheduled(root,now());throw fatalError;}if(exitStatus===RootDidNotComplete){// The render unwound without completing the tree. This happens in special
// cases where need to exit the current render without producing a
// consistent tree or committing.
//
// This should only happen during a concurrent render, not a discrete or
// synchronous update. We should have already checked for this when we
// unwound the stack.
markRootSuspended$1(root,lanes);}else{// The render completed.
// Check if this render may have yielded to a concurrent event, and if so,
// confirm that any newly rendered stores are consistent.
// TODO: It's possible that even a concurrent render may never have yielded
// to the main thread, if it was fast enough, or if it expired. We could
// skip the consistency check in that case, too.
var renderWasConcurrent=!includesBlockingLane(root,lanes);var finishedWork=root.current.alternate;if(renderWasConcurrent&&!isRenderConsistentWithExternalStores(finishedWork)){// A store was mutated in an interleaved event. Render again,
// synchronously, to block further mutations.
exitStatus=renderRootSync(root,lanes);// We need to check again if something threw
if(exitStatus===RootErrored){var _errorRetryLanes=getLanesToRetrySynchronouslyOnError(root);if(_errorRetryLanes!==NoLanes){lanes=_errorRetryLanes;exitStatus=recoverFromConcurrentError(root,_errorRetryLanes);// We assume the tree is now consistent because we didn't yield to any
// concurrent events.
}}if(exitStatus===RootFatalErrored){var _fatalError=workInProgressRootFatalError;prepareFreshStack(root,NoLanes);markRootSuspended$1(root,lanes);ensureRootIsScheduled(root,now());throw _fatalError;}}// We now have a consistent tree. The next step is either to commit it,
// or, if something suspended, wait to commit it after a timeout.
root.finishedWork=finishedWork;root.finishedLanes=lanes;finishConcurrentRender(root,exitStatus,lanes);}}ensureRootIsScheduled(root,now());if(root.callbackNode===originalCallbackNode){// The task node scheduled for this root is the same one that's
// currently executed. Need to return a continuation.
return performConcurrentWorkOnRoot.bind(null,root);}return null;}function recoverFromConcurrentError(root,errorRetryLanes){// If an error occurred during hydration, discard server response and fall
// back to client side render.
// Before rendering again, save the errors from the previous attempt.
var errorsFromFirstAttempt=workInProgressRootConcurrentErrors;if(isRootDehydrated(root)){// The shell failed to hydrate. Set a flag to force a client rendering
// during the next attempt. To do this, we call prepareFreshStack now
// to create the root work-in-progress fiber. This is a bit weird in terms
// of factoring, because it relies on renderRootSync not calling
// prepareFreshStack again in the call below, which happens because the
// root and lanes haven't changed.
//
// TODO: I think what we should do is set ForceClientRender inside
// throwException, like we do for nested Suspense boundaries. The reason
// it's here instead is so we can switch to the synchronous work loop, too.
// Something to consider for a future refactor.
var rootWorkInProgress=prepareFreshStack(root,errorRetryLanes);rootWorkInProgress.flags|=ForceClientRender;{errorHydratingContainer(root.containerInfo);}}var exitStatus=renderRootSync(root,errorRetryLanes);if(exitStatus!==RootErrored){// Successfully finished rendering on retry
// The errors from the failed first attempt have been recovered. Add
// them to the collection of recoverable errors. We'll log them in the
// commit phase.
var errorsFromSecondAttempt=workInProgressRootRecoverableErrors;workInProgressRootRecoverableErrors=errorsFromFirstAttempt;// The errors from the second attempt should be queued after the errors
// from the first attempt, to preserve the causal sequence.
if(errorsFromSecondAttempt!==null){queueRecoverableErrors(errorsFromSecondAttempt);}}return exitStatus;}function queueRecoverableErrors(errors){if(workInProgressRootRecoverableErrors===null){workInProgressRootRecoverableErrors=errors;}else{workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors,errors);}}function finishConcurrentRender(root,exitStatus,lanes){switch(exitStatus){case RootInProgress:case RootFatalErrored:{throw new Error('Root did not complete. This is a bug in React.');}// Flow knows about invariant, so it complains if I add a break
// statement, but eslint doesn't know about invariant, so it complains
// if I do. eslint-disable-next-line no-fallthrough
case RootErrored:{// We should have already attempted to retry this tree. If we reached
// this point, it errored again. Commit it.
commitRoot(root,workInProgressRootRecoverableErrors,workInProgressTransitions);break;}case RootSuspended:{markRootSuspended$1(root,lanes);// We have an acceptable loading state. We need to figure out if we
// should immediately commit it or wait a bit.
if(includesOnlyRetries(lanes)&&// do not delay if we're inside an act() scope
!shouldForceFlushFallbacksInDEV()){// This render only included retries, no updates. Throttle committing
// retries so that we don't show too many loading states too quickly.
var msUntilTimeout=globalMostRecentFallbackTime+FALLBACK_THROTTLE_MS-now();// Don't bother with a very short suspense time.
if(msUntilTimeout>10){var nextLanes=getNextLanes(root,NoLanes);if(nextLanes!==NoLanes){// There's additional work on this root.
break;}var suspendedLanes=root.suspendedLanes;if(!isSubsetOfLanes(suspendedLanes,lanes)){// We should prefer to render the fallback of at the last
// suspended level. Ping the last suspended level to try
// rendering it again.
// FIXME: What if the suspended lanes are Idle? Should not restart.
var eventTime=requestEventTime();markRootPinged(root,suspendedLanes);break;}// The render is suspended, it hasn't timed out, and there's no
// lower priority work to do. Instead of committing the fallback
// immediately, wait for more data to arrive.
root.timeoutHandle=scheduleTimeout(commitRoot.bind(null,root,workInProgressRootRecoverableErrors,workInProgressTransitions),msUntilTimeout);break;}}// The work expired. Commit immediately.
commitRoot(root,workInProgressRootRecoverableErrors,workInProgressTransitions);break;}case RootSuspendedWithDelay:{markRootSuspended$1(root,lanes);if(includesOnlyTransitions(lanes)){// This is a transition, so we should exit without committing a
// placeholder and without scheduling a timeout. Delay indefinitely
// until we receive more data.
break;}if(!shouldForceFlushFallbacksInDEV()){// This is not a transition, but we did trigger an avoided state.
// Schedule a placeholder to display after a short delay, using the Just
// Noticeable Difference.
// TODO: Is the JND optimization worth the added complexity? If this is
// the only reason we track the event time, then probably not.
// Consider removing.
var mostRecentEventTime=getMostRecentEventTime(root,lanes);var eventTimeMs=mostRecentEventTime;var timeElapsedMs=now()-eventTimeMs;var _msUntilTimeout=jnd(timeElapsedMs)-timeElapsedMs;// Don't bother with a very short suspense time.
if(_msUntilTimeout>10){// Instead of committing the fallback immediately, wait for more data
// to arrive.
root.timeoutHandle=scheduleTimeout(commitRoot.bind(null,root,workInProgressRootRecoverableErrors,workInProgressTransitions),_msUntilTimeout);break;}}// Commit the placeholder.
commitRoot(root,workInProgressRootRecoverableErrors,workInProgressTransitions);break;}case RootCompleted:{// The work completed. Ready to commit.
commitRoot(root,workInProgressRootRecoverableErrors,workInProgressTransitions);break;}default:{throw new Error('Unknown root exit status.');}}}function isRenderConsistentWithExternalStores(finishedWork){// Search the rendered tree for external store reads, and check whether the
// stores were mutated in a concurrent event. Intentionally using an iterative
// loop instead of recursion so we can exit early.
var node=finishedWork;while(true){if(node.flags&StoreConsistency){var updateQueue=node.updateQueue;if(updateQueue!==null){var checks=updateQueue.stores;if(checks!==null){for(var i=0;i<checks.length;i++){var check=checks[i];var getSnapshot=check.getSnapshot;var renderedValue=check.value;try{if(!objectIs(getSnapshot(),renderedValue)){// Found an inconsistent store.
return false;}}catch(error){// If `getSnapshot` throws, return `false`. This will schedule
// a re-render, and the error will be rethrown during render.
return false;}}}}}var child=node.child;if(node.subtreeFlags&StoreConsistency&&child!==null){child["return"]=node;node=child;continue;}if(node===finishedWork){return true;}while(node.sibling===null){if(node["return"]===null||node["return"]===finishedWork){return true;}node=node["return"];}node.sibling["return"]=node["return"];node=node.sibling;}// Flow doesn't know this is unreachable, but eslint does
// eslint-disable-next-line no-unreachable
return true;}function markRootSuspended$1(root,suspendedLanes){// When suspending, we should always exclude lanes that were pinged or (more
// rarely, since we try to avoid it) updated during the render phase.
// TODO: Lol maybe there's a better way to factor this besides this
// obnoxiously named function :)
suspendedLanes=removeLanes(suspendedLanes,workInProgressRootPingedLanes);suspendedLanes=removeLanes(suspendedLanes,workInProgressRootInterleavedUpdatedLanes);markRootSuspended(root,suspendedLanes);}// This is the entry point for synchronous tasks that don't go
// through Scheduler
function performSyncWorkOnRoot(root){{syncNestedUpdateFlag();}if((executionContext&(RenderContext|CommitContext))!==NoContext){throw new Error('Should not already be working.');}flushPassiveEffects();var lanes=getNextLanes(root,NoLanes);if(!includesSomeLane(lanes,SyncLane)){// There's no remaining sync work left.
ensureRootIsScheduled(root,now());return null;}var exitStatus=renderRootSync(root,lanes);if(root.tag!==LegacyRoot&&exitStatus===RootErrored){// If something threw an error, try rendering one more time. We'll render
// synchronously to block concurrent data mutations, and we'll includes
// all pending updates are included. If it still fails after the second
// attempt, we'll give up and commit the resulting tree.
var errorRetryLanes=getLanesToRetrySynchronouslyOnError(root);if(errorRetryLanes!==NoLanes){lanes=errorRetryLanes;exitStatus=recoverFromConcurrentError(root,errorRetryLanes);}}if(exitStatus===RootFatalErrored){var fatalError=workInProgressRootFatalError;prepareFreshStack(root,NoLanes);markRootSuspended$1(root,lanes);ensureRootIsScheduled(root,now());throw fatalError;}if(exitStatus===RootDidNotComplete){throw new Error('Root did not complete. This is a bug in React.');}// We now have a consistent tree. Because this is a sync render, we
// will commit it even if something suspended.
var finishedWork=root.current.alternate;root.finishedWork=finishedWork;root.finishedLanes=lanes;commitRoot(root,workInProgressRootRecoverableErrors,workInProgressTransitions);// Before exiting, make sure there's a callback scheduled for the next
// pending level.
ensureRootIsScheduled(root,now());return null;}function flushRoot(root,lanes){if(lanes!==NoLanes){markRootEntangled(root,mergeLanes(lanes,SyncLane));ensureRootIsScheduled(root,now());if((executionContext&(RenderContext|CommitContext))===NoContext){resetRenderTimer();flushSyncCallbacks();}}}function batchedUpdates$1(fn,a){var prevExecutionContext=executionContext;executionContext|=BatchedContext;try{return fn(a);}finally{executionContext=prevExecutionContext;// If there were legacy sync updates, flush them at the end of the outer
// most batchedUpdates-like method.
if(executionContext===NoContext&&// Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
!ReactCurrentActQueue$1.isBatchingLegacy){resetRenderTimer();flushSyncCallbacksOnlyInLegacyMode();}}}function discreteUpdates(fn,a,b,c,d){var previousPriority=getCurrentUpdatePriority();var prevTransition=ReactCurrentBatchConfig$3.transition;try{ReactCurrentBatchConfig$3.transition=null;setCurrentUpdatePriority(DiscreteEventPriority);return fn(a,b,c,d);}finally{setCurrentUpdatePriority(previousPriority);ReactCurrentBatchConfig$3.transition=prevTransition;if(executionContext===NoContext){resetRenderTimer();}}}// Overload the definition to the two valid signatures.
// Warning, this opts-out of checking the function body.
// eslint-disable-next-line no-redeclare
function flushSync(fn){// In legacy mode, we flush pending passive effects at the beginning of the
// next event, not at the end of the previous one.
if(rootWithPendingPassiveEffects!==null&&rootWithPendingPassiveEffects.tag===LegacyRoot&&(executionContext&(RenderContext|CommitContext))===NoContext){flushPassiveEffects();}var prevExecutionContext=executionContext;executionContext|=BatchedContext;var prevTransition=ReactCurrentBatchConfig$3.transition;var previousPriority=getCurrentUpdatePriority();try{ReactCurrentBatchConfig$3.transition=null;setCurrentUpdatePriority(DiscreteEventPriority);if(fn){return fn();}else{return undefined;}}finally{setCurrentUpdatePriority(previousPriority);ReactCurrentBatchConfig$3.transition=prevTransition;executionContext=prevExecutionContext;// Flush the immediate callbacks that were scheduled during this batch.
// Note that this will happen even if batchedUpdates is higher up
// the stack.
if((executionContext&(RenderContext|CommitContext))===NoContext){flushSyncCallbacks();}}}function isAlreadyRendering(){// Used by the renderer to print a warning if certain APIs are called from
// the wrong context.
return(executionContext&(RenderContext|CommitContext))!==NoContext;}function pushRenderLanes(fiber,lanes){push(subtreeRenderLanesCursor,subtreeRenderLanes,fiber);subtreeRenderLanes=mergeLanes(subtreeRenderLanes,lanes);workInProgressRootIncludedLanes=mergeLanes(workInProgressRootIncludedLanes,lanes);}function popRenderLanes(fiber){subtreeRenderLanes=subtreeRenderLanesCursor.current;pop(subtreeRenderLanesCursor,fiber);}function prepareFreshStack(root,lanes){root.finishedWork=null;root.finishedLanes=NoLanes;var timeoutHandle=root.timeoutHandle;if(timeoutHandle!==noTimeout){// The root previous suspended and scheduled a timeout to commit a fallback
// state. Now that we have additional work, cancel the timeout.
root.timeoutHandle=noTimeout;// $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above
cancelTimeout(timeoutHandle);}if(workInProgress!==null){var interruptedWork=workInProgress["return"];while(interruptedWork!==null){var current=interruptedWork.alternate;unwindInterruptedWork(current,interruptedWork);interruptedWork=interruptedWork["return"];}}workInProgressRoot=root;var rootWorkInProgress=createWorkInProgress(root.current,null);workInProgress=rootWorkInProgress;workInProgressRootRenderLanes=subtreeRenderLanes=workInProgressRootIncludedLanes=lanes;workInProgressRootExitStatus=RootInProgress;workInProgressRootFatalError=null;workInProgressRootSkippedLanes=NoLanes;workInProgressRootInterleavedUpdatedLanes=NoLanes;workInProgressRootPingedLanes=NoLanes;workInProgressRootConcurrentErrors=null;workInProgressRootRecoverableErrors=null;finishQueueingConcurrentUpdates();{ReactStrictModeWarnings.discardPendingWarnings();}return rootWorkInProgress;}function handleError(root,thrownValue){do{var erroredWork=workInProgress;try{// Reset module-level state that was set during the render phase.
resetContextDependencies();resetHooksAfterThrow();resetCurrentFiber();// TODO: I found and added this missing line while investigating a
// separate issue. Write a regression test using string refs.
ReactCurrentOwner$2.current=null;if(erroredWork===null||erroredWork["return"]===null){// Expected to be working on a non-root fiber. This is a fatal error
// because there's no ancestor that can handle it; the root is
// supposed to capture all errors that weren't caught by an error
// boundary.
workInProgressRootExitStatus=RootFatalErrored;workInProgressRootFatalError=thrownValue;// Set `workInProgress` to null. This represents advancing to the next
// sibling, or the parent if there are no siblings. But since the root
// has no siblings nor a parent, we set it to null. Usually this is
// handled by `completeUnitOfWork` or `unwindWork`, but since we're
// intentionally not calling those, we need set it here.
// TODO: Consider calling `unwindWork` to pop the contexts.
workInProgress=null;return;}if(enableProfilerTimer&&erroredWork.mode&ProfileMode){// Record the time spent rendering before an error was thrown. This
// avoids inaccurate Profiler durations in the case of a
// suspended render.
stopProfilerTimerIfRunningAndRecordDelta(erroredWork,true);}if(enableSchedulingProfiler){markComponentRenderStopped();if(thrownValue!==null&&_typeof(thrownValue)==='object'&&typeof thrownValue.then==='function'){var wakeable=thrownValue;markComponentSuspended(erroredWork,wakeable,workInProgressRootRenderLanes);}else{markComponentErrored(erroredWork,thrownValue,workInProgressRootRenderLanes);}}throwException(root,erroredWork["return"],erroredWork,thrownValue,workInProgressRootRenderLanes);completeUnitOfWork(erroredWork);}catch(yetAnotherThrownValue){// Something in the return path also threw.
thrownValue=yetAnotherThrownValue;if(workInProgress===erroredWork&&erroredWork!==null){// If this boundary has already errored, then we had trouble processing
// the error. Bubble it to the next boundary.
erroredWork=erroredWork["return"];workInProgress=erroredWork;}else{erroredWork=workInProgress;}continue;}// Return to the normal work loop.
return;}while(true);}function pushDispatcher(){var prevDispatcher=ReactCurrentDispatcher$2.current;ReactCurrentDispatcher$2.current=ContextOnlyDispatcher;if(prevDispatcher===null){// The React isomorphic package does not include a default dispatcher.
// Instead the first renderer will lazily attach one, in order to give
// nicer error messages.
return ContextOnlyDispatcher;}else{return prevDispatcher;}}function popDispatcher(prevDispatcher){ReactCurrentDispatcher$2.current=prevDispatcher;}function markCommitTimeOfFallback(){globalMostRecentFallbackTime=now();}function markSkippedUpdateLanes(lane){workInProgressRootSkippedLanes=mergeLanes(lane,workInProgressRootSkippedLanes);}function renderDidSuspend(){if(workInProgressRootExitStatus===RootInProgress){workInProgressRootExitStatus=RootSuspended;}}function renderDidSuspendDelayIfPossible(){if(workInProgressRootExitStatus===RootInProgress||workInProgressRootExitStatus===RootSuspended||workInProgressRootExitStatus===RootErrored){workInProgressRootExitStatus=RootSuspendedWithDelay;}// Check if there are updates that we skipped tree that might have unblocked
// this render.
if(workInProgressRoot!==null&&(includesNonIdleWork(workInProgressRootSkippedLanes)||includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))){// Mark the current render as suspended so that we switch to working on
// the updates that were skipped. Usually we only suspend at the end of
// the render phase.
// TODO: We should probably always mark the root as suspended immediately
// (inside this function), since by suspending at the end of the render
// phase introduces a potential mistake where we suspend lanes that were
// pinged or updated while we were rendering.
markRootSuspended$1(workInProgressRoot,workInProgressRootRenderLanes);}}function renderDidError(error){if(workInProgressRootExitStatus!==RootSuspendedWithDelay){workInProgressRootExitStatus=RootErrored;}if(workInProgressRootConcurrentErrors===null){workInProgressRootConcurrentErrors=[error];}else{workInProgressRootConcurrentErrors.push(error);}}// Called during render to determine if anything has suspended.
// Returns false if we're not sure.
function renderHasNotSuspendedYet(){// If something errored or completed, we can't really be sure,
// so those are false.
return workInProgressRootExitStatus===RootInProgress;}function renderRootSync(root,lanes){var prevExecutionContext=executionContext;executionContext|=RenderContext;var prevDispatcher=pushDispatcher();// If the root or lanes have changed, throw out the existing stack
// and prepare a fresh one. Otherwise we'll continue where we left off.
if(workInProgressRoot!==root||workInProgressRootRenderLanes!==lanes){{if(isDevToolsPresent){var memoizedUpdaters=root.memoizedUpdaters;if(memoizedUpdaters.size>0){restorePendingUpdaters(root,workInProgressRootRenderLanes);memoizedUpdaters.clear();}// At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
// If we bailout on this work, we'll move them back (like above).
// It's important to move them now in case the work spawns more work at the same priority with different updaters.
// That way we can keep the current update and future updates separate.
movePendingFibersToMemoized(root,lanes);}}workInProgressTransitions=getTransitionsForLanes();prepareFreshStack(root,lanes);}{markRenderStarted(lanes);}do{try{workLoopSync();break;}catch(thrownValue){handleError(root,thrownValue);}}while(true);resetContextDependencies();executionContext=prevExecutionContext;popDispatcher(prevDispatcher);if(workInProgress!==null){// This is a sync render, so we should have finished the whole tree.
throw new Error('Cannot commit an incomplete root. This error is likely caused by a '+'bug in React. Please file an issue.');}{markRenderStopped();}// Set this to null to indicate there's no in-progress render.
workInProgressRoot=null;workInProgressRootRenderLanes=NoLanes;return workInProgressRootExitStatus;}// The work loop is an extremely hot path. Tell Closure not to inline it.
/** @noinline */function workLoopSync(){// Already timed out, so perform work without checking if we need to yield.
while(workInProgress!==null){performUnitOfWork(workInProgress);}}function renderRootConcurrent(root,lanes){var prevExecutionContext=executionContext;executionContext|=RenderContext;var prevDispatcher=pushDispatcher();// If the root or lanes have changed, throw out the existing stack
// and prepare a fresh one. Otherwise we'll continue where we left off.
if(workInProgressRoot!==root||workInProgressRootRenderLanes!==lanes){{if(isDevToolsPresent){var memoizedUpdaters=root.memoizedUpdaters;if(memoizedUpdaters.size>0){restorePendingUpdaters(root,workInProgressRootRenderLanes);memoizedUpdaters.clear();}// At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
// If we bailout on this work, we'll move them back (like above).
// It's important to move them now in case the work spawns more work at the same priority with different updaters.
// That way we can keep the current update and future updates separate.
movePendingFibersToMemoized(root,lanes);}}workInProgressTransitions=getTransitionsForLanes();resetRenderTimer();prepareFreshStack(root,lanes);}{markRenderStarted(lanes);}do{try{workLoopConcurrent();break;}catch(thrownValue){handleError(root,thrownValue);}}while(true);resetContextDependencies();popDispatcher(prevDispatcher);executionContext=prevExecutionContext;if(workInProgress!==null){// Still work remaining.
{markRenderYielded();}return RootInProgress;}else{// Completed the tree.
{markRenderStopped();}// Set this to null to indicate there's no in-progress render.
workInProgressRoot=null;workInProgressRootRenderLanes=NoLanes;// Return the final exit status.
return workInProgressRootExitStatus;}}/** @noinline */function workLoopConcurrent(){// Perform work until Scheduler asks us to yield
while(workInProgress!==null&&!shouldYield()){performUnitOfWork(workInProgress);}}function performUnitOfWork(unitOfWork){// The current, flushed, state of this fiber is the alternate. Ideally
// nothing should rely on this, but relying on it here means that we don't
// need an additional field on the work in progress.
var current=unitOfWork.alternate;setCurrentFiber(unitOfWork);var next;if((unitOfWork.mode&ProfileMode)!==NoMode){startProfilerTimer(unitOfWork);next=beginWork$1(current,unitOfWork,subtreeRenderLanes);stopProfilerTimerIfRunningAndRecordDelta(unitOfWork,true);}else{next=beginWork$1(current,unitOfWork,subtreeRenderLanes);}resetCurrentFiber();unitOfWork.memoizedProps=unitOfWork.pendingProps;if(next===null){// If this doesn't spawn new work, complete the current work.
completeUnitOfWork(unitOfWork);}else{workInProgress=next;}ReactCurrentOwner$2.current=null;}function completeUnitOfWork(unitOfWork){// Attempt to complete the current unit of work, then move to the next
// sibling. If there are no more siblings, return to the parent fiber.
var completedWork=unitOfWork;do{// The current, flushed, state of this fiber is the alternate. Ideally
// nothing should rely on this, but relying on it here means that we don't
// need an additional field on the work in progress.
var current=completedWork.alternate;var returnFiber=completedWork["return"];// Check if the work completed or if something threw.
if((completedWork.flags&Incomplete)===NoFlags){setCurrentFiber(completedWork);var next=void 0;if((completedWork.mode&ProfileMode)===NoMode){next=completeWork(current,completedWork,subtreeRenderLanes);}else{startProfilerTimer(completedWork);next=completeWork(current,completedWork,subtreeRenderLanes);// Update render duration assuming we didn't error.
stopProfilerTimerIfRunningAndRecordDelta(completedWork,false);}resetCurrentFiber();if(next!==null){// Completing this fiber spawned new work. Work on that next.
workInProgress=next;return;}}else{// This fiber did not complete because something threw. Pop values off
// the stack without entering the complete phase. If this is a boundary,
// capture values if possible.
var _next=unwindWork(current,completedWork);// Because this fiber did not complete, don't reset its lanes.
if(_next!==null){// If completing this work spawned new work, do that next. We'll come
// back here again.
// Since we're restarting, remove anything that is not a host effect
// from the effect tag.
_next.flags&=HostEffectMask;workInProgress=_next;return;}if((completedWork.mode&ProfileMode)!==NoMode){// Record the render duration for the fiber that errored.
stopProfilerTimerIfRunningAndRecordDelta(completedWork,false);// Include the time spent working on failed children before continuing.
var actualDuration=completedWork.actualDuration;var child=completedWork.child;while(child!==null){actualDuration+=child.actualDuration;child=child.sibling;}completedWork.actualDuration=actualDuration;}if(returnFiber!==null){// Mark the parent fiber as incomplete and clear its subtree flags.
returnFiber.flags|=Incomplete;returnFiber.subtreeFlags=NoFlags;returnFiber.deletions=null;}else{// We've unwound all the way to the root.
workInProgressRootExitStatus=RootDidNotComplete;workInProgress=null;return;}}var siblingFiber=completedWork.sibling;if(siblingFiber!==null){// If there is more work to do in this returnFiber, do that next.
workInProgress=siblingFiber;return;}// Otherwise, return to the parent
completedWork=returnFiber;// Update the next thing we're working on in case something throws.
workInProgress=completedWork;}while(completedWork!==null);// We've reached the root.
if(workInProgressRootExitStatus===RootInProgress){workInProgressRootExitStatus=RootCompleted;}}function commitRoot(root,recoverableErrors,transitions){// TODO: This no longer makes any sense. We already wrap the mutation and
// layout phases. Should be able to remove.
var previousUpdateLanePriority=getCurrentUpdatePriority();var prevTransition=ReactCurrentBatchConfig$3.transition;try{ReactCurrentBatchConfig$3.transition=null;setCurrentUpdatePriority(DiscreteEventPriority);commitRootImpl(root,recoverableErrors,transitions,previousUpdateLanePriority);}finally{ReactCurrentBatchConfig$3.transition=prevTransition;setCurrentUpdatePriority(previousUpdateLanePriority);}return null;}function commitRootImpl(root,recoverableErrors,transitions,renderPriorityLevel){do{// `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
// means `flushPassiveEffects` will sometimes result in additional
// passive effects. So we need to keep flushing in a loop until there are
// no more pending effects.
// TODO: Might be better if `flushPassiveEffects` did not automatically
// flush synchronous work at the end, to avoid factoring hazards like this.
flushPassiveEffects();}while(rootWithPendingPassiveEffects!==null);flushRenderPhaseStrictModeWarningsInDEV();if((executionContext&(RenderContext|CommitContext))!==NoContext){throw new Error('Should not already be working.');}var finishedWork=root.finishedWork;var lanes=root.finishedLanes;{markCommitStarted(lanes);}if(finishedWork===null){{markCommitStopped();}return null;}else{{if(lanes===NoLanes){error('root.finishedLanes should not be empty during a commit. This is a '+'bug in React.');}}}root.finishedWork=null;root.finishedLanes=NoLanes;if(finishedWork===root.current){throw new Error('Cannot commit the same tree as before. This error is likely caused by '+'a bug in React. Please file an issue.');}// commitRoot never returns a continuation; it always finishes synchronously.
// So we can clear these now to allow a new callback to be scheduled.
root.callbackNode=null;root.callbackPriority=NoLane;// Update the first and last pending times on this root. The new first
// pending time is whatever is left on the root fiber.
var remainingLanes=mergeLanes(finishedWork.lanes,finishedWork.childLanes);markRootFinished(root,remainingLanes);if(root===workInProgressRoot){// We can reset these now that they are finished.
workInProgressRoot=null;workInProgress=null;workInProgressRootRenderLanes=NoLanes;}// If there are pending passive effects, schedule a callback to process them.
// Do this as early as possible, so it is queued before anything else that
// might get scheduled in the commit phase. (See #16714.)
// TODO: Delete all other places that schedule the passive effect callback
// They're redundant.
if((finishedWork.subtreeFlags&PassiveMask)!==NoFlags||(finishedWork.flags&PassiveMask)!==NoFlags){if(!rootDoesHavePassiveEffects){rootDoesHavePassiveEffects=true;// to store it in pendingPassiveTransitions until they get processed
// We need to pass this through as an argument to commitRoot
// because workInProgressTransitions might have changed between
// the previous render and commit if we throttle the commit
// with setTimeout
pendingPassiveTransitions=transitions;scheduleCallback$1(NormalPriority,function(){flushPassiveEffects();// This render triggered passive effects: release the root cache pool
// *after* passive effects fire to avoid freeing a cache pool that may
// be referenced by a node in the tree (HostRoot, Cache boundary etc)
return null;});}}// Check if there are any effects in the whole tree.
// TODO: This is left over from the effect list implementation, where we had
// to check for the existence of `firstEffect` to satisfy Flow. I think the
// only other reason this optimization exists is because it affects profiling.
// Reconsider whether this is necessary.
var subtreeHasEffects=(finishedWork.subtreeFlags&(BeforeMutationMask|MutationMask|LayoutMask|PassiveMask))!==NoFlags;var rootHasEffect=(finishedWork.flags&(BeforeMutationMask|MutationMask|LayoutMask|PassiveMask))!==NoFlags;if(subtreeHasEffects||rootHasEffect){var prevTransition=ReactCurrentBatchConfig$3.transition;ReactCurrentBatchConfig$3.transition=null;var previousPriority=getCurrentUpdatePriority();setCurrentUpdatePriority(DiscreteEventPriority);var prevExecutionContext=executionContext;executionContext|=CommitContext;// Reset this to null before calling lifecycles
ReactCurrentOwner$2.current=null;// The commit phase is broken into several sub-phases. We do a separate pass
// of the effect list for each phase: all mutation effects come before all
// layout effects, and so on.
// The first phase a "before mutation" phase. We use this phase to read the
// state of the host tree right before we mutate it. This is where
// getSnapshotBeforeUpdate is called.
var shouldFireAfterActiveInstanceBlur=commitBeforeMutationEffects(root,finishedWork);{// Mark the current commit time to be shared by all Profilers in this
// batch. This enables them to be grouped later.
recordCommitTime();}commitMutationEffects(root,finishedWork,lanes);resetAfterCommit(root.containerInfo);// The work-in-progress tree is now the current tree. This must come after
// the mutation phase, so that the previous tree is still current during
// componentWillUnmount, but before the layout phase, so that the finished
// work is current during componentDidMount/Update.
root.current=finishedWork;// The next phase is the layout phase, where we call effects that read
{markLayoutEffectsStarted(lanes);}commitLayoutEffects(finishedWork,root,lanes);{markLayoutEffectsStopped();}// opportunity to paint.
requestPaint();executionContext=prevExecutionContext;// Reset the priority to the previous non-sync value.
setCurrentUpdatePriority(previousPriority);ReactCurrentBatchConfig$3.transition=prevTransition;}else{// No effects.
root.current=finishedWork;// Measure these anyway so the flamegraph explicitly shows that there were
// no effects.
// TODO: Maybe there's a better way to report this.
{recordCommitTime();}}var rootDidHavePassiveEffects=rootDoesHavePassiveEffects;if(rootDoesHavePassiveEffects){// This commit has passive effects. Stash a reference to them. But don't
// schedule a callback until after flushing layout work.
rootDoesHavePassiveEffects=false;rootWithPendingPassiveEffects=root;pendingPassiveEffectsLanes=lanes;}else{{nestedPassiveUpdateCount=0;rootWithPassiveNestedUpdates=null;}}// Read this again, since an effect might have updated it
remainingLanes=root.pendingLanes;// Check if there's remaining work on this root
// TODO: This is part of the `componentDidCatch` implementation. Its purpose
// is to detect whether something might have called setState inside
// `componentDidCatch`. The mechanism is known to be flawed because `setState`
// inside `componentDidCatch` is itself flawed — that's why we recommend
// `getDerivedStateFromError` instead. However, it could be improved by
// checking if remainingLanes includes Sync work, instead of whether there's
// any work remaining at all (which would also include stuff like Suspense
// retries or transitions). It's been like this for a while, though, so fixing
// it probably isn't that urgent.
if(remainingLanes===NoLanes){// If there's no remaining work, we can clear the set of already failed
// error boundaries.
legacyErrorBoundariesThatAlreadyFailed=null;}{if(!rootDidHavePassiveEffects){commitDoubleInvokeEffectsInDEV(root.current,false);}}onCommitRoot(finishedWork.stateNode,renderPriorityLevel);{if(isDevToolsPresent){root.memoizedUpdaters.clear();}}{onCommitRoot$1();}// Always call this before exiting `commitRoot`, to ensure that any
// additional work on this root is scheduled.
ensureRootIsScheduled(root,now());if(recoverableErrors!==null){// There were errors during this render, but recovered from them without
// needing to surface it to the UI. We log them here.
var onRecoverableError=root.onRecoverableError;for(var i=0;i<recoverableErrors.length;i++){var recoverableError=recoverableErrors[i];var componentStack=recoverableError.stack;var digest=recoverableError.digest;onRecoverableError(recoverableError.value,{componentStack:componentStack,digest:digest});}}if(hasUncaughtError){hasUncaughtError=false;var error$1=firstUncaughtError;firstUncaughtError=null;throw error$1;}// If the passive effects are the result of a discrete render, flush them
// synchronously at the end of the current task so that the result is
// immediately observable. Otherwise, we assume that they are not
// order-dependent and do not need to be observed by external systems, so we
// can wait until after paint.
// TODO: We can optimize this by not scheduling the callback earlier. Since we
// currently schedule the callback in multiple places, will wait until those
// are consolidated.
if(includesSomeLane(pendingPassiveEffectsLanes,SyncLane)&&root.tag!==LegacyRoot){flushPassiveEffects();}// Read this again, since a passive effect might have updated it
remainingLanes=root.pendingLanes;if(includesSomeLane(remainingLanes,SyncLane)){{markNestedUpdateScheduled();}// Count the number of times the root synchronously re-renders without
// finishing. If there are too many, it indicates an infinite update loop.
if(root===rootWithNestedUpdates){nestedUpdateCount++;}else{nestedUpdateCount=0;rootWithNestedUpdates=root;}}else{nestedUpdateCount=0;}// If layout work was scheduled, flush it now.
flushSyncCallbacks();{markCommitStopped();}return null;}function flushPassiveEffects(){// Returns whether passive effects were flushed.
// TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
// probably just combine the two functions. I believe they were only separate
// in the first place because we used to wrap it with
// `Scheduler.runWithPriority`, which accepts a function. But now we track the
// priority within React itself, so we can mutate the variable directly.
if(rootWithPendingPassiveEffects!==null){var renderPriority=lanesToEventPriority(pendingPassiveEffectsLanes);var priority=lowerEventPriority(DefaultEventPriority,renderPriority);var prevTransition=ReactCurrentBatchConfig$3.transition;var previousPriority=getCurrentUpdatePriority();try{ReactCurrentBatchConfig$3.transition=null;setCurrentUpdatePriority(priority);return flushPassiveEffectsImpl();}finally{setCurrentUpdatePriority(previousPriority);ReactCurrentBatchConfig$3.transition=prevTransition;// Once passive effects have run for the tree - giving components a
}}return false;}function enqueuePendingPassiveProfilerEffect(fiber){{pendingPassiveProfilerEffects.push(fiber);if(!rootDoesHavePassiveEffects){rootDoesHavePassiveEffects=true;scheduleCallback$1(NormalPriority,function(){flushPassiveEffects();return null;});}}}function flushPassiveEffectsImpl(){if(rootWithPendingPassiveEffects===null){return false;}// Cache and clear the transitions flag
var transitions=pendingPassiveTransitions;pendingPassiveTransitions=null;var root=rootWithPendingPassiveEffects;var lanes=pendingPassiveEffectsLanes;rootWithPendingPassiveEffects=null;// TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
// Figure out why and fix it. It's not causing any known issues (probably
// because it's only used for profiling), but it's a refactor hazard.
pendingPassiveEffectsLanes=NoLanes;if((executionContext&(RenderContext|CommitContext))!==NoContext){throw new Error('Cannot flush passive effects while already rendering.');}{isFlushingPassiveEffects=true;didScheduleUpdateDuringPassiveEffects=false;}{markPassiveEffectsStarted(lanes);}var prevExecutionContext=executionContext;executionContext|=CommitContext;commitPassiveUnmountEffects(root.current);commitPassiveMountEffects(root,root.current,lanes,transitions);// TODO: Move to commitPassiveMountEffects
{var profilerEffects=pendingPassiveProfilerEffects;pendingPassiveProfilerEffects=[];for(var i=0;i<profilerEffects.length;i++){var _fiber=profilerEffects[i];commitPassiveEffectDurations(root,_fiber);}}{markPassiveEffectsStopped();}{commitDoubleInvokeEffectsInDEV(root.current,true);}executionContext=prevExecutionContext;flushSyncCallbacks();{// If additional passive effects were scheduled, increment a counter. If this
// exceeds the limit, we'll fire a warning.
if(didScheduleUpdateDuringPassiveEffects){if(root===rootWithPassiveNestedUpdates){nestedPassiveUpdateCount++;}else{nestedPassiveUpdateCount=0;rootWithPassiveNestedUpdates=root;}}else{nestedPassiveUpdateCount=0;}isFlushingPassiveEffects=false;didScheduleUpdateDuringPassiveEffects=false;}// TODO: Move to commitPassiveMountEffects
onPostCommitRoot(root);{var stateNode=root.current.stateNode;stateNode.effectDuration=0;stateNode.passiveEffectDuration=0;}return true;}function isAlreadyFailedLegacyErrorBoundary(instance){return legacyErrorBoundariesThatAlreadyFailed!==null&&legacyErrorBoundariesThatAlreadyFailed.has(instance);}function markLegacyErrorBoundaryAsFailed(instance){if(legacyErrorBoundariesThatAlreadyFailed===null){legacyErrorBoundariesThatAlreadyFailed=new Set([instance]);}else{legacyErrorBoundariesThatAlreadyFailed.add(instance);}}function prepareToThrowUncaughtError(error){if(!hasUncaughtError){hasUncaughtError=true;firstUncaughtError=error;}}var onUncaughtError=prepareToThrowUncaughtError;function captureCommitPhaseErrorOnRoot(rootFiber,sourceFiber,error){var errorInfo=createCapturedValueAtFiber(error,sourceFiber);var update=createRootErrorUpdate(rootFiber,errorInfo,SyncLane);var root=enqueueUpdate(rootFiber,update,SyncLane);var eventTime=requestEventTime();if(root!==null){markRootUpdated(root,SyncLane,eventTime);ensureRootIsScheduled(root,eventTime);}}function captureCommitPhaseError(sourceFiber,nearestMountedAncestor,error$1){{reportUncaughtErrorInDEV(error$1);setIsRunningInsertionEffect(false);}if(sourceFiber.tag===HostRoot){// Error was thrown at the root. There is no parent, so the root
// itself should capture it.
captureCommitPhaseErrorOnRoot(sourceFiber,sourceFiber,error$1);return;}var fiber=null;{fiber=nearestMountedAncestor;}while(fiber!==null){if(fiber.tag===HostRoot){captureCommitPhaseErrorOnRoot(fiber,sourceFiber,error$1);return;}else if(fiber.tag===ClassComponent){var ctor=fiber.type;var instance=fiber.stateNode;if(typeof ctor.getDerivedStateFromError==='function'||typeof instance.componentDidCatch==='function'&&!isAlreadyFailedLegacyErrorBoundary(instance)){var errorInfo=createCapturedValueAtFiber(error$1,sourceFiber);var update=createClassErrorUpdate(fiber,errorInfo,SyncLane);var root=enqueueUpdate(fiber,update,SyncLane);var eventTime=requestEventTime();if(root!==null){markRootUpdated(root,SyncLane,eventTime);ensureRootIsScheduled(root,eventTime);}return;}}fiber=fiber["return"];}{// TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
// will fire for errors that are thrown by destroy functions inside deleted
// trees. What it should instead do is propagate the error to the parent of
// the deleted tree. In the meantime, do not add this warning to the
// allowlist; this is only for our internal use.
error('Internal React error: Attempted to capture a commit phase error '+'inside a detached tree. This indicates a bug in React. Likely '+'causes include deleting the same fiber more than once, committing an '+'already-finished tree, or an inconsistent return pointer.\n\n'+'Error message:\n\n%s',error$1);}}function pingSuspendedRoot(root,wakeable,pingedLanes){var pingCache=root.pingCache;if(pingCache!==null){// The wakeable resolved, so we no longer need to memoize, because it will
// never be thrown again.
pingCache["delete"](wakeable);}var eventTime=requestEventTime();markRootPinged(root,pingedLanes);warnIfSuspenseResolutionNotWrappedWithActDEV(root);if(workInProgressRoot===root&&isSubsetOfLanes(workInProgressRootRenderLanes,pingedLanes)){// Received a ping at the same priority level at which we're currently
// rendering. We might want to restart this render. This should mirror
// the logic of whether or not a root suspends once it completes.
// TODO: If we're rendering sync either due to Sync, Batched or expired,
// we should probably never restart.
// If we're suspended with delay, or if it's a retry, we'll always suspend
// so we can always restart.
if(workInProgressRootExitStatus===RootSuspendedWithDelay||workInProgressRootExitStatus===RootSuspended&&includesOnlyRetries(workInProgressRootRenderLanes)&&now()-globalMostRecentFallbackTime<FALLBACK_THROTTLE_MS){// Restart from the root.
prepareFreshStack(root,NoLanes);}else{// Even though we can't restart right now, we might get an
// opportunity later. So we mark this render as having a ping.
workInProgressRootPingedLanes=mergeLanes(workInProgressRootPingedLanes,pingedLanes);}}ensureRootIsScheduled(root,eventTime);}function retryTimedOutBoundary(boundaryFiber,retryLane){// The boundary fiber (a Suspense component or SuspenseList component)
// previously was rendered in its fallback state. One of the promises that
// suspended it has resolved, which means at least part of the tree was
// likely unblocked. Try rendering again, at a new lanes.
if(retryLane===NoLane){// TODO: Assign this to `suspenseState.retryLane`? to avoid
// unnecessary entanglement?
retryLane=requestRetryLane(boundaryFiber);}// TODO: Special case idle priority?
var eventTime=requestEventTime();var root=enqueueConcurrentRenderForLane(boundaryFiber,retryLane);if(root!==null){markRootUpdated(root,retryLane,eventTime);ensureRootIsScheduled(root,eventTime);}}function retryDehydratedSuspenseBoundary(boundaryFiber){var suspenseState=boundaryFiber.memoizedState;var retryLane=NoLane;if(suspenseState!==null){retryLane=suspenseState.retryLane;}retryTimedOutBoundary(boundaryFiber,retryLane);}function resolveRetryWakeable(boundaryFiber,wakeable){var retryLane=NoLane;// Default
var retryCache;switch(boundaryFiber.tag){case SuspenseComponent:retryCache=boundaryFiber.stateNode;var suspenseState=boundaryFiber.memoizedState;if(suspenseState!==null){retryLane=suspenseState.retryLane;}break;case SuspenseListComponent:retryCache=boundaryFiber.stateNode;break;default:throw new Error('Pinged unknown suspense boundary type. '+'This is probably a bug in React.');}if(retryCache!==null){// The wakeable resolved, so we no longer need to memoize, because it will
// never be thrown again.
retryCache["delete"](wakeable);}retryTimedOutBoundary(boundaryFiber,retryLane);}// Computes the next Just Noticeable Difference (JND) boundary.
// The theory is that a person can't tell the difference between small differences in time.
// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
// difference in the experience. However, waiting for longer might mean that we can avoid
// showing an intermediate loading state. The longer we have already waited, the harder it
// is to tell small differences in time. Therefore, the longer we've already waited,
// the longer we can wait additionally. At some point we have to give up though.
// We pick a train model where the next boundary commits at a consistent schedule.
// These particular numbers are vague estimates. We expect to adjust them based on research.
function jnd(timeElapsed){return timeElapsed<120?120:timeElapsed<480?480:timeElapsed<1080?1080:timeElapsed<1920?1920:timeElapsed<3000?3000:timeElapsed<4320?4320:ceil(timeElapsed/1960)*1960;}function checkForNestedUpdates(){if(nestedUpdateCount>NESTED_UPDATE_LIMIT){nestedUpdateCount=0;rootWithNestedUpdates=null;throw new Error('Maximum update depth exceeded. This can happen when a component '+'repeatedly calls setState inside componentWillUpdate or '+'componentDidUpdate. React limits the number of nested updates to '+'prevent infinite loops.');}{if(nestedPassiveUpdateCount>NESTED_PASSIVE_UPDATE_LIMIT){nestedPassiveUpdateCount=0;rootWithPassiveNestedUpdates=null;error('Maximum update depth exceeded. This can happen when a component '+"calls setState inside useEffect, but useEffect either doesn't "+'have a dependency array, or one of the dependencies changes on '+'every render.');}}}function flushRenderPhaseStrictModeWarningsInDEV(){{ReactStrictModeWarnings.flushLegacyContextWarning();{ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();}}}function commitDoubleInvokeEffectsInDEV(fiber,hasPassiveEffects){{// TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
// so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
// Maybe not a big deal since this is DEV only behavior.
setCurrentFiber(fiber);invokeEffectsInDev(fiber,MountLayoutDev,invokeLayoutEffectUnmountInDEV);if(hasPassiveEffects){invokeEffectsInDev(fiber,MountPassiveDev,invokePassiveEffectUnmountInDEV);}invokeEffectsInDev(fiber,MountLayoutDev,invokeLayoutEffectMountInDEV);if(hasPassiveEffects){invokeEffectsInDev(fiber,MountPassiveDev,invokePassiveEffectMountInDEV);}resetCurrentFiber();}}function invokeEffectsInDev(firstChild,fiberFlags,invokeEffectFn){{// We don't need to re-check StrictEffectsMode here.
// This function is only called if that check has already passed.
var current=firstChild;var subtreeRoot=null;while(current!==null){var primarySubtreeFlag=current.subtreeFlags&fiberFlags;if(current!==subtreeRoot&&current.child!==null&&primarySubtreeFlag!==NoFlags){current=current.child;}else{if((current.flags&fiberFlags)!==NoFlags){invokeEffectFn(current);}if(current.sibling!==null){current=current.sibling;}else{current=subtreeRoot=current["return"];}}}}}var didWarnStateUpdateForNotYetMountedComponent=null;function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber){{if((executionContext&RenderContext)!==NoContext){// We let the other warning about render phase updates deal with this one.
return;}if(!(fiber.mode&ConcurrentMode)){return;}var tag=fiber.tag;if(tag!==IndeterminateComponent&&tag!==HostRoot&&tag!==ClassComponent&&tag!==FunctionComponent&&tag!==ForwardRef&&tag!==MemoComponent&&tag!==SimpleMemoComponent){// Only warn for user-defined components, not internal ones like Suspense.
return;}// We show the whole stack but dedupe on the top component's name because
// the problematic code almost always lies inside that component.
var componentName=getComponentNameFromFiber(fiber)||'ReactComponent';if(didWarnStateUpdateForNotYetMountedComponent!==null){if(didWarnStateUpdateForNotYetMountedComponent.has(componentName)){return;}didWarnStateUpdateForNotYetMountedComponent.add(componentName);}else{didWarnStateUpdateForNotYetMountedComponent=new Set([componentName]);}var previousFiber=current;try{setCurrentFiber(fiber);error("Can't perform a React state update on a component that hasn't mounted yet. "+'This indicates that you have a side-effect in your render function that '+'asynchronously later calls tries to update the component. Move this work to '+'useEffect instead.');}finally{if(previousFiber){setCurrentFiber(fiber);}else{resetCurrentFiber();}}}}var beginWork$1;{var dummyFiber=null;beginWork$1=function beginWork$1(current,unitOfWork,lanes){// If a component throws an error, we replay it again in a synchronously
// dispatched event, so that the debugger will treat it as an uncaught
// error See ReactErrorUtils for more information.
// Before entering the begin phase, copy the work-in-progress onto a dummy
// fiber. If beginWork throws, we'll use this to reset the state.
var originalWorkInProgressCopy=assignFiberPropertiesInDEV(dummyFiber,unitOfWork);try{return beginWork(current,unitOfWork,lanes);}catch(originalError){if(didSuspendOrErrorWhileHydratingDEV()||originalError!==null&&_typeof(originalError)==='object'&&typeof originalError.then==='function'){// Don't replay promises.
// Don't replay errors if we are hydrating and have already suspended or handled an error
throw originalError;}// Keep this code in sync with handleError; any changes here must have
// corresponding changes there.
resetContextDependencies();resetHooksAfterThrow();// Don't reset current debug fiber, since we're about to work on the
// same fiber again.
// Unwind the failed stack frame
unwindInterruptedWork(current,unitOfWork);// Restore the original properties of the fiber.
assignFiberPropertiesInDEV(unitOfWork,originalWorkInProgressCopy);if(unitOfWork.mode&ProfileMode){// Reset the profiler timer.
startProfilerTimer(unitOfWork);}// Run beginWork again.
invokeGuardedCallback(null,beginWork,null,current,unitOfWork,lanes);if(hasCaughtError()){var replayError=clearCaughtError();if(_typeof(replayError)==='object'&&replayError!==null&&replayError._suppressLogging&&_typeof(originalError)==='object'&&originalError!==null&&!originalError._suppressLogging){// If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
originalError._suppressLogging=true;}}// We always throw the original error in case the second render pass is not idempotent.
// This can happen if a memoized function or CommonJS module doesn't throw after first invocation.
throw originalError;}};}var didWarnAboutUpdateInRender=false;var didWarnAboutUpdateInRenderForAnotherComponent;{didWarnAboutUpdateInRenderForAnotherComponent=new Set();}function warnAboutRenderPhaseUpdatesInDEV(fiber){{if(isRendering&&!getIsUpdatingOpaqueValueInRenderPhaseInDEV()){switch(fiber.tag){case FunctionComponent:case ForwardRef:case SimpleMemoComponent:{var renderingComponentName=workInProgress&&getComponentNameFromFiber(workInProgress)||'Unknown';// Dedupe by the rendering component because it's the one that needs to be fixed.
var dedupeKey=renderingComponentName;if(!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)){didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);var setStateComponentName=getComponentNameFromFiber(fiber)||'Unknown';error('Cannot update a component (`%s`) while rendering a '+'different component (`%s`). To locate the bad setState() call inside `%s`, '+'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',setStateComponentName,renderingComponentName,renderingComponentName);}break;}case ClassComponent:{if(!didWarnAboutUpdateInRender){error('Cannot update during an existing state transition (such as '+'within `render`). Render methods should be a pure '+'function of props and state.');didWarnAboutUpdateInRender=true;}break;}}}}}function restorePendingUpdaters(root,lanes){{if(isDevToolsPresent){var memoizedUpdaters=root.memoizedUpdaters;memoizedUpdaters.forEach(function(schedulingFiber){addFiberToLanesMap(root,schedulingFiber,lanes);});// This function intentionally does not clear memoized updaters.
// Those may still be relevant to the current commit
// and a future one (e.g. Suspense).
}}}var fakeActCallbackNode={};function scheduleCallback$1(priorityLevel,callback){{// If we're currently inside an `act` scope, bypass Scheduler and push to
// the `act` queue instead.
var actQueue=ReactCurrentActQueue$1.current;if(actQueue!==null){actQueue.push(callback);return fakeActCallbackNode;}else{return scheduleCallback(priorityLevel,callback);}}}function cancelCallback$1(callbackNode){if(callbackNode===fakeActCallbackNode){return;}// In production, always call Scheduler. This function will be stripped out.
return cancelCallback(callbackNode);}function shouldForceFlushFallbacksInDEV(){// Never force flush in production. This function should get stripped out.
return ReactCurrentActQueue$1.current!==null;}function warnIfUpdatesNotWrappedWithActDEV(fiber){{if(fiber.mode&ConcurrentMode){if(!isConcurrentActEnvironment()){// Not in an act environment. No need to warn.
return;}}else{// Legacy mode has additional cases where we suppress a warning.
if(!isLegacyActEnvironment()){// Not in an act environment. No need to warn.
return;}if(executionContext!==NoContext){// Legacy mode doesn't warn if the update is batched, i.e.
// batchedUpdates or flushSync.
return;}if(fiber.tag!==FunctionComponent&&fiber.tag!==ForwardRef&&fiber.tag!==SimpleMemoComponent){// For backwards compatibility with pre-hooks code, legacy mode only
// warns for updates that originate from a hook.
return;}}if(ReactCurrentActQueue$1.current===null){var previousFiber=current;try{setCurrentFiber(fiber);error('An update to %s inside a test was not wrapped in act(...).\n\n'+'When testing, code that causes React state updates should be '+'wrapped into act(...):\n\n'+'act(() => {\n'+'  /* fire events that update state */\n'+'});\n'+'/* assert on the output */\n\n'+"This ensures that you're testing the behavior the user would see "+'in the browser.'+' Learn more at https://reactjs.org/link/wrap-tests-with-act',getComponentNameFromFiber(fiber));}finally{if(previousFiber){setCurrentFiber(fiber);}else{resetCurrentFiber();}}}}}function warnIfSuspenseResolutionNotWrappedWithActDEV(root){{if(root.tag!==LegacyRoot&&isConcurrentActEnvironment()&&ReactCurrentActQueue$1.current===null){error('A suspended resource finished loading inside a test, but the event '+'was not wrapped in act(...).\n\n'+'When testing, code that resolves suspended data should be wrapped '+'into act(...):\n\n'+'act(() => {\n'+'  /* finish loading suspended data */\n'+'});\n'+'/* assert on the output */\n\n'+"This ensures that you're testing the behavior the user would see "+'in the browser.'+' Learn more at https://reactjs.org/link/wrap-tests-with-act');}}}function setIsRunningInsertionEffect(isRunning){{isRunningInsertionEffect=isRunning;}}/* eslint-disable react-internal/prod-error-codes */var resolveFamily=null;// $FlowFixMe Flow gets confused by a WeakSet feature check below.
var failedBoundaries=null;var setRefreshHandler=function setRefreshHandler(handler){{resolveFamily=handler;}};function resolveFunctionForHotReloading(type){{if(resolveFamily===null){// Hot reloading is disabled.
return type;}var family=resolveFamily(type);if(family===undefined){return type;}// Use the latest known implementation.
return family.current;}}function resolveClassForHotReloading(type){// No implementation differences.
return resolveFunctionForHotReloading(type);}function resolveForwardRefForHotReloading(type){{if(resolveFamily===null){// Hot reloading is disabled.
return type;}var family=resolveFamily(type);if(family===undefined){// Check if we're dealing with a real forwardRef. Don't want to crash early.
if(type!==null&&type!==undefined&&typeof type.render==='function'){// ForwardRef is special because its resolved .type is an object,
// but it's possible that we only have its inner render function in the map.
// If that inner render function is different, we'll build a new forwardRef type.
var currentRender=resolveFunctionForHotReloading(type.render);if(type.render!==currentRender){var syntheticType={$$typeof:REACT_FORWARD_REF_TYPE,render:currentRender};if(type.displayName!==undefined){syntheticType.displayName=type.displayName;}return syntheticType;}}return type;}// Use the latest known implementation.
return family.current;}}function isCompatibleFamilyForHotReloading(fiber,element){{if(resolveFamily===null){// Hot reloading is disabled.
return false;}var prevType=fiber.elementType;var nextType=element.type;// If we got here, we know types aren't === equal.
var needsCompareFamilies=false;var $$typeofNextType=_typeof(nextType)==='object'&&nextType!==null?nextType.$$typeof:null;switch(fiber.tag){case ClassComponent:{if(typeof nextType==='function'){needsCompareFamilies=true;}break;}case FunctionComponent:{if(typeof nextType==='function'){needsCompareFamilies=true;}else if($$typeofNextType===REACT_LAZY_TYPE){// We don't know the inner type yet.
// We're going to assume that the lazy inner type is stable,
// and so it is sufficient to avoid reconciling it away.
// We're not going to unwrap or actually use the new lazy type.
needsCompareFamilies=true;}break;}case ForwardRef:{if($$typeofNextType===REACT_FORWARD_REF_TYPE){needsCompareFamilies=true;}else if($$typeofNextType===REACT_LAZY_TYPE){needsCompareFamilies=true;}break;}case MemoComponent:case SimpleMemoComponent:{if($$typeofNextType===REACT_MEMO_TYPE){// TODO: if it was but can no longer be simple,
// we shouldn't set this.
needsCompareFamilies=true;}else if($$typeofNextType===REACT_LAZY_TYPE){needsCompareFamilies=true;}break;}default:return false;}// Check if both types have a family and it's the same one.
if(needsCompareFamilies){// Note: memo() and forwardRef() we'll compare outer rather than inner type.
// This means both of them need to be registered to preserve state.
// If we unwrapped and compared the inner types for wrappers instead,
// then we would risk falsely saying two separate memo(Foo)
// calls are equivalent because they wrap the same Foo function.
var prevFamily=resolveFamily(prevType);if(prevFamily!==undefined&&prevFamily===resolveFamily(nextType)){return true;}}return false;}}function markFailedErrorBoundaryForHotReloading(fiber){{if(resolveFamily===null){// Hot reloading is disabled.
return;}if(typeof WeakSet!=='function'){return;}if(failedBoundaries===null){failedBoundaries=new WeakSet();}failedBoundaries.add(fiber);}}var scheduleRefresh=function scheduleRefresh(root,update){{if(resolveFamily===null){// Hot reloading is disabled.
return;}var staleFamilies=update.staleFamilies,updatedFamilies=update.updatedFamilies;flushPassiveEffects();flushSync(function(){scheduleFibersWithFamiliesRecursively(root.current,updatedFamilies,staleFamilies);});}};var scheduleRoot=function scheduleRoot(root,element){{if(root.context!==emptyContextObject){// Super edge case: root has a legacy _renderSubtree context
// but we don't know the parentComponent so we can't pass it.
// Just ignore. We'll delete this with _renderSubtree code path later.
return;}flushPassiveEffects();flushSync(function(){updateContainer(element,root,null,null);});}};function scheduleFibersWithFamiliesRecursively(fiber,updatedFamilies,staleFamilies){{var alternate=fiber.alternate,child=fiber.child,sibling=fiber.sibling,tag=fiber.tag,type=fiber.type;var candidateType=null;switch(tag){case FunctionComponent:case SimpleMemoComponent:case ClassComponent:candidateType=type;break;case ForwardRef:candidateType=type.render;break;}if(resolveFamily===null){throw new Error('Expected resolveFamily to be set during hot reload.');}var needsRender=false;var needsRemount=false;if(candidateType!==null){var family=resolveFamily(candidateType);if(family!==undefined){if(staleFamilies.has(family)){needsRemount=true;}else if(updatedFamilies.has(family)){if(tag===ClassComponent){needsRemount=true;}else{needsRender=true;}}}}if(failedBoundaries!==null){if(failedBoundaries.has(fiber)||alternate!==null&&failedBoundaries.has(alternate)){needsRemount=true;}}if(needsRemount){fiber._debugNeedsRemount=true;}if(needsRemount||needsRender){var _root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(_root!==null){scheduleUpdateOnFiber(_root,fiber,SyncLane,NoTimestamp);}}if(child!==null&&!needsRemount){scheduleFibersWithFamiliesRecursively(child,updatedFamilies,staleFamilies);}if(sibling!==null){scheduleFibersWithFamiliesRecursively(sibling,updatedFamilies,staleFamilies);}}}var findHostInstancesForRefresh=function findHostInstancesForRefresh(root,families){{var hostInstances=new Set();var types=new Set(families.map(function(family){return family.current;}));findHostInstancesForMatchingFibersRecursively(root.current,types,hostInstances);return hostInstances;}};function findHostInstancesForMatchingFibersRecursively(fiber,types,hostInstances){{var child=fiber.child,sibling=fiber.sibling,tag=fiber.tag,type=fiber.type;var candidateType=null;switch(tag){case FunctionComponent:case SimpleMemoComponent:case ClassComponent:candidateType=type;break;case ForwardRef:candidateType=type.render;break;}var didMatch=false;if(candidateType!==null){if(types.has(candidateType)){didMatch=true;}}if(didMatch){// We have a match. This only drills down to the closest host components.
// There's no need to search deeper because for the purpose of giving
// visual feedback, "flashing" outermost parent rectangles is sufficient.
findHostInstancesForFiberShallowly(fiber,hostInstances);}else{// If there's no match, maybe there will be one further down in the child tree.
if(child!==null){findHostInstancesForMatchingFibersRecursively(child,types,hostInstances);}}if(sibling!==null){findHostInstancesForMatchingFibersRecursively(sibling,types,hostInstances);}}}function findHostInstancesForFiberShallowly(fiber,hostInstances){{var foundHostInstances=findChildHostInstancesForFiberShallowly(fiber,hostInstances);if(foundHostInstances){return;}// If we didn't find any host children, fallback to closest host parent.
var node=fiber;while(true){switch(node.tag){case HostComponent:hostInstances.add(node.stateNode);return;case HostPortal:hostInstances.add(node.stateNode.containerInfo);return;case HostRoot:hostInstances.add(node.stateNode.containerInfo);return;}if(node["return"]===null){throw new Error('Expected to reach root first.');}node=node["return"];}}}function findChildHostInstancesForFiberShallowly(fiber,hostInstances){{var node=fiber;var foundHostInstances=false;while(true){if(node.tag===HostComponent){// We got a match.
foundHostInstances=true;hostInstances.add(node.stateNode);// There may still be more, so keep searching.
}else if(node.child!==null){node.child["return"]=node;node=node.child;continue;}if(node===fiber){return foundHostInstances;}while(node.sibling===null){if(node["return"]===null||node["return"]===fiber){return foundHostInstances;}node=node["return"];}node.sibling["return"]=node["return"];node=node.sibling;}}return false;}var hasBadMapPolyfill;{hasBadMapPolyfill=false;try{var nonExtensibleObject=Object.preventExtensions({});/* eslint-disable no-new */new Map([[nonExtensibleObject,null]]);new Set([nonExtensibleObject]);/* eslint-enable no-new */}catch(e){// TODO: Consider warning about bad polyfills
hasBadMapPolyfill=true;}}function FiberNode(tag,pendingProps,key,mode){// Instance
this.tag=tag;this.key=key;this.elementType=null;this.type=null;this.stateNode=null;// Fiber
this["return"]=null;this.child=null;this.sibling=null;this.index=0;this.ref=null;this.pendingProps=pendingProps;this.memoizedProps=null;this.updateQueue=null;this.memoizedState=null;this.dependencies=null;this.mode=mode;// Effects
this.flags=NoFlags;this.subtreeFlags=NoFlags;this.deletions=null;this.lanes=NoLanes;this.childLanes=NoLanes;this.alternate=null;{// Note: The following is done to avoid a v8 performance cliff.
//
// Initializing the fields below to smis and later updating them with
// double values will cause Fibers to end up having separate shapes.
// This behavior/bug has something to do with Object.preventExtension().
// Fortunately this only impacts DEV builds.
// Unfortunately it makes React unusably slow for some applications.
// To work around this, initialize the fields below with doubles.
//
// Learn more about this here:
// https://github.com/facebook/react/issues/14365
// https://bugs.chromium.org/p/v8/issues/detail?id=8538
this.actualDuration=Number.NaN;this.actualStartTime=Number.NaN;this.selfBaseDuration=Number.NaN;this.treeBaseDuration=Number.NaN;// It's okay to replace the initial doubles with smis after initialization.
// This won't trigger the performance cliff mentioned above,
// and it simplifies other profiler code (including DevTools).
this.actualDuration=0;this.actualStartTime=-1;this.selfBaseDuration=0;this.treeBaseDuration=0;}{// This isn't directly used but is handy for debugging internals:
this._debugSource=null;this._debugOwner=null;this._debugNeedsRemount=false;this._debugHookTypes=null;if(!hasBadMapPolyfill&&typeof Object.preventExtensions==='function'){Object.preventExtensions(this);}}}// This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.
var createFiber=function createFiber(tag,pendingProps,key,mode){// $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
return new FiberNode(tag,pendingProps,key,mode);};function shouldConstruct$1(Component){var prototype=Component.prototype;return!!(prototype&&prototype.isReactComponent);}function isSimpleFunctionComponent(type){return typeof type==='function'&&!shouldConstruct$1(type)&&type.defaultProps===undefined;}function resolveLazyComponentTag(Component){if(typeof Component==='function'){return shouldConstruct$1(Component)?ClassComponent:FunctionComponent;}else if(Component!==undefined&&Component!==null){var $$typeof=Component.$$typeof;if($$typeof===REACT_FORWARD_REF_TYPE){return ForwardRef;}if($$typeof===REACT_MEMO_TYPE){return MemoComponent;}}return IndeterminateComponent;}// This is used to create an alternate fiber to do work on.
function createWorkInProgress(current,pendingProps){var workInProgress=current.alternate;if(workInProgress===null){// We use a double buffering pooling technique because we know that we'll
// only ever need at most two versions of a tree. We pool the "other" unused
// node that we're free to reuse. This is lazily created to avoid allocating
// extra objects for things that are never updated. It also allow us to
// reclaim the extra memory if needed.
workInProgress=createFiber(current.tag,pendingProps,current.key,current.mode);workInProgress.elementType=current.elementType;workInProgress.type=current.type;workInProgress.stateNode=current.stateNode;{// DEV-only fields
workInProgress._debugSource=current._debugSource;workInProgress._debugOwner=current._debugOwner;workInProgress._debugHookTypes=current._debugHookTypes;}workInProgress.alternate=current;current.alternate=workInProgress;}else{workInProgress.pendingProps=pendingProps;// Needed because Blocks store data on type.
workInProgress.type=current.type;// We already have an alternate.
// Reset the effect tag.
workInProgress.flags=NoFlags;// The effects are no longer valid.
workInProgress.subtreeFlags=NoFlags;workInProgress.deletions=null;{// We intentionally reset, rather than copy, actualDuration & actualStartTime.
// This prevents time from endlessly accumulating in new commits.
// This has the downside of resetting values for different priority renders,
// But works for yielding (the common case) and should support resuming.
workInProgress.actualDuration=0;workInProgress.actualStartTime=-1;}}// Reset all effects except static ones.
// Static effects are not specific to a render.
workInProgress.flags=current.flags&StaticMask;workInProgress.childLanes=current.childLanes;workInProgress.lanes=current.lanes;workInProgress.child=current.child;workInProgress.memoizedProps=current.memoizedProps;workInProgress.memoizedState=current.memoizedState;workInProgress.updateQueue=current.updateQueue;// Clone the dependencies object. This is mutated during the render phase, so
// it cannot be shared with the current fiber.
var currentDependencies=current.dependencies;workInProgress.dependencies=currentDependencies===null?null:{lanes:currentDependencies.lanes,firstContext:currentDependencies.firstContext};// These will be overridden during the parent's reconciliation
workInProgress.sibling=current.sibling;workInProgress.index=current.index;workInProgress.ref=current.ref;{workInProgress.selfBaseDuration=current.selfBaseDuration;workInProgress.treeBaseDuration=current.treeBaseDuration;}{workInProgress._debugNeedsRemount=current._debugNeedsRemount;switch(workInProgress.tag){case IndeterminateComponent:case FunctionComponent:case SimpleMemoComponent:workInProgress.type=resolveFunctionForHotReloading(current.type);break;case ClassComponent:workInProgress.type=resolveClassForHotReloading(current.type);break;case ForwardRef:workInProgress.type=resolveForwardRefForHotReloading(current.type);break;}}return workInProgress;}// Used to reuse a Fiber for a second pass.
function resetWorkInProgress(workInProgress,renderLanes){// This resets the Fiber to what createFiber or createWorkInProgress would
// have set the values to before during the first pass. Ideally this wouldn't
// be necessary but unfortunately many code paths reads from the workInProgress
// when they should be reading from current and writing to workInProgress.
// We assume pendingProps, index, key, ref, return are still untouched to
// avoid doing another reconciliation.
// Reset the effect flags but keep any Placement tags, since that's something
// that child fiber is setting, not the reconciliation.
workInProgress.flags&=StaticMask|Placement;// The effects are no longer valid.
var current=workInProgress.alternate;if(current===null){// Reset to createFiber's initial values.
workInProgress.childLanes=NoLanes;workInProgress.lanes=renderLanes;workInProgress.child=null;workInProgress.subtreeFlags=NoFlags;workInProgress.memoizedProps=null;workInProgress.memoizedState=null;workInProgress.updateQueue=null;workInProgress.dependencies=null;workInProgress.stateNode=null;{// Note: We don't reset the actualTime counts. It's useful to accumulate
// actual time across multiple render passes.
workInProgress.selfBaseDuration=0;workInProgress.treeBaseDuration=0;}}else{// Reset to the cloned values that createWorkInProgress would've.
workInProgress.childLanes=current.childLanes;workInProgress.lanes=current.lanes;workInProgress.child=current.child;workInProgress.subtreeFlags=NoFlags;workInProgress.deletions=null;workInProgress.memoizedProps=current.memoizedProps;workInProgress.memoizedState=current.memoizedState;workInProgress.updateQueue=current.updateQueue;// Needed because Blocks store data on type.
workInProgress.type=current.type;// Clone the dependencies object. This is mutated during the render phase, so
// it cannot be shared with the current fiber.
var currentDependencies=current.dependencies;workInProgress.dependencies=currentDependencies===null?null:{lanes:currentDependencies.lanes,firstContext:currentDependencies.firstContext};{// Note: We don't reset the actualTime counts. It's useful to accumulate
// actual time across multiple render passes.
workInProgress.selfBaseDuration=current.selfBaseDuration;workInProgress.treeBaseDuration=current.treeBaseDuration;}}return workInProgress;}function createHostRootFiber(tag,isStrictMode,concurrentUpdatesByDefaultOverride){var mode;if(tag===ConcurrentRoot){mode=ConcurrentMode;if(isStrictMode===true){mode|=StrictLegacyMode;{mode|=StrictEffectsMode;}}}else{mode=NoMode;}if(isDevToolsPresent){// Always collect profile timings when DevTools are present.
// This enables DevTools to start capturing timing at any point–
// Without some nodes in the tree having empty base times.
mode|=ProfileMode;}return createFiber(HostRoot,null,null,mode);}function createFiberFromTypeAndProps(type,// React$ElementType
key,pendingProps,owner,mode,lanes){var fiberTag=IndeterminateComponent;// The resolved type is set if we know what the final type will be. I.e. it's not lazy.
var resolvedType=type;if(typeof type==='function'){if(shouldConstruct$1(type)){fiberTag=ClassComponent;{resolvedType=resolveClassForHotReloading(resolvedType);}}else{{resolvedType=resolveFunctionForHotReloading(resolvedType);}}}else if(typeof type==='string'){fiberTag=HostComponent;}else{getTag:switch(type){case REACT_FRAGMENT_TYPE:return createFiberFromFragment(pendingProps.children,mode,lanes,key);case REACT_STRICT_MODE_TYPE:fiberTag=Mode;mode|=StrictLegacyMode;if((mode&ConcurrentMode)!==NoMode){// Strict effects should never run on legacy roots
mode|=StrictEffectsMode;}break;case REACT_PROFILER_TYPE:return createFiberFromProfiler(pendingProps,mode,lanes,key);case REACT_SUSPENSE_TYPE:return createFiberFromSuspense(pendingProps,mode,lanes,key);case REACT_SUSPENSE_LIST_TYPE:return createFiberFromSuspenseList(pendingProps,mode,lanes,key);case REACT_OFFSCREEN_TYPE:return createFiberFromOffscreen(pendingProps,mode,lanes,key);case REACT_LEGACY_HIDDEN_TYPE:// eslint-disable-next-line no-fallthrough
case REACT_SCOPE_TYPE:// eslint-disable-next-line no-fallthrough
case REACT_CACHE_TYPE:// eslint-disable-next-line no-fallthrough
case REACT_TRACING_MARKER_TYPE:// eslint-disable-next-line no-fallthrough
case REACT_DEBUG_TRACING_MODE_TYPE:// eslint-disable-next-line no-fallthrough
default:{if(_typeof(type)==='object'&&type!==null){switch(type.$$typeof){case REACT_PROVIDER_TYPE:fiberTag=ContextProvider;break getTag;case REACT_CONTEXT_TYPE:// This is a consumer
fiberTag=ContextConsumer;break getTag;case REACT_FORWARD_REF_TYPE:fiberTag=ForwardRef;{resolvedType=resolveForwardRefForHotReloading(resolvedType);}break getTag;case REACT_MEMO_TYPE:fiberTag=MemoComponent;break getTag;case REACT_LAZY_TYPE:fiberTag=LazyComponent;resolvedType=null;break getTag;}}var info='';{if(type===undefined||_typeof(type)==='object'&&type!==null&&Object.keys(type).length===0){info+=' You likely forgot to export your component from the file '+"it's defined in, or you might have mixed up default and "+'named imports.';}var ownerName=owner?getComponentNameFromFiber(owner):null;if(ownerName){info+='\n\nCheck the render method of `'+ownerName+'`.';}}throw new Error('Element type is invalid: expected a string (for built-in '+'components) or a class/function (for composite components) '+("but got: "+(type==null?type:_typeof(type))+"."+info));}}}var fiber=createFiber(fiberTag,pendingProps,key,mode);fiber.elementType=type;fiber.type=resolvedType;fiber.lanes=lanes;{fiber._debugOwner=owner;}return fiber;}function createFiberFromElement(element,mode,lanes){var owner=null;{owner=element._owner;}var type=element.type;var key=element.key;var pendingProps=element.props;var fiber=createFiberFromTypeAndProps(type,key,pendingProps,owner,mode,lanes);{fiber._debugSource=element._source;fiber._debugOwner=element._owner;}return fiber;}function createFiberFromFragment(elements,mode,lanes,key){var fiber=createFiber(Fragment,elements,key,mode);fiber.lanes=lanes;return fiber;}function createFiberFromProfiler(pendingProps,mode,lanes,key){{if(typeof pendingProps.id!=='string'){error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',_typeof(pendingProps.id));}}var fiber=createFiber(Profiler,pendingProps,key,mode|ProfileMode);fiber.elementType=REACT_PROFILER_TYPE;fiber.lanes=lanes;{fiber.stateNode={effectDuration:0,passiveEffectDuration:0};}return fiber;}function createFiberFromSuspense(pendingProps,mode,lanes,key){var fiber=createFiber(SuspenseComponent,pendingProps,key,mode);fiber.elementType=REACT_SUSPENSE_TYPE;fiber.lanes=lanes;return fiber;}function createFiberFromSuspenseList(pendingProps,mode,lanes,key){var fiber=createFiber(SuspenseListComponent,pendingProps,key,mode);fiber.elementType=REACT_SUSPENSE_LIST_TYPE;fiber.lanes=lanes;return fiber;}function createFiberFromOffscreen(pendingProps,mode,lanes,key){var fiber=createFiber(OffscreenComponent,pendingProps,key,mode);fiber.elementType=REACT_OFFSCREEN_TYPE;fiber.lanes=lanes;var primaryChildInstance={isHidden:false};fiber.stateNode=primaryChildInstance;return fiber;}function createFiberFromText(content,mode,lanes){var fiber=createFiber(HostText,content,null,mode);fiber.lanes=lanes;return fiber;}function createFiberFromHostInstanceForDeletion(){var fiber=createFiber(HostComponent,null,null,NoMode);fiber.elementType='DELETED';return fiber;}function createFiberFromDehydratedFragment(dehydratedNode){var fiber=createFiber(DehydratedFragment,null,null,NoMode);fiber.stateNode=dehydratedNode;return fiber;}function createFiberFromPortal(portal,mode,lanes){var pendingProps=portal.children!==null?portal.children:[];var fiber=createFiber(HostPortal,pendingProps,portal.key,mode);fiber.lanes=lanes;fiber.stateNode={containerInfo:portal.containerInfo,pendingChildren:null,// Used by persistent updates
implementation:portal.implementation};return fiber;}// Used for stashing WIP properties to replay failed work in DEV.
function assignFiberPropertiesInDEV(target,source){if(target===null){// This Fiber's initial properties will always be overwritten.
// We only use a Fiber to ensure the same hidden class so DEV isn't slow.
target=createFiber(IndeterminateComponent,null,null,NoMode);}// This is intentionally written as a list of all properties.
// We tried to use Object.assign() instead but this is called in
// the hottest path, and Object.assign() was too slow:
// https://github.com/facebook/react/issues/12502
// This code is DEV-only so size is not a concern.
target.tag=source.tag;target.key=source.key;target.elementType=source.elementType;target.type=source.type;target.stateNode=source.stateNode;target["return"]=source["return"];target.child=source.child;target.sibling=source.sibling;target.index=source.index;target.ref=source.ref;target.pendingProps=source.pendingProps;target.memoizedProps=source.memoizedProps;target.updateQueue=source.updateQueue;target.memoizedState=source.memoizedState;target.dependencies=source.dependencies;target.mode=source.mode;target.flags=source.flags;target.subtreeFlags=source.subtreeFlags;target.deletions=source.deletions;target.lanes=source.lanes;target.childLanes=source.childLanes;target.alternate=source.alternate;{target.actualDuration=source.actualDuration;target.actualStartTime=source.actualStartTime;target.selfBaseDuration=source.selfBaseDuration;target.treeBaseDuration=source.treeBaseDuration;}target._debugSource=source._debugSource;target._debugOwner=source._debugOwner;target._debugNeedsRemount=source._debugNeedsRemount;target._debugHookTypes=source._debugHookTypes;return target;}function FiberRootNode(containerInfo,tag,hydrate,identifierPrefix,onRecoverableError){this.tag=tag;this.containerInfo=containerInfo;this.pendingChildren=null;this.current=null;this.pingCache=null;this.finishedWork=null;this.timeoutHandle=noTimeout;this.context=null;this.pendingContext=null;this.callbackNode=null;this.callbackPriority=NoLane;this.eventTimes=createLaneMap(NoLanes);this.expirationTimes=createLaneMap(NoTimestamp);this.pendingLanes=NoLanes;this.suspendedLanes=NoLanes;this.pingedLanes=NoLanes;this.expiredLanes=NoLanes;this.mutableReadLanes=NoLanes;this.finishedLanes=NoLanes;this.entangledLanes=NoLanes;this.entanglements=createLaneMap(NoLanes);this.identifierPrefix=identifierPrefix;this.onRecoverableError=onRecoverableError;{this.mutableSourceEagerHydrationData=null;}{this.effectDuration=0;this.passiveEffectDuration=0;}{this.memoizedUpdaters=new Set();var pendingUpdatersLaneMap=this.pendingUpdatersLaneMap=[];for(var _i=0;_i<TotalLanes;_i++){pendingUpdatersLaneMap.push(new Set());}}{switch(tag){case ConcurrentRoot:this._debugRootType=hydrate?'hydrateRoot()':'createRoot()';break;case LegacyRoot:this._debugRootType=hydrate?'hydrate()':'render()';break;}}}function createFiberRoot(containerInfo,tag,hydrate,initialChildren,hydrationCallbacks,isStrictMode,concurrentUpdatesByDefaultOverride,// TODO: We have several of these arguments that are conceptually part of the
// host config, but because they are passed in at runtime, we have to thread
// them through the root constructor. Perhaps we should put them all into a
// single type, like a DynamicHostConfig that is defined by the renderer.
identifierPrefix,onRecoverableError,transitionCallbacks){var root=new FiberRootNode(containerInfo,tag,hydrate,identifierPrefix,onRecoverableError);// stateNode is any.
var uninitializedFiber=createHostRootFiber(tag,isStrictMode);root.current=uninitializedFiber;uninitializedFiber.stateNode=root;{var _initialState={element:initialChildren,isDehydrated:hydrate,cache:null,// not enabled yet
transitions:null,pendingSuspenseBoundaries:null};uninitializedFiber.memoizedState=_initialState;}initializeUpdateQueue(uninitializedFiber);return root;}var ReactVersion='18.3.1';function createPortal(children,containerInfo,// TODO: figure out the API for cross-renderer implementation.
implementation){var key=arguments.length>3&&arguments[3]!==undefined?arguments[3]:null;{checkKeyStringCoercion(key);}return{// This tag allow us to uniquely identify this as a React Portal
$$typeof:REACT_PORTAL_TYPE,key:key==null?null:''+key,children:children,containerInfo:containerInfo,implementation:implementation};}var didWarnAboutNestedUpdates;var didWarnAboutFindNodeInStrictMode;{didWarnAboutNestedUpdates=false;didWarnAboutFindNodeInStrictMode={};}function getContextForSubtree(parentComponent){if(!parentComponent){return emptyContextObject;}var fiber=get(parentComponent);var parentContext=findCurrentUnmaskedContext(fiber);if(fiber.tag===ClassComponent){var Component=fiber.type;if(isContextProvider(Component)){return processChildContext(fiber,Component,parentContext);}}return parentContext;}function findHostInstanceWithWarning(component,methodName){{var fiber=get(component);if(fiber===undefined){if(typeof component.render==='function'){throw new Error('Unable to find node on an unmounted component.');}else{var keys=Object.keys(component).join(',');throw new Error("Argument appears to not be a ReactComponent. Keys: "+keys);}}var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}if(hostFiber.mode&StrictLegacyMode){var componentName=getComponentNameFromFiber(fiber)||'Component';if(!didWarnAboutFindNodeInStrictMode[componentName]){didWarnAboutFindNodeInStrictMode[componentName]=true;var previousFiber=current;try{setCurrentFiber(hostFiber);if(fiber.mode&StrictLegacyMode){error('%s is deprecated in StrictMode. '+'%s was passed an instance of %s which is inside StrictMode. '+'Instead, add a ref directly to the element you want to reference. '+'Learn more about using refs safely here: '+'https://reactjs.org/link/strict-mode-find-node',methodName,methodName,componentName);}else{error('%s is deprecated in StrictMode. '+'%s was passed an instance of %s which renders StrictMode children. '+'Instead, add a ref directly to the element you want to reference. '+'Learn more about using refs safely here: '+'https://reactjs.org/link/strict-mode-find-node',methodName,methodName,componentName);}}finally{// Ideally this should reset to previous but this shouldn't be called in
// render and there's another warning for that anyway.
if(previousFiber){setCurrentFiber(previousFiber);}else{resetCurrentFiber();}}}}return hostFiber.stateNode;}}function createContainer(containerInfo,tag,hydrationCallbacks,isStrictMode,concurrentUpdatesByDefaultOverride,identifierPrefix,onRecoverableError,transitionCallbacks){var hydrate=false;var initialChildren=null;return createFiberRoot(containerInfo,tag,hydrate,initialChildren,hydrationCallbacks,isStrictMode,concurrentUpdatesByDefaultOverride,identifierPrefix,onRecoverableError);}function createHydrationContainer(initialChildren,// TODO: Remove `callback` when we delete legacy mode.
callback,containerInfo,tag,hydrationCallbacks,isStrictMode,concurrentUpdatesByDefaultOverride,identifierPrefix,onRecoverableError,transitionCallbacks){var hydrate=true;var root=createFiberRoot(containerInfo,tag,hydrate,initialChildren,hydrationCallbacks,isStrictMode,concurrentUpdatesByDefaultOverride,identifierPrefix,onRecoverableError);// TODO: Move this to FiberRoot constructor
root.context=getContextForSubtree(null);// Schedule the initial render. In a hydration root, this is different from
// a regular update because the initial render must match was was rendered
// on the server.
// NOTE: This update intentionally doesn't have a payload. We're only using
// the update to schedule work on the root fiber (and, for legacy roots, to
// enqueue the callback if one is provided).
var current=root.current;var eventTime=requestEventTime();var lane=requestUpdateLane(current);var update=createUpdate(eventTime,lane);update.callback=callback!==undefined&&callback!==null?callback:null;enqueueUpdate(current,update,lane);scheduleInitialHydrationOnRoot(root,lane,eventTime);return root;}function updateContainer(element,container,parentComponent,callback){{onScheduleRoot(container,element);}var current$1=container.current;var eventTime=requestEventTime();var lane=requestUpdateLane(current$1);{markRenderScheduled(lane);}var context=getContextForSubtree(parentComponent);if(container.context===null){container.context=context;}else{container.pendingContext=context;}{if(isRendering&&current!==null&&!didWarnAboutNestedUpdates){didWarnAboutNestedUpdates=true;error('Render methods should be a pure function of props and state; '+'triggering nested component updates from render is not allowed. '+'If necessary, trigger nested updates in componentDidUpdate.\n\n'+'Check the render method of %s.',getComponentNameFromFiber(current)||'Unknown');}}var update=createUpdate(eventTime,lane);// Caution: React DevTools currently depends on this property
// being called "element".
update.payload={element:element};callback=callback===undefined?null:callback;if(callback!==null){{if(typeof callback!=='function'){error('render(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callback);}}update.callback=callback;}var root=enqueueUpdate(current$1,update,lane);if(root!==null){scheduleUpdateOnFiber(root,current$1,lane,eventTime);entangleTransitions(root,current$1,lane);}return lane;}function getPublicRootInstance(container){var containerFiber=container.current;if(!containerFiber.child){return null;}switch(containerFiber.child.tag){case HostComponent:return getPublicInstance(containerFiber.child.stateNode);default:return containerFiber.child.stateNode;}}function attemptSynchronousHydration$1(fiber){switch(fiber.tag){case HostRoot:{var root=fiber.stateNode;if(isRootDehydrated(root)){// Flush the first scheduled "update".
var lanes=getHighestPriorityPendingLanes(root);flushRoot(root,lanes);}break;}case SuspenseComponent:{flushSync(function(){var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){var eventTime=requestEventTime();scheduleUpdateOnFiber(root,fiber,SyncLane,eventTime);}});// If we're still blocked after this, we need to increase
// the priority of any promises resolving within this
// boundary so that they next attempt also has higher pri.
var retryLane=SyncLane;markRetryLaneIfNotHydrated(fiber,retryLane);break;}}}function markRetryLaneImpl(fiber,retryLane){var suspenseState=fiber.memoizedState;if(suspenseState!==null&&suspenseState.dehydrated!==null){suspenseState.retryLane=higherPriorityLane(suspenseState.retryLane,retryLane);}}// Increases the priority of thenables when they resolve within this boundary.
function markRetryLaneIfNotHydrated(fiber,retryLane){markRetryLaneImpl(fiber,retryLane);var alternate=fiber.alternate;if(alternate){markRetryLaneImpl(alternate,retryLane);}}function attemptContinuousHydration$1(fiber){if(fiber.tag!==SuspenseComponent){// We ignore HostRoots here because we can't increase
// their priority and they should not suspend on I/O,
// since you have to wrap anything that might suspend in
// Suspense.
return;}var lane=SelectiveHydrationLane;var root=enqueueConcurrentRenderForLane(fiber,lane);if(root!==null){var eventTime=requestEventTime();scheduleUpdateOnFiber(root,fiber,lane,eventTime);}markRetryLaneIfNotHydrated(fiber,lane);}function attemptHydrationAtCurrentPriority$1(fiber){if(fiber.tag!==SuspenseComponent){// We ignore HostRoots here because we can't increase
// their priority other than synchronously flush it.
return;}var lane=requestUpdateLane(fiber);var root=enqueueConcurrentRenderForLane(fiber,lane);if(root!==null){var eventTime=requestEventTime();scheduleUpdateOnFiber(root,fiber,lane,eventTime);}markRetryLaneIfNotHydrated(fiber,lane);}function findHostInstanceWithNoPortals(fiber){var hostFiber=findCurrentHostFiberWithNoPortals(fiber);if(hostFiber===null){return null;}return hostFiber.stateNode;}var shouldErrorImpl=function shouldErrorImpl(fiber){return null;};function shouldError(fiber){return shouldErrorImpl(fiber);}var shouldSuspendImpl=function shouldSuspendImpl(fiber){return false;};function shouldSuspend(fiber){return shouldSuspendImpl(fiber);}var overrideHookState=null;var overrideHookStateDeletePath=null;var overrideHookStateRenamePath=null;var overrideProps=null;var overridePropsDeletePath=null;var overridePropsRenamePath=null;var scheduleUpdate=null;var setErrorHandler=null;var setSuspenseHandler=null;{var _copyWithDeleteImpl=function copyWithDeleteImpl(obj,path,index){var key=path[index];var updated=isArray(obj)?obj.slice():assign({},obj);if(index+1===path.length){if(isArray(updated)){updated.splice(key,1);}else{delete updated[key];}return updated;}// $FlowFixMe number or string is fine here
updated[key]=_copyWithDeleteImpl(obj[key],path,index+1);return updated;};var copyWithDelete=function copyWithDelete(obj,path){return _copyWithDeleteImpl(obj,path,0);};var _copyWithRenameImpl=function copyWithRenameImpl(obj,oldPath,newPath,index){var oldKey=oldPath[index];var updated=isArray(obj)?obj.slice():assign({},obj);if(index+1===oldPath.length){var newKey=newPath[index];// $FlowFixMe number or string is fine here
updated[newKey]=updated[oldKey];if(isArray(updated)){updated.splice(oldKey,1);}else{delete updated[oldKey];}}else{// $FlowFixMe number or string is fine here
updated[oldKey]=_copyWithRenameImpl(// $FlowFixMe number or string is fine here
obj[oldKey],oldPath,newPath,index+1);}return updated;};var copyWithRename=function copyWithRename(obj,oldPath,newPath){if(oldPath.length!==newPath.length){warn('copyWithRename() expects paths of the same length');return;}else{for(var i=0;i<newPath.length-1;i++){if(oldPath[i]!==newPath[i]){warn('copyWithRename() expects paths to be the same except for the deepest key');return;}}}return _copyWithRenameImpl(obj,oldPath,newPath,0);};var _copyWithSetImpl=function copyWithSetImpl(obj,path,index,value){if(index>=path.length){return value;}var key=path[index];var updated=isArray(obj)?obj.slice():assign({},obj);// $FlowFixMe number or string is fine here
updated[key]=_copyWithSetImpl(obj[key],path,index+1,value);return updated;};var copyWithSet=function copyWithSet(obj,path,value){return _copyWithSetImpl(obj,path,0,value);};var findHook=function findHook(fiber,id){// For now, the "id" of stateful hooks is just the stateful hook index.
// This may change in the future with e.g. nested hooks.
var currentHook=fiber.memoizedState;while(currentHook!==null&&id>0){currentHook=currentHook.next;id--;}return currentHook;};// Support DevTools editable values for useState and useReducer.
overrideHookState=function overrideHookState(fiber,id,path,value){var hook=findHook(fiber,id);if(hook!==null){var newState=copyWithSet(hook.memoizedState,path,value);hook.memoizedState=newState;hook.baseState=newState;// We aren't actually adding an update to the queue,
// because there is no update we can add for useReducer hooks that won't trigger an error.
// (There's no appropriate action type for DevTools overrides.)
// As a result though, React will see the scheduled update as a noop and bailout.
// Shallow cloning props works as a workaround for now to bypass the bailout check.
fiber.memoizedProps=assign({},fiber.memoizedProps);var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}}};overrideHookStateDeletePath=function overrideHookStateDeletePath(fiber,id,path){var hook=findHook(fiber,id);if(hook!==null){var newState=copyWithDelete(hook.memoizedState,path);hook.memoizedState=newState;hook.baseState=newState;// We aren't actually adding an update to the queue,
// because there is no update we can add for useReducer hooks that won't trigger an error.
// (There's no appropriate action type for DevTools overrides.)
// As a result though, React will see the scheduled update as a noop and bailout.
// Shallow cloning props works as a workaround for now to bypass the bailout check.
fiber.memoizedProps=assign({},fiber.memoizedProps);var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}}};overrideHookStateRenamePath=function overrideHookStateRenamePath(fiber,id,oldPath,newPath){var hook=findHook(fiber,id);if(hook!==null){var newState=copyWithRename(hook.memoizedState,oldPath,newPath);hook.memoizedState=newState;hook.baseState=newState;// We aren't actually adding an update to the queue,
// because there is no update we can add for useReducer hooks that won't trigger an error.
// (There's no appropriate action type for DevTools overrides.)
// As a result though, React will see the scheduled update as a noop and bailout.
// Shallow cloning props works as a workaround for now to bypass the bailout check.
fiber.memoizedProps=assign({},fiber.memoizedProps);var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}}};// Support DevTools props for function components, forwardRef, memo, host components, etc.
overrideProps=function overrideProps(fiber,path,value){fiber.pendingProps=copyWithSet(fiber.memoizedProps,path,value);if(fiber.alternate){fiber.alternate.pendingProps=fiber.pendingProps;}var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}};overridePropsDeletePath=function overridePropsDeletePath(fiber,path){fiber.pendingProps=copyWithDelete(fiber.memoizedProps,path);if(fiber.alternate){fiber.alternate.pendingProps=fiber.pendingProps;}var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}};overridePropsRenamePath=function overridePropsRenamePath(fiber,oldPath,newPath){fiber.pendingProps=copyWithRename(fiber.memoizedProps,oldPath,newPath);if(fiber.alternate){fiber.alternate.pendingProps=fiber.pendingProps;}var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}};scheduleUpdate=function scheduleUpdate(fiber){var root=enqueueConcurrentRenderForLane(fiber,SyncLane);if(root!==null){scheduleUpdateOnFiber(root,fiber,SyncLane,NoTimestamp);}};setErrorHandler=function setErrorHandler(newShouldErrorImpl){shouldErrorImpl=newShouldErrorImpl;};setSuspenseHandler=function setSuspenseHandler(newShouldSuspendImpl){shouldSuspendImpl=newShouldSuspendImpl;};}function findHostInstanceByFiber(fiber){var hostFiber=findCurrentHostFiber(fiber);if(hostFiber===null){return null;}return hostFiber.stateNode;}function emptyFindFiberByHostInstance(instance){return null;}function getCurrentFiberForDevTools(){return current;}function injectIntoDevTools(devToolsConfig){var findFiberByHostInstance=devToolsConfig.findFiberByHostInstance;var ReactCurrentDispatcher=ReactSharedInternals.ReactCurrentDispatcher;return injectInternals({bundleType:devToolsConfig.bundleType,version:devToolsConfig.version,rendererPackageName:devToolsConfig.rendererPackageName,rendererConfig:devToolsConfig.rendererConfig,overrideHookState:overrideHookState,overrideHookStateDeletePath:overrideHookStateDeletePath,overrideHookStateRenamePath:overrideHookStateRenamePath,overrideProps:overrideProps,overridePropsDeletePath:overridePropsDeletePath,overridePropsRenamePath:overridePropsRenamePath,setErrorHandler:setErrorHandler,setSuspenseHandler:setSuspenseHandler,scheduleUpdate:scheduleUpdate,currentDispatcherRef:ReactCurrentDispatcher,findHostInstanceByFiber:findHostInstanceByFiber,findFiberByHostInstance:findFiberByHostInstance||emptyFindFiberByHostInstance,// React Refresh
findHostInstancesForRefresh:findHostInstancesForRefresh,scheduleRefresh:scheduleRefresh,scheduleRoot:scheduleRoot,setRefreshHandler:setRefreshHandler,// Enables DevTools to append owner stacks to error messages in DEV mode.
getCurrentFiber:getCurrentFiberForDevTools,// Enables DevTools to detect reconciler version rather than renderer version
// which may not match for third party renderers.
reconcilerVersion:ReactVersion});}/* global reportError */var defaultOnRecoverableError=typeof reportError==='function'?// In modern browsers, reportError will dispatch an error event,
// emulating an uncaught JavaScript error.
reportError:function(error){// In older browsers and test environments, fallback to console.error.
// eslint-disable-next-line react-internal/no-production-logging
console['error'](error);};function ReactDOMRoot(internalRoot){this._internalRoot=internalRoot;}ReactDOMHydrationRoot.prototype.render=ReactDOMRoot.prototype.render=function(children){var root=this._internalRoot;if(root===null){throw new Error('Cannot update an unmounted root.');}{if(typeof arguments[1]==='function'){error('render(...): does not support the second callback argument. '+'To execute a side effect after rendering, declare it in a component body with useEffect().');}else if(isValidContainer(arguments[1])){error('You passed a container to the second argument of root.render(...). '+"You don't need to pass it again since you already passed it to create the root.");}else if(typeof arguments[1]!=='undefined'){error('You passed a second argument to root.render(...) but it only accepts '+'one argument.');}var container=root.containerInfo;if(container.nodeType!==COMMENT_NODE){var hostInstance=findHostInstanceWithNoPortals(root.current);if(hostInstance){if(hostInstance.parentNode!==container){error('render(...): It looks like the React-rendered content of the '+'root container was removed without using React. This is not '+'supported and will cause errors. Instead, call '+"root.unmount() to empty a root's container.");}}}}updateContainer(children,root,null,null);};ReactDOMHydrationRoot.prototype.unmount=ReactDOMRoot.prototype.unmount=function(){{if(typeof arguments[0]==='function'){error('unmount(...): does not support a callback argument. '+'To execute a side effect after rendering, declare it in a component body with useEffect().');}}var root=this._internalRoot;if(root!==null){this._internalRoot=null;var container=root.containerInfo;{if(isAlreadyRendering()){error('Attempted to synchronously unmount a root while React was already '+'rendering. React cannot finish unmounting the root until the '+'current render has completed, which may lead to a race condition.');}}flushSync(function(){updateContainer(null,root,null,null);});unmarkContainerAsRoot(container);}};function createRoot(container,options){if(!isValidContainer(container)){throw new Error('createRoot(...): Target container is not a DOM element.');}warnIfReactDOMContainerInDEV(container);var isStrictMode=false;var concurrentUpdatesByDefaultOverride=false;var identifierPrefix='';var onRecoverableError=defaultOnRecoverableError;var transitionCallbacks=null;if(options!==null&&options!==undefined){{if(options.hydrate){warn('hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.');}else{if(_typeof(options)==='object'&&options!==null&&options.$$typeof===REACT_ELEMENT_TYPE){error('You passed a JSX element to createRoot. You probably meant to '+'call root.render instead. '+'Example usage:\n\n'+'  let root = createRoot(domContainer);\n'+'  root.render(<App />);');}}}if(options.unstable_strictMode===true){isStrictMode=true;}if(options.identifierPrefix!==undefined){identifierPrefix=options.identifierPrefix;}if(options.onRecoverableError!==undefined){onRecoverableError=options.onRecoverableError;}if(options.transitionCallbacks!==undefined){transitionCallbacks=options.transitionCallbacks;}}var root=createContainer(container,ConcurrentRoot,null,isStrictMode,concurrentUpdatesByDefaultOverride,identifierPrefix,onRecoverableError);markContainerAsRoot(root.current,container);var rootContainerElement=container.nodeType===COMMENT_NODE?container.parentNode:container;listenToAllSupportedEvents(rootContainerElement);return new ReactDOMRoot(root);}function ReactDOMHydrationRoot(internalRoot){this._internalRoot=internalRoot;}function scheduleHydration(target){if(target){queueExplicitHydrationTarget(target);}}ReactDOMHydrationRoot.prototype.unstable_scheduleHydration=scheduleHydration;function hydrateRoot(container,initialChildren,options){if(!isValidContainer(container)){throw new Error('hydrateRoot(...): Target container is not a DOM element.');}warnIfReactDOMContainerInDEV(container);{if(initialChildren===undefined){error('Must provide initial children as second argument to hydrateRoot. '+'Example usage: hydrateRoot(domContainer, <App />)');}}// For now we reuse the whole bag of options since they contain
// the hydration callbacks.
var hydrationCallbacks=options!=null?options:null;// TODO: Delete this option
var mutableSources=options!=null&&options.hydratedSources||null;var isStrictMode=false;var concurrentUpdatesByDefaultOverride=false;var identifierPrefix='';var onRecoverableError=defaultOnRecoverableError;if(options!==null&&options!==undefined){if(options.unstable_strictMode===true){isStrictMode=true;}if(options.identifierPrefix!==undefined){identifierPrefix=options.identifierPrefix;}if(options.onRecoverableError!==undefined){onRecoverableError=options.onRecoverableError;}}var root=createHydrationContainer(initialChildren,null,container,ConcurrentRoot,hydrationCallbacks,isStrictMode,concurrentUpdatesByDefaultOverride,identifierPrefix,onRecoverableError);markContainerAsRoot(root.current,container);// This can't be a comment node since hydration doesn't work on comment nodes anyway.
listenToAllSupportedEvents(container);if(mutableSources){for(var i=0;i<mutableSources.length;i++){var mutableSource=mutableSources[i];registerMutableSourceForHydration(root,mutableSource);}}return new ReactDOMHydrationRoot(root);}function isValidContainer(node){return!!(node&&(node.nodeType===ELEMENT_NODE||node.nodeType===DOCUMENT_NODE||node.nodeType===DOCUMENT_FRAGMENT_NODE||!disableCommentsAsDOMContainers));}// TODO: Remove this function which also includes comment nodes.
// We only use it in places that are currently more relaxed.
function isValidContainerLegacy(node){return!!(node&&(node.nodeType===ELEMENT_NODE||node.nodeType===DOCUMENT_NODE||node.nodeType===DOCUMENT_FRAGMENT_NODE||node.nodeType===COMMENT_NODE&&node.nodeValue===' react-mount-point-unstable '));}function warnIfReactDOMContainerInDEV(container){{if(container.nodeType===ELEMENT_NODE&&container.tagName&&container.tagName.toUpperCase()==='BODY'){error('createRoot(): Creating roots directly with document.body is '+'discouraged, since its children are often manipulated by third-party '+'scripts and browser extensions. This may lead to subtle '+'reconciliation issues. Try using a container element created '+'for your app.');}if(isContainerMarkedAsRoot(container)){if(container._reactRootContainer){error('You are calling ReactDOMClient.createRoot() on a container that was previously '+'passed to ReactDOM.render(). This is not supported.');}else{error('You are calling ReactDOMClient.createRoot() on a container that '+'has already been passed to createRoot() before. Instead, call '+'root.render() on the existing root instead if you want to update it.');}}}}var ReactCurrentOwner$3=ReactSharedInternals.ReactCurrentOwner;var topLevelUpdateWarnings;{topLevelUpdateWarnings=function topLevelUpdateWarnings(container){if(container._reactRootContainer&&container.nodeType!==COMMENT_NODE){var hostInstance=findHostInstanceWithNoPortals(container._reactRootContainer.current);if(hostInstance){if(hostInstance.parentNode!==container){error('render(...): It looks like the React-rendered content of this '+'container was removed without using React. This is not '+'supported and will cause errors. Instead, call '+'ReactDOM.unmountComponentAtNode to empty a container.');}}}var isRootRenderedBySomeReact=!!container._reactRootContainer;var rootEl=getReactRootElementInContainer(container);var hasNonRootReactChild=!!(rootEl&&getInstanceFromNode(rootEl));if(hasNonRootReactChild&&!isRootRenderedBySomeReact){error('render(...): Replacing React-rendered children with a new root '+'component. If you intended to update the children of this node, '+'you should instead have the existing children update their state '+'and render the new components instead of calling ReactDOM.render.');}if(container.nodeType===ELEMENT_NODE&&container.tagName&&container.tagName.toUpperCase()==='BODY'){error('render(): Rendering components directly into document.body is '+'discouraged, since its children are often manipulated by third-party '+'scripts and browser extensions. This may lead to subtle '+'reconciliation issues. Try rendering into a container element created '+'for your app.');}};}function getReactRootElementInContainer(container){if(!container){return null;}if(container.nodeType===DOCUMENT_NODE){return container.documentElement;}else{return container.firstChild;}}function noopOnRecoverableError(){// This isn't reachable because onRecoverableError isn't called in the
// legacy API.
}function legacyCreateRootFromDOMContainer(container,initialChildren,parentComponent,callback,isHydrationContainer){if(isHydrationContainer){if(typeof callback==='function'){var originalCallback=callback;callback=function callback(){var instance=getPublicRootInstance(root);originalCallback.call(instance);};}var root=createHydrationContainer(initialChildren,callback,container,LegacyRoot,null,// hydrationCallbacks
false,// isStrictMode
false,// concurrentUpdatesByDefaultOverride,
'',// identifierPrefix
noopOnRecoverableError);container._reactRootContainer=root;markContainerAsRoot(root.current,container);var rootContainerElement=container.nodeType===COMMENT_NODE?container.parentNode:container;listenToAllSupportedEvents(rootContainerElement);flushSync();return root;}else{// First clear any existing content.
var rootSibling;while(rootSibling=container.lastChild){container.removeChild(rootSibling);}if(typeof callback==='function'){var _originalCallback=callback;callback=function callback(){var instance=getPublicRootInstance(_root);_originalCallback.call(instance);};}var _root=createContainer(container,LegacyRoot,null,// hydrationCallbacks
false,// isStrictMode
false,// concurrentUpdatesByDefaultOverride,
'',// identifierPrefix
noopOnRecoverableError);container._reactRootContainer=_root;markContainerAsRoot(_root.current,container);var _rootContainerElement=container.nodeType===COMMENT_NODE?container.parentNode:container;listenToAllSupportedEvents(_rootContainerElement);// Initial mount should not be batched.
flushSync(function(){updateContainer(initialChildren,_root,parentComponent,callback);});return _root;}}function warnOnInvalidCallback$1(callback,callerName){{if(callback!==null&&typeof callback!=='function'){error('%s(...): Expected the last optional `callback` argument to be a '+'function. Instead received: %s.',callerName,callback);}}}function legacyRenderSubtreeIntoContainer(parentComponent,children,container,forceHydrate,callback){{topLevelUpdateWarnings(container);warnOnInvalidCallback$1(callback===undefined?null:callback,'render');}var maybeRoot=container._reactRootContainer;var root;if(!maybeRoot){// Initial mount
root=legacyCreateRootFromDOMContainer(container,children,parentComponent,callback,forceHydrate);}else{root=maybeRoot;if(typeof callback==='function'){var originalCallback=callback;callback=function callback(){var instance=getPublicRootInstance(root);originalCallback.call(instance);};}// Update
updateContainer(children,root,parentComponent,callback);}return getPublicRootInstance(root);}var didWarnAboutFindDOMNode=false;function findDOMNode(componentOrElement){{if(!didWarnAboutFindDOMNode){didWarnAboutFindDOMNode=true;error('findDOMNode is deprecated and will be removed in the next major '+'release. Instead, add a ref directly to the element you want '+'to reference. Learn more about using refs safely here: '+'https://reactjs.org/link/strict-mode-find-node');}var owner=ReactCurrentOwner$3.current;if(owner!==null&&owner.stateNode!==null){var warnedAboutRefsInRender=owner.stateNode._warnedAboutRefsInRender;if(!warnedAboutRefsInRender){error('%s is accessing findDOMNode inside its render(). '+'render() should be a pure function of props and state. It should '+'never access something that requires stale data from the previous '+'render, such as refs. Move this logic to componentDidMount and '+'componentDidUpdate instead.',getComponentNameFromType(owner.type)||'A component');}owner.stateNode._warnedAboutRefsInRender=true;}}if(componentOrElement==null){return null;}if(componentOrElement.nodeType===ELEMENT_NODE){return componentOrElement;}{return findHostInstanceWithWarning(componentOrElement,'findDOMNode');}}function hydrate(element,container,callback){{error('ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot '+'instead. Until you switch to the new API, your app will behave as '+"if it's running React 17. Learn "+'more: https://reactjs.org/link/switch-to-createroot');}if(!isValidContainerLegacy(container)){throw new Error('Target container is not a DOM element.');}{var isModernRoot=isContainerMarkedAsRoot(container)&&container._reactRootContainer===undefined;if(isModernRoot){error('You are calling ReactDOM.hydrate() on a container that was previously '+'passed to ReactDOMClient.createRoot(). This is not supported. '+'Did you mean to call hydrateRoot(container, element)?');}}// TODO: throw or warn if we couldn't hydrate?
return legacyRenderSubtreeIntoContainer(null,element,container,true,callback);}function render(element,container,callback){{error('ReactDOM.render is no longer supported in React 18. Use createRoot '+'instead. Until you switch to the new API, your app will behave as '+"if it's running React 17. Learn "+'more: https://reactjs.org/link/switch-to-createroot');}if(!isValidContainerLegacy(container)){throw new Error('Target container is not a DOM element.');}{var isModernRoot=isContainerMarkedAsRoot(container)&&container._reactRootContainer===undefined;if(isModernRoot){error('You are calling ReactDOM.render() on a container that was previously '+'passed to ReactDOMClient.createRoot(). This is not supported. '+'Did you mean to call root.render(element)?');}}return legacyRenderSubtreeIntoContainer(null,element,container,false,callback);}function unstable_renderSubtreeIntoContainer(parentComponent,element,containerNode,callback){{error('ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported '+'in React 18. Consider using a portal instead. Until you switch to '+"the createRoot API, your app will behave as if it's running React "+'17. Learn more: https://reactjs.org/link/switch-to-createroot');}if(!isValidContainerLegacy(containerNode)){throw new Error('Target container is not a DOM element.');}if(parentComponent==null||!has(parentComponent)){throw new Error('parentComponent must be a valid React Component');}return legacyRenderSubtreeIntoContainer(parentComponent,element,containerNode,false,callback);}var didWarnAboutUnmountComponentAtNode=false;function unmountComponentAtNode(container){{if(!didWarnAboutUnmountComponentAtNode){didWarnAboutUnmountComponentAtNode=true;error('unmountComponentAtNode is deprecated and will be removed in the '+'next major release. Switch to the createRoot API. Learn '+'more: https://reactjs.org/link/switch-to-createroot');}}if(!isValidContainerLegacy(container)){throw new Error('unmountComponentAtNode(...): Target container is not a DOM element.');}{var isModernRoot=isContainerMarkedAsRoot(container)&&container._reactRootContainer===undefined;if(isModernRoot){error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously '+'passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?');}}if(container._reactRootContainer){{var rootEl=getReactRootElementInContainer(container);var renderedByDifferentReact=rootEl&&!getInstanceFromNode(rootEl);if(renderedByDifferentReact){error("unmountComponentAtNode(): The node you're attempting to unmount "+'was rendered by another copy of React.');}}// Unmount should not be batched.
flushSync(function(){legacyRenderSubtreeIntoContainer(null,null,container,false,function(){// $FlowFixMe This should probably use `delete container._reactRootContainer`
container._reactRootContainer=null;unmarkContainerAsRoot(container);});});// If you call unmountComponentAtNode twice in quick succession, you'll
// get `true` twice. That's probably fine?
return true;}else{{var _rootEl=getReactRootElementInContainer(container);var hasNonRootReactChild=!!(_rootEl&&getInstanceFromNode(_rootEl));// Check if the container itself is a React root node.
var isContainerReactRoot=container.nodeType===ELEMENT_NODE&&isValidContainerLegacy(container.parentNode)&&!!container.parentNode._reactRootContainer;if(hasNonRootReactChild){error("unmountComponentAtNode(): The node you're attempting to unmount "+'was rendered by React and is not a top-level container. %s',isContainerReactRoot?'You may have accidentally passed in a React root node instead '+'of its container.':'Instead, have the parent component update its state and '+'rerender in order to remove this component.');}}return false;}}setAttemptSynchronousHydration(attemptSynchronousHydration$1);setAttemptContinuousHydration(attemptContinuousHydration$1);setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);setGetCurrentUpdatePriority(getCurrentUpdatePriority);setAttemptHydrationAtPriority(runWithPriority);{if(typeof Map!=='function'||// $FlowIssue Flow incorrectly thinks Map has no prototype
Map.prototype==null||typeof Map.prototype.forEach!=='function'||typeof Set!=='function'||// $FlowIssue Flow incorrectly thinks Set has no prototype
Set.prototype==null||typeof Set.prototype.clear!=='function'||typeof Set.prototype.forEach!=='function'){error('React depends on Map and Set built-in types. Make sure that you load a '+'polyfill in older browsers. https://reactjs.org/link/react-polyfills');}}setRestoreImplementation(restoreControlledState$3);setBatchingImplementation(batchedUpdates$1,discreteUpdates,flushSync);function createPortal$1(children,container){var key=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;if(!isValidContainer(container)){throw new Error('Target container is not a DOM element.');}// TODO: pass ReactDOM portal implementation as third argument
// $FlowFixMe The Flow type is opaque but there's no way to actually create it.
return createPortal(children,container,null,key);}function renderSubtreeIntoContainer(parentComponent,element,containerNode,callback){return unstable_renderSubtreeIntoContainer(parentComponent,element,containerNode,callback);}var Internals={usingClientEntryPoint:false,// Keep in sync with ReactTestUtils.js.
// This is an array for better minification.
Events:[getInstanceFromNode,getNodeFromInstance,getFiberCurrentPropsFromNode,enqueueStateRestore,restoreStateIfNeeded,batchedUpdates$1]};function createRoot$1(container,options){{if(!Internals.usingClientEntryPoint&&!false){error('You are importing createRoot from "react-dom" which is not supported. '+'You should instead import it from "react-dom/client".');}}return createRoot(container,options);}function hydrateRoot$1(container,initialChildren,options){{if(!Internals.usingClientEntryPoint&&!false){error('You are importing hydrateRoot from "react-dom" which is not supported. '+'You should instead import it from "react-dom/client".');}}return hydrateRoot(container,initialChildren,options);}// Overload the definition to the two valid signatures.
// Warning, this opts-out of checking the function body.
// eslint-disable-next-line no-redeclare
function flushSync$1(fn){{if(isAlreadyRendering()){error('flushSync was called from inside a lifecycle method. React cannot '+'flush when React is already rendering. Consider moving this call to '+'a scheduler task or micro task.');}}return flushSync(fn);}var foundDevTools=injectIntoDevTools({findFiberByHostInstance:getClosestInstanceFromNode,bundleType:1,version:ReactVersion,rendererPackageName:'react-dom'});{if(!foundDevTools&&canUseDOM&&window.top===window.self){// If we're in Chrome or Firefox, provide a download link if not installed.
if(navigator.userAgent.indexOf('Chrome')>-1&&navigator.userAgent.indexOf('Edge')===-1||navigator.userAgent.indexOf('Firefox')>-1){var protocol=window.location.protocol;// Don't warn in exotic cases like chrome-extension://.
if(/^(https?|file):$/.test(protocol)){// eslint-disable-next-line react-internal/no-production-logging
console.info('%cDownload the React DevTools '+'for a better development experience: '+'https://reactjs.org/link/react-devtools'+(protocol==='file:'?'\nYou might need to use a local HTTP server (instead of file://): '+'https://reactjs.org/link/react-devtools-faq':''),'font-weight:bold');}}}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Internals;exports.createPortal=createPortal$1;exports.createRoot=createRoot$1;exports.findDOMNode=findDOMNode;exports.flushSync=flushSync$1;exports.hydrate=hydrate;exports.hydrateRoot=hydrateRoot$1;exports.render=render;exports.unmountComponentAtNode=unmountComponentAtNode;exports.unstable_batchedUpdates=batchedUpdates$1;exports.unstable_renderSubtreeIntoContainer=renderSubtreeIntoContainer;exports.version=ReactVersion;/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__!=='undefined'&&typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop==='function'){__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());}})();}

/***/ }),

/***/ "./node_modules/react-dom/client.js":
/*!******************************************!*\
  !*** ./node_modules/react-dom/client.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



var m = __webpack_require__(/*! react-dom */ "./node_modules/react-dom/index.js");
if (false) {} else {
  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  exports.createRoot = function (c, o) {
    i.usingClientEntryPoint = true;
    try {
      return m.createRoot(c, o);
    } finally {
      i.usingClientEntryPoint = false;
    }
  };
  exports.hydrateRoot = function (c, h, o) {
    i.usingClientEntryPoint = true;
    try {
      return m.hydrateRoot(c, h, o);
    } finally {
      i.usingClientEntryPoint = false;
    }
  };
}

/***/ }),

/***/ "./node_modules/react-dom/index.js":
/*!*****************************************!*\
  !*** ./node_modules/react-dom/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }
  if (true) {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}
if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-dom.development.js */ "./node_modules/react-dom/cjs/react-dom.development.js");
}

/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-runtime.development.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-runtime.development.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/**
 * @license React
 * react-jsx-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
if (true) {
  (function () {
    'use strict';

    var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol["for"]('react.element');
    var REACT_PORTAL_TYPE = Symbol["for"]('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol["for"]('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol["for"]('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol["for"]('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol["for"]('react.provider');
    var REACT_CONTEXT_TYPE = Symbol["for"]('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol["for"]('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol["for"]('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol["for"]('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol["for"]('react.memo');
    var REACT_LAZY_TYPE = Symbol["for"]('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol["for"]('react.offscreen');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || _typeof(maybeIterable) !== 'object') {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }
      return null;
    }
    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function error(format) {
      {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning('error', format, args);
        }
      }
    }
    function printWarning(level, format, args) {
      // When changing this logic, you might want to also
      // update consoleWithStackDev.www.js as well.
      {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
          format += '%s';
          args = args.concat([stack]);
        } // eslint-disable-next-line react-internal/safe-string-coercion

        var argsWithFormat = args.map(function (item) {
          return String(item);
        }); // Careful: RN currently depends on this prefix

        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging

        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }

    // -----------------------------------------------------------------------------

    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing

    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.

    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

    var REACT_MODULE_REFERENCE;
    {
      REACT_MODULE_REFERENCE = Symbol["for"]('react.module.reference');
    }
    function isValidElementType(type) {
      if (typeof type === 'string' || typeof type === 'function') {
        return true;
      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
        return true;
      }
      if (_typeof(type) === 'object' && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE ||
        // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
          return true;
        }
      }
      return false;
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;
      if (displayName) {
        return displayName;
      }
      var functionName = innerType.displayName || innerType.name || '';
      return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber

    function getContextName(type) {
      return type.displayName || 'Context';
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.

    function getComponentNameFromType(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }
      {
        if (typeof type.tag === 'number') {
          error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }
      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }
      if (typeof type === 'string') {
        return type;
      }
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return 'Fragment';
        case REACT_PORTAL_TYPE:
          return 'Portal';
        case REACT_PROFILER_TYPE:
          return 'Profiler';
        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';
        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
        case REACT_SUSPENSE_LIST_TYPE:
          return 'SuspenseList';
      }
      if (_typeof(type) === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + '.Consumer';
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + '.Provider';
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');
          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;
            if (outerName !== null) {
              return outerName;
            }
            return getComponentNameFromType(type.type) || 'Memo';
          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }

          // eslint-disable-next-line no-fallthrough
        }
      }
      return null;
    }
    var assign = Object.assign;

    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          /* eslint-disable react-internal/no-production-logging */
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          }; // $FlowFixMe Flow thinks console is immutable.

          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
          /* eslint-enable react-internal/no-production-logging */
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          /* eslint-disable react-internal/no-production-logging */
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          }; // $FlowFixMe Flow thinks console is immutable.

          Object.defineProperties(console, {
            log: assign({}, props, {
              value: prevLog
            }),
            info: assign({}, props, {
              value: prevInfo
            }),
            warn: assign({}, props, {
              value: prevWarn
            }),
            error: assign({}, props, {
              value: prevError
            }),
            group: assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign({}, props, {
              value: prevGroupEnd
            })
          });
          /* eslint-enable react-internal/no-production-logging */
        }
        if (disabledDepth < 0) {
          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
        }
      }
    }
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === undefined) {
          // Extract the VM specific prefix used by each line.
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
          }
        } // We use the prefix to ensure our stacks line up with native stack frames.

        return '\n' + prefix + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      // If something asked for a stack inside a fake render, it should get ignored.
      if (!fn || reentry) {
        return '';
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

      Error.prepareStackTrace = undefined;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.

        ReactCurrentDispatcher.current = null;
        disableLogs();
      }
      try {
        // This should throw.
        if (construct) {
          // Something should be setting the props in the constructor.
          var Fake = function Fake() {
            throw Error();
          }; // $FlowFixMe

          Object.defineProperty(Fake.prototype, 'props', {
            set: function set() {
              // We use a throwing setter instead of frozen or non-writable props
              // because that won't throw in a non-strict mode function.
              throw Error();
            }
          });
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === 'object' && Reflect.construct) {
            // We construct a different control for this case to include any extra
            // frames added by the construct call.
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        // This is inlined manually because closure doesn't do it for us.
        if (sample && control && typeof sample.stack === 'string') {
          // This extracts the first frame from the sample that isn't also in the control.
          // Skipping one frame that we assume is the frame that calls the two.
          var sampleLines = sample.stack.split('\n');
          var controlLines = control.stack.split('\n');
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            // We expect at least one stack frame to be shared.
            // Typically this will be the root most one. However, stack frames may be
            // cut off due to maximum stack limits. In this case, one maybe cut off
            // earlier than the other. We assume that the sample is longer or the same
            // and there for cut off earlier. So we should find the root most frame in
            // the sample somewhere in the control.
            c--;
          }
          for (; s >= 1 && c >= 0; s--, c--) {
            // Next we find the first one that isn't the same which should be the
            // frame that called our sample function and the control.
            if (sampleLines[s] !== controlLines[c]) {
              // In V8, the first line is describing the message but other VMs don't.
              // If we're about to return the first line, and the control is also on the same
              // line, that's a pretty good indicator that our sample threw at same line as
              // the control. I.e. before we entered the sample frame. So we ignore this result.
              // This can happen if you passed a class to function component, or non-function.
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--; // We may still have similar intermediate frames from the construct call.
                  // The next one that isn't the same should be our match though.

                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                    var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                    // but we have a user-provided "displayName"
                    // splice it in to make the stack more readable.

                    if (fn.displayName && _frame.includes('<anonymous>')) {
                      _frame = _frame.replace('<anonymous>', fn.displayName);
                    }
                    {
                      if (typeof fn === 'function') {
                        componentFrameCache.set(fn, _frame);
                      }
                    } // Return the line we found.

                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      } // Fallback to just using the name if we couldn't make it throw.

      var name = fn ? fn.displayName || fn.name : '';
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
      {
        if (typeof fn === 'function') {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return '';
      }
      if (typeof type === 'function') {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === 'string') {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame('Suspense');
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame('SuspenseList');
      }
      if (_typeof(type) === 'object') {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            // Memo may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                // Lazy may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {}
            }
        }
      }
      return '';
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.

            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                // eslint-disable-next-line react-internal/prod-error-codes
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof(typeSpecs[typeSpecName]) + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                err.name = 'Invariant Violation';
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, _typeof(error$1));
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error('Failed %s type: %s', location, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

    function isArray(a) {
      return isArrayImpl(a);
    }

    /*
     * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
     * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
     *
     * The functions in this module will throw an easier-to-understand,
     * easier-to-debug exception with a clear errors message message explaining the
     * problem. (Instead of a confusing exception thrown inside the implementation
     * of the `value` object).
     */
    // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
      {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
      }
    } // $FlowFixMe only called in DEV, so void return is not possible.

    function willCoercionThrow(value) {
      {
        try {
          testStringCoercion(value);
          return false;
        } catch (e) {
          return true;
        }
      }
    }
    function testStringCoercion(value) {
      // If you ended up here by following an exception call stack, here's what's
      // happened: you supplied an object or symbol value to React (as a prop, key,
      // DOM attribute, CSS property, string ref, etc.) and when React tried to
      // coerce it to a string using `'' + value`, an exception was thrown.
      //
      // The most common types that will cause this exception are `Symbol` instances
      // and Temporal objects like `Temporal.Instant`. But any object that has a
      // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
      // exception. (Library authors do this to prevent users from using built-in
      // numeric operators like `+` or comparison operators like `>=` because custom
      // methods are needed to perform accurate arithmetic or comparison.)
      //
      // To fix the problem, coerce this object or symbol value to a string before
      // passing it to React. The most reliable way is usually `String(value)`.
      //
      // To find which value is throwing, check the browser or debugger console.
      // Before this exception was thrown, there should be `console.error` output
      // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
      // problem and how that type was used: key, atrribute, input value prop, etc.
      // In most cases, this console output also shows the component and its
      // ancestor components where the exception happened.
      //
      // eslint-disable-next-line react-internal/safe-string-coercion
      return '' + value;
    }
    function checkKeyStringCoercion(value) {
      {
        if (willCoercionThrow(value)) {
          error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));
          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
      }
    }
    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown;
    var specialPropRefWarningShown;
    var didWarnAboutStringRefs;
    {
      didWarnAboutStringRefs = {};
    }
    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }
    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }
    function warnIfStringRefCannotBeAutoConverted(config, self) {
      {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (!didWarnAboutStringRefs[componentName]) {
            error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config.ref);
            didWarnAboutStringRefs[componentName] = true;
          }
        }
      }
    }
    function defineKeyPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingKey = function warnAboutAccessingKey() {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
          }
        };
        warnAboutAccessingKey.isReactWarning = true;
        Object.defineProperty(props, 'key', {
          get: warnAboutAccessingKey,
          configurable: true
        });
      }
    }
    function defineRefPropWarningGetter(props, displayName) {
      {
        var warnAboutAccessingRef = function warnAboutAccessingRef() {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
          }
        };
        warnAboutAccessingRef.isReactWarning = true;
        Object.defineProperty(props, 'ref', {
          get: warnAboutAccessingRef,
          configurable: true
        });
      }
    }
    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, instanceof check
     * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} props
     * @param {*} key
     * @param {string|object} ref
     * @param {*} owner
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @internal
     */

    var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,
        // Record the component responsible for creating this element.
        _owner: owner
      };
      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.

        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }); // self and source are DEV only properties.

        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.

        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    /**
     * https://github.com/reactjs/rfcs/pull/107
     * @param {*} type
     * @param {object} props
     * @param {string} key
     */

    function jsxDEV(type, config, maybeKey, source, self) {
      {
        var propName; // Reserved names are extracted

        var props = {};
        var key = null;
        var ref = null; // Currently, key can be spread in as a prop. This causes a potential
        // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
        // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
        // but as an intermediary step, we will use jsxDEV for everything except
        // <div {...props} key="Hi" />, because we aren't currently able to tell if
        // key is explicitly declared to be undefined or not.

        if (maybeKey !== undefined) {
          {
            checkKeyStringCoercion(maybeKey);
          }
          key = '' + maybeKey;
        }
        if (hasValidKey(config)) {
          {
            checkKeyStringCoercion(config.key);
          }
          key = '' + config.key;
        }
        if (hasValidRef(config)) {
          ref = config.ref;
          warnIfStringRefCannotBeAutoConverted(config, self);
        } // Remaining properties are added to a new props object

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        } // Resolve default props

        if (type && type.defaultProps) {
          var defaultProps = type.defaultProps;
          for (propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName];
            }
          }
        }
        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }
          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
        return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
      }
    }
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement$1(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    var propTypesMisspellWarningShown;
    {
      propTypesMisspellWarningShown = false;
    }
    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */

    function isValidElement(object) {
      {
        return _typeof(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
      }
    }
    function getDeclarationErrorAddendum() {
      {
        if (ReactCurrentOwner$1.current) {
          var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
          if (name) {
            return '\n\nCheck the render method of `' + name + '`.';
          }
        }
        return '';
      }
    }
    function getSourceInfoErrorAddendum(source) {
      {
        if (source !== undefined) {
          var fileName = source.fileName.replace(/^.*[\\\/]/, '');
          var lineNumber = source.lineNumber;
          return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
        }
        return '';
      }
    }
    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */

    var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
      {
        var info = getDeclarationErrorAddendum();
        if (!info) {
          var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
          if (parentName) {
            info = "\n\nCheck the top-level render call using <" + parentName + ">.";
          }
        }
        return info;
      }
    }
    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */

    function validateExplicitKey(element, parentType) {
      {
        if (!element._store || element._store.validated || element.key != null) {
          return;
        }
        element._store.validated = true;
        var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }
        ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
        // property, it may be the creator of the child that's responsible for
        // assigning it a key.

        var childOwner = '';
        if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
          // Give the component that originally created this child.
          childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
        }
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
      }
    }
    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */

    function validateChildKeys(node, parentType) {
      {
        if (_typeof(node) !== 'object') {
          return;
        }
        if (isArray(node)) {
          for (var i = 0; i < node.length; i++) {
            var child = node[i];
            if (isValidElement(child)) {
              validateExplicitKey(child, parentType);
            }
          }
        } else if (isValidElement(node)) {
          // This element was passed in a valid location.
          if (node._store) {
            node._store.validated = true;
          }
        } else if (node) {
          var iteratorFn = getIteratorFn(node);
          if (typeof iteratorFn === 'function') {
            // Entry iterators used to provide implicit keys,
            // but now we print a separate warning for them later.
            if (iteratorFn !== node.entries) {
              var iterator = iteratorFn.call(node);
              var step;
              while (!(step = iterator.next()).done) {
                if (isValidElement(step.value)) {
                  validateExplicitKey(step.value, parentType);
                }
              }
            }
          }
        }
      }
    }
    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */

    function validatePropTypes(element) {
      {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') {
          return;
        }
        var propTypes;
        if (typeof type === 'function') {
          propTypes = type.propTypes;
        } else if (_typeof(type) === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||
        // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) {
          propTypes = type.propTypes;
        } else {
          return;
        }
        if (propTypes) {
          // Intentionally inside to avoid triggering lazy initializers:
          var name = getComponentNameFromType(type);
          checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

          var _name = getComponentNameFromType(type);
          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
        }
      }
    }
    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */

    function validateFragmentProps(fragment) {
      {
        var keys = Object.keys(fragment.props);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (key !== 'children' && key !== 'key') {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
            setCurrentlyValidatingElement$1(null);
            break;
          }
        }
        if (fragment.ref !== null) {
          setCurrentlyValidatingElement$1(fragment);
          error('Invalid attribute `ref` supplied to `React.Fragment`.');
          setCurrentlyValidatingElement$1(null);
        }
      }
    }
    var didWarnAboutKeySpread = {};
    function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
      {
        var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
        // succeed and there will likely be errors in render.

        if (!validType) {
          var info = '';
          if (type === undefined || _typeof(type) === 'object' && type !== null && Object.keys(type).length === 0) {
            info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
          }
          var sourceInfo = getSourceInfoErrorAddendum(source);
          if (sourceInfo) {
            info += sourceInfo;
          } else {
            info += getDeclarationErrorAddendum();
          }
          var typeString;
          if (type === null) {
            typeString = 'null';
          } else if (isArray(type)) {
            typeString = 'array';
          } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
            typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
            info = ' Did you accidentally export a JSX literal instead of a component?';
          } else {
            typeString = _typeof(type);
          }
          error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
        }
        var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
        // TODO: Drop this when these are no longer allowed as the type argument.

        if (element == null) {
          return element;
        } // Skip key warning if the type isn't valid since our key validation logic
        // doesn't expect a non-string/function type and can throw confusing errors.
        // We don't want exception behavior to differ between dev and prod.
        // (Rendering will throw with a helpful message and as soon as the type is
        // fixed, the key warnings will appear.)

        if (validType) {
          var children = props.children;
          if (children !== undefined) {
            if (isStaticChildren) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  validateChildKeys(children[i], type);
                }
                if (Object.freeze) {
                  Object.freeze(children);
                }
              } else {
                error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
              }
            } else {
              validateChildKeys(children, type);
            }
          }
        }
        {
          if (hasOwnProperty.call(props, 'key')) {
            var componentName = getComponentNameFromType(type);
            var keys = Object.keys(props).filter(function (k) {
              return k !== 'key';
            });
            var beforeExample = keys.length > 0 ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}' : '{key: someKey}';
            if (!didWarnAboutKeySpread[componentName + beforeExample]) {
              var afterExample = keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';
              error('A props object containing a "key" prop is being spread into JSX:\n' + '  let props = %s;\n' + '  <%s {...props} />\n' + 'React keys must be passed directly to JSX without using spread:\n' + '  let props = %s;\n' + '  <%s key={someKey} {...props} />', beforeExample, componentName, afterExample, componentName);
              didWarnAboutKeySpread[componentName + beforeExample] = true;
            }
          }
        }
        if (type === REACT_FRAGMENT_TYPE) {
          validateFragmentProps(element);
        } else {
          validatePropTypes(element);
        }
        return element;
      }
    } // These two functions exist to still get child warnings in dev
    // even with the prod transform. This means that jsxDEV is purely
    // opt-in behavior for better messages but that we won't stop
    // giving you warnings if you use production apis.

    function jsxWithValidationStatic(type, props, key) {
      {
        return jsxWithValidation(type, props, key, true);
      }
    }
    function jsxWithValidationDynamic(type, props, key) {
      {
        return jsxWithValidation(type, props, key, false);
      }
    }
    var jsx = jsxWithValidationDynamic; // we may want to special case jsxs internally to take advantage of static children.
    // for now we can ship identical prod functions

    var jsxs = jsxWithValidationStatic;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsx = jsx;
    exports.jsxs = jsxs;
  })();
}

/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
if (true) {
  (function () {
    'use strict';

    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === 'function') {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
    }
    var ReactVersion = '18.3.1';

    // ATTENTION
    // When adding new symbols to this file,
    // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
    // The Symbol used to tag the ReactElement-like types.
    var REACT_ELEMENT_TYPE = Symbol["for"]('react.element');
    var REACT_PORTAL_TYPE = Symbol["for"]('react.portal');
    var REACT_FRAGMENT_TYPE = Symbol["for"]('react.fragment');
    var REACT_STRICT_MODE_TYPE = Symbol["for"]('react.strict_mode');
    var REACT_PROFILER_TYPE = Symbol["for"]('react.profiler');
    var REACT_PROVIDER_TYPE = Symbol["for"]('react.provider');
    var REACT_CONTEXT_TYPE = Symbol["for"]('react.context');
    var REACT_FORWARD_REF_TYPE = Symbol["for"]('react.forward_ref');
    var REACT_SUSPENSE_TYPE = Symbol["for"]('react.suspense');
    var REACT_SUSPENSE_LIST_TYPE = Symbol["for"]('react.suspense_list');
    var REACT_MEMO_TYPE = Symbol["for"]('react.memo');
    var REACT_LAZY_TYPE = Symbol["for"]('react.lazy');
    var REACT_OFFSCREEN_TYPE = Symbol["for"]('react.offscreen');
    var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';
    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || _typeof(maybeIterable) !== 'object') {
        return null;
      }
      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }
      return null;
    }

    /**
     * Keeps track of the current dispatcher.
     */
    var ReactCurrentDispatcher = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };

    /**
     * Keeps track of the current batch's configuration such as how long an update
     * should suspend for if it needs to.
     */
    var ReactCurrentBatchConfig = {
      transition: null
    };
    var ReactCurrentActQueue = {
      current: null,
      // Used to reproduce behavior of `batchedUpdates` in legacy mode.
      isBatchingLegacy: false,
      didScheduleLegacyUpdate: false
    };

    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */
    var ReactCurrentOwner = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };
    var ReactDebugCurrentFrame = {};
    var currentExtraStackFrame = null;
    function setExtraStackFrame(stack) {
      {
        currentExtraStackFrame = stack;
      }
    }
    {
      ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
        {
          currentExtraStackFrame = stack;
        }
      }; // Stack implementation injected by the current renderer.

      ReactDebugCurrentFrame.getCurrentStack = null;
      ReactDebugCurrentFrame.getStackAddendum = function () {
        var stack = ''; // Add an extra top frame while an element is being validated

        if (currentExtraStackFrame) {
          stack += currentExtraStackFrame;
        } // Delegate to the injected renderer-specific implementation

        var impl = ReactDebugCurrentFrame.getCurrentStack;
        if (impl) {
          stack += impl() || '';
        }
        return stack;
      };
    }

    // -----------------------------------------------------------------------------

    var enableScopeAPI = false; // Experimental Create Event Handle API.
    var enableCacheElement = false;
    var enableTransitionTracing = false; // No known bugs, but needs performance testing

    var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber
    // stuff. Intended to enable React core members to more easily debug scheduling
    // issues in DEV builds.

    var enableDebugTracing = false; // Track which Fiber(s) schedule render work.

    var ReactSharedInternals = {
      ReactCurrentDispatcher: ReactCurrentDispatcher,
      ReactCurrentBatchConfig: ReactCurrentBatchConfig,
      ReactCurrentOwner: ReactCurrentOwner
    };
    {
      ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
      ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
    }

    // by calls to these methods by a Babel plugin.
    //
    // In PROD (or in packages without access to React internals),
    // they are left as they are instead.

    function warn(format) {
      {
        {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          printWarning('warn', format, args);
        }
      }
    }
    function error(format) {
      {
        {
          for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            args[_key2 - 1] = arguments[_key2];
          }
          printWarning('error', format, args);
        }
      }
    }
    function printWarning(level, format, args) {
      // When changing this logic, you might want to also
      // update consoleWithStackDev.www.js as well.
      {
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum();
        if (stack !== '') {
          format += '%s';
          args = args.concat([stack]);
        } // eslint-disable-next-line react-internal/safe-string-coercion

        var argsWithFormat = args.map(function (item) {
          return String(item);
        }); // Careful: RN currently depends on this prefix

        argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
        // breaks IE9: https://github.com/facebook/react/issues/13610
        // eslint-disable-next-line react-internal/no-production-logging

        Function.prototype.apply.call(console[level], console, argsWithFormat);
      }
    }
    var didWarnStateUpdateForUnmountedComponent = {};
    function warnNoop(publicInstance, callerName) {
      {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + "." + callerName;
        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
          return;
        }
        error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
      }
    }
    /**
     * This is the abstract API for an update queue.
     */

    var ReactNoopUpdateQueue = {
      /**
       * Checks whether or not this composite component is mounted.
       * @param {ReactClass} publicInstance The instance we want to test.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function isMounted(publicInstance) {
        return false;
      },
      /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldComponentUpdate`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {
        warnNoop(publicInstance, 'forceUpdate');
      },
      /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, 'replaceState');
      },
      /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} Name of the calling function in the public API.
       * @internal
       */
      enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, 'setState');
      }
    };
    var assign = Object.assign;
    var emptyObject = {};
    {
      Object.freeze(emptyObject);
    }
    /**
     * Base class helpers for the updating state of a component.
     */

    function Component(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
      // renderer.

      this.updater = updater || ReactNoopUpdateQueue;
    }
    Component.prototype.isReactComponent = {};
    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */

    Component.prototype.setState = function (partialState, callback) {
      if (_typeof(partialState) !== 'object' && typeof partialState !== 'function' && partialState != null) {
        throw new Error('setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');
      }
      this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */

    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */

    {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };
      var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function get() {
            warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      };
      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }
    function ComponentDummy() {}
    ComponentDummy.prototype = Component.prototype;
    /**
     * Convenience component with default shallow equality check for sCU.
     */

    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }
    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

    assign(pureComponentPrototype, Component.prototype);
    pureComponentPrototype.isPureReactComponent = true;

    // an immutable object with a single mutable value
    function createRef() {
      var refObject = {
        current: null
      };
      {
        Object.seal(refObject);
      }
      return refObject;
    }
    var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

    function isArray(a) {
      return isArrayImpl(a);
    }

    /*
     * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
     * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
     *
     * The functions in this module will throw an easier-to-understand,
     * easier-to-debug exception with a clear errors message message explaining the
     * problem. (Instead of a confusing exception thrown inside the implementation
     * of the `value` object).
     */
    // $FlowFixMe only called in DEV, so void return is not possible.
    function typeName(value) {
      {
        // toStringTag is needed for namespaced types like Temporal.Instant
        var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
        var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
        return type;
      }
    } // $FlowFixMe only called in DEV, so void return is not possible.

    function willCoercionThrow(value) {
      {
        try {
          testStringCoercion(value);
          return false;
        } catch (e) {
          return true;
        }
      }
    }
    function testStringCoercion(value) {
      // If you ended up here by following an exception call stack, here's what's
      // happened: you supplied an object or symbol value to React (as a prop, key,
      // DOM attribute, CSS property, string ref, etc.) and when React tried to
      // coerce it to a string using `'' + value`, an exception was thrown.
      //
      // The most common types that will cause this exception are `Symbol` instances
      // and Temporal objects like `Temporal.Instant`. But any object that has a
      // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
      // exception. (Library authors do this to prevent users from using built-in
      // numeric operators like `+` or comparison operators like `>=` because custom
      // methods are needed to perform accurate arithmetic or comparison.)
      //
      // To fix the problem, coerce this object or symbol value to a string before
      // passing it to React. The most reliable way is usually `String(value)`.
      //
      // To find which value is throwing, check the browser or debugger console.
      // Before this exception was thrown, there should be `console.error` output
      // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
      // problem and how that type was used: key, atrribute, input value prop, etc.
      // In most cases, this console output also shows the component and its
      // ancestor components where the exception happened.
      //
      // eslint-disable-next-line react-internal/safe-string-coercion
      return '' + value;
    }
    function checkKeyStringCoercion(value) {
      {
        if (willCoercionThrow(value)) {
          error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));
          return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
        }
      }
    }
    function getWrappedName(outerType, innerType, wrapperName) {
      var displayName = outerType.displayName;
      if (displayName) {
        return displayName;
      }
      var functionName = innerType.displayName || innerType.name || '';
      return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
    } // Keep in sync with react-reconciler/getComponentNameFromFiber

    function getContextName(type) {
      return type.displayName || 'Context';
    } // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.

    function getComponentNameFromType(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }
      {
        if (typeof type.tag === 'number') {
          error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }
      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }
      if (typeof type === 'string') {
        return type;
      }
      switch (type) {
        case REACT_FRAGMENT_TYPE:
          return 'Fragment';
        case REACT_PORTAL_TYPE:
          return 'Portal';
        case REACT_PROFILER_TYPE:
          return 'Profiler';
        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';
        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
        case REACT_SUSPENSE_LIST_TYPE:
          return 'SuspenseList';
      }
      if (_typeof(type) === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            var context = type;
            return getContextName(context) + '.Consumer';
          case REACT_PROVIDER_TYPE:
            var provider = type;
            return getContextName(provider._context) + '.Provider';
          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');
          case REACT_MEMO_TYPE:
            var outerName = type.displayName || null;
            if (outerName !== null) {
              return outerName;
            }
            return getComponentNameFromType(type.type) || 'Memo';
          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                return getComponentNameFromType(init(payload));
              } catch (x) {
                return null;
              }
            }

          // eslint-disable-next-line no-fallthrough
        }
      }
      return null;
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
    {
      didWarnAboutStringRefs = {};
    }
    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }
    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }
    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function warnAboutAccessingKey() {
        {
          if (!specialPropKeyWarningShown) {
            specialPropKeyWarningShown = true;
            error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
          }
        }
      };
      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }
    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function warnAboutAccessingRef() {
        {
          if (!specialPropRefWarningShown) {
            specialPropRefWarningShown = true;
            error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
          }
        }
      };
      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }
    function warnIfStringRefCannotBeAutoConverted(config) {
      {
        if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
          var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
          if (!didWarnAboutStringRefs[componentName]) {
            error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
            didWarnAboutStringRefs[componentName] = true;
          }
        }
      }
    }
    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, instanceof check
     * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} props
     * @param {*} key
     * @param {string|object} ref
     * @param {*} owner
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @internal
     */

    var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,
        // Record the component responsible for creating this element.
        _owner: owner
      };
      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.

        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }); // self and source are DEV only properties.

        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.

        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });
        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    /**
     * Create and return a new ReactElement of the given type.
     * See https://reactjs.org/docs/react-api.html#createelement
     */

    function createElement(type, config, children) {
      var propName; // Reserved names are extracted

      var props = {};
      var key = null;
      var ref = null;
      var self = null;
      var source = null;
      if (config != null) {
        if (hasValidRef(config)) {
          ref = config.ref;
          {
            warnIfStringRefCannotBeAutoConverted(config);
          }
        }
        if (hasValidKey(config)) {
          {
            checkKeyStringCoercion(config.key);
          }
          key = '' + config.key;
        }
        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.

      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        {
          if (Object.freeze) {
            Object.freeze(childArray);
          }
        }
        props.children = childArray;
      } // Resolve default props

      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;
        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }
      {
        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }
          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    function cloneAndReplaceKey(oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
      return newElement;
    }
    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://reactjs.org/docs/react-api.html#cloneelement
     */

    function cloneElement(element, config, children) {
      if (element === null || element === undefined) {
        throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
      }
      var propName; // Original props are copied

      var props = assign({}, element.props); // Reserved names are extracted

      var key = element.key;
      var ref = element.ref; // Self is preserved since the owner is preserved.

      var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.

      var source = element._source; // Owner will be preserved, unless ref is overridden

      var owner = element._owner;
      if (config != null) {
        if (hasValidRef(config)) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }
        if (hasValidKey(config)) {
          {
            checkKeyStringCoercion(config.key);
          }
          key = '' + config.key;
        } // Remaining properties override existing props

        var defaultProps;
        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }
        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.

      var childrenLength = arguments.length - 2;
      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);
        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }
        props.children = childArray;
      }
      return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */

    function isValidElement(object) {
      return _typeof(object) === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */

    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = key.replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });
      return '$' + escapedString;
    }
    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */

    var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;
    function escapeUserProvidedKey(text) {
      return text.replace(userProvidedKeyEscapeRegex, '$&/');
    }
    /**
     * Generate a key string that identifies a element within a set.
     *
     * @param {*} element A element that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */

    function getElementKey(element, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if (_typeof(element) === 'object' && element !== null && element.key != null) {
        // Explicit key
        {
          checkKeyStringCoercion(element.key);
        }
        return escape('' + element.key);
      } // Implicit key determined by the index in the set

      return index.toString(36);
    }
    function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
      var type = _typeof(children);
      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }
      var invokeCallback = false;
      if (children === null) {
        invokeCallback = true;
      } else {
        switch (type) {
          case 'string':
          case 'number':
            invokeCallback = true;
            break;
          case 'object':
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
            }
        }
      }
      if (invokeCallback) {
        var _child = children;
        var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows:

        var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
        if (isArray(mappedChild)) {
          var escapedChildKey = '';
          if (childKey != null) {
            escapedChildKey = escapeUserProvidedKey(childKey) + '/';
          }
          mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
            return c;
          });
        } else if (mappedChild != null) {
          if (isValidElement(mappedChild)) {
            {
              // The `if` statement here prevents auto-disabling of the safe
              // coercion ESLint rule, so we must manually disable it below.
              // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
              if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                checkKeyStringCoercion(mappedChild.key);
              }
            }
            mappedChild = cloneAndReplaceKey(mappedChild,
            // Keep both the (mapped) and old keys if they differ, just as
            // traverseAllChildren used to do for objects as children
            escapedPrefix + (
            // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
            mappedChild.key && (!_child || _child.key !== mappedChild.key) ?
            // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
            // eslint-disable-next-line react-internal/safe-string-coercion
            escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
          }
          array.push(mappedChild);
        }
        return 1;
      }
      var child;
      var nextName;
      var subtreeCount = 0; // Count of children found in the current subtree.

      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;
      if (isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getElementKey(child, i);
          subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
        }
      } else {
        var iteratorFn = getIteratorFn(children);
        if (typeof iteratorFn === 'function') {
          var iterableChildren = children;
          {
            // Warn about using Maps as children
            if (iteratorFn === iterableChildren.entries) {
              if (!didWarnAboutMaps) {
                warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
              }
              didWarnAboutMaps = true;
            }
          }
          var iterator = iteratorFn.call(iterableChildren);
          var step;
          var ii = 0;
          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getElementKey(child, ii++);
            subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
          }
        } else if (type === 'object') {
          // eslint-disable-next-line react-internal/safe-string-coercion
          var childrenString = String(children);
          throw new Error("Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
        }
      }
      return subtreeCount;
    }

    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
     *
     * The provided mapFunction(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */
    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }
      var result = [];
      var count = 0;
      mapIntoArray(children, result, '', '', function (child) {
        return func.call(context, child, count++);
      });
      return result;
    }
    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrencount
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */

    function countChildren(children) {
      var n = 0;
      mapChildren(children, function () {
        n++; // Don't return anything
      });
      return n;
    }

    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */
    function forEachChildren(children, forEachFunc, forEachContext) {
      mapChildren(children, function () {
        forEachFunc.apply(this, arguments); // Don't return anything.
      }, forEachContext);
    }
    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
     */

    function toArray(children) {
      return mapChildren(children, function (child) {
        return child;
      }) || [];
    }
    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */

    function onlyChild(children) {
      if (!isValidElement(children)) {
        throw new Error('React.Children.only expected to receive a single React element child.');
      }
      return children;
    }
    function createContext(defaultValue) {
      // TODO: Second argument used to be an optional `calculateChangedBits`
      // function. Warn to reserve for future use?
      var context = {
        $$typeof: REACT_CONTEXT_TYPE,
        // As a workaround to support multiple concurrent renderers, we categorize
        // some renderers as primary and others as secondary. We only expect
        // there to be two concurrent renderers at most: React Native (primary) and
        // Fabric (secondary); React DOM (primary) and React ART (secondary).
        // Secondary renderers store their context values on separate fields.
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        // Used to track how many concurrent renderers this context currently
        // supports within in a single renderer. Such as parallel server rendering.
        _threadCount: 0,
        // These are circular
        Provider: null,
        Consumer: null,
        // Add these to use same hidden class in VM as ServerContext
        _defaultValue: null,
        _globalName: null
      };
      context.Provider = {
        $$typeof: REACT_PROVIDER_TYPE,
        _context: context
      };
      var hasWarnedAboutUsingNestedContextConsumers = false;
      var hasWarnedAboutUsingConsumerProvider = false;
      var hasWarnedAboutDisplayNameOnConsumer = false;
      {
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
          $$typeof: REACT_CONTEXT_TYPE,
          _context: context
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

        Object.defineProperties(Consumer, {
          Provider: {
            get: function get() {
              if (!hasWarnedAboutUsingConsumerProvider) {
                hasWarnedAboutUsingConsumerProvider = true;
                error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
              }
              return context.Provider;
            },
            set: function set(_Provider) {
              context.Provider = _Provider;
            }
          },
          _currentValue: {
            get: function get() {
              return context._currentValue;
            },
            set: function set(_currentValue) {
              context._currentValue = _currentValue;
            }
          },
          _currentValue2: {
            get: function get() {
              return context._currentValue2;
            },
            set: function set(_currentValue2) {
              context._currentValue2 = _currentValue2;
            }
          },
          _threadCount: {
            get: function get() {
              return context._threadCount;
            },
            set: function set(_threadCount) {
              context._threadCount = _threadCount;
            }
          },
          Consumer: {
            get: function get() {
              if (!hasWarnedAboutUsingNestedContextConsumers) {
                hasWarnedAboutUsingNestedContextConsumers = true;
                error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
              }
              return context.Consumer;
            }
          },
          displayName: {
            get: function get() {
              return context.displayName;
            },
            set: function set(displayName) {
              if (!hasWarnedAboutDisplayNameOnConsumer) {
                warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);
                hasWarnedAboutDisplayNameOnConsumer = true;
              }
            }
          }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

        context.Consumer = Consumer;
      }
      {
        context._currentRenderer = null;
        context._currentRenderer2 = null;
      }
      return context;
    }
    var Uninitialized = -1;
    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;
    function lazyInitializer(payload) {
      if (payload._status === Uninitialized) {
        var ctor = payload._result;
        var thenable = ctor(); // Transition to the next state.
        // This might throw either because it's missing or throws. If so, we treat it
        // as still uninitialized and try again next time. Which is the same as what
        // happens if the ctor or any wrappers processing the ctor throws. This might
        // end up fixing it if the resolution was a concurrency bug.

        thenable.then(function (moduleObject) {
          if (payload._status === Pending || payload._status === Uninitialized) {
            // Transition to the next state.
            var resolved = payload;
            resolved._status = Resolved;
            resolved._result = moduleObject;
          }
        }, function (error) {
          if (payload._status === Pending || payload._status === Uninitialized) {
            // Transition to the next state.
            var rejected = payload;
            rejected._status = Rejected;
            rejected._result = error;
          }
        });
        if (payload._status === Uninitialized) {
          // In case, we're still uninitialized, then we're waiting for the thenable
          // to resolve. Set it as pending in the meantime.
          var pending = payload;
          pending._status = Pending;
          pending._result = thenable;
        }
      }
      if (payload._status === Resolved) {
        var moduleObject = payload._result;
        {
          if (moduleObject === undefined) {
            error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' +
            // Break up imports to avoid accidentally parsing them as dependencies.
            'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))\n\n" + 'Did you accidentally put curly braces around the import?', moduleObject);
          }
        }
        {
          if (!('default' in moduleObject)) {
            error('lazy: Expected the result of a dynamic imp' + 'ort() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' +
            // Break up imports to avoid accidentally parsing them as dependencies.
            'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
          }
        }
        return moduleObject["default"];
      } else {
        throw payload._result;
      }
    }
    function lazy(ctor) {
      var payload = {
        // We use these fields to store the result.
        _status: Uninitialized,
        _result: ctor
      };
      var lazyType = {
        $$typeof: REACT_LAZY_TYPE,
        _payload: payload,
        _init: lazyInitializer
      };
      {
        // In production, this would just set it on the object.
        var defaultProps;
        var propTypes; // $FlowFixMe

        Object.defineProperties(lazyType, {
          defaultProps: {
            configurable: true,
            get: function get() {
              return defaultProps;
            },
            set: function set(newDefaultProps) {
              error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              defaultProps = newDefaultProps; // Match production behavior more closely:
              // $FlowFixMe

              Object.defineProperty(lazyType, 'defaultProps', {
                enumerable: true
              });
            }
          },
          propTypes: {
            configurable: true,
            get: function get() {
              return propTypes;
            },
            set: function set(newPropTypes) {
              error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              propTypes = newPropTypes; // Match production behavior more closely:
              // $FlowFixMe

              Object.defineProperty(lazyType, 'propTypes', {
                enumerable: true
              });
            }
          }
        });
      }
      return lazyType;
    }
    function forwardRef(render) {
      {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
          error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
        } else if (typeof render !== 'function') {
          error('forwardRef requires a render function but was given %s.', render === null ? 'null' : _typeof(render));
        } else {
          if (render.length !== 0 && render.length !== 2) {
            error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
          }
        }
        if (render != null) {
          if (render.defaultProps != null || render.propTypes != null) {
            error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
          }
        }
      }
      var elementType = {
        $$typeof: REACT_FORWARD_REF_TYPE,
        render: render
      };
      {
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
          enumerable: false,
          configurable: true,
          get: function get() {
            return ownName;
          },
          set: function set(name) {
            ownName = name; // The inner component shouldn't inherit this display name in most cases,
            // because the component may be used elsewhere.
            // But it's nice for anonymous functions to inherit the name,
            // so that our component-stack generation logic will display their frames.
            // An anonymous function generally suggests a pattern like:
            //   React.forwardRef((props, ref) => {...});
            // This kind of inner function is not used elsewhere so the side effect is okay.

            if (!render.name && !render.displayName) {
              render.displayName = name;
            }
          }
        });
      }
      return elementType;
    }
    var REACT_MODULE_REFERENCE;
    {
      REACT_MODULE_REFERENCE = Symbol["for"]('react.module.reference');
    }
    function isValidElementType(type) {
      if (typeof type === 'string' || typeof type === 'function') {
        return true;
      } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

      if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
        return true;
      }
      if (_typeof(type) === 'object' && type !== null) {
        if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE ||
        // This needs to include all possible module reference object
        // types supported by any Flight configuration anywhere since
        // we don't know which Flight build this will end up being used
        // with.
        type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== undefined) {
          return true;
        }
      }
      return false;
    }
    function memo(type, compare) {
      {
        if (!isValidElementType(type)) {
          error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : _typeof(type));
        }
      }
      var elementType = {
        $$typeof: REACT_MEMO_TYPE,
        type: type,
        compare: compare === undefined ? null : compare
      };
      {
        var ownName;
        Object.defineProperty(elementType, 'displayName', {
          enumerable: false,
          configurable: true,
          get: function get() {
            return ownName;
          },
          set: function set(name) {
            ownName = name; // The inner component shouldn't inherit this display name in most cases,
            // because the component may be used elsewhere.
            // But it's nice for anonymous functions to inherit the name,
            // so that our component-stack generation logic will display their frames.
            // An anonymous function generally suggests a pattern like:
            //   React.memo((props) => {...});
            // This kind of inner function is not used elsewhere so the side effect is okay.

            if (!type.name && !type.displayName) {
              type.displayName = name;
            }
          }
        });
      }
      return elementType;
    }
    function resolveDispatcher() {
      var dispatcher = ReactCurrentDispatcher.current;
      {
        if (dispatcher === null) {
          error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
        }
      } // Will result in a null access error if accessed outside render phase. We
      // intentionally don't throw our own error because this is in a hot path.
      // Also helps ensure this is inlined.

      return dispatcher;
    }
    function useContext(Context) {
      var dispatcher = resolveDispatcher();
      {
        // TODO: add a more generic warning for invalid values.
        if (Context._context !== undefined) {
          var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
          // and nobody should be using this in existing code.

          if (realContext.Consumer === Context) {
            error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
          } else if (realContext.Provider === Context) {
            error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
          }
        }
      }
      return dispatcher.useContext(Context);
    }
    function useState(initialState) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
    }
    function useReducer(reducer, initialArg, init) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useReducer(reducer, initialArg, init);
    }
    function useRef(initialValue) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useRef(initialValue);
    }
    function useEffect(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useEffect(create, deps);
    }
    function useInsertionEffect(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useInsertionEffect(create, deps);
    }
    function useLayoutEffect(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useLayoutEffect(create, deps);
    }
    function useCallback(callback, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useCallback(callback, deps);
    }
    function useMemo(create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useMemo(create, deps);
    }
    function useImperativeHandle(ref, create, deps) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useImperativeHandle(ref, create, deps);
    }
    function useDebugValue(value, formatterFn) {
      {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
      }
    }
    function useTransition() {
      var dispatcher = resolveDispatcher();
      return dispatcher.useTransition();
    }
    function useDeferredValue(value) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useDeferredValue(value);
    }
    function useId() {
      var dispatcher = resolveDispatcher();
      return dispatcher.useId();
    }
    function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    }

    // Helpers to patch console.logs to avoid logging during side-effect free
    // replaying on render function. This currently only patches the object
    // lazily which won't cover if the log function was extracted eagerly.
    // We could also eagerly patch the method.
    var disabledDepth = 0;
    var prevLog;
    var prevInfo;
    var prevWarn;
    var prevError;
    var prevGroup;
    var prevGroupCollapsed;
    var prevGroupEnd;
    function disabledLog() {}
    disabledLog.__reactDisabledLog = true;
    function disableLogs() {
      {
        if (disabledDepth === 0) {
          /* eslint-disable react-internal/no-production-logging */
          prevLog = console.log;
          prevInfo = console.info;
          prevWarn = console.warn;
          prevError = console.error;
          prevGroup = console.group;
          prevGroupCollapsed = console.groupCollapsed;
          prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

          var props = {
            configurable: true,
            enumerable: true,
            value: disabledLog,
            writable: true
          }; // $FlowFixMe Flow thinks console is immutable.

          Object.defineProperties(console, {
            info: props,
            log: props,
            warn: props,
            error: props,
            group: props,
            groupCollapsed: props,
            groupEnd: props
          });
          /* eslint-enable react-internal/no-production-logging */
        }
        disabledDepth++;
      }
    }
    function reenableLogs() {
      {
        disabledDepth--;
        if (disabledDepth === 0) {
          /* eslint-disable react-internal/no-production-logging */
          var props = {
            configurable: true,
            enumerable: true,
            writable: true
          }; // $FlowFixMe Flow thinks console is immutable.

          Object.defineProperties(console, {
            log: assign({}, props, {
              value: prevLog
            }),
            info: assign({}, props, {
              value: prevInfo
            }),
            warn: assign({}, props, {
              value: prevWarn
            }),
            error: assign({}, props, {
              value: prevError
            }),
            group: assign({}, props, {
              value: prevGroup
            }),
            groupCollapsed: assign({}, props, {
              value: prevGroupCollapsed
            }),
            groupEnd: assign({}, props, {
              value: prevGroupEnd
            })
          });
          /* eslint-enable react-internal/no-production-logging */
        }
        if (disabledDepth < 0) {
          error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
        }
      }
    }
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var prefix;
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      {
        if (prefix === undefined) {
          // Extract the VM specific prefix used by each line.
          try {
            throw Error();
          } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || '';
          }
        } // We use the prefix to ensure our stacks line up with native stack frames.

        return '\n' + prefix + name;
      }
    }
    var reentry = false;
    var componentFrameCache;
    {
      var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
      componentFrameCache = new PossiblyWeakMap();
    }
    function describeNativeComponentFrame(fn, construct) {
      // If something asked for a stack inside a fake render, it should get ignored.
      if (!fn || reentry) {
        return '';
      }
      {
        var frame = componentFrameCache.get(fn);
        if (frame !== undefined) {
          return frame;
        }
      }
      var control;
      reentry = true;
      var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

      Error.prepareStackTrace = undefined;
      var previousDispatcher;
      {
        previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
        // for warnings.

        ReactCurrentDispatcher$1.current = null;
        disableLogs();
      }
      try {
        // This should throw.
        if (construct) {
          // Something should be setting the props in the constructor.
          var Fake = function Fake() {
            throw Error();
          }; // $FlowFixMe

          Object.defineProperty(Fake.prototype, 'props', {
            set: function set() {
              // We use a throwing setter instead of frozen or non-writable props
              // because that won't throw in a non-strict mode function.
              throw Error();
            }
          });
          if ((typeof Reflect === "undefined" ? "undefined" : _typeof(Reflect)) === 'object' && Reflect.construct) {
            // We construct a different control for this case to include any extra
            // frames added by the construct call.
            try {
              Reflect.construct(Fake, []);
            } catch (x) {
              control = x;
            }
            Reflect.construct(fn, [], Fake);
          } else {
            try {
              Fake.call();
            } catch (x) {
              control = x;
            }
            fn.call(Fake.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        // This is inlined manually because closure doesn't do it for us.
        if (sample && control && typeof sample.stack === 'string') {
          // This extracts the first frame from the sample that isn't also in the control.
          // Skipping one frame that we assume is the frame that calls the two.
          var sampleLines = sample.stack.split('\n');
          var controlLines = control.stack.split('\n');
          var s = sampleLines.length - 1;
          var c = controlLines.length - 1;
          while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
            // We expect at least one stack frame to be shared.
            // Typically this will be the root most one. However, stack frames may be
            // cut off due to maximum stack limits. In this case, one maybe cut off
            // earlier than the other. We assume that the sample is longer or the same
            // and there for cut off earlier. So we should find the root most frame in
            // the sample somewhere in the control.
            c--;
          }
          for (; s >= 1 && c >= 0; s--, c--) {
            // Next we find the first one that isn't the same which should be the
            // frame that called our sample function and the control.
            if (sampleLines[s] !== controlLines[c]) {
              // In V8, the first line is describing the message but other VMs don't.
              // If we're about to return the first line, and the control is also on the same
              // line, that's a pretty good indicator that our sample threw at same line as
              // the control. I.e. before we entered the sample frame. So we ignore this result.
              // This can happen if you passed a class to function component, or non-function.
              if (s !== 1 || c !== 1) {
                do {
                  s--;
                  c--; // We may still have similar intermediate frames from the construct call.
                  // The next one that isn't the same should be our match though.

                  if (c < 0 || sampleLines[s] !== controlLines[c]) {
                    // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                    var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
                    // but we have a user-provided "displayName"
                    // splice it in to make the stack more readable.

                    if (fn.displayName && _frame.includes('<anonymous>')) {
                      _frame = _frame.replace('<anonymous>', fn.displayName);
                    }
                    {
                      if (typeof fn === 'function') {
                        componentFrameCache.set(fn, _frame);
                      }
                    } // Return the line we found.

                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = false;
        {
          ReactCurrentDispatcher$1.current = previousDispatcher;
          reenableLogs();
        }
        Error.prepareStackTrace = previousPrepareStackTrace;
      } // Fallback to just using the name if we couldn't make it throw.

      var name = fn ? fn.displayName || fn.name : '';
      var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';
      {
        if (typeof fn === 'function') {
          componentFrameCache.set(fn, syntheticFrame);
        }
      }
      return syntheticFrame;
    }
    function describeFunctionComponentFrame(fn, source, ownerFn) {
      {
        return describeNativeComponentFrame(fn, false);
      }
    }
    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return '';
      }
      if (typeof type === 'function') {
        {
          return describeNativeComponentFrame(type, shouldConstruct(type));
        }
      }
      if (typeof type === 'string') {
        return describeBuiltInComponentFrame(type);
      }
      switch (type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame('Suspense');
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame('SuspenseList');
      }
      if (_typeof(type) === 'object') {
        switch (type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeFunctionComponentFrame(type.render);
          case REACT_MEMO_TYPE:
            // Memo may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_LAZY_TYPE:
            {
              var lazyComponent = type;
              var payload = lazyComponent._payload;
              var init = lazyComponent._init;
              try {
                // Lazy may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
              } catch (x) {}
            }
        }
      }
      return '';
    }
    var loggedTypeFailures = {};
    var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
    function setCurrentlyValidatingElement(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
        } else {
          ReactDebugCurrentFrame$1.setExtraStackFrame(null);
        }
      }
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      {
        // $FlowFixMe This is okay but Flow doesn't know it.
        var has = Function.call.bind(hasOwnProperty);
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
            // fail the render phase where it didn't fail before. So we log it.
            // After these have been cleaned up, we'll let them throw.

            try {
              // This is intentionally an invariant that gets caught. It's the same
              // behavior as without this statement except with a better message.
              if (typeof typeSpecs[typeSpecName] !== 'function') {
                // eslint-disable-next-line react-internal/prod-error-codes
                var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + _typeof(typeSpecs[typeSpecName]) + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
                err.name = 'Invariant Violation';
                throw err;
              }
              error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
            } catch (ex) {
              error$1 = ex;
            }
            if (error$1 && !(error$1 instanceof Error)) {
              setCurrentlyValidatingElement(element);
              error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, _typeof(error$1));
              setCurrentlyValidatingElement(null);
            }
            if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
              // Only monitor this failure once because there tends to be a lot of the
              // same error.
              loggedTypeFailures[error$1.message] = true;
              setCurrentlyValidatingElement(element);
              error('Failed %s type: %s', location, error$1.message);
              setCurrentlyValidatingElement(null);
            }
          }
        }
      }
    }
    function setCurrentlyValidatingElement$1(element) {
      {
        if (element) {
          var owner = element._owner;
          var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
          setExtraStackFrame(stack);
        } else {
          setExtraStackFrame(null);
        }
      }
    }
    var propTypesMisspellWarningShown;
    {
      propTypesMisspellWarningShown = false;
    }
    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentNameFromType(ReactCurrentOwner.current.type);
        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }
      return '';
    }
    function getSourceInfoErrorAddendum(source) {
      if (source !== undefined) {
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }
      return '';
    }
    function getSourceInfoErrorAddendumForProps(elementProps) {
      if (elementProps !== null && elementProps !== undefined) {
        return getSourceInfoErrorAddendum(elementProps.__source);
      }
      return '';
    }
    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */

    var ownerHasKeyUseWarning = {};
    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();
      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
        if (parentName) {
          info = "\n\nCheck the top-level render call using <" + parentName + ">.";
        }
      }
      return info;
    }
    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */

    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }
      element._store.validated = true;
      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }
      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.

      var childOwner = '';
      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
        // Give the component that originally created this child.
        childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
      }
      {
        setCurrentlyValidatingElement$1(element);
        error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
        setCurrentlyValidatingElement$1(null);
      }
    }
    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */

    function validateChildKeys(node, parentType) {
      if (_typeof(node) !== 'object') {
        return;
      }
      if (isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];
          if (isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);
        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step;
            while (!(step = iterator.next()).done) {
              if (isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }
    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */

    function validatePropTypes(element) {
      {
        var type = element.type;
        if (type === null || type === undefined || typeof type === 'string') {
          return;
        }
        var propTypes;
        if (typeof type === 'function') {
          propTypes = type.propTypes;
        } else if (_typeof(type) === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE ||
        // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        type.$$typeof === REACT_MEMO_TYPE)) {
          propTypes = type.propTypes;
        } else {
          return;
        }
        if (propTypes) {
          // Intentionally inside to avoid triggering lazy initializers:
          var name = getComponentNameFromType(type);
          checkPropTypes(propTypes, element.props, 'prop', name, element);
        } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
          propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

          var _name = getComponentNameFromType(type);
          error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
        }
        if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
          error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
        }
      }
    }
    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */

    function validateFragmentProps(fragment) {
      {
        var keys = Object.keys(fragment.props);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          if (key !== 'children' && key !== 'key') {
            setCurrentlyValidatingElement$1(fragment);
            error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
            setCurrentlyValidatingElement$1(null);
            break;
          }
        }
        if (fragment.ref !== null) {
          setCurrentlyValidatingElement$1(fragment);
          error('Invalid attribute `ref` supplied to `React.Fragment`.');
          setCurrentlyValidatingElement$1(null);
        }
      }
    }
    function createElementWithValidation(type, props, children) {
      var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.

      if (!validType) {
        var info = '';
        if (type === undefined || _typeof(type) === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
        }
        var sourceInfo = getSourceInfoErrorAddendumForProps(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }
        var typeString;
        if (type === null) {
          typeString = 'null';
        } else if (isArray(type)) {
          typeString = 'array';
        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
          typeString = "<" + (getComponentNameFromType(type.type) || 'Unknown') + " />";
          info = ' Did you accidentally export a JSX literal instead of a component?';
        } else {
          typeString = _typeof(type);
        }
        {
          error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
        }
      }
      var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.

      if (element == null) {
        return element;
      } // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)

      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }
      if (type === REACT_FRAGMENT_TYPE) {
        validateFragmentProps(element);
      } else {
        validatePropTypes(element);
      }
      return element;
    }
    var didWarnAboutDeprecatedCreateFactory = false;
    function createFactoryWithValidation(type) {
      var validatedFactory = createElementWithValidation.bind(null, type);
      validatedFactory.type = type;
      {
        if (!didWarnAboutDeprecatedCreateFactory) {
          didWarnAboutDeprecatedCreateFactory = true;
          warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
        } // Legacy hook: remove it

        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function get() {
            warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
      return validatedFactory;
    }
    function cloneElementWithValidation(element, props, children) {
      var newElement = cloneElement.apply(this, arguments);
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }
      validatePropTypes(newElement);
      return newElement;
    }
    function startTransition(scope, options) {
      var prevTransition = ReactCurrentBatchConfig.transition;
      ReactCurrentBatchConfig.transition = {};
      var currentTransition = ReactCurrentBatchConfig.transition;
      {
        ReactCurrentBatchConfig.transition._updatedFibers = new Set();
      }
      try {
        scope();
      } finally {
        ReactCurrentBatchConfig.transition = prevTransition;
        {
          if (prevTransition === null && currentTransition._updatedFibers) {
            var updatedFibersCount = currentTransition._updatedFibers.size;
            if (updatedFibersCount > 10) {
              warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
            }
            currentTransition._updatedFibers.clear();
          }
        }
      }
    }
    var didWarnAboutMessageChannel = false;
    var enqueueTaskImpl = null;
    function enqueueTask(task) {
      if (enqueueTaskImpl === null) {
        try {
          // read require off the module object to get around the bundlers.
          // we don't want them to detect a require and bundle a Node polyfill.
          var requireString = ('require' + Math.random()).slice(0, 7);
          var nodeRequire = module && module[requireString]; // assuming we're in node, let's try to get node's
          // version of setImmediate, bypassing fake timers if any.

          enqueueTaskImpl = nodeRequire.call(module, 'timers').setImmediate;
        } catch (_err) {
          // we're in a browser
          // we can't use regular timers because they may still be faked
          // so we try MessageChannel+postMessage instead
          enqueueTaskImpl = function enqueueTaskImpl(callback) {
            {
              if (didWarnAboutMessageChannel === false) {
                didWarnAboutMessageChannel = true;
                if (typeof MessageChannel === 'undefined') {
                  error('This browser does not have a MessageChannel implementation, ' + 'so enqueuing tasks via await act(async () => ...) will fail. ' + 'Please file an issue at https://github.com/facebook/react/issues ' + 'if you encounter this warning.');
                }
              }
            }
            var channel = new MessageChannel();
            channel.port1.onmessage = callback;
            channel.port2.postMessage(undefined);
          };
        }
      }
      return enqueueTaskImpl(task);
    }
    var actScopeDepth = 0;
    var didWarnNoAwaitAct = false;
    function act(callback) {
      {
        // `act` calls can be nested, so we track the depth. This represents the
        // number of `act` scopes on the stack.
        var prevActScopeDepth = actScopeDepth;
        actScopeDepth++;
        if (ReactCurrentActQueue.current === null) {
          // This is the outermost `act` scope. Initialize the queue. The reconciler
          // will detect the queue and use it instead of Scheduler.
          ReactCurrentActQueue.current = [];
        }
        var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
        var result;
        try {
          // Used to reproduce behavior of `batchedUpdates` in legacy mode. Only
          // set to `true` while the given callback is executed, not for updates
          // triggered during an async event, because this is how the legacy
          // implementation of `act` behaved.
          ReactCurrentActQueue.isBatchingLegacy = true;
          result = callback(); // Replicate behavior of original `act` implementation in legacy mode,
          // which flushed updates immediately after the scope function exits, even
          // if it's an async function.

          if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
            var queue = ReactCurrentActQueue.current;
            if (queue !== null) {
              ReactCurrentActQueue.didScheduleLegacyUpdate = false;
              flushActQueue(queue);
            }
          }
        } catch (error) {
          popActScope(prevActScopeDepth);
          throw error;
        } finally {
          ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
        }
        if (result !== null && _typeof(result) === 'object' && typeof result.then === 'function') {
          var thenableResult = result; // The callback is an async function (i.e. returned a promise). Wait
          // for it to resolve before exiting the current scope.

          var wasAwaited = false;
          var thenable = {
            then: function then(resolve, reject) {
              wasAwaited = true;
              thenableResult.then(function (returnValue) {
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  // We've exited the outermost act scope. Recursively flush the
                  // queue until there's no remaining work.
                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                } else {
                  resolve(returnValue);
                }
              }, function (error) {
                // The callback threw an error.
                popActScope(prevActScopeDepth);
                reject(error);
              });
            }
          };
          {
            if (!didWarnNoAwaitAct && typeof Promise !== 'undefined') {
              // eslint-disable-next-line no-undef
              Promise.resolve().then(function () {}).then(function () {
                if (!wasAwaited) {
                  didWarnNoAwaitAct = true;
                  error('You called act(async () => ...) without await. ' + 'This could lead to unexpected testing behaviour, ' + 'interleaving multiple act calls and mixing their ' + 'scopes. ' + 'You should - await act(async () => ...);');
                }
              });
            }
          }
          return thenable;
        } else {
          var returnValue = result; // The callback is not an async function. Exit the current scope
          // immediately, without awaiting.

          popActScope(prevActScopeDepth);
          if (actScopeDepth === 0) {
            // Exiting the outermost act scope. Flush the queue.
            var _queue = ReactCurrentActQueue.current;
            if (_queue !== null) {
              flushActQueue(_queue);
              ReactCurrentActQueue.current = null;
            } // Return a thenable. If the user awaits it, we'll flush again in
            // case additional work was scheduled by a microtask.

            var _thenable = {
              then: function then(resolve, reject) {
                // Confirm we haven't re-entered another `act` scope, in case
                // the user does something weird like await the thenable
                // multiple times.
                if (ReactCurrentActQueue.current === null) {
                  // Recursively flush the queue until there's no remaining work.
                  ReactCurrentActQueue.current = [];
                  recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                } else {
                  resolve(returnValue);
                }
              }
            };
            return _thenable;
          } else {
            // Since we're inside a nested `act` scope, the returned thenable
            // immediately resolves. The outer scope will flush the queue.
            var _thenable2 = {
              then: function then(resolve, reject) {
                resolve(returnValue);
              }
            };
            return _thenable2;
          }
        }
      }
    }
    function popActScope(prevActScopeDepth) {
      {
        if (prevActScopeDepth !== actScopeDepth - 1) {
          error('You seem to have overlapping act() calls, this is not supported. ' + 'Be sure to await previous act() calls before making a new one. ');
        }
        actScopeDepth = prevActScopeDepth;
      }
    }
    function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
      {
        var queue = ReactCurrentActQueue.current;
        if (queue !== null) {
          try {
            flushActQueue(queue);
            enqueueTask(function () {
              if (queue.length === 0) {
                // No additional work was scheduled. Finish.
                ReactCurrentActQueue.current = null;
                resolve(returnValue);
              } else {
                // Keep flushing work until there's none left.
                recursivelyFlushAsyncActWork(returnValue, resolve, reject);
              }
            });
          } catch (error) {
            reject(error);
          }
        } else {
          resolve(returnValue);
        }
      }
    }
    var isFlushing = false;
    function flushActQueue(queue) {
      {
        if (!isFlushing) {
          // Prevent re-entrance.
          isFlushing = true;
          var i = 0;
          try {
            for (; i < queue.length; i++) {
              var callback = queue[i];
              do {
                callback = callback(true);
              } while (callback !== null);
            }
            queue.length = 0;
          } catch (error) {
            // If something throws, leave the remaining callbacks on the queue.
            queue = queue.slice(i + 1);
            throw error;
          } finally {
            isFlushing = false;
          }
        }
      }
    }
    var createElement$1 = createElementWithValidation;
    var cloneElement$1 = cloneElementWithValidation;
    var createFactory = createFactoryWithValidation;
    var Children = {
      map: mapChildren,
      forEach: forEachChildren,
      count: countChildren,
      toArray: toArray,
      only: onlyChild
    };
    exports.Children = Children;
    exports.Component = Component;
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.Profiler = REACT_PROFILER_TYPE;
    exports.PureComponent = PureComponent;
    exports.StrictMode = REACT_STRICT_MODE_TYPE;
    exports.Suspense = REACT_SUSPENSE_TYPE;
    exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
    exports.act = act;
    exports.cloneElement = cloneElement$1;
    exports.createContext = createContext;
    exports.createElement = createElement$1;
    exports.createFactory = createFactory;
    exports.createRef = createRef;
    exports.forwardRef = forwardRef;
    exports.isValidElement = isValidElement;
    exports.lazy = lazy;
    exports.memo = memo;
    exports.startTransition = startTransition;
    exports.unstable_act = act;
    exports.useCallback = useCallback;
    exports.useContext = useContext;
    exports.useDebugValue = useDebugValue;
    exports.useDeferredValue = useDeferredValue;
    exports.useEffect = useEffect;
    exports.useId = useId;
    exports.useImperativeHandle = useImperativeHandle;
    exports.useInsertionEffect = useInsertionEffect;
    exports.useLayoutEffect = useLayoutEffect;
    exports.useMemo = useMemo;
    exports.useReducer = useReducer;
    exports.useRef = useRef;
    exports.useState = useState;
    exports.useSyncExternalStore = useSyncExternalStore;
    exports.useTransition = useTransition;
    exports.version = ReactVersion;
    /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === 'function') {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
    }
  })();
}

/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ "./node_modules/react/cjs/react.development.js");
}

/***/ }),

/***/ "./node_modules/react/jsx-runtime.js":
/*!*******************************************!*\
  !*** ./node_modules/react/jsx-runtime.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-jsx-runtime.development.js */ "./node_modules/react/cjs/react-jsx-runtime.development.js");
}

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RSxLQUFLLENBQUUsVUFBVSxDQUFFLElBQUksQ0FBRSxTQUFTLENBQUUsS0FBSyxDQUFFLEtBQUssQ0FBRSxJQUFJLENBQUUsSUFBSSxDQUFFLE9BQU8sQ0FBRSxVQUFVLENBQUUsWUFBWSxDQUFFLFFBQVEsQ0FBRSxRQUFRLENBQUUsTUFBTSxDQUFFLE9BQU8sQ0FBRSxVQUFVLENBQUUsSUFBSSxDQUFFLElBQUksQ0FBRSxJQUFJLENBQUUsSUFBSSxDQUFFLElBQUksQ0FBRSxJQUFJLENBQUUsTUFBTSxDQUFFLFFBQVEsQ0FBRSxRQUFRLENBQUUsSUFBSSxDQUFFLE1BQU0sQ0FBRSxRQUFRLENBQUUsS0FBSyxDQUFFLE9BQU8sQ0FBRSxTQUFTLENBQUUsSUFBSSxDQUFFLE1BQU0sQ0FBRSxTQUFTLENBQUUsTUFBTSxDQUFFLFNBQVMsQ0FBRSxNQUFNLENBQUUsVUFBVSxDQUFFLE1BQU0sQ0FBRSxLQUFLLENBQUUsU0FBUyxDQUFFLFVBQVUsQ0FBRSxVQUFVLENBQUUsUUFBUSxDQUFFLElBQUksQ0FBRSxHQUFHLENBQUUsT0FBTyxDQUFFLFdBQVcsQ0FBRSxLQUFLLENBQUUsUUFBUSxDQUFFLFNBQVMsQ0FBRSxRQUFRLENBQUUsUUFBUSxDQUFFLE9BQU8sQ0FBRSxTQUFTLENBQUUsT0FBTyxDQUFFLE9BQU8sQ0FBRSxJQUFJLENBQUUsVUFBVSxDQUFFLFVBQVUsQ0FBRSxPQUFPLENBQUUsSUFBSSxDQUFFLE9BQU8sQ0FBRSxPQUFPLENBQUUsSUFBSSxDQUFFLE9BQU8sQ0FBRSxJQUFJLENBQUUsS0FBSyxDQUFFLEtBQUssQ0FBQyxDQUFFO0FBRXp2QixHQUFJLENBQUFDLFdBQVcsQ0FBRyxDQUFDLFFBQVEsQ0FBRSxTQUFTLENBQUUsTUFBTSxDQUFFLE9BQU8sQ0FBRSxJQUFJLENBQUUsSUFBSSxDQUFFLFNBQVMsQ0FBRSxRQUFRLENBQUUsVUFBVSxDQUFFO0FBQ3RHO0FBQ0E7QUFDQSxlQUFlLENBQUUsTUFBTSxDQUFFLE9BQU8sQ0FBQyxDQUFFO0FBRW5DLEdBQUksQ0FBQUMsZUFBZSxDQUFHRCxX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ZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcyIsIndlYnBhY2s6Ly9ycGMtbG9nLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9jbGllbnQuanMiLCJ3ZWJwYWNrOi8vcnBjLWxvZy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcnBjLWxvZy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QtanN4LXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMiLCJ3ZWJwYWNrOi8vcnBjLWxvZy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMiLCJ3ZWJwYWNrOi8vcnBjLWxvZy8uL25vZGVfbW9kdWxlcy9yZWFjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9ycGMtbG9nLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2pzeC1ydW50aW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5kZXZlbG9wbWVudC5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAndXNlIHN0cmljdCc7XG5cbi8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbmlmIChcbiAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5yZWdpc3RlckludGVybmFsTW9kdWxlU3RhcnQgPT09XG4gICAgJ2Z1bmN0aW9uJ1xuKSB7XG4gIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5yZWdpc3RlckludGVybmFsTW9kdWxlU3RhcnQobmV3IEVycm9yKCkpO1xufVxuICAgICAgICAgIHZhciBSZWFjdCA9IHJlcXVpcmUoJ3JlYWN0Jyk7XG52YXIgU2NoZWR1bGVyID0gcmVxdWlyZSgnc2NoZWR1bGVyJyk7XG5cbnZhciBSZWFjdFNoYXJlZEludGVybmFscyA9IFJlYWN0Ll9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuXG52YXIgc3VwcHJlc3NXYXJuaW5nID0gZmFsc2U7XG5mdW5jdGlvbiBzZXRTdXBwcmVzc1dhcm5pbmcobmV3U3VwcHJlc3NXYXJuaW5nKSB7XG4gIHtcbiAgICBzdXBwcmVzc1dhcm5pbmcgPSBuZXdTdXBwcmVzc1dhcm5pbmc7XG4gIH1cbn0gLy8gSW4gREVWLCBjYWxscyB0byBjb25zb2xlLndhcm4gYW5kIGNvbnNvbGUuZXJyb3IgZ2V0IHJlcGxhY2VkXG4vLyBieSBjYWxscyB0byB0aGVzZSBtZXRob2RzIGJ5IGEgQmFiZWwgcGx1Z2luLlxuLy9cbi8vIEluIFBST0QgKG9yIGluIHBhY2thZ2VzIHdpdGhvdXQgYWNjZXNzIHRvIFJlYWN0IGludGVybmFscyksXG4vLyB0aGV5IGFyZSBsZWZ0IGFzIHRoZXkgYXJlIGluc3RlYWQuXG5cbmZ1bmN0aW9uIHdhcm4oZm9ybWF0KSB7XG4gIHtcbiAgICBpZiAoIXN1cHByZXNzV2FybmluZykge1xuICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nKCd3YXJuJywgZm9ybWF0LCBhcmdzKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGVycm9yKGZvcm1hdCkge1xuICB7XG4gICAgaWYgKCFzdXBwcmVzc1dhcm5pbmcpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHByaW50V2FybmluZygnZXJyb3InLCBmb3JtYXQsIGFyZ3MpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcmludFdhcm5pbmcobGV2ZWwsIGZvcm1hdCwgYXJncykge1xuICAvLyBXaGVuIGNoYW5naW5nIHRoaXMgbG9naWMsIHlvdSBtaWdodCB3YW50IHRvIGFsc29cbiAgLy8gdXBkYXRlIGNvbnNvbGVXaXRoU3RhY2tEZXYud3d3LmpzIGFzIHdlbGwuXG4gIHtcbiAgICB2YXIgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0RGVidWdDdXJyZW50RnJhbWU7XG4gICAgdmFyIHN0YWNrID0gUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRTdGFja0FkZGVuZHVtKCk7XG5cbiAgICBpZiAoc3RhY2sgIT09ICcnKSB7XG4gICAgICBmb3JtYXQgKz0gJyVzJztcbiAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdChbc3RhY2tdKTtcbiAgICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1pbnRlcm5hbC9zYWZlLXN0cmluZy1jb2VyY2lvblxuXG5cbiAgICB2YXIgYXJnc1dpdGhGb3JtYXQgPSBhcmdzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhpdGVtKTtcbiAgICB9KTsgLy8gQ2FyZWZ1bDogUk4gY3VycmVudGx5IGRlcGVuZHMgb24gdGhpcyBwcmVmaXhcblxuICAgIGFyZ3NXaXRoRm9ybWF0LnVuc2hpZnQoJ1dhcm5pbmc6ICcgKyBmb3JtYXQpOyAvLyBXZSBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBzcHJlYWQgKG9yIC5hcHBseSkgZGlyZWN0bHkgYmVjYXVzZSBpdFxuICAgIC8vIGJyZWFrcyBJRTk6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTM2MTBcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nXG5cbiAgICBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkuY2FsbChjb25zb2xlW2xldmVsXSwgY29uc29sZSwgYXJnc1dpdGhGb3JtYXQpO1xuICB9XG59XG5cbnZhciBGdW5jdGlvbkNvbXBvbmVudCA9IDA7XG52YXIgQ2xhc3NDb21wb25lbnQgPSAxO1xudmFyIEluZGV0ZXJtaW5hdGVDb21wb25lbnQgPSAyOyAvLyBCZWZvcmUgd2Uga25vdyB3aGV0aGVyIGl0IGlzIGZ1bmN0aW9uIG9yIGNsYXNzXG5cbnZhciBIb3N0Um9vdCA9IDM7IC8vIFJvb3Qgb2YgYSBob3N0IHRyZWUuIENvdWxkIGJlIG5lc3RlZCBpbnNpZGUgYW5vdGhlciBub2RlLlxuXG52YXIgSG9zdFBvcnRhbCA9IDQ7IC8vIEEgc3VidHJlZS4gQ291bGQgYmUgYW4gZW50cnkgcG9pbnQgdG8gYSBkaWZmZXJlbnQgcmVuZGVyZXIuXG5cbnZhciBIb3N0Q29tcG9uZW50ID0gNTtcbnZhciBIb3N0VGV4dCA9IDY7XG52YXIgRnJhZ21lbnQgPSA3O1xudmFyIE1vZGUgPSA4O1xudmFyIENvbnRleHRDb25zdW1lciA9IDk7XG52YXIgQ29udGV4dFByb3ZpZGVyID0gMTA7XG52YXIgRm9yd2FyZFJlZiA9IDExO1xudmFyIFByb2ZpbGVyID0gMTI7XG52YXIgU3VzcGVuc2VDb21wb25lbnQgPSAxMztcbnZhciBNZW1vQ29tcG9uZW50ID0gMTQ7XG52YXIgU2ltcGxlTWVtb0NvbXBvbmVudCA9IDE1O1xudmFyIExhenlDb21wb25lbnQgPSAxNjtcbnZhciBJbmNvbXBsZXRlQ2xhc3NDb21wb25lbnQgPSAxNztcbnZhciBEZWh5ZHJhdGVkRnJhZ21lbnQgPSAxODtcbnZhciBTdXNwZW5zZUxpc3RDb21wb25lbnQgPSAxOTtcbnZhciBTY29wZUNvbXBvbmVudCA9IDIxO1xudmFyIE9mZnNjcmVlbkNvbXBvbmVudCA9IDIyO1xudmFyIExlZ2FjeUhpZGRlbkNvbXBvbmVudCA9IDIzO1xudmFyIENhY2hlQ29tcG9uZW50ID0gMjQ7XG52YXIgVHJhY2luZ01hcmtlckNvbXBvbmVudCA9IDI1O1xuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG52YXIgZW5hYmxlQ2xpZW50UmVuZGVyRmFsbGJhY2tPblRleHRNaXNtYXRjaCA9IHRydWU7IC8vIFRPRE86IE5lZWQgdG8gcmV2aWV3IHRoaXMgY29kZSBvbmUgbW9yZSB0aW1lIGJlZm9yZSBsYW5kaW5nXG4vLyB0aGUgcmVhY3QtcmVjb25jaWxlciBwYWNrYWdlLlxuXG52YXIgZW5hYmxlTmV3UmVjb25jaWxlciA9IGZhbHNlOyAvLyBTdXBwb3J0IGxlZ2FjeSBQcmltZXIgc3VwcG9ydCBvbiBpbnRlcm5hbCBGQiB3d3dcblxudmFyIGVuYWJsZUxhenlDb250ZXh0UHJvcGFnYXRpb24gPSBmYWxzZTsgLy8gRkItb25seSB1c2FnZS4gVGhlIG5ldyBBUEkgaGFzIGRpZmZlcmVudCBzZW1hbnRpY3MuXG5cbnZhciBlbmFibGVMZWdhY3lIaWRkZW4gPSBmYWxzZTsgLy8gRW5hYmxlcyB1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayBmZWF0dXJlIGluIEZpYmVyXG5cbnZhciBlbmFibGVTdXNwZW5zZUF2b2lkVGhpc0ZhbGxiYWNrID0gZmFsc2U7IC8vIEVuYWJsZXMgdW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2sgZmVhdHVyZSBpbiBGaXp6XG4vLyBSZWFjdCBET00gQ2hvcHBpbmcgQmxvY2tcbi8vXG4vLyBTaW1pbGFyIHRvIG1haW4gQ2hvcHBpbmcgQmxvY2sgYnV0IG9ubHkgZmxhZ3MgcmVsYXRlZCB0byBSZWFjdCBET00uIFRoZXNlIGFyZVxuLy8gZ3JvdXBlZCBiZWNhdXNlIHdlIHdpbGwgbGlrZWx5IGJhdGNoIGFsbCBvZiB0aGVtIGludG8gYSBzaW5nbGUgbWFqb3IgcmVsZWFzZS5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBEaXNhYmxlIHN1cHBvcnQgZm9yIGNvbW1lbnQgbm9kZXMgYXMgUmVhY3QgRE9NIGNvbnRhaW5lcnMuIEFscmVhZHkgZGlzYWJsZWRcbi8vIGluIG9wZW4gc291cmNlLCBidXQgd3d3IGNvZGViYXNlIHN0aWxsIHJlbGllcyBvbiBpdC4gTmVlZCB0byByZW1vdmUuXG5cbnZhciBkaXNhYmxlQ29tbWVudHNBc0RPTUNvbnRhaW5lcnMgPSB0cnVlOyAvLyBEaXNhYmxlIGphdmFzY3JpcHQ6IFVSTCBzdHJpbmdzIGluIGhyZWYgZm9yIFhTUyBwcm90ZWN0aW9uLlxuLy8gYW5kIGNsaWVudCByZW5kZXJpbmcsIG1vc3RseSB0byBhbGxvdyBKU1ggYXR0cmlidXRlcyB0byBhcHBseSB0byB0aGUgY3VzdG9tXG4vLyBlbGVtZW50J3Mgb2JqZWN0IHByb3BlcnRpZXMgaW5zdGVhZCBvZiBvbmx5IEhUTUwgYXR0cmlidXRlcy5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTEzNDdcblxudmFyIGVuYWJsZUN1c3RvbUVsZW1lbnRQcm9wZXJ0eVN1cHBvcnQgPSBmYWxzZTsgLy8gRGlzYWJsZXMgY2hpbGRyZW4gZm9yIDx0ZXh0YXJlYT4gZWxlbWVudHNcbnZhciB3YXJuQWJvdXRTdHJpbmdSZWZzID0gdHJ1ZTsgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIERlYnVnZ2luZyBhbmQgRGV2VG9vbHNcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBBZGRzIHVzZXIgdGltaW5nIG1hcmtzIGZvciBlLmcuIHN0YXRlIHVwZGF0ZXMsIHN1c3BlbnNlLCBhbmQgd29yayBsb29wIHN0dWZmLFxuLy8gZm9yIGFuIGV4cGVyaW1lbnRhbCB0aW1lbGluZSB0b29sLlxuXG52YXIgZW5hYmxlU2NoZWR1bGluZ1Byb2ZpbGVyID0gdHJ1ZTsgLy8gSGVscHMgaWRlbnRpZnkgc2lkZSBlZmZlY3RzIGluIHJlbmRlci1waGFzZSBsaWZlY3ljbGUgaG9va3MgYW5kIHNldFN0YXRlXG5cbnZhciBlbmFibGVQcm9maWxlclRpbWVyID0gdHJ1ZTsgLy8gUmVjb3JkIGR1cmF0aW9ucyBmb3IgY29tbWl0IGFuZCBwYXNzaXZlIGVmZmVjdHMgcGhhc2VzLlxuXG52YXIgZW5hYmxlUHJvZmlsZXJDb21taXRIb29rcyA9IHRydWU7IC8vIFBoYXNlIHBhcmFtIHBhc3NlZCB0byBvblJlbmRlciBjYWxsYmFjayBkaWZmZXJlbnRpYXRlcyBiZXR3ZWVuIGFuIFwidXBkYXRlXCIgYW5kIGEgXCJjYXNjYWRpbmctdXBkYXRlXCIuXG5cbnZhciBhbGxOYXRpdmVFdmVudHMgPSBuZXcgU2V0KCk7XG4vKipcbiAqIE1hcHBpbmcgZnJvbSByZWdpc3RyYXRpb24gbmFtZSB0byBldmVudCBuYW1lXG4gKi9cblxuXG52YXIgcmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyA9IHt9O1xuLyoqXG4gKiBNYXBwaW5nIGZyb20gbG93ZXJjYXNlIHJlZ2lzdHJhdGlvbiBuYW1lcyB0byB0aGUgcHJvcGVybHkgY2FzZWQgdmVyc2lvbixcbiAqIHVzZWQgdG8gd2FybiBpbiB0aGUgY2FzZSBvZiBtaXNzaW5nIGV2ZW50IGhhbmRsZXJzLiBBdmFpbGFibGVcbiAqIG9ubHkgaW4gdHJ1ZS5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblxudmFyIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMgPSAge30gOyAvLyBUcnVzdCB0aGUgZGV2ZWxvcGVyIHRvIG9ubHkgdXNlIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMgaW4gdHJ1ZVxuXG5mdW5jdGlvbiByZWdpc3RlclR3b1BoYXNlRXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgZGVwZW5kZW5jaWVzKSB7XG4gIHJlZ2lzdGVyRGlyZWN0RXZlbnQocmVnaXN0cmF0aW9uTmFtZSwgZGVwZW5kZW5jaWVzKTtcbiAgcmVnaXN0ZXJEaXJlY3RFdmVudChyZWdpc3RyYXRpb25OYW1lICsgJ0NhcHR1cmUnLCBkZXBlbmRlbmNpZXMpO1xufVxuZnVuY3Rpb24gcmVnaXN0ZXJEaXJlY3RFdmVudChyZWdpc3RyYXRpb25OYW1lLCBkZXBlbmRlbmNpZXMpIHtcbiAge1xuICAgIGlmIChyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW3JlZ2lzdHJhdGlvbk5hbWVdKSB7XG4gICAgICBlcnJvcignRXZlbnRSZWdpc3RyeTogTW9yZSB0aGFuIG9uZSBwbHVnaW4gYXR0ZW1wdGVkIHRvIHB1Ymxpc2ggdGhlIHNhbWUgJyArICdyZWdpc3RyYXRpb24gbmFtZSwgYCVzYC4nLCByZWdpc3RyYXRpb25OYW1lKTtcbiAgICB9XG4gIH1cblxuICByZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzW3JlZ2lzdHJhdGlvbk5hbWVdID0gZGVwZW5kZW5jaWVzO1xuXG4gIHtcbiAgICB2YXIgbG93ZXJDYXNlZE5hbWUgPSByZWdpc3RyYXRpb25OYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgcG9zc2libGVSZWdpc3RyYXRpb25OYW1lc1tsb3dlckNhc2VkTmFtZV0gPSByZWdpc3RyYXRpb25OYW1lO1xuXG4gICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWUgPT09ICdvbkRvdWJsZUNsaWNrJykge1xuICAgICAgcG9zc2libGVSZWdpc3RyYXRpb25OYW1lcy5vbmRibGNsaWNrID0gcmVnaXN0cmF0aW9uTmFtZTtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRlcGVuZGVuY2llcy5sZW5ndGg7IGkrKykge1xuICAgIGFsbE5hdGl2ZUV2ZW50cy5hZGQoZGVwZW5kZW5jaWVzW2ldKTtcbiAgfVxufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAndW5kZWZpbmVkJyk7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qXG4gKiBUaGUgYCcnICsgdmFsdWVgIHBhdHRlcm4gKHVzZWQgaW4gaW4gcGVyZi1zZW5zaXRpdmUgY29kZSkgdGhyb3dzIGZvciBTeW1ib2xcbiAqIGFuZCBUZW1wb3JhbC4qIHR5cGVzLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMjIwNjQuXG4gKlxuICogVGhlIGZ1bmN0aW9ucyBpbiB0aGlzIG1vZHVsZSB3aWxsIHRocm93IGFuIGVhc2llci10by11bmRlcnN0YW5kLFxuICogZWFzaWVyLXRvLWRlYnVnIGV4Y2VwdGlvbiB3aXRoIGEgY2xlYXIgZXJyb3JzIG1lc3NhZ2UgbWVzc2FnZSBleHBsYWluaW5nIHRoZVxuICogcHJvYmxlbS4gKEluc3RlYWQgb2YgYSBjb25mdXNpbmcgZXhjZXB0aW9uIHRocm93biBpbnNpZGUgdGhlIGltcGxlbWVudGF0aW9uXG4gKiBvZiB0aGUgYHZhbHVlYCBvYmplY3QpLlxuICovXG4vLyAkRmxvd0ZpeE1lIG9ubHkgY2FsbGVkIGluIERFViwgc28gdm9pZCByZXR1cm4gaXMgbm90IHBvc3NpYmxlLlxuZnVuY3Rpb24gdHlwZU5hbWUodmFsdWUpIHtcbiAge1xuICAgIC8vIHRvU3RyaW5nVGFnIGlzIG5lZWRlZCBmb3IgbmFtZXNwYWNlZCB0eXBlcyBsaWtlIFRlbXBvcmFsLkluc3RhbnRcbiAgICB2YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC50b1N0cmluZ1RhZztcbiAgICB2YXIgdHlwZSA9IGhhc1RvU3RyaW5nVGFnICYmIHZhbHVlW1N5bWJvbC50b1N0cmluZ1RhZ10gfHwgdmFsdWUuY29uc3RydWN0b3IubmFtZSB8fCAnT2JqZWN0JztcbiAgICByZXR1cm4gdHlwZTtcbiAgfVxufSAvLyAkRmxvd0ZpeE1lIG9ubHkgY2FsbGVkIGluIERFViwgc28gdm9pZCByZXR1cm4gaXMgbm90IHBvc3NpYmxlLlxuXG5cbmZ1bmN0aW9uIHdpbGxDb2VyY2lvblRocm93KHZhbHVlKSB7XG4gIHtcbiAgICB0cnkge1xuICAgICAgdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKSB7XG4gIC8vIElmIHlvdSBlbmRlZCB1cCBoZXJlIGJ5IGZvbGxvd2luZyBhbiBleGNlcHRpb24gY2FsbCBzdGFjaywgaGVyZSdzIHdoYXQnc1xuICAvLyBoYXBwZW5lZDogeW91IHN1cHBsaWVkIGFuIG9iamVjdCBvciBzeW1ib2wgdmFsdWUgdG8gUmVhY3QgKGFzIGEgcHJvcCwga2V5LFxuICAvLyBET00gYXR0cmlidXRlLCBDU1MgcHJvcGVydHksIHN0cmluZyByZWYsIGV0Yy4pIGFuZCB3aGVuIFJlYWN0IHRyaWVkIHRvXG4gIC8vIGNvZXJjZSBpdCB0byBhIHN0cmluZyB1c2luZyBgJycgKyB2YWx1ZWAsIGFuIGV4Y2VwdGlvbiB3YXMgdGhyb3duLlxuICAvL1xuICAvLyBUaGUgbW9zdCBjb21tb24gdHlwZXMgdGhhdCB3aWxsIGNhdXNlIHRoaXMgZXhjZXB0aW9uIGFyZSBgU3ltYm9sYCBpbnN0YW5jZXNcbiAgLy8gYW5kIFRlbXBvcmFsIG9iamVjdHMgbGlrZSBgVGVtcG9yYWwuSW5zdGFudGAuIEJ1dCBhbnkgb2JqZWN0IHRoYXQgaGFzIGFcbiAgLy8gYHZhbHVlT2ZgIG9yIGBbU3ltYm9sLnRvUHJpbWl0aXZlXWAgbWV0aG9kIHRoYXQgdGhyb3dzIHdpbGwgYWxzbyBjYXVzZSB0aGlzXG4gIC8vIGV4Y2VwdGlvbi4gKExpYnJhcnkgYXV0aG9ycyBkbyB0aGlzIHRvIHByZXZlbnQgdXNlcnMgZnJvbSB1c2luZyBidWlsdC1pblxuICAvLyBudW1lcmljIG9wZXJhdG9ycyBsaWtlIGArYCBvciBjb21wYXJpc29uIG9wZXJhdG9ycyBsaWtlIGA+PWAgYmVjYXVzZSBjdXN0b21cbiAgLy8gbWV0aG9kcyBhcmUgbmVlZGVkIHRvIHBlcmZvcm0gYWNjdXJhdGUgYXJpdGhtZXRpYyBvciBjb21wYXJpc29uLilcbiAgLy9cbiAgLy8gVG8gZml4IHRoZSBwcm9ibGVtLCBjb2VyY2UgdGhpcyBvYmplY3Qgb3Igc3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nIGJlZm9yZVxuICAvLyBwYXNzaW5nIGl0IHRvIFJlYWN0LiBUaGUgbW9zdCByZWxpYWJsZSB3YXkgaXMgdXN1YWxseSBgU3RyaW5nKHZhbHVlKWAuXG4gIC8vXG4gIC8vIFRvIGZpbmQgd2hpY2ggdmFsdWUgaXMgdGhyb3dpbmcsIGNoZWNrIHRoZSBicm93c2VyIG9yIGRlYnVnZ2VyIGNvbnNvbGUuXG4gIC8vIEJlZm9yZSB0aGlzIGV4Y2VwdGlvbiB3YXMgdGhyb3duLCB0aGVyZSBzaG91bGQgYmUgYGNvbnNvbGUuZXJyb3JgIG91dHB1dFxuICAvLyB0aGF0IHNob3dzIHRoZSB0eXBlIChTeW1ib2wsIFRlbXBvcmFsLlBsYWluRGF0ZSwgZXRjLikgdGhhdCBjYXVzZWQgdGhlXG4gIC8vIHByb2JsZW0gYW5kIGhvdyB0aGF0IHR5cGUgd2FzIHVzZWQ6IGtleSwgYXRycmlidXRlLCBpbnB1dCB2YWx1ZSBwcm9wLCBldGMuXG4gIC8vIEluIG1vc3QgY2FzZXMsIHRoaXMgY29uc29sZSBvdXRwdXQgYWxzbyBzaG93cyB0aGUgY29tcG9uZW50IGFuZCBpdHNcbiAgLy8gYW5jZXN0b3IgY29tcG9uZW50cyB3aGVyZSB0aGUgZXhjZXB0aW9uIGhhcHBlbmVkLlxuICAvL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvc2FmZS1zdHJpbmctY29lcmNpb25cbiAgcmV0dXJuICcnICsgdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGNoZWNrQXR0cmlidXRlU3RyaW5nQ29lcmNpb24odmFsdWUsIGF0dHJpYnV0ZU5hbWUpIHtcbiAge1xuICAgIGlmICh3aWxsQ29lcmNpb25UaHJvdyh2YWx1ZSkpIHtcbiAgICAgIGVycm9yKCdUaGUgcHJvdmlkZWQgYCVzYCBhdHRyaWJ1dGUgaXMgYW4gdW5zdXBwb3J0ZWQgdHlwZSAlcy4nICsgJyBUaGlzIHZhbHVlIG11c3QgYmUgY29lcmNlZCB0byBhIHN0cmluZyBiZWZvcmUgYmVmb3JlIHVzaW5nIGl0IGhlcmUuJywgYXR0cmlidXRlTmFtZSwgdHlwZU5hbWUodmFsdWUpKTtcblxuICAgICAgcmV0dXJuIHRlc3RTdHJpbmdDb2VyY2lvbih2YWx1ZSk7IC8vIHRocm93ICh0byBoZWxwIGNhbGxlcnMgZmluZCB0cm91Ymxlc2hvb3RpbmcgY29tbWVudHMpXG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBjaGVja0tleVN0cmluZ0NvZXJjaW9uKHZhbHVlKSB7XG4gIHtcbiAgICBpZiAod2lsbENvZXJjaW9uVGhyb3codmFsdWUpKSB7XG4gICAgICBlcnJvcignVGhlIHByb3ZpZGVkIGtleSBpcyBhbiB1bnN1cHBvcnRlZCB0eXBlICVzLicgKyAnIFRoaXMgdmFsdWUgbXVzdCBiZSBjb2VyY2VkIHRvIGEgc3RyaW5nIGJlZm9yZSBiZWZvcmUgdXNpbmcgaXQgaGVyZS4nLCB0eXBlTmFtZSh2YWx1ZSkpO1xuXG4gICAgICByZXR1cm4gdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKTsgLy8gdGhyb3cgKHRvIGhlbHAgY2FsbGVycyBmaW5kIHRyb3VibGVzaG9vdGluZyBjb21tZW50cylcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGNoZWNrUHJvcFN0cmluZ0NvZXJjaW9uKHZhbHVlLCBwcm9wTmFtZSkge1xuICB7XG4gICAgaWYgKHdpbGxDb2VyY2lvblRocm93KHZhbHVlKSkge1xuICAgICAgZXJyb3IoJ1RoZSBwcm92aWRlZCBgJXNgIHByb3AgaXMgYW4gdW5zdXBwb3J0ZWQgdHlwZSAlcy4nICsgJyBUaGlzIHZhbHVlIG11c3QgYmUgY29lcmNlZCB0byBhIHN0cmluZyBiZWZvcmUgYmVmb3JlIHVzaW5nIGl0IGhlcmUuJywgcHJvcE5hbWUsIHR5cGVOYW1lKHZhbHVlKSk7XG5cbiAgICAgIHJldHVybiB0ZXN0U3RyaW5nQ29lcmNpb24odmFsdWUpOyAvLyB0aHJvdyAodG8gaGVscCBjYWxsZXJzIGZpbmQgdHJvdWJsZXNob290aW5nIGNvbW1lbnRzKVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gY2hlY2tDU1NQcm9wZXJ0eVN0cmluZ0NvZXJjaW9uKHZhbHVlLCBwcm9wTmFtZSkge1xuICB7XG4gICAgaWYgKHdpbGxDb2VyY2lvblRocm93KHZhbHVlKSkge1xuICAgICAgZXJyb3IoJ1RoZSBwcm92aWRlZCBgJXNgIENTUyBwcm9wZXJ0eSBpcyBhbiB1bnN1cHBvcnRlZCB0eXBlICVzLicgKyAnIFRoaXMgdmFsdWUgbXVzdCBiZSBjb2VyY2VkIHRvIGEgc3RyaW5nIGJlZm9yZSBiZWZvcmUgdXNpbmcgaXQgaGVyZS4nLCBwcm9wTmFtZSwgdHlwZU5hbWUodmFsdWUpKTtcblxuICAgICAgcmV0dXJuIHRlc3RTdHJpbmdDb2VyY2lvbih2YWx1ZSk7IC8vIHRocm93ICh0byBoZWxwIGNhbGxlcnMgZmluZCB0cm91Ymxlc2hvb3RpbmcgY29tbWVudHMpXG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBjaGVja0h0bWxTdHJpbmdDb2VyY2lvbih2YWx1ZSkge1xuICB7XG4gICAgaWYgKHdpbGxDb2VyY2lvblRocm93KHZhbHVlKSkge1xuICAgICAgZXJyb3IoJ1RoZSBwcm92aWRlZCBIVE1MIG1hcmt1cCB1c2VzIGEgdmFsdWUgb2YgdW5zdXBwb3J0ZWQgdHlwZSAlcy4nICsgJyBUaGlzIHZhbHVlIG11c3QgYmUgY29lcmNlZCB0byBhIHN0cmluZyBiZWZvcmUgYmVmb3JlIHVzaW5nIGl0IGhlcmUuJywgdHlwZU5hbWUodmFsdWUpKTtcblxuICAgICAgcmV0dXJuIHRlc3RTdHJpbmdDb2VyY2lvbih2YWx1ZSk7IC8vIHRocm93ICh0byBoZWxwIGNhbGxlcnMgZmluZCB0cm91Ymxlc2hvb3RpbmcgY29tbWVudHMpXG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBjaGVja0Zvcm1GaWVsZFZhbHVlU3RyaW5nQ29lcmNpb24odmFsdWUpIHtcbiAge1xuICAgIGlmICh3aWxsQ29lcmNpb25UaHJvdyh2YWx1ZSkpIHtcbiAgICAgIGVycm9yKCdGb3JtIGZpZWxkIHZhbHVlcyAodmFsdWUsIGNoZWNrZWQsIGRlZmF1bHRWYWx1ZSwgb3IgZGVmYXVsdENoZWNrZWQgcHJvcHMpJyArICcgbXVzdCBiZSBzdHJpbmdzLCBub3QgJXMuJyArICcgVGhpcyB2YWx1ZSBtdXN0IGJlIGNvZXJjZWQgdG8gYSBzdHJpbmcgYmVmb3JlIGJlZm9yZSB1c2luZyBpdCBoZXJlLicsIHR5cGVOYW1lKHZhbHVlKSk7XG5cbiAgICAgIHJldHVybiB0ZXN0U3RyaW5nQ29lcmNpb24odmFsdWUpOyAvLyB0aHJvdyAodG8gaGVscCBjYWxsZXJzIGZpbmQgdHJvdWJsZXNob290aW5nIGNvbW1lbnRzKVxuICAgIH1cbiAgfVxufVxuXG4vLyBBIHJlc2VydmVkIGF0dHJpYnV0ZS5cbi8vIEl0IGlzIGhhbmRsZWQgYnkgUmVhY3Qgc2VwYXJhdGVseSBhbmQgc2hvdWxkbid0IGJlIHdyaXR0ZW4gdG8gdGhlIERPTS5cbnZhciBSRVNFUlZFRCA9IDA7IC8vIEEgc2ltcGxlIHN0cmluZyBhdHRyaWJ1dGUuXG4vLyBBdHRyaWJ1dGVzIHRoYXQgYXJlbid0IGluIHRoZSBmaWx0ZXIgYXJlIHByZXN1bWVkIHRvIGhhdmUgdGhpcyB0eXBlLlxuXG52YXIgU1RSSU5HID0gMTsgLy8gQSBzdHJpbmcgYXR0cmlidXRlIHRoYXQgYWNjZXB0cyBib29sZWFucyBpbiBSZWFjdC4gSW4gSFRNTCwgdGhlc2UgYXJlIGNhbGxlZFxuLy8gXCJlbnVtZXJhdGVkXCIgYXR0cmlidXRlcyB3aXRoIFwidHJ1ZVwiIGFuZCBcImZhbHNlXCIgYXMgcG9zc2libGUgdmFsdWVzLlxuLy8gV2hlbiB0cnVlLCBpdCBzaG91bGQgYmUgc2V0IHRvIGEgXCJ0cnVlXCIgc3RyaW5nLlxuLy8gV2hlbiBmYWxzZSwgaXQgc2hvdWxkIGJlIHNldCB0byBhIFwiZmFsc2VcIiBzdHJpbmcuXG5cbnZhciBCT09MRUFOSVNIX1NUUklORyA9IDI7IC8vIEEgcmVhbCBib29sZWFuIGF0dHJpYnV0ZS5cbi8vIFdoZW4gdHJ1ZSwgaXQgc2hvdWxkIGJlIHByZXNlbnQgKHNldCBlaXRoZXIgdG8gYW4gZW1wdHkgc3RyaW5nIG9yIGl0cyBuYW1lKS5cbi8vIFdoZW4gZmFsc2UsIGl0IHNob3VsZCBiZSBvbWl0dGVkLlxuXG52YXIgQk9PTEVBTiA9IDM7IC8vIEFuIGF0dHJpYnV0ZSB0aGF0IGNhbiBiZSB1c2VkIGFzIGEgZmxhZyBhcyB3ZWxsIGFzIHdpdGggYSB2YWx1ZS5cbi8vIFdoZW4gdHJ1ZSwgaXQgc2hvdWxkIGJlIHByZXNlbnQgKHNldCBlaXRoZXIgdG8gYW4gZW1wdHkgc3RyaW5nIG9yIGl0cyBuYW1lKS5cbi8vIFdoZW4gZmFsc2UsIGl0IHNob3VsZCBiZSBvbWl0dGVkLlxuLy8gRm9yIGFueSBvdGhlciB2YWx1ZSwgc2hvdWxkIGJlIHByZXNlbnQgd2l0aCB0aGF0IHZhbHVlLlxuXG52YXIgT1ZFUkxPQURFRF9CT09MRUFOID0gNDsgLy8gQW4gYXR0cmlidXRlIHRoYXQgbXVzdCBiZSBudW1lcmljIG9yIHBhcnNlIGFzIGEgbnVtZXJpYy5cbi8vIFdoZW4gZmFsc3ksIGl0IHNob3VsZCBiZSByZW1vdmVkLlxuXG52YXIgTlVNRVJJQyA9IDU7IC8vIEFuIGF0dHJpYnV0ZSB0aGF0IG11c3QgYmUgcG9zaXRpdmUgbnVtZXJpYyBvciBwYXJzZSBhcyBhIHBvc2l0aXZlIG51bWVyaWMuXG4vLyBXaGVuIGZhbHN5LCBpdCBzaG91bGQgYmUgcmVtb3ZlZC5cblxudmFyIFBPU0lUSVZFX05VTUVSSUMgPSA2O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG52YXIgQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiA9IFwiOkEtWl9hLXpcXFxcdTAwQzAtXFxcXHUwMEQ2XFxcXHUwMEQ4LVxcXFx1MDBGNlxcXFx1MDBGOC1cXFxcdTAyRkZcXFxcdTAzNzAtXFxcXHUwMzdEXFxcXHUwMzdGLVxcXFx1MUZGRlxcXFx1MjAwQy1cXFxcdTIwMERcXFxcdTIwNzAtXFxcXHUyMThGXFxcXHUyQzAwLVxcXFx1MkZFRlxcXFx1MzAwMS1cXFxcdUQ3RkZcXFxcdUY5MDAtXFxcXHVGRENGXFxcXHVGREYwLVxcXFx1RkZGRFwiO1xuLyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5cbnZhciBBVFRSSUJVVEVfTkFNRV9DSEFSID0gQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiArIFwiXFxcXC0uMC05XFxcXHUwMEI3XFxcXHUwMzAwLVxcXFx1MDM2RlxcXFx1MjAzRi1cXFxcdTIwNDBcIjtcbnZhciBWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCA9IG5ldyBSZWdFeHAoJ15bJyArIEFUVFJJQlVURV9OQU1FX1NUQVJUX0NIQVIgKyAnXVsnICsgQVRUUklCVVRFX05BTUVfQ0hBUiArICddKiQnKTtcbnZhciBpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlID0ge307XG52YXIgdmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlID0ge307XG5mdW5jdGlvbiBpc0F0dHJpYnV0ZU5hbWVTYWZlKGF0dHJpYnV0ZU5hbWUpIHtcbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwodmFsaWRhdGVkQXR0cmlidXRlTmFtZUNhY2hlLCBhdHRyaWJ1dGVOYW1lKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoaWxsZWdhbEF0dHJpYnV0ZU5hbWVDYWNoZSwgYXR0cmlidXRlTmFtZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoVkFMSURfQVRUUklCVVRFX05BTUVfUkVHRVgudGVzdChhdHRyaWJ1dGVOYW1lKSkge1xuICAgIHZhbGlkYXRlZEF0dHJpYnV0ZU5hbWVDYWNoZVthdHRyaWJ1dGVOYW1lXSA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpbGxlZ2FsQXR0cmlidXRlTmFtZUNhY2hlW2F0dHJpYnV0ZU5hbWVdID0gdHJ1ZTtcblxuICB7XG4gICAgZXJyb3IoJ0ludmFsaWQgYXR0cmlidXRlIG5hbWU6IGAlc2AnLCBhdHRyaWJ1dGVOYW1lKTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHNob3VsZElnbm9yZUF0dHJpYnV0ZShuYW1lLCBwcm9wZXJ0eUluZm8sIGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gIGlmIChwcm9wZXJ0eUluZm8gIT09IG51bGwpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJbmZvLnR5cGUgPT09IFJFU0VSVkVEO1xuICB9XG5cbiAgaWYgKGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKG5hbWUubGVuZ3RoID4gMiAmJiAobmFtZVswXSA9PT0gJ28nIHx8IG5hbWVbMF0gPT09ICdPJykgJiYgKG5hbWVbMV0gPT09ICduJyB8fCBuYW1lWzFdID09PSAnTicpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBzaG91bGRSZW1vdmVBdHRyaWJ1dGVXaXRoV2FybmluZyhuYW1lLCB2YWx1ZSwgcHJvcGVydHlJbmZvLCBpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICBpZiAocHJvcGVydHlJbmZvICE9PSBudWxsICYmIHByb3BlcnR5SW5mby50eXBlID09PSBSRVNFUlZFRCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN3aXRjaCAodHlwZW9mIHZhbHVlKSB7XG4gICAgY2FzZSAnZnVuY3Rpb24nOiAvLyAkRmxvd0lzc3VlIHN5bWJvbCBpcyBwZXJmZWN0bHkgdmFsaWQgaGVyZVxuXG4gICAgY2FzZSAnc3ltYm9sJzpcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICB7XG4gICAgICAgIGlmIChpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9wZXJ0eUluZm8gIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gIXByb3BlcnR5SW5mby5hY2NlcHRzQm9vbGVhbnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZWZpeCA9IG5hbWUudG9Mb3dlckNhc2UoKS5zbGljZSgwLCA1KTtcbiAgICAgICAgICByZXR1cm4gcHJlZml4ICE9PSAnZGF0YS0nICYmIHByZWZpeCAhPT0gJ2FyaWEtJztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuZnVuY3Rpb24gc2hvdWxkUmVtb3ZlQXR0cmlidXRlKG5hbWUsIHZhbHVlLCBwcm9wZXJ0eUluZm8sIGlzQ3VzdG9tQ29tcG9uZW50VGFnKSB7XG4gIGlmICh2YWx1ZSA9PT0gbnVsbCB8fCB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoc2hvdWxkUmVtb3ZlQXR0cmlidXRlV2l0aFdhcm5pbmcobmFtZSwgdmFsdWUsIHByb3BlcnR5SW5mbywgaXNDdXN0b21Db21wb25lbnRUYWcpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoaXNDdXN0b21Db21wb25lbnRUYWcpIHtcblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChwcm9wZXJ0eUluZm8gIT09IG51bGwpIHtcblxuICAgIHN3aXRjaCAocHJvcGVydHlJbmZvLnR5cGUpIHtcbiAgICAgIGNhc2UgQk9PTEVBTjpcbiAgICAgICAgcmV0dXJuICF2YWx1ZTtcblxuICAgICAgY2FzZSBPVkVSTE9BREVEX0JPT0xFQU46XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gZmFsc2U7XG5cbiAgICAgIGNhc2UgTlVNRVJJQzpcbiAgICAgICAgcmV0dXJuIGlzTmFOKHZhbHVlKTtcblxuICAgICAgY2FzZSBQT1NJVElWRV9OVU1FUklDOlxuICAgICAgICByZXR1cm4gaXNOYU4odmFsdWUpIHx8IHZhbHVlIDwgMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBnZXRQcm9wZXJ0eUluZm8obmFtZSkge1xuICByZXR1cm4gcHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHByb3BlcnRpZXNbbmFtZV0gOiBudWxsO1xufVxuXG5mdW5jdGlvbiBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgdHlwZSwgbXVzdFVzZVByb3BlcnR5LCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVOYW1lc3BhY2UsIHNhbml0aXplVVJMLCByZW1vdmVFbXB0eVN0cmluZykge1xuICB0aGlzLmFjY2VwdHNCb29sZWFucyA9IHR5cGUgPT09IEJPT0xFQU5JU0hfU1RSSU5HIHx8IHR5cGUgPT09IEJPT0xFQU4gfHwgdHlwZSA9PT0gT1ZFUkxPQURFRF9CT09MRUFOO1xuICB0aGlzLmF0dHJpYnV0ZU5hbWUgPSBhdHRyaWJ1dGVOYW1lO1xuICB0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZSA9IGF0dHJpYnV0ZU5hbWVzcGFjZTtcbiAgdGhpcy5tdXN0VXNlUHJvcGVydHkgPSBtdXN0VXNlUHJvcGVydHk7XG4gIHRoaXMucHJvcGVydHlOYW1lID0gbmFtZTtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5zYW5pdGl6ZVVSTCA9IHNhbml0aXplVVJMO1xuICB0aGlzLnJlbW92ZUVtcHR5U3RyaW5nID0gcmVtb3ZlRW1wdHlTdHJpbmc7XG59IC8vIFdoZW4gYWRkaW5nIGF0dHJpYnV0ZXMgdG8gdGhpcyBsaXN0LCBiZSBzdXJlIHRvIGFsc28gYWRkIHRoZW0gdG9cbi8vIHRoZSBgcG9zc2libGVTdGFuZGFyZE5hbWVzYCBtb2R1bGUgdG8gZW5zdXJlIGNhc2luZyBhbmQgaW5jb3JyZWN0XG4vLyBuYW1lIHdhcm5pbmdzLlxuXG5cbnZhciBwcm9wZXJ0aWVzID0ge307IC8vIFRoZXNlIHByb3BzIGFyZSByZXNlcnZlZCBieSBSZWFjdC4gVGhleSBzaG91bGRuJ3QgYmUgd3JpdHRlbiB0byB0aGUgRE9NLlxuXG52YXIgcmVzZXJ2ZWRQcm9wcyA9IFsnY2hpbGRyZW4nLCAnZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwnLCAvLyBUT0RPOiBUaGlzIHByZXZlbnRzIHRoZSBhc3NpZ25tZW50IG9mIGRlZmF1bHRWYWx1ZSB0byByZWd1bGFyXG4vLyBlbGVtZW50cyAobm90IGp1c3QgaW5wdXRzKS4gTm93IHRoYXQgUmVhY3RET01JbnB1dCBhc3NpZ25zIHRvIHRoZVxuLy8gZGVmYXVsdFZhbHVlIHByb3BlcnR5IC0tIGRvIHdlIG5lZWQgdGhpcz9cbidkZWZhdWx0VmFsdWUnLCAnZGVmYXVsdENoZWNrZWQnLCAnaW5uZXJIVE1MJywgJ3N1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZycsICdzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcnLCAnc3R5bGUnXTtcblxucmVzZXJ2ZWRQcm9wcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIFJFU0VSVkVELCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIG5hbWUsIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCwgLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4gIGZhbHNlLCAvLyBzYW5pdGl6ZVVSTFxuICBmYWxzZSk7XG59KTsgLy8gQSBmZXcgUmVhY3Qgc3RyaW5nIGF0dHJpYnV0ZXMgaGF2ZSBhIGRpZmZlcmVudCBuYW1lLlxuLy8gVGhpcyBpcyBhIG1hcHBpbmcgZnJvbSBSZWFjdCBwcm9wIG5hbWVzIHRvIHRoZSBhdHRyaWJ1dGUgbmFtZXMuXG5cbltbJ2FjY2VwdENoYXJzZXQnLCAnYWNjZXB0LWNoYXJzZXQnXSwgWydjbGFzc05hbWUnLCAnY2xhc3MnXSwgWydodG1sRm9yJywgJ2ZvciddLCBbJ2h0dHBFcXVpdicsICdodHRwLWVxdWl2J11dLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgdmFyIG5hbWUgPSBfcmVmWzBdLFxuICAgICAgYXR0cmlidXRlTmFtZSA9IF9yZWZbMV07XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIFNUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBhdHRyaWJ1dGVOYW1lLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwsIC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuICBmYWxzZSwgLy8gc2FuaXRpemVVUkxcbiAgZmFsc2UpO1xufSk7IC8vIFRoZXNlIGFyZSBcImVudW1lcmF0ZWRcIiBIVE1MIGF0dHJpYnV0ZXMgdGhhdCBhY2NlcHQgXCJ0cnVlXCIgYW5kIFwiZmFsc2VcIi5cbi8vIEluIFJlYWN0LCB3ZSBsZXQgdXNlcnMgcGFzcyBgdHJ1ZWAgYW5kIGBmYWxzZWAgZXZlbiB0aG91Z2ggdGVjaG5pY2FsbHlcbi8vIHRoZXNlIGFyZW4ndCBib29sZWFuIGF0dHJpYnV0ZXMgKHRoZXkgYXJlIGNvZXJjZWQgdG8gc3RyaW5ncykuXG5cblsnY29udGVudEVkaXRhYmxlJywgJ2RyYWdnYWJsZScsICdzcGVsbENoZWNrJywgJ3ZhbHVlJ10uZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICBwcm9wZXJ0aWVzW25hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChuYW1lLCBCT09MRUFOSVNIX1NUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLnRvTG93ZXJDYXNlKCksIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCwgLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4gIGZhbHNlLCAvLyBzYW5pdGl6ZVVSTFxuICBmYWxzZSk7XG59KTsgLy8gVGhlc2UgYXJlIFwiZW51bWVyYXRlZFwiIFNWRyBhdHRyaWJ1dGVzIHRoYXQgYWNjZXB0IFwidHJ1ZVwiIGFuZCBcImZhbHNlXCIuXG4vLyBJbiBSZWFjdCwgd2UgbGV0IHVzZXJzIHBhc3MgYHRydWVgIGFuZCBgZmFsc2VgIGV2ZW4gdGhvdWdoIHRlY2huaWNhbGx5XG4vLyB0aGVzZSBhcmVuJ3QgYm9vbGVhbiBhdHRyaWJ1dGVzICh0aGV5IGFyZSBjb2VyY2VkIHRvIHN0cmluZ3MpLlxuLy8gU2luY2UgdGhlc2UgYXJlIFNWRyBhdHRyaWJ1dGVzLCB0aGVpciBhdHRyaWJ1dGUgbmFtZXMgYXJlIGNhc2Utc2Vuc2l0aXZlLlxuXG5bJ2F1dG9SZXZlcnNlJywgJ2V4dGVybmFsUmVzb3VyY2VzUmVxdWlyZWQnLCAnZm9jdXNhYmxlJywgJ3ByZXNlcnZlQWxwaGEnXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIEJPT0xFQU5JU0hfU1RSSU5HLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIG5hbWUsIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCwgLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4gIGZhbHNlLCAvLyBzYW5pdGl6ZVVSTFxuICBmYWxzZSk7XG59KTsgLy8gVGhlc2UgYXJlIEhUTUwgYm9vbGVhbiBhdHRyaWJ1dGVzLlxuXG5bJ2FsbG93RnVsbFNjcmVlbicsICdhc3luYycsIC8vIE5vdGU6IHRoZXJlIGlzIGEgc3BlY2lhbCBjYXNlIHRoYXQgcHJldmVudHMgaXQgZnJvbSBiZWluZyB3cml0dGVuIHRvIHRoZSBET01cbi8vIG9uIHRoZSBjbGllbnQgc2lkZSBiZWNhdXNlIHRoZSBicm93c2VycyBhcmUgaW5jb25zaXN0ZW50LiBJbnN0ZWFkIHdlIGNhbGwgZm9jdXMoKS5cbidhdXRvRm9jdXMnLCAnYXV0b1BsYXknLCAnY29udHJvbHMnLCAnZGVmYXVsdCcsICdkZWZlcicsICdkaXNhYmxlZCcsICdkaXNhYmxlUGljdHVyZUluUGljdHVyZScsICdkaXNhYmxlUmVtb3RlUGxheWJhY2snLCAnZm9ybU5vVmFsaWRhdGUnLCAnaGlkZGVuJywgJ2xvb3AnLCAnbm9Nb2R1bGUnLCAnbm9WYWxpZGF0ZScsICdvcGVuJywgJ3BsYXlzSW5saW5lJywgJ3JlYWRPbmx5JywgJ3JlcXVpcmVkJywgJ3JldmVyc2VkJywgJ3Njb3BlZCcsICdzZWFtbGVzcycsIC8vIE1pY3JvZGF0YVxuJ2l0ZW1TY29wZSddLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgQk9PTEVBTiwgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLnRvTG93ZXJDYXNlKCksIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCwgLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4gIGZhbHNlLCAvLyBzYW5pdGl6ZVVSTFxuICBmYWxzZSk7XG59KTsgLy8gVGhlc2UgYXJlIHRoZSBmZXcgUmVhY3QgcHJvcHMgdGhhdCB3ZSBzZXQgYXMgRE9NIHByb3BlcnRpZXNcbi8vIHJhdGhlciB0aGFuIGF0dHJpYnV0ZXMuIFRoZXNlIGFyZSBhbGwgYm9vbGVhbnMuXG5cblsnY2hlY2tlZCcsIC8vIE5vdGU6IGBvcHRpb24uc2VsZWN0ZWRgIGlzIG5vdCB1cGRhdGVkIGlmIGBzZWxlY3QubXVsdGlwbGVgIGlzXG4vLyBkaXNhYmxlZCB3aXRoIGByZW1vdmVBdHRyaWJ1dGVgLiBXZSBoYXZlIHNwZWNpYWwgbG9naWMgZm9yIGhhbmRsaW5nIHRoaXMuXG4nbXVsdGlwbGUnLCAnbXV0ZWQnLCAnc2VsZWN0ZWQnIC8vIE5PVEU6IGlmIHlvdSBhZGQgYSBjYW1lbENhc2VkIHByb3AgdG8gdGhpcyBsaXN0LFxuLy8geW91J2xsIG5lZWQgdG8gc2V0IGF0dHJpYnV0ZU5hbWUgdG8gbmFtZS50b0xvd2VyQ2FzZSgpXG4vLyBpbnN0ZWFkIGluIHRoZSBhc3NpZ25tZW50IGJlbG93LlxuXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIEJPT0xFQU4sIHRydWUsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwsIC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuICBmYWxzZSwgLy8gc2FuaXRpemVVUkxcbiAgZmFsc2UpO1xufSk7IC8vIFRoZXNlIGFyZSBIVE1MIGF0dHJpYnV0ZXMgdGhhdCBhcmUgXCJvdmVybG9hZGVkIGJvb2xlYW5zXCI6IHRoZXkgYmVoYXZlIGxpa2Vcbi8vIGJvb2xlYW5zLCBidXQgY2FuIGFsc28gYWNjZXB0IGEgc3RyaW5nIHZhbHVlLlxuXG5bJ2NhcHR1cmUnLCAnZG93bmxvYWQnIC8vIE5PVEU6IGlmIHlvdSBhZGQgYSBjYW1lbENhc2VkIHByb3AgdG8gdGhpcyBsaXN0LFxuLy8geW91J2xsIG5lZWQgdG8gc2V0IGF0dHJpYnV0ZU5hbWUgdG8gbmFtZS50b0xvd2VyQ2FzZSgpXG4vLyBpbnN0ZWFkIGluIHRoZSBhc3NpZ25tZW50IGJlbG93LlxuXS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIE9WRVJMT0FERURfQk9PTEVBTiwgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwsIC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuICBmYWxzZSwgLy8gc2FuaXRpemVVUkxcbiAgZmFsc2UpO1xufSk7IC8vIFRoZXNlIGFyZSBIVE1MIGF0dHJpYnV0ZXMgdGhhdCBtdXN0IGJlIHBvc2l0aXZlIG51bWJlcnMuXG5cblsnY29scycsICdyb3dzJywgJ3NpemUnLCAnc3BhbicgLy8gTk9URTogaWYgeW91IGFkZCBhIGNhbWVsQ2FzZWQgcHJvcCB0byB0aGlzIGxpc3QsXG4vLyB5b3UnbGwgbmVlZCB0byBzZXQgYXR0cmlidXRlTmFtZSB0byBuYW1lLnRvTG93ZXJDYXNlKClcbi8vIGluc3RlYWQgaW4gdGhlIGFzc2lnbm1lbnQgYmVsb3cuXG5dLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgUE9TSVRJVkVfTlVNRVJJQywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwsIC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuICBmYWxzZSwgLy8gc2FuaXRpemVVUkxcbiAgZmFsc2UpO1xufSk7IC8vIFRoZXNlIGFyZSBIVE1MIGF0dHJpYnV0ZXMgdGhhdCBtdXN0IGJlIG51bWJlcnMuXG5cblsncm93U3BhbicsICdzdGFydCddLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgTlVNRVJJQywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBuYW1lLnRvTG93ZXJDYXNlKCksIC8vIGF0dHJpYnV0ZU5hbWVcbiAgbnVsbCwgLy8gYXR0cmlidXRlTmFtZXNwYWNlXG4gIGZhbHNlLCAvLyBzYW5pdGl6ZVVSTFxuICBmYWxzZSk7XG59KTtcbnZhciBDQU1FTElaRSA9IC9bXFwtXFw6XShbYS16XSkvZztcblxudmFyIGNhcGl0YWxpemUgPSBmdW5jdGlvbiAodG9rZW4pIHtcbiAgcmV0dXJuIHRva2VuWzFdLnRvVXBwZXJDYXNlKCk7XG59OyAvLyBUaGlzIGlzIGEgbGlzdCBvZiBhbGwgU1ZHIGF0dHJpYnV0ZXMgdGhhdCBuZWVkIHNwZWNpYWwgY2FzaW5nLCBuYW1lc3BhY2luZyxcbi8vIG9yIGJvb2xlYW4gdmFsdWUgYXNzaWdubWVudC4gUmVndWxhciBhdHRyaWJ1dGVzIHRoYXQganVzdCBhY2NlcHQgc3RyaW5nc1xuLy8gYW5kIGhhdmUgdGhlIHNhbWUgbmFtZXMgYXJlIG9taXR0ZWQsIGp1c3QgbGlrZSBpbiB0aGUgSFRNTCBhdHRyaWJ1dGUgZmlsdGVyLlxuLy8gU29tZSBvZiB0aGVzZSBhdHRyaWJ1dGVzIGNhbiBiZSBoYXJkIHRvIGZpbmQuIFRoaXMgbGlzdCB3YXMgY3JlYXRlZCBieVxuLy8gc2NyYXBpbmcgdGhlIE1ETiBkb2N1bWVudGF0aW9uLlxuXG5cblsnYWNjZW50LWhlaWdodCcsICdhbGlnbm1lbnQtYmFzZWxpbmUnLCAnYXJhYmljLWZvcm0nLCAnYmFzZWxpbmUtc2hpZnQnLCAnY2FwLWhlaWdodCcsICdjbGlwLXBhdGgnLCAnY2xpcC1ydWxlJywgJ2NvbG9yLWludGVycG9sYXRpb24nLCAnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJywgJ2NvbG9yLXByb2ZpbGUnLCAnY29sb3ItcmVuZGVyaW5nJywgJ2RvbWluYW50LWJhc2VsaW5lJywgJ2VuYWJsZS1iYWNrZ3JvdW5kJywgJ2ZpbGwtb3BhY2l0eScsICdmaWxsLXJ1bGUnLCAnZmxvb2QtY29sb3InLCAnZmxvb2Qtb3BhY2l0eScsICdmb250LWZhbWlseScsICdmb250LXNpemUnLCAnZm9udC1zaXplLWFkanVzdCcsICdmb250LXN0cmV0Y2gnLCAnZm9udC1zdHlsZScsICdmb250LXZhcmlhbnQnLCAnZm9udC13ZWlnaHQnLCAnZ2x5cGgtbmFtZScsICdnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsJywgJ2dseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsJywgJ2hvcml6LWFkdi14JywgJ2hvcml6LW9yaWdpbi14JywgJ2ltYWdlLXJlbmRlcmluZycsICdsZXR0ZXItc3BhY2luZycsICdsaWdodGluZy1jb2xvcicsICdtYXJrZXItZW5kJywgJ21hcmtlci1taWQnLCAnbWFya2VyLXN0YXJ0JywgJ292ZXJsaW5lLXBvc2l0aW9uJywgJ292ZXJsaW5lLXRoaWNrbmVzcycsICdwYWludC1vcmRlcicsICdwYW5vc2UtMScsICdwb2ludGVyLWV2ZW50cycsICdyZW5kZXJpbmctaW50ZW50JywgJ3NoYXBlLXJlbmRlcmluZycsICdzdG9wLWNvbG9yJywgJ3N0b3Atb3BhY2l0eScsICdzdHJpa2V0aHJvdWdoLXBvc2l0aW9uJywgJ3N0cmlrZXRocm91Z2gtdGhpY2tuZXNzJywgJ3N0cm9rZS1kYXNoYXJyYXknLCAnc3Ryb2tlLWRhc2hvZmZzZXQnLCAnc3Ryb2tlLWxpbmVjYXAnLCAnc3Ryb2tlLWxpbmVqb2luJywgJ3N0cm9rZS1taXRlcmxpbWl0JywgJ3N0cm9rZS1vcGFjaXR5JywgJ3N0cm9rZS13aWR0aCcsICd0ZXh0LWFuY2hvcicsICd0ZXh0LWRlY29yYXRpb24nLCAndGV4dC1yZW5kZXJpbmcnLCAndW5kZXJsaW5lLXBvc2l0aW9uJywgJ3VuZGVybGluZS10aGlja25lc3MnLCAndW5pY29kZS1iaWRpJywgJ3VuaWNvZGUtcmFuZ2UnLCAndW5pdHMtcGVyLWVtJywgJ3YtYWxwaGFiZXRpYycsICd2LWhhbmdpbmcnLCAndi1pZGVvZ3JhcGhpYycsICd2LW1hdGhlbWF0aWNhbCcsICd2ZWN0b3ItZWZmZWN0JywgJ3ZlcnQtYWR2LXknLCAndmVydC1vcmlnaW4teCcsICd2ZXJ0LW9yaWdpbi15JywgJ3dvcmQtc3BhY2luZycsICd3cml0aW5nLW1vZGUnLCAneG1sbnM6eGxpbmsnLCAneC1oZWlnaHQnIC8vIE5PVEU6IGlmIHlvdSBhZGQgYSBjYW1lbENhc2VkIHByb3AgdG8gdGhpcyBsaXN0LFxuLy8geW91J2xsIG5lZWQgdG8gc2V0IGF0dHJpYnV0ZU5hbWUgdG8gbmFtZS50b0xvd2VyQ2FzZSgpXG4vLyBpbnN0ZWFkIGluIHRoZSBhc3NpZ25tZW50IGJlbG93LlxuXS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lKSB7XG4gIHZhciBuYW1lID0gYXR0cmlidXRlTmFtZS5yZXBsYWNlKENBTUVMSVpFLCBjYXBpdGFsaXplKTtcbiAgcHJvcGVydGllc1tuYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQobmFtZSwgU1RSSU5HLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIGF0dHJpYnV0ZU5hbWUsIG51bGwsIC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuICBmYWxzZSwgLy8gc2FuaXRpemVVUkxcbiAgZmFsc2UpO1xufSk7IC8vIFN0cmluZyBTVkcgYXR0cmlidXRlcyB3aXRoIHRoZSB4bGluayBuYW1lc3BhY2UuXG5cblsneGxpbms6YWN0dWF0ZScsICd4bGluazphcmNyb2xlJywgJ3hsaW5rOnJvbGUnLCAneGxpbms6c2hvdycsICd4bGluazp0aXRsZScsICd4bGluazp0eXBlJyAvLyBOT1RFOiBpZiB5b3UgYWRkIGEgY2FtZWxDYXNlZCBwcm9wIHRvIHRoaXMgbGlzdCxcbi8vIHlvdSdsbCBuZWVkIHRvIHNldCBhdHRyaWJ1dGVOYW1lIHRvIG5hbWUudG9Mb3dlckNhc2UoKVxuLy8gaW5zdGVhZCBpbiB0aGUgYXNzaWdubWVudCBiZWxvdy5cbl0uZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSkge1xuICB2YXIgbmFtZSA9IGF0dHJpYnV0ZU5hbWUucmVwbGFjZShDQU1FTElaRSwgY2FwaXRhbGl6ZSk7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIFNUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBhdHRyaWJ1dGVOYW1lLCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIGZhbHNlLCAvLyBzYW5pdGl6ZVVSTFxuICBmYWxzZSk7XG59KTsgLy8gU3RyaW5nIFNWRyBhdHRyaWJ1dGVzIHdpdGggdGhlIHhtbCBuYW1lc3BhY2UuXG5cblsneG1sOmJhc2UnLCAneG1sOmxhbmcnLCAneG1sOnNwYWNlJyAvLyBOT1RFOiBpZiB5b3UgYWRkIGEgY2FtZWxDYXNlZCBwcm9wIHRvIHRoaXMgbGlzdCxcbi8vIHlvdSdsbCBuZWVkIHRvIHNldCBhdHRyaWJ1dGVOYW1lIHRvIG5hbWUudG9Mb3dlckNhc2UoKVxuLy8gaW5zdGVhZCBpbiB0aGUgYXNzaWdubWVudCBiZWxvdy5cbl0uZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSkge1xuICB2YXIgbmFtZSA9IGF0dHJpYnV0ZU5hbWUucmVwbGFjZShDQU1FTElaRSwgY2FwaXRhbGl6ZSk7XG4gIHByb3BlcnRpZXNbbmFtZV0gPSBuZXcgUHJvcGVydHlJbmZvUmVjb3JkKG5hbWUsIFNUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuICBhdHRyaWJ1dGVOYW1lLCAnaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlJywgZmFsc2UsIC8vIHNhbml0aXplVVJMXG4gIGZhbHNlKTtcbn0pOyAvLyBUaGVzZSBhdHRyaWJ1dGUgZXhpc3RzIGJvdGggaW4gSFRNTCBhbmQgU1ZHLlxuLy8gVGhlIGF0dHJpYnV0ZSBuYW1lIGlzIGNhc2Utc2Vuc2l0aXZlIGluIFNWRyBzbyB3ZSBjYW4ndCBqdXN0IHVzZVxuLy8gdGhlIFJlYWN0IG5hbWUgbGlrZSB3ZSBkbyBmb3IgYXR0cmlidXRlcyB0aGF0IGV4aXN0IG9ubHkgaW4gSFRNTC5cblxuWyd0YWJJbmRleCcsICdjcm9zc09yaWdpbiddLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZU5hbWUpIHtcbiAgcHJvcGVydGllc1thdHRyaWJ1dGVOYW1lXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQoYXR0cmlidXRlTmFtZSwgU1RSSU5HLCBmYWxzZSwgLy8gbXVzdFVzZVByb3BlcnR5XG4gIGF0dHJpYnV0ZU5hbWUudG9Mb3dlckNhc2UoKSwgLy8gYXR0cmlidXRlTmFtZVxuICBudWxsLCAvLyBhdHRyaWJ1dGVOYW1lc3BhY2VcbiAgZmFsc2UsIC8vIHNhbml0aXplVVJMXG4gIGZhbHNlKTtcbn0pOyAvLyBUaGVzZSBhdHRyaWJ1dGVzIGFjY2VwdCBVUkxzLiBUaGVzZSBtdXN0IG5vdCBhbGxvdyBqYXZhc2NyaXB0OiBVUkxTLlxuLy8gVGhlc2Ugd2lsbCBhbHNvIG5lZWQgdG8gYWNjZXB0IFRydXN0ZWQgVHlwZXMgb2JqZWN0IGluIHRoZSBmdXR1cmUuXG5cbnZhciB4bGlua0hyZWYgPSAneGxpbmtIcmVmJztcbnByb3BlcnRpZXNbeGxpbmtIcmVmXSA9IG5ldyBQcm9wZXJ0eUluZm9SZWNvcmQoJ3hsaW5rSHJlZicsIFNUUklORywgZmFsc2UsIC8vIG11c3RVc2VQcm9wZXJ0eVxuJ3hsaW5rOmhyZWYnLCAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIHRydWUsIC8vIHNhbml0aXplVVJMXG5mYWxzZSk7XG5bJ3NyYycsICdocmVmJywgJ2FjdGlvbicsICdmb3JtQWN0aW9uJ10uZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSkge1xuICBwcm9wZXJ0aWVzW2F0dHJpYnV0ZU5hbWVdID0gbmV3IFByb3BlcnR5SW5mb1JlY29yZChhdHRyaWJ1dGVOYW1lLCBTVFJJTkcsIGZhbHNlLCAvLyBtdXN0VXNlUHJvcGVydHlcbiAgYXR0cmlidXRlTmFtZS50b0xvd2VyQ2FzZSgpLCAvLyBhdHRyaWJ1dGVOYW1lXG4gIG51bGwsIC8vIGF0dHJpYnV0ZU5hbWVzcGFjZVxuICB0cnVlLCAvLyBzYW5pdGl6ZVVSTFxuICB0cnVlKTtcbn0pO1xuXG4vLyBhbmQgYW55IG5ld2xpbmUgb3IgdGFiIGFyZSBmaWx0ZXJlZCBvdXQgYXMgaWYgdGhleSdyZSBub3QgcGFydCBvZiB0aGUgVVJMLlxuLy8gaHR0cHM6Ly91cmwuc3BlYy53aGF0d2cub3JnLyN1cmwtcGFyc2luZ1xuLy8gVGFiIG9yIG5ld2xpbmUgYXJlIGRlZmluZWQgYXMgXFxyXFxuXFx0OlxuLy8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI2FzY2lpLXRhYi1vci1uZXdsaW5lXG4vLyBBIEMwIGNvbnRyb2wgaXMgYSBjb2RlIHBvaW50IGluIHRoZSByYW5nZSBcXHUwMDAwIE5VTEwgdG8gXFx1MDAxRlxuLy8gSU5GT1JNQVRJT04gU0VQQVJBVE9SIE9ORSwgaW5jbHVzaXZlOlxuLy8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI2MwLWNvbnRyb2wtb3Itc3BhY2VcblxuLyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG52YXIgaXNKYXZhU2NyaXB0UHJvdG9jb2wgPSAvXltcXHUwMDAwLVxcdTAwMUYgXSpqW1xcclxcblxcdF0qYVtcXHJcXG5cXHRdKnZbXFxyXFxuXFx0XSphW1xcclxcblxcdF0qc1tcXHJcXG5cXHRdKmNbXFxyXFxuXFx0XSpyW1xcclxcblxcdF0qaVtcXHJcXG5cXHRdKnBbXFxyXFxuXFx0XSp0W1xcclxcblxcdF0qXFw6L2k7XG52YXIgZGlkV2FybiA9IGZhbHNlO1xuXG5mdW5jdGlvbiBzYW5pdGl6ZVVSTCh1cmwpIHtcbiAge1xuICAgIGlmICghZGlkV2FybiAmJiBpc0phdmFTY3JpcHRQcm90b2NvbC50ZXN0KHVybCkpIHtcbiAgICAgIGRpZFdhcm4gPSB0cnVlO1xuXG4gICAgICBlcnJvcignQSBmdXR1cmUgdmVyc2lvbiBvZiBSZWFjdCB3aWxsIGJsb2NrIGphdmFzY3JpcHQ6IFVSTHMgYXMgYSBzZWN1cml0eSBwcmVjYXV0aW9uLiAnICsgJ1VzZSBldmVudCBoYW5kbGVycyBpbnN0ZWFkIGlmIHlvdSBjYW4uIElmIHlvdSBuZWVkIHRvIGdlbmVyYXRlIHVuc2FmZSBIVE1MIHRyeSAnICsgJ3VzaW5nIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIGluc3RlYWQuIFJlYWN0IHdhcyBwYXNzZWQgJXMuJywgSlNPTi5zdHJpbmdpZnkodXJsKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBmb3IgYSBwcm9wZXJ0eSBvbiBhIG5vZGUuIE9ubHkgdXNlZCBpbiBERVYgZm9yIFNTUiB2YWxpZGF0aW9uLlxuICogVGhlIFwiZXhwZWN0ZWRcIiBhcmd1bWVudCBpcyB1c2VkIGFzIGEgaGludCBvZiB3aGF0IHRoZSBleHBlY3RlZCB2YWx1ZSBpcy5cbiAqIFNvbWUgcHJvcGVydGllcyBoYXZlIG11bHRpcGxlIGVxdWl2YWxlbnQgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZUZvclByb3BlcnR5KG5vZGUsIG5hbWUsIGV4cGVjdGVkLCBwcm9wZXJ0eUluZm8pIHtcbiAge1xuICAgIGlmIChwcm9wZXJ0eUluZm8ubXVzdFVzZVByb3BlcnR5KSB7XG4gICAgICB2YXIgcHJvcGVydHlOYW1lID0gcHJvcGVydHlJbmZvLnByb3BlcnR5TmFtZTtcbiAgICAgIHJldHVybiBub2RlW3Byb3BlcnR5TmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoaXMgY2hlY2sgcHJvdGVjdHMgbXVsdGlwbGUgdXNlcyBvZiBgZXhwZWN0ZWRgLCB3aGljaCBpcyB3aHkgdGhlXG4gICAgICAvLyByZWFjdC1pbnRlcm5hbC9zYWZlLXN0cmluZy1jb2VyY2lvbiBydWxlIGlzIGRpc2FibGVkIGluIHNldmVyYWwgc3BvdHNcbiAgICAgIC8vIGJlbG93LlxuICAgICAge1xuICAgICAgICBjaGVja0F0dHJpYnV0ZVN0cmluZ0NvZXJjaW9uKGV4cGVjdGVkLCBuYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCBwcm9wZXJ0eUluZm8uc2FuaXRpemVVUkwpIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZW4ndCBmdWxseSBkaXNhYmxlZCBqYXZhc2NyaXB0OiBVUkxzLCBhbmQgaWZcbiAgICAgICAgLy8gdGhlIGh5ZHJhdGlvbiBpcyBzdWNjZXNzZnVsIG9mIGEgamF2YXNjcmlwdDogVVJMLCB3ZVxuICAgICAgICAvLyBzdGlsbCB3YW50IHRvIHdhcm4gb24gdGhlIGNsaWVudC5cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL3NhZmUtc3RyaW5nLWNvZXJjaW9uXG4gICAgICAgIHNhbml0aXplVVJMKCcnICsgZXhwZWN0ZWQpO1xuICAgICAgfVxuXG4gICAgICB2YXIgYXR0cmlidXRlTmFtZSA9IHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lO1xuICAgICAgdmFyIHN0cmluZ1ZhbHVlID0gbnVsbDtcblxuICAgICAgaWYgKHByb3BlcnR5SW5mby50eXBlID09PSBPVkVSTE9BREVEX0JPT0xFQU4pIHtcbiAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZSk7XG5cbiAgICAgICAgICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2hvdWxkUmVtb3ZlQXR0cmlidXRlKG5hbWUsIGV4cGVjdGVkLCBwcm9wZXJ0eUluZm8sIGZhbHNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL3NhZmUtc3RyaW5nLWNvZXJjaW9uXG5cblxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gJycgKyBleHBlY3RlZCkge1xuICAgICAgICAgICAgcmV0dXJuIGV4cGVjdGVkO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChub2RlLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKSkge1xuICAgICAgICBpZiAoc2hvdWxkUmVtb3ZlQXR0cmlidXRlKG5hbWUsIGV4cGVjdGVkLCBwcm9wZXJ0eUluZm8sIGZhbHNlKSkge1xuICAgICAgICAgIC8vIFdlIGhhZCBhbiBhdHRyaWJ1dGUgYnV0IHNob3VsZG4ndCBoYXZlIGhhZCBvbmUsIHNvIHJlYWQgaXRcbiAgICAgICAgICAvLyBmb3IgdGhlIGVycm9yIG1lc3NhZ2UuXG4gICAgICAgICAgcmV0dXJuIG5vZGUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHByb3BlcnR5SW5mby50eXBlID09PSBCT09MRUFOKSB7XG4gICAgICAgICAgLy8gSWYgdGhpcyB3YXMgYSBib29sZWFuLCBpdCBkb2Vzbid0IG1hdHRlciB3aGF0IHRoZSB2YWx1ZSBpc1xuICAgICAgICAgIC8vIHRoZSBmYWN0IHRoYXQgd2UgaGF2ZSBpdCBpcyB0aGUgc2FtZSBhcyB0aGUgZXhwZWN0ZWQuXG4gICAgICAgICAgcmV0dXJuIGV4cGVjdGVkO1xuICAgICAgICB9IC8vIEV2ZW4gaWYgdGhpcyBwcm9wZXJ0eSB1c2VzIGEgbmFtZXNwYWNlIHdlIHVzZSBnZXRBdHRyaWJ1dGVcbiAgICAgICAgLy8gYmVjYXVzZSB3ZSBhc3N1bWUgaXRzIG5hbWVzcGFjZWQgbmFtZSBpcyB0aGUgc2FtZSBhcyBvdXIgY29uZmlnLlxuICAgICAgICAvLyBUbyB1c2UgZ2V0QXR0cmlidXRlTlMgd2UgbmVlZCB0aGUgbG9jYWwgbmFtZSB3aGljaCB3ZSBkb24ndCBoYXZlXG4gICAgICAgIC8vIGluIG91ciBjb25maWcgYXRtLlxuXG5cbiAgICAgICAgc3RyaW5nVmFsdWUgPSBub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVOYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHNob3VsZFJlbW92ZUF0dHJpYnV0ZShuYW1lLCBleHBlY3RlZCwgcHJvcGVydHlJbmZvLCBmYWxzZSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ1ZhbHVlID09PSBudWxsID8gZXhwZWN0ZWQgOiBzdHJpbmdWYWx1ZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL3NhZmUtc3RyaW5nLWNvZXJjaW9uXG4gICAgICB9IGVsc2UgaWYgKHN0cmluZ1ZhbHVlID09PSAnJyArIGV4cGVjdGVkKSB7XG4gICAgICAgIHJldHVybiBleHBlY3RlZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbi8qKlxuICogR2V0IHRoZSB2YWx1ZSBmb3IgYSBhdHRyaWJ1dGUgb24gYSBub2RlLiBPbmx5IHVzZWQgaW4gREVWIGZvciBTU1IgdmFsaWRhdGlvbi5cbiAqIFRoZSB0aGlyZCBhcmd1bWVudCBpcyB1c2VkIGFzIGEgaGludCBvZiB3aGF0IHRoZSBleHBlY3RlZCB2YWx1ZSBpcy4gU29tZVxuICogYXR0cmlidXRlcyBoYXZlIG11bHRpcGxlIGVxdWl2YWxlbnQgdmFsdWVzLlxuICovXG5cbmZ1bmN0aW9uIGdldFZhbHVlRm9yQXR0cmlidXRlKG5vZGUsIG5hbWUsIGV4cGVjdGVkLCBpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICB7XG4gICAgaWYgKCFpc0F0dHJpYnV0ZU5hbWVTYWZlKG5hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFub2RlLmhhc0F0dHJpYnV0ZShuYW1lKSkge1xuICAgICAgcmV0dXJuIGV4cGVjdGVkID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBudWxsO1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IG5vZGUuZ2V0QXR0cmlidXRlKG5hbWUpO1xuXG4gICAge1xuICAgICAgY2hlY2tBdHRyaWJ1dGVTdHJpbmdDb2VyY2lvbihleHBlY3RlZCwgbmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09PSAnJyArIGV4cGVjdGVkKSB7XG4gICAgICByZXR1cm4gZXhwZWN0ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59XG4vKipcbiAqIFNldHMgdGhlIHZhbHVlIGZvciBhIHByb3BlcnR5IG9uIGEgbm9kZS5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKi9cblxuZnVuY3Rpb24gc2V0VmFsdWVGb3JQcm9wZXJ0eShub2RlLCBuYW1lLCB2YWx1ZSwgaXNDdXN0b21Db21wb25lbnRUYWcpIHtcbiAgdmFyIHByb3BlcnR5SW5mbyA9IGdldFByb3BlcnR5SW5mbyhuYW1lKTtcblxuICBpZiAoc2hvdWxkSWdub3JlQXR0cmlidXRlKG5hbWUsIHByb3BlcnR5SW5mbywgaXNDdXN0b21Db21wb25lbnRUYWcpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKHNob3VsZFJlbW92ZUF0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgcHJvcGVydHlJbmZvLCBpc0N1c3RvbUNvbXBvbmVudFRhZykpIHtcbiAgICB2YWx1ZSA9IG51bGw7XG4gIH1cblxuXG4gIGlmIChpc0N1c3RvbUNvbXBvbmVudFRhZyB8fCBwcm9wZXJ0eUluZm8gPT09IG51bGwpIHtcbiAgICBpZiAoaXNBdHRyaWJ1dGVOYW1lU2FmZShuYW1lKSkge1xuICAgICAgdmFyIF9hdHRyaWJ1dGVOYW1lID0gbmFtZTtcblxuICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKF9hdHRyaWJ1dGVOYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHtcbiAgICAgICAgICBjaGVja0F0dHJpYnV0ZVN0cmluZ0NvZXJjaW9uKHZhbHVlLCBuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKF9hdHRyaWJ1dGVOYW1lLCAgJycgKyB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIG11c3RVc2VQcm9wZXJ0eSA9IHByb3BlcnR5SW5mby5tdXN0VXNlUHJvcGVydHk7XG5cbiAgaWYgKG11c3RVc2VQcm9wZXJ0eSkge1xuICAgIHZhciBwcm9wZXJ0eU5hbWUgPSBwcm9wZXJ0eUluZm8ucHJvcGVydHlOYW1lO1xuXG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICB2YXIgdHlwZSA9IHByb3BlcnR5SW5mby50eXBlO1xuICAgICAgbm9kZVtwcm9wZXJ0eU5hbWVdID0gdHlwZSA9PT0gQk9PTEVBTiA/IGZhbHNlIDogJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENvbnRyYXJ5IHRvIGBzZXRBdHRyaWJ1dGVgLCBvYmplY3QgcHJvcGVydGllcyBhcmUgcHJvcGVybHlcbiAgICAgIC8vIGB0b1N0cmluZ2BlZCBieSBJRTgvOS5cbiAgICAgIG5vZGVbcHJvcGVydHlOYW1lXSA9IHZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfSAvLyBUaGUgcmVzdCBhcmUgdHJlYXRlZCBhcyBhdHRyaWJ1dGVzIHdpdGggc3BlY2lhbCBjYXNlcy5cblxuXG4gIHZhciBhdHRyaWJ1dGVOYW1lID0gcHJvcGVydHlJbmZvLmF0dHJpYnV0ZU5hbWUsXG4gICAgICBhdHRyaWJ1dGVOYW1lc3BhY2UgPSBwcm9wZXJ0eUluZm8uYXR0cmlidXRlTmFtZXNwYWNlO1xuXG4gIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBfdHlwZSA9IHByb3BlcnR5SW5mby50eXBlO1xuICAgIHZhciBhdHRyaWJ1dGVWYWx1ZTtcblxuICAgIGlmIChfdHlwZSA9PT0gQk9PTEVBTiB8fCBfdHlwZSA9PT0gT1ZFUkxPQURFRF9CT09MRUFOICYmIHZhbHVlID09PSB0cnVlKSB7XG4gICAgICAvLyBJZiBhdHRyaWJ1dGUgdHlwZSBpcyBib29sZWFuLCB3ZSBrbm93IGZvciBzdXJlIGl0IHdvbid0IGJlIGFuIGV4ZWN1dGlvbiBzaW5rXG4gICAgICAvLyBhbmQgd2Ugd29uJ3QgcmVxdWlyZSBUcnVzdGVkIFR5cGUgaGVyZS5cbiAgICAgIGF0dHJpYnV0ZVZhbHVlID0gJyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGBzZXRBdHRyaWJ1dGVgIHdpdGggb2JqZWN0cyBiZWNvbWVzIG9ubHkgYFtvYmplY3RdYCBpbiBJRTgvOSxcbiAgICAgIC8vICgnJyArIHZhbHVlKSBtYWtlcyBpdCBvdXRwdXQgdGhlIGNvcnJlY3QgdG9TdHJpbmcoKS12YWx1ZS5cbiAgICAgIHtcbiAgICAgICAge1xuICAgICAgICAgIGNoZWNrQXR0cmlidXRlU3RyaW5nQ29lcmNpb24odmFsdWUsIGF0dHJpYnV0ZU5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXR0cmlidXRlVmFsdWUgPSAnJyArIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJvcGVydHlJbmZvLnNhbml0aXplVVJMKSB7XG4gICAgICAgIHNhbml0aXplVVJMKGF0dHJpYnV0ZVZhbHVlLnRvU3RyaW5nKCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChhdHRyaWJ1dGVOYW1lc3BhY2UpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlTlMoYXR0cmlidXRlTmFtZXNwYWNlLCBhdHRyaWJ1dGVOYW1lLCBhdHRyaWJ1dGVWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUsIGF0dHJpYnV0ZVZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gQVRURU5USU9OXG4vLyBXaGVuIGFkZGluZyBuZXcgc3ltYm9scyB0byB0aGlzIGZpbGUsXG4vLyBQbGVhc2UgY29uc2lkZXIgYWxzbyBhZGRpbmcgdG8gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9SZWFjdFN5bWJvbHMnXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy5cbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50Jyk7XG52YXIgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5wb3J0YWwnKTtcbnZhciBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QuZnJhZ21lbnQnKTtcbnZhciBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Quc3RyaWN0X21vZGUnKTtcbnZhciBSRUFDVF9QUk9GSUxFUl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QucHJvZmlsZXInKTtcbnZhciBSRUFDVF9QUk9WSURFUl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QucHJvdmlkZXInKTtcbnZhciBSRUFDVF9DT05URVhUX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5jb250ZXh0Jyk7XG52YXIgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmZvcndhcmRfcmVmJyk7XG52YXIgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnN1c3BlbnNlJyk7XG52YXIgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2VfbGlzdCcpO1xudmFyIFJFQUNUX01FTU9fVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0Lm1lbW8nKTtcbnZhciBSRUFDVF9MQVpZX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5sYXp5Jyk7XG52YXIgUkVBQ1RfU0NPUEVfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnNjb3BlJyk7XG52YXIgUkVBQ1RfREVCVUdfVFJBQ0lOR19NT0RFX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5kZWJ1Z190cmFjZV9tb2RlJyk7XG52YXIgUkVBQ1RfT0ZGU0NSRUVOX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5vZmZzY3JlZW4nKTtcbnZhciBSRUFDVF9MRUdBQ1lfSElEREVOX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5sZWdhY3lfaGlkZGVuJyk7XG52YXIgUkVBQ1RfQ0FDSEVfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmNhY2hlJyk7XG52YXIgUkVBQ1RfVFJBQ0lOR19NQVJLRVJfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnRyYWNpbmdfbWFya2VyJyk7XG52YXIgTUFZQkVfSVRFUkFUT1JfU1lNQk9MID0gU3ltYm9sLml0ZXJhdG9yO1xudmFyIEZBVVhfSVRFUkFUT1JfU1lNQk9MID0gJ0BAaXRlcmF0b3InO1xuZnVuY3Rpb24gZ2V0SXRlcmF0b3JGbihtYXliZUl0ZXJhYmxlKSB7XG4gIGlmIChtYXliZUl0ZXJhYmxlID09PSBudWxsIHx8IHR5cGVvZiBtYXliZUl0ZXJhYmxlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIG1heWJlSXRlcmF0b3IgPSBNQVlCRV9JVEVSQVRPUl9TWU1CT0wgJiYgbWF5YmVJdGVyYWJsZVtNQVlCRV9JVEVSQVRPUl9TWU1CT0xdIHx8IG1heWJlSXRlcmFibGVbRkFVWF9JVEVSQVRPUl9TWU1CT0xdO1xuXG4gIGlmICh0eXBlb2YgbWF5YmVJdGVyYXRvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBtYXliZUl0ZXJhdG9yO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciBhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBIZWxwZXJzIHRvIHBhdGNoIGNvbnNvbGUubG9ncyB0byBhdm9pZCBsb2dnaW5nIGR1cmluZyBzaWRlLWVmZmVjdCBmcmVlXG4vLyByZXBsYXlpbmcgb24gcmVuZGVyIGZ1bmN0aW9uLiBUaGlzIGN1cnJlbnRseSBvbmx5IHBhdGNoZXMgdGhlIG9iamVjdFxuLy8gbGF6aWx5IHdoaWNoIHdvbid0IGNvdmVyIGlmIHRoZSBsb2cgZnVuY3Rpb24gd2FzIGV4dHJhY3RlZCBlYWdlcmx5LlxuLy8gV2UgY291bGQgYWxzbyBlYWdlcmx5IHBhdGNoIHRoZSBtZXRob2QuXG52YXIgZGlzYWJsZWREZXB0aCA9IDA7XG52YXIgcHJldkxvZztcbnZhciBwcmV2SW5mbztcbnZhciBwcmV2V2FybjtcbnZhciBwcmV2RXJyb3I7XG52YXIgcHJldkdyb3VwO1xudmFyIHByZXZHcm91cENvbGxhcHNlZDtcbnZhciBwcmV2R3JvdXBFbmQ7XG5cbmZ1bmN0aW9uIGRpc2FibGVkTG9nKCkge31cblxuZGlzYWJsZWRMb2cuX19yZWFjdERpc2FibGVkTG9nID0gdHJ1ZTtcbmZ1bmN0aW9uIGRpc2FibGVMb2dzKCkge1xuICB7XG4gICAgaWYgKGRpc2FibGVkRGVwdGggPT09IDApIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgICAgcHJldkxvZyA9IGNvbnNvbGUubG9nO1xuICAgICAgcHJldkluZm8gPSBjb25zb2xlLmluZm87XG4gICAgICBwcmV2V2FybiA9IGNvbnNvbGUud2FybjtcbiAgICAgIHByZXZFcnJvciA9IGNvbnNvbGUuZXJyb3I7XG4gICAgICBwcmV2R3JvdXAgPSBjb25zb2xlLmdyb3VwO1xuICAgICAgcHJldkdyb3VwQ29sbGFwc2VkID0gY29uc29sZS5ncm91cENvbGxhcHNlZDtcbiAgICAgIHByZXZHcm91cEVuZCA9IGNvbnNvbGUuZ3JvdXBFbmQ7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTkwOTlcblxuICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBkaXNhYmxlZExvZyxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH07IC8vICRGbG93Rml4TWUgRmxvdyB0aGlua3MgY29uc29sZSBpcyBpbW11dGFibGUuXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNvbnNvbGUsIHtcbiAgICAgICAgaW5mbzogcHJvcHMsXG4gICAgICAgIGxvZzogcHJvcHMsXG4gICAgICAgIHdhcm46IHByb3BzLFxuICAgICAgICBlcnJvcjogcHJvcHMsXG4gICAgICAgIGdyb3VwOiBwcm9wcyxcbiAgICAgICAgZ3JvdXBDb2xsYXBzZWQ6IHByb3BzLFxuICAgICAgICBncm91cEVuZDogcHJvcHNcbiAgICAgIH0pO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSByZWFjdC1pbnRlcm5hbC9uby1wcm9kdWN0aW9uLWxvZ2dpbmcgKi9cbiAgICB9XG5cbiAgICBkaXNhYmxlZERlcHRoKys7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlZW5hYmxlTG9ncygpIHtcbiAge1xuICAgIGRpc2FibGVkRGVwdGgtLTtcblxuICAgIGlmIChkaXNhYmxlZERlcHRoID09PSAwKSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1pbnRlcm5hbC9uby1wcm9kdWN0aW9uLWxvZ2dpbmcgKi9cbiAgICAgIHZhciBwcm9wcyA9IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfTsgLy8gJEZsb3dGaXhNZSBGbG93IHRoaW5rcyBjb25zb2xlIGlzIGltbXV0YWJsZS5cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY29uc29sZSwge1xuICAgICAgICBsb2c6IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkxvZ1xuICAgICAgICB9KSxcbiAgICAgICAgaW5mbzogYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHZhbHVlOiBwcmV2SW5mb1xuICAgICAgICB9KSxcbiAgICAgICAgd2FybjogYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHZhbHVlOiBwcmV2V2FyblxuICAgICAgICB9KSxcbiAgICAgICAgZXJyb3I6IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkVycm9yXG4gICAgICAgIH0pLFxuICAgICAgICBncm91cDogYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHZhbHVlOiBwcmV2R3JvdXBcbiAgICAgICAgfSksXG4gICAgICAgIGdyb3VwQ29sbGFwc2VkOiBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgdmFsdWU6IHByZXZHcm91cENvbGxhcHNlZFxuICAgICAgICB9KSxcbiAgICAgICAgZ3JvdXBFbmQ6IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwRW5kXG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkRGVwdGggPCAwKSB7XG4gICAgICBlcnJvcignZGlzYWJsZWREZXB0aCBmZWxsIGJlbG93IHplcm8uICcgKyAnVGhpcyBpcyBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBSZWFjdEN1cnJlbnREaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcjtcbnZhciBwcmVmaXg7XG5mdW5jdGlvbiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lLCBzb3VyY2UsIG93bmVyRm4pIHtcbiAge1xuICAgIGlmIChwcmVmaXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gRXh0cmFjdCB0aGUgVk0gc3BlY2lmaWMgcHJlZml4IHVzZWQgYnkgZWFjaCBsaW5lLlxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgdmFyIG1hdGNoID0geC5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtcbiAgICAgICAgcHJlZml4ID0gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG4gICAgICB9XG4gICAgfSAvLyBXZSB1c2UgdGhlIHByZWZpeCB0byBlbnN1cmUgb3VyIHN0YWNrcyBsaW5lIHVwIHdpdGggbmF0aXZlIHN0YWNrIGZyYW1lcy5cblxuXG4gICAgcmV0dXJuICdcXG4nICsgcHJlZml4ICsgbmFtZTtcbiAgfVxufVxudmFyIHJlZW50cnkgPSBmYWxzZTtcbnZhciBjb21wb25lbnRGcmFtZUNhY2hlO1xuXG57XG4gIHZhciBQb3NzaWJseVdlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyA/IFdlYWtNYXAgOiBNYXA7XG4gIGNvbXBvbmVudEZyYW1lQ2FjaGUgPSBuZXcgUG9zc2libHlXZWFrTWFwKCk7XG59XG5cbmZ1bmN0aW9uIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZm4sIGNvbnN0cnVjdCkge1xuICAvLyBJZiBzb21ldGhpbmcgYXNrZWQgZm9yIGEgc3RhY2sgaW5zaWRlIGEgZmFrZSByZW5kZXIsIGl0IHNob3VsZCBnZXQgaWdub3JlZC5cbiAgaWYgKCAhZm4gfHwgcmVlbnRyeSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHtcbiAgICB2YXIgZnJhbWUgPSBjb21wb25lbnRGcmFtZUNhY2hlLmdldChmbik7XG5cbiAgICBpZiAoZnJhbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZyYW1lO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb250cm9sO1xuICByZWVudHJ5ID0gdHJ1ZTtcbiAgdmFyIHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZTsgLy8gJEZsb3dGaXhNZSBJdCBkb2VzIGFjY2VwdCB1bmRlZmluZWQuXG5cbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSB1bmRlZmluZWQ7XG4gIHZhciBwcmV2aW91c0Rpc3BhdGNoZXI7XG5cbiAge1xuICAgIHByZXZpb3VzRGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIuY3VycmVudDsgLy8gU2V0IHRoZSBkaXNwYXRjaGVyIGluIERFViBiZWNhdXNlIHRoaXMgbWlnaHQgYmUgY2FsbCBpbiB0aGUgcmVuZGVyIGZ1bmN0aW9uXG4gICAgLy8gZm9yIHdhcm5pbmdzLlxuXG4gICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50ID0gbnVsbDtcbiAgICBkaXNhYmxlTG9ncygpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIHNob3VsZCB0aHJvdy5cbiAgICBpZiAoY29uc3RydWN0KSB7XG4gICAgICAvLyBTb21ldGhpbmcgc2hvdWxkIGJlIHNldHRpbmcgdGhlIHByb3BzIGluIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgIHZhciBGYWtlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgfTsgLy8gJEZsb3dGaXhNZVxuXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGYWtlLnByb3RvdHlwZSwgJ3Byb3BzJywge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBXZSB1c2UgYSB0aHJvd2luZyBzZXR0ZXIgaW5zdGVhZCBvZiBmcm96ZW4gb3Igbm9uLXdyaXRhYmxlIHByb3BzXG4gICAgICAgICAgLy8gYmVjYXVzZSB0aGF0IHdvbid0IHRocm93IGluIGEgbm9uLXN0cmljdCBtb2RlIGZ1bmN0aW9uLlxuICAgICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnICYmIFJlZmxlY3QuY29uc3RydWN0KSB7XG4gICAgICAgIC8vIFdlIGNvbnN0cnVjdCBhIGRpZmZlcmVudCBjb250cm9sIGZvciB0aGlzIGNhc2UgdG8gaW5jbHVkZSBhbnkgZXh0cmFcbiAgICAgICAgLy8gZnJhbWVzIGFkZGVkIGJ5IHRoZSBjb25zdHJ1Y3QgY2FsbC5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBSZWZsZWN0LmNvbnN0cnVjdChGYWtlLCBbXSk7XG4gICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICBjb250cm9sID0geDtcbiAgICAgICAgfVxuXG4gICAgICAgIFJlZmxlY3QuY29uc3RydWN0KGZuLCBbXSwgRmFrZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIEZha2UuY2FsbCgpO1xuICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgY29udHJvbCA9IHg7XG4gICAgICAgIH1cblxuICAgICAgICBmbi5jYWxsKEZha2UucHJvdG90eXBlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgY29udHJvbCA9IHg7XG4gICAgICB9XG5cbiAgICAgIGZuKCk7XG4gICAgfVxuICB9IGNhdGNoIChzYW1wbGUpIHtcbiAgICAvLyBUaGlzIGlzIGlubGluZWQgbWFudWFsbHkgYmVjYXVzZSBjbG9zdXJlIGRvZXNuJ3QgZG8gaXQgZm9yIHVzLlxuICAgIGlmIChzYW1wbGUgJiYgY29udHJvbCAmJiB0eXBlb2Ygc2FtcGxlLnN0YWNrID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gVGhpcyBleHRyYWN0cyB0aGUgZmlyc3QgZnJhbWUgZnJvbSB0aGUgc2FtcGxlIHRoYXQgaXNuJ3QgYWxzbyBpbiB0aGUgY29udHJvbC5cbiAgICAgIC8vIFNraXBwaW5nIG9uZSBmcmFtZSB0aGF0IHdlIGFzc3VtZSBpcyB0aGUgZnJhbWUgdGhhdCBjYWxscyB0aGUgdHdvLlxuICAgICAgdmFyIHNhbXBsZUxpbmVzID0gc2FtcGxlLnN0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAgIHZhciBjb250cm9sTGluZXMgPSBjb250cm9sLnN0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAgIHZhciBzID0gc2FtcGxlTGluZXMubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBjID0gY29udHJvbExpbmVzLmxlbmd0aCAtIDE7XG5cbiAgICAgIHdoaWxlIChzID49IDEgJiYgYyA+PSAwICYmIHNhbXBsZUxpbmVzW3NdICE9PSBjb250cm9sTGluZXNbY10pIHtcbiAgICAgICAgLy8gV2UgZXhwZWN0IGF0IGxlYXN0IG9uZSBzdGFjayBmcmFtZSB0byBiZSBzaGFyZWQuXG4gICAgICAgIC8vIFR5cGljYWxseSB0aGlzIHdpbGwgYmUgdGhlIHJvb3QgbW9zdCBvbmUuIEhvd2V2ZXIsIHN0YWNrIGZyYW1lcyBtYXkgYmVcbiAgICAgICAgLy8gY3V0IG9mZiBkdWUgdG8gbWF4aW11bSBzdGFjayBsaW1pdHMuIEluIHRoaXMgY2FzZSwgb25lIG1heWJlIGN1dCBvZmZcbiAgICAgICAgLy8gZWFybGllciB0aGFuIHRoZSBvdGhlci4gV2UgYXNzdW1lIHRoYXQgdGhlIHNhbXBsZSBpcyBsb25nZXIgb3IgdGhlIHNhbWVcbiAgICAgICAgLy8gYW5kIHRoZXJlIGZvciBjdXQgb2ZmIGVhcmxpZXIuIFNvIHdlIHNob3VsZCBmaW5kIHRoZSByb290IG1vc3QgZnJhbWUgaW5cbiAgICAgICAgLy8gdGhlIHNhbXBsZSBzb21ld2hlcmUgaW4gdGhlIGNvbnRyb2wuXG4gICAgICAgIGMtLTtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IHMgPj0gMSAmJiBjID49IDA7IHMtLSwgYy0tKSB7XG4gICAgICAgIC8vIE5leHQgd2UgZmluZCB0aGUgZmlyc3Qgb25lIHRoYXQgaXNuJ3QgdGhlIHNhbWUgd2hpY2ggc2hvdWxkIGJlIHRoZVxuICAgICAgICAvLyBmcmFtZSB0aGF0IGNhbGxlZCBvdXIgc2FtcGxlIGZ1bmN0aW9uIGFuZCB0aGUgY29udHJvbC5cbiAgICAgICAgaWYgKHNhbXBsZUxpbmVzW3NdICE9PSBjb250cm9sTGluZXNbY10pIHtcbiAgICAgICAgICAvLyBJbiBWOCwgdGhlIGZpcnN0IGxpbmUgaXMgZGVzY3JpYmluZyB0aGUgbWVzc2FnZSBidXQgb3RoZXIgVk1zIGRvbid0LlxuICAgICAgICAgIC8vIElmIHdlJ3JlIGFib3V0IHRvIHJldHVybiB0aGUgZmlyc3QgbGluZSwgYW5kIHRoZSBjb250cm9sIGlzIGFsc28gb24gdGhlIHNhbWVcbiAgICAgICAgICAvLyBsaW5lLCB0aGF0J3MgYSBwcmV0dHkgZ29vZCBpbmRpY2F0b3IgdGhhdCBvdXIgc2FtcGxlIHRocmV3IGF0IHNhbWUgbGluZSBhc1xuICAgICAgICAgIC8vIHRoZSBjb250cm9sLiBJLmUuIGJlZm9yZSB3ZSBlbnRlcmVkIHRoZSBzYW1wbGUgZnJhbWUuIFNvIHdlIGlnbm9yZSB0aGlzIHJlc3VsdC5cbiAgICAgICAgICAvLyBUaGlzIGNhbiBoYXBwZW4gaWYgeW91IHBhc3NlZCBhIGNsYXNzIHRvIGZ1bmN0aW9uIGNvbXBvbmVudCwgb3Igbm9uLWZ1bmN0aW9uLlxuICAgICAgICAgIGlmIChzICE9PSAxIHx8IGMgIT09IDEpIHtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgcy0tO1xuICAgICAgICAgICAgICBjLS07IC8vIFdlIG1heSBzdGlsbCBoYXZlIHNpbWlsYXIgaW50ZXJtZWRpYXRlIGZyYW1lcyBmcm9tIHRoZSBjb25zdHJ1Y3QgY2FsbC5cbiAgICAgICAgICAgICAgLy8gVGhlIG5leHQgb25lIHRoYXQgaXNuJ3QgdGhlIHNhbWUgc2hvdWxkIGJlIG91ciBtYXRjaCB0aG91Z2guXG5cbiAgICAgICAgICAgICAgaWYgKGMgPCAwIHx8IHNhbXBsZUxpbmVzW3NdICE9PSBjb250cm9sTGluZXNbY10pIHtcbiAgICAgICAgICAgICAgICAvLyBWOCBhZGRzIGEgXCJuZXdcIiBwcmVmaXggZm9yIG5hdGl2ZSBjbGFzc2VzLiBMZXQncyByZW1vdmUgaXQgdG8gbWFrZSBpdCBwcmV0dGllci5cbiAgICAgICAgICAgICAgICB2YXIgX2ZyYW1lID0gJ1xcbicgKyBzYW1wbGVMaW5lc1tzXS5yZXBsYWNlKCcgYXQgbmV3ICcsICcgYXQgJyk7IC8vIElmIG91ciBjb21wb25lbnQgZnJhbWUgaXMgbGFiZWxlZCBcIjxhbm9ueW1vdXM+XCJcbiAgICAgICAgICAgICAgICAvLyBidXQgd2UgaGF2ZSBhIHVzZXItcHJvdmlkZWQgXCJkaXNwbGF5TmFtZVwiXG4gICAgICAgICAgICAgICAgLy8gc3BsaWNlIGl0IGluIHRvIG1ha2UgdGhlIHN0YWNrIG1vcmUgcmVhZGFibGUuXG5cblxuICAgICAgICAgICAgICAgIGlmIChmbi5kaXNwbGF5TmFtZSAmJiBfZnJhbWUuaW5jbHVkZXMoJzxhbm9ueW1vdXM+JykpIHtcbiAgICAgICAgICAgICAgICAgIF9mcmFtZSA9IF9mcmFtZS5yZXBsYWNlKCc8YW5vbnltb3VzPicsIGZuLmRpc3BsYXlOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudEZyYW1lQ2FjaGUuc2V0KGZuLCBfZnJhbWUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gLy8gUmV0dXJuIHRoZSBsaW5lIHdlIGZvdW5kLlxuXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2ZyYW1lO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlIChzID49IDEgJiYgYyA+PSAwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICByZWVudHJ5ID0gZmFsc2U7XG5cbiAgICB7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyLmN1cnJlbnQgPSBwcmV2aW91c0Rpc3BhdGNoZXI7XG4gICAgICByZWVuYWJsZUxvZ3MoKTtcbiAgICB9XG5cbiAgICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2U7XG4gIH0gLy8gRmFsbGJhY2sgdG8ganVzdCB1c2luZyB0aGUgbmFtZSBpZiB3ZSBjb3VsZG4ndCBtYWtlIGl0IHRocm93LlxuXG5cbiAgdmFyIG5hbWUgPSBmbiA/IGZuLmRpc3BsYXlOYW1lIHx8IGZuLm5hbWUgOiAnJztcbiAgdmFyIHN5bnRoZXRpY0ZyYW1lID0gbmFtZSA/IGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKG5hbWUpIDogJyc7XG5cbiAge1xuICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbXBvbmVudEZyYW1lQ2FjaGUuc2V0KGZuLCBzeW50aGV0aWNGcmFtZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN5bnRoZXRpY0ZyYW1lO1xufVxuXG5mdW5jdGlvbiBkZXNjcmliZUNsYXNzQ29tcG9uZW50RnJhbWUoY3Rvciwgc291cmNlLCBvd25lckZuKSB7XG4gIHtcbiAgICByZXR1cm4gZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZShjdG9yLCB0cnVlKTtcbiAgfVxufVxuZnVuY3Rpb24gZGVzY3JpYmVGdW5jdGlvbkNvbXBvbmVudEZyYW1lKGZuLCBzb3VyY2UsIG93bmVyRm4pIHtcbiAge1xuICAgIHJldHVybiBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZuLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2hvdWxkQ29uc3RydWN0KENvbXBvbmVudCkge1xuICB2YXIgcHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcbiAgcmV0dXJuICEhKHByb3RvdHlwZSAmJiBwcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59XG5cbmZ1bmN0aW9uIGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVih0eXBlLCBzb3VyY2UsIG93bmVyRm4pIHtcblxuICBpZiAodHlwZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAge1xuICAgICAgcmV0dXJuIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUodHlwZSwgc2hvdWxkQ29uc3RydWN0KHR5cGUpKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKHR5cGUpO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKCdTdXNwZW5zZScpO1xuXG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoJ1N1c3BlbnNlTGlzdCcpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0Jykge1xuICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICByZXR1cm4gZGVzY3JpYmVGdW5jdGlvbkNvbXBvbmVudEZyYW1lKHR5cGUucmVuZGVyKTtcblxuICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgIC8vIE1lbW8gbWF5IGNvbnRhaW4gYW55IGNvbXBvbmVudCB0eXBlIHNvIHdlIHJlY3Vyc2l2ZWx5IHJlc29sdmUgaXQuXG4gICAgICAgIHJldHVybiBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYodHlwZS50eXBlLCBzb3VyY2UsIG93bmVyRm4pO1xuXG4gICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBsYXp5Q29tcG9uZW50ID0gdHlwZTtcbiAgICAgICAgICB2YXIgcGF5bG9hZCA9IGxhenlDb21wb25lbnQuX3BheWxvYWQ7XG4gICAgICAgICAgdmFyIGluaXQgPSBsYXp5Q29tcG9uZW50Ll9pbml0O1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIExhenkgbWF5IGNvbnRhaW4gYW55IGNvbXBvbmVudCB0eXBlIHNvIHdlIHJlY3Vyc2l2ZWx5IHJlc29sdmUgaXQuXG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKGluaXQocGF5bG9hZCksIHNvdXJjZSwgb3duZXJGbik7XG4gICAgICAgICAgfSBjYXRjaCAoeCkge31cbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnJztcbn1cblxuZnVuY3Rpb24gZGVzY3JpYmVGaWJlcihmaWJlcikge1xuICB2YXIgb3duZXIgPSAgZmliZXIuX2RlYnVnT3duZXIgPyBmaWJlci5fZGVidWdPd25lci50eXBlIDogbnVsbCA7XG4gIHZhciBzb3VyY2UgPSAgZmliZXIuX2RlYnVnU291cmNlIDtcblxuICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShmaWJlci50eXBlKTtcblxuICAgIGNhc2UgTGF6eUNvbXBvbmVudDpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSgnTGF6eScpO1xuXG4gICAgY2FzZSBTdXNwZW5zZUNvbXBvbmVudDpcbiAgICAgIHJldHVybiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSgnU3VzcGVuc2UnKTtcblxuICAgIGNhc2UgU3VzcGVuc2VMaXN0Q29tcG9uZW50OlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKCdTdXNwZW5zZUxpc3QnKTtcblxuICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgY2FzZSBJbmRldGVybWluYXRlQ29tcG9uZW50OlxuICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudDpcbiAgICAgIHJldHVybiBkZXNjcmliZUZ1bmN0aW9uQ29tcG9uZW50RnJhbWUoZmliZXIudHlwZSk7XG5cbiAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICByZXR1cm4gZGVzY3JpYmVGdW5jdGlvbkNvbXBvbmVudEZyYW1lKGZpYmVyLnR5cGUucmVuZGVyKTtcblxuICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICByZXR1cm4gZGVzY3JpYmVDbGFzc0NvbXBvbmVudEZyYW1lKGZpYmVyLnR5cGUpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAnJztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTdGFja0J5RmliZXJJbkRldkFuZFByb2Qod29ya0luUHJvZ3Jlc3MpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9ICcnO1xuICAgIHZhciBub2RlID0gd29ya0luUHJvZ3Jlc3M7XG5cbiAgICBkbyB7XG4gICAgICBpbmZvICs9IGRlc2NyaWJlRmliZXIobm9kZSk7XG4gICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgfSB3aGlsZSAobm9kZSk7XG5cbiAgICByZXR1cm4gaW5mbztcbiAgfSBjYXRjaCAoeCkge1xuICAgIHJldHVybiAnXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogJyArIHgubWVzc2FnZSArICdcXG4nICsgeC5zdGFjaztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRXcmFwcGVkTmFtZShvdXRlclR5cGUsIGlubmVyVHlwZSwgd3JhcHBlck5hbWUpIHtcbiAgdmFyIGRpc3BsYXlOYW1lID0gb3V0ZXJUeXBlLmRpc3BsYXlOYW1lO1xuXG4gIGlmIChkaXNwbGF5TmFtZSkge1xuICAgIHJldHVybiBkaXNwbGF5TmFtZTtcbiAgfVxuXG4gIHZhciBmdW5jdGlvbk5hbWUgPSBpbm5lclR5cGUuZGlzcGxheU5hbWUgfHwgaW5uZXJUeXBlLm5hbWUgfHwgJyc7XG4gIHJldHVybiBmdW5jdGlvbk5hbWUgIT09ICcnID8gd3JhcHBlck5hbWUgKyBcIihcIiArIGZ1bmN0aW9uTmFtZSArIFwiKVwiIDogd3JhcHBlck5hbWU7XG59IC8vIEtlZXAgaW4gc3luYyB3aXRoIHJlYWN0LXJlY29uY2lsZXIvZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlclxuXG5cbmZ1bmN0aW9uIGdldENvbnRleHROYW1lKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgJ0NvbnRleHQnO1xufSAvLyBOb3RlIHRoYXQgdGhlIHJlY29uY2lsZXIgcGFja2FnZSBzaG91bGQgZ2VuZXJhbGx5IHByZWZlciB0byB1c2UgZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcigpIGluc3RlYWQuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUpIHtcbiAgaWYgKHR5cGUgPT0gbnVsbCkge1xuICAgIC8vIEhvc3Qgcm9vdCwgdGV4dCBub2RlIG9yIGp1c3QgaW52YWxpZCB0eXBlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAge1xuICAgIGlmICh0eXBlb2YgdHlwZS50YWcgPT09ICdudW1iZXInKSB7XG4gICAgICBlcnJvcignUmVjZWl2ZWQgYW4gdW5leHBlY3RlZCBvYmplY3QgaW4gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKCkuICcgKyAnVGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgcmV0dXJuICdGcmFnbWVudCc7XG5cbiAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgcmV0dXJuICdQb3J0YWwnO1xuXG4gICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgcmV0dXJuICdQcm9maWxlcic7XG5cbiAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICByZXR1cm4gJ1N0cmljdE1vZGUnO1xuXG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuICdTdXNwZW5zZSc7XG5cbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgIHJldHVybiAnU3VzcGVuc2VMaXN0JztcblxuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0Jykge1xuICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgIHZhciBjb250ZXh0ID0gdHlwZTtcbiAgICAgICAgcmV0dXJuIGdldENvbnRleHROYW1lKGNvbnRleHQpICsgJy5Db25zdW1lcic7XG5cbiAgICAgIGNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRTpcbiAgICAgICAgdmFyIHByb3ZpZGVyID0gdHlwZTtcbiAgICAgICAgcmV0dXJuIGdldENvbnRleHROYW1lKHByb3ZpZGVyLl9jb250ZXh0KSArICcuUHJvdmlkZXInO1xuXG4gICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgIHJldHVybiBnZXRXcmFwcGVkTmFtZSh0eXBlLCB0eXBlLnJlbmRlciwgJ0ZvcndhcmRSZWYnKTtcblxuICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgIHZhciBvdXRlck5hbWUgPSB0eXBlLmRpc3BsYXlOYW1lIHx8IG51bGw7XG5cbiAgICAgICAgaWYgKG91dGVyTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBvdXRlck5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUudHlwZSkgfHwgJ01lbW8nO1xuXG4gICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBsYXp5Q29tcG9uZW50ID0gdHlwZTtcbiAgICAgICAgICB2YXIgcGF5bG9hZCA9IGxhenlDb21wb25lbnQuX3BheWxvYWQ7XG4gICAgICAgICAgdmFyIGluaXQgPSBsYXp5Q29tcG9uZW50Ll9pbml0O1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoaW5pdChwYXlsb2FkKSk7XG4gICAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1mYWxsdGhyb3VnaFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRXcmFwcGVkTmFtZSQxKG91dGVyVHlwZSwgaW5uZXJUeXBlLCB3cmFwcGVyTmFtZSkge1xuICB2YXIgZnVuY3Rpb25OYW1lID0gaW5uZXJUeXBlLmRpc3BsYXlOYW1lIHx8IGlubmVyVHlwZS5uYW1lIHx8ICcnO1xuICByZXR1cm4gb3V0ZXJUeXBlLmRpc3BsYXlOYW1lIHx8IChmdW5jdGlvbk5hbWUgIT09ICcnID8gd3JhcHBlck5hbWUgKyBcIihcIiArIGZ1bmN0aW9uTmFtZSArIFwiKVwiIDogd3JhcHBlck5hbWUpO1xufSAvLyBLZWVwIGluIHN5bmMgd2l0aCBzaGFyZWQvZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlXG5cblxuZnVuY3Rpb24gZ2V0Q29udGV4dE5hbWUkMSh0eXBlKSB7XG4gIHJldHVybiB0eXBlLmRpc3BsYXlOYW1lIHx8ICdDb250ZXh0Jztcbn1cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcihmaWJlcikge1xuICB2YXIgdGFnID0gZmliZXIudGFnLFxuICAgICAgdHlwZSA9IGZpYmVyLnR5cGU7XG5cbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIENhY2hlQ29tcG9uZW50OlxuICAgICAgcmV0dXJuICdDYWNoZSc7XG5cbiAgICBjYXNlIENvbnRleHRDb25zdW1lcjpcbiAgICAgIHZhciBjb250ZXh0ID0gdHlwZTtcbiAgICAgIHJldHVybiBnZXRDb250ZXh0TmFtZSQxKGNvbnRleHQpICsgJy5Db25zdW1lcic7XG5cbiAgICBjYXNlIENvbnRleHRQcm92aWRlcjpcbiAgICAgIHZhciBwcm92aWRlciA9IHR5cGU7XG4gICAgICByZXR1cm4gZ2V0Q29udGV4dE5hbWUkMShwcm92aWRlci5fY29udGV4dCkgKyAnLlByb3ZpZGVyJztcblxuICAgIGNhc2UgRGVoeWRyYXRlZEZyYWdtZW50OlxuICAgICAgcmV0dXJuICdEZWh5ZHJhdGVkRnJhZ21lbnQnO1xuXG4gICAgY2FzZSBGb3J3YXJkUmVmOlxuICAgICAgcmV0dXJuIGdldFdyYXBwZWROYW1lJDEodHlwZSwgdHlwZS5yZW5kZXIsICdGb3J3YXJkUmVmJyk7XG5cbiAgICBjYXNlIEZyYWdtZW50OlxuICAgICAgcmV0dXJuICdGcmFnbWVudCc7XG5cbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAvLyBIb3N0IGNvbXBvbmVudCB0eXBlIGlzIHRoZSBkaXNwbGF5IG5hbWUgKGUuZy4gXCJkaXZcIiwgXCJWaWV3XCIpXG4gICAgICByZXR1cm4gdHlwZTtcblxuICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICAgIHJldHVybiAnUG9ydGFsJztcblxuICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICByZXR1cm4gJ1Jvb3QnO1xuXG4gICAgY2FzZSBIb3N0VGV4dDpcbiAgICAgIHJldHVybiAnVGV4dCc7XG5cbiAgICBjYXNlIExhenlDb21wb25lbnQ6XG4gICAgICAvLyBOYW1lIGNvbWVzIGZyb20gdGhlIHR5cGUgaW4gdGhpcyBjYXNlOyB3ZSBkb24ndCBoYXZlIGEgdGFnLlxuICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlKTtcblxuICAgIGNhc2UgTW9kZTpcbiAgICAgIGlmICh0eXBlID09PSBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFKSB7XG4gICAgICAgIC8vIERvbid0IGJlIGxlc3Mgc3BlY2lmaWMgdGhhbiBzaGFyZWQvZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlXG4gICAgICAgIHJldHVybiAnU3RyaWN0TW9kZSc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAnTW9kZSc7XG5cbiAgICBjYXNlIE9mZnNjcmVlbkNvbXBvbmVudDpcbiAgICAgIHJldHVybiAnT2Zmc2NyZWVuJztcblxuICAgIGNhc2UgUHJvZmlsZXI6XG4gICAgICByZXR1cm4gJ1Byb2ZpbGVyJztcblxuICAgIGNhc2UgU2NvcGVDb21wb25lbnQ6XG4gICAgICByZXR1cm4gJ1Njb3BlJztcblxuICAgIGNhc2UgU3VzcGVuc2VDb21wb25lbnQ6XG4gICAgICByZXR1cm4gJ1N1c3BlbnNlJztcblxuICAgIGNhc2UgU3VzcGVuc2VMaXN0Q29tcG9uZW50OlxuICAgICAgcmV0dXJuICdTdXNwZW5zZUxpc3QnO1xuXG4gICAgY2FzZSBUcmFjaW5nTWFya2VyQ29tcG9uZW50OlxuICAgICAgcmV0dXJuICdUcmFjaW5nTWFya2VyJztcbiAgICAvLyBUaGUgZGlzcGxheSBuYW1lIGZvciB0aGlzIHRhZ3MgY29tZSBmcm9tIHRoZSB1c2VyLXByb3ZpZGVkIHR5cGU6XG5cbiAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgY2FzZSBJbmNvbXBsZXRlQ2xhc3NDb21wb25lbnQ6XG4gICAgY2FzZSBJbmRldGVybWluYXRlQ29tcG9uZW50OlxuICAgIGNhc2UgTWVtb0NvbXBvbmVudDpcbiAgICBjYXNlIFNpbXBsZU1lbW9Db21wb25lbnQ6XG4gICAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8IG51bGw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHR5cGU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxudmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lO1xudmFyIGN1cnJlbnQgPSBudWxsO1xudmFyIGlzUmVuZGVyaW5nID0gZmFsc2U7XG5mdW5jdGlvbiBnZXRDdXJyZW50RmliZXJPd25lck5hbWVJbkRldk9yTnVsbCgpIHtcbiAge1xuICAgIGlmIChjdXJyZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgb3duZXIgPSBjdXJyZW50Ll9kZWJ1Z093bmVyO1xuXG4gICAgaWYgKG93bmVyICE9PSBudWxsICYmIHR5cGVvZiBvd25lciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiBnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKG93bmVyKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0Q3VycmVudEZpYmVyU3RhY2tJbkRldigpIHtcbiAge1xuICAgIGlmIChjdXJyZW50ID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfSAvLyBTYWZlIGJlY2F1c2UgaWYgY3VycmVudCBmaWJlciBleGlzdHMsIHdlIGFyZSByZWNvbmNpbGluZyxcbiAgICAvLyBhbmQgaXQgaXMgZ3VhcmFudGVlZCB0byBiZSB0aGUgd29yay1pbi1wcm9ncmVzcyB2ZXJzaW9uLlxuXG5cbiAgICByZXR1cm4gZ2V0U3RhY2tCeUZpYmVySW5EZXZBbmRQcm9kKGN1cnJlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0Q3VycmVudEZpYmVyKCkge1xuICB7XG4gICAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRDdXJyZW50U3RhY2sgPSBudWxsO1xuICAgIGN1cnJlbnQgPSBudWxsO1xuICAgIGlzUmVuZGVyaW5nID0gZmFsc2U7XG4gIH1cbn1cbmZ1bmN0aW9uIHNldEN1cnJlbnRGaWJlcihmaWJlcikge1xuICB7XG4gICAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRDdXJyZW50U3RhY2sgPSBmaWJlciA9PT0gbnVsbCA/IG51bGwgOiBnZXRDdXJyZW50RmliZXJTdGFja0luRGV2O1xuICAgIGN1cnJlbnQgPSBmaWJlcjtcbiAgICBpc1JlbmRlcmluZyA9IGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBnZXRDdXJyZW50RmliZXIoKSB7XG4gIHtcbiAgICByZXR1cm4gY3VycmVudDtcbiAgfVxufVxuZnVuY3Rpb24gc2V0SXNSZW5kZXJpbmcocmVuZGVyaW5nKSB7XG4gIHtcbiAgICBpc1JlbmRlcmluZyA9IHJlbmRlcmluZztcbiAgfVxufVxuXG4vLyBGbG93IGRvZXMgbm90IGFsbG93IHN0cmluZyBjb25jYXRlbmF0aW9uIG9mIG1vc3Qgbm9uLXN0cmluZyB0eXBlcy4gVG8gd29ya1xuLy8gYXJvdW5kIHRoaXMgbGltaXRhdGlvbiwgd2UgdXNlIGFuIG9wYXF1ZSB0eXBlIHRoYXQgY2FuIG9ubHkgYmUgb2J0YWluZWQgYnlcbi8vIHBhc3NpbmcgdGhlIHZhbHVlIHRocm91Z2ggZ2V0VG9TdHJpbmdWYWx1ZSBmaXJzdC5cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIFRoZSBjb2VyY2lvbiBzYWZldHkgY2hlY2sgaXMgcGVyZm9ybWVkIGluIGdldFRvU3RyaW5nVmFsdWUoKS5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL3NhZmUtc3RyaW5nLWNvZXJjaW9uXG4gIHJldHVybiAnJyArIHZhbHVlO1xufVxuZnVuY3Rpb24gZ2V0VG9TdHJpbmdWYWx1ZSh2YWx1ZSkge1xuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgIGNhc2UgJ251bWJlcic6XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICBjYXNlICd1bmRlZmluZWQnOlxuICAgICAgcmV0dXJuIHZhbHVlO1xuXG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHtcbiAgICAgICAgY2hlY2tGb3JtRmllbGRWYWx1ZVN0cmluZ0NvZXJjaW9uKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIC8vIGZ1bmN0aW9uLCBzeW1ib2wgYXJlIGFzc2lnbmVkIGFzIGVtcHR5IHN0cmluZ3NcbiAgICAgIHJldHVybiAnJztcbiAgfVxufVxuXG52YXIgaGFzUmVhZE9ubHlWYWx1ZSA9IHtcbiAgYnV0dG9uOiB0cnVlLFxuICBjaGVja2JveDogdHJ1ZSxcbiAgaW1hZ2U6IHRydWUsXG4gIGhpZGRlbjogdHJ1ZSxcbiAgcmFkaW86IHRydWUsXG4gIHJlc2V0OiB0cnVlLFxuICBzdWJtaXQ6IHRydWVcbn07XG5mdW5jdGlvbiBjaGVja0NvbnRyb2xsZWRWYWx1ZVByb3BzKHRhZ05hbWUsIHByb3BzKSB7XG4gIHtcbiAgICBpZiAoIShoYXNSZWFkT25seVZhbHVlW3Byb3BzLnR5cGVdIHx8IHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLm9uSW5wdXQgfHwgcHJvcHMucmVhZE9ubHkgfHwgcHJvcHMuZGlzYWJsZWQgfHwgcHJvcHMudmFsdWUgPT0gbnVsbCkpIHtcbiAgICAgIGVycm9yKCdZb3UgcHJvdmlkZWQgYSBgdmFsdWVgIHByb3AgdG8gYSBmb3JtIGZpZWxkIHdpdGhvdXQgYW4gJyArICdgb25DaGFuZ2VgIGhhbmRsZXIuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIElmICcgKyAndGhlIGZpZWxkIHNob3VsZCBiZSBtdXRhYmxlIHVzZSBgZGVmYXVsdFZhbHVlYC4gT3RoZXJ3aXNlLCAnICsgJ3NldCBlaXRoZXIgYG9uQ2hhbmdlYCBvciBgcmVhZE9ubHlgLicpO1xuICAgIH1cblxuICAgIGlmICghKHByb3BzLm9uQ2hhbmdlIHx8IHByb3BzLnJlYWRPbmx5IHx8IHByb3BzLmRpc2FibGVkIHx8IHByb3BzLmNoZWNrZWQgPT0gbnVsbCkpIHtcbiAgICAgIGVycm9yKCdZb3UgcHJvdmlkZWQgYSBgY2hlY2tlZGAgcHJvcCB0byBhIGZvcm0gZmllbGQgd2l0aG91dCBhbiAnICsgJ2BvbkNoYW5nZWAgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gSWYgJyArICd0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGBkZWZhdWx0Q2hlY2tlZGAuIE90aGVyd2lzZSwgJyArICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNDaGVja2FibGUoZWxlbSkge1xuICB2YXIgdHlwZSA9IGVsZW0udHlwZTtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbS5ub2RlTmFtZTtcbiAgcmV0dXJuIG5vZGVOYW1lICYmIG5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdpbnB1dCcgJiYgKHR5cGUgPT09ICdjaGVja2JveCcgfHwgdHlwZSA9PT0gJ3JhZGlvJyk7XG59XG5cbmZ1bmN0aW9uIGdldFRyYWNrZXIobm9kZSkge1xuICByZXR1cm4gbm9kZS5fdmFsdWVUcmFja2VyO1xufVxuXG5mdW5jdGlvbiBkZXRhY2hUcmFja2VyKG5vZGUpIHtcbiAgbm9kZS5fdmFsdWVUcmFja2VyID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZ2V0VmFsdWVGcm9tTm9kZShub2RlKSB7XG4gIHZhciB2YWx1ZSA9ICcnO1xuXG4gIGlmICghbm9kZSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmIChpc0NoZWNrYWJsZShub2RlKSkge1xuICAgIHZhbHVlID0gbm9kZS5jaGVja2VkID8gJ3RydWUnIDogJ2ZhbHNlJztcbiAgfSBlbHNlIHtcbiAgICB2YWx1ZSA9IG5vZGUudmFsdWU7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIHRyYWNrVmFsdWVPbk5vZGUobm9kZSkge1xuICB2YXIgdmFsdWVGaWVsZCA9IGlzQ2hlY2thYmxlKG5vZGUpID8gJ2NoZWNrZWQnIDogJ3ZhbHVlJztcbiAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG5vZGUuY29uc3RydWN0b3IucHJvdG90eXBlLCB2YWx1ZUZpZWxkKTtcblxuICB7XG4gICAgY2hlY2tGb3JtRmllbGRWYWx1ZVN0cmluZ0NvZXJjaW9uKG5vZGVbdmFsdWVGaWVsZF0pO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRWYWx1ZSA9ICcnICsgbm9kZVt2YWx1ZUZpZWxkXTsgLy8gaWYgc29tZW9uZSBoYXMgYWxyZWFkeSBkZWZpbmVkIGEgdmFsdWUgb3IgU2FmYXJpLCB0aGVuIGJhaWxcbiAgLy8gYW5kIGRvbid0IHRyYWNrIHZhbHVlIHdpbGwgY2F1c2Ugb3ZlciByZXBvcnRpbmcgb2YgY2hhbmdlcyxcbiAgLy8gYnV0IGl0J3MgYmV0dGVyIHRoZW4gYSBoYXJkIGZhaWx1cmVcbiAgLy8gKG5lZWRlZCBmb3IgY2VydGFpbiB0ZXN0cyB0aGF0IHNweU9uIGlucHV0IHZhbHVlcyBhbmQgU2FmYXJpKVxuXG4gIGlmIChub2RlLmhhc093blByb3BlcnR5KHZhbHVlRmllbGQpIHx8IHR5cGVvZiBkZXNjcmlwdG9yID09PSAndW5kZWZpbmVkJyB8fCB0eXBlb2YgZGVzY3JpcHRvci5nZXQgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGRlc2NyaXB0b3Iuc2V0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGdldCA9IGRlc2NyaXB0b3IuZ2V0LFxuICAgICAgc2V0ID0gZGVzY3JpcHRvci5zZXQ7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub2RlLCB2YWx1ZUZpZWxkLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGdldC5jYWxsKHRoaXMpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHtcbiAgICAgICAgY2hlY2tGb3JtRmllbGRWYWx1ZVN0cmluZ0NvZXJjaW9uKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgY3VycmVudFZhbHVlID0gJycgKyB2YWx1ZTtcbiAgICAgIHNldC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICB9XG4gIH0pOyAvLyBXZSBjb3VsZCd2ZSBwYXNzZWQgdGhpcyB0aGUgZmlyc3QgdGltZVxuICAvLyBidXQgaXQgdHJpZ2dlcnMgYSBidWcgaW4gSUUxMSBhbmQgRWRnZSAxNC8xNS5cbiAgLy8gQ2FsbGluZyBkZWZpbmVQcm9wZXJ0eSgpIGFnYWluIHNob3VsZCBiZSBlcXVpdmFsZW50LlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzExNzY4XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5vZGUsIHZhbHVlRmllbGQsIHtcbiAgICBlbnVtZXJhYmxlOiBkZXNjcmlwdG9yLmVudW1lcmFibGVcbiAgfSk7XG4gIHZhciB0cmFja2VyID0ge1xuICAgIGdldFZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY3VycmVudFZhbHVlO1xuICAgIH0sXG4gICAgc2V0VmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAge1xuICAgICAgICBjaGVja0Zvcm1GaWVsZFZhbHVlU3RyaW5nQ29lcmNpb24odmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBjdXJyZW50VmFsdWUgPSAnJyArIHZhbHVlO1xuICAgIH0sXG4gICAgc3RvcFRyYWNraW5nOiBmdW5jdGlvbiAoKSB7XG4gICAgICBkZXRhY2hUcmFja2VyKG5vZGUpO1xuICAgICAgZGVsZXRlIG5vZGVbdmFsdWVGaWVsZF07XG4gICAgfVxuICB9O1xuICByZXR1cm4gdHJhY2tlcjtcbn1cblxuZnVuY3Rpb24gdHJhY2sobm9kZSkge1xuICBpZiAoZ2V0VHJhY2tlcihub2RlKSkge1xuICAgIHJldHVybjtcbiAgfSAvLyBUT0RPOiBPbmNlIGl0J3MganVzdCBGaWJlciB3ZSBjYW4gbW92ZSB0aGlzIHRvIG5vZGUuX3dyYXBwZXJTdGF0ZVxuXG5cbiAgbm9kZS5fdmFsdWVUcmFja2VyID0gdHJhY2tWYWx1ZU9uTm9kZShub2RlKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZVZhbHVlSWZDaGFuZ2VkKG5vZGUpIHtcbiAgaWYgKCFub2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHRyYWNrZXIgPSBnZXRUcmFja2VyKG5vZGUpOyAvLyBpZiB0aGVyZSBpcyBubyB0cmFja2VyIGF0IHRoaXMgcG9pbnQgaXQncyB1bmxpa2VseVxuICAvLyB0aGF0IHRyeWluZyBhZ2FpbiB3aWxsIHN1Y2NlZWRcblxuICBpZiAoIXRyYWNrZXIpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHZhciBsYXN0VmFsdWUgPSB0cmFja2VyLmdldFZhbHVlKCk7XG4gIHZhciBuZXh0VmFsdWUgPSBnZXRWYWx1ZUZyb21Ob2RlKG5vZGUpO1xuXG4gIGlmIChuZXh0VmFsdWUgIT09IGxhc3RWYWx1ZSkge1xuICAgIHRyYWNrZXIuc2V0VmFsdWUobmV4dFZhbHVlKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudChkb2MpIHtcbiAgZG9jID0gZG9jIHx8ICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnID8gZG9jdW1lbnQgOiB1bmRlZmluZWQpO1xuXG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cblxudmFyIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSA9IGZhbHNlO1xudmFyIGRpZFdhcm5DaGVja2VkRGVmYXVsdENoZWNrZWQgPSBmYWxzZTtcbnZhciBkaWRXYXJuQ29udHJvbGxlZFRvVW5jb250cm9sbGVkID0gZmFsc2U7XG52YXIgZGlkV2FyblVuY29udHJvbGxlZFRvQ29udHJvbGxlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBpc0NvbnRyb2xsZWQocHJvcHMpIHtcbiAgdmFyIHVzZXNDaGVja2VkID0gcHJvcHMudHlwZSA9PT0gJ2NoZWNrYm94JyB8fCBwcm9wcy50eXBlID09PSAncmFkaW8nO1xuICByZXR1cm4gdXNlc0NoZWNrZWQgPyBwcm9wcy5jaGVja2VkICE9IG51bGwgOiBwcm9wcy52YWx1ZSAhPSBudWxsO1xufVxuLyoqXG4gKiBJbXBsZW1lbnRzIGFuIDxpbnB1dD4gaG9zdCBjb21wb25lbnQgdGhhdCBhbGxvd3Mgc2V0dGluZyB0aGVzZSBvcHRpb25hbFxuICogcHJvcHM6IGBjaGVja2VkYCwgYHZhbHVlYCwgYGRlZmF1bHRDaGVja2VkYCwgYW5kIGBkZWZhdWx0VmFsdWVgLlxuICpcbiAqIElmIGBjaGVja2VkYCBvciBgdmFsdWVgIGFyZSBub3Qgc3VwcGxpZWQgKG9yIG51bGwvdW5kZWZpbmVkKSwgdXNlciBhY3Rpb25zXG4gKiB0aGF0IGFmZmVjdCB0aGUgY2hlY2tlZCBzdGF0ZSBvciB2YWx1ZSB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBJZiB0aGV5IGFyZSBzdXBwbGllZCAoYW5kIG5vdCBudWxsL3VuZGVmaW5lZCksIHRoZSByZW5kZXJlZCBlbGVtZW50IHdpbGwgbm90XG4gKiB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIGVsZW1lbnQuIEluc3RlYWQsIHRoZSBwcm9wcyBtdXN0IGNoYW5nZSBpbiBvcmRlciBmb3JcbiAqIHRoZSByZW5kZXJlZCBlbGVtZW50IHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogVGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBiZSBpbml0aWFsaXplZCBhcyB1bmNoZWNrZWQgKG9yIGBkZWZhdWx0Q2hlY2tlZGApXG4gKiB3aXRoIGFuIGVtcHR5IHZhbHVlIChvciBgZGVmYXVsdFZhbHVlYCkuXG4gKlxuICogU2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTIvV0QtaHRtbDUtMjAxMjEwMjUvdGhlLWlucHV0LWVsZW1lbnQuaHRtbFxuICovXG5cblxuZnVuY3Rpb24gZ2V0SG9zdFByb3BzKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcbiAgdmFyIGNoZWNrZWQgPSBwcm9wcy5jaGVja2VkO1xuICB2YXIgaG9zdFByb3BzID0gYXNzaWduKHt9LCBwcm9wcywge1xuICAgIGRlZmF1bHRDaGVja2VkOiB1bmRlZmluZWQsXG4gICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgdmFsdWU6IHVuZGVmaW5lZCxcbiAgICBjaGVja2VkOiBjaGVja2VkICE9IG51bGwgPyBjaGVja2VkIDogbm9kZS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkXG4gIH0pO1xuICByZXR1cm4gaG9zdFByb3BzO1xufVxuZnVuY3Rpb24gaW5pdFdyYXBwZXJTdGF0ZShlbGVtZW50LCBwcm9wcykge1xuICB7XG4gICAgY2hlY2tDb250cm9sbGVkVmFsdWVQcm9wcygnaW5wdXQnLCBwcm9wcyk7XG5cbiAgICBpZiAocHJvcHMuY2hlY2tlZCAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmRlZmF1bHRDaGVja2VkICE9PSB1bmRlZmluZWQgJiYgIWRpZFdhcm5DaGVja2VkRGVmYXVsdENoZWNrZWQpIHtcbiAgICAgIGVycm9yKCclcyBjb250YWlucyBhbiBpbnB1dCBvZiB0eXBlICVzIHdpdGggYm90aCBjaGVja2VkIGFuZCBkZWZhdWx0Q2hlY2tlZCBwcm9wcy4gJyArICdJbnB1dCBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAnICsgJyhzcGVjaWZ5IGVpdGhlciB0aGUgY2hlY2tlZCBwcm9wLCBvciB0aGUgZGVmYXVsdENoZWNrZWQgcHJvcCwgYnV0IG5vdCAnICsgJ2JvdGgpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIGlucHV0ICcgKyAnZWxlbWVudCBhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9jb250cm9sbGVkLWNvbXBvbmVudHMnLCBnZXRDdXJyZW50RmliZXJPd25lck5hbWVJbkRldk9yTnVsbCgpIHx8ICdBIGNvbXBvbmVudCcsIHByb3BzLnR5cGUpO1xuXG4gICAgICBkaWRXYXJuQ2hlY2tlZERlZmF1bHRDaGVja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMudmFsdWUgIT09IHVuZGVmaW5lZCAmJiBwcm9wcy5kZWZhdWx0VmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlKSB7XG4gICAgICBlcnJvcignJXMgY29udGFpbnMgYW4gaW5wdXQgb2YgdHlwZSAlcyB3aXRoIGJvdGggdmFsdWUgYW5kIGRlZmF1bHRWYWx1ZSBwcm9wcy4gJyArICdJbnB1dCBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAnICsgJyhzcGVjaWZ5IGVpdGhlciB0aGUgdmFsdWUgcHJvcCwgb3IgdGhlIGRlZmF1bHRWYWx1ZSBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgaW5wdXQgJyArICdlbGVtZW50IGFuZCByZW1vdmUgb25lIG9mIHRoZXNlIHByb3BzLiBNb3JlIGluZm86ICcgKyAnaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL2NvbnRyb2xsZWQtY29tcG9uZW50cycsIGdldEN1cnJlbnRGaWJlck93bmVyTmFtZUluRGV2T3JOdWxsKCkgfHwgJ0EgY29tcG9uZW50JywgcHJvcHMudHlwZSk7XG5cbiAgICAgIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICB2YXIgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlID09IG51bGwgPyAnJyA6IHByb3BzLmRlZmF1bHRWYWx1ZTtcbiAgbm9kZS5fd3JhcHBlclN0YXRlID0ge1xuICAgIGluaXRpYWxDaGVja2VkOiBwcm9wcy5jaGVja2VkICE9IG51bGwgPyBwcm9wcy5jaGVja2VkIDogcHJvcHMuZGVmYXVsdENoZWNrZWQsXG4gICAgaW5pdGlhbFZhbHVlOiBnZXRUb1N0cmluZ1ZhbHVlKHByb3BzLnZhbHVlICE9IG51bGwgPyBwcm9wcy52YWx1ZSA6IGRlZmF1bHRWYWx1ZSksXG4gICAgY29udHJvbGxlZDogaXNDb250cm9sbGVkKHByb3BzKVxuICB9O1xufVxuZnVuY3Rpb24gdXBkYXRlQ2hlY2tlZChlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIHZhciBjaGVja2VkID0gcHJvcHMuY2hlY2tlZDtcblxuICBpZiAoY2hlY2tlZCAhPSBudWxsKSB7XG4gICAgc2V0VmFsdWVGb3JQcm9wZXJ0eShub2RlLCAnY2hlY2tlZCcsIGNoZWNrZWQsIGZhbHNlKTtcbiAgfVxufVxuZnVuY3Rpb24gdXBkYXRlV3JhcHBlcihlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG5cbiAge1xuICAgIHZhciBjb250cm9sbGVkID0gaXNDb250cm9sbGVkKHByb3BzKTtcblxuICAgIGlmICghbm9kZS5fd3JhcHBlclN0YXRlLmNvbnRyb2xsZWQgJiYgY29udHJvbGxlZCAmJiAhZGlkV2FyblVuY29udHJvbGxlZFRvQ29udHJvbGxlZCkge1xuICAgICAgZXJyb3IoJ0EgY29tcG9uZW50IGlzIGNoYW5naW5nIGFuIHVuY29udHJvbGxlZCBpbnB1dCB0byBiZSBjb250cm9sbGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSB0aGUgdmFsdWUgY2hhbmdpbmcgZnJvbSB1bmRlZmluZWQgdG8gJyArICdhIGRlZmluZWQgdmFsdWUsIHdoaWNoIHNob3VsZCBub3QgaGFwcGVuLiAnICsgJ0RlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgaW5wdXQgJyArICdlbGVtZW50IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIGNvbXBvbmVudC4gTW9yZSBpbmZvOiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvY29udHJvbGxlZC1jb21wb25lbnRzJyk7XG5cbiAgICAgIGRpZFdhcm5VbmNvbnRyb2xsZWRUb0NvbnRyb2xsZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChub2RlLl93cmFwcGVyU3RhdGUuY29udHJvbGxlZCAmJiAhY29udHJvbGxlZCAmJiAhZGlkV2FybkNvbnRyb2xsZWRUb1VuY29udHJvbGxlZCkge1xuICAgICAgZXJyb3IoJ0EgY29tcG9uZW50IGlzIGNoYW5naW5nIGEgY29udHJvbGxlZCBpbnB1dCB0byBiZSB1bmNvbnRyb2xsZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IHRoZSB2YWx1ZSBjaGFuZ2luZyBmcm9tIGEgZGVmaW5lZCB0byAnICsgJ3VuZGVmaW5lZCwgd2hpY2ggc2hvdWxkIG5vdCBoYXBwZW4uICcgKyAnRGVjaWRlIGJldHdlZW4gdXNpbmcgYSBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCBpbnB1dCAnICsgJ2VsZW1lbnQgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgY29tcG9uZW50LiBNb3JlIGluZm86IGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9jb250cm9sbGVkLWNvbXBvbmVudHMnKTtcblxuICAgICAgZGlkV2FybkNvbnRyb2xsZWRUb1VuY29udHJvbGxlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlQ2hlY2tlZChlbGVtZW50LCBwcm9wcyk7XG4gIHZhciB2YWx1ZSA9IGdldFRvU3RyaW5nVmFsdWUocHJvcHMudmFsdWUpO1xuICB2YXIgdHlwZSA9IHByb3BzLnR5cGU7XG5cbiAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gMCAmJiBub2RlLnZhbHVlID09PSAnJyB8fCAvLyBXZSBleHBsaWNpdGx5IHdhbnQgdG8gY29lcmNlIHRvIG51bWJlciBoZXJlIGlmIHBvc3NpYmxlLlxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBub2RlLnZhbHVlICE9IHZhbHVlKSB7XG4gICAgICAgIG5vZGUudmFsdWUgPSB0b1N0cmluZyh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlLnZhbHVlICE9PSB0b1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIG5vZGUudmFsdWUgPSB0b1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGUgPT09ICdzdWJtaXQnIHx8IHR5cGUgPT09ICdyZXNldCcpIHtcbiAgICAvLyBTdWJtaXQvcmVzZXQgaW5wdXRzIG5lZWQgdGhlIGF0dHJpYnV0ZSByZW1vdmVkIGNvbXBsZXRlbHkgdG8gYXZvaWRcbiAgICAvLyBibGFuay10ZXh0IGJ1dHRvbnMuXG4gICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAge1xuICAgIC8vIFdoZW4gc3luY2luZyB0aGUgdmFsdWUgYXR0cmlidXRlLCB0aGUgdmFsdWUgY29tZXMgZnJvbSBhIGNhc2NhZGUgb2ZcbiAgICAvLyBwcm9wZXJ0aWVzOlxuICAgIC8vICAxLiBUaGUgdmFsdWUgUmVhY3QgcHJvcGVydHlcbiAgICAvLyAgMi4gVGhlIGRlZmF1bHRWYWx1ZSBSZWFjdCBwcm9wZXJ0eVxuICAgIC8vICAzLiBPdGhlcndpc2UgdGhlcmUgc2hvdWxkIGJlIG5vIGNoYW5nZVxuICAgIGlmIChwcm9wcy5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSkge1xuICAgICAgc2V0RGVmYXVsdFZhbHVlKG5vZGUsIHByb3BzLnR5cGUsIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKHByb3BzLmhhc093blByb3BlcnR5KCdkZWZhdWx0VmFsdWUnKSkge1xuICAgICAgc2V0RGVmYXVsdFZhbHVlKG5vZGUsIHByb3BzLnR5cGUsIGdldFRvU3RyaW5nVmFsdWUocHJvcHMuZGVmYXVsdFZhbHVlKSk7XG4gICAgfVxuICB9XG5cbiAge1xuICAgIC8vIFdoZW4gc3luY2luZyB0aGUgY2hlY2tlZCBhdHRyaWJ1dGUsIGl0IG9ubHkgY2hhbmdlcyB3aGVuIGl0IG5lZWRzXG4gICAgLy8gdG8gYmUgcmVtb3ZlZCwgc3VjaCBhcyB0cmFuc2l0aW9uaW5nIGZyb20gYSBjaGVja2JveCBpbnRvIGEgdGV4dCBpbnB1dFxuICAgIGlmIChwcm9wcy5jaGVja2VkID09IG51bGwgJiYgcHJvcHMuZGVmYXVsdENoZWNrZWQgIT0gbnVsbCkge1xuICAgICAgbm9kZS5kZWZhdWx0Q2hlY2tlZCA9ICEhcHJvcHMuZGVmYXVsdENoZWNrZWQ7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBwb3N0TW91bnRXcmFwcGVyKGVsZW1lbnQsIHByb3BzLCBpc0h5ZHJhdGluZykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7IC8vIERvIG5vdCBhc3NpZ24gdmFsdWUgaWYgaXQgaXMgYWxyZWFkeSBzZXQuIFRoaXMgcHJldmVudHMgdXNlciB0ZXh0IGlucHV0XG4gIC8vIGZyb20gYmVpbmcgbG9zdCBkdXJpbmcgU1NSIGh5ZHJhdGlvbi5cblxuICBpZiAocHJvcHMuaGFzT3duUHJvcGVydHkoJ3ZhbHVlJykgfHwgcHJvcHMuaGFzT3duUHJvcGVydHkoJ2RlZmF1bHRWYWx1ZScpKSB7XG4gICAgdmFyIHR5cGUgPSBwcm9wcy50eXBlO1xuICAgIHZhciBpc0J1dHRvbiA9IHR5cGUgPT09ICdzdWJtaXQnIHx8IHR5cGUgPT09ICdyZXNldCc7IC8vIEF2b2lkIHNldHRpbmcgdmFsdWUgYXR0cmlidXRlIG9uIHN1Ym1pdC9yZXNldCBpbnB1dHMgYXMgaXQgb3ZlcnJpZGVzIHRoZVxuICAgIC8vIGRlZmF1bHQgdmFsdWUgcHJvdmlkZWQgYnkgdGhlIGJyb3dzZXIuIFNlZTogIzEyODcyXG5cbiAgICBpZiAoaXNCdXR0b24gJiYgKHByb3BzLnZhbHVlID09PSB1bmRlZmluZWQgfHwgcHJvcHMudmFsdWUgPT09IG51bGwpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxWYWx1ZSA9IHRvU3RyaW5nKG5vZGUuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpOyAvLyBEbyBub3QgYXNzaWduIHZhbHVlIGlmIGl0IGlzIGFscmVhZHkgc2V0LiBUaGlzIHByZXZlbnRzIHVzZXIgdGV4dCBpbnB1dFxuICAgIC8vIGZyb20gYmVpbmcgbG9zdCBkdXJpbmcgU1NSIGh5ZHJhdGlvbi5cblxuICAgIGlmICghaXNIeWRyYXRpbmcpIHtcbiAgICAgIHtcbiAgICAgICAgLy8gV2hlbiBzeW5jaW5nIHRoZSB2YWx1ZSBhdHRyaWJ1dGUsIHRoZSB2YWx1ZSBwcm9wZXJ0eSBzaG91bGQgdXNlXG4gICAgICAgIC8vIHRoZSB3cmFwcGVyU3RhdGUuX2luaXRpYWxWYWx1ZSBwcm9wZXJ0eS4gVGhpcyB1c2VzOlxuICAgICAgICAvL1xuICAgICAgICAvLyAgIDEuIFRoZSB2YWx1ZSBSZWFjdCBwcm9wZXJ0eSB3aGVuIHByZXNlbnRcbiAgICAgICAgLy8gICAyLiBUaGUgZGVmYXVsdFZhbHVlIFJlYWN0IHByb3BlcnR5IHdoZW4gcHJlc2VudFxuICAgICAgICAvLyAgIDMuIEFuIGVtcHR5IHN0cmluZ1xuICAgICAgICBpZiAoaW5pdGlhbFZhbHVlICE9PSBub2RlLnZhbHVlKSB7XG4gICAgICAgICAgbm9kZS52YWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgdGhlIHZhbHVlIGF0dHJpYnV0ZSBpcyBzeW5jaHJvbml6ZWQgdG8gdGhlIHByb3BlcnR5LFxuICAgICAgLy8gc28gd2UgYXNzaWduIGRlZmF1bHRWYWx1ZSB0byB0aGUgc2FtZSB0aGluZyBhcyB0aGUgdmFsdWUgcHJvcGVydHlcbiAgICAgIC8vIGFzc2lnbm1lbnQgc3RlcCBhYm92ZS5cbiAgICAgIG5vZGUuZGVmYXVsdFZhbHVlID0gaW5pdGlhbFZhbHVlO1xuICAgIH1cbiAgfSAvLyBOb3JtYWxseSwgd2UnZCBqdXN0IGRvIGBub2RlLmNoZWNrZWQgPSBub2RlLmNoZWNrZWRgIHVwb24gaW5pdGlhbCBtb3VudCwgbGVzcyB0aGlzIGJ1Z1xuICAvLyB0aGlzIGlzIG5lZWRlZCB0byB3b3JrIGFyb3VuZCBhIGNocm9tZSBidWcgd2hlcmUgc2V0dGluZyBkZWZhdWx0Q2hlY2tlZFxuICAvLyB3aWxsIHNvbWV0aW1lcyBpbmZsdWVuY2UgdGhlIHZhbHVlIG9mIGNoZWNrZWQgKGV2ZW4gYWZ0ZXIgZGV0YWNobWVudCkuXG4gIC8vIFJlZmVyZW5jZTogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NjA4NDE2XG4gIC8vIFdlIG5lZWQgdG8gdGVtcG9yYXJpbHkgdW5zZXQgbmFtZSB0byBhdm9pZCBkaXNydXB0aW5nIHJhZGlvIGJ1dHRvbiBncm91cHMuXG5cblxuICB2YXIgbmFtZSA9IG5vZGUubmFtZTtcblxuICBpZiAobmFtZSAhPT0gJycpIHtcbiAgICBub2RlLm5hbWUgPSAnJztcbiAgfVxuXG4gIHtcbiAgICAvLyBXaGVuIHN5bmNpbmcgdGhlIGNoZWNrZWQgYXR0cmlidXRlLCBib3RoIHRoZSBjaGVja2VkIHByb3BlcnR5IGFuZFxuICAgIC8vIGF0dHJpYnV0ZSBhcmUgYXNzaWduZWQgYXQgdGhlIHNhbWUgdGltZSB1c2luZyBkZWZhdWx0Q2hlY2tlZC4gVGhpcyB1c2VzOlxuICAgIC8vXG4gICAgLy8gICAxLiBUaGUgY2hlY2tlZCBSZWFjdCBwcm9wZXJ0eSB3aGVuIHByZXNlbnRcbiAgICAvLyAgIDIuIFRoZSBkZWZhdWx0Q2hlY2tlZCBSZWFjdCBwcm9wZXJ0eSB3aGVuIHByZXNlbnRcbiAgICAvLyAgIDMuIE90aGVyd2lzZSwgZmFsc2VcbiAgICBub2RlLmRlZmF1bHRDaGVja2VkID0gIW5vZGUuZGVmYXVsdENoZWNrZWQ7XG4gICAgbm9kZS5kZWZhdWx0Q2hlY2tlZCA9ICEhbm9kZS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkO1xuICB9XG5cbiAgaWYgKG5hbWUgIT09ICcnKSB7XG4gICAgbm9kZS5uYW1lID0gbmFtZTtcbiAgfVxufVxuZnVuY3Rpb24gcmVzdG9yZUNvbnRyb2xsZWRTdGF0ZShlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIHVwZGF0ZVdyYXBwZXIobm9kZSwgcHJvcHMpO1xuICB1cGRhdGVOYW1lZENvdXNpbnMobm9kZSwgcHJvcHMpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVOYW1lZENvdXNpbnMocm9vdE5vZGUsIHByb3BzKSB7XG4gIHZhciBuYW1lID0gcHJvcHMubmFtZTtcblxuICBpZiAocHJvcHMudHlwZSA9PT0gJ3JhZGlvJyAmJiBuYW1lICE9IG51bGwpIHtcbiAgICB2YXIgcXVlcnlSb290ID0gcm9vdE5vZGU7XG5cbiAgICB3aGlsZSAocXVlcnlSb290LnBhcmVudE5vZGUpIHtcbiAgICAgIHF1ZXJ5Um9vdCA9IHF1ZXJ5Um9vdC5wYXJlbnROb2RlO1xuICAgIH0gLy8gSWYgYHJvb3ROb2RlLmZvcm1gIHdhcyBub24tbnVsbCwgdGhlbiB3ZSBjb3VsZCB0cnkgYGZvcm0uZWxlbWVudHNgLFxuICAgIC8vIGJ1dCB0aGF0IHNvbWV0aW1lcyBiZWhhdmVzIHN0cmFuZ2VseSBpbiBJRTguIFdlIGNvdWxkIGFsc28gdHJ5IHVzaW5nXG4gICAgLy8gYGZvcm0uZ2V0RWxlbWVudHNCeU5hbWVgLCBidXQgdGhhdCB3aWxsIG9ubHkgcmV0dXJuIGRpcmVjdCBjaGlsZHJlblxuICAgIC8vIGFuZCB3b24ndCBpbmNsdWRlIGlucHV0cyB0aGF0IHVzZSB0aGUgSFRNTDUgYGZvcm09YCBhdHRyaWJ1dGUuIFNpbmNlXG4gICAgLy8gdGhlIGlucHV0IG1pZ2h0IG5vdCBldmVuIGJlIGluIGEgZm9ybS4gSXQgbWlnaHQgbm90IGV2ZW4gYmUgaW4gdGhlXG4gICAgLy8gZG9jdW1lbnQuIExldCdzIGp1c3QgdXNlIHRoZSBsb2NhbCBgcXVlcnlTZWxlY3RvckFsbGAgdG8gZW5zdXJlIHdlIGRvbid0XG4gICAgLy8gbWlzcyBhbnl0aGluZy5cblxuXG4gICAge1xuICAgICAgY2hlY2tBdHRyaWJ1dGVTdHJpbmdDb2VyY2lvbihuYW1lLCAnbmFtZScpO1xuICAgIH1cblxuICAgIHZhciBncm91cCA9IHF1ZXJ5Um9vdC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFtuYW1lPScgKyBKU09OLnN0cmluZ2lmeSgnJyArIG5hbWUpICsgJ11bdHlwZT1cInJhZGlvXCJdJyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3VwLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgb3RoZXJOb2RlID0gZ3JvdXBbaV07XG5cbiAgICAgIGlmIChvdGhlck5vZGUgPT09IHJvb3ROb2RlIHx8IG90aGVyTm9kZS5mb3JtICE9PSByb290Tm9kZS5mb3JtKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSAvLyBUaGlzIHdpbGwgdGhyb3cgaWYgcmFkaW8gYnV0dG9ucyByZW5kZXJlZCBieSBkaWZmZXJlbnQgY29waWVzIG9mIFJlYWN0XG4gICAgICAvLyBhbmQgdGhlIHNhbWUgbmFtZSBhcmUgcmVuZGVyZWQgaW50byB0aGUgc2FtZSBmb3JtIChzYW1lIGFzICMxOTM5KS5cbiAgICAgIC8vIFRoYXQncyBwcm9iYWJseSBva2F5OyB3ZSBkb24ndCBzdXBwb3J0IGl0IGp1c3QgYXMgd2UgZG9uJ3Qgc3VwcG9ydFxuICAgICAgLy8gbWl4aW5nIFJlYWN0IHJhZGlvIGJ1dHRvbnMgd2l0aCBub24tUmVhY3Qgb25lcy5cblxuXG4gICAgICB2YXIgb3RoZXJQcm9wcyA9IGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUob3RoZXJOb2RlKTtcblxuICAgICAgaWYgKCFvdGhlclByb3BzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVhY3RET01JbnB1dDogTWl4aW5nIFJlYWN0IGFuZCBub24tUmVhY3QgcmFkaW8gaW5wdXRzIHdpdGggdGhlICcgKyAnc2FtZSBgbmFtZWAgaXMgbm90IHN1cHBvcnRlZC4nKTtcbiAgICAgIH0gLy8gV2UgbmVlZCB1cGRhdGUgdGhlIHRyYWNrZWQgdmFsdWUgb24gdGhlIG5hbWVkIGNvdXNpbiBzaW5jZSB0aGUgdmFsdWVcbiAgICAgIC8vIHdhcyBjaGFuZ2VkIGJ1dCB0aGUgaW5wdXQgc2F3IG5vIGV2ZW50IG9yIHZhbHVlIHNldFxuXG5cbiAgICAgIHVwZGF0ZVZhbHVlSWZDaGFuZ2VkKG90aGVyTm9kZSk7IC8vIElmIHRoaXMgaXMgYSBjb250cm9sbGVkIHJhZGlvIGJ1dHRvbiBncm91cCwgZm9yY2luZyB0aGUgaW5wdXQgdGhhdFxuICAgICAgLy8gd2FzIHByZXZpb3VzbHkgY2hlY2tlZCB0byB1cGRhdGUgd2lsbCBjYXVzZSBpdCB0byBiZSBjb21lIHJlLWNoZWNrZWRcbiAgICAgIC8vIGFzIGFwcHJvcHJpYXRlLlxuXG4gICAgICB1cGRhdGVXcmFwcGVyKG90aGVyTm9kZSwgb3RoZXJQcm9wcyk7XG4gICAgfVxuICB9XG59IC8vIEluIENocm9tZSwgYXNzaWduaW5nIGRlZmF1bHRWYWx1ZSB0byBjZXJ0YWluIGlucHV0IHR5cGVzIHRyaWdnZXJzIGlucHV0IHZhbGlkYXRpb24uXG4vLyBGb3IgbnVtYmVyIGlucHV0cywgdGhlIGRpc3BsYXkgdmFsdWUgbG9zZXMgdHJhaWxpbmcgZGVjaW1hbCBwb2ludHMuIEZvciBlbWFpbCBpbnB1dHMsXG4vLyBDaHJvbWUgcmFpc2VzIFwiVGhlIHNwZWNpZmllZCB2YWx1ZSA8eD4gaXMgbm90IGEgdmFsaWQgZW1haWwgYWRkcmVzc1wiLlxuLy9cbi8vIEhlcmUgd2UgY2hlY2sgdG8gc2VlIGlmIHRoZSBkZWZhdWx0VmFsdWUgaGFzIGFjdHVhbGx5IGNoYW5nZWQsIGF2b2lkaW5nIHRoZXNlIHByb2JsZW1zXG4vLyB3aGVuIHRoZSB1c2VyIGlzIGlucHV0dGluZyB0ZXh0XG4vL1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy83MjUzXG5cblxuZnVuY3Rpb24gc2V0RGVmYXVsdFZhbHVlKG5vZGUsIHR5cGUsIHZhbHVlKSB7XG4gIGlmICggLy8gRm9jdXNlZCBudW1iZXIgaW5wdXRzIHN5bmNocm9uaXplIG9uIGJsdXIuIFNlZSBDaGFuZ2VFdmVudFBsdWdpbi5qc1xuICB0eXBlICE9PSAnbnVtYmVyJyB8fCBnZXRBY3RpdmVFbGVtZW50KG5vZGUub3duZXJEb2N1bWVudCkgIT09IG5vZGUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgbm9kZS5kZWZhdWx0VmFsdWUgPSB0b1N0cmluZyhub2RlLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUuZGVmYXVsdFZhbHVlICE9PSB0b1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIG5vZGUuZGVmYXVsdFZhbHVlID0gdG9TdHJpbmcodmFsdWUpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgZGlkV2FyblNlbGVjdGVkU2V0T25PcHRpb24gPSBmYWxzZTtcbnZhciBkaWRXYXJuSW52YWxpZENoaWxkID0gZmFsc2U7XG52YXIgZGlkV2FybkludmFsaWRJbm5lckhUTUwgPSBmYWxzZTtcbi8qKlxuICogSW1wbGVtZW50cyBhbiA8b3B0aW9uPiBob3N0IGNvbXBvbmVudCB0aGF0IHdhcm5zIHdoZW4gYHNlbGVjdGVkYCBpcyBzZXQuXG4gKi9cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wcyhlbGVtZW50LCBwcm9wcykge1xuICB7XG4gICAgLy8gSWYgYSB2YWx1ZSBpcyBub3QgcHJvdmlkZWQsIHRoZW4gdGhlIGNoaWxkcmVuIG11c3QgYmUgc2ltcGxlLlxuICAgIGlmIChwcm9wcy52YWx1ZSA9PSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIHByb3BzLmNoaWxkcmVuID09PSAnb2JqZWN0JyAmJiBwcm9wcy5jaGlsZHJlbiAhPT0gbnVsbCkge1xuICAgICAgICBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoKHByb3BzLmNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgICBpZiAoY2hpbGQgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdzdHJpbmcnIHx8IHR5cGVvZiBjaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoIWRpZFdhcm5JbnZhbGlkQ2hpbGQpIHtcbiAgICAgICAgICAgIGRpZFdhcm5JbnZhbGlkQ2hpbGQgPSB0cnVlO1xuXG4gICAgICAgICAgICBlcnJvcignQ2Fubm90IGluZmVyIHRoZSBvcHRpb24gdmFsdWUgb2YgY29tcGxleCBjaGlsZHJlbi4gJyArICdQYXNzIGEgYHZhbHVlYCBwcm9wIG9yIHVzZSBhIHBsYWluIHN0cmluZyBhcyBjaGlsZHJlbiB0byA8b3B0aW9uPi4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAhPSBudWxsKSB7XG4gICAgICAgIGlmICghZGlkV2FybkludmFsaWRJbm5lckhUTUwpIHtcbiAgICAgICAgICBkaWRXYXJuSW52YWxpZElubmVySFRNTCA9IHRydWU7XG5cbiAgICAgICAgICBlcnJvcignUGFzcyBhIGB2YWx1ZWAgcHJvcCBpZiB5b3Ugc2V0IGRhbmdlcm91c2x5SW5uZXJIVE1MIHNvIFJlYWN0IGtub3dzICcgKyAnd2hpY2ggdmFsdWUgc2hvdWxkIGJlIHNlbGVjdGVkLicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBUT0RPOiBSZW1vdmUgc3VwcG9ydCBmb3IgYHNlbGVjdGVkYCBpbiA8b3B0aW9uPi5cblxuXG4gICAgaWYgKHByb3BzLnNlbGVjdGVkICE9IG51bGwgJiYgIWRpZFdhcm5TZWxlY3RlZFNldE9uT3B0aW9uKSB7XG4gICAgICBlcnJvcignVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIG9uIDxzZWxlY3Q+IGluc3RlYWQgb2YgJyArICdzZXR0aW5nIGBzZWxlY3RlZGAgb24gPG9wdGlvbj4uJyk7XG5cbiAgICAgIGRpZFdhcm5TZWxlY3RlZFNldE9uT3B0aW9uID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHBvc3RNb3VudFdyYXBwZXIkMShlbGVtZW50LCBwcm9wcykge1xuICAvLyB2YWx1ZT1cIlwiIHNob3VsZCBtYWtlIGEgdmFsdWUgYXR0cmlidXRlICgjNjIxOSlcbiAgaWYgKHByb3BzLnZhbHVlICE9IG51bGwpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgndmFsdWUnLCB0b1N0cmluZyhnZXRUb1N0cmluZ1ZhbHVlKHByb3BzLnZhbHVlKSkpO1xuICB9XG59XG5cbnZhciBpc0FycmF5SW1wbCA9IEFycmF5LmlzQXJyYXk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcblxuZnVuY3Rpb24gaXNBcnJheShhKSB7XG4gIHJldHVybiBpc0FycmF5SW1wbChhKTtcbn1cblxudmFyIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSQxO1xuXG57XG4gIGRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSQxID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpIHtcbiAgdmFyIG93bmVyTmFtZSA9IGdldEN1cnJlbnRGaWJlck93bmVyTmFtZUluRGV2T3JOdWxsKCk7XG5cbiAgaWYgKG93bmVyTmFtZSkge1xuICAgIHJldHVybiAnXFxuXFxuQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBvd25lck5hbWUgKyAnYC4nO1xuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuXG52YXIgdmFsdWVQcm9wTmFtZXMgPSBbJ3ZhbHVlJywgJ2RlZmF1bHRWYWx1ZSddO1xuLyoqXG4gKiBWYWxpZGF0aW9uIGZ1bmN0aW9uIGZvciBgdmFsdWVgIGFuZCBgZGVmYXVsdFZhbHVlYC5cbiAqL1xuXG5mdW5jdGlvbiBjaGVja1NlbGVjdFByb3BUeXBlcyhwcm9wcykge1xuICB7XG4gICAgY2hlY2tDb250cm9sbGVkVmFsdWVQcm9wcygnc2VsZWN0JywgcHJvcHMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YWx1ZVByb3BOYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHByb3BOYW1lID0gdmFsdWVQcm9wTmFtZXNbaV07XG5cbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT0gbnVsbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByb3BOYW1lSXNBcnJheSA9IGlzQXJyYXkocHJvcHNbcHJvcE5hbWVdKTtcblxuICAgICAgaWYgKHByb3BzLm11bHRpcGxlICYmICFwcm9wTmFtZUlzQXJyYXkpIHtcbiAgICAgICAgZXJyb3IoJ1RoZSBgJXNgIHByb3Agc3VwcGxpZWQgdG8gPHNlbGVjdD4gbXVzdCBiZSBhbiBhcnJheSBpZiAnICsgJ2BtdWx0aXBsZWAgaXMgdHJ1ZS4lcycsIHByb3BOYW1lLCBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKSk7XG4gICAgICB9IGVsc2UgaWYgKCFwcm9wcy5tdWx0aXBsZSAmJiBwcm9wTmFtZUlzQXJyYXkpIHtcbiAgICAgICAgZXJyb3IoJ1RoZSBgJXNgIHByb3Agc3VwcGxpZWQgdG8gPHNlbGVjdD4gbXVzdCBiZSBhIHNjYWxhciAnICsgJ3ZhbHVlIGlmIGBtdWx0aXBsZWAgaXMgZmFsc2UuJXMnLCBwcm9wTmFtZSwgZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVPcHRpb25zKG5vZGUsIG11bHRpcGxlLCBwcm9wVmFsdWUsIHNldERlZmF1bHRTZWxlY3RlZCkge1xuICB2YXIgb3B0aW9ucyA9IG5vZGUub3B0aW9ucztcblxuICBpZiAobXVsdGlwbGUpIHtcbiAgICB2YXIgc2VsZWN0ZWRWYWx1ZXMgPSBwcm9wVmFsdWU7XG4gICAgdmFyIHNlbGVjdGVkVmFsdWUgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZWN0ZWRWYWx1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIC8vIFByZWZpeCB0byBhdm9pZCBjaGFvcyB3aXRoIHNwZWNpYWwga2V5cy5cbiAgICAgIHNlbGVjdGVkVmFsdWVbJyQnICsgc2VsZWN0ZWRWYWx1ZXNbaV1dID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgb3B0aW9ucy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBzZWxlY3RlZCA9IHNlbGVjdGVkVmFsdWUuaGFzT3duUHJvcGVydHkoJyQnICsgb3B0aW9uc1tfaV0udmFsdWUpO1xuXG4gICAgICBpZiAob3B0aW9uc1tfaV0uc2VsZWN0ZWQgIT09IHNlbGVjdGVkKSB7XG4gICAgICAgIG9wdGlvbnNbX2ldLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChzZWxlY3RlZCAmJiBzZXREZWZhdWx0U2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uc1tfaV0uZGVmYXVsdFNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gRG8gbm90IHNldCBgc2VsZWN0LnZhbHVlYCBhcyBleGFjdCBiZWhhdmlvciBpc24ndCBjb25zaXN0ZW50IGFjcm9zcyBhbGxcbiAgICAvLyBicm93c2VycyBmb3IgYWxsIGNhc2VzLlxuICAgIHZhciBfc2VsZWN0ZWRWYWx1ZSA9IHRvU3RyaW5nKGdldFRvU3RyaW5nVmFsdWUocHJvcFZhbHVlKSk7XG5cbiAgICB2YXIgZGVmYXVsdFNlbGVjdGVkID0gbnVsbDtcblxuICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IG9wdGlvbnMubGVuZ3RoOyBfaTIrKykge1xuICAgICAgaWYgKG9wdGlvbnNbX2kyXS52YWx1ZSA9PT0gX3NlbGVjdGVkVmFsdWUpIHtcbiAgICAgICAgb3B0aW9uc1tfaTJdLnNlbGVjdGVkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoc2V0RGVmYXVsdFNlbGVjdGVkKSB7XG4gICAgICAgICAgb3B0aW9uc1tfaTJdLmRlZmF1bHRTZWxlY3RlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChkZWZhdWx0U2VsZWN0ZWQgPT09IG51bGwgJiYgIW9wdGlvbnNbX2kyXS5kaXNhYmxlZCkge1xuICAgICAgICBkZWZhdWx0U2VsZWN0ZWQgPSBvcHRpb25zW19pMl07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRlZmF1bHRTZWxlY3RlZCAhPT0gbnVsbCkge1xuICAgICAgZGVmYXVsdFNlbGVjdGVkLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogSW1wbGVtZW50cyBhIDxzZWxlY3Q+IGhvc3QgY29tcG9uZW50IHRoYXQgYWxsb3dzIG9wdGlvbmFsbHkgc2V0dGluZyB0aGVcbiAqIHByb3BzIGB2YWx1ZWAgYW5kIGBkZWZhdWx0VmFsdWVgLiBJZiBgbXVsdGlwbGVgIGlzIGZhbHNlLCB0aGUgcHJvcCBtdXN0IGJlIGFcbiAqIHN0cmluZ2FibGUuIElmIGBtdWx0aXBsZWAgaXMgdHJ1ZSwgdGhlIHByb3AgbXVzdCBiZSBhbiBhcnJheSBvZiBzdHJpbmdhYmxlcy5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnMgdGhhdCBjaGFuZ2UgdGhlXG4gKiBzZWxlY3RlZCBvcHRpb24gd2lsbCB0cmlnZ2VyIHVwZGF0ZXMgdG8gdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gKlxuICogSWYgaXQgaXMgc3VwcGxpZWQgKGFuZCBub3QgbnVsbC91bmRlZmluZWQpLCB0aGUgcmVuZGVyZWQgb3B0aW9ucyB3aWxsIG5vdFxuICogdXBkYXRlIGluIHJlc3BvbnNlIHRvIHVzZXIgYWN0aW9ucy4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBvcHRpb25zIHRvIHVwZGF0ZS5cbiAqXG4gKiBJZiBgZGVmYXVsdFZhbHVlYCBpcyBwcm92aWRlZCwgYW55IG9wdGlvbnMgd2l0aCB0aGUgc3VwcGxpZWQgdmFsdWVzIHdpbGwgYmVcbiAqIHNlbGVjdGVkLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0SG9zdFByb3BzJDEoZWxlbWVudCwgcHJvcHMpIHtcbiAgcmV0dXJuIGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICB2YWx1ZTogdW5kZWZpbmVkXG4gIH0pO1xufVxuZnVuY3Rpb24gaW5pdFdyYXBwZXJTdGF0ZSQxKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcblxuICB7XG4gICAgY2hlY2tTZWxlY3RQcm9wVHlwZXMocHJvcHMpO1xuICB9XG5cbiAgbm9kZS5fd3JhcHBlclN0YXRlID0ge1xuICAgIHdhc011bHRpcGxlOiAhIXByb3BzLm11bHRpcGxlXG4gIH07XG5cbiAge1xuICAgIGlmIChwcm9wcy52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsdWVEZWZhdWx0VmFsdWUkMSkge1xuICAgICAgZXJyb3IoJ1NlbGVjdCBlbGVtZW50cyBtdXN0IGJlIGVpdGhlciBjb250cm9sbGVkIG9yIHVuY29udHJvbGxlZCAnICsgJyhzcGVjaWZ5IGVpdGhlciB0aGUgdmFsdWUgcHJvcCwgb3IgdGhlIGRlZmF1bHRWYWx1ZSBwcm9wLCBidXQgbm90ICcgKyAnYm90aCkuIERlY2lkZSBiZXR3ZWVuIHVzaW5nIGEgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgc2VsZWN0ICcgKyAnZWxlbWVudCBhbmQgcmVtb3ZlIG9uZSBvZiB0aGVzZSBwcm9wcy4gTW9yZSBpbmZvOiAnICsgJ2h0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9jb250cm9sbGVkLWNvbXBvbmVudHMnKTtcblxuICAgICAgZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlJDEgPSB0cnVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcG9zdE1vdW50V3JhcHBlciQyKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcbiAgbm9kZS5tdWx0aXBsZSA9ICEhcHJvcHMubXVsdGlwbGU7XG4gIHZhciB2YWx1ZSA9IHByb3BzLnZhbHVlO1xuXG4gIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgdXBkYXRlT3B0aW9ucyhub2RlLCAhIXByb3BzLm11bHRpcGxlLCB2YWx1ZSwgZmFsc2UpO1xuICB9IGVsc2UgaWYgKHByb3BzLmRlZmF1bHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgdXBkYXRlT3B0aW9ucyhub2RlLCAhIXByb3BzLm11bHRpcGxlLCBwcm9wcy5kZWZhdWx0VmFsdWUsIHRydWUpO1xuICB9XG59XG5mdW5jdGlvbiBwb3N0VXBkYXRlV3JhcHBlcihlbGVtZW50LCBwcm9wcykge1xuICB2YXIgbm9kZSA9IGVsZW1lbnQ7XG4gIHZhciB3YXNNdWx0aXBsZSA9IG5vZGUuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZTtcbiAgbm9kZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlID0gISFwcm9wcy5tdWx0aXBsZTtcbiAgdmFyIHZhbHVlID0gcHJvcHMudmFsdWU7XG5cbiAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICB1cGRhdGVPcHRpb25zKG5vZGUsICEhcHJvcHMubXVsdGlwbGUsIHZhbHVlLCBmYWxzZSk7XG4gIH0gZWxzZSBpZiAod2FzTXVsdGlwbGUgIT09ICEhcHJvcHMubXVsdGlwbGUpIHtcbiAgICAvLyBGb3Igc2ltcGxpY2l0eSwgcmVhcHBseSBgZGVmYXVsdFZhbHVlYCBpZiBgbXVsdGlwbGVgIGlzIHRvZ2dsZWQuXG4gICAgaWYgKHByb3BzLmRlZmF1bHRWYWx1ZSAhPSBudWxsKSB7XG4gICAgICB1cGRhdGVPcHRpb25zKG5vZGUsICEhcHJvcHMubXVsdGlwbGUsIHByb3BzLmRlZmF1bHRWYWx1ZSwgdHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJldmVydCB0aGUgc2VsZWN0IGJhY2sgdG8gaXRzIGRlZmF1bHQgdW5zZWxlY3RlZCBzdGF0ZS5cbiAgICAgIHVwZGF0ZU9wdGlvbnMobm9kZSwgISFwcm9wcy5tdWx0aXBsZSwgcHJvcHMubXVsdGlwbGUgPyBbXSA6ICcnLCBmYWxzZSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiByZXN0b3JlQ29udHJvbGxlZFN0YXRlJDEoZWxlbWVudCwgcHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuICB2YXIgdmFsdWUgPSBwcm9wcy52YWx1ZTtcblxuICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgIHVwZGF0ZU9wdGlvbnMobm9kZSwgISFwcm9wcy5tdWx0aXBsZSwgdmFsdWUsIGZhbHNlKTtcbiAgfVxufVxuXG52YXIgZGlkV2FyblZhbERlZmF1bHRWYWwgPSBmYWxzZTtcblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgPHRleHRhcmVhPiBob3N0IGNvbXBvbmVudCB0aGF0IGFsbG93cyBzZXR0aW5nIGB2YWx1ZWAsIGFuZFxuICogYGRlZmF1bHRWYWx1ZWAuIFRoaXMgZGlmZmVycyBmcm9tIHRoZSB0cmFkaXRpb25hbCBET00gQVBJIGJlY2F1c2UgdmFsdWUgaXNcbiAqIHVzdWFsbHkgc2V0IGFzIFBDREFUQSBjaGlsZHJlbi5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIG5vdCBzdXBwbGllZCAob3IgbnVsbC91bmRlZmluZWQpLCB1c2VyIGFjdGlvbnMgdGhhdCBhZmZlY3QgdGhlXG4gKiB2YWx1ZSB3aWxsIHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC5cbiAqXG4gKiBJZiBgdmFsdWVgIGlzIHN1cHBsaWVkIChhbmQgbm90IG51bGwvdW5kZWZpbmVkKSwgdGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbFxuICogbm90IHRyaWdnZXIgdXBkYXRlcyB0byB0aGUgZWxlbWVudC4gSW5zdGVhZCwgdGhlIGB2YWx1ZWAgcHJvcCBtdXN0IGNoYW5nZSBpblxuICogb3JkZXIgZm9yIHRoZSByZW5kZXJlZCBlbGVtZW50IHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogVGhlIHJlbmRlcmVkIGVsZW1lbnQgd2lsbCBiZSBpbml0aWFsaXplZCB3aXRoIGFuIGVtcHR5IHZhbHVlLCB0aGUgcHJvcFxuICogYGRlZmF1bHRWYWx1ZWAgaWYgc3BlY2lmaWVkLCBvciB0aGUgY2hpbGRyZW4gY29udGVudCAoZGVwcmVjYXRlZCkuXG4gKi9cbmZ1bmN0aW9uIGdldEhvc3RQcm9wcyQyKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcblxuICBpZiAocHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgIT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBkb2VzIG5vdCBtYWtlIHNlbnNlIG9uIDx0ZXh0YXJlYT4uJyk7XG4gIH0gLy8gQWx3YXlzIHNldCBjaGlsZHJlbiB0byB0aGUgc2FtZSB0aGluZy4gSW4gSUU5LCB0aGUgc2VsZWN0aW9uIHJhbmdlIHdpbGxcbiAgLy8gZ2V0IHJlc2V0IGlmIGB0ZXh0Q29udGVudGAgaXMgbXV0YXRlZC4gIFdlIGNvdWxkIGFkZCBhIGNoZWNrIGluIHNldFRleHRDb250ZW50XG4gIC8vIHRvIG9ubHkgc2V0IHRoZSB2YWx1ZSBpZi93aGVuIHRoZSB2YWx1ZSBkaWZmZXJzIGZyb20gdGhlIG5vZGUgdmFsdWUgKHdoaWNoIHdvdWxkXG4gIC8vIGNvbXBsZXRlbHkgc29sdmUgdGhpcyBJRTkgYnVnKSwgYnV0IFNlYmFzdGlhbitTb3BoaWUgc2VlbWVkIHRvIGxpa2UgdGhpc1xuICAvLyBzb2x1dGlvbi4gVGhlIHZhbHVlIGNhbiBiZSBhIGJvb2xlYW4gb3Igb2JqZWN0IHNvIHRoYXQncyB3aHkgaXQncyBmb3JjZWRcbiAgLy8gdG8gYmUgYSBzdHJpbmcuXG5cblxuICB2YXIgaG9zdFByb3BzID0gYXNzaWduKHt9LCBwcm9wcywge1xuICAgIHZhbHVlOiB1bmRlZmluZWQsXG4gICAgZGVmYXVsdFZhbHVlOiB1bmRlZmluZWQsXG4gICAgY2hpbGRyZW46IHRvU3RyaW5nKG5vZGUuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpXG4gIH0pO1xuXG4gIHJldHVybiBob3N0UHJvcHM7XG59XG5mdW5jdGlvbiBpbml0V3JhcHBlclN0YXRlJDIoZWxlbWVudCwgcHJvcHMpIHtcbiAgdmFyIG5vZGUgPSBlbGVtZW50O1xuXG4gIHtcbiAgICBjaGVja0NvbnRyb2xsZWRWYWx1ZVByb3BzKCd0ZXh0YXJlYScsIHByb3BzKTtcblxuICAgIGlmIChwcm9wcy52YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHByb3BzLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkICYmICFkaWRXYXJuVmFsRGVmYXVsdFZhbCkge1xuICAgICAgZXJyb3IoJyVzIGNvbnRhaW5zIGEgdGV4dGFyZWEgd2l0aCBib3RoIHZhbHVlIGFuZCBkZWZhdWx0VmFsdWUgcHJvcHMuICcgKyAnVGV4dGFyZWEgZWxlbWVudHMgbXVzdCBiZSBlaXRoZXIgY29udHJvbGxlZCBvciB1bmNvbnRyb2xsZWQgJyArICcoc3BlY2lmeSBlaXRoZXIgdGhlIHZhbHVlIHByb3AsIG9yIHRoZSBkZWZhdWx0VmFsdWUgcHJvcCwgYnV0IG5vdCAnICsgJ2JvdGgpLiBEZWNpZGUgYmV0d2VlbiB1c2luZyBhIGNvbnRyb2xsZWQgb3IgdW5jb250cm9sbGVkIHRleHRhcmVhICcgKyAnYW5kIHJlbW92ZSBvbmUgb2YgdGhlc2UgcHJvcHMuIE1vcmUgaW5mbzogJyArICdodHRwczovL3JlYWN0anMub3JnL2xpbmsvY29udHJvbGxlZC1jb21wb25lbnRzJywgZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lSW5EZXZPck51bGwoKSB8fCAnQSBjb21wb25lbnQnKTtcblxuICAgICAgZGlkV2FyblZhbERlZmF1bHRWYWwgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpbml0aWFsVmFsdWUgPSBwcm9wcy52YWx1ZTsgLy8gT25seSBib3RoZXIgZmV0Y2hpbmcgZGVmYXVsdCB2YWx1ZSBpZiB3ZSdyZSBnb2luZyB0byB1c2UgaXRcblxuICBpZiAoaW5pdGlhbFZhbHVlID09IG51bGwpIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbixcbiAgICAgICAgZGVmYXVsdFZhbHVlID0gcHJvcHMuZGVmYXVsdFZhbHVlO1xuXG4gICAgaWYgKGNoaWxkcmVuICE9IG51bGwpIHtcbiAgICAgIHtcbiAgICAgICAgZXJyb3IoJ1VzZSB0aGUgYGRlZmF1bHRWYWx1ZWAgb3IgYHZhbHVlYCBwcm9wcyBpbnN0ZWFkIG9mIHNldHRpbmcgJyArICdjaGlsZHJlbiBvbiA8dGV4dGFyZWE+LicpO1xuICAgICAgfVxuXG4gICAgICB7XG4gICAgICAgIGlmIChkZWZhdWx0VmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSWYgeW91IHN1cHBseSBgZGVmYXVsdFZhbHVlYCBvbiBhIDx0ZXh0YXJlYT4sIGRvIG5vdCBwYXNzIGNoaWxkcmVuLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignPHRleHRhcmVhPiBjYW4gb25seSBoYXZlIGF0IG1vc3Qgb25lIGNoaWxkLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW5bMF07XG4gICAgICAgIH1cblxuICAgICAgICBkZWZhdWx0VmFsdWUgPSBjaGlsZHJlbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZGVmYXVsdFZhbHVlID09IG51bGwpIHtcbiAgICAgIGRlZmF1bHRWYWx1ZSA9ICcnO1xuICAgIH1cblxuICAgIGluaXRpYWxWYWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgfVxuXG4gIG5vZGUuX3dyYXBwZXJTdGF0ZSA9IHtcbiAgICBpbml0aWFsVmFsdWU6IGdldFRvU3RyaW5nVmFsdWUoaW5pdGlhbFZhbHVlKVxuICB9O1xufVxuZnVuY3Rpb24gdXBkYXRlV3JhcHBlciQxKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDtcbiAgdmFyIHZhbHVlID0gZ2V0VG9TdHJpbmdWYWx1ZShwcm9wcy52YWx1ZSk7XG4gIHZhciBkZWZhdWx0VmFsdWUgPSBnZXRUb1N0cmluZ1ZhbHVlKHByb3BzLmRlZmF1bHRWYWx1ZSk7XG5cbiAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAvLyBDYXN0IGB2YWx1ZWAgdG8gYSBzdHJpbmcgdG8gZW5zdXJlIHRoZSB2YWx1ZSBpcyBzZXQgY29ycmVjdGx5LiBXaGlsZVxuICAgIC8vIGJyb3dzZXJzIHR5cGljYWxseSBkbyB0aGlzIGFzIG5lY2Vzc2FyeSwganNkb20gZG9lc24ndC5cbiAgICB2YXIgbmV3VmFsdWUgPSB0b1N0cmluZyh2YWx1ZSk7IC8vIFRvIGF2b2lkIHNpZGUgZWZmZWN0cyAoc3VjaCBhcyBsb3NpbmcgdGV4dCBzZWxlY3Rpb24pLCBvbmx5IHNldCB2YWx1ZSBpZiBjaGFuZ2VkXG5cbiAgICBpZiAobmV3VmFsdWUgIT09IG5vZGUudmFsdWUpIHtcbiAgICAgIG5vZGUudmFsdWUgPSBuZXdWYWx1ZTtcbiAgICB9XG5cbiAgICBpZiAocHJvcHMuZGVmYXVsdFZhbHVlID09IG51bGwgJiYgbm9kZS5kZWZhdWx0VmFsdWUgIT09IG5ld1ZhbHVlKSB7XG4gICAgICBub2RlLmRlZmF1bHRWYWx1ZSA9IG5ld1ZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkZWZhdWx0VmFsdWUgIT0gbnVsbCkge1xuICAgIG5vZGUuZGVmYXVsdFZhbHVlID0gdG9TdHJpbmcoZGVmYXVsdFZhbHVlKTtcbiAgfVxufVxuZnVuY3Rpb24gcG9zdE1vdW50V3JhcHBlciQzKGVsZW1lbnQsIHByb3BzKSB7XG4gIHZhciBub2RlID0gZWxlbWVudDsgLy8gVGhpcyBpcyBpbiBwb3N0TW91bnQgYmVjYXVzZSB3ZSBuZWVkIGFjY2VzcyB0byB0aGUgRE9NIG5vZGUsIHdoaWNoIGlzIG5vdFxuICAvLyBhdmFpbGFibGUgdW50aWwgYWZ0ZXIgdGhlIGNvbXBvbmVudCBoYXMgbW91bnRlZC5cblxuICB2YXIgdGV4dENvbnRlbnQgPSBub2RlLnRleHRDb250ZW50OyAvLyBPbmx5IHNldCBub2RlLnZhbHVlIGlmIHRleHRDb250ZW50IGlzIGVxdWFsIHRvIHRoZSBleHBlY3RlZFxuICAvLyBpbml0aWFsIHZhbHVlLiBJbiBJRTEwL0lFMTEgdGhlcmUgaXMgYSBidWcgd2hlcmUgdGhlIHBsYWNlaG9sZGVyIGF0dHJpYnV0ZVxuICAvLyB3aWxsIHBvcHVsYXRlIHRleHRDb250ZW50IGFzIHdlbGwuXG4gIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1pY3Jvc29mdC5jb20vbWljcm9zb2Z0LWVkZ2UvcGxhdGZvcm0vaXNzdWVzLzEwMTUyNS9cblxuICBpZiAodGV4dENvbnRlbnQgPT09IG5vZGUuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpIHtcbiAgICBpZiAodGV4dENvbnRlbnQgIT09ICcnICYmIHRleHRDb250ZW50ICE9PSBudWxsKSB7XG4gICAgICBub2RlLnZhbHVlID0gdGV4dENvbnRlbnQ7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiByZXN0b3JlQ29udHJvbGxlZFN0YXRlJDIoZWxlbWVudCwgcHJvcHMpIHtcbiAgLy8gRE9NIGNvbXBvbmVudCBpcyBzdGlsbCBtb3VudGVkOyB1cGRhdGVcbiAgdXBkYXRlV3JhcHBlciQxKGVsZW1lbnQsIHByb3BzKTtcbn1cblxudmFyIEhUTUxfTkFNRVNQQUNFID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnO1xudmFyIE1BVEhfTkFNRVNQQUNFID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUwnO1xudmFyIFNWR19OQU1FU1BBQ0UgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnOyAvLyBBc3N1bWVzIHRoZXJlIGlzIG5vIHBhcmVudCBuYW1lc3BhY2UuXG5cbmZ1bmN0aW9uIGdldEludHJpbnNpY05hbWVzcGFjZSh0eXBlKSB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3N2Zyc6XG4gICAgICByZXR1cm4gU1ZHX05BTUVTUEFDRTtcblxuICAgIGNhc2UgJ21hdGgnOlxuICAgICAgcmV0dXJuIE1BVEhfTkFNRVNQQUNFO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBIVE1MX05BTUVTUEFDRTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0Q2hpbGROYW1lc3BhY2UocGFyZW50TmFtZXNwYWNlLCB0eXBlKSB7XG4gIGlmIChwYXJlbnROYW1lc3BhY2UgPT0gbnVsbCB8fCBwYXJlbnROYW1lc3BhY2UgPT09IEhUTUxfTkFNRVNQQUNFKSB7XG4gICAgLy8gTm8gKG9yIGRlZmF1bHQpIHBhcmVudCBuYW1lc3BhY2U6IHBvdGVudGlhbCBlbnRyeSBwb2ludC5cbiAgICByZXR1cm4gZ2V0SW50cmluc2ljTmFtZXNwYWNlKHR5cGUpO1xuICB9XG5cbiAgaWYgKHBhcmVudE5hbWVzcGFjZSA9PT0gU1ZHX05BTUVTUEFDRSAmJiB0eXBlID09PSAnZm9yZWlnbk9iamVjdCcpIHtcbiAgICAvLyBXZSdyZSBsZWF2aW5nIFNWRy5cbiAgICByZXR1cm4gSFRNTF9OQU1FU1BBQ0U7XG4gIH0gLy8gQnkgZGVmYXVsdCwgcGFzcyBuYW1lc3BhY2UgYmVsb3cuXG5cblxuICByZXR1cm4gcGFyZW50TmFtZXNwYWNlO1xufVxuXG4vKiBnbG9iYWxzIE1TQXBwICovXG5cbi8qKlxuICogQ3JlYXRlIGEgZnVuY3Rpb24gd2hpY2ggaGFzICd1bnNhZmUnIHByaXZpbGVnZXMgKHJlcXVpcmVkIGJ5IHdpbmRvd3M4IGFwcHMpXG4gKi9cbnZhciBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uID0gZnVuY3Rpb24gKGZ1bmMpIHtcbiAgaWYgKHR5cGVvZiBNU0FwcCAhPT0gJ3VuZGVmaW5lZCcgJiYgTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGFyZzAsIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgIE1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMoYXJnMCwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gICAgICB9KTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jO1xuICB9XG59O1xuXG52YXIgcmV1c2FibGVTVkdDb250YWluZXI7XG4vKipcbiAqIFNldCB0aGUgaW5uZXJIVE1MIHByb3BlcnR5IG9mIGEgbm9kZVxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAqIEBpbnRlcm5hbFxuICovXG5cbnZhciBzZXRJbm5lckhUTUwgPSBjcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uIChub2RlLCBodG1sKSB7XG4gIGlmIChub2RlLm5hbWVzcGFjZVVSSSA9PT0gU1ZHX05BTUVTUEFDRSkge1xuXG4gICAgaWYgKCEoJ2lubmVySFRNTCcgaW4gbm9kZSkpIHtcbiAgICAgIC8vIElFIGRvZXMgbm90IGhhdmUgaW5uZXJIVE1MIGZvciBTVkcgbm9kZXMsIHNvIGluc3RlYWQgd2UgaW5qZWN0IHRoZVxuICAgICAgLy8gbmV3IG1hcmt1cCBpbiBhIHRlbXAgbm9kZSBhbmQgdGhlbiBtb3ZlIHRoZSBjaGlsZCBub2RlcyBhY3Jvc3MgaW50b1xuICAgICAgLy8gdGhlIHRhcmdldCBub2RlXG4gICAgICByZXVzYWJsZVNWR0NvbnRhaW5lciA9IHJldXNhYmxlU1ZHQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgcmV1c2FibGVTVkdDb250YWluZXIuaW5uZXJIVE1MID0gJzxzdmc+JyArIGh0bWwudmFsdWVPZigpLnRvU3RyaW5nKCkgKyAnPC9zdmc+JztcbiAgICAgIHZhciBzdmdOb2RlID0gcmV1c2FibGVTVkdDb250YWluZXIuZmlyc3RDaGlsZDtcblxuICAgICAgd2hpbGUgKG5vZGUuZmlyc3RDaGlsZCkge1xuICAgICAgICBub2RlLnJlbW92ZUNoaWxkKG5vZGUuZmlyc3RDaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChzdmdOb2RlLmZpcnN0Q2hpbGQpIHtcbiAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChzdmdOb2RlLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgbm9kZS5pbm5lckhUTUwgPSBodG1sO1xufSk7XG5cbi8qKlxuICogSFRNTCBub2RlVHlwZSB2YWx1ZXMgdGhhdCByZXByZXNlbnQgdGhlIHR5cGUgb2YgdGhlIG5vZGVcbiAqL1xudmFyIEVMRU1FTlRfTk9ERSA9IDE7XG52YXIgVEVYVF9OT0RFID0gMztcbnZhciBDT01NRU5UX05PREUgPSA4O1xudmFyIERPQ1VNRU5UX05PREUgPSA5O1xudmFyIERPQ1VNRU5UX0ZSQUdNRU5UX05PREUgPSAxMTtcblxuLyoqXG4gKiBTZXQgdGhlIHRleHRDb250ZW50IHByb3BlcnR5IG9mIGEgbm9kZS4gRm9yIHRleHQgdXBkYXRlcywgaXQncyBmYXN0ZXJcbiAqIHRvIHNldCB0aGUgYG5vZGVWYWx1ZWAgb2YgdGhlIFRleHQgbm9kZSBkaXJlY3RseSBpbnN0ZWFkIG9mIHVzaW5nXG4gKiBgLnRleHRDb250ZW50YCB3aGljaCB3aWxsIHJlbW92ZSB0aGUgZXhpc3Rpbmcgbm9kZSBhbmQgY3JlYXRlIGEgbmV3IG9uZS5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG4gKiBAaW50ZXJuYWxcbiAqL1xuXG52YXIgc2V0VGV4dENvbnRlbnQgPSBmdW5jdGlvbiAobm9kZSwgdGV4dCkge1xuICBpZiAodGV4dCkge1xuICAgIHZhciBmaXJzdENoaWxkID0gbm9kZS5maXJzdENoaWxkO1xuXG4gICAgaWYgKGZpcnN0Q2hpbGQgJiYgZmlyc3RDaGlsZCA9PT0gbm9kZS5sYXN0Q2hpbGQgJiYgZmlyc3RDaGlsZC5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFKSB7XG4gICAgICBmaXJzdENoaWxkLm5vZGVWYWx1ZSA9IHRleHQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59O1xuXG4vLyBMaXN0IGRlcml2ZWQgZnJvbSBHZWNrbyBzb3VyY2UgY29kZTpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL2dlY2tvLWRldi9ibG9iLzRlNjM4ZWZjNzEvbGF5b3V0L3N0eWxlL3Rlc3QvcHJvcGVydHlfZGF0YWJhc2UuanNcbnZhciBzaG9ydGhhbmRUb0xvbmdoYW5kID0ge1xuICBhbmltYXRpb246IFsnYW5pbWF0aW9uRGVsYXknLCAnYW5pbWF0aW9uRGlyZWN0aW9uJywgJ2FuaW1hdGlvbkR1cmF0aW9uJywgJ2FuaW1hdGlvbkZpbGxNb2RlJywgJ2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50JywgJ2FuaW1hdGlvbk5hbWUnLCAnYW5pbWF0aW9uUGxheVN0YXRlJywgJ2FuaW1hdGlvblRpbWluZ0Z1bmN0aW9uJ10sXG4gIGJhY2tncm91bmQ6IFsnYmFja2dyb3VuZEF0dGFjaG1lbnQnLCAnYmFja2dyb3VuZENsaXAnLCAnYmFja2dyb3VuZENvbG9yJywgJ2JhY2tncm91bmRJbWFnZScsICdiYWNrZ3JvdW5kT3JpZ2luJywgJ2JhY2tncm91bmRQb3NpdGlvblgnLCAnYmFja2dyb3VuZFBvc2l0aW9uWScsICdiYWNrZ3JvdW5kUmVwZWF0JywgJ2JhY2tncm91bmRTaXplJ10sXG4gIGJhY2tncm91bmRQb3NpdGlvbjogWydiYWNrZ3JvdW5kUG9zaXRpb25YJywgJ2JhY2tncm91bmRQb3NpdGlvblknXSxcbiAgYm9yZGVyOiBbJ2JvcmRlckJvdHRvbUNvbG9yJywgJ2JvcmRlckJvdHRvbVN0eWxlJywgJ2JvcmRlckJvdHRvbVdpZHRoJywgJ2JvcmRlckltYWdlT3V0c2V0JywgJ2JvcmRlckltYWdlUmVwZWF0JywgJ2JvcmRlckltYWdlU2xpY2UnLCAnYm9yZGVySW1hZ2VTb3VyY2UnLCAnYm9yZGVySW1hZ2VXaWR0aCcsICdib3JkZXJMZWZ0Q29sb3InLCAnYm9yZGVyTGVmdFN0eWxlJywgJ2JvcmRlckxlZnRXaWR0aCcsICdib3JkZXJSaWdodENvbG9yJywgJ2JvcmRlclJpZ2h0U3R5bGUnLCAnYm9yZGVyUmlnaHRXaWR0aCcsICdib3JkZXJUb3BDb2xvcicsICdib3JkZXJUb3BTdHlsZScsICdib3JkZXJUb3BXaWR0aCddLFxuICBib3JkZXJCbG9ja0VuZDogWydib3JkZXJCbG9ja0VuZENvbG9yJywgJ2JvcmRlckJsb2NrRW5kU3R5bGUnLCAnYm9yZGVyQmxvY2tFbmRXaWR0aCddLFxuICBib3JkZXJCbG9ja1N0YXJ0OiBbJ2JvcmRlckJsb2NrU3RhcnRDb2xvcicsICdib3JkZXJCbG9ja1N0YXJ0U3R5bGUnLCAnYm9yZGVyQmxvY2tTdGFydFdpZHRoJ10sXG4gIGJvcmRlckJvdHRvbTogWydib3JkZXJCb3R0b21Db2xvcicsICdib3JkZXJCb3R0b21TdHlsZScsICdib3JkZXJCb3R0b21XaWR0aCddLFxuICBib3JkZXJDb2xvcjogWydib3JkZXJCb3R0b21Db2xvcicsICdib3JkZXJMZWZ0Q29sb3InLCAnYm9yZGVyUmlnaHRDb2xvcicsICdib3JkZXJUb3BDb2xvciddLFxuICBib3JkZXJJbWFnZTogWydib3JkZXJJbWFnZU91dHNldCcsICdib3JkZXJJbWFnZVJlcGVhdCcsICdib3JkZXJJbWFnZVNsaWNlJywgJ2JvcmRlckltYWdlU291cmNlJywgJ2JvcmRlckltYWdlV2lkdGgnXSxcbiAgYm9yZGVySW5saW5lRW5kOiBbJ2JvcmRlcklubGluZUVuZENvbG9yJywgJ2JvcmRlcklubGluZUVuZFN0eWxlJywgJ2JvcmRlcklubGluZUVuZFdpZHRoJ10sXG4gIGJvcmRlcklubGluZVN0YXJ0OiBbJ2JvcmRlcklubGluZVN0YXJ0Q29sb3InLCAnYm9yZGVySW5saW5lU3RhcnRTdHlsZScsICdib3JkZXJJbmxpbmVTdGFydFdpZHRoJ10sXG4gIGJvcmRlckxlZnQ6IFsnYm9yZGVyTGVmdENvbG9yJywgJ2JvcmRlckxlZnRTdHlsZScsICdib3JkZXJMZWZ0V2lkdGgnXSxcbiAgYm9yZGVyUmFkaXVzOiBbJ2JvcmRlckJvdHRvbUxlZnRSYWRpdXMnLCAnYm9yZGVyQm90dG9tUmlnaHRSYWRpdXMnLCAnYm9yZGVyVG9wTGVmdFJhZGl1cycsICdib3JkZXJUb3BSaWdodFJhZGl1cyddLFxuICBib3JkZXJSaWdodDogWydib3JkZXJSaWdodENvbG9yJywgJ2JvcmRlclJpZ2h0U3R5bGUnLCAnYm9yZGVyUmlnaHRXaWR0aCddLFxuICBib3JkZXJTdHlsZTogWydib3JkZXJCb3R0b21TdHlsZScsICdib3JkZXJMZWZ0U3R5bGUnLCAnYm9yZGVyUmlnaHRTdHlsZScsICdib3JkZXJUb3BTdHlsZSddLFxuICBib3JkZXJUb3A6IFsnYm9yZGVyVG9wQ29sb3InLCAnYm9yZGVyVG9wU3R5bGUnLCAnYm9yZGVyVG9wV2lkdGgnXSxcbiAgYm9yZGVyV2lkdGg6IFsnYm9yZGVyQm90dG9tV2lkdGgnLCAnYm9yZGVyTGVmdFdpZHRoJywgJ2JvcmRlclJpZ2h0V2lkdGgnLCAnYm9yZGVyVG9wV2lkdGgnXSxcbiAgY29sdW1uUnVsZTogWydjb2x1bW5SdWxlQ29sb3InLCAnY29sdW1uUnVsZVN0eWxlJywgJ2NvbHVtblJ1bGVXaWR0aCddLFxuICBjb2x1bW5zOiBbJ2NvbHVtbkNvdW50JywgJ2NvbHVtbldpZHRoJ10sXG4gIGZsZXg6IFsnZmxleEJhc2lzJywgJ2ZsZXhHcm93JywgJ2ZsZXhTaHJpbmsnXSxcbiAgZmxleEZsb3c6IFsnZmxleERpcmVjdGlvbicsICdmbGV4V3JhcCddLFxuICBmb250OiBbJ2ZvbnRGYW1pbHknLCAnZm9udEZlYXR1cmVTZXR0aW5ncycsICdmb250S2VybmluZycsICdmb250TGFuZ3VhZ2VPdmVycmlkZScsICdmb250U2l6ZScsICdmb250U2l6ZUFkanVzdCcsICdmb250U3RyZXRjaCcsICdmb250U3R5bGUnLCAnZm9udFZhcmlhbnQnLCAnZm9udFZhcmlhbnRBbHRlcm5hdGVzJywgJ2ZvbnRWYXJpYW50Q2FwcycsICdmb250VmFyaWFudEVhc3RBc2lhbicsICdmb250VmFyaWFudExpZ2F0dXJlcycsICdmb250VmFyaWFudE51bWVyaWMnLCAnZm9udFZhcmlhbnRQb3NpdGlvbicsICdmb250V2VpZ2h0JywgJ2xpbmVIZWlnaHQnXSxcbiAgZm9udFZhcmlhbnQ6IFsnZm9udFZhcmlhbnRBbHRlcm5hdGVzJywgJ2ZvbnRWYXJpYW50Q2FwcycsICdmb250VmFyaWFudEVhc3RBc2lhbicsICdmb250VmFyaWFudExpZ2F0dXJlcycsICdmb250VmFyaWFudE51bWVyaWMnLCAnZm9udFZhcmlhbnRQb3NpdGlvbiddLFxuICBnYXA6IFsnY29sdW1uR2FwJywgJ3Jvd0dhcCddLFxuICBncmlkOiBbJ2dyaWRBdXRvQ29sdW1ucycsICdncmlkQXV0b0Zsb3cnLCAnZ3JpZEF1dG9Sb3dzJywgJ2dyaWRUZW1wbGF0ZUFyZWFzJywgJ2dyaWRUZW1wbGF0ZUNvbHVtbnMnLCAnZ3JpZFRlbXBsYXRlUm93cyddLFxuICBncmlkQXJlYTogWydncmlkQ29sdW1uRW5kJywgJ2dyaWRDb2x1bW5TdGFydCcsICdncmlkUm93RW5kJywgJ2dyaWRSb3dTdGFydCddLFxuICBncmlkQ29sdW1uOiBbJ2dyaWRDb2x1bW5FbmQnLCAnZ3JpZENvbHVtblN0YXJ0J10sXG4gIGdyaWRDb2x1bW5HYXA6IFsnY29sdW1uR2FwJ10sXG4gIGdyaWRHYXA6IFsnY29sdW1uR2FwJywgJ3Jvd0dhcCddLFxuICBncmlkUm93OiBbJ2dyaWRSb3dFbmQnLCAnZ3JpZFJvd1N0YXJ0J10sXG4gIGdyaWRSb3dHYXA6IFsncm93R2FwJ10sXG4gIGdyaWRUZW1wbGF0ZTogWydncmlkVGVtcGxhdGVBcmVhcycsICdncmlkVGVtcGxhdGVDb2x1bW5zJywgJ2dyaWRUZW1wbGF0ZVJvd3MnXSxcbiAgbGlzdFN0eWxlOiBbJ2xpc3RTdHlsZUltYWdlJywgJ2xpc3RTdHlsZVBvc2l0aW9uJywgJ2xpc3RTdHlsZVR5cGUnXSxcbiAgbWFyZ2luOiBbJ21hcmdpbkJvdHRvbScsICdtYXJnaW5MZWZ0JywgJ21hcmdpblJpZ2h0JywgJ21hcmdpblRvcCddLFxuICBtYXJrZXI6IFsnbWFya2VyRW5kJywgJ21hcmtlck1pZCcsICdtYXJrZXJTdGFydCddLFxuICBtYXNrOiBbJ21hc2tDbGlwJywgJ21hc2tDb21wb3NpdGUnLCAnbWFza0ltYWdlJywgJ21hc2tNb2RlJywgJ21hc2tPcmlnaW4nLCAnbWFza1Bvc2l0aW9uWCcsICdtYXNrUG9zaXRpb25ZJywgJ21hc2tSZXBlYXQnLCAnbWFza1NpemUnXSxcbiAgbWFza1Bvc2l0aW9uOiBbJ21hc2tQb3NpdGlvblgnLCAnbWFza1Bvc2l0aW9uWSddLFxuICBvdXRsaW5lOiBbJ291dGxpbmVDb2xvcicsICdvdXRsaW5lU3R5bGUnLCAnb3V0bGluZVdpZHRoJ10sXG4gIG92ZXJmbG93OiBbJ292ZXJmbG93WCcsICdvdmVyZmxvd1knXSxcbiAgcGFkZGluZzogWydwYWRkaW5nQm90dG9tJywgJ3BhZGRpbmdMZWZ0JywgJ3BhZGRpbmdSaWdodCcsICdwYWRkaW5nVG9wJ10sXG4gIHBsYWNlQ29udGVudDogWydhbGlnbkNvbnRlbnQnLCAnanVzdGlmeUNvbnRlbnQnXSxcbiAgcGxhY2VJdGVtczogWydhbGlnbkl0ZW1zJywgJ2p1c3RpZnlJdGVtcyddLFxuICBwbGFjZVNlbGY6IFsnYWxpZ25TZWxmJywgJ2p1c3RpZnlTZWxmJ10sXG4gIHRleHREZWNvcmF0aW9uOiBbJ3RleHREZWNvcmF0aW9uQ29sb3InLCAndGV4dERlY29yYXRpb25MaW5lJywgJ3RleHREZWNvcmF0aW9uU3R5bGUnXSxcbiAgdGV4dEVtcGhhc2lzOiBbJ3RleHRFbXBoYXNpc0NvbG9yJywgJ3RleHRFbXBoYXNpc1N0eWxlJ10sXG4gIHRyYW5zaXRpb246IFsndHJhbnNpdGlvbkRlbGF5JywgJ3RyYW5zaXRpb25EdXJhdGlvbicsICd0cmFuc2l0aW9uUHJvcGVydHknLCAndHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uJ10sXG4gIHdvcmRXcmFwOiBbJ292ZXJmbG93V3JhcCddXG59O1xuXG4vKipcbiAqIENTUyBwcm9wZXJ0aWVzIHdoaWNoIGFjY2VwdCBudW1iZXJzIGJ1dCBhcmUgbm90IGluIHVuaXRzIG9mIFwicHhcIi5cbiAqL1xudmFyIGlzVW5pdGxlc3NOdW1iZXIgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiB0cnVlLFxuICBhc3BlY3RSYXRpbzogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VPdXRzZXQ6IHRydWUsXG4gIGJvcmRlckltYWdlU2xpY2U6IHRydWUsXG4gIGJvcmRlckltYWdlV2lkdGg6IHRydWUsXG4gIGJveEZsZXg6IHRydWUsXG4gIGJveEZsZXhHcm91cDogdHJ1ZSxcbiAgYm94T3JkaW5hbEdyb3VwOiB0cnVlLFxuICBjb2x1bW5Db3VudDogdHJ1ZSxcbiAgY29sdW1uczogdHJ1ZSxcbiAgZmxleDogdHJ1ZSxcbiAgZmxleEdyb3c6IHRydWUsXG4gIGZsZXhQb3NpdGl2ZTogdHJ1ZSxcbiAgZmxleFNocmluazogdHJ1ZSxcbiAgZmxleE5lZ2F0aXZlOiB0cnVlLFxuICBmbGV4T3JkZXI6IHRydWUsXG4gIGdyaWRBcmVhOiB0cnVlLFxuICBncmlkUm93OiB0cnVlLFxuICBncmlkUm93RW5kOiB0cnVlLFxuICBncmlkUm93U3BhbjogdHJ1ZSxcbiAgZ3JpZFJvd1N0YXJ0OiB0cnVlLFxuICBncmlkQ29sdW1uOiB0cnVlLFxuICBncmlkQ29sdW1uRW5kOiB0cnVlLFxuICBncmlkQ29sdW1uU3BhbjogdHJ1ZSxcbiAgZ3JpZENvbHVtblN0YXJ0OiB0cnVlLFxuICBmb250V2VpZ2h0OiB0cnVlLFxuICBsaW5lQ2xhbXA6IHRydWUsXG4gIGxpbmVIZWlnaHQ6IHRydWUsXG4gIG9wYWNpdHk6IHRydWUsXG4gIG9yZGVyOiB0cnVlLFxuICBvcnBoYW5zOiB0cnVlLFxuICB0YWJTaXplOiB0cnVlLFxuICB3aWRvd3M6IHRydWUsXG4gIHpJbmRleDogdHJ1ZSxcbiAgem9vbTogdHJ1ZSxcbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogdHJ1ZSxcbiAgZmxvb2RPcGFjaXR5OiB0cnVlLFxuICBzdG9wT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlRGFzaGFycmF5OiB0cnVlLFxuICBzdHJva2VEYXNob2Zmc2V0OiB0cnVlLFxuICBzdHJva2VNaXRlcmxpbWl0OiB0cnVlLFxuICBzdHJva2VPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VXaWR0aDogdHJ1ZVxufTtcbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCB2ZW5kb3Itc3BlY2lmaWMgcHJlZml4LCBlZzogV2Via2l0XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHN0eWxlIG5hbWUsIGVnOiB0cmFuc2l0aW9uRHVyYXRpb25cbiAqIEByZXR1cm4ge3N0cmluZ30gc3R5bGUgbmFtZSBwcmVmaXhlZCB3aXRoIGBwcmVmaXhgLCBwcm9wZXJseSBjYW1lbENhc2VkLCBlZzpcbiAqIFdlYmtpdFRyYW5zaXRpb25EdXJhdGlvblxuICovXG5cbmZ1bmN0aW9uIHByZWZpeEtleShwcmVmaXgsIGtleSkge1xuICByZXR1cm4gcHJlZml4ICsga2V5LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsga2V5LnN1YnN0cmluZygxKTtcbn1cbi8qKlxuICogU3VwcG9ydCBzdHlsZSBuYW1lcyB0aGF0IG1heSBjb21lIHBhc3NlZCBpbiBwcmVmaXhlZCBieSBhZGRpbmcgcGVybXV0YXRpb25zXG4gKiBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cblxuXG52YXIgcHJlZml4ZXMgPSBbJ1dlYmtpdCcsICdtcycsICdNb3onLCAnTyddOyAvLyBVc2luZyBPYmplY3Qua2V5cyBoZXJlLCBvciBlbHNlIHRoZSB2YW5pbGxhIGZvci1pbiBsb29wIG1ha2VzIElFOCBnbyBpbnRvIGFuXG4vLyBpbmZpbml0ZSBsb29wLCBiZWNhdXNlIGl0IGl0ZXJhdGVzIG92ZXIgdGhlIG5ld2x5IGFkZGVkIHByb3BzIHRvby5cblxuT2JqZWN0LmtleXMoaXNVbml0bGVzc051bWJlcikuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICBwcmVmaXhlcy5mb3JFYWNoKGZ1bmN0aW9uIChwcmVmaXgpIHtcbiAgICBpc1VuaXRsZXNzTnVtYmVyW3ByZWZpeEtleShwcmVmaXgsIHByb3ApXSA9IGlzVW5pdGxlc3NOdW1iZXJbcHJvcF07XG4gIH0pO1xufSk7XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIGludG8gdGhlIHByb3BlciBjc3Mgd3JpdGFibGUgdmFsdWUuIFRoZSBzdHlsZSBuYW1lIGBuYW1lYFxuICogc2hvdWxkIGJlIGxvZ2ljYWwgKG5vIGh5cGhlbnMpLCBhcyBzcGVjaWZpZWRcbiAqIGluIGBDU1NQcm9wZXJ0eS5pc1VuaXRsZXNzTnVtYmVyYC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBDU1MgcHJvcGVydHkgbmFtZSBzdWNoIGFzIGB0b3BNYXJnaW5gLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBDU1MgcHJvcGVydHkgdmFsdWUgc3VjaCBhcyBgMTBweGAuXG4gKiBAcmV0dXJuIHtzdHJpbmd9IE5vcm1hbGl6ZWQgc3R5bGUgdmFsdWUgd2l0aCBkaW1lbnNpb25zIGFwcGxpZWQuXG4gKi9cblxuZnVuY3Rpb24gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShuYW1lLCB2YWx1ZSwgaXNDdXN0b21Qcm9wZXJ0eSkge1xuICAvLyBOb3RlIHRoYXQgd2UndmUgcmVtb3ZlZCBlc2NhcGVUZXh0Rm9yQnJvd3NlcigpIGNhbGxzIGhlcmUgc2luY2UgdGhlXG4gIC8vIHdob2xlIHN0cmluZyB3aWxsIGJlIGVzY2FwZWQgd2hlbiB0aGUgYXR0cmlidXRlIGlzIGluamVjdGVkIGludG9cbiAgLy8gdGhlIG1hcmt1cC4gSWYgeW91IHByb3ZpZGUgdW5zYWZlIHVzZXIgZGF0YSBoZXJlIHRoZXkgY2FuIGluamVjdFxuICAvLyBhcmJpdHJhcnkgQ1NTIHdoaWNoIG1heSBiZSBwcm9ibGVtYXRpYyAoSSBjb3VsZG4ndCByZXBybyB0aGlzKTpcbiAgLy8gaHR0cHM6Ly93d3cub3dhc3Aub3JnL2luZGV4LnBocC9YU1NfRmlsdGVyX0V2YXNpb25fQ2hlYXRfU2hlZXRcbiAgLy8gaHR0cDovL3d3dy50aGVzcGFubmVyLmNvLnVrLzIwMDcvMTEvMjYvdWx0aW1hdGUteHNzLWNzcy1pbmplY3Rpb24vXG4gIC8vIFRoaXMgaXMgbm90IGFuIFhTUyBob2xlIGJ1dCBpbnN0ZWFkIGEgcG90ZW50aWFsIENTUyBpbmplY3Rpb24gaXNzdWVcbiAgLy8gd2hpY2ggaGFzIGxlYWQgdG8gYSBncmVhdGVyIGRpc2N1c3Npb24gYWJvdXQgaG93IHdlJ3JlIGdvaW5nIHRvXG4gIC8vIHRydXN0IFVSTHMgbW92aW5nIGZvcndhcmQuIFNlZSAjMjExNTkwMVxuICB2YXIgaXNFbXB0eSA9IHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHwgdmFsdWUgPT09ICcnO1xuXG4gIGlmIChpc0VtcHR5KSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKCFpc0N1c3RvbVByb3BlcnR5ICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgdmFsdWUgIT09IDAgJiYgIShpc1VuaXRsZXNzTnVtYmVyLmhhc093blByb3BlcnR5KG5hbWUpICYmIGlzVW5pdGxlc3NOdW1iZXJbbmFtZV0pKSB7XG4gICAgcmV0dXJuIHZhbHVlICsgJ3B4JzsgLy8gUHJlc3VtZXMgaW1wbGljaXQgJ3B4JyBzdWZmaXggZm9yIHVuaXRsZXNzIG51bWJlcnNcbiAgfVxuXG4gIHtcbiAgICBjaGVja0NTU1Byb3BlcnR5U3RyaW5nQ29lcmNpb24odmFsdWUsIG5hbWUpO1xuICB9XG5cbiAgcmV0dXJuICgnJyArIHZhbHVlKS50cmltKCk7XG59XG5cbnZhciB1cHBlcmNhc2VQYXR0ZXJuID0gLyhbQS1aXSkvZztcbnZhciBtc1BhdHRlcm4gPSAvXm1zLS87XG4vKipcbiAqIEh5cGhlbmF0ZXMgYSBjYW1lbGNhc2VkIENTUyBwcm9wZXJ0eSBuYW1lLCBmb3IgZXhhbXBsZTpcbiAqXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdiYWNrZ3JvdW5kQ29sb3InKVxuICogICA8IFwiYmFja2dyb3VuZC1jb2xvclwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdNb3pUcmFuc2l0aW9uJylcbiAqICAgPCBcIi1tb3otdHJhbnNpdGlvblwiXG4gKiAgID4gaHlwaGVuYXRlU3R5bGVOYW1lKCdtc1RyYW5zaXRpb24nKVxuICogICA8IFwiLW1zLXRyYW5zaXRpb25cIlxuICpcbiAqIEFzIE1vZGVybml6ciBzdWdnZXN0cyAoaHR0cDovL21vZGVybml6ci5jb20vZG9jcy8jcHJlZml4ZWQpLCBhbiBgbXNgIHByZWZpeFxuICogaXMgY29udmVydGVkIHRvIGAtbXMtYC5cbiAqL1xuXG5mdW5jdGlvbiBoeXBoZW5hdGVTdHlsZU5hbWUobmFtZSkge1xuICByZXR1cm4gbmFtZS5yZXBsYWNlKHVwcGVyY2FzZVBhdHRlcm4sICctJDEnKS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UobXNQYXR0ZXJuLCAnLW1zLScpO1xufVxuXG52YXIgd2FyblZhbGlkU3R5bGUgPSBmdW5jdGlvbiAoKSB7fTtcblxue1xuICAvLyAnbXNUcmFuc2Zvcm0nIGlzIGNvcnJlY3QsIGJ1dCB0aGUgb3RoZXIgcHJlZml4ZXMgc2hvdWxkIGJlIGNhcGl0YWxpemVkXG4gIHZhciBiYWRWZW5kb3JlZFN0eWxlTmFtZVBhdHRlcm4gPSAvXig/OndlYmtpdHxtb3p8bylbQS1aXS87XG4gIHZhciBtc1BhdHRlcm4kMSA9IC9eLW1zLS87XG4gIHZhciBoeXBoZW5QYXR0ZXJuID0gLy0oLikvZzsgLy8gc3R5bGUgdmFsdWVzIHNob3VsZG4ndCBjb250YWluIGEgc2VtaWNvbG9uXG5cbiAgdmFyIGJhZFN0eWxlVmFsdWVXaXRoU2VtaWNvbG9uUGF0dGVybiA9IC87XFxzKiQvO1xuICB2YXIgd2FybmVkU3R5bGVOYW1lcyA9IHt9O1xuICB2YXIgd2FybmVkU3R5bGVWYWx1ZXMgPSB7fTtcbiAgdmFyIHdhcm5lZEZvck5hTlZhbHVlID0gZmFsc2U7XG4gIHZhciB3YXJuZWRGb3JJbmZpbml0eVZhbHVlID0gZmFsc2U7XG5cbiAgdmFyIGNhbWVsaXplID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShoeXBoZW5QYXR0ZXJuLCBmdW5jdGlvbiAoXywgY2hhcmFjdGVyKSB7XG4gICAgICByZXR1cm4gY2hhcmFjdGVyLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHdhcm5IeXBoZW5hdGVkU3R5bGVOYW1lID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICBpZiAod2FybmVkU3R5bGVOYW1lcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiB3YXJuZWRTdHlsZU5hbWVzW25hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVOYW1lc1tuYW1lXSA9IHRydWU7XG5cbiAgICBlcnJvcignVW5zdXBwb3J0ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8nLCBuYW1lLCAvLyBBcyBBbmRpIFNtaXRoIHN1Z2dlc3RzXG4gICAgLy8gKGh0dHA6Ly93d3cuYW5kaXNtaXRoLmNvbS9ibG9nLzIwMTIvMDIvbW9kZXJuaXpyLXByZWZpeGVkLyksIGFuIGAtbXNgIHByZWZpeFxuICAgIC8vIGlzIGNvbnZlcnRlZCB0byBsb3dlcmNhc2UgYG1zYC5cbiAgICBjYW1lbGl6ZShuYW1lLnJlcGxhY2UobXNQYXR0ZXJuJDEsICdtcy0nKSkpO1xuICB9O1xuXG4gIHZhciB3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIGlmICh3YXJuZWRTdHlsZU5hbWVzLmhhc093blByb3BlcnR5KG5hbWUpICYmIHdhcm5lZFN0eWxlTmFtZXNbbmFtZV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRTdHlsZU5hbWVzW25hbWVdID0gdHJ1ZTtcblxuICAgIGVycm9yKCdVbnN1cHBvcnRlZCB2ZW5kb3ItcHJlZml4ZWQgc3R5bGUgcHJvcGVydHkgJXMuIERpZCB5b3UgbWVhbiAlcz8nLCBuYW1lLCBuYW1lLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKSk7XG4gIH07XG5cbiAgdmFyIHdhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbiA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIGlmICh3YXJuZWRTdHlsZVZhbHVlcy5oYXNPd25Qcm9wZXJ0eSh2YWx1ZSkgJiYgd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkU3R5bGVWYWx1ZXNbdmFsdWVdID0gdHJ1ZTtcblxuICAgIGVycm9yKFwiU3R5bGUgcHJvcGVydHkgdmFsdWVzIHNob3VsZG4ndCBjb250YWluIGEgc2VtaWNvbG9uLiBcIiArICdUcnkgXCIlczogJXNcIiBpbnN0ZWFkLicsIG5hbWUsIHZhbHVlLnJlcGxhY2UoYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuLCAnJykpO1xuICB9O1xuXG4gIHZhciB3YXJuU3R5bGVWYWx1ZUlzTmFOID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHdhcm5lZEZvck5hTlZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgd2FybmVkRm9yTmFOVmFsdWUgPSB0cnVlO1xuXG4gICAgZXJyb3IoJ2BOYU5gIGlzIGFuIGludmFsaWQgdmFsdWUgZm9yIHRoZSBgJXNgIGNzcyBzdHlsZSBwcm9wZXJ0eS4nLCBuYW1lKTtcbiAgfTtcblxuICB2YXIgd2FyblN0eWxlVmFsdWVJc0luZmluaXR5ID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgaWYgKHdhcm5lZEZvckluZmluaXR5VmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB3YXJuZWRGb3JJbmZpbml0eVZhbHVlID0gdHJ1ZTtcblxuICAgIGVycm9yKCdgSW5maW5pdHlgIGlzIGFuIGludmFsaWQgdmFsdWUgZm9yIHRoZSBgJXNgIGNzcyBzdHlsZSBwcm9wZXJ0eS4nLCBuYW1lKTtcbiAgfTtcblxuICB3YXJuVmFsaWRTdHlsZSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChuYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgICB3YXJuSHlwaGVuYXRlZFN0eWxlTmFtZShuYW1lKTtcbiAgICB9IGVsc2UgaWYgKGJhZFZlbmRvcmVkU3R5bGVOYW1lUGF0dGVybi50ZXN0KG5hbWUpKSB7XG4gICAgICB3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUobmFtZSk7XG4gICAgfSBlbHNlIGlmIChiYWRTdHlsZVZhbHVlV2l0aFNlbWljb2xvblBhdHRlcm4udGVzdCh2YWx1ZSkpIHtcbiAgICAgIHdhcm5TdHlsZVZhbHVlV2l0aFNlbWljb2xvbihuYW1lLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIGlmIChpc05hTih2YWx1ZSkpIHtcbiAgICAgICAgd2FyblN0eWxlVmFsdWVJc05hTihuYW1lLCB2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKCFpc0Zpbml0ZSh2YWx1ZSkpIHtcbiAgICAgICAgd2FyblN0eWxlVmFsdWVJc0luZmluaXR5KG5hbWUsIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbnZhciB3YXJuVmFsaWRTdHlsZSQxID0gd2FyblZhbGlkU3R5bGU7XG5cbi8qKlxuICogT3BlcmF0aW9ucyBmb3IgZGVhbGluZyB3aXRoIENTUyBwcm9wZXJ0aWVzLlxuICovXG5cbi8qKlxuICogVGhpcyBjcmVhdGVzIGEgc3RyaW5nIHRoYXQgaXMgZXhwZWN0ZWQgdG8gYmUgZXF1aXZhbGVudCB0byB0aGUgc3R5bGVcbiAqIGF0dHJpYnV0ZSBnZW5lcmF0ZWQgYnkgc2VydmVyLXNpZGUgcmVuZGVyaW5nLiBJdCBieS1wYXNzZXMgd2FybmluZ3MgYW5kXG4gKiBzZWN1cml0eSBjaGVja3Mgc28gaXQncyBub3Qgc2FmZSB0byB1c2UgdGhpcyB2YWx1ZSBmb3IgYW55dGhpbmcgb3RoZXIgdGhhblxuICogY29tcGFyaXNvbi4gSXQgaXMgb25seSB1c2VkIGluIERFViBmb3IgU1NSIHZhbGlkYXRpb24uXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGFuZ2Vyb3VzU3RyaW5nRm9yU3R5bGVzKHN0eWxlcykge1xuICB7XG4gICAgdmFyIHNlcmlhbGl6ZWQgPSAnJztcbiAgICB2YXIgZGVsaW1pdGVyID0gJyc7XG5cbiAgICBmb3IgKHZhciBzdHlsZU5hbWUgaW4gc3R5bGVzKSB7XG4gICAgICBpZiAoIXN0eWxlcy5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgc3R5bGVWYWx1ZSA9IHN0eWxlc1tzdHlsZU5hbWVdO1xuXG4gICAgICBpZiAoc3R5bGVWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIHZhciBpc0N1c3RvbVByb3BlcnR5ID0gc3R5bGVOYW1lLmluZGV4T2YoJy0tJykgPT09IDA7XG4gICAgICAgIHNlcmlhbGl6ZWQgKz0gZGVsaW1pdGVyICsgKGlzQ3VzdG9tUHJvcGVydHkgPyBzdHlsZU5hbWUgOiBoeXBoZW5hdGVTdHlsZU5hbWUoc3R5bGVOYW1lKSkgKyAnOic7XG4gICAgICAgIHNlcmlhbGl6ZWQgKz0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsIHN0eWxlVmFsdWUsIGlzQ3VzdG9tUHJvcGVydHkpO1xuICAgICAgICBkZWxpbWl0ZXIgPSAnOyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlcmlhbGl6ZWQgfHwgbnVsbDtcbiAgfVxufVxuLyoqXG4gKiBTZXRzIHRoZSB2YWx1ZSBmb3IgbXVsdGlwbGUgc3R5bGVzIG9uIGEgbm9kZS4gIElmIGEgdmFsdWUgaXMgc3BlY2lmaWVkIGFzXG4gKiAnJyAoZW1wdHkgc3RyaW5nKSwgdGhlIGNvcnJlc3BvbmRpbmcgc3R5bGUgcHJvcGVydHkgd2lsbCBiZSB1bnNldC5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBzdHlsZXNcbiAqL1xuXG5mdW5jdGlvbiBzZXRWYWx1ZUZvclN0eWxlcyhub2RlLCBzdHlsZXMpIHtcbiAgdmFyIHN0eWxlID0gbm9kZS5zdHlsZTtcblxuICBmb3IgKHZhciBzdHlsZU5hbWUgaW4gc3R5bGVzKSB7XG4gICAgaWYgKCFzdHlsZXMuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIGlzQ3VzdG9tUHJvcGVydHkgPSBzdHlsZU5hbWUuaW5kZXhPZignLS0nKSA9PT0gMDtcblxuICAgIHtcbiAgICAgIGlmICghaXNDdXN0b21Qcm9wZXJ0eSkge1xuICAgICAgICB3YXJuVmFsaWRTdHlsZSQxKHN0eWxlTmFtZSwgc3R5bGVzW3N0eWxlTmFtZV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzdHlsZVZhbHVlID0gZGFuZ2Vyb3VzU3R5bGVWYWx1ZShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdLCBpc0N1c3RvbVByb3BlcnR5KTtcblxuICAgIGlmIChzdHlsZU5hbWUgPT09ICdmbG9hdCcpIHtcbiAgICAgIHN0eWxlTmFtZSA9ICdjc3NGbG9hdCc7XG4gICAgfVxuXG4gICAgaWYgKGlzQ3VzdG9tUHJvcGVydHkpIHtcbiAgICAgIHN0eWxlLnNldFByb3BlcnR5KHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlW3N0eWxlTmFtZV0gPSBzdHlsZVZhbHVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1ZhbHVlRW1wdHkodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHwgdmFsdWUgPT09ICcnO1xufVxuLyoqXG4gKiBHaXZlbiB7Y29sb3I6ICdyZWQnLCBvdmVyZmxvdzogJ2hpZGRlbid9IHJldHVybnMge1xuICogICBjb2xvcjogJ2NvbG9yJyxcbiAqICAgb3ZlcmZsb3dYOiAnb3ZlcmZsb3cnLFxuICogICBvdmVyZmxvd1k6ICdvdmVyZmxvdycsXG4gKiB9LiBUaGlzIGNhbiBiZSByZWFkIGFzIFwidGhlIG92ZXJmbG93WSBwcm9wZXJ0eSB3YXMgc2V0IGJ5IHRoZSBvdmVyZmxvd1xuICogc2hvcnRoYW5kXCIuIFRoYXQgaXMsIHRoZSB2YWx1ZXMgYXJlIHRoZSBwcm9wZXJ0eSB0aGF0IGVhY2ggd2FzIGRlcml2ZWQgZnJvbS5cbiAqL1xuXG5cbmZ1bmN0aW9uIGV4cGFuZFNob3J0aGFuZE1hcChzdHlsZXMpIHtcbiAgdmFyIGV4cGFuZGVkID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIHN0eWxlcykge1xuICAgIHZhciBsb25naGFuZHMgPSBzaG9ydGhhbmRUb0xvbmdoYW5kW2tleV0gfHwgW2tleV07XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxvbmdoYW5kcy5sZW5ndGg7IGkrKykge1xuICAgICAgZXhwYW5kZWRbbG9uZ2hhbmRzW2ldXSA9IGtleTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXhwYW5kZWQ7XG59XG4vKipcbiAqIFdoZW4gbWl4aW5nIHNob3J0aGFuZCBhbmQgbG9uZ2hhbmQgcHJvcGVydHkgbmFtZXMsIHdlIHdhcm4gZHVyaW5nIHVwZGF0ZXMgaWZcbiAqIHdlIGV4cGVjdCBhbiBpbmNvcnJlY3QgcmVzdWx0IHRvIG9jY3VyLiBJbiBwYXJ0aWN1bGFyLCB3ZSB3YXJuIGZvcjpcbiAqXG4gKiBVcGRhdGluZyBhIHNob3J0aGFuZCBwcm9wZXJ0eSAobG9uZ2hhbmQgZ2V0cyBvdmVyd3JpdHRlbik6XG4gKiAgIHtmb250OiAnZm9vJywgZm9udFZhcmlhbnQ6ICdiYXInfSAtPiB7Zm9udDogJ2JheicsIGZvbnRWYXJpYW50OiAnYmFyJ31cbiAqICAgYmVjb21lcyAuc3R5bGUuZm9udCA9ICdiYXonXG4gKiBSZW1vdmluZyBhIHNob3J0aGFuZCBwcm9wZXJ0eSAobG9uZ2hhbmQgZ2V0cyBsb3N0IHRvbyk6XG4gKiAgIHtmb250OiAnZm9vJywgZm9udFZhcmlhbnQ6ICdiYXInfSAtPiB7Zm9udFZhcmlhbnQ6ICdiYXInfVxuICogICBiZWNvbWVzIC5zdHlsZS5mb250ID0gJydcbiAqIFJlbW92aW5nIGEgbG9uZ2hhbmQgcHJvcGVydHkgKHNob3VsZCByZXZlcnQgdG8gc2hvcnRoYW5kOyBkb2Vzbid0KTpcbiAqICAge2ZvbnQ6ICdmb28nLCBmb250VmFyaWFudDogJ2Jhcid9IC0+IHtmb250OiAnZm9vJ31cbiAqICAgYmVjb21lcyAuc3R5bGUuZm9udFZhcmlhbnQgPSAnJ1xuICovXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVTaG9ydGhhbmRQcm9wZXJ0eUNvbGxpc2lvbkluRGV2KHN0eWxlVXBkYXRlcywgbmV4dFN0eWxlcykge1xuICB7XG4gICAgaWYgKCFuZXh0U3R5bGVzKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGV4cGFuZGVkVXBkYXRlcyA9IGV4cGFuZFNob3J0aGFuZE1hcChzdHlsZVVwZGF0ZXMpO1xuICAgIHZhciBleHBhbmRlZFN0eWxlcyA9IGV4cGFuZFNob3J0aGFuZE1hcChuZXh0U3R5bGVzKTtcbiAgICB2YXIgd2FybmVkQWJvdXQgPSB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiBleHBhbmRlZFVwZGF0ZXMpIHtcbiAgICAgIHZhciBvcmlnaW5hbEtleSA9IGV4cGFuZGVkVXBkYXRlc1trZXldO1xuICAgICAgdmFyIGNvcnJlY3RPcmlnaW5hbEtleSA9IGV4cGFuZGVkU3R5bGVzW2tleV07XG5cbiAgICAgIGlmIChjb3JyZWN0T3JpZ2luYWxLZXkgJiYgb3JpZ2luYWxLZXkgIT09IGNvcnJlY3RPcmlnaW5hbEtleSkge1xuICAgICAgICB2YXIgd2FybmluZ0tleSA9IG9yaWdpbmFsS2V5ICsgJywnICsgY29ycmVjdE9yaWdpbmFsS2V5O1xuXG4gICAgICAgIGlmICh3YXJuZWRBYm91dFt3YXJuaW5nS2V5XSkge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgd2FybmVkQWJvdXRbd2FybmluZ0tleV0gPSB0cnVlO1xuXG4gICAgICAgIGVycm9yKCclcyBhIHN0eWxlIHByb3BlcnR5IGR1cmluZyByZXJlbmRlciAoJXMpIHdoZW4gYSAnICsgJ2NvbmZsaWN0aW5nIHByb3BlcnR5IGlzIHNldCAoJXMpIGNhbiBsZWFkIHRvIHN0eWxpbmcgYnVncy4gVG8gJyArIFwiYXZvaWQgdGhpcywgZG9uJ3QgbWl4IHNob3J0aGFuZCBhbmQgbm9uLXNob3J0aGFuZCBwcm9wZXJ0aWVzIFwiICsgJ2ZvciB0aGUgc2FtZSB2YWx1ZTsgaW5zdGVhZCwgcmVwbGFjZSB0aGUgc2hvcnRoYW5kIHdpdGggJyArICdzZXBhcmF0ZSB2YWx1ZXMuJywgaXNWYWx1ZUVtcHR5KHN0eWxlVXBkYXRlc1tvcmlnaW5hbEtleV0pID8gJ1JlbW92aW5nJyA6ICdVcGRhdGluZycsIG9yaWdpbmFsS2V5LCBjb3JyZWN0T3JpZ2luYWxLZXkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBGb3IgSFRNTCwgY2VydGFpbiB0YWdzIHNob3VsZCBvbWl0IHRoZWlyIGNsb3NlIHRhZy4gV2Uga2VlcCBhIGxpc3QgZm9yXG4vLyB0aG9zZSBzcGVjaWFsLWNhc2UgdGFncy5cbnZhciBvbWl0dGVkQ2xvc2VUYWdzID0ge1xuICBhcmVhOiB0cnVlLFxuICBiYXNlOiB0cnVlLFxuICBicjogdHJ1ZSxcbiAgY29sOiB0cnVlLFxuICBlbWJlZDogdHJ1ZSxcbiAgaHI6IHRydWUsXG4gIGltZzogdHJ1ZSxcbiAgaW5wdXQ6IHRydWUsXG4gIGtleWdlbjogdHJ1ZSxcbiAgbGluazogdHJ1ZSxcbiAgbWV0YTogdHJ1ZSxcbiAgcGFyYW06IHRydWUsXG4gIHNvdXJjZTogdHJ1ZSxcbiAgdHJhY2s6IHRydWUsXG4gIHdicjogdHJ1ZSAvLyBOT1RFOiBtZW51aXRlbSdzIGNsb3NlIHRhZyBzaG91bGQgYmUgb21pdHRlZCwgYnV0IHRoYXQgY2F1c2VzIHByb2JsZW1zLlxuXG59O1xuXG4vLyBgb21pdHRlZENsb3NlVGFnc2AgZXhjZXB0IHRoYXQgYG1lbnVpdGVtYCBzaG91bGQgc3RpbGwgaGF2ZSBpdHMgY2xvc2luZyB0YWcuXG5cbnZhciB2b2lkRWxlbWVudFRhZ3MgPSBhc3NpZ24oe1xuICBtZW51aXRlbTogdHJ1ZVxufSwgb21pdHRlZENsb3NlVGFncyk7XG5cbnZhciBIVE1MID0gJ19faHRtbCc7XG5cbmZ1bmN0aW9uIGFzc2VydFZhbGlkUHJvcHModGFnLCBwcm9wcykge1xuICBpZiAoIXByb3BzKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIE5vdGUgdGhlIHVzZSBvZiBgPT1gIHdoaWNoIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWQuXG5cblxuICBpZiAodm9pZEVsZW1lbnRUYWdzW3RhZ10pIHtcbiAgICBpZiAocHJvcHMuY2hpbGRyZW4gIT0gbnVsbCB8fCBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCAhPSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IodGFnICsgXCIgaXMgYSB2b2lkIGVsZW1lbnQgdGFnIGFuZCBtdXN0IG5laXRoZXIgaGF2ZSBgY2hpbGRyZW5gIG5vciBcIiArICd1c2UgYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgIT0gbnVsbCkge1xuICAgIGlmIChwcm9wcy5jaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbiBvbmx5IHNldCBvbmUgb2YgYGNoaWxkcmVuYCBvciBgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgIT09ICdvYmplY3QnIHx8ICEoSFRNTCBpbiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBtdXN0IGJlIGluIHRoZSBmb3JtIGB7X19odG1sOiAuLi59YC4gJyArICdQbGVhc2UgdmlzaXQgaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL2Rhbmdlcm91c2x5LXNldC1pbm5lci1odG1sICcgKyAnZm9yIG1vcmUgaW5mb3JtYXRpb24uJyk7XG4gICAgfVxuICB9XG5cbiAge1xuICAgIGlmICghcHJvcHMuc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nICYmIHByb3BzLmNvbnRlbnRFZGl0YWJsZSAmJiBwcm9wcy5jaGlsZHJlbiAhPSBudWxsKSB7XG4gICAgICBlcnJvcignQSBjb21wb25lbnQgaXMgYGNvbnRlbnRFZGl0YWJsZWAgYW5kIGNvbnRhaW5zIGBjaGlsZHJlbmAgbWFuYWdlZCBieSAnICsgJ1JlYWN0LiBJdCBpcyBub3cgeW91ciByZXNwb25zaWJpbGl0eSB0byBndWFyYW50ZWUgdGhhdCBub25lIG9mICcgKyAndGhvc2Ugbm9kZXMgYXJlIHVuZXhwZWN0ZWRseSBtb2RpZmllZCBvciBkdXBsaWNhdGVkLiBUaGlzIGlzICcgKyAncHJvYmFibHkgbm90IGludGVudGlvbmFsLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChwcm9wcy5zdHlsZSAhPSBudWxsICYmIHR5cGVvZiBwcm9wcy5zdHlsZSAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgc3R5bGVgIHByb3AgZXhwZWN0cyBhIG1hcHBpbmcgZnJvbSBzdHlsZSBwcm9wZXJ0aWVzIHRvIHZhbHVlcywgJyArIFwibm90IGEgc3RyaW5nLiBGb3IgZXhhbXBsZSwgc3R5bGU9e3ttYXJnaW5SaWdodDogc3BhY2luZyArICdlbSd9fSB3aGVuIFwiICsgJ3VzaW5nIEpTWC4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0N1c3RvbUNvbXBvbmVudCh0YWdOYW1lLCBwcm9wcykge1xuICBpZiAodGFnTmFtZS5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBwcm9wcy5pcyA9PT0gJ3N0cmluZyc7XG4gIH1cblxuICBzd2l0Y2ggKHRhZ05hbWUpIHtcbiAgICAvLyBUaGVzZSBhcmUgcmVzZXJ2ZWQgU1ZHIGFuZCBNYXRoTUwgZWxlbWVudHMuXG4gICAgLy8gV2UgZG9uJ3QgbWluZCB0aGlzIGxpc3QgdG9vIG11Y2ggYmVjYXVzZSB3ZSBleHBlY3QgaXQgdG8gbmV2ZXIgZ3Jvdy5cbiAgICAvLyBUaGUgYWx0ZXJuYXRpdmUgaXMgdG8gdHJhY2sgdGhlIG5hbWVzcGFjZSBpbiBhIGZldyBwbGFjZXMgd2hpY2ggaXMgY29udm9sdXRlZC5cbiAgICAvLyBodHRwczovL3czYy5naXRodWIuaW8vd2ViY29tcG9uZW50cy9zcGVjL2N1c3RvbS8jY3VzdG9tLWVsZW1lbnRzLWNvcmUtY29uY2VwdHNcbiAgICBjYXNlICdhbm5vdGF0aW9uLXhtbCc6XG4gICAgY2FzZSAnY29sb3ItcHJvZmlsZSc6XG4gICAgY2FzZSAnZm9udC1mYWNlJzpcbiAgICBjYXNlICdmb250LWZhY2Utc3JjJzpcbiAgICBjYXNlICdmb250LWZhY2UtdXJpJzpcbiAgICBjYXNlICdmb250LWZhY2UtZm9ybWF0JzpcbiAgICBjYXNlICdmb250LWZhY2UtbmFtZSc6XG4gICAgY2FzZSAnbWlzc2luZy1nbHlwaCc6XG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuLy8gV2hlbiBhZGRpbmcgYXR0cmlidXRlcyB0byB0aGUgSFRNTCBvciBTVkcgYWxsb3dlZCBhdHRyaWJ1dGUgbGlzdCwgYmUgc3VyZSB0b1xuLy8gYWxzbyBhZGQgdGhlbSB0byB0aGlzIG1vZHVsZSB0byBlbnN1cmUgY2FzaW5nIGFuZCBpbmNvcnJlY3QgbmFtZVxuLy8gd2FybmluZ3MuXG52YXIgcG9zc2libGVTdGFuZGFyZE5hbWVzID0ge1xuICAvLyBIVE1MXG4gIGFjY2VwdDogJ2FjY2VwdCcsXG4gIGFjY2VwdGNoYXJzZXQ6ICdhY2NlcHRDaGFyc2V0JyxcbiAgJ2FjY2VwdC1jaGFyc2V0JzogJ2FjY2VwdENoYXJzZXQnLFxuICBhY2Nlc3NrZXk6ICdhY2Nlc3NLZXknLFxuICBhY3Rpb246ICdhY3Rpb24nLFxuICBhbGxvd2Z1bGxzY3JlZW46ICdhbGxvd0Z1bGxTY3JlZW4nLFxuICBhbHQ6ICdhbHQnLFxuICBhczogJ2FzJyxcbiAgYXN5bmM6ICdhc3luYycsXG4gIGF1dG9jYXBpdGFsaXplOiAnYXV0b0NhcGl0YWxpemUnLFxuICBhdXRvY29tcGxldGU6ICdhdXRvQ29tcGxldGUnLFxuICBhdXRvY29ycmVjdDogJ2F1dG9Db3JyZWN0JyxcbiAgYXV0b2ZvY3VzOiAnYXV0b0ZvY3VzJyxcbiAgYXV0b3BsYXk6ICdhdXRvUGxheScsXG4gIGF1dG9zYXZlOiAnYXV0b1NhdmUnLFxuICBjYXB0dXJlOiAnY2FwdHVyZScsXG4gIGNlbGxwYWRkaW5nOiAnY2VsbFBhZGRpbmcnLFxuICBjZWxsc3BhY2luZzogJ2NlbGxTcGFjaW5nJyxcbiAgY2hhbGxlbmdlOiAnY2hhbGxlbmdlJyxcbiAgY2hhcnNldDogJ2NoYXJTZXQnLFxuICBjaGVja2VkOiAnY2hlY2tlZCcsXG4gIGNoaWxkcmVuOiAnY2hpbGRyZW4nLFxuICBjaXRlOiAnY2l0ZScsXG4gIGNsYXNzOiAnY2xhc3NOYW1lJyxcbiAgY2xhc3NpZDogJ2NsYXNzSUQnLFxuICBjbGFzc25hbWU6ICdjbGFzc05hbWUnLFxuICBjb2xzOiAnY29scycsXG4gIGNvbHNwYW46ICdjb2xTcGFuJyxcbiAgY29udGVudDogJ2NvbnRlbnQnLFxuICBjb250ZW50ZWRpdGFibGU6ICdjb250ZW50RWRpdGFibGUnLFxuICBjb250ZXh0bWVudTogJ2NvbnRleHRNZW51JyxcbiAgY29udHJvbHM6ICdjb250cm9scycsXG4gIGNvbnRyb2xzbGlzdDogJ2NvbnRyb2xzTGlzdCcsXG4gIGNvb3JkczogJ2Nvb3JkcycsXG4gIGNyb3Nzb3JpZ2luOiAnY3Jvc3NPcmlnaW4nLFxuICBkYW5nZXJvdXNseXNldGlubmVyaHRtbDogJ2Rhbmdlcm91c2x5U2V0SW5uZXJIVE1MJyxcbiAgZGF0YTogJ2RhdGEnLFxuICBkYXRldGltZTogJ2RhdGVUaW1lJyxcbiAgZGVmYXVsdDogJ2RlZmF1bHQnLFxuICBkZWZhdWx0Y2hlY2tlZDogJ2RlZmF1bHRDaGVja2VkJyxcbiAgZGVmYXVsdHZhbHVlOiAnZGVmYXVsdFZhbHVlJyxcbiAgZGVmZXI6ICdkZWZlcicsXG4gIGRpcjogJ2RpcicsXG4gIGRpc2FibGVkOiAnZGlzYWJsZWQnLFxuICBkaXNhYmxlcGljdHVyZWlucGljdHVyZTogJ2Rpc2FibGVQaWN0dXJlSW5QaWN0dXJlJyxcbiAgZGlzYWJsZXJlbW90ZXBsYXliYWNrOiAnZGlzYWJsZVJlbW90ZVBsYXliYWNrJyxcbiAgZG93bmxvYWQ6ICdkb3dubG9hZCcsXG4gIGRyYWdnYWJsZTogJ2RyYWdnYWJsZScsXG4gIGVuY3R5cGU6ICdlbmNUeXBlJyxcbiAgZW50ZXJrZXloaW50OiAnZW50ZXJLZXlIaW50JyxcbiAgZm9yOiAnaHRtbEZvcicsXG4gIGZvcm06ICdmb3JtJyxcbiAgZm9ybW1ldGhvZDogJ2Zvcm1NZXRob2QnLFxuICBmb3JtYWN0aW9uOiAnZm9ybUFjdGlvbicsXG4gIGZvcm1lbmN0eXBlOiAnZm9ybUVuY1R5cGUnLFxuICBmb3Jtbm92YWxpZGF0ZTogJ2Zvcm1Ob1ZhbGlkYXRlJyxcbiAgZm9ybXRhcmdldDogJ2Zvcm1UYXJnZXQnLFxuICBmcmFtZWJvcmRlcjogJ2ZyYW1lQm9yZGVyJyxcbiAgaGVhZGVyczogJ2hlYWRlcnMnLFxuICBoZWlnaHQ6ICdoZWlnaHQnLFxuICBoaWRkZW46ICdoaWRkZW4nLFxuICBoaWdoOiAnaGlnaCcsXG4gIGhyZWY6ICdocmVmJyxcbiAgaHJlZmxhbmc6ICdocmVmTGFuZycsXG4gIGh0bWxmb3I6ICdodG1sRm9yJyxcbiAgaHR0cGVxdWl2OiAnaHR0cEVxdWl2JyxcbiAgJ2h0dHAtZXF1aXYnOiAnaHR0cEVxdWl2JyxcbiAgaWNvbjogJ2ljb24nLFxuICBpZDogJ2lkJyxcbiAgaW1hZ2VzaXplczogJ2ltYWdlU2l6ZXMnLFxuICBpbWFnZXNyY3NldDogJ2ltYWdlU3JjU2V0JyxcbiAgaW5uZXJodG1sOiAnaW5uZXJIVE1MJyxcbiAgaW5wdXRtb2RlOiAnaW5wdXRNb2RlJyxcbiAgaW50ZWdyaXR5OiAnaW50ZWdyaXR5JyxcbiAgaXM6ICdpcycsXG4gIGl0ZW1pZDogJ2l0ZW1JRCcsXG4gIGl0ZW1wcm9wOiAnaXRlbVByb3AnLFxuICBpdGVtcmVmOiAnaXRlbVJlZicsXG4gIGl0ZW1zY29wZTogJ2l0ZW1TY29wZScsXG4gIGl0ZW10eXBlOiAnaXRlbVR5cGUnLFxuICBrZXlwYXJhbXM6ICdrZXlQYXJhbXMnLFxuICBrZXl0eXBlOiAna2V5VHlwZScsXG4gIGtpbmQ6ICdraW5kJyxcbiAgbGFiZWw6ICdsYWJlbCcsXG4gIGxhbmc6ICdsYW5nJyxcbiAgbGlzdDogJ2xpc3QnLFxuICBsb29wOiAnbG9vcCcsXG4gIGxvdzogJ2xvdycsXG4gIG1hbmlmZXN0OiAnbWFuaWZlc3QnLFxuICBtYXJnaW53aWR0aDogJ21hcmdpbldpZHRoJyxcbiAgbWFyZ2luaGVpZ2h0OiAnbWFyZ2luSGVpZ2h0JyxcbiAgbWF4OiAnbWF4JyxcbiAgbWF4bGVuZ3RoOiAnbWF4TGVuZ3RoJyxcbiAgbWVkaWE6ICdtZWRpYScsXG4gIG1lZGlhZ3JvdXA6ICdtZWRpYUdyb3VwJyxcbiAgbWV0aG9kOiAnbWV0aG9kJyxcbiAgbWluOiAnbWluJyxcbiAgbWlubGVuZ3RoOiAnbWluTGVuZ3RoJyxcbiAgbXVsdGlwbGU6ICdtdWx0aXBsZScsXG4gIG11dGVkOiAnbXV0ZWQnLFxuICBuYW1lOiAnbmFtZScsXG4gIG5vbW9kdWxlOiAnbm9Nb2R1bGUnLFxuICBub25jZTogJ25vbmNlJyxcbiAgbm92YWxpZGF0ZTogJ25vVmFsaWRhdGUnLFxuICBvcGVuOiAnb3BlbicsXG4gIG9wdGltdW06ICdvcHRpbXVtJyxcbiAgcGF0dGVybjogJ3BhdHRlcm4nLFxuICBwbGFjZWhvbGRlcjogJ3BsYWNlaG9sZGVyJyxcbiAgcGxheXNpbmxpbmU6ICdwbGF5c0lubGluZScsXG4gIHBvc3RlcjogJ3Bvc3RlcicsXG4gIHByZWxvYWQ6ICdwcmVsb2FkJyxcbiAgcHJvZmlsZTogJ3Byb2ZpbGUnLFxuICByYWRpb2dyb3VwOiAncmFkaW9Hcm91cCcsXG4gIHJlYWRvbmx5OiAncmVhZE9ubHknLFxuICByZWZlcnJlcnBvbGljeTogJ3JlZmVycmVyUG9saWN5JyxcbiAgcmVsOiAncmVsJyxcbiAgcmVxdWlyZWQ6ICdyZXF1aXJlZCcsXG4gIHJldmVyc2VkOiAncmV2ZXJzZWQnLFxuICByb2xlOiAncm9sZScsXG4gIHJvd3M6ICdyb3dzJyxcbiAgcm93c3BhbjogJ3Jvd1NwYW4nLFxuICBzYW5kYm94OiAnc2FuZGJveCcsXG4gIHNjb3BlOiAnc2NvcGUnLFxuICBzY29wZWQ6ICdzY29wZWQnLFxuICBzY3JvbGxpbmc6ICdzY3JvbGxpbmcnLFxuICBzZWFtbGVzczogJ3NlYW1sZXNzJyxcbiAgc2VsZWN0ZWQ6ICdzZWxlY3RlZCcsXG4gIHNoYXBlOiAnc2hhcGUnLFxuICBzaXplOiAnc2l6ZScsXG4gIHNpemVzOiAnc2l6ZXMnLFxuICBzcGFuOiAnc3BhbicsXG4gIHNwZWxsY2hlY2s6ICdzcGVsbENoZWNrJyxcbiAgc3JjOiAnc3JjJyxcbiAgc3JjZG9jOiAnc3JjRG9jJyxcbiAgc3JjbGFuZzogJ3NyY0xhbmcnLFxuICBzcmNzZXQ6ICdzcmNTZXQnLFxuICBzdGFydDogJ3N0YXJ0JyxcbiAgc3RlcDogJ3N0ZXAnLFxuICBzdHlsZTogJ3N0eWxlJyxcbiAgc3VtbWFyeTogJ3N1bW1hcnknLFxuICB0YWJpbmRleDogJ3RhYkluZGV4JyxcbiAgdGFyZ2V0OiAndGFyZ2V0JyxcbiAgdGl0bGU6ICd0aXRsZScsXG4gIHR5cGU6ICd0eXBlJyxcbiAgdXNlbWFwOiAndXNlTWFwJyxcbiAgdmFsdWU6ICd2YWx1ZScsXG4gIHdpZHRoOiAnd2lkdGgnLFxuICB3bW9kZTogJ3dtb2RlJyxcbiAgd3JhcDogJ3dyYXAnLFxuICAvLyBTVkdcbiAgYWJvdXQ6ICdhYm91dCcsXG4gIGFjY2VudGhlaWdodDogJ2FjY2VudEhlaWdodCcsXG4gICdhY2NlbnQtaGVpZ2h0JzogJ2FjY2VudEhlaWdodCcsXG4gIGFjY3VtdWxhdGU6ICdhY2N1bXVsYXRlJyxcbiAgYWRkaXRpdmU6ICdhZGRpdGl2ZScsXG4gIGFsaWdubWVudGJhc2VsaW5lOiAnYWxpZ25tZW50QmFzZWxpbmUnLFxuICAnYWxpZ25tZW50LWJhc2VsaW5lJzogJ2FsaWdubWVudEJhc2VsaW5lJyxcbiAgYWxsb3dyZW9yZGVyOiAnYWxsb3dSZW9yZGVyJyxcbiAgYWxwaGFiZXRpYzogJ2FscGhhYmV0aWMnLFxuICBhbXBsaXR1ZGU6ICdhbXBsaXR1ZGUnLFxuICBhcmFiaWNmb3JtOiAnYXJhYmljRm9ybScsXG4gICdhcmFiaWMtZm9ybSc6ICdhcmFiaWNGb3JtJyxcbiAgYXNjZW50OiAnYXNjZW50JyxcbiAgYXR0cmlidXRlbmFtZTogJ2F0dHJpYnV0ZU5hbWUnLFxuICBhdHRyaWJ1dGV0eXBlOiAnYXR0cmlidXRlVHlwZScsXG4gIGF1dG9yZXZlcnNlOiAnYXV0b1JldmVyc2UnLFxuICBhemltdXRoOiAnYXppbXV0aCcsXG4gIGJhc2VmcmVxdWVuY3k6ICdiYXNlRnJlcXVlbmN5JyxcbiAgYmFzZWxpbmVzaGlmdDogJ2Jhc2VsaW5lU2hpZnQnLFxuICAnYmFzZWxpbmUtc2hpZnQnOiAnYmFzZWxpbmVTaGlmdCcsXG4gIGJhc2Vwcm9maWxlOiAnYmFzZVByb2ZpbGUnLFxuICBiYm94OiAnYmJveCcsXG4gIGJlZ2luOiAnYmVnaW4nLFxuICBiaWFzOiAnYmlhcycsXG4gIGJ5OiAnYnknLFxuICBjYWxjbW9kZTogJ2NhbGNNb2RlJyxcbiAgY2FwaGVpZ2h0OiAnY2FwSGVpZ2h0JyxcbiAgJ2NhcC1oZWlnaHQnOiAnY2FwSGVpZ2h0JyxcbiAgY2xpcDogJ2NsaXAnLFxuICBjbGlwcGF0aDogJ2NsaXBQYXRoJyxcbiAgJ2NsaXAtcGF0aCc6ICdjbGlwUGF0aCcsXG4gIGNsaXBwYXRodW5pdHM6ICdjbGlwUGF0aFVuaXRzJyxcbiAgY2xpcHJ1bGU6ICdjbGlwUnVsZScsXG4gICdjbGlwLXJ1bGUnOiAnY2xpcFJ1bGUnLFxuICBjb2xvcjogJ2NvbG9yJyxcbiAgY29sb3JpbnRlcnBvbGF0aW9uOiAnY29sb3JJbnRlcnBvbGF0aW9uJyxcbiAgJ2NvbG9yLWludGVycG9sYXRpb24nOiAnY29sb3JJbnRlcnBvbGF0aW9uJyxcbiAgY29sb3JpbnRlcnBvbGF0aW9uZmlsdGVyczogJ2NvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnMnLFxuICAnY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzJzogJ2NvbG9ySW50ZXJwb2xhdGlvbkZpbHRlcnMnLFxuICBjb2xvcnByb2ZpbGU6ICdjb2xvclByb2ZpbGUnLFxuICAnY29sb3ItcHJvZmlsZSc6ICdjb2xvclByb2ZpbGUnLFxuICBjb2xvcnJlbmRlcmluZzogJ2NvbG9yUmVuZGVyaW5nJyxcbiAgJ2NvbG9yLXJlbmRlcmluZyc6ICdjb2xvclJlbmRlcmluZycsXG4gIGNvbnRlbnRzY3JpcHR0eXBlOiAnY29udGVudFNjcmlwdFR5cGUnLFxuICBjb250ZW50c3R5bGV0eXBlOiAnY29udGVudFN0eWxlVHlwZScsXG4gIGN1cnNvcjogJ2N1cnNvcicsXG4gIGN4OiAnY3gnLFxuICBjeTogJ2N5JyxcbiAgZDogJ2QnLFxuICBkYXRhdHlwZTogJ2RhdGF0eXBlJyxcbiAgZGVjZWxlcmF0ZTogJ2RlY2VsZXJhdGUnLFxuICBkZXNjZW50OiAnZGVzY2VudCcsXG4gIGRpZmZ1c2Vjb25zdGFudDogJ2RpZmZ1c2VDb25zdGFudCcsXG4gIGRpcmVjdGlvbjogJ2RpcmVjdGlvbicsXG4gIGRpc3BsYXk6ICdkaXNwbGF5JyxcbiAgZGl2aXNvcjogJ2Rpdmlzb3InLFxuICBkb21pbmFudGJhc2VsaW5lOiAnZG9taW5hbnRCYXNlbGluZScsXG4gICdkb21pbmFudC1iYXNlbGluZSc6ICdkb21pbmFudEJhc2VsaW5lJyxcbiAgZHVyOiAnZHVyJyxcbiAgZHg6ICdkeCcsXG4gIGR5OiAnZHknLFxuICBlZGdlbW9kZTogJ2VkZ2VNb2RlJyxcbiAgZWxldmF0aW9uOiAnZWxldmF0aW9uJyxcbiAgZW5hYmxlYmFja2dyb3VuZDogJ2VuYWJsZUJhY2tncm91bmQnLFxuICAnZW5hYmxlLWJhY2tncm91bmQnOiAnZW5hYmxlQmFja2dyb3VuZCcsXG4gIGVuZDogJ2VuZCcsXG4gIGV4cG9uZW50OiAnZXhwb25lbnQnLFxuICBleHRlcm5hbHJlc291cmNlc3JlcXVpcmVkOiAnZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZCcsXG4gIGZpbGw6ICdmaWxsJyxcbiAgZmlsbG9wYWNpdHk6ICdmaWxsT3BhY2l0eScsXG4gICdmaWxsLW9wYWNpdHknOiAnZmlsbE9wYWNpdHknLFxuICBmaWxscnVsZTogJ2ZpbGxSdWxlJyxcbiAgJ2ZpbGwtcnVsZSc6ICdmaWxsUnVsZScsXG4gIGZpbHRlcjogJ2ZpbHRlcicsXG4gIGZpbHRlcnJlczogJ2ZpbHRlclJlcycsXG4gIGZpbHRlcnVuaXRzOiAnZmlsdGVyVW5pdHMnLFxuICBmbG9vZG9wYWNpdHk6ICdmbG9vZE9wYWNpdHknLFxuICAnZmxvb2Qtb3BhY2l0eSc6ICdmbG9vZE9wYWNpdHknLFxuICBmbG9vZGNvbG9yOiAnZmxvb2RDb2xvcicsXG4gICdmbG9vZC1jb2xvcic6ICdmbG9vZENvbG9yJyxcbiAgZm9jdXNhYmxlOiAnZm9jdXNhYmxlJyxcbiAgZm9udGZhbWlseTogJ2ZvbnRGYW1pbHknLFxuICAnZm9udC1mYW1pbHknOiAnZm9udEZhbWlseScsXG4gIGZvbnRzaXplOiAnZm9udFNpemUnLFxuICAnZm9udC1zaXplJzogJ2ZvbnRTaXplJyxcbiAgZm9udHNpemVhZGp1c3Q6ICdmb250U2l6ZUFkanVzdCcsXG4gICdmb250LXNpemUtYWRqdXN0JzogJ2ZvbnRTaXplQWRqdXN0JyxcbiAgZm9udHN0cmV0Y2g6ICdmb250U3RyZXRjaCcsXG4gICdmb250LXN0cmV0Y2gnOiAnZm9udFN0cmV0Y2gnLFxuICBmb250c3R5bGU6ICdmb250U3R5bGUnLFxuICAnZm9udC1zdHlsZSc6ICdmb250U3R5bGUnLFxuICBmb250dmFyaWFudDogJ2ZvbnRWYXJpYW50JyxcbiAgJ2ZvbnQtdmFyaWFudCc6ICdmb250VmFyaWFudCcsXG4gIGZvbnR3ZWlnaHQ6ICdmb250V2VpZ2h0JyxcbiAgJ2ZvbnQtd2VpZ2h0JzogJ2ZvbnRXZWlnaHQnLFxuICBmb3JtYXQ6ICdmb3JtYXQnLFxuICBmcm9tOiAnZnJvbScsXG4gIGZ4OiAnZngnLFxuICBmeTogJ2Z5JyxcbiAgZzE6ICdnMScsXG4gIGcyOiAnZzInLFxuICBnbHlwaG5hbWU6ICdnbHlwaE5hbWUnLFxuICAnZ2x5cGgtbmFtZSc6ICdnbHlwaE5hbWUnLFxuICBnbHlwaG9yaWVudGF0aW9uaG9yaXpvbnRhbDogJ2dseXBoT3JpZW50YXRpb25Ib3Jpem9udGFsJyxcbiAgJ2dseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwnOiAnZ2x5cGhPcmllbnRhdGlvbkhvcml6b250YWwnLFxuICBnbHlwaG9yaWVudGF0aW9udmVydGljYWw6ICdnbHlwaE9yaWVudGF0aW9uVmVydGljYWwnLFxuICAnZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwnOiAnZ2x5cGhPcmllbnRhdGlvblZlcnRpY2FsJyxcbiAgZ2x5cGhyZWY6ICdnbHlwaFJlZicsXG4gIGdyYWRpZW50dHJhbnNmb3JtOiAnZ3JhZGllbnRUcmFuc2Zvcm0nLFxuICBncmFkaWVudHVuaXRzOiAnZ3JhZGllbnRVbml0cycsXG4gIGhhbmdpbmc6ICdoYW5naW5nJyxcbiAgaG9yaXphZHZ4OiAnaG9yaXpBZHZYJyxcbiAgJ2hvcml6LWFkdi14JzogJ2hvcml6QWR2WCcsXG4gIGhvcml6b3JpZ2lueDogJ2hvcml6T3JpZ2luWCcsXG4gICdob3Jpei1vcmlnaW4teCc6ICdob3Jpek9yaWdpblgnLFxuICBpZGVvZ3JhcGhpYzogJ2lkZW9ncmFwaGljJyxcbiAgaW1hZ2VyZW5kZXJpbmc6ICdpbWFnZVJlbmRlcmluZycsXG4gICdpbWFnZS1yZW5kZXJpbmcnOiAnaW1hZ2VSZW5kZXJpbmcnLFxuICBpbjI6ICdpbjInLFxuICBpbjogJ2luJyxcbiAgaW5saXN0OiAnaW5saXN0JyxcbiAgaW50ZXJjZXB0OiAnaW50ZXJjZXB0JyxcbiAgazE6ICdrMScsXG4gIGsyOiAnazInLFxuICBrMzogJ2szJyxcbiAgazQ6ICdrNCcsXG4gIGs6ICdrJyxcbiAga2VybmVsbWF0cml4OiAna2VybmVsTWF0cml4JyxcbiAga2VybmVsdW5pdGxlbmd0aDogJ2tlcm5lbFVuaXRMZW5ndGgnLFxuICBrZXJuaW5nOiAna2VybmluZycsXG4gIGtleXBvaW50czogJ2tleVBvaW50cycsXG4gIGtleXNwbGluZXM6ICdrZXlTcGxpbmVzJyxcbiAga2V5dGltZXM6ICdrZXlUaW1lcycsXG4gIGxlbmd0aGFkanVzdDogJ2xlbmd0aEFkanVzdCcsXG4gIGxldHRlcnNwYWNpbmc6ICdsZXR0ZXJTcGFjaW5nJyxcbiAgJ2xldHRlci1zcGFjaW5nJzogJ2xldHRlclNwYWNpbmcnLFxuICBsaWdodGluZ2NvbG9yOiAnbGlnaHRpbmdDb2xvcicsXG4gICdsaWdodGluZy1jb2xvcic6ICdsaWdodGluZ0NvbG9yJyxcbiAgbGltaXRpbmdjb25lYW5nbGU6ICdsaW1pdGluZ0NvbmVBbmdsZScsXG4gIGxvY2FsOiAnbG9jYWwnLFxuICBtYXJrZXJlbmQ6ICdtYXJrZXJFbmQnLFxuICAnbWFya2VyLWVuZCc6ICdtYXJrZXJFbmQnLFxuICBtYXJrZXJoZWlnaHQ6ICdtYXJrZXJIZWlnaHQnLFxuICBtYXJrZXJtaWQ6ICdtYXJrZXJNaWQnLFxuICAnbWFya2VyLW1pZCc6ICdtYXJrZXJNaWQnLFxuICBtYXJrZXJzdGFydDogJ21hcmtlclN0YXJ0JyxcbiAgJ21hcmtlci1zdGFydCc6ICdtYXJrZXJTdGFydCcsXG4gIG1hcmtlcnVuaXRzOiAnbWFya2VyVW5pdHMnLFxuICBtYXJrZXJ3aWR0aDogJ21hcmtlcldpZHRoJyxcbiAgbWFzazogJ21hc2snLFxuICBtYXNrY29udGVudHVuaXRzOiAnbWFza0NvbnRlbnRVbml0cycsXG4gIG1hc2t1bml0czogJ21hc2tVbml0cycsXG4gIG1hdGhlbWF0aWNhbDogJ21hdGhlbWF0aWNhbCcsXG4gIG1vZGU6ICdtb2RlJyxcbiAgbnVtb2N0YXZlczogJ251bU9jdGF2ZXMnLFxuICBvZmZzZXQ6ICdvZmZzZXQnLFxuICBvcGFjaXR5OiAnb3BhY2l0eScsXG4gIG9wZXJhdG9yOiAnb3BlcmF0b3InLFxuICBvcmRlcjogJ29yZGVyJyxcbiAgb3JpZW50OiAnb3JpZW50JyxcbiAgb3JpZW50YXRpb246ICdvcmllbnRhdGlvbicsXG4gIG9yaWdpbjogJ29yaWdpbicsXG4gIG92ZXJmbG93OiAnb3ZlcmZsb3cnLFxuICBvdmVybGluZXBvc2l0aW9uOiAnb3ZlcmxpbmVQb3NpdGlvbicsXG4gICdvdmVybGluZS1wb3NpdGlvbic6ICdvdmVybGluZVBvc2l0aW9uJyxcbiAgb3ZlcmxpbmV0aGlja25lc3M6ICdvdmVybGluZVRoaWNrbmVzcycsXG4gICdvdmVybGluZS10aGlja25lc3MnOiAnb3ZlcmxpbmVUaGlja25lc3MnLFxuICBwYWludG9yZGVyOiAncGFpbnRPcmRlcicsXG4gICdwYWludC1vcmRlcic6ICdwYWludE9yZGVyJyxcbiAgcGFub3NlMTogJ3Bhbm9zZTEnLFxuICAncGFub3NlLTEnOiAncGFub3NlMScsXG4gIHBhdGhsZW5ndGg6ICdwYXRoTGVuZ3RoJyxcbiAgcGF0dGVybmNvbnRlbnR1bml0czogJ3BhdHRlcm5Db250ZW50VW5pdHMnLFxuICBwYXR0ZXJudHJhbnNmb3JtOiAncGF0dGVyblRyYW5zZm9ybScsXG4gIHBhdHRlcm51bml0czogJ3BhdHRlcm5Vbml0cycsXG4gIHBvaW50ZXJldmVudHM6ICdwb2ludGVyRXZlbnRzJyxcbiAgJ3BvaW50ZXItZXZlbnRzJzogJ3BvaW50ZXJFdmVudHMnLFxuICBwb2ludHM6ICdwb2ludHMnLFxuICBwb2ludHNhdHg6ICdwb2ludHNBdFgnLFxuICBwb2ludHNhdHk6ICdwb2ludHNBdFknLFxuICBwb2ludHNhdHo6ICdwb2ludHNBdFonLFxuICBwcmVmaXg6ICdwcmVmaXgnLFxuICBwcmVzZXJ2ZWFscGhhOiAncHJlc2VydmVBbHBoYScsXG4gIHByZXNlcnZlYXNwZWN0cmF0aW86ICdwcmVzZXJ2ZUFzcGVjdFJhdGlvJyxcbiAgcHJpbWl0aXZldW5pdHM6ICdwcmltaXRpdmVVbml0cycsXG4gIHByb3BlcnR5OiAncHJvcGVydHknLFxuICByOiAncicsXG4gIHJhZGl1czogJ3JhZGl1cycsXG4gIHJlZng6ICdyZWZYJyxcbiAgcmVmeTogJ3JlZlknLFxuICByZW5kZXJpbmdpbnRlbnQ6ICdyZW5kZXJpbmdJbnRlbnQnLFxuICAncmVuZGVyaW5nLWludGVudCc6ICdyZW5kZXJpbmdJbnRlbnQnLFxuICByZXBlYXRjb3VudDogJ3JlcGVhdENvdW50JyxcbiAgcmVwZWF0ZHVyOiAncmVwZWF0RHVyJyxcbiAgcmVxdWlyZWRleHRlbnNpb25zOiAncmVxdWlyZWRFeHRlbnNpb25zJyxcbiAgcmVxdWlyZWRmZWF0dXJlczogJ3JlcXVpcmVkRmVhdHVyZXMnLFxuICByZXNvdXJjZTogJ3Jlc291cmNlJyxcbiAgcmVzdGFydDogJ3Jlc3RhcnQnLFxuICByZXN1bHQ6ICdyZXN1bHQnLFxuICByZXN1bHRzOiAncmVzdWx0cycsXG4gIHJvdGF0ZTogJ3JvdGF0ZScsXG4gIHJ4OiAncngnLFxuICByeTogJ3J5JyxcbiAgc2NhbGU6ICdzY2FsZScsXG4gIHNlY3VyaXR5OiAnc2VjdXJpdHknLFxuICBzZWVkOiAnc2VlZCcsXG4gIHNoYXBlcmVuZGVyaW5nOiAnc2hhcGVSZW5kZXJpbmcnLFxuICAnc2hhcGUtcmVuZGVyaW5nJzogJ3NoYXBlUmVuZGVyaW5nJyxcbiAgc2xvcGU6ICdzbG9wZScsXG4gIHNwYWNpbmc6ICdzcGFjaW5nJyxcbiAgc3BlY3VsYXJjb25zdGFudDogJ3NwZWN1bGFyQ29uc3RhbnQnLFxuICBzcGVjdWxhcmV4cG9uZW50OiAnc3BlY3VsYXJFeHBvbmVudCcsXG4gIHNwZWVkOiAnc3BlZWQnLFxuICBzcHJlYWRtZXRob2Q6ICdzcHJlYWRNZXRob2QnLFxuICBzdGFydG9mZnNldDogJ3N0YXJ0T2Zmc2V0JyxcbiAgc3RkZGV2aWF0aW9uOiAnc3RkRGV2aWF0aW9uJyxcbiAgc3RlbWg6ICdzdGVtaCcsXG4gIHN0ZW12OiAnc3RlbXYnLFxuICBzdGl0Y2h0aWxlczogJ3N0aXRjaFRpbGVzJyxcbiAgc3RvcGNvbG9yOiAnc3RvcENvbG9yJyxcbiAgJ3N0b3AtY29sb3InOiAnc3RvcENvbG9yJyxcbiAgc3RvcG9wYWNpdHk6ICdzdG9wT3BhY2l0eScsXG4gICdzdG9wLW9wYWNpdHknOiAnc3RvcE9wYWNpdHknLFxuICBzdHJpa2V0aHJvdWdocG9zaXRpb246ICdzdHJpa2V0aHJvdWdoUG9zaXRpb24nLFxuICAnc3RyaWtldGhyb3VnaC1wb3NpdGlvbic6ICdzdHJpa2V0aHJvdWdoUG9zaXRpb24nLFxuICBzdHJpa2V0aHJvdWdodGhpY2tuZXNzOiAnc3RyaWtldGhyb3VnaFRoaWNrbmVzcycsXG4gICdzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyc6ICdzdHJpa2V0aHJvdWdoVGhpY2tuZXNzJyxcbiAgc3RyaW5nOiAnc3RyaW5nJyxcbiAgc3Ryb2tlOiAnc3Ryb2tlJyxcbiAgc3Ryb2tlZGFzaGFycmF5OiAnc3Ryb2tlRGFzaGFycmF5JyxcbiAgJ3N0cm9rZS1kYXNoYXJyYXknOiAnc3Ryb2tlRGFzaGFycmF5JyxcbiAgc3Ryb2tlZGFzaG9mZnNldDogJ3N0cm9rZURhc2hvZmZzZXQnLFxuICAnc3Ryb2tlLWRhc2hvZmZzZXQnOiAnc3Ryb2tlRGFzaG9mZnNldCcsXG4gIHN0cm9rZWxpbmVjYXA6ICdzdHJva2VMaW5lY2FwJyxcbiAgJ3N0cm9rZS1saW5lY2FwJzogJ3N0cm9rZUxpbmVjYXAnLFxuICBzdHJva2VsaW5lam9pbjogJ3N0cm9rZUxpbmVqb2luJyxcbiAgJ3N0cm9rZS1saW5lam9pbic6ICdzdHJva2VMaW5lam9pbicsXG4gIHN0cm9rZW1pdGVybGltaXQ6ICdzdHJva2VNaXRlcmxpbWl0JyxcbiAgJ3N0cm9rZS1taXRlcmxpbWl0JzogJ3N0cm9rZU1pdGVybGltaXQnLFxuICBzdHJva2V3aWR0aDogJ3N0cm9rZVdpZHRoJyxcbiAgJ3N0cm9rZS13aWR0aCc6ICdzdHJva2VXaWR0aCcsXG4gIHN0cm9rZW9wYWNpdHk6ICdzdHJva2VPcGFjaXR5JyxcbiAgJ3N0cm9rZS1vcGFjaXR5JzogJ3N0cm9rZU9wYWNpdHknLFxuICBzdXBwcmVzc2NvbnRlbnRlZGl0YWJsZXdhcm5pbmc6ICdzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcnLFxuICBzdXBwcmVzc2h5ZHJhdGlvbndhcm5pbmc6ICdzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcnLFxuICBzdXJmYWNlc2NhbGU6ICdzdXJmYWNlU2NhbGUnLFxuICBzeXN0ZW1sYW5ndWFnZTogJ3N5c3RlbUxhbmd1YWdlJyxcbiAgdGFibGV2YWx1ZXM6ICd0YWJsZVZhbHVlcycsXG4gIHRhcmdldHg6ICd0YXJnZXRYJyxcbiAgdGFyZ2V0eTogJ3RhcmdldFknLFxuICB0ZXh0YW5jaG9yOiAndGV4dEFuY2hvcicsXG4gICd0ZXh0LWFuY2hvcic6ICd0ZXh0QW5jaG9yJyxcbiAgdGV4dGRlY29yYXRpb246ICd0ZXh0RGVjb3JhdGlvbicsXG4gICd0ZXh0LWRlY29yYXRpb24nOiAndGV4dERlY29yYXRpb24nLFxuICB0ZXh0bGVuZ3RoOiAndGV4dExlbmd0aCcsXG4gIHRleHRyZW5kZXJpbmc6ICd0ZXh0UmVuZGVyaW5nJyxcbiAgJ3RleHQtcmVuZGVyaW5nJzogJ3RleHRSZW5kZXJpbmcnLFxuICB0bzogJ3RvJyxcbiAgdHJhbnNmb3JtOiAndHJhbnNmb3JtJyxcbiAgdHlwZW9mOiAndHlwZW9mJyxcbiAgdTE6ICd1MScsXG4gIHUyOiAndTInLFxuICB1bmRlcmxpbmVwb3NpdGlvbjogJ3VuZGVybGluZVBvc2l0aW9uJyxcbiAgJ3VuZGVybGluZS1wb3NpdGlvbic6ICd1bmRlcmxpbmVQb3NpdGlvbicsXG4gIHVuZGVybGluZXRoaWNrbmVzczogJ3VuZGVybGluZVRoaWNrbmVzcycsXG4gICd1bmRlcmxpbmUtdGhpY2tuZXNzJzogJ3VuZGVybGluZVRoaWNrbmVzcycsXG4gIHVuaWNvZGU6ICd1bmljb2RlJyxcbiAgdW5pY29kZWJpZGk6ICd1bmljb2RlQmlkaScsXG4gICd1bmljb2RlLWJpZGknOiAndW5pY29kZUJpZGknLFxuICB1bmljb2RlcmFuZ2U6ICd1bmljb2RlUmFuZ2UnLFxuICAndW5pY29kZS1yYW5nZSc6ICd1bmljb2RlUmFuZ2UnLFxuICB1bml0c3BlcmVtOiAndW5pdHNQZXJFbScsXG4gICd1bml0cy1wZXItZW0nOiAndW5pdHNQZXJFbScsXG4gIHVuc2VsZWN0YWJsZTogJ3Vuc2VsZWN0YWJsZScsXG4gIHZhbHBoYWJldGljOiAndkFscGhhYmV0aWMnLFxuICAndi1hbHBoYWJldGljJzogJ3ZBbHBoYWJldGljJyxcbiAgdmFsdWVzOiAndmFsdWVzJyxcbiAgdmVjdG9yZWZmZWN0OiAndmVjdG9yRWZmZWN0JyxcbiAgJ3ZlY3Rvci1lZmZlY3QnOiAndmVjdG9yRWZmZWN0JyxcbiAgdmVyc2lvbjogJ3ZlcnNpb24nLFxuICB2ZXJ0YWR2eTogJ3ZlcnRBZHZZJyxcbiAgJ3ZlcnQtYWR2LXknOiAndmVydEFkdlknLFxuICB2ZXJ0b3JpZ2lueDogJ3ZlcnRPcmlnaW5YJyxcbiAgJ3ZlcnQtb3JpZ2luLXgnOiAndmVydE9yaWdpblgnLFxuICB2ZXJ0b3JpZ2lueTogJ3ZlcnRPcmlnaW5ZJyxcbiAgJ3ZlcnQtb3JpZ2luLXknOiAndmVydE9yaWdpblknLFxuICB2aGFuZ2luZzogJ3ZIYW5naW5nJyxcbiAgJ3YtaGFuZ2luZyc6ICd2SGFuZ2luZycsXG4gIHZpZGVvZ3JhcGhpYzogJ3ZJZGVvZ3JhcGhpYycsXG4gICd2LWlkZW9ncmFwaGljJzogJ3ZJZGVvZ3JhcGhpYycsXG4gIHZpZXdib3g6ICd2aWV3Qm94JyxcbiAgdmlld3RhcmdldDogJ3ZpZXdUYXJnZXQnLFxuICB2aXNpYmlsaXR5OiAndmlzaWJpbGl0eScsXG4gIHZtYXRoZW1hdGljYWw6ICd2TWF0aGVtYXRpY2FsJyxcbiAgJ3YtbWF0aGVtYXRpY2FsJzogJ3ZNYXRoZW1hdGljYWwnLFxuICB2b2NhYjogJ3ZvY2FiJyxcbiAgd2lkdGhzOiAnd2lkdGhzJyxcbiAgd29yZHNwYWNpbmc6ICd3b3JkU3BhY2luZycsXG4gICd3b3JkLXNwYWNpbmcnOiAnd29yZFNwYWNpbmcnLFxuICB3cml0aW5nbW9kZTogJ3dyaXRpbmdNb2RlJyxcbiAgJ3dyaXRpbmctbW9kZSc6ICd3cml0aW5nTW9kZScsXG4gIHgxOiAneDEnLFxuICB4MjogJ3gyJyxcbiAgeDogJ3gnLFxuICB4Y2hhbm5lbHNlbGVjdG9yOiAneENoYW5uZWxTZWxlY3RvcicsXG4gIHhoZWlnaHQ6ICd4SGVpZ2h0JyxcbiAgJ3gtaGVpZ2h0JzogJ3hIZWlnaHQnLFxuICB4bGlua2FjdHVhdGU6ICd4bGlua0FjdHVhdGUnLFxuICAneGxpbms6YWN0dWF0ZSc6ICd4bGlua0FjdHVhdGUnLFxuICB4bGlua2FyY3JvbGU6ICd4bGlua0FyY3JvbGUnLFxuICAneGxpbms6YXJjcm9sZSc6ICd4bGlua0FyY3JvbGUnLFxuICB4bGlua2hyZWY6ICd4bGlua0hyZWYnLFxuICAneGxpbms6aHJlZic6ICd4bGlua0hyZWYnLFxuICB4bGlua3JvbGU6ICd4bGlua1JvbGUnLFxuICAneGxpbms6cm9sZSc6ICd4bGlua1JvbGUnLFxuICB4bGlua3Nob3c6ICd4bGlua1Nob3cnLFxuICAneGxpbms6c2hvdyc6ICd4bGlua1Nob3cnLFxuICB4bGlua3RpdGxlOiAneGxpbmtUaXRsZScsXG4gICd4bGluazp0aXRsZSc6ICd4bGlua1RpdGxlJyxcbiAgeGxpbmt0eXBlOiAneGxpbmtUeXBlJyxcbiAgJ3hsaW5rOnR5cGUnOiAneGxpbmtUeXBlJyxcbiAgeG1sYmFzZTogJ3htbEJhc2UnLFxuICAneG1sOmJhc2UnOiAneG1sQmFzZScsXG4gIHhtbGxhbmc6ICd4bWxMYW5nJyxcbiAgJ3htbDpsYW5nJzogJ3htbExhbmcnLFxuICB4bWxuczogJ3htbG5zJyxcbiAgJ3htbDpzcGFjZSc6ICd4bWxTcGFjZScsXG4gIHhtbG5zeGxpbms6ICd4bWxuc1hsaW5rJyxcbiAgJ3htbG5zOnhsaW5rJzogJ3htbG5zWGxpbmsnLFxuICB4bWxzcGFjZTogJ3htbFNwYWNlJyxcbiAgeTE6ICd5MScsXG4gIHkyOiAneTInLFxuICB5OiAneScsXG4gIHljaGFubmVsc2VsZWN0b3I6ICd5Q2hhbm5lbFNlbGVjdG9yJyxcbiAgejogJ3onLFxuICB6b29tYW5kcGFuOiAnem9vbUFuZFBhbidcbn07XG5cbnZhciBhcmlhUHJvcGVydGllcyA9IHtcbiAgJ2FyaWEtY3VycmVudCc6IDAsXG4gIC8vIHN0YXRlXG4gICdhcmlhLWRlc2NyaXB0aW9uJzogMCxcbiAgJ2FyaWEtZGV0YWlscyc6IDAsXG4gICdhcmlhLWRpc2FibGVkJzogMCxcbiAgLy8gc3RhdGVcbiAgJ2FyaWEtaGlkZGVuJzogMCxcbiAgLy8gc3RhdGVcbiAgJ2FyaWEtaW52YWxpZCc6IDAsXG4gIC8vIHN0YXRlXG4gICdhcmlhLWtleXNob3J0Y3V0cyc6IDAsXG4gICdhcmlhLWxhYmVsJzogMCxcbiAgJ2FyaWEtcm9sZWRlc2NyaXB0aW9uJzogMCxcbiAgLy8gV2lkZ2V0IEF0dHJpYnV0ZXNcbiAgJ2FyaWEtYXV0b2NvbXBsZXRlJzogMCxcbiAgJ2FyaWEtY2hlY2tlZCc6IDAsXG4gICdhcmlhLWV4cGFuZGVkJzogMCxcbiAgJ2FyaWEtaGFzcG9wdXAnOiAwLFxuICAnYXJpYS1sZXZlbCc6IDAsXG4gICdhcmlhLW1vZGFsJzogMCxcbiAgJ2FyaWEtbXVsdGlsaW5lJzogMCxcbiAgJ2FyaWEtbXVsdGlzZWxlY3RhYmxlJzogMCxcbiAgJ2FyaWEtb3JpZW50YXRpb24nOiAwLFxuICAnYXJpYS1wbGFjZWhvbGRlcic6IDAsXG4gICdhcmlhLXByZXNzZWQnOiAwLFxuICAnYXJpYS1yZWFkb25seSc6IDAsXG4gICdhcmlhLXJlcXVpcmVkJzogMCxcbiAgJ2FyaWEtc2VsZWN0ZWQnOiAwLFxuICAnYXJpYS1zb3J0JzogMCxcbiAgJ2FyaWEtdmFsdWVtYXgnOiAwLFxuICAnYXJpYS12YWx1ZW1pbic6IDAsXG4gICdhcmlhLXZhbHVlbm93JzogMCxcbiAgJ2FyaWEtdmFsdWV0ZXh0JzogMCxcbiAgLy8gTGl2ZSBSZWdpb24gQXR0cmlidXRlc1xuICAnYXJpYS1hdG9taWMnOiAwLFxuICAnYXJpYS1idXN5JzogMCxcbiAgJ2FyaWEtbGl2ZSc6IDAsXG4gICdhcmlhLXJlbGV2YW50JzogMCxcbiAgLy8gRHJhZy1hbmQtRHJvcCBBdHRyaWJ1dGVzXG4gICdhcmlhLWRyb3BlZmZlY3QnOiAwLFxuICAnYXJpYS1ncmFiYmVkJzogMCxcbiAgLy8gUmVsYXRpb25zaGlwIEF0dHJpYnV0ZXNcbiAgJ2FyaWEtYWN0aXZlZGVzY2VuZGFudCc6IDAsXG4gICdhcmlhLWNvbGNvdW50JzogMCxcbiAgJ2FyaWEtY29saW5kZXgnOiAwLFxuICAnYXJpYS1jb2xzcGFuJzogMCxcbiAgJ2FyaWEtY29udHJvbHMnOiAwLFxuICAnYXJpYS1kZXNjcmliZWRieSc6IDAsXG4gICdhcmlhLWVycm9ybWVzc2FnZSc6IDAsXG4gICdhcmlhLWZsb3d0byc6IDAsXG4gICdhcmlhLWxhYmVsbGVkYnknOiAwLFxuICAnYXJpYS1vd25zJzogMCxcbiAgJ2FyaWEtcG9zaW5zZXQnOiAwLFxuICAnYXJpYS1yb3djb3VudCc6IDAsXG4gICdhcmlhLXJvd2luZGV4JzogMCxcbiAgJ2FyaWEtcm93c3Bhbic6IDAsXG4gICdhcmlhLXNldHNpemUnOiAwXG59O1xuXG52YXIgd2FybmVkUHJvcGVydGllcyA9IHt9O1xudmFyIHJBUklBID0gbmV3IFJlZ0V4cCgnXihhcmlhKS1bJyArIEFUVFJJQlVURV9OQU1FX0NIQVIgKyAnXSokJyk7XG52YXIgckFSSUFDYW1lbCA9IG5ldyBSZWdFeHAoJ14oYXJpYSlbQS1aXVsnICsgQVRUUklCVVRFX05BTUVfQ0hBUiArICddKiQnKTtcblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wZXJ0eSh0YWdOYW1lLCBuYW1lKSB7XG4gIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh3YXJuZWRQcm9wZXJ0aWVzLCBuYW1lKSAmJiB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAockFSSUFDYW1lbC50ZXN0KG5hbWUpKSB7XG4gICAgICB2YXIgYXJpYU5hbWUgPSAnYXJpYS0nICsgbmFtZS5zbGljZSg0KS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdmFyIGNvcnJlY3ROYW1lID0gYXJpYVByb3BlcnRpZXMuaGFzT3duUHJvcGVydHkoYXJpYU5hbWUpID8gYXJpYU5hbWUgOiBudWxsOyAvLyBJZiB0aGlzIGlzIGFuIGFyaWEtKiBhdHRyaWJ1dGUsIGJ1dCBpcyBub3QgbGlzdGVkIGluIHRoZSBrbm93biBET01cbiAgICAgIC8vIERPTSBwcm9wZXJ0aWVzLCB0aGVuIGl0IGlzIGFuIGludmFsaWQgYXJpYS0qIGF0dHJpYnV0ZS5cblxuICAgICAgaWYgKGNvcnJlY3ROYW1lID09IG51bGwpIHtcbiAgICAgICAgZXJyb3IoJ0ludmFsaWQgQVJJQSBhdHRyaWJ1dGUgYCVzYC4gQVJJQSBhdHRyaWJ1dGVzIGZvbGxvdyB0aGUgcGF0dGVybiBhcmlhLSogYW5kIG11c3QgYmUgbG93ZXJjYXNlLicsIG5hbWUpO1xuXG4gICAgICAgIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gLy8gYXJpYS0qIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGxvd2VyY2FzZTsgc3VnZ2VzdCB0aGUgbG93ZXJjYXNlIHZlcnNpb24uXG5cblxuICAgICAgaWYgKG5hbWUgIT09IGNvcnJlY3ROYW1lKSB7XG4gICAgICAgIGVycm9yKCdJbnZhbGlkIEFSSUEgYXR0cmlidXRlIGAlc2AuIERpZCB5b3UgbWVhbiBgJXNgPycsIG5hbWUsIGNvcnJlY3ROYW1lKTtcblxuICAgICAgICB3YXJuZWRQcm9wZXJ0aWVzW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHJBUklBLnRlc3QobmFtZSkpIHtcbiAgICAgIHZhciBsb3dlckNhc2VkTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIHZhciBzdGFuZGFyZE5hbWUgPSBhcmlhUHJvcGVydGllcy5oYXNPd25Qcm9wZXJ0eShsb3dlckNhc2VkTmFtZSkgPyBsb3dlckNhc2VkTmFtZSA6IG51bGw7IC8vIElmIHRoaXMgaXMgYW4gYXJpYS0qIGF0dHJpYnV0ZSwgYnV0IGlzIG5vdCBsaXN0ZWQgaW4gdGhlIGtub3duIERPTVxuICAgICAgLy8gRE9NIHByb3BlcnRpZXMsIHRoZW4gaXQgaXMgYW4gaW52YWxpZCBhcmlhLSogYXR0cmlidXRlLlxuXG4gICAgICBpZiAoc3RhbmRhcmROYW1lID09IG51bGwpIHtcbiAgICAgICAgd2FybmVkUHJvcGVydGllc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gLy8gYXJpYS0qIGF0dHJpYnV0ZXMgc2hvdWxkIGJlIGxvd2VyY2FzZTsgc3VnZ2VzdCB0aGUgbG93ZXJjYXNlIHZlcnNpb24uXG5cblxuICAgICAgaWYgKG5hbWUgIT09IHN0YW5kYXJkTmFtZSkge1xuICAgICAgICBlcnJvcignVW5rbm93biBBUklBIGF0dHJpYnV0ZSBgJXNgLiBEaWQgeW91IG1lYW4gYCVzYD8nLCBuYW1lLCBzdGFuZGFyZE5hbWUpO1xuXG4gICAgICAgIHdhcm5lZFByb3BlcnRpZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gd2FybkludmFsaWRBUklBUHJvcHModHlwZSwgcHJvcHMpIHtcbiAge1xuICAgIHZhciBpbnZhbGlkUHJvcHMgPSBbXTtcblxuICAgIGZvciAodmFyIGtleSBpbiBwcm9wcykge1xuICAgICAgdmFyIGlzVmFsaWQgPSB2YWxpZGF0ZVByb3BlcnR5KHR5cGUsIGtleSk7XG5cbiAgICAgIGlmICghaXNWYWxpZCkge1xuICAgICAgICBpbnZhbGlkUHJvcHMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB1bmtub3duUHJvcFN0cmluZyA9IGludmFsaWRQcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIHJldHVybiAnYCcgKyBwcm9wICsgJ2AnO1xuICAgIH0pLmpvaW4oJywgJyk7XG5cbiAgICBpZiAoaW52YWxpZFByb3BzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgZXJyb3IoJ0ludmFsaWQgYXJpYSBwcm9wICVzIG9uIDwlcz4gdGFnLiAnICsgJ0ZvciBkZXRhaWxzLCBzZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL2ludmFsaWQtYXJpYS1wcm9wcycsIHVua25vd25Qcm9wU3RyaW5nLCB0eXBlKTtcbiAgICB9IGVsc2UgaWYgKGludmFsaWRQcm9wcy5sZW5ndGggPiAxKSB7XG4gICAgICBlcnJvcignSW52YWxpZCBhcmlhIHByb3BzICVzIG9uIDwlcz4gdGFnLiAnICsgJ0ZvciBkZXRhaWxzLCBzZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL2ludmFsaWQtYXJpYS1wcm9wcycsIHVua25vd25Qcm9wU3RyaW5nLCB0eXBlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wZXJ0aWVzKHR5cGUsIHByb3BzKSB7XG4gIGlmIChpc0N1c3RvbUNvbXBvbmVudCh0eXBlLCBwcm9wcykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB3YXJuSW52YWxpZEFSSUFQcm9wcyh0eXBlLCBwcm9wcyk7XG59XG5cbnZhciBkaWRXYXJuVmFsdWVOdWxsID0gZmFsc2U7XG5mdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnRpZXMkMSh0eXBlLCBwcm9wcykge1xuICB7XG4gICAgaWYgKHR5cGUgIT09ICdpbnB1dCcgJiYgdHlwZSAhPT0gJ3RleHRhcmVhJyAmJiB0eXBlICE9PSAnc2VsZWN0Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwcm9wcyAhPSBudWxsICYmIHByb3BzLnZhbHVlID09PSBudWxsICYmICFkaWRXYXJuVmFsdWVOdWxsKSB7XG4gICAgICBkaWRXYXJuVmFsdWVOdWxsID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGUgPT09ICdzZWxlY3QnICYmIHByb3BzLm11bHRpcGxlKSB7XG4gICAgICAgIGVycm9yKCdgdmFsdWVgIHByb3Agb24gYCVzYCBzaG91bGQgbm90IGJlIG51bGwuICcgKyAnQ29uc2lkZXIgdXNpbmcgYW4gZW1wdHkgYXJyYXkgd2hlbiBgbXVsdGlwbGVgIGlzIHNldCB0byBgdHJ1ZWAgJyArICd0byBjbGVhciB0aGUgY29tcG9uZW50IG9yIGB1bmRlZmluZWRgIGZvciB1bmNvbnRyb2xsZWQgY29tcG9uZW50cy4nLCB0eXBlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVycm9yKCdgdmFsdWVgIHByb3Agb24gYCVzYCBzaG91bGQgbm90IGJlIG51bGwuICcgKyAnQ29uc2lkZXIgdXNpbmcgYW4gZW1wdHkgc3RyaW5nIHRvIGNsZWFyIHRoZSBjb21wb25lbnQgb3IgYHVuZGVmaW5lZGAgJyArICdmb3IgdW5jb250cm9sbGVkIGNvbXBvbmVudHMuJywgdHlwZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciB2YWxpZGF0ZVByb3BlcnR5JDEgPSBmdW5jdGlvbiAoKSB7fTtcblxue1xuICB2YXIgd2FybmVkUHJvcGVydGllcyQxID0ge307XG4gIHZhciBFVkVOVF9OQU1FX1JFR0VYID0gL15vbi4vO1xuICB2YXIgSU5WQUxJRF9FVkVOVF9OQU1FX1JFR0VYID0gL15vblteQS1aXS87XG4gIHZhciByQVJJQSQxID0gbmV3IFJlZ0V4cCgnXihhcmlhKS1bJyArIEFUVFJJQlVURV9OQU1FX0NIQVIgKyAnXSokJyk7XG4gIHZhciByQVJJQUNhbWVsJDEgPSBuZXcgUmVnRXhwKCdeKGFyaWEpW0EtWl1bJyArIEFUVFJJQlVURV9OQU1FX0NIQVIgKyAnXSokJyk7XG5cbiAgdmFsaWRhdGVQcm9wZXJ0eSQxID0gZnVuY3Rpb24gKHRhZ05hbWUsIG5hbWUsIHZhbHVlLCBldmVudFJlZ2lzdHJ5KSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwod2FybmVkUHJvcGVydGllcyQxLCBuYW1lKSAmJiB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0pIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHZhciBsb3dlckNhc2VkTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmIChsb3dlckNhc2VkTmFtZSA9PT0gJ29uZm9jdXNpbicgfHwgbG93ZXJDYXNlZE5hbWUgPT09ICdvbmZvY3Vzb3V0Jykge1xuICAgICAgZXJyb3IoJ1JlYWN0IHVzZXMgb25Gb2N1cyBhbmQgb25CbHVyIGluc3RlYWQgb2Ygb25Gb2N1c0luIGFuZCBvbkZvY3VzT3V0LiAnICsgJ0FsbCBSZWFjdCBldmVudHMgYXJlIG5vcm1hbGl6ZWQgdG8gYnViYmxlLCBzbyBvbkZvY3VzSW4gYW5kIG9uRm9jdXNPdXQgJyArICdhcmUgbm90IG5lZWRlZC9zdXBwb3J0ZWQgYnkgUmVhY3QuJyk7XG5cbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IC8vIFdlIGNhbid0IHJlbHkgb24gdGhlIGV2ZW50IHN5c3RlbSBiZWluZyBpbmplY3RlZCBvbiB0aGUgc2VydmVyLlxuXG5cbiAgICBpZiAoZXZlbnRSZWdpc3RyeSAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyA9IGV2ZW50UmVnaXN0cnkucmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyxcbiAgICAgICAgICBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzID0gZXZlbnRSZWdpc3RyeS5wb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzO1xuXG4gICAgICBpZiAocmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlZ2lzdHJhdGlvbk5hbWUgPSBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZWROYW1lKSA/IHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXNbbG93ZXJDYXNlZE5hbWVdIDogbnVsbDtcblxuICAgICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWUgIT0gbnVsbCkge1xuICAgICAgICBlcnJvcignSW52YWxpZCBldmVudCBoYW5kbGVyIHByb3BlcnR5IGAlc2AuIERpZCB5b3UgbWVhbiBgJXNgPycsIG5hbWUsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuXG4gICAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoRVZFTlRfTkFNRV9SRUdFWC50ZXN0KG5hbWUpKSB7XG4gICAgICAgIGVycm9yKCdVbmtub3duIGV2ZW50IGhhbmRsZXIgcHJvcGVydHkgYCVzYC4gSXQgd2lsbCBiZSBpZ25vcmVkLicsIG5hbWUpO1xuXG4gICAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoRVZFTlRfTkFNRV9SRUdFWC50ZXN0KG5hbWUpKSB7XG4gICAgICAvLyBJZiBubyBldmVudCBwbHVnaW5zIGhhdmUgYmVlbiBpbmplY3RlZCwgd2UgYXJlIGluIGEgc2VydmVyIGVudmlyb25tZW50LlxuICAgICAgLy8gU28gd2UgY2FuJ3QgdGVsbCBpZiB0aGUgZXZlbnQgbmFtZSBpcyBjb3JyZWN0IGZvciBzdXJlLCBidXQgd2UgY2FuIGZpbHRlclxuICAgICAgLy8gb3V0IGtub3duIGJhZCBvbmVzIGxpa2UgYG9uY2xpY2tgLiBXZSBjYW4ndCBzdWdnZXN0IGEgc3BlY2lmaWMgcmVwbGFjZW1lbnQgdGhvdWdoLlxuICAgICAgaWYgKElOVkFMSURfRVZFTlRfTkFNRV9SRUdFWC50ZXN0KG5hbWUpKSB7XG4gICAgICAgIGVycm9yKCdJbnZhbGlkIGV2ZW50IGhhbmRsZXIgcHJvcGVydHkgYCVzYC4gJyArICdSZWFjdCBldmVudHMgdXNlIHRoZSBjYW1lbENhc2UgbmFtaW5nIGNvbnZlbnRpb24sIGZvciBleGFtcGxlIGBvbkNsaWNrYC4nLCBuYW1lKTtcbiAgICAgIH1cblxuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gTGV0IHRoZSBBUklBIGF0dHJpYnV0ZSBob29rIHZhbGlkYXRlIEFSSUEgYXR0cmlidXRlc1xuXG5cbiAgICBpZiAockFSSUEkMS50ZXN0KG5hbWUpIHx8IHJBUklBQ2FtZWwkMS50ZXN0KG5hbWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAobG93ZXJDYXNlZE5hbWUgPT09ICdpbm5lcmh0bWwnKSB7XG4gICAgICBlcnJvcignRGlyZWN0bHkgc2V0dGluZyBwcm9wZXJ0eSBgaW5uZXJIVE1MYCBpcyBub3QgcGVybWl0dGVkLiAnICsgJ0ZvciBtb3JlIGluZm9ybWF0aW9uLCBsb29rdXAgZG9jdW1lbnRhdGlvbiBvbiBgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgLicpO1xuXG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKGxvd2VyQ2FzZWROYW1lID09PSAnYXJpYScpIHtcbiAgICAgIGVycm9yKCdUaGUgYGFyaWFgIGF0dHJpYnV0ZSBpcyByZXNlcnZlZCBmb3IgZnV0dXJlIHVzZSBpbiBSZWFjdC4gJyArICdQYXNzIGluZGl2aWR1YWwgYGFyaWEtYCBhdHRyaWJ1dGVzIGluc3RlYWQuJyk7XG5cbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAobG93ZXJDYXNlZE5hbWUgPT09ICdpcycgJiYgdmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICBlcnJvcignUmVjZWl2ZWQgYSBgJXNgIGZvciBhIHN0cmluZyBhdHRyaWJ1dGUgYGlzYC4gSWYgdGhpcyBpcyBleHBlY3RlZCwgY2FzdCAnICsgJ3RoZSB2YWx1ZSB0byBhIHN0cmluZy4nLCB0eXBlb2YgdmFsdWUpO1xuXG4gICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgaXNOYU4odmFsdWUpKSB7XG4gICAgICBlcnJvcignUmVjZWl2ZWQgTmFOIGZvciB0aGUgYCVzYCBhdHRyaWJ1dGUuIElmIHRoaXMgaXMgZXhwZWN0ZWQsIGNhc3QgJyArICd0aGUgdmFsdWUgdG8gYSBzdHJpbmcuJywgbmFtZSk7XG5cbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgcHJvcGVydHlJbmZvID0gZ2V0UHJvcGVydHlJbmZvKG5hbWUpO1xuICAgIHZhciBpc1Jlc2VydmVkID0gcHJvcGVydHlJbmZvICE9PSBudWxsICYmIHByb3BlcnR5SW5mby50eXBlID09PSBSRVNFUlZFRDsgLy8gS25vd24gYXR0cmlidXRlcyBzaG91bGQgbWF0Y2ggdGhlIGNhc2luZyBzcGVjaWZpZWQgaW4gdGhlIHByb3BlcnR5IGNvbmZpZy5cblxuICAgIGlmIChwb3NzaWJsZVN0YW5kYXJkTmFtZXMuaGFzT3duUHJvcGVydHkobG93ZXJDYXNlZE5hbWUpKSB7XG4gICAgICB2YXIgc3RhbmRhcmROYW1lID0gcG9zc2libGVTdGFuZGFyZE5hbWVzW2xvd2VyQ2FzZWROYW1lXTtcblxuICAgICAgaWYgKHN0YW5kYXJkTmFtZSAhPT0gbmFtZSkge1xuICAgICAgICBlcnJvcignSW52YWxpZCBET00gcHJvcGVydHkgYCVzYC4gRGlkIHlvdSBtZWFuIGAlc2A/JywgbmFtZSwgc3RhbmRhcmROYW1lKTtcblxuICAgICAgICB3YXJuZWRQcm9wZXJ0aWVzJDFbbmFtZV0gPSB0cnVlO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCFpc1Jlc2VydmVkICYmIG5hbWUgIT09IGxvd2VyQ2FzZWROYW1lKSB7XG4gICAgICAvLyBVbmtub3duIGF0dHJpYnV0ZXMgc2hvdWxkIGhhdmUgbG93ZXJjYXNlIGNhc2luZyBzaW5jZSB0aGF0J3MgaG93IHRoZXlcbiAgICAgIC8vIHdpbGwgYmUgY2FzZWQgYW55d2F5IHdpdGggc2VydmVyIHJlbmRlcmluZy5cbiAgICAgIGVycm9yKCdSZWFjdCBkb2VzIG5vdCByZWNvZ25pemUgdGhlIGAlc2AgcHJvcCBvbiBhIERPTSBlbGVtZW50LiBJZiB5b3UgJyArICdpbnRlbnRpb25hbGx5IHdhbnQgaXQgdG8gYXBwZWFyIGluIHRoZSBET00gYXMgYSBjdXN0b20gJyArICdhdHRyaWJ1dGUsIHNwZWxsIGl0IGFzIGxvd2VyY2FzZSBgJXNgIGluc3RlYWQuICcgKyAnSWYgeW91IGFjY2lkZW50YWxseSBwYXNzZWQgaXQgZnJvbSBhIHBhcmVudCBjb21wb25lbnQsIHJlbW92ZSAnICsgJ2l0IGZyb20gdGhlIERPTSBlbGVtZW50LicsIG5hbWUsIGxvd2VyQ2FzZWROYW1lKTtcblxuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyAmJiBzaG91bGRSZW1vdmVBdHRyaWJ1dGVXaXRoV2FybmluZyhuYW1lLCB2YWx1ZSwgcHJvcGVydHlJbmZvLCBmYWxzZSkpIHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICBlcnJvcignUmVjZWl2ZWQgYCVzYCBmb3IgYSBub24tYm9vbGVhbiBhdHRyaWJ1dGUgYCVzYC5cXG5cXG4nICsgJ0lmIHlvdSB3YW50IHRvIHdyaXRlIGl0IHRvIHRoZSBET00sIHBhc3MgYSBzdHJpbmcgaW5zdGVhZDogJyArICclcz1cIiVzXCIgb3IgJXM9e3ZhbHVlLnRvU3RyaW5nKCl9LicsIHZhbHVlLCBuYW1lLCBuYW1lLCB2YWx1ZSwgbmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvcignUmVjZWl2ZWQgYCVzYCBmb3IgYSBub24tYm9vbGVhbiBhdHRyaWJ1dGUgYCVzYC5cXG5cXG4nICsgJ0lmIHlvdSB3YW50IHRvIHdyaXRlIGl0IHRvIHRoZSBET00sIHBhc3MgYSBzdHJpbmcgaW5zdGVhZDogJyArICclcz1cIiVzXCIgb3IgJXM9e3ZhbHVlLnRvU3RyaW5nKCl9LlxcblxcbicgKyAnSWYgeW91IHVzZWQgdG8gY29uZGl0aW9uYWxseSBvbWl0IGl0IHdpdGggJXM9e2NvbmRpdGlvbiAmJiB2YWx1ZX0sICcgKyAncGFzcyAlcz17Y29uZGl0aW9uID8gdmFsdWUgOiB1bmRlZmluZWR9IGluc3RlYWQuJywgdmFsdWUsIG5hbWUsIG5hbWUsIHZhbHVlLCBuYW1lLCBuYW1lLCBuYW1lKTtcbiAgICAgIH1cblxuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gTm93IHRoYXQgd2UndmUgdmFsaWRhdGVkIGNhc2luZywgZG8gbm90IHZhbGlkYXRlXG4gICAgLy8gZGF0YSB0eXBlcyBmb3IgcmVzZXJ2ZWQgcHJvcHNcblxuXG4gICAgaWYgKGlzUmVzZXJ2ZWQpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gLy8gV2FybiB3aGVuIGEga25vd24gYXR0cmlidXRlIGlzIGEgYmFkIHR5cGVcblxuXG4gICAgaWYgKHNob3VsZFJlbW92ZUF0dHJpYnV0ZVdpdGhXYXJuaW5nKG5hbWUsIHZhbHVlLCBwcm9wZXJ0eUluZm8sIGZhbHNlKSkge1xuICAgICAgd2FybmVkUHJvcGVydGllcyQxW25hbWVdID0gdHJ1ZTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIFdhcm4gd2hlbiBwYXNzaW5nIHRoZSBzdHJpbmdzICdmYWxzZScgb3IgJ3RydWUnIGludG8gYSBib29sZWFuIHByb3BcblxuXG4gICAgaWYgKCh2YWx1ZSA9PT0gJ2ZhbHNlJyB8fCB2YWx1ZSA9PT0gJ3RydWUnKSAmJiBwcm9wZXJ0eUluZm8gIT09IG51bGwgJiYgcHJvcGVydHlJbmZvLnR5cGUgPT09IEJPT0xFQU4pIHtcbiAgICAgIGVycm9yKCdSZWNlaXZlZCB0aGUgc3RyaW5nIGAlc2AgZm9yIHRoZSBib29sZWFuIGF0dHJpYnV0ZSBgJXNgLiAnICsgJyVzICcgKyAnRGlkIHlvdSBtZWFuICVzPXslc30/JywgdmFsdWUsIG5hbWUsIHZhbHVlID09PSAnZmFsc2UnID8gJ1RoZSBicm93c2VyIHdpbGwgaW50ZXJwcmV0IGl0IGFzIGEgdHJ1dGh5IHZhbHVlLicgOiAnQWx0aG91Z2ggdGhpcyB3b3JrcywgaXQgd2lsbCBub3Qgd29yayBhcyBleHBlY3RlZCBpZiB5b3UgcGFzcyB0aGUgc3RyaW5nIFwiZmFsc2VcIi4nLCBuYW1lLCB2YWx1ZSk7XG5cbiAgICAgIHdhcm5lZFByb3BlcnRpZXMkMVtuYW1lXSA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbn1cblxudmFyIHdhcm5Vbmtub3duUHJvcGVydGllcyA9IGZ1bmN0aW9uICh0eXBlLCBwcm9wcywgZXZlbnRSZWdpc3RyeSkge1xuICB7XG4gICAgdmFyIHVua25vd25Qcm9wcyA9IFtdO1xuXG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICB2YXIgaXNWYWxpZCA9IHZhbGlkYXRlUHJvcGVydHkkMSh0eXBlLCBrZXksIHByb3BzW2tleV0sIGV2ZW50UmVnaXN0cnkpO1xuXG4gICAgICBpZiAoIWlzVmFsaWQpIHtcbiAgICAgICAgdW5rbm93blByb3BzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgdW5rbm93blByb3BTdHJpbmcgPSB1bmtub3duUHJvcHMubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICByZXR1cm4gJ2AnICsgcHJvcCArICdgJztcbiAgICB9KS5qb2luKCcsICcpO1xuXG4gICAgaWYgKHVua25vd25Qcm9wcy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBwcm9wICVzIG9uIDwlcz4gdGFnLiBFaXRoZXIgcmVtb3ZlIGl0IGZyb20gdGhlIGVsZW1lbnQsICcgKyAnb3IgcGFzcyBhIHN0cmluZyBvciBudW1iZXIgdmFsdWUgdG8ga2VlcCBpdCBpbiB0aGUgRE9NLiAnICsgJ0ZvciBkZXRhaWxzLCBzZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL2F0dHJpYnV0ZS1iZWhhdmlvciAnLCB1bmtub3duUHJvcFN0cmluZywgdHlwZSk7XG4gICAgfSBlbHNlIGlmICh1bmtub3duUHJvcHMubGVuZ3RoID4gMSkge1xuICAgICAgZXJyb3IoJ0ludmFsaWQgdmFsdWVzIGZvciBwcm9wcyAlcyBvbiA8JXM+IHRhZy4gRWl0aGVyIHJlbW92ZSB0aGVtIGZyb20gdGhlIGVsZW1lbnQsICcgKyAnb3IgcGFzcyBhIHN0cmluZyBvciBudW1iZXIgdmFsdWUgdG8ga2VlcCB0aGVtIGluIHRoZSBET00uICcgKyAnRm9yIGRldGFpbHMsIHNlZSBodHRwczovL3JlYWN0anMub3JnL2xpbmsvYXR0cmlidXRlLWJlaGF2aW9yICcsIHVua25vd25Qcm9wU3RyaW5nLCB0eXBlKTtcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcGVydGllcyQyKHR5cGUsIHByb3BzLCBldmVudFJlZ2lzdHJ5KSB7XG4gIGlmIChpc0N1c3RvbUNvbXBvbmVudCh0eXBlLCBwcm9wcykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB3YXJuVW5rbm93blByb3BlcnRpZXModHlwZSwgcHJvcHMsIGV2ZW50UmVnaXN0cnkpO1xufVxuXG52YXIgSVNfRVZFTlRfSEFORExFX05PTl9NQU5BR0VEX05PREUgPSAxO1xudmFyIElTX05PTl9ERUxFR0FURUQgPSAxIDw8IDE7XG52YXIgSVNfQ0FQVFVSRV9QSEFTRSA9IDEgPDwgMjtcbi8vIHNldCB0byBMRUdBQ1lfRkJfU1VQUE9SVC4gTEVHQUNZX0ZCX1NVUFBPUlQgb25seSBnZXRzIHNldCB3aGVuXG4vLyB3ZSBjYWxsIHdpbGxEZWZlckxhdGVyRm9yTGVnYWN5RkJTdXBwb3J0LCB0aHVzIG5vdCBiYWlsaW5nIG91dFxuLy8gd2lsbCByZXN1bHQgaW4gZW5kbGVzcyBjeWNsZXMgbGlrZSBhbiBpbmZpbml0ZSBsb29wLlxuLy8gV2UgYWxzbyBkb24ndCB3YW50IHRvIGRlZmVyIGR1cmluZyBldmVudCByZXBsYXlpbmcuXG5cbnZhciBTSE9VTERfTk9UX1BST0NFU1NfUE9MWUZJTExfRVZFTlRfUExVR0lOUyA9IElTX0VWRU5UX0hBTkRMRV9OT05fTUFOQUdFRF9OT0RFIHwgSVNfTk9OX0RFTEVHQVRFRCB8IElTX0NBUFRVUkVfUEhBU0U7XG5cbi8vIFRoaXMgZXhpc3RzIHRvIGF2b2lkIGNpcmN1bGFyIGRlcGVuZGVuY3kgYmV0d2VlbiBSZWFjdERPTUV2ZW50UmVwbGF5aW5nXG4vLyBhbmQgRE9NUGx1Z2luRXZlbnRTeXN0ZW0uXG52YXIgY3VycmVudFJlcGxheWluZ0V2ZW50ID0gbnVsbDtcbmZ1bmN0aW9uIHNldFJlcGxheWluZ0V2ZW50KGV2ZW50KSB7XG4gIHtcbiAgICBpZiAoY3VycmVudFJlcGxheWluZ0V2ZW50ICE9PSBudWxsKSB7XG4gICAgICBlcnJvcignRXhwZWN0ZWQgY3VycmVudGx5IHJlcGxheWluZyBldmVudCB0byBiZSBudWxsLiBUaGlzIGVycm9yICcgKyAnaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuICB9XG5cbiAgY3VycmVudFJlcGxheWluZ0V2ZW50ID0gZXZlbnQ7XG59XG5mdW5jdGlvbiByZXNldFJlcGxheWluZ0V2ZW50KCkge1xuICB7XG4gICAgaWYgKGN1cnJlbnRSZXBsYXlpbmdFdmVudCA9PT0gbnVsbCkge1xuICAgICAgZXJyb3IoJ0V4cGVjdGVkIGN1cnJlbnRseSByZXBsYXlpbmcgZXZlbnQgdG8gbm90IGJlIG51bGwuIFRoaXMgZXJyb3IgJyArICdpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICB9XG4gIH1cblxuICBjdXJyZW50UmVwbGF5aW5nRXZlbnQgPSBudWxsO1xufVxuZnVuY3Rpb24gaXNSZXBsYXlpbmdFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQgPT09IGN1cnJlbnRSZXBsYXlpbmdFdmVudDtcbn1cblxuLyoqXG4gKiBHZXRzIHRoZSB0YXJnZXQgbm9kZSBmcm9tIGEgbmF0aXZlIGJyb3dzZXIgZXZlbnQgYnkgYWNjb3VudGluZyBmb3JcbiAqIGluY29uc2lzdGVuY2llcyBpbiBicm93c2VyIERPTSBBUElzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge0RPTUV2ZW50VGFyZ2V0fSBUYXJnZXQgbm9kZS5cbiAqL1xuXG5mdW5jdGlvbiBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCkge1xuICAvLyBGYWxsYmFjayB0byBuYXRpdmVFdmVudC5zcmNFbGVtZW50IGZvciBJRTlcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMjUwNlxuICB2YXIgdGFyZ2V0ID0gbmF0aXZlRXZlbnQudGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnNyY0VsZW1lbnQgfHwgd2luZG93OyAvLyBOb3JtYWxpemUgU1ZHIDx1c2U+IGVsZW1lbnQgZXZlbnRzICM0OTYzXG5cbiAgaWYgKHRhcmdldC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCkge1xuICAgIHRhcmdldCA9IHRhcmdldC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudDtcbiAgfSAvLyBTYWZhcmkgbWF5IGZpcmUgZXZlbnRzIG9uIHRleHQgbm9kZXMgKE5vZGUuVEVYVF9OT0RFIGlzIDMpLlxuICAvLyBAc2VlIGh0dHA6Ly93d3cucXVpcmtzbW9kZS5vcmcvanMvZXZlbnRzX3Byb3BlcnRpZXMuaHRtbFxuXG5cbiAgcmV0dXJuIHRhcmdldC5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFID8gdGFyZ2V0LnBhcmVudE5vZGUgOiB0YXJnZXQ7XG59XG5cbnZhciByZXN0b3JlSW1wbCA9IG51bGw7XG52YXIgcmVzdG9yZVRhcmdldCA9IG51bGw7XG52YXIgcmVzdG9yZVF1ZXVlID0gbnVsbDtcblxuZnVuY3Rpb24gcmVzdG9yZVN0YXRlT2ZUYXJnZXQodGFyZ2V0KSB7XG4gIC8vIFdlIHBlcmZvcm0gdGhpcyB0cmFuc2xhdGlvbiBhdCB0aGUgZW5kIG9mIHRoZSBldmVudCBsb29wIHNvIHRoYXQgd2VcbiAgLy8gYWx3YXlzIHJlY2VpdmUgdGhlIGNvcnJlY3QgZmliZXIgaGVyZVxuICB2YXIgaW50ZXJuYWxJbnN0YW5jZSA9IGdldEluc3RhbmNlRnJvbU5vZGUodGFyZ2V0KTtcblxuICBpZiAoIWludGVybmFsSW5zdGFuY2UpIHtcbiAgICAvLyBVbm1vdW50ZWRcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodHlwZW9mIHJlc3RvcmVJbXBsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRSZXN0b3JlSW1wbGVtZW50YXRpb24oKSBuZWVkcyB0byBiZSBjYWxsZWQgdG8gaGFuZGxlIGEgdGFyZ2V0IGZvciBjb250cm9sbGVkICcgKyAnZXZlbnRzLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICB9XG5cbiAgdmFyIHN0YXRlTm9kZSA9IGludGVybmFsSW5zdGFuY2Uuc3RhdGVOb2RlOyAvLyBHdWFyZCBhZ2FpbnN0IEZpYmVyIGJlaW5nIHVubW91bnRlZC5cblxuICBpZiAoc3RhdGVOb2RlKSB7XG4gICAgdmFyIF9wcm9wcyA9IGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUoc3RhdGVOb2RlKTtcblxuICAgIHJlc3RvcmVJbXBsKGludGVybmFsSW5zdGFuY2Uuc3RhdGVOb2RlLCBpbnRlcm5hbEluc3RhbmNlLnR5cGUsIF9wcm9wcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2V0UmVzdG9yZUltcGxlbWVudGF0aW9uKGltcGwpIHtcbiAgcmVzdG9yZUltcGwgPSBpbXBsO1xufVxuZnVuY3Rpb24gZW5xdWV1ZVN0YXRlUmVzdG9yZSh0YXJnZXQpIHtcbiAgaWYgKHJlc3RvcmVUYXJnZXQpIHtcbiAgICBpZiAocmVzdG9yZVF1ZXVlKSB7XG4gICAgICByZXN0b3JlUXVldWUucHVzaCh0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN0b3JlUXVldWUgPSBbdGFyZ2V0XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVzdG9yZVRhcmdldCA9IHRhcmdldDtcbiAgfVxufVxuZnVuY3Rpb24gbmVlZHNTdGF0ZVJlc3RvcmUoKSB7XG4gIHJldHVybiByZXN0b3JlVGFyZ2V0ICE9PSBudWxsIHx8IHJlc3RvcmVRdWV1ZSAhPT0gbnVsbDtcbn1cbmZ1bmN0aW9uIHJlc3RvcmVTdGF0ZUlmTmVlZGVkKCkge1xuICBpZiAoIXJlc3RvcmVUYXJnZXQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgdGFyZ2V0ID0gcmVzdG9yZVRhcmdldDtcbiAgdmFyIHF1ZXVlZFRhcmdldHMgPSByZXN0b3JlUXVldWU7XG4gIHJlc3RvcmVUYXJnZXQgPSBudWxsO1xuICByZXN0b3JlUXVldWUgPSBudWxsO1xuICByZXN0b3JlU3RhdGVPZlRhcmdldCh0YXJnZXQpO1xuXG4gIGlmIChxdWV1ZWRUYXJnZXRzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZWRUYXJnZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN0b3JlU3RhdGVPZlRhcmdldChxdWV1ZWRUYXJnZXRzW2ldKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gdGhlIHJlbmRlcmVyLiBTdWNoIGFzIHdoZW4gd2UncmUgZGlzcGF0Y2hpbmcgZXZlbnRzIG9yIGlmIHRoaXJkIHBhcnR5XG4vLyBsaWJyYXJpZXMgbmVlZCB0byBjYWxsIGJhdGNoZWRVcGRhdGVzLiBFdmVudHVhbGx5LCB0aGlzIEFQSSB3aWxsIGdvIGF3YXkgd2hlblxuLy8gZXZlcnl0aGluZyBpcyBiYXRjaGVkIGJ5IGRlZmF1bHQuIFdlJ2xsIHRoZW4gaGF2ZSBhIHNpbWlsYXIgQVBJIHRvIG9wdC1vdXQgb2Zcbi8vIHNjaGVkdWxlZCB3b3JrIGFuZCBpbnN0ZWFkIGRvIHN5bmNocm9ub3VzIHdvcmsuXG4vLyBEZWZhdWx0c1xuXG52YXIgYmF0Y2hlZFVwZGF0ZXNJbXBsID0gZnVuY3Rpb24gKGZuLCBib29ra2VlcGluZykge1xuICByZXR1cm4gZm4oYm9va2tlZXBpbmcpO1xufTtcblxudmFyIGZsdXNoU3luY0ltcGwgPSBmdW5jdGlvbiAoKSB7fTtcblxudmFyIGlzSW5zaWRlRXZlbnRIYW5kbGVyID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZpbmlzaEV2ZW50SGFuZGxlcigpIHtcbiAgLy8gSGVyZSB3ZSB3YWl0IHVudGlsIGFsbCB1cGRhdGVzIGhhdmUgcHJvcGFnYXRlZCwgd2hpY2ggaXMgaW1wb3J0YW50XG4gIC8vIHdoZW4gdXNpbmcgY29udHJvbGxlZCBjb21wb25lbnRzIHdpdGhpbiBsYXllcnM6XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTY5OFxuICAvLyBUaGVuIHdlIHJlc3RvcmUgc3RhdGUgb2YgYW55IGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICB2YXIgY29udHJvbGxlZENvbXBvbmVudHNIYXZlUGVuZGluZ1VwZGF0ZXMgPSBuZWVkc1N0YXRlUmVzdG9yZSgpO1xuXG4gIGlmIChjb250cm9sbGVkQ29tcG9uZW50c0hhdmVQZW5kaW5nVXBkYXRlcykge1xuICAgIC8vIElmIGEgY29udHJvbGxlZCBldmVudCB3YXMgZmlyZWQsIHdlIG1heSBuZWVkIHRvIHJlc3RvcmUgdGhlIHN0YXRlIG9mXG4gICAgLy8gdGhlIERPTSBub2RlIGJhY2sgdG8gdGhlIGNvbnRyb2xsZWQgdmFsdWUuIFRoaXMgaXMgbmVjZXNzYXJ5IHdoZW4gUmVhY3RcbiAgICAvLyBiYWlscyBvdXQgb2YgdGhlIHVwZGF0ZSB3aXRob3V0IHRvdWNoaW5nIHRoZSBET00uXG4gICAgLy8gVE9ETzogUmVzdG9yZSBzdGF0ZSBpbiB0aGUgbWljcm90YXNrLCBhZnRlciB0aGUgZGlzY3JldGUgdXBkYXRlcyBmbHVzaCxcbiAgICAvLyBpbnN0ZWFkIG9mIGVhcmx5IGZsdXNoaW5nIHRoZW0gaGVyZS5cbiAgICBmbHVzaFN5bmNJbXBsKCk7XG4gICAgcmVzdG9yZVN0YXRlSWZOZWVkZWQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXRjaGVkVXBkYXRlcyhmbiwgYSwgYikge1xuICBpZiAoaXNJbnNpZGVFdmVudEhhbmRsZXIpIHtcbiAgICAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IGluc2lkZSBhbm90aGVyIGJhdGNoLCB3ZSBuZWVkIHRvIHdhaXQgdW50aWwgaXRcbiAgICAvLyBmdWxseSBjb21wbGV0ZXMgYmVmb3JlIHJlc3RvcmluZyBzdGF0ZS5cbiAgICByZXR1cm4gZm4oYSwgYik7XG4gIH1cblxuICBpc0luc2lkZUV2ZW50SGFuZGxlciA9IHRydWU7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gYmF0Y2hlZFVwZGF0ZXNJbXBsKGZuLCBhLCBiKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpc0luc2lkZUV2ZW50SGFuZGxlciA9IGZhbHNlO1xuICAgIGZpbmlzaEV2ZW50SGFuZGxlcigpO1xuICB9XG59IC8vIFRPRE86IFJlcGxhY2Ugd2l0aCBmbHVzaFN5bmNcbmZ1bmN0aW9uIHNldEJhdGNoaW5nSW1wbGVtZW50YXRpb24oX2JhdGNoZWRVcGRhdGVzSW1wbCwgX2Rpc2NyZXRlVXBkYXRlc0ltcGwsIF9mbHVzaFN5bmNJbXBsKSB7XG4gIGJhdGNoZWRVcGRhdGVzSW1wbCA9IF9iYXRjaGVkVXBkYXRlc0ltcGw7XG4gIGZsdXNoU3luY0ltcGwgPSBfZmx1c2hTeW5jSW1wbDtcbn1cblxuZnVuY3Rpb24gaXNJbnRlcmFjdGl2ZSh0YWcpIHtcbiAgcmV0dXJuIHRhZyA9PT0gJ2J1dHRvbicgfHwgdGFnID09PSAnaW5wdXQnIHx8IHRhZyA9PT0gJ3NlbGVjdCcgfHwgdGFnID09PSAndGV4dGFyZWEnO1xufVxuXG5mdW5jdGlvbiBzaG91bGRQcmV2ZW50TW91c2VFdmVudChuYW1lLCB0eXBlLCBwcm9wcykge1xuICBzd2l0Y2ggKG5hbWUpIHtcbiAgICBjYXNlICdvbkNsaWNrJzpcbiAgICBjYXNlICdvbkNsaWNrQ2FwdHVyZSc6XG4gICAgY2FzZSAnb25Eb3VibGVDbGljayc6XG4gICAgY2FzZSAnb25Eb3VibGVDbGlja0NhcHR1cmUnOlxuICAgIGNhc2UgJ29uTW91c2VEb3duJzpcbiAgICBjYXNlICdvbk1vdXNlRG93bkNhcHR1cmUnOlxuICAgIGNhc2UgJ29uTW91c2VNb3ZlJzpcbiAgICBjYXNlICdvbk1vdXNlTW92ZUNhcHR1cmUnOlxuICAgIGNhc2UgJ29uTW91c2VVcCc6XG4gICAgY2FzZSAnb25Nb3VzZVVwQ2FwdHVyZSc6XG4gICAgY2FzZSAnb25Nb3VzZUVudGVyJzpcbiAgICAgIHJldHVybiAhIShwcm9wcy5kaXNhYmxlZCAmJiBpc0ludGVyYWN0aXZlKHR5cGUpKTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IGluc3QgVGhlIGluc3RhbmNlLCB3aGljaCBpcyB0aGUgc291cmNlIG9mIGV2ZW50cy5cbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdpc3RyYXRpb25OYW1lIE5hbWUgb2YgbGlzdGVuZXIgKGUuZy4gYG9uQ2xpY2tgKS5cbiAqIEByZXR1cm4gez9mdW5jdGlvbn0gVGhlIHN0b3JlZCBjYWxsYmFjay5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldExpc3RlbmVyKGluc3QsIHJlZ2lzdHJhdGlvbk5hbWUpIHtcbiAgdmFyIHN0YXRlTm9kZSA9IGluc3Quc3RhdGVOb2RlO1xuXG4gIGlmIChzdGF0ZU5vZGUgPT09IG51bGwpIHtcbiAgICAvLyBXb3JrIGluIHByb2dyZXNzIChleDogb25sb2FkIGV2ZW50cyBpbiBpbmNyZW1lbnRhbCBtb2RlKS5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBwcm9wcyA9IGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUoc3RhdGVOb2RlKTtcblxuICBpZiAocHJvcHMgPT09IG51bGwpIHtcbiAgICAvLyBXb3JrIGluIHByb2dyZXNzLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyID0gcHJvcHNbcmVnaXN0cmF0aW9uTmFtZV07XG5cbiAgaWYgKHNob3VsZFByZXZlbnRNb3VzZUV2ZW50KHJlZ2lzdHJhdGlvbk5hbWUsIGluc3QudHlwZSwgcHJvcHMpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAobGlzdGVuZXIgJiYgdHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgYFwiICsgcmVnaXN0cmF0aW9uTmFtZSArIFwiYCBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLCBpbnN0ZWFkIGdvdCBhIHZhbHVlIG9mIGBcIiArIHR5cGVvZiBsaXN0ZW5lciArIFwiYCB0eXBlLlwiKTtcbiAgfVxuXG4gIHJldHVybiBsaXN0ZW5lcjtcbn1cblxudmFyIHBhc3NpdmVCcm93c2VyRXZlbnRzU3VwcG9ydGVkID0gZmFsc2U7IC8vIENoZWNrIGlmIGJyb3dzZXIgc3VwcG9ydCBldmVudHMgd2l0aCBwYXNzaXZlIGxpc3RlbmVyc1xuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L2FkZEV2ZW50TGlzdGVuZXIjU2FmZWx5X2RldGVjdGluZ19vcHRpb25fc3VwcG9ydFxuXG5pZiAoY2FuVXNlRE9NKSB7XG4gIHRyeSB7XG4gICAgdmFyIG9wdGlvbnMgPSB7fTsgLy8gJEZsb3dGaXhNZTogSWdub3JlIEZsb3cgY29tcGxhaW5pbmcgYWJvdXQgbmVlZGluZyBhIHZhbHVlXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0aW9ucywgJ3Bhc3NpdmUnLCB7XG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0Jywgb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBvcHRpb25zLCBvcHRpb25zKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHBhc3NpdmVCcm93c2VyRXZlbnRzU3VwcG9ydGVkID0gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW52b2tlR3VhcmRlZENhbGxiYWNrUHJvZChuYW1lLCBmdW5jLCBjb250ZXh0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIHZhciBmdW5jQXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMyk7XG5cbiAgdHJ5IHtcbiAgICBmdW5jLmFwcGx5KGNvbnRleHQsIGZ1bmNBcmdzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aGlzLm9uRXJyb3IoZXJyb3IpO1xuICB9XG59XG5cbnZhciBpbnZva2VHdWFyZGVkQ2FsbGJhY2tJbXBsID0gaW52b2tlR3VhcmRlZENhbGxiYWNrUHJvZDtcblxue1xuICAvLyBJbiBERVYgbW9kZSwgd2Ugc3dhcCBvdXQgaW52b2tlR3VhcmRlZENhbGxiYWNrIGZvciBhIHNwZWNpYWwgdmVyc2lvblxuICAvLyB0aGF0IHBsYXlzIG1vcmUgbmljZWx5IHdpdGggdGhlIGJyb3dzZXIncyBEZXZUb29scy4gVGhlIGlkZWEgaXMgdG8gcHJlc2VydmVcbiAgLy8gXCJQYXVzZSBvbiBleGNlcHRpb25zXCIgYmVoYXZpb3IuIEJlY2F1c2UgUmVhY3Qgd3JhcHMgYWxsIHVzZXItcHJvdmlkZWRcbiAgLy8gZnVuY3Rpb25zIGluIGludm9rZUd1YXJkZWRDYWxsYmFjaywgYW5kIHRoZSBwcm9kdWN0aW9uIHZlcnNpb24gb2ZcbiAgLy8gaW52b2tlR3VhcmRlZENhbGxiYWNrIHVzZXMgYSB0cnktY2F0Y2gsIGFsbCB1c2VyIGV4Y2VwdGlvbnMgYXJlIHRyZWF0ZWRcbiAgLy8gbGlrZSBjYXVnaHQgZXhjZXB0aW9ucywgYW5kIHRoZSBEZXZUb29scyB3b24ndCBwYXVzZSB1bmxlc3MgdGhlIGRldmVsb3BlclxuICAvLyB0YWtlcyB0aGUgZXh0cmEgc3RlcCBvZiBlbmFibGluZyBwYXVzZSBvbiBjYXVnaHQgZXhjZXB0aW9ucy4gVGhpcyBpc1xuICAvLyB1bmludHVpdGl2ZSwgdGhvdWdoLCBiZWNhdXNlIGV2ZW4gdGhvdWdoIFJlYWN0IGhhcyBjYXVnaHQgdGhlIGVycm9yLCBmcm9tXG4gIC8vIHRoZSBkZXZlbG9wZXIncyBwZXJzcGVjdGl2ZSwgdGhlIGVycm9yIGlzIHVuY2F1Z2h0LlxuICAvL1xuICAvLyBUbyBwcmVzZXJ2ZSB0aGUgZXhwZWN0ZWQgXCJQYXVzZSBvbiBleGNlcHRpb25zXCIgYmVoYXZpb3IsIHdlIGRvbid0IHVzZSBhXG4gIC8vIHRyeS1jYXRjaCBpbiBERVYuIEluc3RlYWQsIHdlIHN5bmNocm9ub3VzbHkgZGlzcGF0Y2ggYSBmYWtlIGV2ZW50IHRvIGEgZmFrZVxuICAvLyBET00gbm9kZSwgYW5kIGNhbGwgdGhlIHVzZXItcHJvdmlkZWQgY2FsbGJhY2sgZnJvbSBpbnNpZGUgYW4gZXZlbnQgaGFuZGxlclxuICAvLyBmb3IgdGhhdCBmYWtlIGV2ZW50LiBJZiB0aGUgY2FsbGJhY2sgdGhyb3dzLCB0aGUgZXJyb3IgaXMgXCJjYXB0dXJlZFwiIHVzaW5nXG4gIC8vIGEgZ2xvYmFsIGV2ZW50IGhhbmRsZXIuIEJ1dCBiZWNhdXNlIHRoZSBlcnJvciBoYXBwZW5zIGluIGEgZGlmZmVyZW50XG4gIC8vIGV2ZW50IGxvb3AgY29udGV4dCwgaXQgZG9lcyBub3QgaW50ZXJydXB0IHRoZSBub3JtYWwgcHJvZ3JhbSBmbG93LlxuICAvLyBFZmZlY3RpdmVseSwgdGhpcyBnaXZlcyB1cyB0cnktY2F0Y2ggYmVoYXZpb3Igd2l0aG91dCBhY3R1YWxseSB1c2luZ1xuICAvLyB0cnktY2F0Y2guIE5lYXQhXG4gIC8vIENoZWNrIHRoYXQgdGhlIGJyb3dzZXIgc3VwcG9ydHMgdGhlIEFQSXMgd2UgbmVlZCB0byBpbXBsZW1lbnQgb3VyIHNwZWNpYWxcbiAgLy8gREVWIHZlcnNpb24gb2YgaW52b2tlR3VhcmRlZENhbGxiYWNrXG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRpc3BhdGNoRXZlbnQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRXZlbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZmFrZU5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdyZWFjdCcpO1xuXG4gICAgaW52b2tlR3VhcmRlZENhbGxiYWNrSW1wbCA9IGZ1bmN0aW9uIGludm9rZUd1YXJkZWRDYWxsYmFja0RldihuYW1lLCBmdW5jLCBjb250ZXh0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gICAgICAvLyBJZiBkb2N1bWVudCBkb2Vzbid0IGV4aXN0IHdlIGtub3cgZm9yIHN1cmUgd2Ugd2lsbCBjcmFzaCBpbiB0aGlzIG1ldGhvZFxuICAgICAgLy8gd2hlbiB3ZSBjYWxsIGRvY3VtZW50LmNyZWF0ZUV2ZW50KCkuIEhvd2V2ZXIgdGhpcyBjYW4gY2F1c2UgY29uZnVzaW5nXG4gICAgICAvLyBlcnJvcnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9jcmVhdGUtcmVhY3QtYXBwL2lzc3Vlcy8zNDgyXG4gICAgICAvLyBTbyB3ZSBwcmVlbXB0aXZlbHkgdGhyb3cgd2l0aCBhIGJldHRlciBtZXNzYWdlIGluc3RlYWQuXG4gICAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJyB8fCBkb2N1bWVudCA9PT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBgZG9jdW1lbnRgIGdsb2JhbCB3YXMgZGVmaW5lZCB3aGVuIFJlYWN0IHdhcyBpbml0aWFsaXplZCwgYnV0IGlzIG5vdCAnICsgJ2RlZmluZWQgYW55bW9yZS4gVGhpcyBjYW4gaGFwcGVuIGluIGEgdGVzdCBlbnZpcm9ubWVudCBpZiBhIGNvbXBvbmVudCAnICsgJ3NjaGVkdWxlcyBhbiB1cGRhdGUgZnJvbSBhbiBhc3luY2hyb25vdXMgY2FsbGJhY2ssIGJ1dCB0aGUgdGVzdCBoYXMgYWxyZWFkeSAnICsgJ2ZpbmlzaGVkIHJ1bm5pbmcuIFRvIHNvbHZlIHRoaXMsIHlvdSBjYW4gZWl0aGVyIHVubW91bnQgdGhlIGNvbXBvbmVudCBhdCAnICsgJ3RoZSBlbmQgb2YgeW91ciB0ZXN0IChhbmQgZW5zdXJlIHRoYXQgYW55IGFzeW5jaHJvbm91cyBvcGVyYXRpb25zIGdldCAnICsgJ2NhbmNlbGVkIGluIGBjb21wb25lbnRXaWxsVW5tb3VudGApLCBvciB5b3UgY2FuIGNoYW5nZSB0aGUgdGVzdCBpdHNlbGYgJyArICd0byBiZSBhc3luY2hyb25vdXMuJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBldnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICAgIHZhciBkaWRDYWxsID0gZmFsc2U7IC8vIEtlZXBzIHRyYWNrIG9mIHdoZXRoZXIgdGhlIHVzZXItcHJvdmlkZWQgY2FsbGJhY2sgdGhyZXcgYW4gZXJyb3IuIFdlXG4gICAgICAvLyBzZXQgdGhpcyB0byB0cnVlIGF0IHRoZSBiZWdpbm5pbmcsIHRoZW4gc2V0IGl0IHRvIGZhbHNlIHJpZ2h0IGFmdGVyXG4gICAgICAvLyBjYWxsaW5nIHRoZSBmdW5jdGlvbi4gSWYgdGhlIGZ1bmN0aW9uIGVycm9ycywgYGRpZEVycm9yYCB3aWxsIG5ldmVyIGJlXG4gICAgICAvLyBzZXQgdG8gZmFsc2UuIFRoaXMgc3RyYXRlZ3kgd29ya3MgZXZlbiBpZiB0aGUgYnJvd3NlciBpcyBmbGFreSBhbmRcbiAgICAgIC8vIGZhaWxzIHRvIGNhbGwgb3VyIGdsb2JhbCBlcnJvciBoYW5kbGVyLCBiZWNhdXNlIGl0IGRvZXNuJ3QgcmVseSBvblxuICAgICAgLy8gdGhlIGVycm9yIGV2ZW50IGF0IGFsbC5cblxuICAgICAgdmFyIGRpZEVycm9yID0gdHJ1ZTsgLy8gS2VlcHMgdHJhY2sgb2YgdGhlIHZhbHVlIG9mIHdpbmRvdy5ldmVudCBzbyB0aGF0IHdlIGNhbiByZXNldCBpdFxuICAgICAgLy8gZHVyaW5nIHRoZSBjYWxsYmFjayB0byBsZXQgdXNlciBjb2RlIGFjY2VzcyB3aW5kb3cuZXZlbnQgaW4gdGhlXG4gICAgICAvLyBicm93c2VycyB0aGF0IHN1cHBvcnQgaXQuXG5cbiAgICAgIHZhciB3aW5kb3dFdmVudCA9IHdpbmRvdy5ldmVudDsgLy8gS2VlcHMgdHJhY2sgb2YgdGhlIGRlc2NyaXB0b3Igb2Ygd2luZG93LmV2ZW50IHRvIHJlc3RvcmUgaXQgYWZ0ZXIgZXZlbnRcbiAgICAgIC8vIGRpc3BhdGNoaW5nOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzEzNjg4XG5cbiAgICAgIHZhciB3aW5kb3dFdmVudERlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdywgJ2V2ZW50Jyk7XG5cbiAgICAgIGZ1bmN0aW9uIHJlc3RvcmVBZnRlckRpc3BhdGNoKCkge1xuICAgICAgICAvLyBXZSBpbW1lZGlhdGVseSByZW1vdmUgdGhlIGNhbGxiYWNrIGZyb20gZXZlbnQgbGlzdGVuZXJzIHNvIHRoYXRcbiAgICAgICAgLy8gbmVzdGVkIGBpbnZva2VHdWFyZGVkQ2FsbGJhY2tgIGNhbGxzIGRvIG5vdCBjbGFzaC4gT3RoZXJ3aXNlLCBhXG4gICAgICAgIC8vIG5lc3RlZCBjYWxsIHdvdWxkIHRyaWdnZXIgdGhlIGZha2UgZXZlbnQgaGFuZGxlcnMgb2YgYW55IGNhbGwgaGlnaGVyXG4gICAgICAgIC8vIGluIHRoZSBzdGFjay5cbiAgICAgICAgZmFrZU5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBjYWxsQ2FsbGJhY2ssIGZhbHNlKTsgLy8gV2UgY2hlY2sgZm9yIHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnZXZlbnQnKSB0byBwcmV2ZW50IHRoZVxuICAgICAgICAvLyB3aW5kb3cuZXZlbnQgYXNzaWdubWVudCBpbiBib3RoIElFIDw9IDEwIGFzIHRoZXkgdGhyb3cgYW4gZXJyb3JcbiAgICAgICAgLy8gXCJNZW1iZXIgbm90IGZvdW5kXCIgaW4gc3RyaWN0IG1vZGUsIGFuZCBpbiBGaXJlZm94IHdoaWNoIGRvZXMgbm90XG4gICAgICAgIC8vIHN1cHBvcnQgd2luZG93LmV2ZW50LlxuXG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93LmV2ZW50ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuaGFzT3duUHJvcGVydHkoJ2V2ZW50JykpIHtcbiAgICAgICAgICB3aW5kb3cuZXZlbnQgPSB3aW5kb3dFdmVudDtcbiAgICAgICAgfVxuICAgICAgfSAvLyBDcmVhdGUgYW4gZXZlbnQgaGFuZGxlciBmb3Igb3VyIGZha2UgZXZlbnQuIFdlIHdpbGwgc3luY2hyb25vdXNseVxuICAgICAgLy8gZGlzcGF0Y2ggb3VyIGZha2UgZXZlbnQgdXNpbmcgYGRpc3BhdGNoRXZlbnRgLiBJbnNpZGUgdGhlIGhhbmRsZXIsIHdlXG4gICAgICAvLyBjYWxsIHRoZSB1c2VyLXByb3ZpZGVkIGNhbGxiYWNrLlxuXG5cbiAgICAgIHZhciBmdW5jQXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMyk7XG5cbiAgICAgIGZ1bmN0aW9uIGNhbGxDYWxsYmFjaygpIHtcbiAgICAgICAgZGlkQ2FsbCA9IHRydWU7XG4gICAgICAgIHJlc3RvcmVBZnRlckRpc3BhdGNoKCk7XG4gICAgICAgIGZ1bmMuYXBwbHkoY29udGV4dCwgZnVuY0FyZ3MpO1xuICAgICAgICBkaWRFcnJvciA9IGZhbHNlO1xuICAgICAgfSAvLyBDcmVhdGUgYSBnbG9iYWwgZXJyb3IgZXZlbnQgaGFuZGxlci4gV2UgdXNlIHRoaXMgdG8gY2FwdHVyZSB0aGUgdmFsdWVcbiAgICAgIC8vIHRoYXQgd2FzIHRocm93bi4gSXQncyBwb3NzaWJsZSB0aGF0IHRoaXMgZXJyb3IgaGFuZGxlciB3aWxsIGZpcmUgbW9yZVxuICAgICAgLy8gdGhhbiBvbmNlOyBmb3IgZXhhbXBsZSwgaWYgbm9uLVJlYWN0IGNvZGUgYWxzbyBjYWxscyBgZGlzcGF0Y2hFdmVudGBcbiAgICAgIC8vIGFuZCBhIGhhbmRsZXIgZm9yIHRoYXQgZXZlbnQgdGhyb3dzLiBXZSBzaG91bGQgYmUgcmVzaWxpZW50IHRvIG1vc3Qgb2ZcbiAgICAgIC8vIHRob3NlIGNhc2VzLiBFdmVuIGlmIG91ciBlcnJvciBldmVudCBoYW5kbGVyIGZpcmVzIG1vcmUgdGhhbiBvbmNlLCB0aGVcbiAgICAgIC8vIGxhc3QgZXJyb3IgZXZlbnQgaXMgYWx3YXlzIHVzZWQuIElmIHRoZSBjYWxsYmFjayBhY3R1YWxseSBkb2VzIGVycm9yLFxuICAgICAgLy8gd2Uga25vdyB0aGF0IHRoZSBsYXN0IGVycm9yIGV2ZW50IGlzIHRoZSBjb3JyZWN0IG9uZSwgYmVjYXVzZSBpdCdzIG5vdFxuICAgICAgLy8gcG9zc2libGUgZm9yIGFueXRoaW5nIGVsc2UgdG8gaGF2ZSBoYXBwZW5lZCBpbiBiZXR3ZWVuIG91ciBjYWxsYmFja1xuICAgICAgLy8gZXJyb3JpbmcgYW5kIHRoZSBjb2RlIHRoYXQgZm9sbG93cyB0aGUgYGRpc3BhdGNoRXZlbnRgIGNhbGwgYmVsb3cuIElmXG4gICAgICAvLyB0aGUgY2FsbGJhY2sgZG9lc24ndCBlcnJvciwgYnV0IHRoZSBlcnJvciBldmVudCB3YXMgZmlyZWQsIHdlIGtub3cgdG9cbiAgICAgIC8vIGlnbm9yZSBpdCBiZWNhdXNlIGBkaWRFcnJvcmAgd2lsbCBiZSBmYWxzZSwgYXMgZGVzY3JpYmVkIGFib3ZlLlxuXG5cbiAgICAgIHZhciBlcnJvcjsgLy8gVXNlIHRoaXMgdG8gdHJhY2sgd2hldGhlciB0aGUgZXJyb3IgZXZlbnQgaXMgZXZlciBjYWxsZWQuXG5cbiAgICAgIHZhciBkaWRTZXRFcnJvciA9IGZhbHNlO1xuICAgICAgdmFyIGlzQ3Jvc3NPcmlnaW5FcnJvciA9IGZhbHNlO1xuXG4gICAgICBmdW5jdGlvbiBoYW5kbGVXaW5kb3dFcnJvcihldmVudCkge1xuICAgICAgICBlcnJvciA9IGV2ZW50LmVycm9yO1xuICAgICAgICBkaWRTZXRFcnJvciA9IHRydWU7XG5cbiAgICAgICAgaWYgKGVycm9yID09PSBudWxsICYmIGV2ZW50LmNvbG5vID09PSAwICYmIGV2ZW50LmxpbmVubyA9PT0gMCkge1xuICAgICAgICAgIGlzQ3Jvc3NPcmlnaW5FcnJvciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgIC8vIFNvbWUgb3RoZXIgZXJyb3IgaGFuZGxlciBoYXMgcHJldmVudGVkIGRlZmF1bHQuXG4gICAgICAgICAgLy8gQnJvd3NlcnMgc2lsZW5jZSB0aGUgZXJyb3IgcmVwb3J0IGlmIHRoaXMgaGFwcGVucy5cbiAgICAgICAgICAvLyBXZSdsbCByZW1lbWJlciB0aGlzIHRvIGxhdGVyIGRlY2lkZSB3aGV0aGVyIHRvIGxvZyBpdCBvciBub3QuXG4gICAgICAgICAgaWYgKGVycm9yICE9IG51bGwgJiYgdHlwZW9mIGVycm9yID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgZXJyb3IuX3N1cHByZXNzTG9nZ2luZyA9IHRydWU7XG4gICAgICAgICAgICB9IGNhdGNoIChpbm5lcikgey8vIElnbm9yZS5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gLy8gQ3JlYXRlIGEgZmFrZSBldmVudCB0eXBlLlxuXG5cbiAgICAgIHZhciBldnRUeXBlID0gXCJyZWFjdC1cIiArIChuYW1lID8gbmFtZSA6ICdpbnZva2VndWFyZGVkY2FsbGJhY2snKTsgLy8gQXR0YWNoIG91ciBldmVudCBoYW5kbGVyc1xuXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBoYW5kbGVXaW5kb3dFcnJvcik7XG4gICAgICBmYWtlTm9kZS5hZGRFdmVudExpc3RlbmVyKGV2dFR5cGUsIGNhbGxDYWxsYmFjaywgZmFsc2UpOyAvLyBTeW5jaHJvbm91c2x5IGRpc3BhdGNoIG91ciBmYWtlIGV2ZW50LiBJZiB0aGUgdXNlci1wcm92aWRlZCBmdW5jdGlvblxuICAgICAgLy8gZXJyb3JzLCBpdCB3aWxsIHRyaWdnZXIgb3VyIGdsb2JhbCBlcnJvciBoYW5kbGVyLlxuXG4gICAgICBldnQuaW5pdEV2ZW50KGV2dFR5cGUsIGZhbHNlLCBmYWxzZSk7XG4gICAgICBmYWtlTm9kZS5kaXNwYXRjaEV2ZW50KGV2dCk7XG5cbiAgICAgIGlmICh3aW5kb3dFdmVudERlc2NyaXB0b3IpIHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2V2ZW50Jywgd2luZG93RXZlbnREZXNjcmlwdG9yKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRpZENhbGwgJiYgZGlkRXJyb3IpIHtcbiAgICAgICAgaWYgKCFkaWRTZXRFcnJvcikge1xuICAgICAgICAgIC8vIFRoZSBjYWxsYmFjayBlcnJvcmVkLCBidXQgdGhlIGVycm9yIGV2ZW50IG5ldmVyIGZpcmVkLlxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1pbnRlcm5hbC9wcm9kLWVycm9yLWNvZGVzXG4gICAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ0FuIGVycm9yIHdhcyB0aHJvd24gaW5zaWRlIG9uZSBvZiB5b3VyIGNvbXBvbmVudHMsIGJ1dCBSZWFjdCAnICsgXCJkb2Vzbid0IGtub3cgd2hhdCBpdCB3YXMuIFRoaXMgaXMgbGlrZWx5IGR1ZSB0byBicm93c2VyIFwiICsgJ2ZsYWtpbmVzcy4gUmVhY3QgZG9lcyBpdHMgYmVzdCB0byBwcmVzZXJ2ZSB0aGUgXCJQYXVzZSBvbiAnICsgJ2V4Y2VwdGlvbnNcIiBiZWhhdmlvciBvZiB0aGUgRGV2VG9vbHMsIHdoaWNoIHJlcXVpcmVzIHNvbWUgJyArIFwiREVWLW1vZGUgb25seSB0cmlja3MuIEl0J3MgcG9zc2libGUgdGhhdCB0aGVzZSBkb24ndCB3b3JrIGluIFwiICsgJ3lvdXIgYnJvd3Nlci4gVHJ5IHRyaWdnZXJpbmcgdGhlIGVycm9yIGluIHByb2R1Y3Rpb24gbW9kZSwgJyArICdvciBzd2l0Y2hpbmcgdG8gYSBtb2Rlcm4gYnJvd3Nlci4gSWYgeW91IHN1c3BlY3QgdGhhdCB0aGlzIGlzICcgKyAnYWN0dWFsbHkgYW4gaXNzdWUgd2l0aCBSZWFjdCwgcGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNDcm9zc09yaWdpbkVycm9yKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL3Byb2QtZXJyb3ItY29kZXNcbiAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihcIkEgY3Jvc3Mtb3JpZ2luIGVycm9yIHdhcyB0aHJvd24uIFJlYWN0IGRvZXNuJ3QgaGF2ZSBhY2Nlc3MgdG8gXCIgKyAndGhlIGFjdHVhbCBlcnJvciBvYmplY3QgaW4gZGV2ZWxvcG1lbnQuICcgKyAnU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9jcm9zc29yaWdpbi1lcnJvciBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMub25FcnJvcihlcnJvcik7XG4gICAgICB9IC8vIFJlbW92ZSBvdXIgZXZlbnQgbGlzdGVuZXJzXG5cblxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Vycm9yJywgaGFuZGxlV2luZG93RXJyb3IpO1xuXG4gICAgICBpZiAoIWRpZENhbGwpIHtcbiAgICAgICAgLy8gU29tZXRoaW5nIHdlbnQgcmVhbGx5IHdyb25nLCBhbmQgb3VyIGV2ZW50IHdhcyBub3QgZGlzcGF0Y2hlZC5cbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNjczNFxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE2NTg1XG4gICAgICAgIC8vIEZhbGwgYmFjayB0byB0aGUgcHJvZHVjdGlvbiBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgcmVzdG9yZUFmdGVyRGlzcGF0Y2goKTtcbiAgICAgICAgcmV0dXJuIGludm9rZUd1YXJkZWRDYWxsYmFja1Byb2QuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG59XG5cbnZhciBpbnZva2VHdWFyZGVkQ2FsbGJhY2tJbXBsJDEgPSBpbnZva2VHdWFyZGVkQ2FsbGJhY2tJbXBsO1xuXG52YXIgaGFzRXJyb3IgPSBmYWxzZTtcbnZhciBjYXVnaHRFcnJvciA9IG51bGw7IC8vIFVzZWQgYnkgZXZlbnQgc3lzdGVtIHRvIGNhcHR1cmUvcmV0aHJvdyB0aGUgZmlyc3QgZXJyb3IuXG5cbnZhciBoYXNSZXRocm93RXJyb3IgPSBmYWxzZTtcbnZhciByZXRocm93RXJyb3IgPSBudWxsO1xudmFyIHJlcG9ydGVyID0ge1xuICBvbkVycm9yOiBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBoYXNFcnJvciA9IHRydWU7XG4gICAgY2F1Z2h0RXJyb3IgPSBlcnJvcjtcbiAgfVxufTtcbi8qKlxuICogQ2FsbCBhIGZ1bmN0aW9uIHdoaWxlIGd1YXJkaW5nIGFnYWluc3QgZXJyb3JzIHRoYXQgaGFwcGVucyB3aXRoaW4gaXQuXG4gKiBSZXR1cm5zIGFuIGVycm9yIGlmIGl0IHRocm93cywgb3RoZXJ3aXNlIG51bGwuXG4gKlxuICogSW4gcHJvZHVjdGlvbiwgdGhpcyBpcyBpbXBsZW1lbnRlZCB1c2luZyBhIHRyeS1jYXRjaC4gVGhlIHJlYXNvbiB3ZSBkb24ndFxuICogdXNlIGEgdHJ5LWNhdGNoIGRpcmVjdGx5IGlzIHNvIHRoYXQgd2UgY2FuIHN3YXAgb3V0IGEgZGlmZmVyZW50XG4gKiBpbXBsZW1lbnRhdGlvbiBpbiBERVYgbW9kZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBvZiB0aGUgZ3VhcmQgdG8gdXNlIGZvciBsb2dnaW5nIG9yIGRlYnVnZ2luZ1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaW52b2tlXG4gKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gdXNlIHdoZW4gY2FsbGluZyB0aGUgZnVuY3Rpb25cbiAqIEBwYXJhbSB7Li4uKn0gYXJncyBBcmd1bWVudHMgZm9yIGZ1bmN0aW9uXG4gKi9cblxuZnVuY3Rpb24gaW52b2tlR3VhcmRlZENhbGxiYWNrKG5hbWUsIGZ1bmMsIGNvbnRleHQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaGFzRXJyb3IgPSBmYWxzZTtcbiAgY2F1Z2h0RXJyb3IgPSBudWxsO1xuICBpbnZva2VHdWFyZGVkQ2FsbGJhY2tJbXBsJDEuYXBwbHkocmVwb3J0ZXIsIGFyZ3VtZW50cyk7XG59XG4vKipcbiAqIFNhbWUgYXMgaW52b2tlR3VhcmRlZENhbGxiYWNrLCBidXQgaW5zdGVhZCBvZiByZXR1cm5pbmcgYW4gZXJyb3IsIGl0IHN0b3Jlc1xuICogaXQgaW4gYSBnbG9iYWwgc28gaXQgY2FuIGJlIHJldGhyb3duIGJ5IGByZXRocm93Q2F1Z2h0RXJyb3JgIGxhdGVyLlxuICogVE9ETzogU2VlIGlmIGNhdWdodEVycm9yIGFuZCByZXRocm93RXJyb3IgY2FuIGJlIHVuaWZpZWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgb2YgdGhlIGd1YXJkIHRvIHVzZSBmb3IgbG9nZ2luZyBvciBkZWJ1Z2dpbmdcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZVxuICogQHBhcmFtIHsqfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIHVzZSB3aGVuIGNhbGxpbmcgdGhlIGZ1bmN0aW9uXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MgQXJndW1lbnRzIGZvciBmdW5jdGlvblxuICovXG5cbmZ1bmN0aW9uIGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcihuYW1lLCBmdW5jLCBjb250ZXh0LCBhLCBiLCBjLCBkLCBlLCBmKSB7XG4gIGludm9rZUd1YXJkZWRDYWxsYmFjay5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gIGlmIChoYXNFcnJvcikge1xuICAgIHZhciBlcnJvciA9IGNsZWFyQ2F1Z2h0RXJyb3IoKTtcblxuICAgIGlmICghaGFzUmV0aHJvd0Vycm9yKSB7XG4gICAgICBoYXNSZXRocm93RXJyb3IgPSB0cnVlO1xuICAgICAgcmV0aHJvd0Vycm9yID0gZXJyb3I7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIER1cmluZyBleGVjdXRpb24gb2YgZ3VhcmRlZCBmdW5jdGlvbnMgd2Ugd2lsbCBjYXB0dXJlIHRoZSBmaXJzdCBlcnJvciB3aGljaFxuICogd2Ugd2lsbCByZXRocm93IHRvIGJlIGhhbmRsZWQgYnkgdGhlIHRvcCBsZXZlbCBlcnJvciBoYW5kbGVyLlxuICovXG5cbmZ1bmN0aW9uIHJldGhyb3dDYXVnaHRFcnJvcigpIHtcbiAgaWYgKGhhc1JldGhyb3dFcnJvcikge1xuICAgIHZhciBlcnJvciA9IHJldGhyb3dFcnJvcjtcbiAgICBoYXNSZXRocm93RXJyb3IgPSBmYWxzZTtcbiAgICByZXRocm93RXJyb3IgPSBudWxsO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59XG5mdW5jdGlvbiBoYXNDYXVnaHRFcnJvcigpIHtcbiAgcmV0dXJuIGhhc0Vycm9yO1xufVxuZnVuY3Rpb24gY2xlYXJDYXVnaHRFcnJvcigpIHtcbiAgaWYgKGhhc0Vycm9yKSB7XG4gICAgdmFyIGVycm9yID0gY2F1Z2h0RXJyb3I7XG4gICAgaGFzRXJyb3IgPSBmYWxzZTtcbiAgICBjYXVnaHRFcnJvciA9IG51bGw7XG4gICAgcmV0dXJuIGVycm9yO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJDYXVnaHRFcnJvciB3YXMgY2FsbGVkIGJ1dCBubyBlcnJvciB3YXMgY2FwdHVyZWQuIFRoaXMgZXJyb3IgJyArICdpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgfVxufVxuXG4vKipcbiAqIGBSZWFjdEluc3RhbmNlTWFwYCBtYWludGFpbnMgYSBtYXBwaW5nIGZyb20gYSBwdWJsaWMgZmFjaW5nIHN0YXRlZnVsXG4gKiBpbnN0YW5jZSAoa2V5KSBhbmQgdGhlIGludGVybmFsIHJlcHJlc2VudGF0aW9uICh2YWx1ZSkuIFRoaXMgYWxsb3dzIHB1YmxpY1xuICogbWV0aG9kcyB0byBhY2NlcHQgdGhlIHVzZXIgZmFjaW5nIGluc3RhbmNlIGFzIGFuIGFyZ3VtZW50IGFuZCBtYXAgdGhlbSBiYWNrXG4gKiB0byBpbnRlcm5hbCBtZXRob2RzLlxuICpcbiAqIE5vdGUgdGhhdCB0aGlzIG1vZHVsZSBpcyBjdXJyZW50bHkgc2hhcmVkIGFuZCBhc3N1bWVkIHRvIGJlIHN0YXRlbGVzcy5cbiAqIElmIHRoaXMgYmVjb21lcyBhbiBhY3R1YWwgTWFwLCB0aGF0IHdpbGwgYnJlYWsuXG4gKi9cbmZ1bmN0aW9uIGdldChrZXkpIHtcbiAgcmV0dXJuIGtleS5fcmVhY3RJbnRlcm5hbHM7XG59XG5mdW5jdGlvbiBoYXMoa2V5KSB7XG4gIHJldHVybiBrZXkuX3JlYWN0SW50ZXJuYWxzICE9PSB1bmRlZmluZWQ7XG59XG5mdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICBrZXkuX3JlYWN0SW50ZXJuYWxzID0gdmFsdWU7XG59XG5cbi8vIERvbid0IGNoYW5nZSB0aGVzZSB0d28gdmFsdWVzLiBUaGV5J3JlIHVzZWQgYnkgUmVhY3QgRGV2IFRvb2xzLlxudmFyIE5vRmxhZ3MgPVxuLyogICAgICAgICAgICAgICAgICAgICAgKi9cbjA7XG52YXIgUGVyZm9ybWVkV29yayA9XG4vKiAgICAgICAgICAgICAgICAqL1xuMTsgLy8gWW91IGNhbiBjaGFuZ2UgdGhlIHJlc3QgKGFuZCBhZGQgbW9yZSkuXG5cbnZhciBQbGFjZW1lbnQgPVxuLyogICAgICAgICAgICAgICAgICAgICovXG4yO1xudmFyIFVwZGF0ZSA9XG4vKiAgICAgICAgICAgICAgICAgICAgICAgKi9cbjQ7XG52YXIgQ2hpbGREZWxldGlvbiA9XG4vKiAgICAgICAgICAgICAgICAqL1xuMTY7XG52YXIgQ29udGVudFJlc2V0ID1cbi8qICAgICAgICAgICAgICAgICAqL1xuMzI7XG52YXIgQ2FsbGJhY2sgPVxuLyogICAgICAgICAgICAgICAgICAgICAqL1xuNjQ7XG52YXIgRGlkQ2FwdHVyZSA9XG4vKiAgICAgICAgICAgICAgICAgICAqL1xuMTI4O1xudmFyIEZvcmNlQ2xpZW50UmVuZGVyID1cbi8qICAgICAgICAgICAgKi9cbjI1NjtcbnZhciBSZWYgPVxuLyogICAgICAgICAgICAgICAgICAgICAgICAgICovXG41MTI7XG52YXIgU25hcHNob3QgPVxuLyogICAgICAgICAgICAgICAgICAgICAqL1xuMTAyNDtcbnZhciBQYXNzaXZlID1cbi8qICAgICAgICAgICAgICAgICAgICAgICovXG4yMDQ4O1xudmFyIEh5ZHJhdGluZyA9XG4vKiAgICAgICAgICAgICAgICAgICAgKi9cbjQwOTY7XG52YXIgVmlzaWJpbGl0eSA9XG4vKiAgICAgICAgICAgICAgICAgICAqL1xuODE5MjtcbnZhciBTdG9yZUNvbnNpc3RlbmN5ID1cbi8qICAgICAgICAgICAgICovXG4xNjM4NDtcbnZhciBMaWZlY3ljbGVFZmZlY3RNYXNrID0gUGFzc2l2ZSB8IFVwZGF0ZSB8IENhbGxiYWNrIHwgUmVmIHwgU25hcHNob3QgfCBTdG9yZUNvbnNpc3RlbmN5OyAvLyBVbmlvbiBvZiBhbGwgY29tbWl0IGZsYWdzIChmbGFncyB3aXRoIHRoZSBsaWZldGltZSBvZiBhIHBhcnRpY3VsYXIgY29tbWl0KVxuXG52YXIgSG9zdEVmZmVjdE1hc2sgPVxuLyogICAgICAgICAgICAgICAqL1xuMzI3Njc7IC8vIFRoZXNlIGFyZSBub3QgcmVhbGx5IHNpZGUgZWZmZWN0cywgYnV0IHdlIHN0aWxsIHJldXNlIHRoaXMgZmllbGQuXG5cbnZhciBJbmNvbXBsZXRlID1cbi8qICAgICAgICAgICAgICAgICAgICovXG4zMjc2ODtcbnZhciBTaG91bGRDYXB0dXJlID1cbi8qICAgICAgICAgICAgICAgICovXG42NTUzNjtcbnZhciBGb3JjZVVwZGF0ZUZvckxlZ2FjeVN1c3BlbnNlID1cbi8qICovXG4xMzEwNzI7XG52YXIgRm9ya2VkID1cbi8qICAgICAgICAgICAgICAgICAgICAgICAqL1xuMTA0ODU3NjsgLy8gU3RhdGljIHRhZ3MgZGVzY3JpYmUgYXNwZWN0cyBvZiBhIGZpYmVyIHRoYXQgYXJlIG5vdCBzcGVjaWZpYyB0byBhIHJlbmRlcixcbi8vIGUuZy4gYSBmaWJlciB1c2VzIGEgcGFzc2l2ZSBlZmZlY3QgKGV2ZW4gaWYgdGhlcmUgYXJlIG5vIHVwZGF0ZXMgb24gdGhpcyBwYXJ0aWN1bGFyIHJlbmRlcikuXG4vLyBUaGlzIGVuYWJsZXMgdXMgdG8gZGVmZXIgbW9yZSB3b3JrIGluIHRoZSB1bm1vdW50IGNhc2UsXG4vLyBzaW5jZSB3ZSBjYW4gZGVmZXIgdHJhdmVyc2luZyB0aGUgdHJlZSBkdXJpbmcgbGF5b3V0IHRvIGxvb2sgZm9yIFBhc3NpdmUgZWZmZWN0cyxcbi8vIGFuZCBpbnN0ZWFkIHJlbHkgb24gdGhlIHN0YXRpYyBmbGFnIGFzIGEgc2lnbmFsIHRoYXQgdGhlcmUgbWF5IGJlIGNsZWFudXAgd29yay5cblxudmFyIFJlZlN0YXRpYyA9XG4vKiAgICAgICAgICAgICAgICAgICAgKi9cbjIwOTcxNTI7XG52YXIgTGF5b3V0U3RhdGljID1cbi8qICAgICAgICAgICAgICAgICAqL1xuNDE5NDMwNDtcbnZhciBQYXNzaXZlU3RhdGljID1cbi8qICAgICAgICAgICAgICAgICovXG44Mzg4NjA4OyAvLyBUaGVzZSBmbGFncyBhbGxvdyB1cyB0byB0cmF2ZXJzZSB0byBmaWJlcnMgdGhhdCBoYXZlIGVmZmVjdHMgb24gbW91bnRcbi8vIHdpdGhvdXQgdHJhdmVyc2luZyB0aGUgZW50aXJlIHRyZWUgYWZ0ZXIgZXZlcnkgY29tbWl0IGZvclxuLy8gZG91YmxlIGludm9raW5nXG5cbnZhciBNb3VudExheW91dERldiA9XG4vKiAgICAgICAgICAgICAgICovXG4xNjc3NzIxNjtcbnZhciBNb3VudFBhc3NpdmVEZXYgPVxuLyogICAgICAgICAgICAgICovXG4zMzU1NDQzMjsgLy8gR3JvdXBzIG9mIGZsYWdzIHRoYXQgYXJlIHVzZWQgaW4gdGhlIGNvbW1pdCBwaGFzZSB0byBza2lwIG92ZXIgdHJlZXMgdGhhdFxuLy8gZG9uJ3QgY29udGFpbiBlZmZlY3RzLCBieSBjaGVja2luZyBzdWJ0cmVlRmxhZ3MuXG5cbnZhciBCZWZvcmVNdXRhdGlvbk1hc2sgPSAvLyBUT0RPOiBSZW1vdmUgVXBkYXRlIGZsYWcgZnJvbSBiZWZvcmUgbXV0YXRpb24gcGhhc2UgYnkgcmUtbGFuZGluZyBWaXNpYmlsaXR5XG4vLyBmbGFnIGxvZ2ljIChzZWUgIzIwMDQzKVxuVXBkYXRlIHwgU25hcHNob3QgfCAoIDApO1xudmFyIE11dGF0aW9uTWFzayA9IFBsYWNlbWVudCB8IFVwZGF0ZSB8IENoaWxkRGVsZXRpb24gfCBDb250ZW50UmVzZXQgfCBSZWYgfCBIeWRyYXRpbmcgfCBWaXNpYmlsaXR5O1xudmFyIExheW91dE1hc2sgPSBVcGRhdGUgfCBDYWxsYmFjayB8IFJlZiB8IFZpc2liaWxpdHk7IC8vIFRPRE86IFNwbGl0IGludG8gUGFzc2l2ZU1vdW50TWFzayBhbmQgUGFzc2l2ZVVubW91bnRNYXNrXG5cbnZhciBQYXNzaXZlTWFzayA9IFBhc3NpdmUgfCBDaGlsZERlbGV0aW9uOyAvLyBVbmlvbiBvZiB0YWdzIHRoYXQgZG9uJ3QgZ2V0IHJlc2V0IG9uIGNsb25lcy5cbi8vIFRoaXMgYWxsb3dzIGNlcnRhaW4gY29uY2VwdHMgdG8gcGVyc2lzdCB3aXRob3V0IHJlY2FsY3VsYXRpbmcgdGhlbSxcbi8vIGUuZy4gd2hldGhlciBhIHN1YnRyZWUgY29udGFpbnMgcGFzc2l2ZSBlZmZlY3RzIG9yIHBvcnRhbHMuXG5cbnZhciBTdGF0aWNNYXNrID0gTGF5b3V0U3RhdGljIHwgUGFzc2l2ZVN0YXRpYyB8IFJlZlN0YXRpYztcblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50T3duZXI7XG5mdW5jdGlvbiBnZXROZWFyZXN0TW91bnRlZEZpYmVyKGZpYmVyKSB7XG4gIHZhciBub2RlID0gZmliZXI7XG4gIHZhciBuZWFyZXN0TW91bnRlZCA9IGZpYmVyO1xuXG4gIGlmICghZmliZXIuYWx0ZXJuYXRlKSB7XG4gICAgLy8gSWYgdGhlcmUgaXMgbm8gYWx0ZXJuYXRlLCB0aGlzIG1pZ2h0IGJlIGEgbmV3IHRyZWUgdGhhdCBpc24ndCBpbnNlcnRlZFxuICAgIC8vIHlldC4gSWYgaXQgaXMsIHRoZW4gaXQgd2lsbCBoYXZlIGEgcGVuZGluZyBpbnNlcnRpb24gZWZmZWN0IG9uIGl0LlxuICAgIHZhciBuZXh0Tm9kZSA9IG5vZGU7XG5cbiAgICBkbyB7XG4gICAgICBub2RlID0gbmV4dE5vZGU7XG5cbiAgICAgIGlmICgobm9kZS5mbGFncyAmIChQbGFjZW1lbnQgfCBIeWRyYXRpbmcpKSAhPT0gTm9GbGFncykge1xuICAgICAgICAvLyBUaGlzIGlzIGFuIGluc2VydGlvbiBvciBpbi1wcm9ncmVzcyBoeWRyYXRpb24uIFRoZSBuZWFyZXN0IHBvc3NpYmxlXG4gICAgICAgIC8vIG1vdW50ZWQgZmliZXIgaXMgdGhlIHBhcmVudCBidXQgd2UgbmVlZCB0byBjb250aW51ZSB0byBmaWd1cmUgb3V0XG4gICAgICAgIC8vIGlmIHRoYXQgb25lIGlzIHN0aWxsIG1vdW50ZWQuXG4gICAgICAgIG5lYXJlc3RNb3VudGVkID0gbm9kZS5yZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG5leHROb2RlID0gbm9kZS5yZXR1cm47XG4gICAgfSB3aGlsZSAobmV4dE5vZGUpO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChub2RlLnJldHVybikge1xuICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmIChub2RlLnRhZyA9PT0gSG9zdFJvb3QpIHtcbiAgICAvLyBUT0RPOiBDaGVjayBpZiB0aGlzIHdhcyBhIG5lc3RlZCBIb3N0Um9vdCB3aGVuIHVzZWQgd2l0aFxuICAgIC8vIHJlbmRlckNvbnRhaW5lckludG9TdWJ0cmVlLlxuICAgIHJldHVybiBuZWFyZXN0TW91bnRlZDtcbiAgfSAvLyBJZiB3ZSBkaWRuJ3QgaGl0IHRoZSByb290LCB0aGF0IG1lYW5zIHRoYXQgd2UncmUgaW4gYW4gZGlzY29ubmVjdGVkIHRyZWVcbiAgLy8gdGhhdCBoYXMgYmVlbiB1bm1vdW50ZWQuXG5cblxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGdldFN1c3BlbnNlSW5zdGFuY2VGcm9tRmliZXIoZmliZXIpIHtcbiAgaWYgKGZpYmVyLnRhZyA9PT0gU3VzcGVuc2VDb21wb25lbnQpIHtcbiAgICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGZpYmVyLm1lbW9pemVkU3RhdGU7XG5cbiAgICBpZiAoc3VzcGVuc2VTdGF0ZSA9PT0gbnVsbCkge1xuICAgICAgdmFyIGN1cnJlbnQgPSBmaWJlci5hbHRlcm5hdGU7XG5cbiAgICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHN1c3BlbnNlU3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHN1c3BlbnNlU3RhdGUgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBzdXNwZW5zZVN0YXRlLmRlaHlkcmF0ZWQ7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBnZXRDb250YWluZXJGcm9tRmliZXIoZmliZXIpIHtcbiAgcmV0dXJuIGZpYmVyLnRhZyA9PT0gSG9zdFJvb3QgPyBmaWJlci5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyA6IG51bGw7XG59XG5mdW5jdGlvbiBpc0ZpYmVyTW91bnRlZChmaWJlcikge1xuICByZXR1cm4gZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcihmaWJlcikgPT09IGZpYmVyO1xufVxuZnVuY3Rpb24gaXNNb3VudGVkKGNvbXBvbmVudCkge1xuICB7XG4gICAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcblxuICAgIGlmIChvd25lciAhPT0gbnVsbCAmJiBvd25lci50YWcgPT09IENsYXNzQ29tcG9uZW50KSB7XG4gICAgICB2YXIgb3duZXJGaWJlciA9IG93bmVyO1xuICAgICAgdmFyIGluc3RhbmNlID0gb3duZXJGaWJlci5zdGF0ZU5vZGU7XG5cbiAgICAgIGlmICghaW5zdGFuY2UuX3dhcm5lZEFib3V0UmVmc0luUmVuZGVyKSB7XG4gICAgICAgIGVycm9yKCclcyBpcyBhY2Nlc3NpbmcgaXNNb3VudGVkIGluc2lkZSBpdHMgcmVuZGVyKCkgZnVuY3Rpb24uICcgKyAncmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCAnICsgJ25ldmVyIGFjY2VzcyBzb21ldGhpbmcgdGhhdCByZXF1aXJlcyBzdGFsZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzICcgKyAncmVuZGVyLCBzdWNoIGFzIHJlZnMuIE1vdmUgdGhpcyBsb2dpYyB0byBjb21wb25lbnREaWRNb3VudCBhbmQgJyArICdjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC4nLCBnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKG93bmVyRmliZXIpIHx8ICdBIGNvbXBvbmVudCcpO1xuICAgICAgfVxuXG4gICAgICBpbnN0YW5jZS5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaWJlciA9IGdldChjb21wb25lbnQpO1xuXG4gIGlmICghZmliZXIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcihmaWJlcikgPT09IGZpYmVyO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRJc01vdW50ZWQoZmliZXIpIHtcbiAgaWYgKGdldE5lYXJlc3RNb3VudGVkRmliZXIoZmliZXIpICE9PSBmaWJlcikge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgbm9kZSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoKGZpYmVyKSB7XG4gIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG5cbiAgaWYgKCFhbHRlcm5hdGUpIHtcbiAgICAvLyBJZiB0aGVyZSBpcyBubyBhbHRlcm5hdGUsIHRoZW4gd2Ugb25seSBuZWVkIHRvIGNoZWNrIGlmIGl0IGlzIG1vdW50ZWQuXG4gICAgdmFyIG5lYXJlc3RNb3VudGVkID0gZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcihmaWJlcik7XG5cbiAgICBpZiAobmVhcmVzdE1vdW50ZWQgPT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgbm9kZSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LicpO1xuICAgIH1cblxuICAgIGlmIChuZWFyZXN0TW91bnRlZCAhPT0gZmliZXIpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBmaWJlcjtcbiAgfSAvLyBJZiB3ZSBoYXZlIHR3byBwb3NzaWJsZSBicmFuY2hlcywgd2UnbGwgd2FsayBiYWNrd2FyZHMgdXAgdG8gdGhlIHJvb3RcbiAgLy8gdG8gc2VlIHdoYXQgcGF0aCB0aGUgcm9vdCBwb2ludHMgdG8uIE9uIHRoZSB3YXkgd2UgbWF5IGhpdCBvbmUgb2YgdGhlXG4gIC8vIHNwZWNpYWwgY2FzZXMgYW5kIHdlJ2xsIGRlYWwgd2l0aCB0aGVtLlxuXG5cbiAgdmFyIGEgPSBmaWJlcjtcbiAgdmFyIGIgPSBhbHRlcm5hdGU7XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICB2YXIgcGFyZW50QSA9IGEucmV0dXJuO1xuXG4gICAgaWYgKHBhcmVudEEgPT09IG51bGwpIHtcbiAgICAgIC8vIFdlJ3JlIGF0IHRoZSByb290LlxuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgdmFyIHBhcmVudEIgPSBwYXJlbnRBLmFsdGVybmF0ZTtcblxuICAgIGlmIChwYXJlbnRCID09PSBudWxsKSB7XG4gICAgICAvLyBUaGVyZSBpcyBubyBhbHRlcm5hdGUuIFRoaXMgaXMgYW4gdW51c3VhbCBjYXNlLiBDdXJyZW50bHksIGl0IG9ubHlcbiAgICAgIC8vIGhhcHBlbnMgd2hlbiBhIFN1c3BlbnNlIGNvbXBvbmVudCBpcyBoaWRkZW4uIEFuIGV4dHJhIGZyYWdtZW50IGZpYmVyXG4gICAgICAvLyBpcyBpbnNlcnRlZCBpbiBiZXR3ZWVuIHRoZSBTdXNwZW5zZSBmaWJlciBhbmQgaXRzIGNoaWxkcmVuLiBTa2lwXG4gICAgICAvLyBvdmVyIHRoaXMgZXh0cmEgZnJhZ21lbnQgZmliZXIgYW5kIHByb2NlZWQgdG8gdGhlIG5leHQgcGFyZW50LlxuICAgICAgdmFyIG5leHRQYXJlbnQgPSBwYXJlbnRBLnJldHVybjtcblxuICAgICAgaWYgKG5leHRQYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgYSA9IGIgPSBuZXh0UGFyZW50O1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gLy8gSWYgdGhlcmUncyBubyBwYXJlbnQsIHdlJ3JlIGF0IHRoZSByb290LlxuXG5cbiAgICAgIGJyZWFrO1xuICAgIH0gLy8gSWYgYm90aCBjb3BpZXMgb2YgdGhlIHBhcmVudCBmaWJlciBwb2ludCB0byB0aGUgc2FtZSBjaGlsZCwgd2UgY2FuXG4gICAgLy8gYXNzdW1lIHRoYXQgdGhlIGNoaWxkIGlzIGN1cnJlbnQuIFRoaXMgaGFwcGVucyB3aGVuIHdlIGJhaWxvdXQgb24gbG93XG4gICAgLy8gcHJpb3JpdHk6IHRoZSBiYWlsZWQgb3V0IGZpYmVyJ3MgY2hpbGQgcmV1c2VzIHRoZSBjdXJyZW50IGNoaWxkLlxuXG5cbiAgICBpZiAocGFyZW50QS5jaGlsZCA9PT0gcGFyZW50Qi5jaGlsZCkge1xuICAgICAgdmFyIGNoaWxkID0gcGFyZW50QS5jaGlsZDtcblxuICAgICAgd2hpbGUgKGNoaWxkKSB7XG4gICAgICAgIGlmIChjaGlsZCA9PT0gYSkge1xuICAgICAgICAgIC8vIFdlJ3ZlIGRldGVybWluZWQgdGhhdCBBIGlzIHRoZSBjdXJyZW50IGJyYW5jaC5cbiAgICAgICAgICBhc3NlcnRJc01vdW50ZWQocGFyZW50QSk7XG4gICAgICAgICAgcmV0dXJuIGZpYmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNoaWxkID09PSBiKSB7XG4gICAgICAgICAgLy8gV2UndmUgZGV0ZXJtaW5lZCB0aGF0IEIgaXMgdGhlIGN1cnJlbnQgYnJhbmNoLlxuICAgICAgICAgIGFzc2VydElzTW91bnRlZChwYXJlbnRBKTtcbiAgICAgICAgICByZXR1cm4gYWx0ZXJuYXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgPSBjaGlsZC5zaWJsaW5nO1xuICAgICAgfSAvLyBXZSBzaG91bGQgbmV2ZXIgaGF2ZSBhbiBhbHRlcm5hdGUgZm9yIGFueSBtb3VudGluZyBub2RlLiBTbyB0aGUgb25seVxuICAgICAgLy8gd2F5IHRoaXMgY291bGQgcG9zc2libHkgaGFwcGVuIGlzIGlmIHRoaXMgd2FzIHVubW91bnRlZCwgaWYgYXQgYWxsLlxuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIGZpbmQgbm9kZSBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LicpO1xuICAgIH1cblxuICAgIGlmIChhLnJldHVybiAhPT0gYi5yZXR1cm4pIHtcbiAgICAgIC8vIFRoZSByZXR1cm4gcG9pbnRlciBvZiBBIGFuZCB0aGUgcmV0dXJuIHBvaW50ZXIgb2YgQiBwb2ludCB0byBkaWZmZXJlbnRcbiAgICAgIC8vIGZpYmVycy4gV2UgYXNzdW1lIHRoYXQgcmV0dXJuIHBvaW50ZXJzIG5ldmVyIGNyaXNzLWNyb3NzLCBzbyBBIG11c3RcbiAgICAgIC8vIGJlbG9uZyB0byB0aGUgY2hpbGQgc2V0IG9mIEEucmV0dXJuLCBhbmQgQiBtdXN0IGJlbG9uZyB0byB0aGUgY2hpbGRcbiAgICAgIC8vIHNldCBvZiBCLnJldHVybi5cbiAgICAgIGEgPSBwYXJlbnRBO1xuICAgICAgYiA9IHBhcmVudEI7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSByZXR1cm4gcG9pbnRlcnMgcG9pbnQgdG8gdGhlIHNhbWUgZmliZXIuIFdlJ2xsIGhhdmUgdG8gdXNlIHRoZVxuICAgICAgLy8gZGVmYXVsdCwgc2xvdyBwYXRoOiBzY2FuIHRoZSBjaGlsZCBzZXRzIG9mIGVhY2ggcGFyZW50IGFsdGVybmF0ZSB0byBzZWVcbiAgICAgIC8vIHdoaWNoIGNoaWxkIGJlbG9uZ3MgdG8gd2hpY2ggc2V0LlxuICAgICAgLy9cbiAgICAgIC8vIFNlYXJjaCBwYXJlbnQgQSdzIGNoaWxkIHNldFxuICAgICAgdmFyIGRpZEZpbmRDaGlsZCA9IGZhbHNlO1xuICAgICAgdmFyIF9jaGlsZCA9IHBhcmVudEEuY2hpbGQ7XG5cbiAgICAgIHdoaWxlIChfY2hpbGQpIHtcbiAgICAgICAgaWYgKF9jaGlsZCA9PT0gYSkge1xuICAgICAgICAgIGRpZEZpbmRDaGlsZCA9IHRydWU7XG4gICAgICAgICAgYSA9IHBhcmVudEE7XG4gICAgICAgICAgYiA9IHBhcmVudEI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoX2NoaWxkID09PSBiKSB7XG4gICAgICAgICAgZGlkRmluZENoaWxkID0gdHJ1ZTtcbiAgICAgICAgICBiID0gcGFyZW50QTtcbiAgICAgICAgICBhID0gcGFyZW50QjtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIF9jaGlsZCA9IF9jaGlsZC5zaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWRpZEZpbmRDaGlsZCkge1xuICAgICAgICAvLyBTZWFyY2ggcGFyZW50IEIncyBjaGlsZCBzZXRcbiAgICAgICAgX2NoaWxkID0gcGFyZW50Qi5jaGlsZDtcblxuICAgICAgICB3aGlsZSAoX2NoaWxkKSB7XG4gICAgICAgICAgaWYgKF9jaGlsZCA9PT0gYSkge1xuICAgICAgICAgICAgZGlkRmluZENoaWxkID0gdHJ1ZTtcbiAgICAgICAgICAgIGEgPSBwYXJlbnRCO1xuICAgICAgICAgICAgYiA9IHBhcmVudEE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoX2NoaWxkID09PSBiKSB7XG4gICAgICAgICAgICBkaWRGaW5kQ2hpbGQgPSB0cnVlO1xuICAgICAgICAgICAgYiA9IHBhcmVudEI7XG4gICAgICAgICAgICBhID0gcGFyZW50QTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIF9jaGlsZCA9IF9jaGlsZC5zaWJsaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFkaWRGaW5kQ2hpbGQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NoaWxkIHdhcyBub3QgZm91bmQgaW4gZWl0aGVyIHBhcmVudCBzZXQuIFRoaXMgaW5kaWNhdGVzIGEgYnVnICcgKyAnaW4gUmVhY3QgcmVsYXRlZCB0byB0aGUgcmV0dXJuIHBvaW50ZXIuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGEuYWx0ZXJuYXRlICE9PSBiKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZXR1cm4gZmliZXJzIHNob3VsZCBhbHdheXMgYmUgZWFjaCBvdGhlcnMnIGFsdGVybmF0ZXMuIFwiICsgJ1RoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuICB9IC8vIElmIHRoZSByb290IGlzIG5vdCBhIGhvc3QgY29udGFpbmVyLCB3ZSdyZSBpbiBhIGRpc2Nvbm5lY3RlZCB0cmVlLiBJLmUuXG4gIC8vIHVubW91bnRlZC5cblxuXG4gIGlmIChhLnRhZyAhPT0gSG9zdFJvb3QpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIG5vZGUgb24gYW4gdW5tb3VudGVkIGNvbXBvbmVudC4nKTtcbiAgfVxuXG4gIGlmIChhLnN0YXRlTm9kZS5jdXJyZW50ID09PSBhKSB7XG4gICAgLy8gV2UndmUgZGV0ZXJtaW5lZCB0aGF0IEEgaXMgdGhlIGN1cnJlbnQgYnJhbmNoLlxuICAgIHJldHVybiBmaWJlcjtcbiAgfSAvLyBPdGhlcndpc2UgQiBoYXMgdG8gYmUgY3VycmVudCBicmFuY2guXG5cblxuICByZXR1cm4gYWx0ZXJuYXRlO1xufVxuZnVuY3Rpb24gZmluZEN1cnJlbnRIb3N0RmliZXIocGFyZW50KSB7XG4gIHZhciBjdXJyZW50UGFyZW50ID0gZmluZEN1cnJlbnRGaWJlclVzaW5nU2xvd1BhdGgocGFyZW50KTtcbiAgcmV0dXJuIGN1cnJlbnRQYXJlbnQgIT09IG51bGwgPyBmaW5kQ3VycmVudEhvc3RGaWJlckltcGwoY3VycmVudFBhcmVudCkgOiBudWxsO1xufVxuXG5mdW5jdGlvbiBmaW5kQ3VycmVudEhvc3RGaWJlckltcGwobm9kZSkge1xuICAvLyBOZXh0IHdlJ2xsIGRyaWxsIGRvd24gdGhpcyBjb21wb25lbnQgdG8gZmluZCB0aGUgZmlyc3QgSG9zdENvbXBvbmVudC9UZXh0LlxuICBpZiAobm9kZS50YWcgPT09IEhvc3RDb21wb25lbnQgfHwgbm9kZS50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkO1xuXG4gIHdoaWxlIChjaGlsZCAhPT0gbnVsbCkge1xuICAgIHZhciBtYXRjaCA9IGZpbmRDdXJyZW50SG9zdEZpYmVySW1wbChjaGlsZCk7XG5cbiAgICBpZiAobWF0Y2ggIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9XG5cbiAgICBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gZmluZEN1cnJlbnRIb3N0RmliZXJXaXRoTm9Qb3J0YWxzKHBhcmVudCkge1xuICB2YXIgY3VycmVudFBhcmVudCA9IGZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoKHBhcmVudCk7XG4gIHJldHVybiBjdXJyZW50UGFyZW50ICE9PSBudWxsID8gZmluZEN1cnJlbnRIb3N0RmliZXJXaXRoTm9Qb3J0YWxzSW1wbChjdXJyZW50UGFyZW50KSA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGZpbmRDdXJyZW50SG9zdEZpYmVyV2l0aE5vUG9ydGFsc0ltcGwobm9kZSkge1xuICAvLyBOZXh0IHdlJ2xsIGRyaWxsIGRvd24gdGhpcyBjb21wb25lbnQgdG8gZmluZCB0aGUgZmlyc3QgSG9zdENvbXBvbmVudC9UZXh0LlxuICBpZiAobm9kZS50YWcgPT09IEhvc3RDb21wb25lbnQgfHwgbm9kZS50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgcmV0dXJuIG5vZGU7XG4gIH1cblxuICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkO1xuXG4gIHdoaWxlIChjaGlsZCAhPT0gbnVsbCkge1xuICAgIGlmIChjaGlsZC50YWcgIT09IEhvc3RQb3J0YWwpIHtcbiAgICAgIHZhciBtYXRjaCA9IGZpbmRDdXJyZW50SG9zdEZpYmVyV2l0aE5vUG9ydGFsc0ltcGwoY2hpbGQpO1xuXG4gICAgICBpZiAobWF0Y2ggIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoaWxkID0gY2hpbGQuc2libGluZztcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vLyBUaGlzIG1vZHVsZSBvbmx5IGV4aXN0cyBhcyBhbiBFU00gd3JhcHBlciBhcm91bmQgdGhlIGV4dGVybmFsIENvbW1vbkpTXG52YXIgc2NoZWR1bGVDYWxsYmFjayA9IFNjaGVkdWxlci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrO1xudmFyIGNhbmNlbENhbGxiYWNrID0gU2NoZWR1bGVyLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrO1xudmFyIHNob3VsZFlpZWxkID0gU2NoZWR1bGVyLnVuc3RhYmxlX3Nob3VsZFlpZWxkO1xudmFyIHJlcXVlc3RQYWludCA9IFNjaGVkdWxlci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ7XG52YXIgbm93ID0gU2NoZWR1bGVyLnVuc3RhYmxlX25vdztcbnZhciBnZXRDdXJyZW50UHJpb3JpdHlMZXZlbCA9IFNjaGVkdWxlci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbDtcbnZhciBJbW1lZGlhdGVQcmlvcml0eSA9IFNjaGVkdWxlci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eTtcbnZhciBVc2VyQmxvY2tpbmdQcmlvcml0eSA9IFNjaGVkdWxlci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eTtcbnZhciBOb3JtYWxQcmlvcml0eSA9IFNjaGVkdWxlci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eTtcbnZhciBMb3dQcmlvcml0eSA9IFNjaGVkdWxlci51bnN0YWJsZV9Mb3dQcmlvcml0eTtcbnZhciBJZGxlUHJpb3JpdHkgPSBTY2hlZHVsZXIudW5zdGFibGVfSWRsZVByaW9yaXR5O1xuLy8gdGhpcyBkb2Vzbid0IGFjdHVhbGx5IGV4aXN0IG9uIHRoZSBzY2hlZHVsZXIsIGJ1dCBpdCAqZG9lcypcbi8vIG9uIHNjaGVkdWxlci91bnN0YWJsZV9tb2NrLCB3aGljaCB3ZSdsbCBuZWVkIGZvciBpbnRlcm5hbCB0ZXN0aW5nXG52YXIgdW5zdGFibGVfeWllbGRWYWx1ZSA9IFNjaGVkdWxlci51bnN0YWJsZV95aWVsZFZhbHVlO1xudmFyIHVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlID0gU2NoZWR1bGVyLnVuc3RhYmxlX3NldERpc2FibGVZaWVsZFZhbHVlO1xuXG52YXIgcmVuZGVyZXJJRCA9IG51bGw7XG52YXIgaW5qZWN0ZWRIb29rID0gbnVsbDtcbnZhciBpbmplY3RlZFByb2ZpbGluZ0hvb2tzID0gbnVsbDtcbnZhciBoYXNMb2dnZWRFcnJvciA9IGZhbHNlO1xudmFyIGlzRGV2VG9vbHNQcmVzZW50ID0gdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAhPT0gJ3VuZGVmaW5lZCc7XG5mdW5jdGlvbiBpbmplY3RJbnRlcm5hbHMoaW50ZXJuYWxzKSB7XG4gIGlmICh0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJykge1xuICAgIC8vIE5vIERldlRvb2xzXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGhvb2sgPSBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187XG5cbiAgaWYgKGhvb2suaXNEaXNhYmxlZCkge1xuICAgIC8vIFRoaXMgaXNuJ3QgYSByZWFsIHByb3BlcnR5IG9uIHRoZSBob29rLCBidXQgaXQgY2FuIGJlIHNldCB0byBvcHQgb3V0XG4gICAgLy8gb2YgRGV2VG9vbHMgaW50ZWdyYXRpb24gYW5kIGFzc29jaWF0ZWQgd2FybmluZ3MgYW5kIGxvZ3MuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8zODc3XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAoIWhvb2suc3VwcG9ydHNGaWJlcikge1xuICAgIHtcbiAgICAgIGVycm9yKCdUaGUgaW5zdGFsbGVkIHZlcnNpb24gb2YgUmVhY3QgRGV2VG9vbHMgaXMgdG9vIG9sZCBhbmQgd2lsbCBub3Qgd29yayAnICsgJ3dpdGggdGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBSZWFjdC4gUGxlYXNlIHVwZGF0ZSBSZWFjdCBEZXZUb29scy4gJyArICdodHRwczovL3JlYWN0anMub3JnL2xpbmsvcmVhY3QtZGV2dG9vbHMnKTtcbiAgICB9IC8vIERldlRvb2xzIGV4aXN0cywgZXZlbiB0aG91Z2ggaXQgZG9lc24ndCBzdXBwb3J0IEZpYmVyLlxuXG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgaWYgKGVuYWJsZVNjaGVkdWxpbmdQcm9maWxlcikge1xuICAgICAgLy8gQ29uZGl0aW9uYWxseSBpbmplY3QgdGhlc2UgaG9va3Mgb25seSBpZiBUaW1lbGluZSBwcm9maWxlciBpcyBzdXBwb3J0ZWQgYnkgdGhpcyBidWlsZC5cbiAgICAgIC8vIFRoaXMgZ2l2ZXMgRGV2VG9vbHMgYSB3YXkgdG8gZmVhdHVyZSBkZXRlY3QgdGhhdCBpc24ndCB0aWVkIHRvIHZlcnNpb24gbnVtYmVyXG4gICAgICAvLyAoc2luY2UgcHJvZmlsaW5nIGFuZCB0aW1lbGluZSBhcmUgY29udHJvbGxlZCBieSBkaWZmZXJlbnQgZmVhdHVyZSBmbGFncykuXG4gICAgICBpbnRlcm5hbHMgPSBhc3NpZ24oe30sIGludGVybmFscywge1xuICAgICAgICBnZXRMYW5lTGFiZWxNYXA6IGdldExhbmVMYWJlbE1hcCxcbiAgICAgICAgaW5qZWN0UHJvZmlsaW5nSG9va3M6IGluamVjdFByb2ZpbGluZ0hvb2tzXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZW5kZXJlcklEID0gaG9vay5pbmplY3QoaW50ZXJuYWxzKTsgLy8gV2UgaGF2ZSBzdWNjZXNzZnVsbHkgaW5qZWN0ZWQsIHNvIG5vdyBpdCBpcyBzYWZlIHRvIHNldCB1cCBob29rcy5cblxuICAgIGluamVjdGVkSG9vayA9IGhvb2s7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIENhdGNoIGFsbCBlcnJvcnMgYmVjYXVzZSBpdCBpcyB1bnNhZmUgdG8gdGhyb3cgZHVyaW5nIGluaXRpYWxpemF0aW9uLlxuICAgIHtcbiAgICAgIGVycm9yKCdSZWFjdCBpbnN0cnVtZW50YXRpb24gZW5jb3VudGVyZWQgYW4gZXJyb3I6ICVzLicsIGVycik7XG4gICAgfVxuICB9XG5cbiAgaWYgKGhvb2suY2hlY2tEQ0UpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSByZWFsIERldlRvb2xzLlxuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIC8vIFRoaXMgaXMgbGlrZWx5IGEgaG9vayBpbnN0YWxsZWQgYnkgRmFzdCBSZWZyZXNoIHJ1bnRpbWUuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBvblNjaGVkdWxlUm9vdChyb290LCBjaGlsZHJlbikge1xuICB7XG4gICAgaWYgKGluamVjdGVkSG9vayAmJiB0eXBlb2YgaW5qZWN0ZWRIb29rLm9uU2NoZWR1bGVGaWJlclJvb3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGluamVjdGVkSG9vay5vblNjaGVkdWxlRmliZXJSb290KHJlbmRlcmVySUQsIHJvb3QsIGNoaWxkcmVuKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoICFoYXNMb2dnZWRFcnJvcikge1xuICAgICAgICAgIGhhc0xvZ2dlZEVycm9yID0gdHJ1ZTtcblxuICAgICAgICAgIGVycm9yKCdSZWFjdCBpbnN0cnVtZW50YXRpb24gZW5jb3VudGVyZWQgYW4gZXJyb3I6ICVzJywgZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gb25Db21taXRSb290KHJvb3QsIGV2ZW50UHJpb3JpdHkpIHtcbiAgaWYgKGluamVjdGVkSG9vayAmJiB0eXBlb2YgaW5qZWN0ZWRIb29rLm9uQ29tbWl0RmliZXJSb290ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdHJ5IHtcbiAgICAgIHZhciBkaWRFcnJvciA9IChyb290LmN1cnJlbnQuZmxhZ3MgJiBEaWRDYXB0dXJlKSA9PT0gRGlkQ2FwdHVyZTtcblxuICAgICAgaWYgKGVuYWJsZVByb2ZpbGVyVGltZXIpIHtcbiAgICAgICAgdmFyIHNjaGVkdWxlclByaW9yaXR5O1xuXG4gICAgICAgIHN3aXRjaCAoZXZlbnRQcmlvcml0eSkge1xuICAgICAgICAgIGNhc2UgRGlzY3JldGVFdmVudFByaW9yaXR5OlxuICAgICAgICAgICAgc2NoZWR1bGVyUHJpb3JpdHkgPSBJbW1lZGlhdGVQcmlvcml0eTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSBDb250aW51b3VzRXZlbnRQcmlvcml0eTpcbiAgICAgICAgICAgIHNjaGVkdWxlclByaW9yaXR5ID0gVXNlckJsb2NraW5nUHJpb3JpdHk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgRGVmYXVsdEV2ZW50UHJpb3JpdHk6XG4gICAgICAgICAgICBzY2hlZHVsZXJQcmlvcml0eSA9IE5vcm1hbFByaW9yaXR5O1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIElkbGVFdmVudFByaW9yaXR5OlxuICAgICAgICAgICAgc2NoZWR1bGVyUHJpb3JpdHkgPSBJZGxlUHJpb3JpdHk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBzY2hlZHVsZXJQcmlvcml0eSA9IE5vcm1hbFByaW9yaXR5O1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpbmplY3RlZEhvb2sub25Db21taXRGaWJlclJvb3QocmVuZGVyZXJJRCwgcm9vdCwgc2NoZWR1bGVyUHJpb3JpdHksIGRpZEVycm9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluamVjdGVkSG9vay5vbkNvbW1pdEZpYmVyUm9vdChyZW5kZXJlcklELCByb290LCB1bmRlZmluZWQsIGRpZEVycm9yKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHtcbiAgICAgICAgaWYgKCFoYXNMb2dnZWRFcnJvcikge1xuICAgICAgICAgIGhhc0xvZ2dlZEVycm9yID0gdHJ1ZTtcblxuICAgICAgICAgIGVycm9yKCdSZWFjdCBpbnN0cnVtZW50YXRpb24gZW5jb3VudGVyZWQgYW4gZXJyb3I6ICVzJywgZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gb25Qb3N0Q29tbWl0Um9vdChyb290KSB7XG4gIGlmIChpbmplY3RlZEhvb2sgJiYgdHlwZW9mIGluamVjdGVkSG9vay5vblBvc3RDb21taXRGaWJlclJvb3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICB0cnkge1xuICAgICAgaW5qZWN0ZWRIb29rLm9uUG9zdENvbW1pdEZpYmVyUm9vdChyZW5kZXJlcklELCByb290KTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHtcbiAgICAgICAgaWYgKCFoYXNMb2dnZWRFcnJvcikge1xuICAgICAgICAgIGhhc0xvZ2dlZEVycm9yID0gdHJ1ZTtcblxuICAgICAgICAgIGVycm9yKCdSZWFjdCBpbnN0cnVtZW50YXRpb24gZW5jb3VudGVyZWQgYW4gZXJyb3I6ICVzJywgZXJyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gb25Db21taXRVbm1vdW50KGZpYmVyKSB7XG4gIGlmIChpbmplY3RlZEhvb2sgJiYgdHlwZW9mIGluamVjdGVkSG9vay5vbkNvbW1pdEZpYmVyVW5tb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHRyeSB7XG4gICAgICBpbmplY3RlZEhvb2sub25Db21taXRGaWJlclVubW91bnQocmVuZGVyZXJJRCwgZmliZXIpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAge1xuICAgICAgICBpZiAoIWhhc0xvZ2dlZEVycm9yKSB7XG4gICAgICAgICAgaGFzTG9nZ2VkRXJyb3IgPSB0cnVlO1xuXG4gICAgICAgICAgZXJyb3IoJ1JlYWN0IGluc3RydW1lbnRhdGlvbiBlbmNvdW50ZXJlZCBhbiBlcnJvcjogJXMnLCBlcnIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyhuZXdJc1N0cmljdE1vZGUpIHtcbiAge1xuICAgIGlmICh0eXBlb2YgdW5zdGFibGVfeWllbGRWYWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gV2UncmUgaW4gYSB0ZXN0IGJlY2F1c2UgU2NoZWR1bGVyLnVuc3RhYmxlX3lpZWxkVmFsdWUgb25seSBleGlzdHNcbiAgICAgIC8vIGluIFNjaGVkdWxlck1vY2suIFRvIHJlZHVjZSB0aGUgbm9pc2UgaW4gc3RyaWN0IG1vZGUgdGVzdHMsXG4gICAgICAvLyBzdXBwcmVzcyB3YXJuaW5ncyBhbmQgZGlzYWJsZSBzY2hlZHVsZXIgeWllbGRpbmcgZHVyaW5nIHRoZSBkb3VibGUgcmVuZGVyXG4gICAgICB1bnN0YWJsZV9zZXREaXNhYmxlWWllbGRWYWx1ZShuZXdJc1N0cmljdE1vZGUpO1xuICAgICAgc2V0U3VwcHJlc3NXYXJuaW5nKG5ld0lzU3RyaWN0TW9kZSk7XG4gICAgfVxuXG4gICAgaWYgKGluamVjdGVkSG9vayAmJiB0eXBlb2YgaW5qZWN0ZWRIb29rLnNldFN0cmljdE1vZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGluamVjdGVkSG9vay5zZXRTdHJpY3RNb2RlKHJlbmRlcmVySUQsIG5ld0lzU3RyaWN0TW9kZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAge1xuICAgICAgICAgIGlmICghaGFzTG9nZ2VkRXJyb3IpIHtcbiAgICAgICAgICAgIGhhc0xvZ2dlZEVycm9yID0gdHJ1ZTtcblxuICAgICAgICAgICAgZXJyb3IoJ1JlYWN0IGluc3RydW1lbnRhdGlvbiBlbmNvdW50ZXJlZCBhbiBlcnJvcjogJXMnLCBlcnIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufSAvLyBQcm9maWxlciBBUEkgaG9va3NcblxuZnVuY3Rpb24gaW5qZWN0UHJvZmlsaW5nSG9va3MocHJvZmlsaW5nSG9va3MpIHtcbiAgaW5qZWN0ZWRQcm9maWxpbmdIb29rcyA9IHByb2ZpbGluZ0hvb2tzO1xufVxuXG5mdW5jdGlvbiBnZXRMYW5lTGFiZWxNYXAoKSB7XG4gIHtcbiAgICB2YXIgbWFwID0gbmV3IE1hcCgpO1xuICAgIHZhciBsYW5lID0gMTtcblxuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBUb3RhbExhbmVzOyBpbmRleCsrKSB7XG4gICAgICB2YXIgbGFiZWwgPSBnZXRMYWJlbEZvckxhbmUobGFuZSk7XG4gICAgICBtYXAuc2V0KGxhbmUsIGxhYmVsKTtcbiAgICAgIGxhbmUgKj0gMjtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtDb21taXRTdGFydGVkKGxhbmVzKSB7XG4gIHtcbiAgICBpZiAoaW5qZWN0ZWRQcm9maWxpbmdIb29rcyAhPT0gbnVsbCAmJiB0eXBlb2YgaW5qZWN0ZWRQcm9maWxpbmdIb29rcy5tYXJrQ29tbWl0U3RhcnRlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5qZWN0ZWRQcm9maWxpbmdIb29rcy5tYXJrQ29tbWl0U3RhcnRlZChsYW5lcyk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBtYXJrQ29tbWl0U3RvcHBlZCgpIHtcbiAge1xuICAgIGlmIChpbmplY3RlZFByb2ZpbGluZ0hvb2tzICE9PSBudWxsICYmIHR5cGVvZiBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtDb21taXRTdG9wcGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtDb21taXRTdG9wcGVkKCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBtYXJrQ29tcG9uZW50UmVuZGVyU3RhcnRlZChmaWJlcikge1xuICB7XG4gICAgaWYgKGluamVjdGVkUHJvZmlsaW5nSG9va3MgIT09IG51bGwgJiYgdHlwZW9mIGluamVjdGVkUHJvZmlsaW5nSG9va3MubWFya0NvbXBvbmVudFJlbmRlclN0YXJ0ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGluamVjdGVkUHJvZmlsaW5nSG9va3MubWFya0NvbXBvbmVudFJlbmRlclN0YXJ0ZWQoZmliZXIpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gbWFya0NvbXBvbmVudFJlbmRlclN0b3BwZWQoKSB7XG4gIHtcbiAgICBpZiAoaW5qZWN0ZWRQcm9maWxpbmdIb29rcyAhPT0gbnVsbCAmJiB0eXBlb2YgaW5qZWN0ZWRQcm9maWxpbmdIb29rcy5tYXJrQ29tcG9uZW50UmVuZGVyU3RvcHBlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5qZWN0ZWRQcm9maWxpbmdIb29rcy5tYXJrQ29tcG9uZW50UmVuZGVyU3RvcHBlZCgpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gbWFya0NvbXBvbmVudFBhc3NpdmVFZmZlY3RNb3VudFN0YXJ0ZWQoZmliZXIpIHtcbiAge1xuICAgIGlmIChpbmplY3RlZFByb2ZpbGluZ0hvb2tzICE9PSBudWxsICYmIHR5cGVvZiBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtDb21wb25lbnRQYXNzaXZlRWZmZWN0TW91bnRTdGFydGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtDb21wb25lbnRQYXNzaXZlRWZmZWN0TW91bnRTdGFydGVkKGZpYmVyKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIG1hcmtDb21wb25lbnRQYXNzaXZlRWZmZWN0TW91bnRTdG9wcGVkKCkge1xuICB7XG4gICAgaWYgKGluamVjdGVkUHJvZmlsaW5nSG9va3MgIT09IG51bGwgJiYgdHlwZW9mIGluamVjdGVkUHJvZmlsaW5nSG9va3MubWFya0NvbXBvbmVudFBhc3NpdmVFZmZlY3RNb3VudFN0b3BwZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGluamVjdGVkUHJvZmlsaW5nSG9va3MubWFya0NvbXBvbmVudFBhc3NpdmVFZmZlY3RNb3VudFN0b3BwZWQoKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIG1hcmtDb21wb25lbnRQYXNzaXZlRWZmZWN0VW5tb3VudFN0YXJ0ZWQoZmliZXIpIHtcbiAge1xuICAgIGlmIChpbmplY3RlZFByb2ZpbGluZ0hvb2tzICE9PSBudWxsICYmIHR5cGVvZiBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtDb21wb25lbnRQYXNzaXZlRWZmZWN0VW5tb3VudFN0YXJ0ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGluamVjdGVkUHJvZmlsaW5nSG9va3MubWFya0NvbXBvbmVudFBhc3NpdmVFZmZlY3RVbm1vdW50U3RhcnRlZChmaWJlcik7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBtYXJrQ29tcG9uZW50UGFzc2l2ZUVmZmVjdFVubW91bnRTdG9wcGVkKCkge1xuICB7XG4gICAgaWYgKGluamVjdGVkUHJvZmlsaW5nSG9va3MgIT09IG51bGwgJiYgdHlwZW9mIGluamVjdGVkUHJvZmlsaW5nSG9va3MubWFya0NvbXBvbmVudFBhc3NpdmVFZmZlY3RVbm1vdW50U3RvcHBlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5qZWN0ZWRQcm9maWxpbmdIb29rcy5tYXJrQ29tcG9uZW50UGFzc2l2ZUVmZmVjdFVubW91bnRTdG9wcGVkKCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBtYXJrQ29tcG9uZW50TGF5b3V0RWZmZWN0TW91bnRTdGFydGVkKGZpYmVyKSB7XG4gIHtcbiAgICBpZiAoaW5qZWN0ZWRQcm9maWxpbmdIb29rcyAhPT0gbnVsbCAmJiB0eXBlb2YgaW5qZWN0ZWRQcm9maWxpbmdIb29rcy5tYXJrQ29tcG9uZW50TGF5b3V0RWZmZWN0TW91bnRTdGFydGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtDb21wb25lbnRMYXlvdXRFZmZlY3RNb3VudFN0YXJ0ZWQoZmliZXIpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gbWFya0NvbXBvbmVudExheW91dEVmZmVjdE1vdW50U3RvcHBlZCgpIHtcbiAge1xuICAgIGlmIChpbmplY3RlZFByb2ZpbGluZ0hvb2tzICE9PSBudWxsICYmIHR5cGVvZiBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtDb21wb25lbnRMYXlvdXRFZmZlY3RNb3VudFN0b3BwZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGluamVjdGVkUHJvZmlsaW5nSG9va3MubWFya0NvbXBvbmVudExheW91dEVmZmVjdE1vdW50U3RvcHBlZCgpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gbWFya0NvbXBvbmVudExheW91dEVmZmVjdFVubW91bnRTdGFydGVkKGZpYmVyKSB7XG4gIHtcbiAgICBpZiAoaW5qZWN0ZWRQcm9maWxpbmdIb29rcyAhPT0gbnVsbCAmJiB0eXBlb2YgaW5qZWN0ZWRQcm9maWxpbmdIb29rcy5tYXJrQ29tcG9uZW50TGF5b3V0RWZmZWN0VW5tb3VudFN0YXJ0ZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGluamVjdGVkUHJvZmlsaW5nSG9va3MubWFya0NvbXBvbmVudExheW91dEVmZmVjdFVubW91bnRTdGFydGVkKGZpYmVyKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIG1hcmtDb21wb25lbnRMYXlvdXRFZmZlY3RVbm1vdW50U3RvcHBlZCgpIHtcbiAge1xuICAgIGlmIChpbmplY3RlZFByb2ZpbGluZ0hvb2tzICE9PSBudWxsICYmIHR5cGVvZiBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtDb21wb25lbnRMYXlvdXRFZmZlY3RVbm1vdW50U3RvcHBlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5qZWN0ZWRQcm9maWxpbmdIb29rcy5tYXJrQ29tcG9uZW50TGF5b3V0RWZmZWN0VW5tb3VudFN0b3BwZWQoKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIG1hcmtDb21wb25lbnRFcnJvcmVkKGZpYmVyLCB0aHJvd25WYWx1ZSwgbGFuZXMpIHtcbiAge1xuICAgIGlmIChpbmplY3RlZFByb2ZpbGluZ0hvb2tzICE9PSBudWxsICYmIHR5cGVvZiBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtDb21wb25lbnRFcnJvcmVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtDb21wb25lbnRFcnJvcmVkKGZpYmVyLCB0aHJvd25WYWx1ZSwgbGFuZXMpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gbWFya0NvbXBvbmVudFN1c3BlbmRlZChmaWJlciwgd2FrZWFibGUsIGxhbmVzKSB7XG4gIHtcbiAgICBpZiAoaW5qZWN0ZWRQcm9maWxpbmdIb29rcyAhPT0gbnVsbCAmJiB0eXBlb2YgaW5qZWN0ZWRQcm9maWxpbmdIb29rcy5tYXJrQ29tcG9uZW50U3VzcGVuZGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtDb21wb25lbnRTdXNwZW5kZWQoZmliZXIsIHdha2VhYmxlLCBsYW5lcyk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBtYXJrTGF5b3V0RWZmZWN0c1N0YXJ0ZWQobGFuZXMpIHtcbiAge1xuICAgIGlmIChpbmplY3RlZFByb2ZpbGluZ0hvb2tzICE9PSBudWxsICYmIHR5cGVvZiBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtMYXlvdXRFZmZlY3RzU3RhcnRlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5qZWN0ZWRQcm9maWxpbmdIb29rcy5tYXJrTGF5b3V0RWZmZWN0c1N0YXJ0ZWQobGFuZXMpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gbWFya0xheW91dEVmZmVjdHNTdG9wcGVkKCkge1xuICB7XG4gICAgaWYgKGluamVjdGVkUHJvZmlsaW5nSG9va3MgIT09IG51bGwgJiYgdHlwZW9mIGluamVjdGVkUHJvZmlsaW5nSG9va3MubWFya0xheW91dEVmZmVjdHNTdG9wcGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtMYXlvdXRFZmZlY3RzU3RvcHBlZCgpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gbWFya1Bhc3NpdmVFZmZlY3RzU3RhcnRlZChsYW5lcykge1xuICB7XG4gICAgaWYgKGluamVjdGVkUHJvZmlsaW5nSG9va3MgIT09IG51bGwgJiYgdHlwZW9mIGluamVjdGVkUHJvZmlsaW5nSG9va3MubWFya1Bhc3NpdmVFZmZlY3RzU3RhcnRlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5qZWN0ZWRQcm9maWxpbmdIb29rcy5tYXJrUGFzc2l2ZUVmZmVjdHNTdGFydGVkKGxhbmVzKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIG1hcmtQYXNzaXZlRWZmZWN0c1N0b3BwZWQoKSB7XG4gIHtcbiAgICBpZiAoaW5qZWN0ZWRQcm9maWxpbmdIb29rcyAhPT0gbnVsbCAmJiB0eXBlb2YgaW5qZWN0ZWRQcm9maWxpbmdIb29rcy5tYXJrUGFzc2l2ZUVmZmVjdHNTdG9wcGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtQYXNzaXZlRWZmZWN0c1N0b3BwZWQoKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIG1hcmtSZW5kZXJTdGFydGVkKGxhbmVzKSB7XG4gIHtcbiAgICBpZiAoaW5qZWN0ZWRQcm9maWxpbmdIb29rcyAhPT0gbnVsbCAmJiB0eXBlb2YgaW5qZWN0ZWRQcm9maWxpbmdIb29rcy5tYXJrUmVuZGVyU3RhcnRlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5qZWN0ZWRQcm9maWxpbmdIb29rcy5tYXJrUmVuZGVyU3RhcnRlZChsYW5lcyk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBtYXJrUmVuZGVyWWllbGRlZCgpIHtcbiAge1xuICAgIGlmIChpbmplY3RlZFByb2ZpbGluZ0hvb2tzICE9PSBudWxsICYmIHR5cGVvZiBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtSZW5kZXJZaWVsZGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtSZW5kZXJZaWVsZGVkKCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBtYXJrUmVuZGVyU3RvcHBlZCgpIHtcbiAge1xuICAgIGlmIChpbmplY3RlZFByb2ZpbGluZ0hvb2tzICE9PSBudWxsICYmIHR5cGVvZiBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtSZW5kZXJTdG9wcGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtSZW5kZXJTdG9wcGVkKCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBtYXJrUmVuZGVyU2NoZWR1bGVkKGxhbmUpIHtcbiAge1xuICAgIGlmIChpbmplY3RlZFByb2ZpbGluZ0hvb2tzICE9PSBudWxsICYmIHR5cGVvZiBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtSZW5kZXJTY2hlZHVsZWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGluamVjdGVkUHJvZmlsaW5nSG9va3MubWFya1JlbmRlclNjaGVkdWxlZChsYW5lKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIG1hcmtGb3JjZVVwZGF0ZVNjaGVkdWxlZChmaWJlciwgbGFuZSkge1xuICB7XG4gICAgaWYgKGluamVjdGVkUHJvZmlsaW5nSG9va3MgIT09IG51bGwgJiYgdHlwZW9mIGluamVjdGVkUHJvZmlsaW5nSG9va3MubWFya0ZvcmNlVXBkYXRlU2NoZWR1bGVkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtGb3JjZVVwZGF0ZVNjaGVkdWxlZChmaWJlciwgbGFuZSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBtYXJrU3RhdGVVcGRhdGVTY2hlZHVsZWQoZmliZXIsIGxhbmUpIHtcbiAge1xuICAgIGlmIChpbmplY3RlZFByb2ZpbGluZ0hvb2tzICE9PSBudWxsICYmIHR5cGVvZiBpbmplY3RlZFByb2ZpbGluZ0hvb2tzLm1hcmtTdGF0ZVVwZGF0ZVNjaGVkdWxlZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaW5qZWN0ZWRQcm9maWxpbmdIb29rcy5tYXJrU3RhdGVVcGRhdGVTY2hlZHVsZWQoZmliZXIsIGxhbmUpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgTm9Nb2RlID1cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICovXG4wOyAvLyBUT0RPOiBSZW1vdmUgQ29uY3VycmVudE1vZGUgYnkgcmVhZGluZyBmcm9tIHRoZSByb290IHRhZyBpbnN0ZWFkXG5cbnZhciBDb25jdXJyZW50TW9kZSA9XG4vKiAgICAgICAgICAgICAgICAgKi9cbjE7XG52YXIgUHJvZmlsZU1vZGUgPVxuLyogICAgICAgICAgICAgICAgICAgICovXG4yO1xudmFyIFN0cmljdExlZ2FjeU1vZGUgPVxuLyogICAgICAgICAgICAgICAqL1xuODtcbnZhciBTdHJpY3RFZmZlY3RzTW9kZSA9XG4vKiAgICAgICAgICAgICAgKi9cbjE2O1xuXG4vLyBUT0RPOiBUaGlzIGlzIHByZXR0eSB3ZWxsIHN1cHBvcnRlZCBieSBicm93c2Vycy4gTWF5YmUgd2UgY2FuIGRyb3AgaXQuXG52YXIgY2x6MzIgPSBNYXRoLmNsejMyID8gTWF0aC5jbHozMiA6IGNsejMyRmFsbGJhY2s7IC8vIENvdW50IGxlYWRpbmcgemVyb3MuXG4vLyBCYXNlZCBvbjpcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL01hdGgvY2x6MzJcblxudmFyIGxvZyA9IE1hdGgubG9nO1xudmFyIExOMiA9IE1hdGguTE4yO1xuXG5mdW5jdGlvbiBjbHozMkZhbGxiYWNrKHgpIHtcbiAgdmFyIGFzVWludCA9IHggPj4+IDA7XG5cbiAgaWYgKGFzVWludCA9PT0gMCkge1xuICAgIHJldHVybiAzMjtcbiAgfVxuXG4gIHJldHVybiAzMSAtIChsb2coYXNVaW50KSAvIExOMiB8IDApIHwgMDtcbn1cblxuLy8gSWYgdGhvc2UgdmFsdWVzIGFyZSBjaGFuZ2VkIHRoYXQgcGFja2FnZSBzaG91bGQgYmUgcmVidWlsdCBhbmQgcmVkZXBsb3llZC5cblxudmFyIFRvdGFsTGFuZXMgPSAzMTtcbnZhciBOb0xhbmVzID1cbi8qICAgICAgICAgICAgICAgICAgICAgICAgKi9cbjA7XG52YXIgTm9MYW5lID1cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuMDtcbnZhciBTeW5jTGFuZSA9XG4vKiAgICAgICAgICAgICAgICAgICAgICAgICovXG4xO1xudmFyIElucHV0Q29udGludW91c0h5ZHJhdGlvbkxhbmUgPVxuLyogICAgKi9cbjI7XG52YXIgSW5wdXRDb250aW51b3VzTGFuZSA9XG4vKiAgICAgICAgICAgICAqL1xuNDtcbnZhciBEZWZhdWx0SHlkcmF0aW9uTGFuZSA9XG4vKiAgICAgICAgICAgICovXG44O1xudmFyIERlZmF1bHRMYW5lID1cbi8qICAgICAgICAgICAgICAgICAgICAgKi9cbjE2O1xudmFyIFRyYW5zaXRpb25IeWRyYXRpb25MYW5lID1cbi8qICAgICAgICAgICAgICAgICovXG4zMjtcbnZhciBUcmFuc2l0aW9uTGFuZXMgPVxuLyogICAgICAgICAgICAgICAgICAgICAgICovXG40MTk0MjQwO1xudmFyIFRyYW5zaXRpb25MYW5lMSA9XG4vKiAgICAgICAgICAgICAgICAgICAgICAgICovXG42NDtcbnZhciBUcmFuc2l0aW9uTGFuZTIgPVxuLyogICAgICAgICAgICAgICAgICAgICAgICAqL1xuMTI4O1xudmFyIFRyYW5zaXRpb25MYW5lMyA9XG4vKiAgICAgICAgICAgICAgICAgICAgICAgICovXG4yNTY7XG52YXIgVHJhbnNpdGlvbkxhbmU0ID1cbi8qICAgICAgICAgICAgICAgICAgICAgICAgKi9cbjUxMjtcbnZhciBUcmFuc2l0aW9uTGFuZTUgPVxuLyogICAgICAgICAgICAgICAgICAgICAgICAqL1xuMTAyNDtcbnZhciBUcmFuc2l0aW9uTGFuZTYgPVxuLyogICAgICAgICAgICAgICAgICAgICAgICAqL1xuMjA0ODtcbnZhciBUcmFuc2l0aW9uTGFuZTcgPVxuLyogICAgICAgICAgICAgICAgICAgICAgICAqL1xuNDA5NjtcbnZhciBUcmFuc2l0aW9uTGFuZTggPVxuLyogICAgICAgICAgICAgICAgICAgICAgICAqL1xuODE5MjtcbnZhciBUcmFuc2l0aW9uTGFuZTkgPVxuLyogICAgICAgICAgICAgICAgICAgICAgICAqL1xuMTYzODQ7XG52YXIgVHJhbnNpdGlvbkxhbmUxMCA9XG4vKiAgICAgICAgICAgICAgICAgICAgICAgKi9cbjMyNzY4O1xudmFyIFRyYW5zaXRpb25MYW5lMTEgPVxuLyogICAgICAgICAgICAgICAgICAgICAgICovXG42NTUzNjtcbnZhciBUcmFuc2l0aW9uTGFuZTEyID1cbi8qICAgICAgICAgICAgICAgICAgICAgICAqL1xuMTMxMDcyO1xudmFyIFRyYW5zaXRpb25MYW5lMTMgPVxuLyogICAgICAgICAgICAgICAgICAgICAgICovXG4yNjIxNDQ7XG52YXIgVHJhbnNpdGlvbkxhbmUxNCA9XG4vKiAgICAgICAgICAgICAgICAgICAgICAgKi9cbjUyNDI4ODtcbnZhciBUcmFuc2l0aW9uTGFuZTE1ID1cbi8qICAgICAgICAgICAgICAgICAgICAgICAqL1xuMTA0ODU3NjtcbnZhciBUcmFuc2l0aW9uTGFuZTE2ID1cbi8qICAgICAgICAgICAgICAgICAgICAgICAqL1xuMjA5NzE1MjtcbnZhciBSZXRyeUxhbmVzID1cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4xMzAwMjM0MjQ7XG52YXIgUmV0cnlMYW5lMSA9XG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbjQxOTQzMDQ7XG52YXIgUmV0cnlMYW5lMiA9XG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbjgzODg2MDg7XG52YXIgUmV0cnlMYW5lMyA9XG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbjE2Nzc3MjE2O1xudmFyIFJldHJ5TGFuZTQgPVxuLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICovXG4zMzU1NDQzMjtcbnZhciBSZXRyeUxhbmU1ID1cbi8qICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuNjcxMDg4NjQ7XG52YXIgU29tZVJldHJ5TGFuZSA9IFJldHJ5TGFuZTE7XG52YXIgU2VsZWN0aXZlSHlkcmF0aW9uTGFuZSA9XG4vKiAgICAgICAgICAqL1xuMTM0MjE3NzI4O1xudmFyIE5vbklkbGVMYW5lcyA9XG4vKiAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbjI2ODQzNTQ1NTtcbnZhciBJZGxlSHlkcmF0aW9uTGFuZSA9XG4vKiAgICAgICAgICAgICAgICovXG4yNjg0MzU0NTY7XG52YXIgSWRsZUxhbmUgPVxuLyogICAgICAgICAgICAgICAgICAgICAgICAqL1xuNTM2ODcwOTEyO1xudmFyIE9mZnNjcmVlbkxhbmUgPVxuLyogICAgICAgICAgICAgICAgICAgKi9cbjEwNzM3NDE4MjQ7IC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBmb3IgdGhlIGV4cGVyaW1lbnRhbCB0aW1lbGluZSAocmVhY3QtZGV2dG9vbHMtdGltZWxpbmUpXG4vLyBJdCBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIExhbmVzIHZhbHVlcyBhYm92ZS5cblxuZnVuY3Rpb24gZ2V0TGFiZWxGb3JMYW5lKGxhbmUpIHtcbiAge1xuICAgIGlmIChsYW5lICYgU3luY0xhbmUpIHtcbiAgICAgIHJldHVybiAnU3luYyc7XG4gICAgfVxuXG4gICAgaWYgKGxhbmUgJiBJbnB1dENvbnRpbnVvdXNIeWRyYXRpb25MYW5lKSB7XG4gICAgICByZXR1cm4gJ0lucHV0Q29udGludW91c0h5ZHJhdGlvbic7XG4gICAgfVxuXG4gICAgaWYgKGxhbmUgJiBJbnB1dENvbnRpbnVvdXNMYW5lKSB7XG4gICAgICByZXR1cm4gJ0lucHV0Q29udGludW91cyc7XG4gICAgfVxuXG4gICAgaWYgKGxhbmUgJiBEZWZhdWx0SHlkcmF0aW9uTGFuZSkge1xuICAgICAgcmV0dXJuICdEZWZhdWx0SHlkcmF0aW9uJztcbiAgICB9XG5cbiAgICBpZiAobGFuZSAmIERlZmF1bHRMYW5lKSB7XG4gICAgICByZXR1cm4gJ0RlZmF1bHQnO1xuICAgIH1cblxuICAgIGlmIChsYW5lICYgVHJhbnNpdGlvbkh5ZHJhdGlvbkxhbmUpIHtcbiAgICAgIHJldHVybiAnVHJhbnNpdGlvbkh5ZHJhdGlvbic7XG4gICAgfVxuXG4gICAgaWYgKGxhbmUgJiBUcmFuc2l0aW9uTGFuZXMpIHtcbiAgICAgIHJldHVybiAnVHJhbnNpdGlvbic7XG4gICAgfVxuXG4gICAgaWYgKGxhbmUgJiBSZXRyeUxhbmVzKSB7XG4gICAgICByZXR1cm4gJ1JldHJ5JztcbiAgICB9XG5cbiAgICBpZiAobGFuZSAmIFNlbGVjdGl2ZUh5ZHJhdGlvbkxhbmUpIHtcbiAgICAgIHJldHVybiAnU2VsZWN0aXZlSHlkcmF0aW9uJztcbiAgICB9XG5cbiAgICBpZiAobGFuZSAmIElkbGVIeWRyYXRpb25MYW5lKSB7XG4gICAgICByZXR1cm4gJ0lkbGVIeWRyYXRpb24nO1xuICAgIH1cblxuICAgIGlmIChsYW5lICYgSWRsZUxhbmUpIHtcbiAgICAgIHJldHVybiAnSWRsZSc7XG4gICAgfVxuXG4gICAgaWYgKGxhbmUgJiBPZmZzY3JlZW5MYW5lKSB7XG4gICAgICByZXR1cm4gJ09mZnNjcmVlbic7XG4gICAgfVxuICB9XG59XG52YXIgTm9UaW1lc3RhbXAgPSAtMTtcbnZhciBuZXh0VHJhbnNpdGlvbkxhbmUgPSBUcmFuc2l0aW9uTGFuZTE7XG52YXIgbmV4dFJldHJ5TGFuZSA9IFJldHJ5TGFuZTE7XG5cbmZ1bmN0aW9uIGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKGxhbmVzKSB7XG4gIHN3aXRjaCAoZ2V0SGlnaGVzdFByaW9yaXR5TGFuZShsYW5lcykpIHtcbiAgICBjYXNlIFN5bmNMYW5lOlxuICAgICAgcmV0dXJuIFN5bmNMYW5lO1xuXG4gICAgY2FzZSBJbnB1dENvbnRpbnVvdXNIeWRyYXRpb25MYW5lOlxuICAgICAgcmV0dXJuIElucHV0Q29udGludW91c0h5ZHJhdGlvbkxhbmU7XG5cbiAgICBjYXNlIElucHV0Q29udGludW91c0xhbmU6XG4gICAgICByZXR1cm4gSW5wdXRDb250aW51b3VzTGFuZTtcblxuICAgIGNhc2UgRGVmYXVsdEh5ZHJhdGlvbkxhbmU6XG4gICAgICByZXR1cm4gRGVmYXVsdEh5ZHJhdGlvbkxhbmU7XG5cbiAgICBjYXNlIERlZmF1bHRMYW5lOlxuICAgICAgcmV0dXJuIERlZmF1bHRMYW5lO1xuXG4gICAgY2FzZSBUcmFuc2l0aW9uSHlkcmF0aW9uTGFuZTpcbiAgICAgIHJldHVybiBUcmFuc2l0aW9uSHlkcmF0aW9uTGFuZTtcblxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmUxOlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmUyOlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmUzOlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmU0OlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmU1OlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmU2OlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmU3OlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmU4OlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmU5OlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmUxMDpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lMTE6XG4gICAgY2FzZSBUcmFuc2l0aW9uTGFuZTEyOlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmUxMzpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lMTQ6XG4gICAgY2FzZSBUcmFuc2l0aW9uTGFuZTE1OlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmUxNjpcbiAgICAgIHJldHVybiBsYW5lcyAmIFRyYW5zaXRpb25MYW5lcztcblxuICAgIGNhc2UgUmV0cnlMYW5lMTpcbiAgICBjYXNlIFJldHJ5TGFuZTI6XG4gICAgY2FzZSBSZXRyeUxhbmUzOlxuICAgIGNhc2UgUmV0cnlMYW5lNDpcbiAgICBjYXNlIFJldHJ5TGFuZTU6XG4gICAgICByZXR1cm4gbGFuZXMgJiBSZXRyeUxhbmVzO1xuXG4gICAgY2FzZSBTZWxlY3RpdmVIeWRyYXRpb25MYW5lOlxuICAgICAgcmV0dXJuIFNlbGVjdGl2ZUh5ZHJhdGlvbkxhbmU7XG5cbiAgICBjYXNlIElkbGVIeWRyYXRpb25MYW5lOlxuICAgICAgcmV0dXJuIElkbGVIeWRyYXRpb25MYW5lO1xuXG4gICAgY2FzZSBJZGxlTGFuZTpcbiAgICAgIHJldHVybiBJZGxlTGFuZTtcblxuICAgIGNhc2UgT2Zmc2NyZWVuTGFuZTpcbiAgICAgIHJldHVybiBPZmZzY3JlZW5MYW5lO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgZXJyb3IoJ1Nob3VsZCBoYXZlIGZvdW5kIG1hdGNoaW5nIGxhbmVzLiBUaGlzIGlzIGEgYnVnIGluIFJlYWN0LicpO1xuICAgICAgfSAvLyBUaGlzIHNob3VsZG4ndCBiZSByZWFjaGFibGUsIGJ1dCBhcyBhIGZhbGxiYWNrLCByZXR1cm4gdGhlIGVudGlyZSBiaXRtYXNrLlxuXG5cbiAgICAgIHJldHVybiBsYW5lcztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXROZXh0TGFuZXMocm9vdCwgd2lwTGFuZXMpIHtcbiAgLy8gRWFybHkgYmFpbG91dCBpZiB0aGVyZSdzIG5vIHBlbmRpbmcgd29yayBsZWZ0LlxuICB2YXIgcGVuZGluZ0xhbmVzID0gcm9vdC5wZW5kaW5nTGFuZXM7XG5cbiAgaWYgKHBlbmRpbmdMYW5lcyA9PT0gTm9MYW5lcykge1xuICAgIHJldHVybiBOb0xhbmVzO1xuICB9XG5cbiAgdmFyIG5leHRMYW5lcyA9IE5vTGFuZXM7XG4gIHZhciBzdXNwZW5kZWRMYW5lcyA9IHJvb3Quc3VzcGVuZGVkTGFuZXM7XG4gIHZhciBwaW5nZWRMYW5lcyA9IHJvb3QucGluZ2VkTGFuZXM7IC8vIERvIG5vdCB3b3JrIG9uIGFueSBpZGxlIHdvcmsgdW50aWwgYWxsIHRoZSBub24taWRsZSB3b3JrIGhhcyBmaW5pc2hlZCxcbiAgLy8gZXZlbiBpZiB0aGUgd29yayBpcyBzdXNwZW5kZWQuXG5cbiAgdmFyIG5vbklkbGVQZW5kaW5nTGFuZXMgPSBwZW5kaW5nTGFuZXMgJiBOb25JZGxlTGFuZXM7XG5cbiAgaWYgKG5vbklkbGVQZW5kaW5nTGFuZXMgIT09IE5vTGFuZXMpIHtcbiAgICB2YXIgbm9uSWRsZVVuYmxvY2tlZExhbmVzID0gbm9uSWRsZVBlbmRpbmdMYW5lcyAmIH5zdXNwZW5kZWRMYW5lcztcblxuICAgIGlmIChub25JZGxlVW5ibG9ja2VkTGFuZXMgIT09IE5vTGFuZXMpIHtcbiAgICAgIG5leHRMYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKG5vbklkbGVVbmJsb2NrZWRMYW5lcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBub25JZGxlUGluZ2VkTGFuZXMgPSBub25JZGxlUGVuZGluZ0xhbmVzICYgcGluZ2VkTGFuZXM7XG5cbiAgICAgIGlmIChub25JZGxlUGluZ2VkTGFuZXMgIT09IE5vTGFuZXMpIHtcbiAgICAgICAgbmV4dExhbmVzID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZXMobm9uSWRsZVBpbmdlZExhbmVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhlIG9ubHkgcmVtYWluaW5nIHdvcmsgaXMgSWRsZS5cbiAgICB2YXIgdW5ibG9ja2VkTGFuZXMgPSBwZW5kaW5nTGFuZXMgJiB+c3VzcGVuZGVkTGFuZXM7XG5cbiAgICBpZiAodW5ibG9ja2VkTGFuZXMgIT09IE5vTGFuZXMpIHtcbiAgICAgIG5leHRMYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKHVuYmxvY2tlZExhbmVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHBpbmdlZExhbmVzICE9PSBOb0xhbmVzKSB7XG4gICAgICAgIG5leHRMYW5lcyA9IGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKHBpbmdlZExhbmVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAobmV4dExhbmVzID09PSBOb0xhbmVzKSB7XG4gICAgLy8gVGhpcyBzaG91bGQgb25seSBiZSByZWFjaGFibGUgaWYgd2UncmUgc3VzcGVuZGVkXG4gICAgLy8gVE9ETzogQ29uc2lkZXIgd2FybmluZyBpbiB0aGlzIHBhdGggaWYgYSBmYWxsYmFjayB0aW1lciBpcyBub3Qgc2NoZWR1bGVkLlxuICAgIHJldHVybiBOb0xhbmVzO1xuICB9IC8vIElmIHdlJ3JlIGFscmVhZHkgaW4gdGhlIG1pZGRsZSBvZiBhIHJlbmRlciwgc3dpdGNoaW5nIGxhbmVzIHdpbGwgaW50ZXJydXB0XG4gIC8vIGl0IGFuZCB3ZSdsbCBsb3NlIG91ciBwcm9ncmVzcy4gV2Ugc2hvdWxkIG9ubHkgZG8gdGhpcyBpZiB0aGUgbmV3IGxhbmVzIGFyZVxuICAvLyBoaWdoZXIgcHJpb3JpdHkuXG5cblxuICBpZiAod2lwTGFuZXMgIT09IE5vTGFuZXMgJiYgd2lwTGFuZXMgIT09IG5leHRMYW5lcyAmJiAvLyBJZiB3ZSBhbHJlYWR5IHN1c3BlbmRlZCB3aXRoIGEgZGVsYXksIHRoZW4gaW50ZXJydXB0aW5nIGlzIGZpbmUuIERvbid0XG4gIC8vIGJvdGhlciB3YWl0aW5nIHVudGlsIHRoZSByb290IGlzIGNvbXBsZXRlLlxuICAod2lwTGFuZXMgJiBzdXNwZW5kZWRMYW5lcykgPT09IE5vTGFuZXMpIHtcbiAgICB2YXIgbmV4dExhbmUgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lKG5leHRMYW5lcyk7XG4gICAgdmFyIHdpcExhbmUgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lKHdpcExhbmVzKTtcblxuICAgIGlmICggLy8gVGVzdHMgd2hldGhlciB0aGUgbmV4dCBsYW5lIGlzIGVxdWFsIG9yIGxvd2VyIHByaW9yaXR5IHRoYW4gdGhlIHdpcFxuICAgIC8vIG9uZS4gVGhpcyB3b3JrcyBiZWNhdXNlIHRoZSBiaXRzIGRlY3JlYXNlIGluIHByaW9yaXR5IGFzIHlvdSBnbyBsZWZ0LlxuICAgIG5leHRMYW5lID49IHdpcExhbmUgfHwgLy8gRGVmYXVsdCBwcmlvcml0eSB1cGRhdGVzIHNob3VsZCBub3QgaW50ZXJydXB0IHRyYW5zaXRpb24gdXBkYXRlcy4gVGhlXG4gICAgLy8gb25seSBkaWZmZXJlbmNlIGJldHdlZW4gZGVmYXVsdCB1cGRhdGVzIGFuZCB0cmFuc2l0aW9uIHVwZGF0ZXMgaXMgdGhhdFxuICAgIC8vIGRlZmF1bHQgdXBkYXRlcyBkbyBub3Qgc3VwcG9ydCByZWZyZXNoIHRyYW5zaXRpb25zLlxuICAgIG5leHRMYW5lID09PSBEZWZhdWx0TGFuZSAmJiAod2lwTGFuZSAmIFRyYW5zaXRpb25MYW5lcykgIT09IE5vTGFuZXMpIHtcbiAgICAgIC8vIEtlZXAgd29ya2luZyBvbiB0aGUgZXhpc3RpbmcgaW4tcHJvZ3Jlc3MgdHJlZS4gRG8gbm90IGludGVycnVwdC5cbiAgICAgIHJldHVybiB3aXBMYW5lcztcbiAgICB9XG4gIH1cblxuICBpZiAoKG5leHRMYW5lcyAmIElucHV0Q29udGludW91c0xhbmUpICE9PSBOb0xhbmVzKSB7XG4gICAgLy8gV2hlbiB1cGRhdGVzIGFyZSBzeW5jIGJ5IGRlZmF1bHQsIHdlIGVudGFuZ2xlIGNvbnRpbnVvdXMgcHJpb3JpdHkgdXBkYXRlc1xuICAgIC8vIGFuZCBkZWZhdWx0IHVwZGF0ZXMsIHNvIHRoZXkgcmVuZGVyIGluIHRoZSBzYW1lIGJhdGNoLiBUaGUgb25seSByZWFzb25cbiAgICAvLyB0aGV5IHVzZSBzZXBhcmF0ZSBsYW5lcyBpcyBiZWNhdXNlIGNvbnRpbnVvdXMgdXBkYXRlcyBzaG91bGQgaW50ZXJydXB0XG4gICAgLy8gdHJhbnNpdGlvbnMsIGJ1dCBkZWZhdWx0IHVwZGF0ZXMgc2hvdWxkIG5vdC5cbiAgICBuZXh0TGFuZXMgfD0gcGVuZGluZ0xhbmVzICYgRGVmYXVsdExhbmU7XG4gIH0gLy8gQ2hlY2sgZm9yIGVudGFuZ2xlZCBsYW5lcyBhbmQgYWRkIHRoZW0gdG8gdGhlIGJhdGNoLlxuICAvL1xuICAvLyBBIGxhbmUgaXMgc2FpZCB0byBiZSBlbnRhbmdsZWQgd2l0aCBhbm90aGVyIHdoZW4gaXQncyBub3QgYWxsb3dlZCB0byByZW5kZXJcbiAgLy8gaW4gYSBiYXRjaCB0aGF0IGRvZXMgbm90IGFsc28gaW5jbHVkZSB0aGUgb3RoZXIgbGFuZS4gVHlwaWNhbGx5IHdlIGRvIHRoaXNcbiAgLy8gd2hlbiBtdWx0aXBsZSB1cGRhdGVzIGhhdmUgdGhlIHNhbWUgc291cmNlLCBhbmQgd2Ugb25seSB3YW50IHRvIHJlc3BvbmQgdG9cbiAgLy8gdGhlIG1vc3QgcmVjZW50IGV2ZW50IGZyb20gdGhhdCBzb3VyY2UuXG4gIC8vXG4gIC8vIE5vdGUgdGhhdCB3ZSBhcHBseSBlbnRhbmdsZW1lbnRzICphZnRlciogY2hlY2tpbmcgZm9yIHBhcnRpYWwgd29yayBhYm92ZS5cbiAgLy8gVGhpcyBtZWFucyB0aGF0IGlmIGEgbGFuZSBpcyBlbnRhbmdsZWQgZHVyaW5nIGFuIGludGVybGVhdmVkIGV2ZW50IHdoaWxlXG4gIC8vIGl0J3MgYWxyZWFkeSByZW5kZXJpbmcsIHdlIHdvbid0IGludGVycnVwdCBpdC4gVGhpcyBpcyBpbnRlbnRpb25hbCwgc2luY2VcbiAgLy8gZW50YW5nbGVtZW50IGlzIHVzdWFsbHkgXCJiZXN0IGVmZm9ydFwiOiB3ZSdsbCB0cnkgb3VyIGJlc3QgdG8gcmVuZGVyIHRoZVxuICAvLyBsYW5lcyBpbiB0aGUgc2FtZSBiYXRjaCwgYnV0IGl0J3Mgbm90IHdvcnRoIHRocm93aW5nIG91dCBwYXJ0aWFsbHlcbiAgLy8gY29tcGxldGVkIHdvcmsgaW4gb3JkZXIgdG8gZG8gaXQuXG4gIC8vIFRPRE86IFJlY29uc2lkZXIgdGhpcy4gVGhlIGNvdW50ZXItYXJndW1lbnQgaXMgdGhhdCB0aGUgcGFydGlhbCB3b3JrXG4gIC8vIHJlcHJlc2VudHMgYW4gaW50ZXJtZWRpYXRlIHN0YXRlLCB3aGljaCB3ZSBkb24ndCB3YW50IHRvIHNob3cgdG8gdGhlIHVzZXIuXG4gIC8vIEFuZCBieSBzcGVuZGluZyBleHRyYSB0aW1lIGZpbmlzaGluZyBpdCwgd2UncmUgaW5jcmVhc2luZyB0aGUgYW1vdW50IG9mXG4gIC8vIHRpbWUgaXQgdGFrZXMgdG8gc2hvdyB0aGUgZmluYWwgc3RhdGUsIHdoaWNoIGlzIHdoYXQgdGhleSBhcmUgYWN0dWFsbHlcbiAgLy8gd2FpdGluZyBmb3IuXG4gIC8vXG4gIC8vIEZvciB0aG9zZSBleGNlcHRpb25zIHdoZXJlIGVudGFuZ2xlbWVudCBpcyBzZW1hbnRpY2FsbHkgaW1wb3J0YW50LCBsaWtlXG4gIC8vIHVzZU11dGFibGVTb3VyY2UsIHdlIHNob3VsZCBlbnN1cmUgdGhhdCB0aGVyZSBpcyBubyBwYXJ0aWFsIHdvcmsgYXQgdGhlXG4gIC8vIHRpbWUgd2UgYXBwbHkgdGhlIGVudGFuZ2xlbWVudC5cblxuXG4gIHZhciBlbnRhbmdsZWRMYW5lcyA9IHJvb3QuZW50YW5nbGVkTGFuZXM7XG5cbiAgaWYgKGVudGFuZ2xlZExhbmVzICE9PSBOb0xhbmVzKSB7XG4gICAgdmFyIGVudGFuZ2xlbWVudHMgPSByb290LmVudGFuZ2xlbWVudHM7XG4gICAgdmFyIGxhbmVzID0gbmV4dExhbmVzICYgZW50YW5nbGVkTGFuZXM7XG5cbiAgICB3aGlsZSAobGFuZXMgPiAwKSB7XG4gICAgICB2YXIgaW5kZXggPSBwaWNrQXJiaXRyYXJ5TGFuZUluZGV4KGxhbmVzKTtcbiAgICAgIHZhciBsYW5lID0gMSA8PCBpbmRleDtcbiAgICAgIG5leHRMYW5lcyB8PSBlbnRhbmdsZW1lbnRzW2luZGV4XTtcbiAgICAgIGxhbmVzICY9IH5sYW5lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXh0TGFuZXM7XG59XG5mdW5jdGlvbiBnZXRNb3N0UmVjZW50RXZlbnRUaW1lKHJvb3QsIGxhbmVzKSB7XG4gIHZhciBldmVudFRpbWVzID0gcm9vdC5ldmVudFRpbWVzO1xuICB2YXIgbW9zdFJlY2VudEV2ZW50VGltZSA9IE5vVGltZXN0YW1wO1xuXG4gIHdoaWxlIChsYW5lcyA+IDApIHtcbiAgICB2YXIgaW5kZXggPSBwaWNrQXJiaXRyYXJ5TGFuZUluZGV4KGxhbmVzKTtcbiAgICB2YXIgbGFuZSA9IDEgPDwgaW5kZXg7XG4gICAgdmFyIGV2ZW50VGltZSA9IGV2ZW50VGltZXNbaW5kZXhdO1xuXG4gICAgaWYgKGV2ZW50VGltZSA+IG1vc3RSZWNlbnRFdmVudFRpbWUpIHtcbiAgICAgIG1vc3RSZWNlbnRFdmVudFRpbWUgPSBldmVudFRpbWU7XG4gICAgfVxuXG4gICAgbGFuZXMgJj0gfmxhbmU7XG4gIH1cblxuICByZXR1cm4gbW9zdFJlY2VudEV2ZW50VGltZTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZUV4cGlyYXRpb25UaW1lKGxhbmUsIGN1cnJlbnRUaW1lKSB7XG4gIHN3aXRjaCAobGFuZSkge1xuICAgIGNhc2UgU3luY0xhbmU6XG4gICAgY2FzZSBJbnB1dENvbnRpbnVvdXNIeWRyYXRpb25MYW5lOlxuICAgIGNhc2UgSW5wdXRDb250aW51b3VzTGFuZTpcbiAgICAgIC8vIFVzZXIgaW50ZXJhY3Rpb25zIHNob3VsZCBleHBpcmUgc2xpZ2h0bHkgbW9yZSBxdWlja2x5LlxuICAgICAgLy9cbiAgICAgIC8vIE5PVEU6IFRoaXMgaXMgc2V0IHRvIHRoZSBjb3JyZXNwb25kaW5nIGNvbnN0YW50IGFzIGluIFNjaGVkdWxlci5qcy5cbiAgICAgIC8vIFdoZW4gd2UgbWFkZSBpdCBsYXJnZXIsIGEgcHJvZHVjdCBtZXRyaWMgaW4gd3d3IHJlZ3Jlc3NlZCwgc3VnZ2VzdGluZ1xuICAgICAgLy8gdGhlcmUncyBhIHVzZXIgaW50ZXJhY3Rpb24gdGhhdCdzIGJlaW5nIHN0YXJ2ZWQgYnkgYSBzZXJpZXMgb2ZcbiAgICAgIC8vIHN5bmNocm9ub3VzIHVwZGF0ZXMuIElmIHRoYXQgdGhlb3J5IGlzIGNvcnJlY3QsIHRoZSBwcm9wZXIgc29sdXRpb24gaXNcbiAgICAgIC8vIHRvIGZpeCB0aGUgc3RhcnZhdGlvbi4gSG93ZXZlciwgdGhpcyBzY2VuYXJpbyBzdXBwb3J0cyB0aGUgaWRlYSB0aGF0XG4gICAgICAvLyBleHBpcmF0aW9uIHRpbWVzIGFyZSBhbiBpbXBvcnRhbnQgc2FmZWd1YXJkIHdoZW4gc3RhcnZhdGlvblxuICAgICAgLy8gZG9lcyBoYXBwZW4uXG4gICAgICByZXR1cm4gY3VycmVudFRpbWUgKyAyNTA7XG5cbiAgICBjYXNlIERlZmF1bHRIeWRyYXRpb25MYW5lOlxuICAgIGNhc2UgRGVmYXVsdExhbmU6XG4gICAgY2FzZSBUcmFuc2l0aW9uSHlkcmF0aW9uTGFuZTpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lMTpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lMjpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lMzpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lNDpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lNTpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lNjpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lNzpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lODpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lOTpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lMTA6XG4gICAgY2FzZSBUcmFuc2l0aW9uTGFuZTExOlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmUxMjpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lMTM6XG4gICAgY2FzZSBUcmFuc2l0aW9uTGFuZTE0OlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmUxNTpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lMTY6XG4gICAgICByZXR1cm4gY3VycmVudFRpbWUgKyA1MDAwO1xuXG4gICAgY2FzZSBSZXRyeUxhbmUxOlxuICAgIGNhc2UgUmV0cnlMYW5lMjpcbiAgICBjYXNlIFJldHJ5TGFuZTM6XG4gICAgY2FzZSBSZXRyeUxhbmU0OlxuICAgIGNhc2UgUmV0cnlMYW5lNTpcbiAgICAgIC8vIFRPRE86IFJldHJpZXMgc2hvdWxkIGJlIGFsbG93ZWQgdG8gZXhwaXJlIGlmIHRoZXkgYXJlIENQVSBib3VuZCBmb3JcbiAgICAgIC8vIHRvbyBsb25nLCBidXQgd2hlbiBJIG1hZGUgdGhpcyBjaGFuZ2UgaXQgY2F1c2VkIGEgc3Bpa2UgaW4gYnJvd3NlclxuICAgICAgLy8gY3Jhc2hlcy4gVGhlcmUgbXVzdCBiZSBzb21lIG90aGVyIHVuZGVybHlpbmcgYnVnOyBub3Qgc3VwZXIgdXJnZW50IGJ1dFxuICAgICAgLy8gaWRlYWxseSBzaG91bGQgZmlndXJlIG91dCB3aHkgYW5kIGZpeCBpdC4gVW5mb3J0dW5hdGVseSB3ZSBkb24ndCBoYXZlXG4gICAgICAvLyBhIHJlcHJvIGZvciB0aGUgY3Jhc2hlcywgb25seSBkZXRlY3RlZCB2aWEgcHJvZHVjdGlvbiBtZXRyaWNzLlxuICAgICAgcmV0dXJuIE5vVGltZXN0YW1wO1xuXG4gICAgY2FzZSBTZWxlY3RpdmVIeWRyYXRpb25MYW5lOlxuICAgIGNhc2UgSWRsZUh5ZHJhdGlvbkxhbmU6XG4gICAgY2FzZSBJZGxlTGFuZTpcbiAgICBjYXNlIE9mZnNjcmVlbkxhbmU6XG4gICAgICAvLyBBbnl0aGluZyBpZGxlIHByaW9yaXR5IG9yIGxvd2VyIHNob3VsZCBuZXZlciBleHBpcmUuXG4gICAgICByZXR1cm4gTm9UaW1lc3RhbXA7XG5cbiAgICBkZWZhdWx0OlxuICAgICAge1xuICAgICAgICBlcnJvcignU2hvdWxkIGhhdmUgZm91bmQgbWF0Y2hpbmcgbGFuZXMuIFRoaXMgaXMgYSBidWcgaW4gUmVhY3QuJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBOb1RpbWVzdGFtcDtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhcnZlZExhbmVzQXNFeHBpcmVkKHJvb3QsIGN1cnJlbnRUaW1lKSB7XG4gIC8vIFRPRE86IFRoaXMgZ2V0cyBjYWxsZWQgZXZlcnkgdGltZSB3ZSB5aWVsZC4gV2UgY2FuIG9wdGltaXplIGJ5IHN0b3JpbmdcbiAgLy8gdGhlIGVhcmxpZXN0IGV4cGlyYXRpb24gdGltZSBvbiB0aGUgcm9vdC4gVGhlbiB1c2UgdGhhdCB0byBxdWlja2x5IGJhaWwgb3V0XG4gIC8vIG9mIHRoaXMgZnVuY3Rpb24uXG4gIHZhciBwZW5kaW5nTGFuZXMgPSByb290LnBlbmRpbmdMYW5lcztcbiAgdmFyIHN1c3BlbmRlZExhbmVzID0gcm9vdC5zdXNwZW5kZWRMYW5lcztcbiAgdmFyIHBpbmdlZExhbmVzID0gcm9vdC5waW5nZWRMYW5lcztcbiAgdmFyIGV4cGlyYXRpb25UaW1lcyA9IHJvb3QuZXhwaXJhdGlvblRpbWVzOyAvLyBJdGVyYXRlIHRocm91Z2ggdGhlIHBlbmRpbmcgbGFuZXMgYW5kIGNoZWNrIGlmIHdlJ3ZlIHJlYWNoZWQgdGhlaXJcbiAgLy8gZXhwaXJhdGlvbiB0aW1lLiBJZiBzbywgd2UnbGwgYXNzdW1lIHRoZSB1cGRhdGUgaXMgYmVpbmcgc3RhcnZlZCBhbmQgbWFya1xuICAvLyBpdCBhcyBleHBpcmVkIHRvIGZvcmNlIGl0IHRvIGZpbmlzaC5cblxuICB2YXIgbGFuZXMgPSBwZW5kaW5nTGFuZXM7XG5cbiAgd2hpbGUgKGxhbmVzID4gMCkge1xuICAgIHZhciBpbmRleCA9IHBpY2tBcmJpdHJhcnlMYW5lSW5kZXgobGFuZXMpO1xuICAgIHZhciBsYW5lID0gMSA8PCBpbmRleDtcbiAgICB2YXIgZXhwaXJhdGlvblRpbWUgPSBleHBpcmF0aW9uVGltZXNbaW5kZXhdO1xuXG4gICAgaWYgKGV4cGlyYXRpb25UaW1lID09PSBOb1RpbWVzdGFtcCkge1xuICAgICAgLy8gRm91bmQgYSBwZW5kaW5nIGxhbmUgd2l0aCBubyBleHBpcmF0aW9uIHRpbWUuIElmIGl0J3Mgbm90IHN1c3BlbmRlZCwgb3JcbiAgICAgIC8vIGlmIGl0J3MgcGluZ2VkLCBhc3N1bWUgaXQncyBDUFUtYm91bmQuIENvbXB1dGUgYSBuZXcgZXhwaXJhdGlvbiB0aW1lXG4gICAgICAvLyB1c2luZyB0aGUgY3VycmVudCB0aW1lLlxuICAgICAgaWYgKChsYW5lICYgc3VzcGVuZGVkTGFuZXMpID09PSBOb0xhbmVzIHx8IChsYW5lICYgcGluZ2VkTGFuZXMpICE9PSBOb0xhbmVzKSB7XG4gICAgICAgIC8vIEFzc3VtZXMgdGltZXN0YW1wcyBhcmUgbW9ub3RvbmljYWxseSBpbmNyZWFzaW5nLlxuICAgICAgICBleHBpcmF0aW9uVGltZXNbaW5kZXhdID0gY29tcHV0ZUV4cGlyYXRpb25UaW1lKGxhbmUsIGN1cnJlbnRUaW1lKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGV4cGlyYXRpb25UaW1lIDw9IGN1cnJlbnRUaW1lKSB7XG4gICAgICAvLyBUaGlzIGxhbmUgZXhwaXJlZFxuICAgICAgcm9vdC5leHBpcmVkTGFuZXMgfD0gbGFuZTtcbiAgICB9XG5cbiAgICBsYW5lcyAmPSB+bGFuZTtcbiAgfVxufSAvLyBUaGlzIHJldHVybnMgdGhlIGhpZ2hlc3QgcHJpb3JpdHkgcGVuZGluZyBsYW5lcyByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhleVxuLy8gYXJlIHN1c3BlbmRlZC5cblxuZnVuY3Rpb24gZ2V0SGlnaGVzdFByaW9yaXR5UGVuZGluZ0xhbmVzKHJvb3QpIHtcbiAgcmV0dXJuIGdldEhpZ2hlc3RQcmlvcml0eUxhbmVzKHJvb3QucGVuZGluZ0xhbmVzKTtcbn1cbmZ1bmN0aW9uIGdldExhbmVzVG9SZXRyeVN5bmNocm9ub3VzbHlPbkVycm9yKHJvb3QpIHtcbiAgdmFyIGV2ZXJ5dGhpbmdCdXRPZmZzY3JlZW4gPSByb290LnBlbmRpbmdMYW5lcyAmIH5PZmZzY3JlZW5MYW5lO1xuXG4gIGlmIChldmVyeXRoaW5nQnV0T2Zmc2NyZWVuICE9PSBOb0xhbmVzKSB7XG4gICAgcmV0dXJuIGV2ZXJ5dGhpbmdCdXRPZmZzY3JlZW47XG4gIH1cblxuICBpZiAoZXZlcnl0aGluZ0J1dE9mZnNjcmVlbiAmIE9mZnNjcmVlbkxhbmUpIHtcbiAgICByZXR1cm4gT2Zmc2NyZWVuTGFuZTtcbiAgfVxuXG4gIHJldHVybiBOb0xhbmVzO1xufVxuZnVuY3Rpb24gaW5jbHVkZXNTeW5jTGFuZShsYW5lcykge1xuICByZXR1cm4gKGxhbmVzICYgU3luY0xhbmUpICE9PSBOb0xhbmVzO1xufVxuZnVuY3Rpb24gaW5jbHVkZXNOb25JZGxlV29yayhsYW5lcykge1xuICByZXR1cm4gKGxhbmVzICYgTm9uSWRsZUxhbmVzKSAhPT0gTm9MYW5lcztcbn1cbmZ1bmN0aW9uIGluY2x1ZGVzT25seVJldHJpZXMobGFuZXMpIHtcbiAgcmV0dXJuIChsYW5lcyAmIFJldHJ5TGFuZXMpID09PSBsYW5lcztcbn1cbmZ1bmN0aW9uIGluY2x1ZGVzT25seU5vblVyZ2VudExhbmVzKGxhbmVzKSB7XG4gIHZhciBVcmdlbnRMYW5lcyA9IFN5bmNMYW5lIHwgSW5wdXRDb250aW51b3VzTGFuZSB8IERlZmF1bHRMYW5lO1xuICByZXR1cm4gKGxhbmVzICYgVXJnZW50TGFuZXMpID09PSBOb0xhbmVzO1xufVxuZnVuY3Rpb24gaW5jbHVkZXNPbmx5VHJhbnNpdGlvbnMobGFuZXMpIHtcbiAgcmV0dXJuIChsYW5lcyAmIFRyYW5zaXRpb25MYW5lcykgPT09IGxhbmVzO1xufVxuZnVuY3Rpb24gaW5jbHVkZXNCbG9ja2luZ0xhbmUocm9vdCwgbGFuZXMpIHtcblxuICB2YXIgU3luY0RlZmF1bHRMYW5lcyA9IElucHV0Q29udGludW91c0h5ZHJhdGlvbkxhbmUgfCBJbnB1dENvbnRpbnVvdXNMYW5lIHwgRGVmYXVsdEh5ZHJhdGlvbkxhbmUgfCBEZWZhdWx0TGFuZTtcbiAgcmV0dXJuIChsYW5lcyAmIFN5bmNEZWZhdWx0TGFuZXMpICE9PSBOb0xhbmVzO1xufVxuZnVuY3Rpb24gaW5jbHVkZXNFeHBpcmVkTGFuZShyb290LCBsYW5lcykge1xuICAvLyBUaGlzIGlzIGEgc2VwYXJhdGUgY2hlY2sgZnJvbSBpbmNsdWRlc0Jsb2NraW5nTGFuZSBiZWNhdXNlIGEgbGFuZSBjYW5cbiAgLy8gZXhwaXJlIGFmdGVyIGEgcmVuZGVyIGhhcyBhbHJlYWR5IHN0YXJ0ZWQuXG4gIHJldHVybiAobGFuZXMgJiByb290LmV4cGlyZWRMYW5lcykgIT09IE5vTGFuZXM7XG59XG5mdW5jdGlvbiBpc1RyYW5zaXRpb25MYW5lKGxhbmUpIHtcbiAgcmV0dXJuIChsYW5lICYgVHJhbnNpdGlvbkxhbmVzKSAhPT0gTm9MYW5lcztcbn1cbmZ1bmN0aW9uIGNsYWltTmV4dFRyYW5zaXRpb25MYW5lKCkge1xuICAvLyBDeWNsZSB0aHJvdWdoIHRoZSBsYW5lcywgYXNzaWduaW5nIGVhY2ggbmV3IHRyYW5zaXRpb24gdG8gdGhlIG5leHQgbGFuZS5cbiAgLy8gSW4gbW9zdCBjYXNlcywgdGhpcyBtZWFucyBldmVyeSB0cmFuc2l0aW9uIGdldHMgaXRzIG93biBsYW5lLCB1bnRpbCB3ZVxuICAvLyBydW4gb3V0IG9mIGxhbmVzIGFuZCBjeWNsZSBiYWNrIHRvIHRoZSBiZWdpbm5pbmcuXG4gIHZhciBsYW5lID0gbmV4dFRyYW5zaXRpb25MYW5lO1xuICBuZXh0VHJhbnNpdGlvbkxhbmUgPDw9IDE7XG5cbiAgaWYgKChuZXh0VHJhbnNpdGlvbkxhbmUgJiBUcmFuc2l0aW9uTGFuZXMpID09PSBOb0xhbmVzKSB7XG4gICAgbmV4dFRyYW5zaXRpb25MYW5lID0gVHJhbnNpdGlvbkxhbmUxO1xuICB9XG5cbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBjbGFpbU5leHRSZXRyeUxhbmUoKSB7XG4gIHZhciBsYW5lID0gbmV4dFJldHJ5TGFuZTtcbiAgbmV4dFJldHJ5TGFuZSA8PD0gMTtcblxuICBpZiAoKG5leHRSZXRyeUxhbmUgJiBSZXRyeUxhbmVzKSA9PT0gTm9MYW5lcykge1xuICAgIG5leHRSZXRyeUxhbmUgPSBSZXRyeUxhbmUxO1xuICB9XG5cbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lKGxhbmVzKSB7XG4gIHJldHVybiBsYW5lcyAmIC1sYW5lcztcbn1cbmZ1bmN0aW9uIHBpY2tBcmJpdHJhcnlMYW5lKGxhbmVzKSB7XG4gIC8vIFRoaXMgd3JhcHBlciBmdW5jdGlvbiBnZXRzIGlubGluZWQuIE9ubHkgZXhpc3RzIHNvIHRvIGNvbW11bmljYXRlIHRoYXQgaXRcbiAgLy8gZG9lc24ndCBtYXR0ZXIgd2hpY2ggYml0IGlzIHNlbGVjdGVkOyB5b3UgY2FuIHBpY2sgYW55IGJpdCB3aXRob3V0XG4gIC8vIGFmZmVjdGluZyB0aGUgYWxnb3JpdGhtcyB3aGVyZSBpdHMgdXNlZC4gSGVyZSBJJ20gdXNpbmdcbiAgLy8gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZSBiZWNhdXNlIGl0IHJlcXVpcmVzIHRoZSBmZXdlc3Qgb3BlcmF0aW9ucy5cbiAgcmV0dXJuIGdldEhpZ2hlc3RQcmlvcml0eUxhbmUobGFuZXMpO1xufVxuXG5mdW5jdGlvbiBwaWNrQXJiaXRyYXJ5TGFuZUluZGV4KGxhbmVzKSB7XG4gIHJldHVybiAzMSAtIGNsejMyKGxhbmVzKTtcbn1cblxuZnVuY3Rpb24gbGFuZVRvSW5kZXgobGFuZSkge1xuICByZXR1cm4gcGlja0FyYml0cmFyeUxhbmVJbmRleChsYW5lKTtcbn1cblxuZnVuY3Rpb24gaW5jbHVkZXNTb21lTGFuZShhLCBiKSB7XG4gIHJldHVybiAoYSAmIGIpICE9PSBOb0xhbmVzO1xufVxuZnVuY3Rpb24gaXNTdWJzZXRPZkxhbmVzKHNldCwgc3Vic2V0KSB7XG4gIHJldHVybiAoc2V0ICYgc3Vic2V0KSA9PT0gc3Vic2V0O1xufVxuZnVuY3Rpb24gbWVyZ2VMYW5lcyhhLCBiKSB7XG4gIHJldHVybiBhIHwgYjtcbn1cbmZ1bmN0aW9uIHJlbW92ZUxhbmVzKHNldCwgc3Vic2V0KSB7XG4gIHJldHVybiBzZXQgJiB+c3Vic2V0O1xufVxuZnVuY3Rpb24gaW50ZXJzZWN0TGFuZXMoYSwgYikge1xuICByZXR1cm4gYSAmIGI7XG59IC8vIFNlZW1zIHJlZHVuZGFudCwgYnV0IGl0IGNoYW5nZXMgdGhlIHR5cGUgZnJvbSBhIHNpbmdsZSBsYW5lICh1c2VkIGZvclxuLy8gdXBkYXRlcykgdG8gYSBncm91cCBvZiBsYW5lcyAodXNlZCBmb3IgZmx1c2hpbmcgd29yaykuXG5cbmZ1bmN0aW9uIGxhbmVUb0xhbmVzKGxhbmUpIHtcbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBoaWdoZXJQcmlvcml0eUxhbmUoYSwgYikge1xuICAvLyBUaGlzIHdvcmtzIGJlY2F1c2UgdGhlIGJpdCByYW5nZXMgZGVjcmVhc2UgaW4gcHJpb3JpdHkgYXMgeW91IGdvIGxlZnQuXG4gIHJldHVybiBhICE9PSBOb0xhbmUgJiYgYSA8IGIgPyBhIDogYjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUxhbmVNYXAoaW5pdGlhbCkge1xuICAvLyBJbnRlbnRpb25hbGx5IHB1c2hpbmcgb25lIGJ5IG9uZS5cbiAgLy8gaHR0cHM6Ly92OC5kZXYvYmxvZy9lbGVtZW50cy1raW5kcyNhdm9pZC1jcmVhdGluZy1ob2xlc1xuICB2YXIgbGFuZU1hcCA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgVG90YWxMYW5lczsgaSsrKSB7XG4gICAgbGFuZU1hcC5wdXNoKGluaXRpYWwpO1xuICB9XG5cbiAgcmV0dXJuIGxhbmVNYXA7XG59XG5mdW5jdGlvbiBtYXJrUm9vdFVwZGF0ZWQocm9vdCwgdXBkYXRlTGFuZSwgZXZlbnRUaW1lKSB7XG4gIHJvb3QucGVuZGluZ0xhbmVzIHw9IHVwZGF0ZUxhbmU7IC8vIElmIHRoZXJlIGFyZSBhbnkgc3VzcGVuZGVkIHRyYW5zaXRpb25zLCBpdCdzIHBvc3NpYmxlIHRoaXMgbmV3IHVwZGF0ZVxuICAvLyBjb3VsZCB1bmJsb2NrIHRoZW0uIENsZWFyIHRoZSBzdXNwZW5kZWQgbGFuZXMgc28gdGhhdCB3ZSBjYW4gdHJ5IHJlbmRlcmluZ1xuICAvLyB0aGVtIGFnYWluLlxuICAvL1xuICAvLyBUT0RPOiBXZSByZWFsbHkgb25seSBuZWVkIHRvIHVuc3VzcGVuZCBvbmx5IGxhbmVzIHRoYXQgYXJlIGluIHRoZVxuICAvLyBgc3VidHJlZUxhbmVzYCBvZiB0aGUgdXBkYXRlZCBmaWJlciwgb3IgdGhlIHVwZGF0ZSBsYW5lcyBvZiB0aGUgcmV0dXJuXG4gIC8vIHBhdGguIFRoaXMgd291bGQgZXhjbHVkZSBzdXNwZW5kZWQgdXBkYXRlcyBpbiBhbiB1bnJlbGF0ZWQgc2libGluZyB0cmVlLFxuICAvLyBzaW5jZSB0aGVyZSdzIG5vIHdheSBmb3IgdGhpcyB1cGRhdGUgdG8gdW5ibG9jayBpdC5cbiAgLy9cbiAgLy8gV2UgZG9uJ3QgZG8gdGhpcyBpZiB0aGUgaW5jb21pbmcgdXBkYXRlIGlzIGlkbGUsIGJlY2F1c2Ugd2UgbmV2ZXIgcHJvY2Vzc1xuICAvLyBpZGxlIHVwZGF0ZXMgdW50aWwgYWZ0ZXIgYWxsIHRoZSByZWd1bGFyIHVwZGF0ZXMgaGF2ZSBmaW5pc2hlZDsgdGhlcmUncyBub1xuICAvLyB3YXkgaXQgY291bGQgdW5ibG9jayBhIHRyYW5zaXRpb24uXG5cbiAgaWYgKHVwZGF0ZUxhbmUgIT09IElkbGVMYW5lKSB7XG4gICAgcm9vdC5zdXNwZW5kZWRMYW5lcyA9IE5vTGFuZXM7XG4gICAgcm9vdC5waW5nZWRMYW5lcyA9IE5vTGFuZXM7XG4gIH1cblxuICB2YXIgZXZlbnRUaW1lcyA9IHJvb3QuZXZlbnRUaW1lcztcbiAgdmFyIGluZGV4ID0gbGFuZVRvSW5kZXgodXBkYXRlTGFuZSk7IC8vIFdlIGNhbiBhbHdheXMgb3ZlcndyaXRlIGFuIGV4aXN0aW5nIHRpbWVzdGFtcCBiZWNhdXNlIHdlIHByZWZlciB0aGUgbW9zdFxuICAvLyByZWNlbnQgZXZlbnQsIGFuZCB3ZSBhc3N1bWUgdGltZSBpcyBtb25vdG9uaWNhbGx5IGluY3JlYXNpbmcuXG5cbiAgZXZlbnRUaW1lc1tpbmRleF0gPSBldmVudFRpbWU7XG59XG5mdW5jdGlvbiBtYXJrUm9vdFN1c3BlbmRlZChyb290LCBzdXNwZW5kZWRMYW5lcykge1xuICByb290LnN1c3BlbmRlZExhbmVzIHw9IHN1c3BlbmRlZExhbmVzO1xuICByb290LnBpbmdlZExhbmVzICY9IH5zdXNwZW5kZWRMYW5lczsgLy8gVGhlIHN1c3BlbmRlZCBsYW5lcyBhcmUgbm8gbG9uZ2VyIENQVS1ib3VuZC4gQ2xlYXIgdGhlaXIgZXhwaXJhdGlvbiB0aW1lcy5cblxuICB2YXIgZXhwaXJhdGlvblRpbWVzID0gcm9vdC5leHBpcmF0aW9uVGltZXM7XG4gIHZhciBsYW5lcyA9IHN1c3BlbmRlZExhbmVzO1xuXG4gIHdoaWxlIChsYW5lcyA+IDApIHtcbiAgICB2YXIgaW5kZXggPSBwaWNrQXJiaXRyYXJ5TGFuZUluZGV4KGxhbmVzKTtcbiAgICB2YXIgbGFuZSA9IDEgPDwgaW5kZXg7XG4gICAgZXhwaXJhdGlvblRpbWVzW2luZGV4XSA9IE5vVGltZXN0YW1wO1xuICAgIGxhbmVzICY9IH5sYW5lO1xuICB9XG59XG5mdW5jdGlvbiBtYXJrUm9vdFBpbmdlZChyb290LCBwaW5nZWRMYW5lcywgZXZlbnRUaW1lKSB7XG4gIHJvb3QucGluZ2VkTGFuZXMgfD0gcm9vdC5zdXNwZW5kZWRMYW5lcyAmIHBpbmdlZExhbmVzO1xufVxuZnVuY3Rpb24gbWFya1Jvb3RGaW5pc2hlZChyb290LCByZW1haW5pbmdMYW5lcykge1xuICB2YXIgbm9Mb25nZXJQZW5kaW5nTGFuZXMgPSByb290LnBlbmRpbmdMYW5lcyAmIH5yZW1haW5pbmdMYW5lcztcbiAgcm9vdC5wZW5kaW5nTGFuZXMgPSByZW1haW5pbmdMYW5lczsgLy8gTGV0J3MgdHJ5IGV2ZXJ5dGhpbmcgYWdhaW5cblxuICByb290LnN1c3BlbmRlZExhbmVzID0gTm9MYW5lcztcbiAgcm9vdC5waW5nZWRMYW5lcyA9IE5vTGFuZXM7XG4gIHJvb3QuZXhwaXJlZExhbmVzICY9IHJlbWFpbmluZ0xhbmVzO1xuICByb290Lm11dGFibGVSZWFkTGFuZXMgJj0gcmVtYWluaW5nTGFuZXM7XG4gIHJvb3QuZW50YW5nbGVkTGFuZXMgJj0gcmVtYWluaW5nTGFuZXM7XG4gIHZhciBlbnRhbmdsZW1lbnRzID0gcm9vdC5lbnRhbmdsZW1lbnRzO1xuICB2YXIgZXZlbnRUaW1lcyA9IHJvb3QuZXZlbnRUaW1lcztcbiAgdmFyIGV4cGlyYXRpb25UaW1lcyA9IHJvb3QuZXhwaXJhdGlvblRpbWVzOyAvLyBDbGVhciB0aGUgbGFuZXMgdGhhdCBubyBsb25nZXIgaGF2ZSBwZW5kaW5nIHdvcmtcblxuICB2YXIgbGFuZXMgPSBub0xvbmdlclBlbmRpbmdMYW5lcztcblxuICB3aGlsZSAobGFuZXMgPiAwKSB7XG4gICAgdmFyIGluZGV4ID0gcGlja0FyYml0cmFyeUxhbmVJbmRleChsYW5lcyk7XG4gICAgdmFyIGxhbmUgPSAxIDw8IGluZGV4O1xuICAgIGVudGFuZ2xlbWVudHNbaW5kZXhdID0gTm9MYW5lcztcbiAgICBldmVudFRpbWVzW2luZGV4XSA9IE5vVGltZXN0YW1wO1xuICAgIGV4cGlyYXRpb25UaW1lc1tpbmRleF0gPSBOb1RpbWVzdGFtcDtcbiAgICBsYW5lcyAmPSB+bGFuZTtcbiAgfVxufVxuZnVuY3Rpb24gbWFya1Jvb3RFbnRhbmdsZWQocm9vdCwgZW50YW5nbGVkTGFuZXMpIHtcbiAgLy8gSW4gYWRkaXRpb24gdG8gZW50YW5nbGluZyBlYWNoIG9mIHRoZSBnaXZlbiBsYW5lcyB3aXRoIGVhY2ggb3RoZXIsIHdlIGFsc29cbiAgLy8gaGF2ZSB0byBjb25zaWRlciBfdHJhbnNpdGl2ZV8gZW50YW5nbGVtZW50cy4gRm9yIGVhY2ggbGFuZSB0aGF0IGlzIGFscmVhZHlcbiAgLy8gZW50YW5nbGVkIHdpdGggKmFueSogb2YgdGhlIGdpdmVuIGxhbmVzLCB0aGF0IGxhbmUgaXMgbm93IHRyYW5zaXRpdmVseVxuICAvLyBlbnRhbmdsZWQgd2l0aCAqYWxsKiB0aGUgZ2l2ZW4gbGFuZXMuXG4gIC8vXG4gIC8vIFRyYW5zbGF0ZWQ6IElmIEMgaXMgZW50YW5nbGVkIHdpdGggQSwgdGhlbiBlbnRhbmdsaW5nIEEgd2l0aCBCIGFsc29cbiAgLy8gZW50YW5nbGVzIEMgd2l0aCBCLlxuICAvL1xuICAvLyBJZiB0aGlzIGlzIGhhcmQgdG8gZ3Jhc3AsIGl0IG1pZ2h0IGhlbHAgdG8gaW50ZW50aW9uYWxseSBicmVhayB0aGlzXG4gIC8vIGZ1bmN0aW9uIGFuZCBsb29rIGF0IHRoZSB0ZXN0cyB0aGF0IGZhaWwgaW4gUmVhY3RUcmFuc2l0aW9uLXRlc3QuanMuIFRyeVxuICAvLyBjb21tZW50aW5nIG91dCBvbmUgb2YgdGhlIGNvbmRpdGlvbnMgYmVsb3cuXG4gIHZhciByb290RW50YW5nbGVkTGFuZXMgPSByb290LmVudGFuZ2xlZExhbmVzIHw9IGVudGFuZ2xlZExhbmVzO1xuICB2YXIgZW50YW5nbGVtZW50cyA9IHJvb3QuZW50YW5nbGVtZW50cztcbiAgdmFyIGxhbmVzID0gcm9vdEVudGFuZ2xlZExhbmVzO1xuXG4gIHdoaWxlIChsYW5lcykge1xuICAgIHZhciBpbmRleCA9IHBpY2tBcmJpdHJhcnlMYW5lSW5kZXgobGFuZXMpO1xuICAgIHZhciBsYW5lID0gMSA8PCBpbmRleDtcblxuICAgIGlmICggLy8gSXMgdGhpcyBvbmUgb2YgdGhlIG5ld2x5IGVudGFuZ2xlZCBsYW5lcz9cbiAgICBsYW5lICYgZW50YW5nbGVkTGFuZXMgfCAvLyBJcyB0aGlzIGxhbmUgdHJhbnNpdGl2ZWx5IGVudGFuZ2xlZCB3aXRoIHRoZSBuZXdseSBlbnRhbmdsZWQgbGFuZXM/XG4gICAgZW50YW5nbGVtZW50c1tpbmRleF0gJiBlbnRhbmdsZWRMYW5lcykge1xuICAgICAgZW50YW5nbGVtZW50c1tpbmRleF0gfD0gZW50YW5nbGVkTGFuZXM7XG4gICAgfVxuXG4gICAgbGFuZXMgJj0gfmxhbmU7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEJ1bXBlZExhbmVGb3JIeWRyYXRpb24ocm9vdCwgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIHJlbmRlckxhbmUgPSBnZXRIaWdoZXN0UHJpb3JpdHlMYW5lKHJlbmRlckxhbmVzKTtcbiAgdmFyIGxhbmU7XG5cbiAgc3dpdGNoIChyZW5kZXJMYW5lKSB7XG4gICAgY2FzZSBJbnB1dENvbnRpbnVvdXNMYW5lOlxuICAgICAgbGFuZSA9IElucHV0Q29udGludW91c0h5ZHJhdGlvbkxhbmU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgRGVmYXVsdExhbmU6XG4gICAgICBsYW5lID0gRGVmYXVsdEh5ZHJhdGlvbkxhbmU7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmUxOlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmUyOlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmUzOlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmU0OlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmU1OlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmU2OlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmU3OlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmU4OlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmU5OlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmUxMDpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lMTE6XG4gICAgY2FzZSBUcmFuc2l0aW9uTGFuZTEyOlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmUxMzpcbiAgICBjYXNlIFRyYW5zaXRpb25MYW5lMTQ6XG4gICAgY2FzZSBUcmFuc2l0aW9uTGFuZTE1OlxuICAgIGNhc2UgVHJhbnNpdGlvbkxhbmUxNjpcbiAgICBjYXNlIFJldHJ5TGFuZTE6XG4gICAgY2FzZSBSZXRyeUxhbmUyOlxuICAgIGNhc2UgUmV0cnlMYW5lMzpcbiAgICBjYXNlIFJldHJ5TGFuZTQ6XG4gICAgY2FzZSBSZXRyeUxhbmU1OlxuICAgICAgbGFuZSA9IFRyYW5zaXRpb25IeWRyYXRpb25MYW5lO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIElkbGVMYW5lOlxuICAgICAgbGFuZSA9IElkbGVIeWRyYXRpb25MYW5lO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgLy8gRXZlcnl0aGluZyBlbHNlIGlzIGFscmVhZHkgZWl0aGVyIGEgaHlkcmF0aW9uIGxhbmUsIG9yIHNob3VsZG4ndFxuICAgICAgLy8gYmUgcmV0cmllZCBhdCBhIGh5ZHJhdGlvbiBsYW5lLlxuICAgICAgbGFuZSA9IE5vTGFuZTtcbiAgICAgIGJyZWFrO1xuICB9IC8vIENoZWNrIGlmIHRoZSBsYW5lIHdlIGNob3NlIGlzIHN1c3BlbmRlZC4gSWYgc28sIHRoYXQgaW5kaWNhdGVzIHRoYXQgd2VcbiAgLy8gYWxyZWFkeSBhdHRlbXB0ZWQgYW5kIGZhaWxlZCB0byBoeWRyYXRlIGF0IHRoYXQgbGV2ZWwuIEFsc28gY2hlY2sgaWYgd2UncmVcbiAgLy8gYWxyZWFkeSByZW5kZXJpbmcgdGhhdCBsYW5lLCB3aGljaCBpcyByYXJlIGJ1dCBjb3VsZCBoYXBwZW4uXG5cblxuICBpZiAoKGxhbmUgJiAocm9vdC5zdXNwZW5kZWRMYW5lcyB8IHJlbmRlckxhbmVzKSkgIT09IE5vTGFuZSkge1xuICAgIC8vIEdpdmUgdXAgdHJ5aW5nIHRvIGh5ZHJhdGUgYW5kIGZhbGwgYmFjayB0byBjbGllbnQgcmVuZGVyLlxuICAgIHJldHVybiBOb0xhbmU7XG4gIH1cblxuICByZXR1cm4gbGFuZTtcbn1cbmZ1bmN0aW9uIGFkZEZpYmVyVG9MYW5lc01hcChyb290LCBmaWJlciwgbGFuZXMpIHtcblxuICBpZiAoIWlzRGV2VG9vbHNQcmVzZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHBlbmRpbmdVcGRhdGVyc0xhbmVNYXAgPSByb290LnBlbmRpbmdVcGRhdGVyc0xhbmVNYXA7XG5cbiAgd2hpbGUgKGxhbmVzID4gMCkge1xuICAgIHZhciBpbmRleCA9IGxhbmVUb0luZGV4KGxhbmVzKTtcbiAgICB2YXIgbGFuZSA9IDEgPDwgaW5kZXg7XG4gICAgdmFyIHVwZGF0ZXJzID0gcGVuZGluZ1VwZGF0ZXJzTGFuZU1hcFtpbmRleF07XG4gICAgdXBkYXRlcnMuYWRkKGZpYmVyKTtcbiAgICBsYW5lcyAmPSB+bGFuZTtcbiAgfVxufVxuZnVuY3Rpb24gbW92ZVBlbmRpbmdGaWJlcnNUb01lbW9pemVkKHJvb3QsIGxhbmVzKSB7XG5cbiAgaWYgKCFpc0RldlRvb2xzUHJlc2VudCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwZW5kaW5nVXBkYXRlcnNMYW5lTWFwID0gcm9vdC5wZW5kaW5nVXBkYXRlcnNMYW5lTWFwO1xuICB2YXIgbWVtb2l6ZWRVcGRhdGVycyA9IHJvb3QubWVtb2l6ZWRVcGRhdGVycztcblxuICB3aGlsZSAobGFuZXMgPiAwKSB7XG4gICAgdmFyIGluZGV4ID0gbGFuZVRvSW5kZXgobGFuZXMpO1xuICAgIHZhciBsYW5lID0gMSA8PCBpbmRleDtcbiAgICB2YXIgdXBkYXRlcnMgPSBwZW5kaW5nVXBkYXRlcnNMYW5lTWFwW2luZGV4XTtcblxuICAgIGlmICh1cGRhdGVycy5zaXplID4gMCkge1xuICAgICAgdXBkYXRlcnMuZm9yRWFjaChmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgICAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcblxuICAgICAgICBpZiAoYWx0ZXJuYXRlID09PSBudWxsIHx8ICFtZW1vaXplZFVwZGF0ZXJzLmhhcyhhbHRlcm5hdGUpKSB7XG4gICAgICAgICAgbWVtb2l6ZWRVcGRhdGVycy5hZGQoZmliZXIpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHVwZGF0ZXJzLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgbGFuZXMgJj0gfmxhbmU7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25zRm9yTGFuZXMocm9vdCwgbGFuZXMpIHtcbiAge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbnZhciBEaXNjcmV0ZUV2ZW50UHJpb3JpdHkgPSBTeW5jTGFuZTtcbnZhciBDb250aW51b3VzRXZlbnRQcmlvcml0eSA9IElucHV0Q29udGludW91c0xhbmU7XG52YXIgRGVmYXVsdEV2ZW50UHJpb3JpdHkgPSBEZWZhdWx0TGFuZTtcbnZhciBJZGxlRXZlbnRQcmlvcml0eSA9IElkbGVMYW5lO1xudmFyIGN1cnJlbnRVcGRhdGVQcmlvcml0eSA9IE5vTGFuZTtcbmZ1bmN0aW9uIGdldEN1cnJlbnRVcGRhdGVQcmlvcml0eSgpIHtcbiAgcmV0dXJuIGN1cnJlbnRVcGRhdGVQcmlvcml0eTtcbn1cbmZ1bmN0aW9uIHNldEN1cnJlbnRVcGRhdGVQcmlvcml0eShuZXdQcmlvcml0eSkge1xuICBjdXJyZW50VXBkYXRlUHJpb3JpdHkgPSBuZXdQcmlvcml0eTtcbn1cbmZ1bmN0aW9uIHJ1bldpdGhQcmlvcml0eShwcmlvcml0eSwgZm4pIHtcbiAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBjdXJyZW50VXBkYXRlUHJpb3JpdHk7XG5cbiAgdHJ5IHtcbiAgICBjdXJyZW50VXBkYXRlUHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICByZXR1cm4gZm4oKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBjdXJyZW50VXBkYXRlUHJpb3JpdHkgPSBwcmV2aW91c1ByaW9yaXR5O1xuICB9XG59XG5mdW5jdGlvbiBoaWdoZXJFdmVudFByaW9yaXR5KGEsIGIpIHtcbiAgcmV0dXJuIGEgIT09IDAgJiYgYSA8IGIgPyBhIDogYjtcbn1cbmZ1bmN0aW9uIGxvd2VyRXZlbnRQcmlvcml0eShhLCBiKSB7XG4gIHJldHVybiBhID09PSAwIHx8IGEgPiBiID8gYSA6IGI7XG59XG5mdW5jdGlvbiBpc0hpZ2hlckV2ZW50UHJpb3JpdHkoYSwgYikge1xuICByZXR1cm4gYSAhPT0gMCAmJiBhIDwgYjtcbn1cbmZ1bmN0aW9uIGxhbmVzVG9FdmVudFByaW9yaXR5KGxhbmVzKSB7XG4gIHZhciBsYW5lID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZShsYW5lcyk7XG5cbiAgaWYgKCFpc0hpZ2hlckV2ZW50UHJpb3JpdHkoRGlzY3JldGVFdmVudFByaW9yaXR5LCBsYW5lKSkge1xuICAgIHJldHVybiBEaXNjcmV0ZUV2ZW50UHJpb3JpdHk7XG4gIH1cblxuICBpZiAoIWlzSGlnaGVyRXZlbnRQcmlvcml0eShDb250aW51b3VzRXZlbnRQcmlvcml0eSwgbGFuZSkpIHtcbiAgICByZXR1cm4gQ29udGludW91c0V2ZW50UHJpb3JpdHk7XG4gIH1cblxuICBpZiAoaW5jbHVkZXNOb25JZGxlV29yayhsYW5lKSkge1xuICAgIHJldHVybiBEZWZhdWx0RXZlbnRQcmlvcml0eTtcbiAgfVxuXG4gIHJldHVybiBJZGxlRXZlbnRQcmlvcml0eTtcbn1cblxuLy8gVGhpcyBpcyBpbXBvcnRlZCBieSB0aGUgZXZlbnQgcmVwbGF5aW5nIGltcGxlbWVudGF0aW9uIGluIFJlYWN0IERPTS4gSXQnc1xuLy8gaW4gYSBzZXBhcmF0ZSBmaWxlIHRvIGJyZWFrIGEgY2lyY3VsYXIgZGVwZW5kZW5jeSBiZXR3ZWVuIHRoZSByZW5kZXJlciBhbmRcbi8vIHRoZSByZWNvbmNpbGVyLlxuZnVuY3Rpb24gaXNSb290RGVoeWRyYXRlZChyb290KSB7XG4gIHZhciBjdXJyZW50U3RhdGUgPSByb290LmN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgcmV0dXJuIGN1cnJlbnRTdGF0ZS5pc0RlaHlkcmF0ZWQ7XG59XG5cbnZhciBfYXR0ZW1wdFN5bmNocm9ub3VzSHlkcmF0aW9uO1xuXG5mdW5jdGlvbiBzZXRBdHRlbXB0U3luY2hyb25vdXNIeWRyYXRpb24oZm4pIHtcbiAgX2F0dGVtcHRTeW5jaHJvbm91c0h5ZHJhdGlvbiA9IGZuO1xufVxuZnVuY3Rpb24gYXR0ZW1wdFN5bmNocm9ub3VzSHlkcmF0aW9uKGZpYmVyKSB7XG4gIF9hdHRlbXB0U3luY2hyb25vdXNIeWRyYXRpb24oZmliZXIpO1xufVxudmFyIGF0dGVtcHRDb250aW51b3VzSHlkcmF0aW9uO1xuZnVuY3Rpb24gc2V0QXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24oZm4pIHtcbiAgYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24gPSBmbjtcbn1cbnZhciBhdHRlbXB0SHlkcmF0aW9uQXRDdXJyZW50UHJpb3JpdHk7XG5mdW5jdGlvbiBzZXRBdHRlbXB0SHlkcmF0aW9uQXRDdXJyZW50UHJpb3JpdHkoZm4pIHtcbiAgYXR0ZW1wdEh5ZHJhdGlvbkF0Q3VycmVudFByaW9yaXR5ID0gZm47XG59XG52YXIgZ2V0Q3VycmVudFVwZGF0ZVByaW9yaXR5JDE7XG5mdW5jdGlvbiBzZXRHZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkoZm4pIHtcbiAgZ2V0Q3VycmVudFVwZGF0ZVByaW9yaXR5JDEgPSBmbjtcbn1cbnZhciBhdHRlbXB0SHlkcmF0aW9uQXRQcmlvcml0eTtcbmZ1bmN0aW9uIHNldEF0dGVtcHRIeWRyYXRpb25BdFByaW9yaXR5KGZuKSB7XG4gIGF0dGVtcHRIeWRyYXRpb25BdFByaW9yaXR5ID0gZm47XG59IC8vIFRPRE86IFVwZ3JhZGUgdGhpcyBkZWZpbml0aW9uIG9uY2Ugd2UncmUgb24gYSBuZXdlciB2ZXJzaW9uIG9mIEZsb3cgdGhhdFxuLy8gaGFzIHRoaXMgZGVmaW5pdGlvbiBidWlsdC1pbi5cblxudmFyIGhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQgPSBmYWxzZTsgLy8gVGhlIHF1ZXVlIG9mIGRpc2NyZXRlIGV2ZW50cyB0byBiZSByZXBsYXllZC5cblxudmFyIHF1ZXVlZERpc2NyZXRlRXZlbnRzID0gW107IC8vIEluZGljYXRlcyBpZiBhbnkgY29udGludW91cyBldmVudCB0YXJnZXRzIGFyZSBub24tbnVsbCBmb3IgZWFybHkgYmFpbG91dC5cbi8vIGlmIHRoZSBsYXN0IHRhcmdldCB3YXMgZGVoeWRyYXRlZC5cblxudmFyIHF1ZXVlZEZvY3VzID0gbnVsbDtcbnZhciBxdWV1ZWREcmFnID0gbnVsbDtcbnZhciBxdWV1ZWRNb3VzZSA9IG51bGw7IC8vIEZvciBwb2ludGVyIGV2ZW50cyB0aGVyZSBjYW4gYmUgb25lIGxhdGVzdCBldmVudCBwZXIgcG9pbnRlcklkLlxuXG52YXIgcXVldWVkUG9pbnRlcnMgPSBuZXcgTWFwKCk7XG52YXIgcXVldWVkUG9pbnRlckNhcHR1cmVzID0gbmV3IE1hcCgpOyAvLyBXZSBjb3VsZCBjb25zaWRlciByZXBsYXlpbmcgc2VsZWN0aW9uY2hhbmdlIGFuZCB0b3VjaG1vdmVzIHRvby5cblxudmFyIHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0cyA9IFtdO1xudmFyIGRpc2NyZXRlUmVwbGF5YWJsZUV2ZW50cyA9IFsnbW91c2Vkb3duJywgJ21vdXNldXAnLCAndG91Y2hjYW5jZWwnLCAndG91Y2hlbmQnLCAndG91Y2hzdGFydCcsICdhdXhjbGljaycsICdkYmxjbGljaycsICdwb2ludGVyY2FuY2VsJywgJ3BvaW50ZXJkb3duJywgJ3BvaW50ZXJ1cCcsICdkcmFnZW5kJywgJ2RyYWdzdGFydCcsICdkcm9wJywgJ2NvbXBvc2l0aW9uZW5kJywgJ2NvbXBvc2l0aW9uc3RhcnQnLCAna2V5ZG93bicsICdrZXlwcmVzcycsICdrZXl1cCcsICdpbnB1dCcsICd0ZXh0SW5wdXQnLCAvLyBJbnRlbnRpb25hbGx5IGNhbWVsQ2FzZVxuJ2NvcHknLCAnY3V0JywgJ3Bhc3RlJywgJ2NsaWNrJywgJ2NoYW5nZScsICdjb250ZXh0bWVudScsICdyZXNldCcsICdzdWJtaXQnXTtcbmZ1bmN0aW9uIGlzRGlzY3JldGVFdmVudFRoYXRSZXF1aXJlc0h5ZHJhdGlvbihldmVudFR5cGUpIHtcbiAgcmV0dXJuIGRpc2NyZXRlUmVwbGF5YWJsZUV2ZW50cy5pbmRleE9mKGV2ZW50VHlwZSkgPiAtMTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUXVldWVkUmVwbGF5YWJsZUV2ZW50KGJsb2NrZWRPbiwgZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCB0YXJnZXRDb250YWluZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiB7XG4gICAgYmxvY2tlZE9uOiBibG9ja2VkT24sXG4gICAgZG9tRXZlbnROYW1lOiBkb21FdmVudE5hbWUsXG4gICAgZXZlbnRTeXN0ZW1GbGFnczogZXZlbnRTeXN0ZW1GbGFncyxcbiAgICBuYXRpdmVFdmVudDogbmF0aXZlRXZlbnQsXG4gICAgdGFyZ2V0Q29udGFpbmVyczogW3RhcmdldENvbnRhaW5lcl1cbiAgfTtcbn1cblxuZnVuY3Rpb24gY2xlYXJJZkNvbnRpbnVvdXNFdmVudChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSB7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSAnZm9jdXNpbic6XG4gICAgY2FzZSAnZm9jdXNvdXQnOlxuICAgICAgcXVldWVkRm9jdXMgPSBudWxsO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdkcmFnZW50ZXInOlxuICAgIGNhc2UgJ2RyYWdsZWF2ZSc6XG4gICAgICBxdWV1ZWREcmFnID0gbnVsbDtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnbW91c2VvdmVyJzpcbiAgICBjYXNlICdtb3VzZW91dCc6XG4gICAgICBxdWV1ZWRNb3VzZSA9IG51bGw7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3BvaW50ZXJvdmVyJzpcbiAgICBjYXNlICdwb2ludGVyb3V0JzpcbiAgICAgIHtcbiAgICAgICAgdmFyIHBvaW50ZXJJZCA9IG5hdGl2ZUV2ZW50LnBvaW50ZXJJZDtcbiAgICAgICAgcXVldWVkUG9pbnRlcnMuZGVsZXRlKHBvaW50ZXJJZCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSAnZ290cG9pbnRlcmNhcHR1cmUnOlxuICAgIGNhc2UgJ2xvc3Rwb2ludGVyY2FwdHVyZSc6XG4gICAgICB7XG4gICAgICAgIHZhciBfcG9pbnRlcklkID0gbmF0aXZlRXZlbnQucG9pbnRlcklkO1xuICAgICAgICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZGVsZXRlKF9wb2ludGVySWQpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KGV4aXN0aW5nUXVldWVkRXZlbnQsIGJsb2NrZWRPbiwgZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCB0YXJnZXRDb250YWluZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIGlmIChleGlzdGluZ1F1ZXVlZEV2ZW50ID09PSBudWxsIHx8IGV4aXN0aW5nUXVldWVkRXZlbnQubmF0aXZlRXZlbnQgIT09IG5hdGl2ZUV2ZW50KSB7XG4gICAgdmFyIHF1ZXVlZEV2ZW50ID0gY3JlYXRlUXVldWVkUmVwbGF5YWJsZUV2ZW50KGJsb2NrZWRPbiwgZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCB0YXJnZXRDb250YWluZXIsIG5hdGl2ZUV2ZW50KTtcblxuICAgIGlmIChibG9ja2VkT24gIT09IG51bGwpIHtcbiAgICAgIHZhciBfZmliZXIyID0gZ2V0SW5zdGFuY2VGcm9tTm9kZShibG9ja2VkT24pO1xuXG4gICAgICBpZiAoX2ZpYmVyMiAhPT0gbnVsbCkge1xuICAgICAgICAvLyBBdHRlbXB0IHRvIGluY3JlYXNlIHRoZSBwcmlvcml0eSBvZiB0aGlzIHRhcmdldC5cbiAgICAgICAgYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24oX2ZpYmVyMik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHF1ZXVlZEV2ZW50O1xuICB9IC8vIElmIHdlIGhhdmUgYWxyZWFkeSBxdWV1ZWQgdGhpcyBleGFjdCBldmVudCwgdGhlbiBpdCdzIGJlY2F1c2VcbiAgLy8gdGhlIGRpZmZlcmVudCBldmVudCBzeXN0ZW1zIGhhdmUgZGlmZmVyZW50IERPTSBldmVudCBsaXN0ZW5lcnMuXG4gIC8vIFdlIGNhbiBhY2N1bXVsYXRlIHRoZSBmbGFncywgYW5kIHRoZSB0YXJnZXRDb250YWluZXJzLCBhbmRcbiAgLy8gc3RvcmUgYSBzaW5nbGUgZXZlbnQgdG8gYmUgcmVwbGF5ZWQuXG5cblxuICBleGlzdGluZ1F1ZXVlZEV2ZW50LmV2ZW50U3lzdGVtRmxhZ3MgfD0gZXZlbnRTeXN0ZW1GbGFncztcbiAgdmFyIHRhcmdldENvbnRhaW5lcnMgPSBleGlzdGluZ1F1ZXVlZEV2ZW50LnRhcmdldENvbnRhaW5lcnM7XG5cbiAgaWYgKHRhcmdldENvbnRhaW5lciAhPT0gbnVsbCAmJiB0YXJnZXRDb250YWluZXJzLmluZGV4T2YodGFyZ2V0Q29udGFpbmVyKSA9PT0gLTEpIHtcbiAgICB0YXJnZXRDb250YWluZXJzLnB1c2godGFyZ2V0Q29udGFpbmVyKTtcbiAgfVxuXG4gIHJldHVybiBleGlzdGluZ1F1ZXVlZEV2ZW50O1xufVxuXG5mdW5jdGlvbiBxdWV1ZUlmQ29udGludW91c0V2ZW50KGJsb2NrZWRPbiwgZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCB0YXJnZXRDb250YWluZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIC8vIFRoZXNlIHNldCByZWxhdGVkVGFyZ2V0IHRvIG51bGwgYmVjYXVzZSB0aGUgcmVwbGF5ZWQgZXZlbnQgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIHdlXG4gIC8vIG1vdmVkIGZyb20gb3V0c2lkZSB0aGUgd2luZG93IChubyB0YXJnZXQpIG9udG8gdGhlIHRhcmdldCBvbmNlIGl0IGh5ZHJhdGVzLlxuICAvLyBJbnN0ZWFkIG9mIG11dGF0aW5nIHdlIGNvdWxkIGNsb25lIHRoZSBldmVudC5cbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlICdmb2N1c2luJzpcbiAgICAgIHtcbiAgICAgICAgdmFyIGZvY3VzRXZlbnQgPSBuYXRpdmVFdmVudDtcbiAgICAgICAgcXVldWVkRm9jdXMgPSBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KHF1ZXVlZEZvY3VzLCBibG9ja2VkT24sIGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgdGFyZ2V0Q29udGFpbmVyLCBmb2N1c0V2ZW50KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICBjYXNlICdkcmFnZW50ZXInOlxuICAgICAge1xuICAgICAgICB2YXIgZHJhZ0V2ZW50ID0gbmF0aXZlRXZlbnQ7XG4gICAgICAgIHF1ZXVlZERyYWcgPSBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KHF1ZXVlZERyYWcsIGJsb2NrZWRPbiwgZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCB0YXJnZXRDb250YWluZXIsIGRyYWdFdmVudCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgY2FzZSAnbW91c2VvdmVyJzpcbiAgICAgIHtcbiAgICAgICAgdmFyIG1vdXNlRXZlbnQgPSBuYXRpdmVFdmVudDtcbiAgICAgICAgcXVldWVkTW91c2UgPSBhY2N1bXVsYXRlT3JDcmVhdGVDb250aW51b3VzUXVldWVkUmVwbGF5YWJsZUV2ZW50KHF1ZXVlZE1vdXNlLCBibG9ja2VkT24sIGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgdGFyZ2V0Q29udGFpbmVyLCBtb3VzZUV2ZW50KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICBjYXNlICdwb2ludGVyb3Zlcic6XG4gICAgICB7XG4gICAgICAgIHZhciBwb2ludGVyRXZlbnQgPSBuYXRpdmVFdmVudDtcbiAgICAgICAgdmFyIHBvaW50ZXJJZCA9IHBvaW50ZXJFdmVudC5wb2ludGVySWQ7XG4gICAgICAgIHF1ZXVlZFBvaW50ZXJzLnNldChwb2ludGVySWQsIGFjY3VtdWxhdGVPckNyZWF0ZUNvbnRpbnVvdXNRdWV1ZWRSZXBsYXlhYmxlRXZlbnQocXVldWVkUG9pbnRlcnMuZ2V0KHBvaW50ZXJJZCkgfHwgbnVsbCwgYmxvY2tlZE9uLCBkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIHRhcmdldENvbnRhaW5lciwgcG9pbnRlckV2ZW50KSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgY2FzZSAnZ290cG9pbnRlcmNhcHR1cmUnOlxuICAgICAge1xuICAgICAgICB2YXIgX3BvaW50ZXJFdmVudCA9IG5hdGl2ZUV2ZW50O1xuICAgICAgICB2YXIgX3BvaW50ZXJJZDIgPSBfcG9pbnRlckV2ZW50LnBvaW50ZXJJZDtcbiAgICAgICAgcXVldWVkUG9pbnRlckNhcHR1cmVzLnNldChfcG9pbnRlcklkMiwgYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudChxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZ2V0KF9wb2ludGVySWQyKSB8fCBudWxsLCBibG9ja2VkT24sIGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgdGFyZ2V0Q29udGFpbmVyLCBfcG9pbnRlckV2ZW50KSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufSAvLyBDaGVjayBpZiB0aGlzIHRhcmdldCBpcyB1bmJsb2NrZWQuIFJldHVybnMgdHJ1ZSBpZiBpdCdzIHVuYmxvY2tlZC5cblxuZnVuY3Rpb24gYXR0ZW1wdEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0KHF1ZXVlZFRhcmdldCkge1xuICAvLyBUT0RPOiBUaGlzIGZ1bmN0aW9uIHNoYXJlcyBhIGxvdCBvZiBsb2dpYyB3aXRoIGZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQuXG4gIC8vIFRyeSB0byB1bmlmeSB0aGVtLiBJdCdzIGEgYml0IHRyaWNreSBzaW5jZSBpdCB3b3VsZCByZXF1aXJlIHR3byByZXR1cm5cbiAgLy8gdmFsdWVzLlxuICB2YXIgdGFyZ2V0SW5zdCA9IGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHF1ZXVlZFRhcmdldC50YXJnZXQpO1xuXG4gIGlmICh0YXJnZXRJbnN0ICE9PSBudWxsKSB7XG4gICAgdmFyIG5lYXJlc3RNb3VudGVkID0gZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcih0YXJnZXRJbnN0KTtcblxuICAgIGlmIChuZWFyZXN0TW91bnRlZCAhPT0gbnVsbCkge1xuICAgICAgdmFyIHRhZyA9IG5lYXJlc3RNb3VudGVkLnRhZztcblxuICAgICAgaWYgKHRhZyA9PT0gU3VzcGVuc2VDb21wb25lbnQpIHtcbiAgICAgICAgdmFyIGluc3RhbmNlID0gZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlcihuZWFyZXN0TW91bnRlZCk7XG5cbiAgICAgICAgaWYgKGluc3RhbmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gV2UncmUgYmxvY2tlZCBvbiBoeWRyYXRpbmcgdGhpcyBib3VuZGFyeS5cbiAgICAgICAgICAvLyBJbmNyZWFzZSBpdHMgcHJpb3JpdHkuXG4gICAgICAgICAgcXVldWVkVGFyZ2V0LmJsb2NrZWRPbiA9IGluc3RhbmNlO1xuICAgICAgICAgIGF0dGVtcHRIeWRyYXRpb25BdFByaW9yaXR5KHF1ZXVlZFRhcmdldC5wcmlvcml0eSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgYXR0ZW1wdEh5ZHJhdGlvbkF0Q3VycmVudFByaW9yaXR5KG5lYXJlc3RNb3VudGVkKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGFnID09PSBIb3N0Um9vdCkge1xuICAgICAgICB2YXIgcm9vdCA9IG5lYXJlc3RNb3VudGVkLnN0YXRlTm9kZTtcblxuICAgICAgICBpZiAoaXNSb290RGVoeWRyYXRlZChyb290KSkge1xuICAgICAgICAgIHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPSBnZXRDb250YWluZXJGcm9tRmliZXIobmVhcmVzdE1vdW50ZWQpOyAvLyBXZSBkb24ndCBjdXJyZW50bHkgaGF2ZSBhIHdheSB0byBpbmNyZWFzZSB0aGUgcHJpb3JpdHkgb2ZcbiAgICAgICAgICAvLyBhIHJvb3Qgb3RoZXIgdGhhbiBzeW5jLlxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcXVldWVkVGFyZ2V0LmJsb2NrZWRPbiA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIHF1ZXVlRXhwbGljaXRIeWRyYXRpb25UYXJnZXQodGFyZ2V0KSB7XG4gIC8vIFRPRE86IFRoaXMgd2lsbCByZWFkIHRoZSBwcmlvcml0eSBpZiBpdCdzIGRpc3BhdGNoZWQgYnkgdGhlIFJlYWN0XG4gIC8vIGV2ZW50IHN5c3RlbSBidXQgbm90IG5hdGl2ZSBldmVudHMuIFNob3VsZCByZWFkIHdpbmRvdy5ldmVudC50eXBlLCBsaWtlXG4gIC8vIHdlIGRvIGZvciB1cGRhdGVzIChnZXRDdXJyZW50RXZlbnRQcmlvcml0eSkuXG4gIHZhciB1cGRhdGVQcmlvcml0eSA9IGdldEN1cnJlbnRVcGRhdGVQcmlvcml0eSQxKCk7XG4gIHZhciBxdWV1ZWRUYXJnZXQgPSB7XG4gICAgYmxvY2tlZE9uOiBudWxsLFxuICAgIHRhcmdldDogdGFyZ2V0LFxuICAgIHByaW9yaXR5OiB1cGRhdGVQcmlvcml0eVxuICB9O1xuICB2YXIgaSA9IDA7XG5cbiAgZm9yICg7IGkgPCBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBTdG9wIG9uY2Ugd2UgaGl0IHRoZSBmaXJzdCB0YXJnZXQgd2l0aCBsb3dlciBwcmlvcml0eSB0aGFuXG4gICAgaWYgKCFpc0hpZ2hlckV2ZW50UHJpb3JpdHkodXBkYXRlUHJpb3JpdHksIHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0c1tpXS5wcmlvcml0eSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0cy5zcGxpY2UoaSwgMCwgcXVldWVkVGFyZ2V0KTtcblxuICBpZiAoaSA9PT0gMCkge1xuICAgIGF0dGVtcHRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldChxdWV1ZWRUYXJnZXQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkRXZlbnQpIHtcbiAgaWYgKHF1ZXVlZEV2ZW50LmJsb2NrZWRPbiAhPT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciB0YXJnZXRDb250YWluZXJzID0gcXVldWVkRXZlbnQudGFyZ2V0Q29udGFpbmVycztcblxuICB3aGlsZSAodGFyZ2V0Q29udGFpbmVycy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIHRhcmdldENvbnRhaW5lciA9IHRhcmdldENvbnRhaW5lcnNbMF07XG4gICAgdmFyIG5leHRCbG9ja2VkT24gPSBmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50KHF1ZXVlZEV2ZW50LmRvbUV2ZW50TmFtZSwgcXVldWVkRXZlbnQuZXZlbnRTeXN0ZW1GbGFncywgdGFyZ2V0Q29udGFpbmVyLCBxdWV1ZWRFdmVudC5uYXRpdmVFdmVudCk7XG5cbiAgICBpZiAobmV4dEJsb2NrZWRPbiA9PT0gbnVsbCkge1xuICAgICAge1xuICAgICAgICB2YXIgbmF0aXZlRXZlbnQgPSBxdWV1ZWRFdmVudC5uYXRpdmVFdmVudDtcbiAgICAgICAgdmFyIG5hdGl2ZUV2ZW50Q2xvbmUgPSBuZXcgbmF0aXZlRXZlbnQuY29uc3RydWN0b3IobmF0aXZlRXZlbnQudHlwZSwgbmF0aXZlRXZlbnQpO1xuICAgICAgICBzZXRSZXBsYXlpbmdFdmVudChuYXRpdmVFdmVudENsb25lKTtcbiAgICAgICAgbmF0aXZlRXZlbnQudGFyZ2V0LmRpc3BhdGNoRXZlbnQobmF0aXZlRXZlbnRDbG9uZSk7XG4gICAgICAgIHJlc2V0UmVwbGF5aW5nRXZlbnQoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gV2UncmUgc3RpbGwgYmxvY2tlZC4gVHJ5IGFnYWluIGxhdGVyLlxuICAgICAgdmFyIF9maWJlcjMgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKG5leHRCbG9ja2VkT24pO1xuXG4gICAgICBpZiAoX2ZpYmVyMyAhPT0gbnVsbCkge1xuICAgICAgICBhdHRlbXB0Q29udGludW91c0h5ZHJhdGlvbihfZmliZXIzKTtcbiAgICAgIH1cblxuICAgICAgcXVldWVkRXZlbnQuYmxvY2tlZE9uID0gbmV4dEJsb2NrZWRPbjtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IC8vIFRoaXMgdGFyZ2V0IGNvbnRhaW5lciB3YXMgc3VjY2Vzc2Z1bGx5IGRpc3BhdGNoZWQuIFRyeSB0aGUgbmV4dC5cblxuXG4gICAgdGFyZ2V0Q29udGFpbmVycy5zaGlmdCgpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnRJbk1hcChxdWV1ZWRFdmVudCwga2V5LCBtYXApIHtcbiAgaWYgKGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkRXZlbnQpKSB7XG4gICAgbWFwLmRlbGV0ZShrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlcGxheVVuYmxvY2tlZEV2ZW50cygpIHtcbiAgaGFzU2NoZWR1bGVkUmVwbGF5QXR0ZW1wdCA9IGZhbHNlO1xuXG5cbiAgaWYgKHF1ZXVlZEZvY3VzICE9PSBudWxsICYmIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkRm9jdXMpKSB7XG4gICAgcXVldWVkRm9jdXMgPSBudWxsO1xuICB9XG5cbiAgaWYgKHF1ZXVlZERyYWcgIT09IG51bGwgJiYgYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudChxdWV1ZWREcmFnKSkge1xuICAgIHF1ZXVlZERyYWcgPSBudWxsO1xuICB9XG5cbiAgaWYgKHF1ZXVlZE1vdXNlICE9PSBudWxsICYmIGF0dGVtcHRSZXBsYXlDb250aW51b3VzUXVldWVkRXZlbnQocXVldWVkTW91c2UpKSB7XG4gICAgcXVldWVkTW91c2UgPSBudWxsO1xuICB9XG5cbiAgcXVldWVkUG9pbnRlcnMuZm9yRWFjaChhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50SW5NYXApO1xuICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZm9yRWFjaChhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50SW5NYXApO1xufVxuXG5mdW5jdGlvbiBzY2hlZHVsZUNhbGxiYWNrSWZVbmJsb2NrZWQocXVldWVkRXZlbnQsIHVuYmxvY2tlZCkge1xuICBpZiAocXVldWVkRXZlbnQuYmxvY2tlZE9uID09PSB1bmJsb2NrZWQpIHtcbiAgICBxdWV1ZWRFdmVudC5ibG9ja2VkT24gPSBudWxsO1xuXG4gICAgaWYgKCFoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0KSB7XG4gICAgICBoYXNTY2hlZHVsZWRSZXBsYXlBdHRlbXB0ID0gdHJ1ZTsgLy8gU2NoZWR1bGUgYSBjYWxsYmFjayB0byBhdHRlbXB0IHJlcGxheWluZyBhcyBtYW55IGV2ZW50cyBhcyBhcmVcbiAgICAgIC8vIG5vdyB1bmJsb2NrZWQuIFRoaXMgZmlyc3QgbWlnaHQgbm90IGFjdHVhbGx5IGJlIHVuYmxvY2tlZCB5ZXQuXG4gICAgICAvLyBXZSBjb3VsZCBjaGVjayBpdCBlYXJseSB0byBhdm9pZCBzY2hlZHVsaW5nIGFuIHVubmVjZXNzYXJ5IGNhbGxiYWNrLlxuXG4gICAgICBTY2hlZHVsZXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhTY2hlZHVsZXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksIHJlcGxheVVuYmxvY2tlZEV2ZW50cyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJldHJ5SWZCbG9ja2VkT24odW5ibG9ja2VkKSB7XG4gIC8vIE1hcmsgYW55dGhpbmcgdGhhdCB3YXMgYmxvY2tlZCBvbiB0aGlzIGFzIG5vIGxvbmdlciBibG9ja2VkXG4gIC8vIGFuZCBlbGlnaWJsZSBmb3IgYSByZXBsYXkuXG4gIGlmIChxdWV1ZWREaXNjcmV0ZUV2ZW50cy5sZW5ndGggPiAwKSB7XG4gICAgc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZERpc2NyZXRlRXZlbnRzWzBdLCB1bmJsb2NrZWQpOyAvLyBUaGlzIGlzIGEgZXhwb25lbnRpYWwgc2VhcmNoIGZvciBlYWNoIGJvdW5kYXJ5IHRoYXQgY29tbWl0cy4gSSB0aGluayBpdCdzXG4gICAgLy8gd29ydGggaXQgYmVjYXVzZSB3ZSBleHBlY3QgdmVyeSBmZXcgZGlzY3JldGUgZXZlbnRzIHRvIHF1ZXVlIHVwIGFuZCBvbmNlXG4gICAgLy8gd2UgYXJlIGFjdHVhbGx5IGZ1bGx5IHVuYmxvY2tlZCBpdCB3aWxsIGJlIGZhc3QgdG8gcmVwbGF5IHRoZW0uXG5cbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHF1ZXVlZERpc2NyZXRlRXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcXVldWVkRXZlbnQgPSBxdWV1ZWREaXNjcmV0ZUV2ZW50c1tpXTtcblxuICAgICAgaWYgKHF1ZXVlZEV2ZW50LmJsb2NrZWRPbiA9PT0gdW5ibG9ja2VkKSB7XG4gICAgICAgIHF1ZXVlZEV2ZW50LmJsb2NrZWRPbiA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHF1ZXVlZEZvY3VzICE9PSBudWxsKSB7XG4gICAgc2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkKHF1ZXVlZEZvY3VzLCB1bmJsb2NrZWQpO1xuICB9XG5cbiAgaWYgKHF1ZXVlZERyYWcgIT09IG51bGwpIHtcbiAgICBzY2hlZHVsZUNhbGxiYWNrSWZVbmJsb2NrZWQocXVldWVkRHJhZywgdW5ibG9ja2VkKTtcbiAgfVxuXG4gIGlmIChxdWV1ZWRNb3VzZSAhPT0gbnVsbCkge1xuICAgIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRNb3VzZSwgdW5ibG9ja2VkKTtcbiAgfVxuXG4gIHZhciB1bmJsb2NrID0gZnVuY3Rpb24gKHF1ZXVlZEV2ZW50KSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlQ2FsbGJhY2tJZlVuYmxvY2tlZChxdWV1ZWRFdmVudCwgdW5ibG9ja2VkKTtcbiAgfTtcblxuICBxdWV1ZWRQb2ludGVycy5mb3JFYWNoKHVuYmxvY2spO1xuICBxdWV1ZWRQb2ludGVyQ2FwdHVyZXMuZm9yRWFjaCh1bmJsb2NrKTtcblxuICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgcXVldWVkRXhwbGljaXRIeWRyYXRpb25UYXJnZXRzLmxlbmd0aDsgX2krKykge1xuICAgIHZhciBxdWV1ZWRUYXJnZXQgPSBxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHNbX2ldO1xuXG4gICAgaWYgKHF1ZXVlZFRhcmdldC5ibG9ja2VkT24gPT09IHVuYmxvY2tlZCkge1xuICAgICAgcXVldWVkVGFyZ2V0LmJsb2NrZWRPbiA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgd2hpbGUgKHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0cy5sZW5ndGggPiAwKSB7XG4gICAgdmFyIG5leHRFeHBsaWNpdFRhcmdldCA9IHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0c1swXTtcblxuICAgIGlmIChuZXh0RXhwbGljaXRUYXJnZXQuYmxvY2tlZE9uICE9PSBudWxsKSB7XG4gICAgICAvLyBXZSdyZSBzdGlsbCBibG9ja2VkLlxuICAgICAgYnJlYWs7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF0dGVtcHRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldChuZXh0RXhwbGljaXRUYXJnZXQpO1xuXG4gICAgICBpZiAobmV4dEV4cGxpY2l0VGFyZ2V0LmJsb2NrZWRPbiA9PT0gbnVsbCkge1xuICAgICAgICAvLyBXZSdyZSB1bmJsb2NrZWQuXG4gICAgICAgIHF1ZXVlZEV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0cy5zaGlmdCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgUmVhY3RDdXJyZW50QmF0Y2hDb25maWcgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZzsgLy8gVE9ETzogY2FuIHdlIHN0b3AgZXhwb3J0aW5nIHRoZXNlP1xuXG52YXIgX2VuYWJsZWQgPSB0cnVlOyAvLyBUaGlzIGlzIGV4cG9ydGVkIGluIEZCIGJ1aWxkcyBmb3IgdXNlIGJ5IGxlZ2FjeSBGQiBsYXllciBpbmZyYS5cbi8vIFdlJ2QgbGlrZSB0byByZW1vdmUgdGhpcyBidXQgaXQncyBub3QgY2xlYXIgaWYgdGhpcyBpcyBzYWZlLlxuXG5mdW5jdGlvbiBzZXRFbmFibGVkKGVuYWJsZWQpIHtcbiAgX2VuYWJsZWQgPSAhIWVuYWJsZWQ7XG59XG5mdW5jdGlvbiBpc0VuYWJsZWQoKSB7XG4gIHJldHVybiBfZW5hYmxlZDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUV2ZW50TGlzdGVuZXJXcmFwcGVyV2l0aFByaW9yaXR5KHRhcmdldENvbnRhaW5lciwgZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzKSB7XG4gIHZhciBldmVudFByaW9yaXR5ID0gZ2V0RXZlbnRQcmlvcml0eShkb21FdmVudE5hbWUpO1xuICB2YXIgbGlzdGVuZXJXcmFwcGVyO1xuXG4gIHN3aXRjaCAoZXZlbnRQcmlvcml0eSkge1xuICAgIGNhc2UgRGlzY3JldGVFdmVudFByaW9yaXR5OlxuICAgICAgbGlzdGVuZXJXcmFwcGVyID0gZGlzcGF0Y2hEaXNjcmV0ZUV2ZW50O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIENvbnRpbnVvdXNFdmVudFByaW9yaXR5OlxuICAgICAgbGlzdGVuZXJXcmFwcGVyID0gZGlzcGF0Y2hDb250aW51b3VzRXZlbnQ7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgRGVmYXVsdEV2ZW50UHJpb3JpdHk6XG4gICAgZGVmYXVsdDpcbiAgICAgIGxpc3RlbmVyV3JhcHBlciA9IGRpc3BhdGNoRXZlbnQ7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBsaXN0ZW5lcldyYXBwZXIuYmluZChudWxsLCBkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIHRhcmdldENvbnRhaW5lcik7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRGlzY3JldGVFdmVudChkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIGNvbnRhaW5lciwgbmF0aXZlRXZlbnQpIHtcbiAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBnZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkoKTtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RDdXJyZW50QmF0Y2hDb25maWcudHJhbnNpdGlvbjtcbiAgUmVhY3RDdXJyZW50QmF0Y2hDb25maWcudHJhbnNpdGlvbiA9IG51bGw7XG5cbiAgdHJ5IHtcbiAgICBzZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkoRGlzY3JldGVFdmVudFByaW9yaXR5KTtcbiAgICBkaXNwYXRjaEV2ZW50KGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgY29udGFpbmVyLCBuYXRpdmVFdmVudCk7XG4gIH0gZmluYWxseSB7XG4gICAgc2V0Q3VycmVudFVwZGF0ZVByaW9yaXR5KHByZXZpb3VzUHJpb3JpdHkpO1xuICAgIFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLnRyYW5zaXRpb24gPSBwcmV2VHJhbnNpdGlvbjtcbiAgfVxufVxuXG5mdW5jdGlvbiBkaXNwYXRjaENvbnRpbnVvdXNFdmVudChkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIGNvbnRhaW5lciwgbmF0aXZlRXZlbnQpIHtcbiAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBnZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkoKTtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RDdXJyZW50QmF0Y2hDb25maWcudHJhbnNpdGlvbjtcbiAgUmVhY3RDdXJyZW50QmF0Y2hDb25maWcudHJhbnNpdGlvbiA9IG51bGw7XG5cbiAgdHJ5IHtcbiAgICBzZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkoQ29udGludW91c0V2ZW50UHJpb3JpdHkpO1xuICAgIGRpc3BhdGNoRXZlbnQoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCBjb250YWluZXIsIG5hdGl2ZUV2ZW50KTtcbiAgfSBmaW5hbGx5IHtcbiAgICBzZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkocHJldmlvdXNQcmlvcml0eSk7XG4gICAgUmVhY3RDdXJyZW50QmF0Y2hDb25maWcudHJhbnNpdGlvbiA9IHByZXZUcmFuc2l0aW9uO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCB0YXJnZXRDb250YWluZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIGlmICghX2VuYWJsZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB7XG4gICAgZGlzcGF0Y2hFdmVudFdpdGhFbmFibGVDYXB0dXJlUGhhc2VTZWxlY3RpdmVIeWRyYXRpb25XaXRob3V0RGlzY3JldGVFdmVudFJlcGxheShkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIHRhcmdldENvbnRhaW5lciwgbmF0aXZlRXZlbnQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnRXaXRoRW5hYmxlQ2FwdHVyZVBoYXNlU2VsZWN0aXZlSHlkcmF0aW9uV2l0aG91dERpc2NyZXRlRXZlbnRSZXBsYXkoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCB0YXJnZXRDb250YWluZXIsIG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBibG9ja2VkT24gPSBmaW5kSW5zdGFuY2VCbG9ja2luZ0V2ZW50KGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgdGFyZ2V0Q29udGFpbmVyLCBuYXRpdmVFdmVudCk7XG5cbiAgaWYgKGJsb2NrZWRPbiA9PT0gbnVsbCkge1xuICAgIGRpc3BhdGNoRXZlbnRGb3JQbHVnaW5FdmVudFN5c3RlbShkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIG5hdGl2ZUV2ZW50LCByZXR1cm5fdGFyZ2V0SW5zdCwgdGFyZ2V0Q29udGFpbmVyKTtcbiAgICBjbGVhcklmQ29udGludW91c0V2ZW50KGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChxdWV1ZUlmQ29udGludW91c0V2ZW50KGJsb2NrZWRPbiwgZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCB0YXJnZXRDb250YWluZXIsIG5hdGl2ZUV2ZW50KSkge1xuICAgIG5hdGl2ZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHJldHVybjtcbiAgfSAvLyBXZSBuZWVkIHRvIGNsZWFyIG9ubHkgaWYgd2UgZGlkbid0IHF1ZXVlIGJlY2F1c2VcbiAgLy8gcXVldWVpbmcgaXMgYWNjdW11bGF0aXZlLlxuXG5cbiAgY2xlYXJJZkNvbnRpbnVvdXNFdmVudChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KTtcblxuICBpZiAoZXZlbnRTeXN0ZW1GbGFncyAmIElTX0NBUFRVUkVfUEhBU0UgJiYgaXNEaXNjcmV0ZUV2ZW50VGhhdFJlcXVpcmVzSHlkcmF0aW9uKGRvbUV2ZW50TmFtZSkpIHtcbiAgICB3aGlsZSAoYmxvY2tlZE9uICE9PSBudWxsKSB7XG4gICAgICB2YXIgZmliZXIgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKGJsb2NrZWRPbik7XG5cbiAgICAgIGlmIChmaWJlciAhPT0gbnVsbCkge1xuICAgICAgICBhdHRlbXB0U3luY2hyb25vdXNIeWRyYXRpb24oZmliZXIpO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV4dEJsb2NrZWRPbiA9IGZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQoZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCB0YXJnZXRDb250YWluZXIsIG5hdGl2ZUV2ZW50KTtcblxuICAgICAgaWYgKG5leHRCbG9ja2VkT24gPT09IG51bGwpIHtcbiAgICAgICAgZGlzcGF0Y2hFdmVudEZvclBsdWdpbkV2ZW50U3lzdGVtKGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgbmF0aXZlRXZlbnQsIHJldHVybl90YXJnZXRJbnN0LCB0YXJnZXRDb250YWluZXIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV4dEJsb2NrZWRPbiA9PT0gYmxvY2tlZE9uKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBibG9ja2VkT24gPSBuZXh0QmxvY2tlZE9uO1xuICAgIH1cblxuICAgIGlmIChibG9ja2VkT24gIT09IG51bGwpIHtcbiAgICAgIG5hdGl2ZUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfSAvLyBUaGlzIGlzIG5vdCByZXBsYXlhYmxlIHNvIHdlJ2xsIGludm9rZSBpdCBidXQgd2l0aG91dCBhIHRhcmdldCxcbiAgLy8gaW4gY2FzZSB0aGUgZXZlbnQgc3lzdGVtIG5lZWRzIHRvIHRyYWNlIGl0LlxuXG5cbiAgZGlzcGF0Y2hFdmVudEZvclBsdWdpbkV2ZW50U3lzdGVtKGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgbmF0aXZlRXZlbnQsIG51bGwsIHRhcmdldENvbnRhaW5lcik7XG59XG5cbnZhciByZXR1cm5fdGFyZ2V0SW5zdCA9IG51bGw7IC8vIFJldHVybnMgYSBTdXNwZW5zZUluc3RhbmNlIG9yIENvbnRhaW5lciBpZiBpdCdzIGJsb2NrZWQuXG4vLyBUaGUgcmV0dXJuX3RhcmdldEluc3QgZmllbGQgYWJvdmUgaXMgY29uY2VwdHVhbGx5IHBhcnQgb2YgdGhlIHJldHVybiB2YWx1ZS5cblxuZnVuY3Rpb24gZmluZEluc3RhbmNlQmxvY2tpbmdFdmVudChkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIHRhcmdldENvbnRhaW5lciwgbmF0aXZlRXZlbnQpIHtcbiAgLy8gVE9ETzogV2FybiBpZiBfZW5hYmxlZCBpcyBmYWxzZS5cbiAgcmV0dXJuX3RhcmdldEluc3QgPSBudWxsO1xuICB2YXIgbmF0aXZlRXZlbnRUYXJnZXQgPSBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCk7XG4gIHZhciB0YXJnZXRJbnN0ID0gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUobmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gIGlmICh0YXJnZXRJbnN0ICE9PSBudWxsKSB7XG4gICAgdmFyIG5lYXJlc3RNb3VudGVkID0gZ2V0TmVhcmVzdE1vdW50ZWRGaWJlcih0YXJnZXRJbnN0KTtcblxuICAgIGlmIChuZWFyZXN0TW91bnRlZCA9PT0gbnVsbCkge1xuICAgICAgLy8gVGhpcyB0cmVlIGhhcyBiZWVuIHVubW91bnRlZCBhbHJlYWR5LiBEaXNwYXRjaCB3aXRob3V0IGEgdGFyZ2V0LlxuICAgICAgdGFyZ2V0SW5zdCA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB0YWcgPSBuZWFyZXN0TW91bnRlZC50YWc7XG5cbiAgICAgIGlmICh0YWcgPT09IFN1c3BlbnNlQ29tcG9uZW50KSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGdldFN1c3BlbnNlSW5zdGFuY2VGcm9tRmliZXIobmVhcmVzdE1vdW50ZWQpO1xuXG4gICAgICAgIGlmIChpbnN0YW5jZSAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIFF1ZXVlIHRoZSBldmVudCB0byBiZSByZXBsYXllZCBsYXRlci4gQWJvcnQgZGlzcGF0Y2hpbmcgc2luY2Ugd2VcbiAgICAgICAgICAvLyBkb24ndCB3YW50IHRoaXMgZXZlbnQgZGlzcGF0Y2hlZCB0d2ljZSB0aHJvdWdoIHRoZSBldmVudCBzeXN0ZW0uXG4gICAgICAgICAgLy8gVE9ETzogSWYgdGhpcyBpcyB0aGUgZmlyc3QgZGlzY3JldGUgZXZlbnQgaW4gdGhlIHF1ZXVlLiBTY2hlZHVsZSBhbiBpbmNyZWFzZWRcbiAgICAgICAgICAvLyBwcmlvcml0eSBmb3IgdGhpcyBib3VuZGFyeS5cbiAgICAgICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgICAgIH0gLy8gVGhpcyBzaG91bGRuJ3QgaGFwcGVuLCBzb21ldGhpbmcgd2VudCB3cm9uZyBidXQgdG8gYXZvaWQgYmxvY2tpbmdcbiAgICAgICAgLy8gdGhlIHdob2xlIHN5c3RlbSwgZGlzcGF0Y2ggdGhlIGV2ZW50IHdpdGhvdXQgYSB0YXJnZXQuXG4gICAgICAgIC8vIFRPRE86IFdhcm4uXG5cblxuICAgICAgICB0YXJnZXRJbnN0ID0gbnVsbDtcbiAgICAgIH0gZWxzZSBpZiAodGFnID09PSBIb3N0Um9vdCkge1xuICAgICAgICB2YXIgcm9vdCA9IG5lYXJlc3RNb3VudGVkLnN0YXRlTm9kZTtcblxuICAgICAgICBpZiAoaXNSb290RGVoeWRyYXRlZChyb290KSkge1xuICAgICAgICAgIC8vIElmIHRoaXMgaGFwcGVucyBkdXJpbmcgYSByZXBsYXkgc29tZXRoaW5nIHdlbnQgd3JvbmcgYW5kIGl0IG1pZ2h0IGJsb2NrXG4gICAgICAgICAgLy8gdGhlIHdob2xlIHN5c3RlbS5cbiAgICAgICAgICByZXR1cm4gZ2V0Q29udGFpbmVyRnJvbUZpYmVyKG5lYXJlc3RNb3VudGVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRhcmdldEluc3QgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmIChuZWFyZXN0TW91bnRlZCAhPT0gdGFyZ2V0SW5zdCkge1xuICAgICAgICAvLyBJZiB3ZSBnZXQgYW4gZXZlbnQgKGV4OiBpbWcgb25sb2FkKSBiZWZvcmUgY29tbWl0dGluZyB0aGF0XG4gICAgICAgIC8vIGNvbXBvbmVudCdzIG1vdW50LCBpZ25vcmUgaXQgZm9yIG5vdyAodGhhdCBpcywgdHJlYXQgaXQgYXMgaWYgaXQgd2FzIGFuXG4gICAgICAgIC8vIGV2ZW50IG9uIGEgbm9uLVJlYWN0IHRyZWUpLiBXZSBtaWdodCBhbHNvIGNvbnNpZGVyIHF1ZXVlaW5nIGV2ZW50cyBhbmRcbiAgICAgICAgLy8gZGlzcGF0Y2hpbmcgdGhlbSBhZnRlciB0aGUgbW91bnQuXG4gICAgICAgIHRhcmdldEluc3QgPSBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybl90YXJnZXRJbnN0ID0gdGFyZ2V0SW5zdDsgLy8gV2UncmUgbm90IGJsb2NrZWQgb24gYW55dGhpbmcuXG5cbiAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBnZXRFdmVudFByaW9yaXR5KGRvbUV2ZW50TmFtZSkge1xuICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgIC8vIFVzZWQgYnkgU2ltcGxlRXZlbnRQbHVnaW46XG4gICAgY2FzZSAnY2FuY2VsJzpcbiAgICBjYXNlICdjbGljayc6XG4gICAgY2FzZSAnY2xvc2UnOlxuICAgIGNhc2UgJ2NvbnRleHRtZW51JzpcbiAgICBjYXNlICdjb3B5JzpcbiAgICBjYXNlICdjdXQnOlxuICAgIGNhc2UgJ2F1eGNsaWNrJzpcbiAgICBjYXNlICdkYmxjbGljayc6XG4gICAgY2FzZSAnZHJhZ2VuZCc6XG4gICAgY2FzZSAnZHJhZ3N0YXJ0JzpcbiAgICBjYXNlICdkcm9wJzpcbiAgICBjYXNlICdmb2N1c2luJzpcbiAgICBjYXNlICdmb2N1c291dCc6XG4gICAgY2FzZSAnaW5wdXQnOlxuICAgIGNhc2UgJ2ludmFsaWQnOlxuICAgIGNhc2UgJ2tleWRvd24nOlxuICAgIGNhc2UgJ2tleXByZXNzJzpcbiAgICBjYXNlICdrZXl1cCc6XG4gICAgY2FzZSAnbW91c2Vkb3duJzpcbiAgICBjYXNlICdtb3VzZXVwJzpcbiAgICBjYXNlICdwYXN0ZSc6XG4gICAgY2FzZSAncGF1c2UnOlxuICAgIGNhc2UgJ3BsYXknOlxuICAgIGNhc2UgJ3BvaW50ZXJjYW5jZWwnOlxuICAgIGNhc2UgJ3BvaW50ZXJkb3duJzpcbiAgICBjYXNlICdwb2ludGVydXAnOlxuICAgIGNhc2UgJ3JhdGVjaGFuZ2UnOlxuICAgIGNhc2UgJ3Jlc2V0JzpcbiAgICBjYXNlICdyZXNpemUnOlxuICAgIGNhc2UgJ3NlZWtlZCc6XG4gICAgY2FzZSAnc3VibWl0JzpcbiAgICBjYXNlICd0b3VjaGNhbmNlbCc6XG4gICAgY2FzZSAndG91Y2hlbmQnOlxuICAgIGNhc2UgJ3RvdWNoc3RhcnQnOlxuICAgIGNhc2UgJ3ZvbHVtZWNoYW5nZSc6IC8vIFVzZWQgYnkgcG9seWZpbGxzOlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1mYWxsdGhyb3VnaFxuXG4gICAgY2FzZSAnY2hhbmdlJzpcbiAgICBjYXNlICdzZWxlY3Rpb25jaGFuZ2UnOlxuICAgIGNhc2UgJ3RleHRJbnB1dCc6XG4gICAgY2FzZSAnY29tcG9zaXRpb25zdGFydCc6XG4gICAgY2FzZSAnY29tcG9zaXRpb25lbmQnOlxuICAgIGNhc2UgJ2NvbXBvc2l0aW9udXBkYXRlJzogLy8gT25seSBlbmFibGVDcmVhdGVFdmVudEhhbmRsZUFQSTpcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZmFsbHRocm91Z2hcblxuICAgIGNhc2UgJ2JlZm9yZWJsdXInOlxuICAgIGNhc2UgJ2FmdGVyYmx1cic6IC8vIE5vdCB1c2VkIGJ5IFJlYWN0IGJ1dCBjb3VsZCBiZSBieSB1c2VyIGNvZGU6XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWZhbGx0aHJvdWdoXG5cbiAgICBjYXNlICdiZWZvcmVpbnB1dCc6XG4gICAgY2FzZSAnYmx1cic6XG4gICAgY2FzZSAnZnVsbHNjcmVlbmNoYW5nZSc6XG4gICAgY2FzZSAnZm9jdXMnOlxuICAgIGNhc2UgJ2hhc2hjaGFuZ2UnOlxuICAgIGNhc2UgJ3BvcHN0YXRlJzpcbiAgICBjYXNlICdzZWxlY3QnOlxuICAgIGNhc2UgJ3NlbGVjdHN0YXJ0JzpcbiAgICAgIHJldHVybiBEaXNjcmV0ZUV2ZW50UHJpb3JpdHk7XG5cbiAgICBjYXNlICdkcmFnJzpcbiAgICBjYXNlICdkcmFnZW50ZXInOlxuICAgIGNhc2UgJ2RyYWdleGl0JzpcbiAgICBjYXNlICdkcmFnbGVhdmUnOlxuICAgIGNhc2UgJ2RyYWdvdmVyJzpcbiAgICBjYXNlICdtb3VzZW1vdmUnOlxuICAgIGNhc2UgJ21vdXNlb3V0JzpcbiAgICBjYXNlICdtb3VzZW92ZXInOlxuICAgIGNhc2UgJ3BvaW50ZXJtb3ZlJzpcbiAgICBjYXNlICdwb2ludGVyb3V0JzpcbiAgICBjYXNlICdwb2ludGVyb3Zlcic6XG4gICAgY2FzZSAnc2Nyb2xsJzpcbiAgICBjYXNlICd0b2dnbGUnOlxuICAgIGNhc2UgJ3RvdWNobW92ZSc6XG4gICAgY2FzZSAnd2hlZWwnOiAvLyBOb3QgdXNlZCBieSBSZWFjdCBidXQgY291bGQgYmUgYnkgdXNlciBjb2RlOlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1mYWxsdGhyb3VnaFxuXG4gICAgY2FzZSAnbW91c2VlbnRlcic6XG4gICAgY2FzZSAnbW91c2VsZWF2ZSc6XG4gICAgY2FzZSAncG9pbnRlcmVudGVyJzpcbiAgICBjYXNlICdwb2ludGVybGVhdmUnOlxuICAgICAgcmV0dXJuIENvbnRpbnVvdXNFdmVudFByaW9yaXR5O1xuXG4gICAgY2FzZSAnbWVzc2FnZSc6XG4gICAgICB7XG4gICAgICAgIC8vIFdlIG1pZ2h0IGJlIGluIHRoZSBTY2hlZHVsZXIgY2FsbGJhY2suXG4gICAgICAgIC8vIEV2ZW50dWFsbHkgdGhpcyBtZWNoYW5pc20gd2lsbCBiZSByZXBsYWNlZCBieSBhIGNoZWNrXG4gICAgICAgIC8vIG9mIHRoZSBjdXJyZW50IHByaW9yaXR5IG9uIHRoZSBuYXRpdmUgc2NoZWR1bGVyLlxuICAgICAgICB2YXIgc2NoZWR1bGVyUHJpb3JpdHkgPSBnZXRDdXJyZW50UHJpb3JpdHlMZXZlbCgpO1xuXG4gICAgICAgIHN3aXRjaCAoc2NoZWR1bGVyUHJpb3JpdHkpIHtcbiAgICAgICAgICBjYXNlIEltbWVkaWF0ZVByaW9yaXR5OlxuICAgICAgICAgICAgcmV0dXJuIERpc2NyZXRlRXZlbnRQcmlvcml0eTtcblxuICAgICAgICAgIGNhc2UgVXNlckJsb2NraW5nUHJpb3JpdHk6XG4gICAgICAgICAgICByZXR1cm4gQ29udGludW91c0V2ZW50UHJpb3JpdHk7XG5cbiAgICAgICAgICBjYXNlIE5vcm1hbFByaW9yaXR5OlxuICAgICAgICAgIGNhc2UgTG93UHJpb3JpdHk6XG4gICAgICAgICAgICAvLyBUT0RPOiBIYW5kbGUgTG93U2NoZWR1bGVyUHJpb3JpdHksIHNvbWVob3cuIE1heWJlIHRoZSBzYW1lIGxhbmUgYXMgaHlkcmF0aW9uLlxuICAgICAgICAgICAgcmV0dXJuIERlZmF1bHRFdmVudFByaW9yaXR5O1xuXG4gICAgICAgICAgY2FzZSBJZGxlUHJpb3JpdHk6XG4gICAgICAgICAgICByZXR1cm4gSWRsZUV2ZW50UHJpb3JpdHk7XG5cbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIERlZmF1bHRFdmVudFByaW9yaXR5O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIERlZmF1bHRFdmVudFByaW9yaXR5O1xuICB9XG59XG5cbmZ1bmN0aW9uIGFkZEV2ZW50QnViYmxlTGlzdGVuZXIodGFyZ2V0LCBldmVudFR5cGUsIGxpc3RlbmVyKSB7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgbGlzdGVuZXIsIGZhbHNlKTtcbiAgcmV0dXJuIGxpc3RlbmVyO1xufVxuZnVuY3Rpb24gYWRkRXZlbnRDYXB0dXJlTGlzdGVuZXIodGFyZ2V0LCBldmVudFR5cGUsIGxpc3RlbmVyKSB7XG4gIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICByZXR1cm4gbGlzdGVuZXI7XG59XG5mdW5jdGlvbiBhZGRFdmVudENhcHR1cmVMaXN0ZW5lcldpdGhQYXNzaXZlRmxhZyh0YXJnZXQsIGV2ZW50VHlwZSwgbGlzdGVuZXIsIHBhc3NpdmUpIHtcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBsaXN0ZW5lciwge1xuICAgIGNhcHR1cmU6IHRydWUsXG4gICAgcGFzc2l2ZTogcGFzc2l2ZVxuICB9KTtcbiAgcmV0dXJuIGxpc3RlbmVyO1xufVxuZnVuY3Rpb24gYWRkRXZlbnRCdWJibGVMaXN0ZW5lcldpdGhQYXNzaXZlRmxhZyh0YXJnZXQsIGV2ZW50VHlwZSwgbGlzdGVuZXIsIHBhc3NpdmUpIHtcbiAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBsaXN0ZW5lciwge1xuICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgfSk7XG4gIHJldHVybiBsaXN0ZW5lcjtcbn1cblxuLyoqXG4gKiBUaGVzZSB2YXJpYWJsZXMgc3RvcmUgaW5mb3JtYXRpb24gYWJvdXQgdGV4dCBjb250ZW50IG9mIGEgdGFyZ2V0IG5vZGUsXG4gKiBhbGxvd2luZyBjb21wYXJpc29uIG9mIGNvbnRlbnQgYmVmb3JlIGFuZCBhZnRlciBhIGdpdmVuIGV2ZW50LlxuICpcbiAqIElkZW50aWZ5IHRoZSBub2RlIHdoZXJlIHNlbGVjdGlvbiBjdXJyZW50bHkgYmVnaW5zLCB0aGVuIG9ic2VydmVcbiAqIGJvdGggaXRzIHRleHQgY29udGVudCBhbmQgaXRzIGN1cnJlbnQgcG9zaXRpb24gaW4gdGhlIERPTS4gU2luY2UgdGhlXG4gKiBicm93c2VyIG1heSBuYXRpdmVseSByZXBsYWNlIHRoZSB0YXJnZXQgbm9kZSBkdXJpbmcgY29tcG9zaXRpb24sIHdlIGNhblxuICogdXNlIGl0cyBwb3NpdGlvbiB0byBmaW5kIGl0cyByZXBsYWNlbWVudC5cbiAqXG4gKlxuICovXG52YXIgcm9vdCA9IG51bGw7XG52YXIgc3RhcnRUZXh0ID0gbnVsbDtcbnZhciBmYWxsYmFja1RleHQgPSBudWxsO1xuZnVuY3Rpb24gaW5pdGlhbGl6ZShuYXRpdmVFdmVudFRhcmdldCkge1xuICByb290ID0gbmF0aXZlRXZlbnRUYXJnZXQ7XG4gIHN0YXJ0VGV4dCA9IGdldFRleHQoKTtcbiAgcmV0dXJuIHRydWU7XG59XG5mdW5jdGlvbiByZXNldCgpIHtcbiAgcm9vdCA9IG51bGw7XG4gIHN0YXJ0VGV4dCA9IG51bGw7XG4gIGZhbGxiYWNrVGV4dCA9IG51bGw7XG59XG5mdW5jdGlvbiBnZXREYXRhKCkge1xuICBpZiAoZmFsbGJhY2tUZXh0KSB7XG4gICAgcmV0dXJuIGZhbGxiYWNrVGV4dDtcbiAgfVxuXG4gIHZhciBzdGFydDtcbiAgdmFyIHN0YXJ0VmFsdWUgPSBzdGFydFRleHQ7XG4gIHZhciBzdGFydExlbmd0aCA9IHN0YXJ0VmFsdWUubGVuZ3RoO1xuICB2YXIgZW5kO1xuICB2YXIgZW5kVmFsdWUgPSBnZXRUZXh0KCk7XG4gIHZhciBlbmRMZW5ndGggPSBlbmRWYWx1ZS5sZW5ndGg7XG5cbiAgZm9yIChzdGFydCA9IDA7IHN0YXJ0IDwgc3RhcnRMZW5ndGg7IHN0YXJ0KyspIHtcbiAgICBpZiAoc3RhcnRWYWx1ZVtzdGFydF0gIT09IGVuZFZhbHVlW3N0YXJ0XSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIG1pbkVuZCA9IHN0YXJ0TGVuZ3RoIC0gc3RhcnQ7XG5cbiAgZm9yIChlbmQgPSAxOyBlbmQgPD0gbWluRW5kOyBlbmQrKykge1xuICAgIGlmIChzdGFydFZhbHVlW3N0YXJ0TGVuZ3RoIC0gZW5kXSAhPT0gZW5kVmFsdWVbZW5kTGVuZ3RoIC0gZW5kXSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgdmFyIHNsaWNlVGFpbCA9IGVuZCA+IDEgPyAxIC0gZW5kIDogdW5kZWZpbmVkO1xuICBmYWxsYmFja1RleHQgPSBlbmRWYWx1ZS5zbGljZShzdGFydCwgc2xpY2VUYWlsKTtcbiAgcmV0dXJuIGZhbGxiYWNrVGV4dDtcbn1cbmZ1bmN0aW9uIGdldFRleHQoKSB7XG4gIGlmICgndmFsdWUnIGluIHJvb3QpIHtcbiAgICByZXR1cm4gcm9vdC52YWx1ZTtcbiAgfVxuXG4gIHJldHVybiByb290LnRleHRDb250ZW50O1xufVxuXG4vKipcbiAqIGBjaGFyQ29kZWAgcmVwcmVzZW50cyB0aGUgYWN0dWFsIFwiY2hhcmFjdGVyIGNvZGVcIiBhbmQgaXMgc2FmZSB0byB1c2Ugd2l0aFxuICogYFN0cmluZy5mcm9tQ2hhckNvZGVgLiBBcyBzdWNoLCBvbmx5IGtleXMgdGhhdCBjb3JyZXNwb25kIHRvIHByaW50YWJsZVxuICogY2hhcmFjdGVycyBwcm9kdWNlIGEgdmFsaWQgYGNoYXJDb2RlYCwgdGhlIG9ubHkgZXhjZXB0aW9uIHRvIHRoaXMgaXMgRW50ZXIuXG4gKiBUaGUgVGFiLWtleSBpcyBjb25zaWRlcmVkIG5vbi1wcmludGFibGUgYW5kIGRvZXMgbm90IGhhdmUgYSBgY2hhckNvZGVgLFxuICogcHJlc3VtYWJseSBiZWNhdXNlIGl0IGRvZXMgbm90IHByb2R1Y2UgYSB0YWItY2hhcmFjdGVyIGluIGJyb3dzZXJzLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge251bWJlcn0gTm9ybWFsaXplZCBgY2hhckNvZGVgIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBjaGFyQ29kZTtcbiAgdmFyIGtleUNvZGUgPSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuXG4gIGlmICgnY2hhckNvZGUnIGluIG5hdGl2ZUV2ZW50KSB7XG4gICAgY2hhckNvZGUgPSBuYXRpdmVFdmVudC5jaGFyQ29kZTsgLy8gRkYgZG9lcyBub3Qgc2V0IGBjaGFyQ29kZWAgZm9yIHRoZSBFbnRlci1rZXksIGNoZWNrIGFnYWluc3QgYGtleUNvZGVgLlxuXG4gICAgaWYgKGNoYXJDb2RlID09PSAwICYmIGtleUNvZGUgPT09IDEzKSB7XG4gICAgICBjaGFyQ29kZSA9IDEzO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJRTggZG9lcyBub3QgaW1wbGVtZW50IGBjaGFyQ29kZWAsIGJ1dCBga2V5Q29kZWAgaGFzIHRoZSBjb3JyZWN0IHZhbHVlLlxuICAgIGNoYXJDb2RlID0ga2V5Q29kZTtcbiAgfSAvLyBJRSBhbmQgRWRnZSAob24gV2luZG93cykgYW5kIENocm9tZSAvIFNhZmFyaSAob24gV2luZG93cyBhbmQgTGludXgpXG4gIC8vIHJlcG9ydCBFbnRlciBhcyBjaGFyQ29kZSAxMCB3aGVuIGN0cmwgaXMgcHJlc3NlZC5cblxuXG4gIGlmIChjaGFyQ29kZSA9PT0gMTApIHtcbiAgICBjaGFyQ29kZSA9IDEzO1xuICB9IC8vIFNvbWUgbm9uLXByaW50YWJsZSBrZXlzIGFyZSByZXBvcnRlZCBpbiBgY2hhckNvZGVgL2BrZXlDb2RlYCwgZGlzY2FyZCB0aGVtLlxuICAvLyBNdXN0IG5vdCBkaXNjYXJkIHRoZSAobm9uLSlwcmludGFibGUgRW50ZXIta2V5LlxuXG5cbiAgaWYgKGNoYXJDb2RlID49IDMyIHx8IGNoYXJDb2RlID09PSAxMykge1xuICAgIHJldHVybiBjaGFyQ29kZTtcbiAgfVxuXG4gIHJldHVybiAwO1xufVxuXG5mdW5jdGlvbiBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZSgpIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGZ1bmN0aW9uVGhhdFJldHVybnNGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufSAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYSBmYWN0b3J5IHNvIHRoYXQgd2UgaGF2ZSBkaWZmZXJlbnQgcmV0dXJuZWQgY29uc3RydWN0b3JzLlxuLy8gSWYgd2UgaGFkIGEgc2luZ2xlIGNvbnN0cnVjdG9yLCBpdCB3b3VsZCBiZSBtZWdhbW9ycGhpYyBhbmQgZW5naW5lcyB3b3VsZCBkZW9wdC5cblxuXG5mdW5jdGlvbiBjcmVhdGVTeW50aGV0aWNFdmVudChJbnRlcmZhY2UpIHtcbiAgLyoqXG4gICAqIFN5bnRoZXRpYyBldmVudHMgYXJlIGRpc3BhdGNoZWQgYnkgZXZlbnQgcGx1Z2lucywgdHlwaWNhbGx5IGluIHJlc3BvbnNlIHRvIGFcbiAgICogdG9wLWxldmVsIGV2ZW50IGRlbGVnYXRpb24gaGFuZGxlci5cbiAgICpcbiAgICogVGhlc2Ugc3lzdGVtcyBzaG91bGQgZ2VuZXJhbGx5IHVzZSBwb29saW5nIHRvIHJlZHVjZSB0aGUgZnJlcXVlbmN5IG9mIGdhcmJhZ2VcbiAgICogY29sbGVjdGlvbi4gVGhlIHN5c3RlbSBzaG91bGQgY2hlY2sgYGlzUGVyc2lzdGVudGAgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgdGhlXG4gICAqIGV2ZW50IHNob3VsZCBiZSByZWxlYXNlZCBpbnRvIHRoZSBwb29sIGFmdGVyIGJlaW5nIGRpc3BhdGNoZWQuIFVzZXJzIHRoYXRcbiAgICogbmVlZCBhIHBlcnNpc3RlZCBldmVudCBzaG91bGQgaW52b2tlIGBwZXJzaXN0YC5cbiAgICpcbiAgICogU3ludGhldGljIGV2ZW50cyAoYW5kIHN1YmNsYXNzZXMpIGltcGxlbWVudCB0aGUgRE9NIExldmVsIDMgRXZlbnRzIEFQSSBieVxuICAgKiBub3JtYWxpemluZyBicm93c2VyIHF1aXJrcy4gU3ViY2xhc3NlcyBkbyBub3QgbmVjZXNzYXJpbHkgaGF2ZSB0byBpbXBsZW1lbnQgYVxuICAgKiBET00gaW50ZXJmYWNlOyBjdXN0b20gYXBwbGljYXRpb24tc3BlY2lmaWMgZXZlbnRzIGNhbiBhbHNvIHN1YmNsYXNzIHRoaXMuXG4gICAqL1xuICBmdW5jdGlvbiBTeW50aGV0aWNCYXNlRXZlbnQocmVhY3ROYW1lLCByZWFjdEV2ZW50VHlwZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgdGhpcy5fcmVhY3ROYW1lID0gcmVhY3ROYW1lO1xuICAgIHRoaXMuX3RhcmdldEluc3QgPSB0YXJnZXRJbnN0O1xuICAgIHRoaXMudHlwZSA9IHJlYWN0RXZlbnRUeXBlO1xuICAgIHRoaXMubmF0aXZlRXZlbnQgPSBuYXRpdmVFdmVudDtcbiAgICB0aGlzLnRhcmdldCA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgIHRoaXMuY3VycmVudFRhcmdldCA9IG51bGw7XG5cbiAgICBmb3IgKHZhciBfcHJvcE5hbWUgaW4gSW50ZXJmYWNlKSB7XG4gICAgICBpZiAoIUludGVyZmFjZS5oYXNPd25Qcm9wZXJ0eShfcHJvcE5hbWUpKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgbm9ybWFsaXplID0gSW50ZXJmYWNlW19wcm9wTmFtZV07XG5cbiAgICAgIGlmIChub3JtYWxpemUpIHtcbiAgICAgICAgdGhpc1tfcHJvcE5hbWVdID0gbm9ybWFsaXplKG5hdGl2ZUV2ZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXNbX3Byb3BOYW1lXSA9IG5hdGl2ZUV2ZW50W19wcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRQcmV2ZW50ZWQgPSBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkICE9IG51bGwgPyBuYXRpdmVFdmVudC5kZWZhdWx0UHJldmVudGVkIDogbmF0aXZlRXZlbnQucmV0dXJuVmFsdWUgPT09IGZhbHNlO1xuXG4gICAgaWYgKGRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb25UaGF0UmV0dXJuc0ZhbHNlO1xuICAgIH1cblxuICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zRmFsc2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhc3NpZ24oU3ludGhldGljQmFzZUV2ZW50LnByb3RvdHlwZSwge1xuICAgIHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgdmFyIGV2ZW50ID0gdGhpcy5uYXRpdmVFdmVudDtcblxuICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyAkRmxvd0ZpeE1lIC0gZmxvdyBpcyBub3QgYXdhcmUgb2YgYHVua25vd25gIGluIElFXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBldmVudC5yZXR1cm5WYWx1ZSAhPT0gJ3Vua25vd24nKSB7XG4gICAgICAgIGV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gZnVuY3Rpb25UaGF0UmV0dXJuc1RydWU7XG4gICAgfSxcbiAgICBzdG9wUHJvcGFnYXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBldmVudCA9IHRoaXMubmF0aXZlRXZlbnQ7XG5cbiAgICAgIGlmICghZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpOyAvLyAkRmxvd0ZpeE1lIC0gZmxvdyBpcyBub3QgYXdhcmUgb2YgYHVua25vd25gIGluIElFXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBldmVudC5jYW5jZWxCdWJibGUgIT09ICd1bmtub3duJykge1xuICAgICAgICAvLyBUaGUgQ2hhbmdlRXZlbnRQbHVnaW4gcmVnaXN0ZXJzIGEgXCJwcm9wZXJ0eWNoYW5nZVwiIGV2ZW50IGZvclxuICAgICAgICAvLyBJRS4gVGhpcyBldmVudCBkb2VzIG5vdCBzdXBwb3J0IGJ1YmJsaW5nIG9yIGNhbmNlbGxpbmcsIGFuZFxuICAgICAgICAvLyBhbnkgcmVmZXJlbmNlcyB0byBjYW5jZWxCdWJibGUgdGhyb3cgXCJNZW1iZXIgbm90IGZvdW5kXCIuICBBXG4gICAgICAgIC8vIHR5cGVvZiBjaGVjayBvZiBcInVua25vd25cIiBjaXJjdW12ZW50cyB0aGlzIGlzc3VlIChhbmQgaXMgYWxzb1xuICAgICAgICAvLyBJRSBzcGVjaWZpYykuXG4gICAgICAgIGV2ZW50LmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSBmdW5jdGlvblRoYXRSZXR1cm5zVHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogV2UgcmVsZWFzZSBhbGwgZGlzcGF0Y2hlZCBgU3ludGhldGljRXZlbnRgcyBhZnRlciBlYWNoIGV2ZW50IGxvb3AsIGFkZGluZ1xuICAgICAqIHRoZW0gYmFjayBpbnRvIHRoZSBwb29sLiBUaGlzIGFsbG93cyBhIHdheSB0byBob2xkIG9udG8gYSByZWZlcmVuY2UgdGhhdFxuICAgICAqIHdvbid0IGJlIGFkZGVkIGJhY2sgaW50byB0aGUgcG9vbC5cbiAgICAgKi9cbiAgICBwZXJzaXN0OiBmdW5jdGlvbiAoKSB7Ly8gTW9kZXJuIGV2ZW50IHN5c3RlbSBkb2Vzbid0IHVzZSBwb29saW5nLlxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgdGhpcyBldmVudCBzaG91bGQgYmUgcmVsZWFzZWQgYmFjayBpbnRvIHRoZSBwb29sLlxuICAgICAqXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGlzIHNob3VsZCBub3QgYmUgcmVsZWFzZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICAgKi9cbiAgICBpc1BlcnNpc3RlbnQ6IGZ1bmN0aW9uVGhhdFJldHVybnNUcnVlXG4gIH0pO1xuICByZXR1cm4gU3ludGhldGljQmFzZUV2ZW50O1xufVxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xuXG5cbnZhciBFdmVudEludGVyZmFjZSA9IHtcbiAgZXZlbnRQaGFzZTogMCxcbiAgYnViYmxlczogMCxcbiAgY2FuY2VsYWJsZTogMCxcbiAgdGltZVN0YW1wOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gZXZlbnQudGltZVN0YW1wIHx8IERhdGUubm93KCk7XG4gIH0sXG4gIGRlZmF1bHRQcmV2ZW50ZWQ6IDAsXG4gIGlzVHJ1c3RlZDogMFxufTtcbnZhciBTeW50aGV0aWNFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEV2ZW50SW50ZXJmYWNlKTtcblxudmFyIFVJRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gIHZpZXc6IDAsXG4gIGRldGFpbDogMFxufSk7XG5cbnZhciBTeW50aGV0aWNVSUV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoVUlFdmVudEludGVyZmFjZSk7XG52YXIgbGFzdE1vdmVtZW50WDtcbnZhciBsYXN0TW92ZW1lbnRZO1xudmFyIGxhc3RNb3VzZUV2ZW50O1xuXG5mdW5jdGlvbiB1cGRhdGVNb3VzZU1vdmVtZW50UG9seWZpbGxTdGF0ZShldmVudCkge1xuICBpZiAoZXZlbnQgIT09IGxhc3RNb3VzZUV2ZW50KSB7XG4gICAgaWYgKGxhc3RNb3VzZUV2ZW50ICYmIGV2ZW50LnR5cGUgPT09ICdtb3VzZW1vdmUnKSB7XG4gICAgICBsYXN0TW92ZW1lbnRYID0gZXZlbnQuc2NyZWVuWCAtIGxhc3RNb3VzZUV2ZW50LnNjcmVlblg7XG4gICAgICBsYXN0TW92ZW1lbnRZID0gZXZlbnQuc2NyZWVuWSAtIGxhc3RNb3VzZUV2ZW50LnNjcmVlblk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3RNb3ZlbWVudFggPSAwO1xuICAgICAgbGFzdE1vdmVtZW50WSA9IDA7XG4gICAgfVxuXG4gICAgbGFzdE1vdXNlRXZlbnQgPSBldmVudDtcbiAgfVxufVxuLyoqXG4gKiBAaW50ZXJmYWNlIE1vdXNlRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG5cblxudmFyIE1vdXNlRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIFVJRXZlbnRJbnRlcmZhY2UsIHtcbiAgc2NyZWVuWDogMCxcbiAgc2NyZWVuWTogMCxcbiAgY2xpZW50WDogMCxcbiAgY2xpZW50WTogMCxcbiAgcGFnZVg6IDAsXG4gIHBhZ2VZOiAwLFxuICBjdHJsS2V5OiAwLFxuICBzaGlmdEtleTogMCxcbiAgYWx0S2V5OiAwLFxuICBtZXRhS2V5OiAwLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gIGJ1dHRvbjogMCxcbiAgYnV0dG9uczogMCxcbiAgcmVsYXRlZFRhcmdldDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKGV2ZW50LnJlbGF0ZWRUYXJnZXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIGV2ZW50LmZyb21FbGVtZW50ID09PSBldmVudC5zcmNFbGVtZW50ID8gZXZlbnQudG9FbGVtZW50IDogZXZlbnQuZnJvbUVsZW1lbnQ7XG4gICAgcmV0dXJuIGV2ZW50LnJlbGF0ZWRUYXJnZXQ7XG4gIH0sXG4gIG1vdmVtZW50WDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgaWYgKCdtb3ZlbWVudFgnIGluIGV2ZW50KSB7XG4gICAgICByZXR1cm4gZXZlbnQubW92ZW1lbnRYO1xuICAgIH1cblxuICAgIHVwZGF0ZU1vdXNlTW92ZW1lbnRQb2x5ZmlsbFN0YXRlKGV2ZW50KTtcbiAgICByZXR1cm4gbGFzdE1vdmVtZW50WDtcbiAgfSxcbiAgbW92ZW1lbnRZOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICBpZiAoJ21vdmVtZW50WScgaW4gZXZlbnQpIHtcbiAgICAgIHJldHVybiBldmVudC5tb3ZlbWVudFk7XG4gICAgfSAvLyBEb24ndCBuZWVkIHRvIGNhbGwgdXBkYXRlTW91c2VNb3ZlbWVudFBvbHlmaWxsU3RhdGUoKSBoZXJlXG4gICAgLy8gYmVjYXVzZSBpdCdzIGd1YXJhbnRlZWQgdG8gaGF2ZSBhbHJlYWR5IHJ1biB3aGVuIG1vdmVtZW50WFxuICAgIC8vIHdhcyBjb3BpZWQuXG5cblxuICAgIHJldHVybiBsYXN0TW92ZW1lbnRZO1xuICB9XG59KTtcblxudmFyIFN5bnRoZXRpY01vdXNlRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChNb3VzZUV2ZW50SW50ZXJmYWNlKTtcbi8qKlxuICogQGludGVyZmFjZSBEcmFnRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG5cbnZhciBEcmFnRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIE1vdXNlRXZlbnRJbnRlcmZhY2UsIHtcbiAgZGF0YVRyYW5zZmVyOiAwXG59KTtcblxudmFyIFN5bnRoZXRpY0RyYWdFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KERyYWdFdmVudEludGVyZmFjZSk7XG4vKipcbiAqIEBpbnRlcmZhY2UgRm9jdXNFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cblxudmFyIEZvY3VzRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIFVJRXZlbnRJbnRlcmZhY2UsIHtcbiAgcmVsYXRlZFRhcmdldDogMFxufSk7XG5cbnZhciBTeW50aGV0aWNGb2N1c0V2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoRm9jdXNFdmVudEludGVyZmFjZSk7XG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1hbmltYXRpb25zLyNBbmltYXRpb25FdmVudC1pbnRlcmZhY2VcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0FuaW1hdGlvbkV2ZW50XG4gKi9cblxudmFyIEFuaW1hdGlvbkV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBFdmVudEludGVyZmFjZSwge1xuICBhbmltYXRpb25OYW1lOiAwLFxuICBlbGFwc2VkVGltZTogMCxcbiAgcHNldWRvRWxlbWVudDogMFxufSk7XG5cbnZhciBTeW50aGV0aWNBbmltYXRpb25FdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KEFuaW1hdGlvbkV2ZW50SW50ZXJmYWNlKTtcbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9jbGlwYm9hcmQtYXBpcy9cbiAqL1xuXG52YXIgQ2xpcGJvYXJkRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIEV2ZW50SW50ZXJmYWNlLCB7XG4gIGNsaXBib2FyZERhdGE6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIHJldHVybiAnY2xpcGJvYXJkRGF0YScgaW4gZXZlbnQgPyBldmVudC5jbGlwYm9hcmREYXRhIDogd2luZG93LmNsaXBib2FyZERhdGE7XG4gIH1cbn0pO1xuXG52YXIgU3ludGhldGljQ2xpcGJvYXJkRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChDbGlwYm9hcmRFdmVudEludGVyZmFjZSk7XG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtY29tcG9zaXRpb25ldmVudHNcbiAqL1xuXG52YXIgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgRXZlbnRJbnRlcmZhY2UsIHtcbiAgZGF0YTogMFxufSk7XG5cbnZhciBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSk7XG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAxMzExMDVcbiAqICAgICAgLyNldmVudHMtaW5wdXRldmVudHNcbiAqL1xuLy8gSGFwcGVucyB0byBzaGFyZSB0aGUgc2FtZSBsaXN0IGZvciBub3cuXG5cbnZhciBTeW50aGV0aWNJbnB1dEV2ZW50ID0gU3ludGhldGljQ29tcG9zaXRpb25FdmVudDtcbi8qKlxuICogTm9ybWFsaXphdGlvbiBvZiBkZXByZWNhdGVkIEhUTUw1IGBrZXlgIHZhbHVlc1xuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudCNLZXlfbmFtZXNcbiAqL1xuXG52YXIgbm9ybWFsaXplS2V5ID0ge1xuICBFc2M6ICdFc2NhcGUnLFxuICBTcGFjZWJhcjogJyAnLFxuICBMZWZ0OiAnQXJyb3dMZWZ0JyxcbiAgVXA6ICdBcnJvd1VwJyxcbiAgUmlnaHQ6ICdBcnJvd1JpZ2h0JyxcbiAgRG93bjogJ0Fycm93RG93bicsXG4gIERlbDogJ0RlbGV0ZScsXG4gIFdpbjogJ09TJyxcbiAgTWVudTogJ0NvbnRleHRNZW51JyxcbiAgQXBwczogJ0NvbnRleHRNZW51JyxcbiAgU2Nyb2xsOiAnU2Nyb2xsTG9jaycsXG4gIE1velByaW50YWJsZUtleTogJ1VuaWRlbnRpZmllZCdcbn07XG4vKipcbiAqIFRyYW5zbGF0aW9uIGZyb20gbGVnYWN5IGBrZXlDb2RlYCB0byBIVE1MNSBga2V5YFxuICogT25seSBzcGVjaWFsIGtleXMgc3VwcG9ydGVkLCBhbGwgb3RoZXJzIGRlcGVuZCBvbiBrZXlib2FyZCBsYXlvdXQgb3IgYnJvd3NlclxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvS2V5Ym9hcmRFdmVudCNLZXlfbmFtZXNcbiAqL1xuXG52YXIgdHJhbnNsYXRlVG9LZXkgPSB7XG4gICc4JzogJ0JhY2tzcGFjZScsXG4gICc5JzogJ1RhYicsXG4gICcxMic6ICdDbGVhcicsXG4gICcxMyc6ICdFbnRlcicsXG4gICcxNic6ICdTaGlmdCcsXG4gICcxNyc6ICdDb250cm9sJyxcbiAgJzE4JzogJ0FsdCcsXG4gICcxOSc6ICdQYXVzZScsXG4gICcyMCc6ICdDYXBzTG9jaycsXG4gICcyNyc6ICdFc2NhcGUnLFxuICAnMzInOiAnICcsXG4gICczMyc6ICdQYWdlVXAnLFxuICAnMzQnOiAnUGFnZURvd24nLFxuICAnMzUnOiAnRW5kJyxcbiAgJzM2JzogJ0hvbWUnLFxuICAnMzcnOiAnQXJyb3dMZWZ0JyxcbiAgJzM4JzogJ0Fycm93VXAnLFxuICAnMzknOiAnQXJyb3dSaWdodCcsXG4gICc0MCc6ICdBcnJvd0Rvd24nLFxuICAnNDUnOiAnSW5zZXJ0JyxcbiAgJzQ2JzogJ0RlbGV0ZScsXG4gICcxMTInOiAnRjEnLFxuICAnMTEzJzogJ0YyJyxcbiAgJzExNCc6ICdGMycsXG4gICcxMTUnOiAnRjQnLFxuICAnMTE2JzogJ0Y1JyxcbiAgJzExNyc6ICdGNicsXG4gICcxMTgnOiAnRjcnLFxuICAnMTE5JzogJ0Y4JyxcbiAgJzEyMCc6ICdGOScsXG4gICcxMjEnOiAnRjEwJyxcbiAgJzEyMic6ICdGMTEnLFxuICAnMTIzJzogJ0YxMicsXG4gICcxNDQnOiAnTnVtTG9jaycsXG4gICcxNDUnOiAnU2Nyb2xsTG9jaycsXG4gICcyMjQnOiAnTWV0YSdcbn07XG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudCBOYXRpdmUgYnJvd3NlciBldmVudC5cbiAqIEByZXR1cm4ge3N0cmluZ30gTm9ybWFsaXplZCBga2V5YCBwcm9wZXJ0eS5cbiAqL1xuXG5mdW5jdGlvbiBnZXRFdmVudEtleShuYXRpdmVFdmVudCkge1xuICBpZiAobmF0aXZlRXZlbnQua2V5KSB7XG4gICAgLy8gTm9ybWFsaXplIGluY29uc2lzdGVudCB2YWx1ZXMgcmVwb3J0ZWQgYnkgYnJvd3NlcnMgZHVlIHRvXG4gICAgLy8gaW1wbGVtZW50YXRpb25zIG9mIGEgd29ya2luZyBkcmFmdCBzcGVjaWZpY2F0aW9uLlxuICAgIC8vIEZpcmVGb3ggaW1wbGVtZW50cyBga2V5YCBidXQgcmV0dXJucyBgTW96UHJpbnRhYmxlS2V5YCBmb3IgYWxsXG4gICAgLy8gcHJpbnRhYmxlIGNoYXJhY3RlcnMgKG5vcm1hbGl6ZWQgdG8gYFVuaWRlbnRpZmllZGApLCBpZ25vcmUgaXQuXG4gICAgdmFyIGtleSA9IG5vcm1hbGl6ZUtleVtuYXRpdmVFdmVudC5rZXldIHx8IG5hdGl2ZUV2ZW50LmtleTtcblxuICAgIGlmIChrZXkgIT09ICdVbmlkZW50aWZpZWQnKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfSAvLyBCcm93c2VyIGRvZXMgbm90IGltcGxlbWVudCBga2V5YCwgcG9seWZpbGwgYXMgbXVjaCBvZiBpdCBhcyB3ZSBjYW4uXG5cblxuICBpZiAobmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgIHZhciBjaGFyQ29kZSA9IGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpOyAvLyBUaGUgZW50ZXIta2V5IGlzIHRlY2huaWNhbGx5IGJvdGggcHJpbnRhYmxlIGFuZCBub24tcHJpbnRhYmxlIGFuZCBjYW5cbiAgICAvLyB0aHVzIGJlIGNhcHR1cmVkIGJ5IGBrZXlwcmVzc2AsIG5vIG90aGVyIG5vbi1wcmludGFibGUga2V5IHNob3VsZC5cblxuICAgIHJldHVybiBjaGFyQ29kZSA9PT0gMTMgPyAnRW50ZXInIDogU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSk7XG4gIH1cblxuICBpZiAobmF0aXZlRXZlbnQudHlwZSA9PT0gJ2tleWRvd24nIHx8IG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXl1cCcpIHtcbiAgICAvLyBXaGlsZSB1c2VyIGtleWJvYXJkIGxheW91dCBkZXRlcm1pbmVzIHRoZSBhY3R1YWwgbWVhbmluZyBvZiBlYWNoXG4gICAgLy8gYGtleUNvZGVgIHZhbHVlLCBhbG1vc3QgYWxsIGZ1bmN0aW9uIGtleXMgaGF2ZSBhIHVuaXZlcnNhbCB2YWx1ZS5cbiAgICByZXR1cm4gdHJhbnNsYXRlVG9LZXlbbmF0aXZlRXZlbnQua2V5Q29kZV0gfHwgJ1VuaWRlbnRpZmllZCc7XG4gIH1cblxuICByZXR1cm4gJyc7XG59XG4vKipcbiAqIFRyYW5zbGF0aW9uIGZyb20gbW9kaWZpZXIga2V5IHRvIHRoZSBhc3NvY2lhdGVkIHByb3BlcnR5IGluIHRoZSBldmVudC5cbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNrZXlzLU1vZGlmaWVyc1xuICovXG5cblxudmFyIG1vZGlmaWVyS2V5VG9Qcm9wID0ge1xuICBBbHQ6ICdhbHRLZXknLFxuICBDb250cm9sOiAnY3RybEtleScsXG4gIE1ldGE6ICdtZXRhS2V5JyxcbiAgU2hpZnQ6ICdzaGlmdEtleSdcbn07IC8vIE9sZGVyIGJyb3dzZXJzIChTYWZhcmkgPD0gMTAsIGlPUyBTYWZhcmkgPD0gMTAuMikgZG8gbm90IHN1cHBvcnRcbi8vIGdldE1vZGlmaWVyU3RhdGUuIElmIGdldE1vZGlmaWVyU3RhdGUgaXMgbm90IHN1cHBvcnRlZCwgd2UgbWFwIGl0IHRvIGEgc2V0IG9mXG4vLyBtb2RpZmllciBrZXlzIGV4cG9zZWQgYnkgdGhlIGV2ZW50LiBJbiB0aGlzIGNhc2UsIExvY2sta2V5cyBhcmUgbm90IHN1cHBvcnRlZC5cblxuZnVuY3Rpb24gbW9kaWZpZXJTdGF0ZUdldHRlcihrZXlBcmcpIHtcbiAgdmFyIHN5bnRoZXRpY0V2ZW50ID0gdGhpcztcbiAgdmFyIG5hdGl2ZUV2ZW50ID0gc3ludGhldGljRXZlbnQubmF0aXZlRXZlbnQ7XG5cbiAgaWYgKG5hdGl2ZUV2ZW50LmdldE1vZGlmaWVyU3RhdGUpIHtcbiAgICByZXR1cm4gbmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZShrZXlBcmcpO1xuICB9XG5cbiAgdmFyIGtleVByb3AgPSBtb2RpZmllcktleVRvUHJvcFtrZXlBcmddO1xuICByZXR1cm4ga2V5UHJvcCA/ICEhbmF0aXZlRXZlbnRba2V5UHJvcF0gOiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnRNb2RpZmllclN0YXRlKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiBtb2RpZmllclN0YXRlR2V0dGVyO1xufVxuLyoqXG4gKiBAaW50ZXJmYWNlIEtleWJvYXJkRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG5cblxudmFyIEtleWJvYXJkRXZlbnRJbnRlcmZhY2UgPSBhc3NpZ24oe30sIFVJRXZlbnRJbnRlcmZhY2UsIHtcbiAga2V5OiBnZXRFdmVudEtleSxcbiAgY29kZTogMCxcbiAgbG9jYXRpb246IDAsXG4gIGN0cmxLZXk6IDAsXG4gIHNoaWZ0S2V5OiAwLFxuICBhbHRLZXk6IDAsXG4gIG1ldGFLZXk6IDAsXG4gIHJlcGVhdDogMCxcbiAgbG9jYWxlOiAwLFxuICBnZXRNb2RpZmllclN0YXRlOiBnZXRFdmVudE1vZGlmaWVyU3RhdGUsXG4gIC8vIExlZ2FjeSBJbnRlcmZhY2VcbiAgY2hhckNvZGU6IGZ1bmN0aW9uIChldmVudCkge1xuICAgIC8vIGBjaGFyQ29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleVByZXNzIGV2ZW50IGFuZCByZXByZXNlbnRzIHRoZSB2YWx1ZSBvZlxuICAgIC8vIHRoZSBhY3R1YWwgcHJpbnRhYmxlIGNoYXJhY3Rlci5cbiAgICAvLyBLZXlQcmVzcyBpcyBkZXByZWNhdGVkLCBidXQgaXRzIHJlcGxhY2VtZW50IGlzIG5vdCB5ZXQgZmluYWwgYW5kIG5vdFxuICAgIC8vIGltcGxlbWVudGVkIGluIGFueSBtYWpvciBicm93c2VyLiBPbmx5IEtleVByZXNzIGhhcyBjaGFyQ29kZS5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgICAgcmV0dXJuIGdldEV2ZW50Q2hhckNvZGUoZXZlbnQpO1xuICAgIH1cblxuICAgIHJldHVybiAwO1xuICB9LFxuICBrZXlDb2RlOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBga2V5Q29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleURvd24vVXAgZXZlbnQgYW5kIHJlcHJlc2VudHMgdGhlIHZhbHVlIG9mXG4gICAgLy8gcGh5c2ljYWwga2V5Ym9hcmQga2V5LlxuICAgIC8vIFRoZSBhY3R1YWwgbWVhbmluZyBvZiB0aGUgdmFsdWUgZGVwZW5kcyBvbiB0aGUgdXNlcnMnIGtleWJvYXJkIGxheW91dFxuICAgIC8vIHdoaWNoIGNhbm5vdCBiZSBkZXRlY3RlZC4gQXNzdW1pbmcgdGhhdCBpdCBpcyBhIFVTIGtleWJvYXJkIGxheW91dFxuICAgIC8vIHByb3ZpZGVzIGEgc3VycHJpc2luZ2x5IGFjY3VyYXRlIG1hcHBpbmcgZm9yIFVTIGFuZCBFdXJvcGVhbiB1c2Vycy5cbiAgICAvLyBEdWUgdG8gdGhpcywgaXQgaXMgbGVmdCB0byB0aGUgdXNlciB0byBpbXBsZW1lbnQgYXQgdGhpcyB0aW1lLlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5ZG93bicgfHwgZXZlbnQudHlwZSA9PT0gJ2tleXVwJykge1xuICAgICAgcmV0dXJuIGV2ZW50LmtleUNvZGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG4gIH0sXG4gIHdoaWNoOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAvLyBgd2hpY2hgIGlzIGFuIGFsaWFzIGZvciBlaXRoZXIgYGtleUNvZGVgIG9yIGBjaGFyQ29kZWAgZGVwZW5kaW5nIG9uIHRoZVxuICAgIC8vIHR5cGUgb2YgdGhlIGV2ZW50LlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBldmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgICByZXR1cm4gZXZlbnQua2V5Q29kZTtcbiAgICB9XG5cbiAgICByZXR1cm4gMDtcbiAgfVxufSk7XG5cbnZhciBTeW50aGV0aWNLZXlib2FyZEV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoS2V5Ym9hcmRFdmVudEludGVyZmFjZSk7XG4vKipcbiAqIEBpbnRlcmZhY2UgUG9pbnRlckV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL3BvaW50ZXJldmVudHMvXG4gKi9cblxudmFyIFBvaW50ZXJFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgTW91c2VFdmVudEludGVyZmFjZSwge1xuICBwb2ludGVySWQ6IDAsXG4gIHdpZHRoOiAwLFxuICBoZWlnaHQ6IDAsXG4gIHByZXNzdXJlOiAwLFxuICB0YW5nZW50aWFsUHJlc3N1cmU6IDAsXG4gIHRpbHRYOiAwLFxuICB0aWx0WTogMCxcbiAgdHdpc3Q6IDAsXG4gIHBvaW50ZXJUeXBlOiAwLFxuICBpc1ByaW1hcnk6IDBcbn0pO1xuXG52YXIgU3ludGhldGljUG9pbnRlckV2ZW50ID0gY3JlYXRlU3ludGhldGljRXZlbnQoUG9pbnRlckV2ZW50SW50ZXJmYWNlKTtcbi8qKlxuICogQGludGVyZmFjZSBUb3VjaEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL3RvdWNoLWV2ZW50cy9cbiAqL1xuXG52YXIgVG91Y2hFdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgVUlFdmVudEludGVyZmFjZSwge1xuICB0b3VjaGVzOiAwLFxuICB0YXJnZXRUb3VjaGVzOiAwLFxuICBjaGFuZ2VkVG91Y2hlczogMCxcbiAgYWx0S2V5OiAwLFxuICBtZXRhS2V5OiAwLFxuICBjdHJsS2V5OiAwLFxuICBzaGlmdEtleTogMCxcbiAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlXG59KTtcblxudmFyIFN5bnRoZXRpY1RvdWNoRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChUb3VjaEV2ZW50SW50ZXJmYWNlKTtcbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA5L1dELWNzczMtdHJhbnNpdGlvbnMtMjAwOTAzMjAvI3RyYW5zaXRpb24tZXZlbnRzLVxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVHJhbnNpdGlvbkV2ZW50XG4gKi9cblxudmFyIFRyYW5zaXRpb25FdmVudEludGVyZmFjZSA9IGFzc2lnbih7fSwgRXZlbnRJbnRlcmZhY2UsIHtcbiAgcHJvcGVydHlOYW1lOiAwLFxuICBlbGFwc2VkVGltZTogMCxcbiAgcHNldWRvRWxlbWVudDogMFxufSk7XG5cbnZhciBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQgPSBjcmVhdGVTeW50aGV0aWNFdmVudChUcmFuc2l0aW9uRXZlbnRJbnRlcmZhY2UpO1xuLyoqXG4gKiBAaW50ZXJmYWNlIFdoZWVsRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG5cbnZhciBXaGVlbEV2ZW50SW50ZXJmYWNlID0gYXNzaWduKHt9LCBNb3VzZUV2ZW50SW50ZXJmYWNlLCB7XG4gIGRlbHRhWDogZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgcmV0dXJuICdkZWx0YVgnIGluIGV2ZW50ID8gZXZlbnQuZGVsdGFYIDogLy8gRmFsbGJhY2sgdG8gYHdoZWVsRGVsdGFYYCBmb3IgV2Via2l0IGFuZCBub3JtYWxpemUgKHJpZ2h0IGlzIHBvc2l0aXZlKS5cbiAgICAnd2hlZWxEZWx0YVgnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFYIDogMDtcbiAgfSxcbiAgZGVsdGFZOiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICByZXR1cm4gJ2RlbHRhWScgaW4gZXZlbnQgPyBldmVudC5kZWx0YVkgOiAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YVlgIGZvciBXZWJraXQgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG4gICAgJ3doZWVsRGVsdGFZJyBpbiBldmVudCA/IC1ldmVudC53aGVlbERlbHRhWSA6IC8vIEZhbGxiYWNrIHRvIGB3aGVlbERlbHRhYCBmb3IgSUU8OSBhbmQgbm9ybWFsaXplIChkb3duIGlzIHBvc2l0aXZlKS5cbiAgICAnd2hlZWxEZWx0YScgaW4gZXZlbnQgPyAtZXZlbnQud2hlZWxEZWx0YSA6IDA7XG4gIH0sXG4gIGRlbHRhWjogMCxcbiAgLy8gQnJvd3NlcnMgd2l0aG91dCBcImRlbHRhTW9kZVwiIGlzIHJlcG9ydGluZyBpbiByYXcgd2hlZWwgZGVsdGEgd2hlcmUgb25lXG4gIC8vIG5vdGNoIG9uIHRoZSBzY3JvbGwgaXMgYWx3YXlzICsvLSAxMjAsIHJvdWdobHkgZXF1aXZhbGVudCB0byBwaXhlbHMuXG4gIC8vIEEgZ29vZCBhcHByb3hpbWF0aW9uIG9mIERPTV9ERUxUQV9MSU5FICgxKSBpcyA1JSBvZiB2aWV3cG9ydCBzaXplIG9yXG4gIC8vIH40MCBwaXhlbHMsIGZvciBET01fREVMVEFfU0NSRUVOICgyKSBpdCBpcyA4Ny41JSBvZiB2aWV3cG9ydCBzaXplLlxuICBkZWx0YU1vZGU6IDBcbn0pO1xuXG52YXIgU3ludGhldGljV2hlZWxFdmVudCA9IGNyZWF0ZVN5bnRoZXRpY0V2ZW50KFdoZWVsRXZlbnRJbnRlcmZhY2UpO1xuXG52YXIgRU5EX0tFWUNPREVTID0gWzksIDEzLCAyNywgMzJdOyAvLyBUYWIsIFJldHVybiwgRXNjLCBTcGFjZVxuXG52YXIgU1RBUlRfS0VZQ09ERSA9IDIyOTtcbnZhciBjYW5Vc2VDb21wb3NpdGlvbkV2ZW50ID0gY2FuVXNlRE9NICYmICdDb21wb3NpdGlvbkV2ZW50JyBpbiB3aW5kb3c7XG52YXIgZG9jdW1lbnRNb2RlID0gbnVsbDtcblxuaWYgKGNhblVzZURPTSAmJiAnZG9jdW1lbnRNb2RlJyBpbiBkb2N1bWVudCkge1xuICBkb2N1bWVudE1vZGUgPSBkb2N1bWVudC5kb2N1bWVudE1vZGU7XG59IC8vIFdlYmtpdCBvZmZlcnMgYSB2ZXJ5IHVzZWZ1bCBgdGV4dElucHV0YCBldmVudCB0aGF0IGNhbiBiZSB1c2VkIHRvXG4vLyBkaXJlY3RseSByZXByZXNlbnQgYGJlZm9yZUlucHV0YC4gVGhlIElFIGB0ZXh0aW5wdXRgIGV2ZW50IGlzIG5vdCBhc1xuLy8gdXNlZnVsLCBzbyB3ZSBkb24ndCB1c2UgaXQuXG5cblxudmFyIGNhblVzZVRleHRJbnB1dEV2ZW50ID0gY2FuVXNlRE9NICYmICdUZXh0RXZlbnQnIGluIHdpbmRvdyAmJiAhZG9jdW1lbnRNb2RlOyAvLyBJbiBJRTkrLCB3ZSBoYXZlIGFjY2VzcyB0byBjb21wb3NpdGlvbiBldmVudHMsIGJ1dCB0aGUgZGF0YSBzdXBwbGllZFxuLy8gYnkgdGhlIG5hdGl2ZSBjb21wb3NpdGlvbmVuZCBldmVudCBtYXkgYmUgaW5jb3JyZWN0LiBKYXBhbmVzZSBpZGVvZ3JhcGhpY1xuLy8gc3BhY2VzLCBmb3IgaW5zdGFuY2UgKFxcdTMwMDApIGFyZSBub3QgcmVjb3JkZWQgY29ycmVjdGx5LlxuXG52YXIgdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgPSBjYW5Vc2VET00gJiYgKCFjYW5Vc2VDb21wb3NpdGlvbkV2ZW50IHx8IGRvY3VtZW50TW9kZSAmJiBkb2N1bWVudE1vZGUgPiA4ICYmIGRvY3VtZW50TW9kZSA8PSAxMSk7XG52YXIgU1BBQ0VCQVJfQ09ERSA9IDMyO1xudmFyIFNQQUNFQkFSX0NIQVIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKFNQQUNFQkFSX0NPREUpO1xuXG5mdW5jdGlvbiByZWdpc3RlckV2ZW50cygpIHtcbiAgcmVnaXN0ZXJUd29QaGFzZUV2ZW50KCdvbkJlZm9yZUlucHV0JywgWydjb21wb3NpdGlvbmVuZCcsICdrZXlwcmVzcycsICd0ZXh0SW5wdXQnLCAncGFzdGUnXSk7XG4gIHJlZ2lzdGVyVHdvUGhhc2VFdmVudCgnb25Db21wb3NpdGlvbkVuZCcsIFsnY29tcG9zaXRpb25lbmQnLCAnZm9jdXNvdXQnLCAna2V5ZG93bicsICdrZXlwcmVzcycsICdrZXl1cCcsICdtb3VzZWRvd24nXSk7XG4gIHJlZ2lzdGVyVHdvUGhhc2VFdmVudCgnb25Db21wb3NpdGlvblN0YXJ0JywgWydjb21wb3NpdGlvbnN0YXJ0JywgJ2ZvY3Vzb3V0JywgJ2tleWRvd24nLCAna2V5cHJlc3MnLCAna2V5dXAnLCAnbW91c2Vkb3duJ10pO1xuICByZWdpc3RlclR3b1BoYXNlRXZlbnQoJ29uQ29tcG9zaXRpb25VcGRhdGUnLCBbJ2NvbXBvc2l0aW9udXBkYXRlJywgJ2ZvY3Vzb3V0JywgJ2tleWRvd24nLCAna2V5cHJlc3MnLCAna2V5dXAnLCAnbW91c2Vkb3duJ10pO1xufSAvLyBUcmFjayB3aGV0aGVyIHdlJ3ZlIGV2ZXIgaGFuZGxlZCBhIGtleXByZXNzIG9uIHRoZSBzcGFjZSBrZXkuXG5cblxudmFyIGhhc1NwYWNlS2V5cHJlc3MgPSBmYWxzZTtcbi8qKlxuICogUmV0dXJuIHdoZXRoZXIgYSBuYXRpdmUga2V5cHJlc3MgZXZlbnQgaXMgYXNzdW1lZCB0byBiZSBhIGNvbW1hbmQuXG4gKiBUaGlzIGlzIHJlcXVpcmVkIGJlY2F1c2UgRmlyZWZveCBmaXJlcyBga2V5cHJlc3NgIGV2ZW50cyBmb3Iga2V5IGNvbW1hbmRzXG4gKiAoY3V0LCBjb3B5LCBzZWxlY3QtYWxsLCBldGMuKSBldmVuIHRob3VnaCBubyBjaGFyYWN0ZXIgaXMgaW5zZXJ0ZWQuXG4gKi9cblxuZnVuY3Rpb24gaXNLZXlwcmVzc0NvbW1hbmQobmF0aXZlRXZlbnQpIHtcbiAgcmV0dXJuIChuYXRpdmVFdmVudC5jdHJsS2V5IHx8IG5hdGl2ZUV2ZW50LmFsdEtleSB8fCBuYXRpdmVFdmVudC5tZXRhS2V5KSAmJiAvLyBjdHJsS2V5ICYmIGFsdEtleSBpcyBlcXVpdmFsZW50IHRvIEFsdEdyLCBhbmQgaXMgbm90IGEgY29tbWFuZC5cbiAgIShuYXRpdmVFdmVudC5jdHJsS2V5ICYmIG5hdGl2ZUV2ZW50LmFsdEtleSk7XG59XG4vKipcbiAqIFRyYW5zbGF0ZSBuYXRpdmUgdG9wIGxldmVsIGV2ZW50cyBpbnRvIGV2ZW50IHR5cGVzLlxuICovXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9zaXRpb25FdmVudFR5cGUoZG9tRXZlbnROYW1lKSB7XG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSAnY29tcG9zaXRpb25zdGFydCc6XG4gICAgICByZXR1cm4gJ29uQ29tcG9zaXRpb25TdGFydCc7XG5cbiAgICBjYXNlICdjb21wb3NpdGlvbmVuZCc6XG4gICAgICByZXR1cm4gJ29uQ29tcG9zaXRpb25FbmQnO1xuXG4gICAgY2FzZSAnY29tcG9zaXRpb251cGRhdGUnOlxuICAgICAgcmV0dXJuICdvbkNvbXBvc2l0aW9uVXBkYXRlJztcbiAgfVxufVxuLyoqXG4gKiBEb2VzIG91ciBmYWxsYmFjayBiZXN0LWd1ZXNzIG1vZGVsIHRoaW5rIHRoaXMgZXZlbnQgc2lnbmlmaWVzIHRoYXRcbiAqIGNvbXBvc2l0aW9uIGhhcyBiZWd1bj9cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzRmFsbGJhY2tDb21wb3NpdGlvblN0YXJ0KGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpIHtcbiAgcmV0dXJuIGRvbUV2ZW50TmFtZSA9PT0gJ2tleWRvd24nICYmIG5hdGl2ZUV2ZW50LmtleUNvZGUgPT09IFNUQVJUX0tFWUNPREU7XG59XG4vKipcbiAqIERvZXMgb3VyIGZhbGxiYWNrIG1vZGUgdGhpbmsgdGhhdCB0aGlzIGV2ZW50IGlzIHRoZSBlbmQgb2YgY29tcG9zaXRpb24/XG4gKi9cblxuXG5mdW5jdGlvbiBpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkge1xuICBzd2l0Y2ggKGRvbUV2ZW50TmFtZSkge1xuICAgIGNhc2UgJ2tleXVwJzpcbiAgICAgIC8vIENvbW1hbmQga2V5cyBpbnNlcnQgb3IgY2xlYXIgSU1FIGlucHV0LlxuICAgICAgcmV0dXJuIEVORF9LRVlDT0RFUy5pbmRleE9mKG5hdGl2ZUV2ZW50LmtleUNvZGUpICE9PSAtMTtcblxuICAgIGNhc2UgJ2tleWRvd24nOlxuICAgICAgLy8gRXhwZWN0IElNRSBrZXlDb2RlIG9uIGVhY2gga2V5ZG93bi4gSWYgd2UgZ2V0IGFueSBvdGhlclxuICAgICAgLy8gY29kZSB3ZSBtdXN0IGhhdmUgZXhpdGVkIGVhcmxpZXIuXG4gICAgICByZXR1cm4gbmF0aXZlRXZlbnQua2V5Q29kZSAhPT0gU1RBUlRfS0VZQ09ERTtcblxuICAgIGNhc2UgJ2tleXByZXNzJzpcbiAgICBjYXNlICdtb3VzZWRvd24nOlxuICAgIGNhc2UgJ2ZvY3Vzb3V0JzpcbiAgICAgIC8vIEV2ZW50cyBhcmUgbm90IHBvc3NpYmxlIHdpdGhvdXQgY2FuY2VsbGluZyBJTUUuXG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbi8qKlxuICogR29vZ2xlIElucHV0IFRvb2xzIHByb3ZpZGVzIGNvbXBvc2l0aW9uIGRhdGEgdmlhIGEgQ3VzdG9tRXZlbnQsXG4gKiB3aXRoIHRoZSBgZGF0YWAgcHJvcGVydHkgcG9wdWxhdGVkIGluIHRoZSBgZGV0YWlsYCBvYmplY3QuIElmIHRoaXNcbiAqIGlzIGF2YWlsYWJsZSBvbiB0aGUgZXZlbnQgb2JqZWN0LCB1c2UgaXQuIElmIG5vdCwgdGhpcyBpcyBhIHBsYWluXG4gKiBjb21wb3NpdGlvbiBldmVudCBhbmQgd2UgaGF2ZSBub3RoaW5nIHNwZWNpYWwgdG8gZXh0cmFjdC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEByZXR1cm4gez9zdHJpbmd9XG4gKi9cblxuXG5mdW5jdGlvbiBnZXREYXRhRnJvbUN1c3RvbUV2ZW50KG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBkZXRhaWwgPSBuYXRpdmVFdmVudC5kZXRhaWw7XG5cbiAgaWYgKHR5cGVvZiBkZXRhaWwgPT09ICdvYmplY3QnICYmICdkYXRhJyBpbiBkZXRhaWwpIHtcbiAgICByZXR1cm4gZGV0YWlsLmRhdGE7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbi8qKlxuICogQ2hlY2sgaWYgYSBjb21wb3NpdGlvbiBldmVudCB3YXMgdHJpZ2dlcmVkIGJ5IEtvcmVhbiBJTUUuXG4gKiBPdXIgZmFsbGJhY2sgbW9kZSBkb2VzIG5vdCB3b3JrIHdlbGwgd2l0aCBJRSdzIEtvcmVhbiBJTUUsXG4gKiBzbyBqdXN0IHVzZSBuYXRpdmUgY29tcG9zaXRpb24gZXZlbnRzIHdoZW4gS29yZWFuIElNRSBpcyB1c2VkLlxuICogQWx0aG91Z2ggQ29tcG9zaXRpb25FdmVudC5sb2NhbGUgcHJvcGVydHkgaXMgZGVwcmVjYXRlZCxcbiAqIGl0IGlzIGF2YWlsYWJsZSBpbiBJRSwgd2hlcmUgb3VyIGZhbGxiYWNrIG1vZGUgaXMgZW5hYmxlZC5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuXG5mdW5jdGlvbiBpc1VzaW5nS29yZWFuSU1FKG5hdGl2ZUV2ZW50KSB7XG4gIHJldHVybiBuYXRpdmVFdmVudC5sb2NhbGUgPT09ICdrbyc7XG59IC8vIFRyYWNrIHRoZSBjdXJyZW50IElNRSBjb21wb3NpdGlvbiBzdGF0dXMsIGlmIGFueS5cblxuXG52YXIgaXNDb21wb3NpbmcgPSBmYWxzZTtcbi8qKlxuICogQHJldHVybiB7P29iamVjdH0gQSBTeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LlxuICovXG5cbmZ1bmN0aW9uIGV4dHJhY3RDb21wb3NpdGlvbkV2ZW50KGRpc3BhdGNoUXVldWUsIGRvbUV2ZW50TmFtZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBldmVudFR5cGU7XG4gIHZhciBmYWxsYmFja0RhdGE7XG5cbiAgaWYgKGNhblVzZUNvbXBvc2l0aW9uRXZlbnQpIHtcbiAgICBldmVudFR5cGUgPSBnZXRDb21wb3NpdGlvbkV2ZW50VHlwZShkb21FdmVudE5hbWUpO1xuICB9IGVsc2UgaWYgKCFpc0NvbXBvc2luZykge1xuICAgIGlmIChpc0ZhbGxiYWNrQ29tcG9zaXRpb25TdGFydChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSkge1xuICAgICAgZXZlbnRUeXBlID0gJ29uQ29tcG9zaXRpb25TdGFydCc7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRmFsbGJhY2tDb21wb3NpdGlvbkVuZChkb21FdmVudE5hbWUsIG5hdGl2ZUV2ZW50KSkge1xuICAgIGV2ZW50VHlwZSA9ICdvbkNvbXBvc2l0aW9uRW5kJztcbiAgfVxuXG4gIGlmICghZXZlbnRUeXBlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpZiAodXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgJiYgIWlzVXNpbmdLb3JlYW5JTUUobmF0aXZlRXZlbnQpKSB7XG4gICAgLy8gVGhlIGN1cnJlbnQgY29tcG9zaXRpb24gaXMgc3RvcmVkIHN0YXRpY2FsbHkgYW5kIG11c3Qgbm90IGJlXG4gICAgLy8gb3ZlcndyaXR0ZW4gd2hpbGUgY29tcG9zaXRpb24gY29udGludWVzLlxuICAgIGlmICghaXNDb21wb3NpbmcgJiYgZXZlbnRUeXBlID09PSAnb25Db21wb3NpdGlvblN0YXJ0Jykge1xuICAgICAgaXNDb21wb3NpbmcgPSBpbml0aWFsaXplKG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50VHlwZSA9PT0gJ29uQ29tcG9zaXRpb25FbmQnKSB7XG4gICAgICBpZiAoaXNDb21wb3NpbmcpIHtcbiAgICAgICAgZmFsbGJhY2tEYXRhID0gZ2V0RGF0YSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnModGFyZ2V0SW5zdCwgZXZlbnRUeXBlKTtcblxuICBpZiAobGlzdGVuZXJzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgZXZlbnQgPSBuZXcgU3ludGhldGljQ29tcG9zaXRpb25FdmVudChldmVudFR5cGUsIGRvbUV2ZW50TmFtZSwgbnVsbCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICBkaXNwYXRjaFF1ZXVlLnB1c2goe1xuICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgbGlzdGVuZXJzOiBsaXN0ZW5lcnNcbiAgICB9KTtcblxuICAgIGlmIChmYWxsYmFja0RhdGEpIHtcbiAgICAgIC8vIEluamVjdCBkYXRhIGdlbmVyYXRlZCBmcm9tIGZhbGxiYWNrIHBhdGggaW50byB0aGUgc3ludGhldGljIGV2ZW50LlxuICAgICAgLy8gVGhpcyBtYXRjaGVzIHRoZSBwcm9wZXJ0eSBvZiBuYXRpdmUgQ29tcG9zaXRpb25FdmVudEludGVyZmFjZS5cbiAgICAgIGV2ZW50LmRhdGEgPSBmYWxsYmFja0RhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjdXN0b21EYXRhID0gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCk7XG5cbiAgICAgIGlmIChjdXN0b21EYXRhICE9PSBudWxsKSB7XG4gICAgICAgIGV2ZW50LmRhdGEgPSBjdXN0b21EYXRhO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXROYXRpdmVCZWZvcmVJbnB1dENoYXJzKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpIHtcbiAgc3dpdGNoIChkb21FdmVudE5hbWUpIHtcbiAgICBjYXNlICdjb21wb3NpdGlvbmVuZCc6XG4gICAgICByZXR1cm4gZ2V0RGF0YUZyb21DdXN0b21FdmVudChuYXRpdmVFdmVudCk7XG5cbiAgICBjYXNlICdrZXlwcmVzcyc6XG4gICAgICAvKipcbiAgICAgICAqIElmIG5hdGl2ZSBgdGV4dElucHV0YCBldmVudHMgYXJlIGF2YWlsYWJsZSwgb3VyIGdvYWwgaXMgdG8gbWFrZVxuICAgICAgICogdXNlIG9mIHRoZW0uIEhvd2V2ZXIsIHRoZXJlIGlzIGEgc3BlY2lhbCBjYXNlOiB0aGUgc3BhY2ViYXIga2V5LlxuICAgICAgICogSW4gV2Via2l0LCBwcmV2ZW50aW5nIGRlZmF1bHQgb24gYSBzcGFjZWJhciBgdGV4dElucHV0YCBldmVudFxuICAgICAgICogY2FuY2VscyBjaGFyYWN0ZXIgaW5zZXJ0aW9uLCBidXQgaXQgKmFsc28qIGNhdXNlcyB0aGUgYnJvd3NlclxuICAgICAgICogdG8gZmFsbCBiYWNrIHRvIGl0cyBkZWZhdWx0IHNwYWNlYmFyIGJlaGF2aW9yIG9mIHNjcm9sbGluZyB0aGVcbiAgICAgICAqIHBhZ2UuXG4gICAgICAgKlxuICAgICAgICogVHJhY2tpbmcgYXQ6XG4gICAgICAgKiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9MzU1MTAzXG4gICAgICAgKlxuICAgICAgICogVG8gYXZvaWQgdGhpcyBpc3N1ZSwgdXNlIHRoZSBrZXlwcmVzcyBldmVudCBhcyBpZiBubyBgdGV4dElucHV0YFxuICAgICAgICogZXZlbnQgaXMgYXZhaWxhYmxlLlxuICAgICAgICovXG4gICAgICB2YXIgd2hpY2ggPSBuYXRpdmVFdmVudC53aGljaDtcblxuICAgICAgaWYgKHdoaWNoICE9PSBTUEFDRUJBUl9DT0RFKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBoYXNTcGFjZUtleXByZXNzID0gdHJ1ZTtcbiAgICAgIHJldHVybiBTUEFDRUJBUl9DSEFSO1xuXG4gICAgY2FzZSAndGV4dElucHV0JzpcbiAgICAgIC8vIFJlY29yZCB0aGUgY2hhcmFjdGVycyB0byBiZSBhZGRlZCB0byB0aGUgRE9NLlxuICAgICAgdmFyIGNoYXJzID0gbmF0aXZlRXZlbnQuZGF0YTsgLy8gSWYgaXQncyBhIHNwYWNlYmFyIGNoYXJhY3RlciwgYXNzdW1lIHRoYXQgd2UgaGF2ZSBhbHJlYWR5IGhhbmRsZWRcbiAgICAgIC8vIGl0IGF0IHRoZSBrZXlwcmVzcyBsZXZlbCBhbmQgYmFpbCBpbW1lZGlhdGVseS4gQW5kcm9pZCBDaHJvbWVcbiAgICAgIC8vIGRvZXNuJ3QgZ2l2ZSB1cyBrZXljb2Rlcywgc28gd2UgbmVlZCB0byBpZ25vcmUgaXQuXG5cbiAgICAgIGlmIChjaGFycyA9PT0gU1BBQ0VCQVJfQ0hBUiAmJiBoYXNTcGFjZUtleXByZXNzKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY2hhcnM7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgLy8gRm9yIG90aGVyIG5hdGl2ZSBldmVudCB0eXBlcywgZG8gbm90aGluZy5cbiAgICAgIHJldHVybiBudWxsO1xuICB9XG59XG4vKipcbiAqIEZvciBicm93c2VycyB0aGF0IGRvIG5vdCBwcm92aWRlIHRoZSBgdGV4dElucHV0YCBldmVudCwgZXh0cmFjdCB0aGVcbiAqIGFwcHJvcHJpYXRlIHN0cmluZyB0byB1c2UgZm9yIFN5bnRoZXRpY0lucHV0RXZlbnQuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCkge1xuICAvLyBJZiB3ZSBhcmUgY3VycmVudGx5IGNvbXBvc2luZyAoSU1FKSBhbmQgdXNpbmcgYSBmYWxsYmFjayB0byBkbyBzbyxcbiAgLy8gdHJ5IHRvIGV4dHJhY3QgdGhlIGNvbXBvc2VkIGNoYXJhY3RlcnMgZnJvbSB0aGUgZmFsbGJhY2sgb2JqZWN0LlxuICAvLyBJZiBjb21wb3NpdGlvbiBldmVudCBpcyBhdmFpbGFibGUsIHdlIGV4dHJhY3QgYSBzdHJpbmcgb25seSBhdFxuICAvLyBjb21wb3NpdGlvbmV2ZW50LCBvdGhlcndpc2UgZXh0cmFjdCBpdCBhdCBmYWxsYmFjayBldmVudHMuXG4gIGlmIChpc0NvbXBvc2luZykge1xuICAgIGlmIChkb21FdmVudE5hbWUgPT09ICdjb21wb3NpdGlvbmVuZCcgfHwgIWNhblVzZUNvbXBvc2l0aW9uRXZlbnQgJiYgaXNGYWxsYmFja0NvbXBvc2l0aW9uRW5kKGRvbUV2ZW50TmFtZSwgbmF0aXZlRXZlbnQpKSB7XG4gICAgICB2YXIgY2hhcnMgPSBnZXREYXRhKCk7XG4gICAgICByZXNldCgpO1xuICAgICAgaXNDb21wb3NpbmcgPSBmYWxzZTtcbiAgICAgIHJldHVybiBjaGFycztcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSAncGFzdGUnOlxuICAgICAgLy8gSWYgYSBwYXN0ZSBldmVudCBvY2N1cnMgYWZ0ZXIgYSBrZXlwcmVzcywgdGhyb3cgb3V0IHRoZSBpbnB1dFxuICAgICAgLy8gY2hhcnMuIFBhc3RlIGV2ZW50cyBzaG91bGQgbm90IGxlYWQgdG8gQmVmb3JlSW5wdXQgZXZlbnRzLlxuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICBjYXNlICdrZXlwcmVzcyc6XG4gICAgICAvKipcbiAgICAgICAqIEFzIG9mIHYyNywgRmlyZWZveCBtYXkgZmlyZSBrZXlwcmVzcyBldmVudHMgZXZlbiB3aGVuIG5vIGNoYXJhY3RlclxuICAgICAgICogd2lsbCBiZSBpbnNlcnRlZC4gQSBmZXcgcG9zc2liaWxpdGllczpcbiAgICAgICAqXG4gICAgICAgKiAtIGB3aGljaGAgaXMgYDBgLiBBcnJvdyBrZXlzLCBFc2Mga2V5LCBldGMuXG4gICAgICAgKlxuICAgICAgICogLSBgd2hpY2hgIGlzIHRoZSBwcmVzc2VkIGtleSBjb2RlLCBidXQgbm8gY2hhciBpcyBhdmFpbGFibGUuXG4gICAgICAgKiAgIEV4OiAnQWx0R3IgKyBkYCBpbiBQb2xpc2guIFRoZXJlIGlzIG5vIG1vZGlmaWVkIGNoYXJhY3RlciBmb3JcbiAgICAgICAqICAgdGhpcyBrZXkgY29tYmluYXRpb24gYW5kIG5vIGNoYXJhY3RlciBpcyBpbnNlcnRlZCBpbnRvIHRoZVxuICAgICAgICogICBkb2N1bWVudCwgYnV0IEZGIGZpcmVzIHRoZSBrZXlwcmVzcyBmb3IgY2hhciBjb2RlIGAxMDBgIGFueXdheS5cbiAgICAgICAqICAgTm8gYGlucHV0YCBldmVudCB3aWxsIG9jY3VyLlxuICAgICAgICpcbiAgICAgICAqIC0gYHdoaWNoYCBpcyB0aGUgcHJlc3NlZCBrZXkgY29kZSwgYnV0IGEgY29tbWFuZCBjb21iaW5hdGlvbiBpc1xuICAgICAgICogICBiZWluZyB1c2VkLiBFeDogYENtZCtDYC4gTm8gY2hhcmFjdGVyIGlzIGluc2VydGVkLCBhbmQgbm9cbiAgICAgICAqICAgYGlucHV0YCBldmVudCB3aWxsIG9jY3VyLlxuICAgICAgICovXG4gICAgICBpZiAoIWlzS2V5cHJlc3NDb21tYW5kKG5hdGl2ZUV2ZW50KSkge1xuICAgICAgICAvLyBJRSBmaXJlcyB0aGUgYGtleXByZXNzYCBldmVudCB3aGVuIGEgdXNlciB0eXBlcyBhbiBlbW9qaSB2aWFcbiAgICAgICAgLy8gVG91Y2gga2V5Ym9hcmQgb2YgV2luZG93cy4gIEluIHN1Y2ggYSBjYXNlLCB0aGUgYGNoYXJgIHByb3BlcnR5XG4gICAgICAgIC8vIGhvbGRzIGFuIGVtb2ppIGNoYXJhY3RlciBsaWtlIGBcXHVEODNEXFx1REUwQWAuICBCZWNhdXNlIGl0cyBsZW5ndGhcbiAgICAgICAgLy8gaXMgMiwgdGhlIHByb3BlcnR5IGB3aGljaGAgZG9lcyBub3QgcmVwcmVzZW50IGFuIGVtb2ppIGNvcnJlY3RseS5cbiAgICAgICAgLy8gSW4gc3VjaCBhIGNhc2UsIHdlIGRpcmVjdGx5IHJldHVybiB0aGUgYGNoYXJgIHByb3BlcnR5IGluc3RlYWQgb2ZcbiAgICAgICAgLy8gdXNpbmcgYHdoaWNoYC5cbiAgICAgICAgaWYgKG5hdGl2ZUV2ZW50LmNoYXIgJiYgbmF0aXZlRXZlbnQuY2hhci5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgcmV0dXJuIG5hdGl2ZUV2ZW50LmNoYXI7XG4gICAgICAgIH0gZWxzZSBpZiAobmF0aXZlRXZlbnQud2hpY2gpIHtcbiAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShuYXRpdmVFdmVudC53aGljaCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICBjYXNlICdjb21wb3NpdGlvbmVuZCc6XG4gICAgICByZXR1cm4gdXNlRmFsbGJhY2tDb21wb3NpdGlvbkRhdGEgJiYgIWlzVXNpbmdLb3JlYW5JTUUobmF0aXZlRXZlbnQpID8gbnVsbCA6IG5hdGl2ZUV2ZW50LmRhdGE7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbi8qKlxuICogRXh0cmFjdCBhIFN5bnRoZXRpY0lucHV0RXZlbnQgZm9yIGBiZWZvcmVJbnB1dGAsIGJhc2VkIG9uIGVpdGhlciBuYXRpdmVcbiAqIGB0ZXh0SW5wdXRgIG9yIGZhbGxiYWNrIGJlaGF2aW9yLlxuICpcbiAqIEByZXR1cm4gez9vYmplY3R9IEEgU3ludGhldGljSW5wdXRFdmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGV4dHJhY3RCZWZvcmVJbnB1dEV2ZW50KGRpc3BhdGNoUXVldWUsIGRvbUV2ZW50TmFtZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gIHZhciBjaGFycztcblxuICBpZiAoY2FuVXNlVGV4dElucHV0RXZlbnQpIHtcbiAgICBjaGFycyA9IGdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCk7XG4gIH0gZWxzZSB7XG4gICAgY2hhcnMgPSBnZXRGYWxsYmFja0JlZm9yZUlucHV0Q2hhcnMoZG9tRXZlbnROYW1lLCBuYXRpdmVFdmVudCk7XG4gIH0gLy8gSWYgbm8gY2hhcmFjdGVycyBhcmUgYmVpbmcgaW5zZXJ0ZWQsIG5vIEJlZm9yZUlucHV0IGV2ZW50IHNob3VsZFxuICAvLyBiZSBmaXJlZC5cblxuXG4gIGlmICghY2hhcnMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lcnMgPSBhY2N1bXVsYXRlVHdvUGhhc2VMaXN0ZW5lcnModGFyZ2V0SW5zdCwgJ29uQmVmb3JlSW5wdXQnKTtcblxuICBpZiAobGlzdGVuZXJzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgZXZlbnQgPSBuZXcgU3ludGhldGljSW5wdXRFdmVudCgnb25CZWZvcmVJbnB1dCcsICdiZWZvcmVpbnB1dCcsIG51bGwsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHtcbiAgICAgIGV2ZW50OiBldmVudCxcbiAgICAgIGxpc3RlbmVyczogbGlzdGVuZXJzXG4gICAgfSk7XG4gICAgZXZlbnQuZGF0YSA9IGNoYXJzO1xuICB9XG59XG4vKipcbiAqIENyZWF0ZSBhbiBgb25CZWZvcmVJbnB1dGAgZXZlbnQgdG8gbWF0Y2hcbiAqIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMTMxMTA1LyNldmVudHMtaW5wdXRldmVudHMuXG4gKlxuICogVGhpcyBldmVudCBwbHVnaW4gaXMgYmFzZWQgb24gdGhlIG5hdGl2ZSBgdGV4dElucHV0YCBldmVudFxuICogYXZhaWxhYmxlIGluIENocm9tZSwgU2FmYXJpLCBPcGVyYSwgYW5kIElFLiBUaGlzIGV2ZW50IGZpcmVzIGFmdGVyXG4gKiBgb25LZXlQcmVzc2AgYW5kIGBvbkNvbXBvc2l0aW9uRW5kYCwgYnV0IGJlZm9yZSBgb25JbnB1dGAuXG4gKlxuICogYGJlZm9yZUlucHV0YCBpcyBzcGVjJ2QgYnV0IG5vdCBpbXBsZW1lbnRlZCBpbiBhbnkgYnJvd3NlcnMsIGFuZFxuICogdGhlIGBpbnB1dGAgZXZlbnQgZG9lcyBub3QgcHJvdmlkZSBhbnkgdXNlZnVsIGluZm9ybWF0aW9uIGFib3V0IHdoYXQgaGFzXG4gKiBhY3R1YWxseSBiZWVuIGFkZGVkLCBjb250cmFyeSB0byB0aGUgc3BlYy4gVGh1cywgYHRleHRJbnB1dGAgaXMgdGhlIGJlc3RcbiAqIGF2YWlsYWJsZSBldmVudCB0byBpZGVudGlmeSB0aGUgY2hhcmFjdGVycyB0aGF0IGhhdmUgYWN0dWFsbHkgYmVlbiBpbnNlcnRlZFxuICogaW50byB0aGUgdGFyZ2V0IG5vZGUuXG4gKlxuICogVGhpcyBwbHVnaW4gaXMgYWxzbyByZXNwb25zaWJsZSBmb3IgZW1pdHRpbmcgYGNvbXBvc2l0aW9uYCBldmVudHMsIHRodXNcbiAqIGFsbG93aW5nIHVzIHRvIHNoYXJlIGNvbXBvc2l0aW9uIGZhbGxiYWNrIGNvZGUgZm9yIGJvdGggYGJlZm9yZUlucHV0YCBhbmRcbiAqIGBjb21wb3NpdGlvbmAgZXZlbnQgdHlwZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBleHRyYWN0RXZlbnRzKGRpc3BhdGNoUXVldWUsIGRvbUV2ZW50TmFtZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0LCBldmVudFN5c3RlbUZsYWdzLCB0YXJnZXRDb250YWluZXIpIHtcbiAgZXh0cmFjdENvbXBvc2l0aW9uRXZlbnQoZGlzcGF0Y2hRdWV1ZSwgZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICBleHRyYWN0QmVmb3JlSW5wdXRFdmVudChkaXNwYXRjaFF1ZXVlLCBkb21FdmVudE5hbWUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG59XG5cbi8qKlxuICogQHNlZSBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS90aGUtaW5wdXQtZWxlbWVudC5odG1sI2lucHV0LXR5cGUtYXR0ci1zdW1tYXJ5XG4gKi9cbnZhciBzdXBwb3J0ZWRJbnB1dFR5cGVzID0ge1xuICBjb2xvcjogdHJ1ZSxcbiAgZGF0ZTogdHJ1ZSxcbiAgZGF0ZXRpbWU6IHRydWUsXG4gICdkYXRldGltZS1sb2NhbCc6IHRydWUsXG4gIGVtYWlsOiB0cnVlLFxuICBtb250aDogdHJ1ZSxcbiAgbnVtYmVyOiB0cnVlLFxuICBwYXNzd29yZDogdHJ1ZSxcbiAgcmFuZ2U6IHRydWUsXG4gIHNlYXJjaDogdHJ1ZSxcbiAgdGVsOiB0cnVlLFxuICB0ZXh0OiB0cnVlLFxuICB0aW1lOiB0cnVlLFxuICB1cmw6IHRydWUsXG4gIHdlZWs6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGlzVGV4dElucHV0RWxlbWVudChlbGVtKSB7XG4gIHZhciBub2RlTmFtZSA9IGVsZW0gJiYgZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnaW5wdXQnKSB7XG4gICAgcmV0dXJuICEhc3VwcG9ydGVkSW5wdXRUeXBlc1tlbGVtLnR5cGVdO1xuICB9XG5cbiAgaWYgKG5vZGVOYW1lID09PSAndGV4dGFyZWEnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGFuIGV2ZW50IGlzIHN1cHBvcnRlZCBpbiB0aGUgY3VycmVudCBleGVjdXRpb24gZW52aXJvbm1lbnQuXG4gKlxuICogTk9URTogVGhpcyB3aWxsIG5vdCB3b3JrIGNvcnJlY3RseSBmb3Igbm9uLWdlbmVyaWMgZXZlbnRzIHN1Y2ggYXMgYGNoYW5nZWAsXG4gKiBgcmVzZXRgLCBgbG9hZGAsIGBlcnJvcmAsIGFuZCBgc2VsZWN0YC5cbiAqXG4gKiBCb3Jyb3dzIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVTdWZmaXggRXZlbnQgbmFtZSwgZS5nLiBcImNsaWNrXCIuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCBpcyBzdXBwb3J0ZWQuXG4gKiBAaW50ZXJuYWxcbiAqIEBsaWNlbnNlIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuICovXG5cbmZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoZXZlbnROYW1lU3VmZml4KSB7XG4gIGlmICghY2FuVXNlRE9NKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIGV2ZW50TmFtZSA9ICdvbicgKyBldmVudE5hbWVTdWZmaXg7XG4gIHZhciBpc1N1cHBvcnRlZCA9IChldmVudE5hbWUgaW4gZG9jdW1lbnQpO1xuXG4gIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyRXZlbnRzJDEoKSB7XG4gIHJlZ2lzdGVyVHdvUGhhc2VFdmVudCgnb25DaGFuZ2UnLCBbJ2NoYW5nZScsICdjbGljaycsICdmb2N1c2luJywgJ2ZvY3Vzb3V0JywgJ2lucHV0JywgJ2tleWRvd24nLCAna2V5dXAnLCAnc2VsZWN0aW9uY2hhbmdlJ10pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoZGlzcGF0Y2hRdWV1ZSwgaW5zdCwgbmF0aXZlRXZlbnQsIHRhcmdldCkge1xuICAvLyBGbGFnIHRoaXMgZXZlbnQgbG9vcCBhcyBuZWVkaW5nIHN0YXRlIHJlc3RvcmUuXG4gIGVucXVldWVTdGF0ZVJlc3RvcmUodGFyZ2V0KTtcbiAgdmFyIGxpc3RlbmVycyA9IGFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyhpbnN0LCAnb25DaGFuZ2UnKTtcblxuICBpZiAobGlzdGVuZXJzLmxlbmd0aCA+IDApIHtcbiAgICB2YXIgZXZlbnQgPSBuZXcgU3ludGhldGljRXZlbnQoJ29uQ2hhbmdlJywgJ2NoYW5nZScsIG51bGwsIG5hdGl2ZUV2ZW50LCB0YXJnZXQpO1xuICAgIGRpc3BhdGNoUXVldWUucHVzaCh7XG4gICAgICBldmVudDogZXZlbnQsXG4gICAgICBsaXN0ZW5lcnM6IGxpc3RlbmVyc1xuICAgIH0pO1xuICB9XG59XG4vKipcbiAqIEZvciBJRSBzaGltc1xuICovXG5cblxudmFyIGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRJbnN0ID0gbnVsbDtcbi8qKlxuICogU0VDVElPTjogaGFuZGxlIGBjaGFuZ2VgIGV2ZW50XG4gKi9cblxuZnVuY3Rpb24gc2hvdWxkVXNlQ2hhbmdlRXZlbnQoZWxlbSkge1xuICB2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIG5vZGVOYW1lID09PSAnc2VsZWN0JyB8fCBub2RlTmFtZSA9PT0gJ2lucHV0JyAmJiBlbGVtLnR5cGUgPT09ICdmaWxlJztcbn1cblxuZnVuY3Rpb24gbWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudChuYXRpdmVFdmVudCkge1xuICB2YXIgZGlzcGF0Y2hRdWV1ZSA9IFtdO1xuICBjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQoZGlzcGF0Y2hRdWV1ZSwgYWN0aXZlRWxlbWVudEluc3QsIG5hdGl2ZUV2ZW50LCBnZXRFdmVudFRhcmdldChuYXRpdmVFdmVudCkpOyAvLyBJZiBjaGFuZ2UgYW5kIHByb3BlcnR5Y2hhbmdlIGJ1YmJsZWQsIHdlJ2QganVzdCBiaW5kIHRvIGl0IGxpa2UgYWxsIHRoZVxuICAvLyBvdGhlciBldmVudHMgYW5kIGhhdmUgaXQgZ28gdGhyb3VnaCBSZWFjdEJyb3dzZXJFdmVudEVtaXR0ZXIuIFNpbmNlIGl0XG4gIC8vIGRvZXNuJ3QsIHdlIG1hbnVhbGx5IGxpc3RlbiBmb3IgdGhlIGV2ZW50cyBhbmQgc28gd2UgaGF2ZSB0byBlbnF1ZXVlIGFuZFxuICAvLyBwcm9jZXNzIHRoZSBhYnN0cmFjdCBldmVudCBtYW51YWxseS5cbiAgLy9cbiAgLy8gQmF0Y2hpbmcgaXMgbmVjZXNzYXJ5IGhlcmUgaW4gb3JkZXIgdG8gZW5zdXJlIHRoYXQgYWxsIGV2ZW50IGhhbmRsZXJzIHJ1blxuICAvLyBiZWZvcmUgdGhlIG5leHQgcmVyZW5kZXIgKGluY2x1ZGluZyBldmVudCBoYW5kbGVycyBhdHRhY2hlZCB0byBhbmNlc3RvclxuICAvLyBlbGVtZW50cyBpbnN0ZWFkIG9mIGRpcmVjdGx5IG9uIHRoZSBpbnB1dCkuIFdpdGhvdXQgdGhpcywgY29udHJvbGxlZFxuICAvLyBjb21wb25lbnRzIGRvbid0IHdvcmsgcHJvcGVybHkgaW4gY29uanVuY3Rpb24gd2l0aCBldmVudCBidWJibGluZyBiZWNhdXNlXG4gIC8vIHRoZSBjb21wb25lbnQgaXMgcmVyZW5kZXJlZCBhbmQgdGhlIHZhbHVlIHJldmVydGVkIGJlZm9yZSBhbGwgdGhlIGV2ZW50XG4gIC8vIGhhbmRsZXJzIGNhbiBydW4uIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzcwOC5cblxuICBiYXRjaGVkVXBkYXRlcyhydW5FdmVudEluQmF0Y2gsIGRpc3BhdGNoUXVldWUpO1xufVxuXG5mdW5jdGlvbiBydW5FdmVudEluQmF0Y2goZGlzcGF0Y2hRdWV1ZSkge1xuICBwcm9jZXNzRGlzcGF0Y2hRdWV1ZShkaXNwYXRjaFF1ZXVlLCAwKTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKHRhcmdldEluc3QpIHtcbiAgdmFyIHRhcmdldE5vZGUgPSBnZXROb2RlRnJvbUluc3RhbmNlKHRhcmdldEluc3QpO1xuXG4gIGlmICh1cGRhdGVWYWx1ZUlmQ2hhbmdlZCh0YXJnZXROb2RlKSkge1xuICAgIHJldHVybiB0YXJnZXRJbnN0O1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEluc3QpIHtcbiAgaWYgKGRvbUV2ZW50TmFtZSA9PT0gJ2NoYW5nZScpIHtcbiAgICByZXR1cm4gdGFyZ2V0SW5zdDtcbiAgfVxufVxuLyoqXG4gKiBTRUNUSU9OOiBoYW5kbGUgYGlucHV0YCBldmVudFxuICovXG5cblxudmFyIGlzSW5wdXRFdmVudFN1cHBvcnRlZCA9IGZhbHNlO1xuXG5pZiAoY2FuVXNlRE9NKSB7XG4gIC8vIElFOSBjbGFpbXMgdG8gc3VwcG9ydCB0aGUgaW5wdXQgZXZlbnQgYnV0IGZhaWxzIHRvIHRyaWdnZXIgaXQgd2hlblxuICAvLyBkZWxldGluZyB0ZXh0LCBzbyB3ZSBpZ25vcmUgaXRzIGlucHV0IGV2ZW50cy5cbiAgaXNJbnB1dEV2ZW50U3VwcG9ydGVkID0gaXNFdmVudFN1cHBvcnRlZCgnaW5wdXQnKSAmJiAoIWRvY3VtZW50LmRvY3VtZW50TW9kZSB8fCBkb2N1bWVudC5kb2N1bWVudE1vZGUgPiA5KTtcbn1cbi8qKlxuICogKEZvciBJRSA8PTkpIFN0YXJ0cyB0cmFja2luZyBwcm9wZXJ0eWNoYW5nZSBldmVudHMgb24gdGhlIHBhc3NlZC1pbiBlbGVtZW50XG4gKiBhbmQgb3ZlcnJpZGUgdGhlIHZhbHVlIHByb3BlcnR5IHNvIHRoYXQgd2UgY2FuIGRpc3Rpbmd1aXNoIHVzZXIgZXZlbnRzIGZyb21cbiAqIHZhbHVlIGNoYW5nZXMgaW4gSlMuXG4gKi9cblxuXG5mdW5jdGlvbiBzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UodGFyZ2V0LCB0YXJnZXRJbnN0KSB7XG4gIGFjdGl2ZUVsZW1lbnQgPSB0YXJnZXQ7XG4gIGFjdGl2ZUVsZW1lbnRJbnN0ID0gdGFyZ2V0SW5zdDtcbiAgYWN0aXZlRWxlbWVudC5hdHRhY2hFdmVudCgnb25wcm9wZXJ0eWNoYW5nZScsIGhhbmRsZVByb3BlcnR5Q2hhbmdlKTtcbn1cbi8qKlxuICogKEZvciBJRSA8PTkpIFJlbW92ZXMgdGhlIGV2ZW50IGxpc3RlbmVycyBmcm9tIHRoZSBjdXJyZW50bHktdHJhY2tlZCBlbGVtZW50LFxuICogaWYgYW55IGV4aXN0cy5cbiAqL1xuXG5cbmZ1bmN0aW9uIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCkge1xuICBpZiAoIWFjdGl2ZUVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBhY3RpdmVFbGVtZW50LmRldGFjaEV2ZW50KCdvbnByb3BlcnR5Y2hhbmdlJywgaGFuZGxlUHJvcGVydHlDaGFuZ2UpO1xuICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsO1xufVxuLyoqXG4gKiAoRm9yIElFIDw9OSkgSGFuZGxlcyBhIHByb3BlcnR5Y2hhbmdlIGV2ZW50LCBzZW5kaW5nIGEgYGNoYW5nZWAgZXZlbnQgaWZcbiAqIHRoZSB2YWx1ZSBvZiB0aGUgYWN0aXZlIGVsZW1lbnQgaGFzIGNoYW5nZWQuXG4gKi9cblxuXG5mdW5jdGlvbiBoYW5kbGVQcm9wZXJ0eUNoYW5nZShuYXRpdmVFdmVudCkge1xuICBpZiAobmF0aXZlRXZlbnQucHJvcGVydHlOYW1lICE9PSAndmFsdWUnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGdldEluc3RJZlZhbHVlQ2hhbmdlZChhY3RpdmVFbGVtZW50SW5zdCkpIHtcbiAgICBtYW51YWxEaXNwYXRjaENoYW5nZUV2ZW50KG5hdGl2ZUV2ZW50KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYW5kbGVFdmVudHNGb3JJbnB1dEV2ZW50UG9seWZpbGwoZG9tRXZlbnROYW1lLCB0YXJnZXQsIHRhcmdldEluc3QpIHtcbiAgaWYgKGRvbUV2ZW50TmFtZSA9PT0gJ2ZvY3VzaW4nKSB7XG4gICAgLy8gSW4gSUU5LCBwcm9wZXJ0eWNoYW5nZSBmaXJlcyBmb3IgbW9zdCBpbnB1dCBldmVudHMgYnV0IGlzIGJ1Z2d5IGFuZFxuICAgIC8vIGRvZXNuJ3QgZmlyZSB3aGVuIHRleHQgaXMgZGVsZXRlZCwgYnV0IGNvbnZlbmllbnRseSwgc2VsZWN0aW9uY2hhbmdlXG4gICAgLy8gYXBwZWFycyB0byBmaXJlIGluIGFsbCBvZiB0aGUgcmVtYWluaW5nIGNhc2VzIHNvIHdlIGNhdGNoIHRob3NlIGFuZFxuICAgIC8vIGZvcndhcmQgdGhlIGV2ZW50IGlmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZFxuICAgIC8vIEluIGVpdGhlciBjYXNlLCB3ZSBkb24ndCB3YW50IHRvIGNhbGwgdGhlIGV2ZW50IGhhbmRsZXIgaWYgdGhlIHZhbHVlXG4gICAgLy8gaXMgY2hhbmdlZCBmcm9tIEpTIHNvIHdlIHJlZGVmaW5lIGEgc2V0dGVyIGZvciBgLnZhbHVlYCB0aGF0IHVwZGF0ZXNcbiAgICAvLyBvdXIgYWN0aXZlRWxlbWVudFZhbHVlIHZhcmlhYmxlLCBhbGxvd2luZyB1cyB0byBpZ25vcmUgdGhvc2UgY2hhbmdlc1xuICAgIC8vXG4gICAgLy8gc3RvcFdhdGNoaW5nKCkgc2hvdWxkIGJlIGEgbm9vcCBoZXJlIGJ1dCB3ZSBjYWxsIGl0IGp1c3QgaW4gY2FzZSB3ZVxuICAgIC8vIG1pc3NlZCBhIGJsdXIgZXZlbnQgc29tZWhvdy5cbiAgICBzdG9wV2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSgpO1xuICAgIHN0YXJ0V2F0Y2hpbmdGb3JWYWx1ZUNoYW5nZSh0YXJnZXQsIHRhcmdldEluc3QpO1xuICB9IGVsc2UgaWYgKGRvbUV2ZW50TmFtZSA9PT0gJ2ZvY3Vzb3V0Jykge1xuICAgIHN0b3BXYXRjaGluZ0ZvclZhbHVlQ2hhbmdlKCk7XG4gIH1cbn0gLy8gRm9yIElFOCBhbmQgSUU5LlxuXG5cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGwoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSB7XG4gIGlmIChkb21FdmVudE5hbWUgPT09ICdzZWxlY3Rpb25jaGFuZ2UnIHx8IGRvbUV2ZW50TmFtZSA9PT0gJ2tleXVwJyB8fCBkb21FdmVudE5hbWUgPT09ICdrZXlkb3duJykge1xuICAgIC8vIE9uIHRoZSBzZWxlY3Rpb25jaGFuZ2UgZXZlbnQsIHRoZSB0YXJnZXQgaXMganVzdCBkb2N1bWVudCB3aGljaCBpc24ndFxuICAgIC8vIGhlbHBmdWwgZm9yIHVzIHNvIGp1c3QgY2hlY2sgYWN0aXZlRWxlbWVudCBpbnN0ZWFkLlxuICAgIC8vXG4gICAgLy8gOTklIG9mIHRoZSB0aW1lLCBrZXlkb3duIGFuZCBrZXl1cCBhcmVuJ3QgbmVjZXNzYXJ5LiBJRTggZmFpbHMgdG8gZmlyZVxuICAgIC8vIHByb3BlcnR5Y2hhbmdlIG9uIHRoZSBmaXJzdCBpbnB1dCBldmVudCBhZnRlciBzZXR0aW5nIGB2YWx1ZWAgZnJvbSBhXG4gICAgLy8gc2NyaXB0IGFuZCBmaXJlcyBvbmx5IGtleWRvd24sIGtleXByZXNzLCBrZXl1cC4gQ2F0Y2hpbmcga2V5dXAgdXN1YWxseVxuICAgIC8vIGdldHMgaXQgYW5kIGNhdGNoaW5nIGtleWRvd24gbGV0cyB1cyBmaXJlIGFuIGV2ZW50IGZvciB0aGUgZmlyc3RcbiAgICAvLyBrZXlzdHJva2UgaWYgdXNlciBkb2VzIGEga2V5IHJlcGVhdCAoaXQnbGwgYmUgYSBsaXR0bGUgZGVsYXllZDogcmlnaHRcbiAgICAvLyBiZWZvcmUgdGhlIHNlY29uZCBrZXlzdHJva2UpLiBPdGhlciBpbnB1dCBtZXRob2RzIChlLmcuLCBwYXN0ZSkgc2VlbSB0b1xuICAgIC8vIGZpcmUgc2VsZWN0aW9uY2hhbmdlIG5vcm1hbGx5LlxuICAgIHJldHVybiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQoYWN0aXZlRWxlbWVudEluc3QpO1xuICB9XG59XG4vKipcbiAqIFNFQ1RJT046IGhhbmRsZSBgY2xpY2tgIGV2ZW50XG4gKi9cblxuXG5mdW5jdGlvbiBzaG91bGRVc2VDbGlja0V2ZW50KGVsZW0pIHtcbiAgLy8gVXNlIHRoZSBgY2xpY2tgIGV2ZW50IHRvIGRldGVjdCBjaGFuZ2VzIHRvIGNoZWNrYm94IGFuZCByYWRpbyBpbnB1dHMuXG4gIC8vIFRoaXMgYXBwcm9hY2ggd29ya3MgYWNyb3NzIGFsbCBicm93c2Vycywgd2hlcmVhcyBgY2hhbmdlYCBkb2VzIG5vdCBmaXJlXG4gIC8vIHVudGlsIGBibHVyYCBpbiBJRTguXG4gIHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWU7XG4gIHJldHVybiBub2RlTmFtZSAmJiBub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnICYmIChlbGVtLnR5cGUgPT09ICdjaGVja2JveCcgfHwgZWxlbS50eXBlID09PSAncmFkaW8nKTtcbn1cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSB7XG4gIGlmIChkb21FdmVudE5hbWUgPT09ICdjbGljaycpIHtcbiAgICByZXR1cm4gZ2V0SW5zdElmVmFsdWVDaGFuZ2VkKHRhcmdldEluc3QpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQoZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0KSB7XG4gIGlmIChkb21FdmVudE5hbWUgPT09ICdpbnB1dCcgfHwgZG9tRXZlbnROYW1lID09PSAnY2hhbmdlJykge1xuICAgIHJldHVybiBnZXRJbnN0SWZWYWx1ZUNoYW5nZWQodGFyZ2V0SW5zdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlQ29udHJvbGxlZElucHV0Qmx1cihub2RlKSB7XG4gIHZhciBzdGF0ZSA9IG5vZGUuX3dyYXBwZXJTdGF0ZTtcblxuICBpZiAoIXN0YXRlIHx8ICFzdGF0ZS5jb250cm9sbGVkIHx8IG5vZGUudHlwZSAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB7XG4gICAgLy8gSWYgY29udHJvbGxlZCwgYXNzaWduIHRoZSB2YWx1ZSBhdHRyaWJ1dGUgdG8gdGhlIGN1cnJlbnQgdmFsdWUgb24gYmx1clxuICAgIHNldERlZmF1bHRWYWx1ZShub2RlLCAnbnVtYmVyJywgbm9kZS52YWx1ZSk7XG4gIH1cbn1cbi8qKlxuICogVGhpcyBwbHVnaW4gY3JlYXRlcyBhbiBgb25DaGFuZ2VgIGV2ZW50IHRoYXQgbm9ybWFsaXplcyBjaGFuZ2UgZXZlbnRzXG4gKiBhY3Jvc3MgZm9ybSBlbGVtZW50cy4gVGhpcyBldmVudCBmaXJlcyBhdCBhIHRpbWUgd2hlbiBpdCdzIHBvc3NpYmxlIHRvXG4gKiBjaGFuZ2UgdGhlIGVsZW1lbnQncyB2YWx1ZSB3aXRob3V0IHNlZWluZyBhIGZsaWNrZXIuXG4gKlxuICogU3VwcG9ydGVkIGVsZW1lbnRzIGFyZTpcbiAqIC0gaW5wdXQgKHNlZSBgaXNUZXh0SW5wdXRFbGVtZW50YClcbiAqIC0gdGV4dGFyZWFcbiAqIC0gc2VsZWN0XG4gKi9cblxuXG5mdW5jdGlvbiBleHRyYWN0RXZlbnRzJDEoZGlzcGF0Y2hRdWV1ZSwgZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQsIGV2ZW50U3lzdGVtRmxhZ3MsIHRhcmdldENvbnRhaW5lcikge1xuICB2YXIgdGFyZ2V0Tm9kZSA9IHRhcmdldEluc3QgPyBnZXROb2RlRnJvbUluc3RhbmNlKHRhcmdldEluc3QpIDogd2luZG93O1xuICB2YXIgZ2V0VGFyZ2V0SW5zdEZ1bmMsIGhhbmRsZUV2ZW50RnVuYztcblxuICBpZiAoc2hvdWxkVXNlQ2hhbmdlRXZlbnQodGFyZ2V0Tm9kZSkpIHtcbiAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JDaGFuZ2VFdmVudDtcbiAgfSBlbHNlIGlmIChpc1RleHRJbnB1dEVsZW1lbnQodGFyZ2V0Tm9kZSkpIHtcbiAgICBpZiAoaXNJbnB1dEV2ZW50U3VwcG9ydGVkKSB7XG4gICAgICBnZXRUYXJnZXRJbnN0RnVuYyA9IGdldFRhcmdldEluc3RGb3JJbnB1dE9yQ2hhbmdlRXZlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvcklucHV0RXZlbnRQb2x5ZmlsbDtcbiAgICAgIGhhbmRsZUV2ZW50RnVuYyA9IGhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoc2hvdWxkVXNlQ2xpY2tFdmVudCh0YXJnZXROb2RlKSkge1xuICAgIGdldFRhcmdldEluc3RGdW5jID0gZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQ7XG4gIH1cblxuICBpZiAoZ2V0VGFyZ2V0SW5zdEZ1bmMpIHtcbiAgICB2YXIgaW5zdCA9IGdldFRhcmdldEluc3RGdW5jKGRvbUV2ZW50TmFtZSwgdGFyZ2V0SW5zdCk7XG5cbiAgICBpZiAoaW5zdCkge1xuICAgICAgY3JlYXRlQW5kQWNjdW11bGF0ZUNoYW5nZUV2ZW50KGRpc3BhdGNoUXVldWUsIGluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKGhhbmRsZUV2ZW50RnVuYykge1xuICAgIGhhbmRsZUV2ZW50RnVuYyhkb21FdmVudE5hbWUsIHRhcmdldE5vZGUsIHRhcmdldEluc3QpO1xuICB9IC8vIFdoZW4gYmx1cnJpbmcsIHNldCB0aGUgdmFsdWUgYXR0cmlidXRlIGZvciBudW1iZXIgaW5wdXRzXG5cblxuICBpZiAoZG9tRXZlbnROYW1lID09PSAnZm9jdXNvdXQnKSB7XG4gICAgaGFuZGxlQ29udHJvbGxlZElucHV0Qmx1cih0YXJnZXROb2RlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWdpc3RlckV2ZW50cyQyKCkge1xuICByZWdpc3RlckRpcmVjdEV2ZW50KCdvbk1vdXNlRW50ZXInLCBbJ21vdXNlb3V0JywgJ21vdXNlb3ZlciddKTtcbiAgcmVnaXN0ZXJEaXJlY3RFdmVudCgnb25Nb3VzZUxlYXZlJywgWydtb3VzZW91dCcsICdtb3VzZW92ZXInXSk7XG4gIHJlZ2lzdGVyRGlyZWN0RXZlbnQoJ29uUG9pbnRlckVudGVyJywgWydwb2ludGVyb3V0JywgJ3BvaW50ZXJvdmVyJ10pO1xuICByZWdpc3RlckRpcmVjdEV2ZW50KCdvblBvaW50ZXJMZWF2ZScsIFsncG9pbnRlcm91dCcsICdwb2ludGVyb3ZlciddKTtcbn1cbi8qKlxuICogRm9yIGFsbW9zdCBldmVyeSBpbnRlcmFjdGlvbiB3ZSBjYXJlIGFib3V0LCB0aGVyZSB3aWxsIGJlIGJvdGggYSB0b3AtbGV2ZWxcbiAqIGBtb3VzZW92ZXJgIGFuZCBgbW91c2VvdXRgIGV2ZW50IHRoYXQgb2NjdXJzLiBPbmx5IHVzZSBgbW91c2VvdXRgIHNvIHRoYXRcbiAqIHdlIGRvIG5vdCBleHRyYWN0IGR1cGxpY2F0ZSBldmVudHMuIEhvd2V2ZXIsIG1vdmluZyB0aGUgbW91c2UgaW50byB0aGVcbiAqIGJyb3dzZXIgZnJvbSBvdXRzaWRlIHdpbGwgbm90IGZpcmUgYSBgbW91c2VvdXRgIGV2ZW50LiBJbiB0aGlzIGNhc2UsIHdlIHVzZVxuICogdGhlIGBtb3VzZW92ZXJgIHRvcC1sZXZlbCBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGV4dHJhY3RFdmVudHMkMihkaXNwYXRjaFF1ZXVlLCBkb21FdmVudE5hbWUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCwgZXZlbnRTeXN0ZW1GbGFncywgdGFyZ2V0Q29udGFpbmVyKSB7XG4gIHZhciBpc092ZXJFdmVudCA9IGRvbUV2ZW50TmFtZSA9PT0gJ21vdXNlb3ZlcicgfHwgZG9tRXZlbnROYW1lID09PSAncG9pbnRlcm92ZXInO1xuICB2YXIgaXNPdXRFdmVudCA9IGRvbUV2ZW50TmFtZSA9PT0gJ21vdXNlb3V0JyB8fCBkb21FdmVudE5hbWUgPT09ICdwb2ludGVyb3V0JztcblxuICBpZiAoaXNPdmVyRXZlbnQgJiYgIWlzUmVwbGF5aW5nRXZlbnQobmF0aXZlRXZlbnQpKSB7XG4gICAgLy8gSWYgdGhpcyBpcyBhbiBvdmVyIGV2ZW50IHdpdGggYSB0YXJnZXQsIHdlIG1pZ2h0IGhhdmUgYWxyZWFkeSBkaXNwYXRjaGVkXG4gICAgLy8gdGhlIGV2ZW50IGluIHRoZSBvdXQgZXZlbnQgb2YgdGhlIG90aGVyIHRhcmdldC4gSWYgdGhpcyBpcyByZXBsYXllZCxcbiAgICAvLyB0aGVuIGl0J3MgYmVjYXVzZSB3ZSBjb3VsZG4ndCBkaXNwYXRjaCBhZ2FpbnN0IHRoaXMgdGFyZ2V0IHByZXZpb3VzbHlcbiAgICAvLyBzbyB3ZSBoYXZlIHRvIGRvIGl0IG5vdyBpbnN0ZWFkLlxuICAgIHZhciByZWxhdGVkID0gbmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC5mcm9tRWxlbWVudDtcblxuICAgIGlmIChyZWxhdGVkKSB7XG4gICAgICAvLyBJZiB0aGUgcmVsYXRlZCBub2RlIGlzIG1hbmFnZWQgYnkgUmVhY3QsIHdlIGNhbiBhc3N1bWUgdGhhdCB3ZSBoYXZlXG4gICAgICAvLyBhbHJlYWR5IGRpc3BhdGNoZWQgdGhlIGNvcnJlc3BvbmRpbmcgZXZlbnRzIGR1cmluZyBpdHMgbW91c2VvdXQuXG4gICAgICBpZiAoZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUocmVsYXRlZCkgfHwgaXNDb250YWluZXJNYXJrZWRBc1Jvb3QocmVsYXRlZCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmICghaXNPdXRFdmVudCAmJiAhaXNPdmVyRXZlbnQpIHtcbiAgICAvLyBNdXN0IG5vdCBiZSBhIG1vdXNlIG9yIHBvaW50ZXIgaW4gb3Igb3V0IC0gaWdub3JpbmcuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHdpbjsgLy8gVE9ETzogd2h5IGlzIHRoaXMgbnVsbGFibGUgaW4gdGhlIHR5cGVzIGJ1dCB3ZSByZWFkIGZyb20gaXQ/XG5cbiAgaWYgKG5hdGl2ZUV2ZW50VGFyZ2V0LndpbmRvdyA9PT0gbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgICAvLyBgbmF0aXZlRXZlbnRUYXJnZXRgIGlzIHByb2JhYmx5IGEgd2luZG93IG9iamVjdC5cbiAgICB3aW4gPSBuYXRpdmVFdmVudFRhcmdldDtcbiAgfSBlbHNlIHtcbiAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IHdoeSBgb3duZXJEb2N1bWVudGAgaXMgc29tZXRpbWVzIHVuZGVmaW5lZCBpbiBJRTguXG4gICAgdmFyIGRvYyA9IG5hdGl2ZUV2ZW50VGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XG5cbiAgICBpZiAoZG9jKSB7XG4gICAgICB3aW4gPSBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcbiAgICB9IGVsc2Uge1xuICAgICAgd2luID0gd2luZG93O1xuICAgIH1cbiAgfVxuXG4gIHZhciBmcm9tO1xuICB2YXIgdG87XG5cbiAgaWYgKGlzT3V0RXZlbnQpIHtcbiAgICB2YXIgX3JlbGF0ZWQgPSBuYXRpdmVFdmVudC5yZWxhdGVkVGFyZ2V0IHx8IG5hdGl2ZUV2ZW50LnRvRWxlbWVudDtcblxuICAgIGZyb20gPSB0YXJnZXRJbnN0O1xuICAgIHRvID0gX3JlbGF0ZWQgPyBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShfcmVsYXRlZCkgOiBudWxsO1xuXG4gICAgaWYgKHRvICE9PSBudWxsKSB7XG4gICAgICB2YXIgbmVhcmVzdE1vdW50ZWQgPSBnZXROZWFyZXN0TW91bnRlZEZpYmVyKHRvKTtcblxuICAgICAgaWYgKHRvICE9PSBuZWFyZXN0TW91bnRlZCB8fCB0by50YWcgIT09IEhvc3RDb21wb25lbnQgJiYgdG8udGFnICE9PSBIb3N0VGV4dCkge1xuICAgICAgICB0byA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIE1vdmluZyB0byBhIG5vZGUgZnJvbSBvdXRzaWRlIHRoZSB3aW5kb3cuXG4gICAgZnJvbSA9IG51bGw7XG4gICAgdG8gPSB0YXJnZXRJbnN0O1xuICB9XG5cbiAgaWYgKGZyb20gPT09IHRvKSB7XG4gICAgLy8gTm90aGluZyBwZXJ0YWlucyB0byBvdXIgbWFuYWdlZCBjb21wb25lbnRzLlxuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuICB2YXIgbGVhdmVFdmVudFR5cGUgPSAnb25Nb3VzZUxlYXZlJztcbiAgdmFyIGVudGVyRXZlbnRUeXBlID0gJ29uTW91c2VFbnRlcic7XG4gIHZhciBldmVudFR5cGVQcmVmaXggPSAnbW91c2UnO1xuXG4gIGlmIChkb21FdmVudE5hbWUgPT09ICdwb2ludGVyb3V0JyB8fCBkb21FdmVudE5hbWUgPT09ICdwb2ludGVyb3ZlcicpIHtcbiAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNQb2ludGVyRXZlbnQ7XG4gICAgbGVhdmVFdmVudFR5cGUgPSAnb25Qb2ludGVyTGVhdmUnO1xuICAgIGVudGVyRXZlbnRUeXBlID0gJ29uUG9pbnRlckVudGVyJztcbiAgICBldmVudFR5cGVQcmVmaXggPSAncG9pbnRlcic7XG4gIH1cblxuICB2YXIgZnJvbU5vZGUgPSBmcm9tID09IG51bGwgPyB3aW4gOiBnZXROb2RlRnJvbUluc3RhbmNlKGZyb20pO1xuICB2YXIgdG9Ob2RlID0gdG8gPT0gbnVsbCA/IHdpbiA6IGdldE5vZGVGcm9tSW5zdGFuY2UodG8pO1xuICB2YXIgbGVhdmUgPSBuZXcgU3ludGhldGljRXZlbnRDdG9yKGxlYXZlRXZlbnRUeXBlLCBldmVudFR5cGVQcmVmaXggKyAnbGVhdmUnLCBmcm9tLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICBsZWF2ZS50YXJnZXQgPSBmcm9tTm9kZTtcbiAgbGVhdmUucmVsYXRlZFRhcmdldCA9IHRvTm9kZTtcbiAgdmFyIGVudGVyID0gbnVsbDsgLy8gV2Ugc2hvdWxkIG9ubHkgcHJvY2VzcyB0aGlzIG5hdGl2ZUV2ZW50IGlmIHdlIGFyZSBwcm9jZXNzaW5nXG4gIC8vIHRoZSBmaXJzdCBhbmNlc3Rvci4gTmV4dCB0aW1lLCB3ZSB3aWxsIGlnbm9yZSB0aGUgZXZlbnQuXG5cbiAgdmFyIG5hdGl2ZVRhcmdldEluc3QgPSBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShuYXRpdmVFdmVudFRhcmdldCk7XG5cbiAgaWYgKG5hdGl2ZVRhcmdldEluc3QgPT09IHRhcmdldEluc3QpIHtcbiAgICB2YXIgZW50ZXJFdmVudCA9IG5ldyBTeW50aGV0aWNFdmVudEN0b3IoZW50ZXJFdmVudFR5cGUsIGV2ZW50VHlwZVByZWZpeCArICdlbnRlcicsIHRvLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGVudGVyRXZlbnQudGFyZ2V0ID0gdG9Ob2RlO1xuICAgIGVudGVyRXZlbnQucmVsYXRlZFRhcmdldCA9IGZyb21Ob2RlO1xuICAgIGVudGVyID0gZW50ZXJFdmVudDtcbiAgfVxuXG4gIGFjY3VtdWxhdGVFbnRlckxlYXZlVHdvUGhhc2VMaXN0ZW5lcnMoZGlzcGF0Y2hRdWV1ZSwgbGVhdmUsIGVudGVyLCBmcm9tLCB0byk7XG59XG5cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgcmV0dXJuIHggPT09IHkgJiYgKHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5KSB8fCB4ICE9PSB4ICYmIHkgIT09IHkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgO1xufVxuXG52YXIgb2JqZWN0SXMgPSB0eXBlb2YgT2JqZWN0LmlzID09PSAnZnVuY3Rpb24nID8gT2JqZWN0LmlzIDogaXM7XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAob2JqZWN0SXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cblxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwga2V5c0EubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgY3VycmVudEtleSA9IGtleXNBW2ldO1xuXG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGN1cnJlbnRLZXkpIHx8ICFvYmplY3RJcyhvYmpBW2N1cnJlbnRLZXldLCBvYmpCW2N1cnJlbnRLZXldKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIEdpdmVuIGFueSBub2RlIHJldHVybiB0aGUgZmlyc3QgbGVhZiBub2RlIHdpdGhvdXQgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHtET01FbGVtZW50fERPTVRleHROb2RlfVxuICovXG5cbmZ1bmN0aW9uIGdldExlYWZOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUgJiYgbm9kZS5maXJzdENoaWxkKSB7XG4gICAgbm9kZSA9IG5vZGUuZmlyc3RDaGlsZDtcbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuLyoqXG4gKiBHZXQgdGhlIG5leHQgc2libGluZyB3aXRoaW4gYSBjb250YWluZXIuIFRoaXMgd2lsbCB3YWxrIHVwIHRoZVxuICogRE9NIGlmIGEgbm9kZSdzIHNpYmxpbmdzIGhhdmUgYmVlbiBleGhhdXN0ZWQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHs/RE9NRWxlbWVudHxET01UZXh0Tm9kZX1cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFNpYmxpbmdOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG4gICAgfVxuXG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgfVxufVxuLyoqXG4gKiBHZXQgb2JqZWN0IGRlc2NyaWJpbmcgdGhlIG5vZGVzIHdoaWNoIGNvbnRhaW4gY2hhcmFjdGVycyBhdCBvZmZzZXQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSByb290XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5cblxuZnVuY3Rpb24gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChyb290LCBvZmZzZXQpIHtcbiAgdmFyIG5vZGUgPSBnZXRMZWFmTm9kZShyb290KTtcbiAgdmFyIG5vZGVTdGFydCA9IDA7XG4gIHZhciBub2RlRW5kID0gMDtcblxuICB3aGlsZSAobm9kZSkge1xuICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBURVhUX05PREUpIHtcbiAgICAgIG5vZGVFbmQgPSBub2RlU3RhcnQgKyBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcblxuICAgICAgaWYgKG5vZGVTdGFydCA8PSBvZmZzZXQgJiYgbm9kZUVuZCA+PSBvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBub2RlOiBub2RlLFxuICAgICAgICAgIG9mZnNldDogb2Zmc2V0IC0gbm9kZVN0YXJ0XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG5vZGVTdGFydCA9IG5vZGVFbmQ7XG4gICAgfVxuXG4gICAgbm9kZSA9IGdldExlYWZOb2RlKGdldFNpYmxpbmdOb2RlKG5vZGUpKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gb3V0ZXJOb2RlXG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGdldE9mZnNldHMob3V0ZXJOb2RlKSB7XG4gIHZhciBvd25lckRvY3VtZW50ID0gb3V0ZXJOb2RlLm93bmVyRG9jdW1lbnQ7XG4gIHZhciB3aW4gPSBvd25lckRvY3VtZW50ICYmIG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93O1xuICB2YXIgc2VsZWN0aW9uID0gd2luLmdldFNlbGVjdGlvbiAmJiB3aW4uZ2V0U2VsZWN0aW9uKCk7XG5cbiAgaWYgKCFzZWxlY3Rpb24gfHwgc2VsZWN0aW9uLnJhbmdlQ291bnQgPT09IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBhbmNob3JOb2RlID0gc2VsZWN0aW9uLmFuY2hvck5vZGUsXG4gICAgICBhbmNob3JPZmZzZXQgPSBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgICAgZm9jdXNOb2RlID0gc2VsZWN0aW9uLmZvY3VzTm9kZSxcbiAgICAgIGZvY3VzT2Zmc2V0ID0gc2VsZWN0aW9uLmZvY3VzT2Zmc2V0OyAvLyBJbiBGaXJlZm94LCBhbmNob3JOb2RlIGFuZCBmb2N1c05vZGUgY2FuIGJlIFwiYW5vbnltb3VzIGRpdnNcIiwgZS5nLiB0aGVcbiAgLy8gdXAvZG93biBidXR0b25zIG9uIGFuIDxpbnB1dCB0eXBlPVwibnVtYmVyXCI+LiBBbm9ueW1vdXMgZGl2cyBkbyBub3Qgc2VlbSB0b1xuICAvLyBleHBvc2UgcHJvcGVydGllcywgdHJpZ2dlcmluZyBhIFwiUGVybWlzc2lvbiBkZW5pZWQgZXJyb3JcIiBpZiBhbnkgb2YgaXRzXG4gIC8vIHByb3BlcnRpZXMgYXJlIGFjY2Vzc2VkLiBUaGUgb25seSBzZWVtaW5nbHkgcG9zc2libGUgd2F5IHRvIGF2b2lkIGVycm9yaW5nXG4gIC8vIGlzIHRvIGFjY2VzcyBhIHByb3BlcnR5IHRoYXQgdHlwaWNhbGx5IHdvcmtzIGZvciBub24tYW5vbnltb3VzIGRpdnMgYW5kXG4gIC8vIGNhdGNoIGFueSBlcnJvciB0aGF0IG1heSBvdGhlcndpc2UgYXJpc2UuIFNlZVxuICAvLyBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0yMDg0MjdcblxuICB0cnkge1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC1leHByZXNzaW9ucyAqL1xuICAgIGFuY2hvck5vZGUubm9kZVR5cGU7XG4gICAgZm9jdXNOb2RlLm5vZGVUeXBlO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW51c2VkLWV4cHJlc3Npb25zICovXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBnZXRNb2Rlcm5PZmZzZXRzRnJvbVBvaW50cyhvdXRlck5vZGUsIGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCk7XG59XG4vKipcbiAqIFJldHVybnMge3N0YXJ0LCBlbmR9IHdoZXJlIGBzdGFydGAgaXMgdGhlIGNoYXJhY3Rlci9jb2RlcG9pbnQgaW5kZXggb2ZcbiAqIChhbmNob3JOb2RlLCBhbmNob3JPZmZzZXQpIHdpdGhpbiB0aGUgdGV4dENvbnRlbnQgb2YgYG91dGVyTm9kZWAsIGFuZFxuICogYGVuZGAgaXMgdGhlIGluZGV4IG9mIChmb2N1c05vZGUsIGZvY3VzT2Zmc2V0KS5cbiAqXG4gKiBSZXR1cm5zIG51bGwgaWYgeW91IHBhc3MgaW4gZ2FyYmFnZSBpbnB1dCBidXQgd2Ugc2hvdWxkIHByb2JhYmx5IGp1c3QgY3Jhc2guXG4gKlxuICogRXhwb3J0ZWQgb25seSBmb3IgdGVzdGluZy5cbiAqL1xuXG5mdW5jdGlvbiBnZXRNb2Rlcm5PZmZzZXRzRnJvbVBvaW50cyhvdXRlck5vZGUsIGFuY2hvck5vZGUsIGFuY2hvck9mZnNldCwgZm9jdXNOb2RlLCBmb2N1c09mZnNldCkge1xuICB2YXIgbGVuZ3RoID0gMDtcbiAgdmFyIHN0YXJ0ID0gLTE7XG4gIHZhciBlbmQgPSAtMTtcbiAgdmFyIGluZGV4V2l0aGluQW5jaG9yID0gMDtcbiAgdmFyIGluZGV4V2l0aGluRm9jdXMgPSAwO1xuICB2YXIgbm9kZSA9IG91dGVyTm9kZTtcbiAgdmFyIHBhcmVudE5vZGUgPSBudWxsO1xuXG4gIG91dGVyOiB3aGlsZSAodHJ1ZSkge1xuICAgIHZhciBuZXh0ID0gbnVsbDtcblxuICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICBpZiAobm9kZSA9PT0gYW5jaG9yTm9kZSAmJiAoYW5jaG9yT2Zmc2V0ID09PSAwIHx8IG5vZGUubm9kZVR5cGUgPT09IFRFWFRfTk9ERSkpIHtcbiAgICAgICAgc3RhcnQgPSBsZW5ndGggKyBhbmNob3JPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChub2RlID09PSBmb2N1c05vZGUgJiYgKGZvY3VzT2Zmc2V0ID09PSAwIHx8IG5vZGUubm9kZVR5cGUgPT09IFRFWFRfTk9ERSkpIHtcbiAgICAgICAgZW5kID0gbGVuZ3RoICsgZm9jdXNPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSBURVhUX05PREUpIHtcbiAgICAgICAgbGVuZ3RoICs9IG5vZGUubm9kZVZhbHVlLmxlbmd0aDtcbiAgICAgIH1cblxuICAgICAgaWYgKChuZXh0ID0gbm9kZS5maXJzdENoaWxkKSA9PT0gbnVsbCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH0gLy8gTW92aW5nIGZyb20gYG5vZGVgIHRvIGl0cyBmaXJzdCBjaGlsZCBgbmV4dGAuXG5cblxuICAgICAgcGFyZW50Tm9kZSA9IG5vZGU7XG4gICAgICBub2RlID0gbmV4dDtcbiAgICB9XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKG5vZGUgPT09IG91dGVyTm9kZSkge1xuICAgICAgICAvLyBJZiBgb3V0ZXJOb2RlYCBoYXMgY2hpbGRyZW4sIHRoaXMgaXMgYWx3YXlzIHRoZSBzZWNvbmQgdGltZSB2aXNpdGluZ1xuICAgICAgICAvLyBpdC4gSWYgaXQgaGFzIG5vIGNoaWxkcmVuLCB0aGlzIGlzIHN0aWxsIHRoZSBmaXJzdCBsb29wLCBhbmQgdGhlIG9ubHlcbiAgICAgICAgLy8gdmFsaWQgc2VsZWN0aW9uIGlzIGFuY2hvck5vZGUgYW5kIGZvY3VzTm9kZSBib3RoIGVxdWFsIHRvIHRoaXMgbm9kZVxuICAgICAgICAvLyBhbmQgYm90aCBvZmZzZXRzIDAsIGluIHdoaWNoIGNhc2Ugd2Ugd2lsbCBoYXZlIGhhbmRsZWQgYWJvdmUuXG4gICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyZW50Tm9kZSA9PT0gYW5jaG9yTm9kZSAmJiArK2luZGV4V2l0aGluQW5jaG9yID09PSBhbmNob3JPZmZzZXQpIHtcbiAgICAgICAgc3RhcnQgPSBsZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIGlmIChwYXJlbnROb2RlID09PSBmb2N1c05vZGUgJiYgKytpbmRleFdpdGhpbkZvY3VzID09PSBmb2N1c09mZnNldCkge1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIGlmICgobmV4dCA9IG5vZGUubmV4dFNpYmxpbmcpICE9PSBudWxsKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBub2RlID0gcGFyZW50Tm9kZTtcbiAgICAgIHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfSAvLyBNb3ZpbmcgZnJvbSBgbm9kZWAgdG8gaXRzIG5leHQgc2libGluZyBgbmV4dGAuXG5cblxuICAgIG5vZGUgPSBuZXh0O1xuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSAtMSB8fCBlbmQgPT09IC0xKSB7XG4gICAgLy8gVGhpcyBzaG91bGQgbmV2ZXIgaGFwcGVuLiAoV291bGQgaGFwcGVuIGlmIHRoZSBhbmNob3IvZm9jdXMgbm9kZXMgYXJlbid0XG4gICAgLy8gYWN0dWFsbHkgaW5zaWRlIHRoZSBwYXNzZWQtaW4gbm9kZS4pXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBlbmQ6IGVuZFxuICB9O1xufVxuLyoqXG4gKiBJbiBtb2Rlcm4gbm9uLUlFIGJyb3dzZXJzLCB3ZSBjYW4gc3VwcG9ydCBib3RoIGZvcndhcmQgYW5kIGJhY2t3YXJkXG4gKiBzZWxlY3Rpb25zLlxuICpcbiAqIE5vdGU6IElFMTArIHN1cHBvcnRzIHRoZSBTZWxlY3Rpb24gb2JqZWN0LCBidXQgaXQgZG9lcyBub3Qgc3VwcG9ydFxuICogdGhlIGBleHRlbmRgIG1ldGhvZCwgd2hpY2ggbWVhbnMgdGhhdCBldmVuIGluIG1vZGVybiBJRSwgaXQncyBub3QgcG9zc2libGVcbiAqIHRvIHByb2dyYW1tYXRpY2FsbHkgY3JlYXRlIGEgYmFja3dhcmQgc2VsZWN0aW9uLiBUaHVzLCBmb3IgYWxsIElFXG4gKiB2ZXJzaW9ucywgd2UgdXNlIHRoZSBvbGQgSUUgQVBJIHRvIGNyZWF0ZSBvdXIgc2VsZWN0aW9ucy5cbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9IG5vZGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBvZmZzZXRzXG4gKi9cblxuZnVuY3Rpb24gc2V0T2Zmc2V0cyhub2RlLCBvZmZzZXRzKSB7XG4gIHZhciBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQgfHwgZG9jdW1lbnQ7XG4gIHZhciB3aW4gPSBkb2MgJiYgZG9jLmRlZmF1bHRWaWV3IHx8IHdpbmRvdzsgLy8gRWRnZSBmYWlscyB3aXRoIFwiT2JqZWN0IGV4cGVjdGVkXCIgaW4gc29tZSBzY2VuYXJpb3MuXG4gIC8vIChGb3IgaW5zdGFuY2U6IFRpbnlNQ0UgZWRpdG9yIHVzZWQgaW4gYSBsaXN0IGNvbXBvbmVudCB0aGF0IHN1cHBvcnRzIHBhc3RpbmcgdG8gYWRkIG1vcmUsXG4gIC8vIGZhaWxzIHdoZW4gcGFzdGluZyAxMDArIGl0ZW1zKVxuXG4gIGlmICghd2luLmdldFNlbGVjdGlvbikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzZWxlY3Rpb24gPSB3aW4uZ2V0U2VsZWN0aW9uKCk7XG4gIHZhciBsZW5ndGggPSBub2RlLnRleHRDb250ZW50Lmxlbmd0aDtcbiAgdmFyIHN0YXJ0ID0gTWF0aC5taW4ob2Zmc2V0cy5zdGFydCwgbGVuZ3RoKTtcbiAgdmFyIGVuZCA9IG9mZnNldHMuZW5kID09PSB1bmRlZmluZWQgPyBzdGFydCA6IE1hdGgubWluKG9mZnNldHMuZW5kLCBsZW5ndGgpOyAvLyBJRSAxMSB1c2VzIG1vZGVybiBzZWxlY3Rpb24sIGJ1dCBkb2Vzbid0IHN1cHBvcnQgdGhlIGV4dGVuZCBtZXRob2QuXG4gIC8vIEZsaXAgYmFja3dhcmQgc2VsZWN0aW9ucywgc28gd2UgY2FuIHNldCB3aXRoIGEgc2luZ2xlIHJhbmdlLlxuXG4gIGlmICghc2VsZWN0aW9uLmV4dGVuZCAmJiBzdGFydCA+IGVuZCkge1xuICAgIHZhciB0ZW1wID0gZW5kO1xuICAgIGVuZCA9IHN0YXJ0O1xuICAgIHN0YXJ0ID0gdGVtcDtcbiAgfVxuXG4gIHZhciBzdGFydE1hcmtlciA9IGdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQobm9kZSwgc3RhcnQpO1xuICB2YXIgZW5kTWFya2VyID0gZ2V0Tm9kZUZvckNoYXJhY3Rlck9mZnNldChub2RlLCBlbmQpO1xuXG4gIGlmIChzdGFydE1hcmtlciAmJiBlbmRNYXJrZXIpIHtcbiAgICBpZiAoc2VsZWN0aW9uLnJhbmdlQ291bnQgPT09IDEgJiYgc2VsZWN0aW9uLmFuY2hvck5vZGUgPT09IHN0YXJ0TWFya2VyLm5vZGUgJiYgc2VsZWN0aW9uLmFuY2hvck9mZnNldCA9PT0gc3RhcnRNYXJrZXIub2Zmc2V0ICYmIHNlbGVjdGlvbi5mb2N1c05vZGUgPT09IGVuZE1hcmtlci5ub2RlICYmIHNlbGVjdGlvbi5mb2N1c09mZnNldCA9PT0gZW5kTWFya2VyLm9mZnNldCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciByYW5nZSA9IGRvYy5jcmVhdGVSYW5nZSgpO1xuICAgIHJhbmdlLnNldFN0YXJ0KHN0YXJ0TWFya2VyLm5vZGUsIHN0YXJ0TWFya2VyLm9mZnNldCk7XG4gICAgc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpO1xuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSB7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgICAgc2VsZWN0aW9uLmV4dGVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJhbmdlLnNldEVuZChlbmRNYXJrZXIubm9kZSwgZW5kTWFya2VyLm9mZnNldCk7XG4gICAgICBzZWxlY3Rpb24uYWRkUmFuZ2UocmFuZ2UpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1RleHROb2RlKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5ub2RlVHlwZSA9PT0gVEVYVF9OT0RFO1xufVxuXG5mdW5jdGlvbiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUpIHtcbiAgaWYgKCFvdXRlck5vZGUgfHwgIWlubmVyTm9kZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChvdXRlck5vZGUgPT09IGlubmVyTm9kZSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUob3V0ZXJOb2RlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChpc1RleHROb2RlKGlubmVyTm9kZSkpIHtcbiAgICByZXR1cm4gY29udGFpbnNOb2RlKG91dGVyTm9kZSwgaW5uZXJOb2RlLnBhcmVudE5vZGUpO1xuICB9IGVsc2UgaWYgKCdjb250YWlucycgaW4gb3V0ZXJOb2RlKSB7XG4gICAgcmV0dXJuIG91dGVyTm9kZS5jb250YWlucyhpbm5lck5vZGUpO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbikge1xuICAgIHJldHVybiAhIShvdXRlck5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24oaW5uZXJOb2RlKSAmIDE2KTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNJbkRvY3VtZW50KG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUgJiYgbm9kZS5vd25lckRvY3VtZW50ICYmIGNvbnRhaW5zTm9kZShub2RlLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBub2RlKTtcbn1cblxuZnVuY3Rpb24gaXNTYW1lT3JpZ2luRnJhbWUoaWZyYW1lKSB7XG4gIHRyeSB7XG4gICAgLy8gQWNjZXNzaW5nIHRoZSBjb250ZW50RG9jdW1lbnQgb2YgYSBIVE1MSWZyYW1lRWxlbWVudCBjYW4gY2F1c2UgdGhlIGJyb3dzZXJcbiAgICAvLyB0byB0aHJvdywgZS5nLiBpZiBpdCBoYXMgYSBjcm9zcy1vcmlnaW4gc3JjIGF0dHJpYnV0ZS5cbiAgICAvLyBTYWZhcmkgd2lsbCBzaG93IGFuIGVycm9yIGluIHRoZSBjb25zb2xlIHdoZW4gdGhlIGFjY2VzcyByZXN1bHRzIGluIFwiQmxvY2tlZCBhIGZyYW1lIHdpdGggb3JpZ2luXCIuIGUuZzpcbiAgICAvLyBpZnJhbWUuY29udGVudERvY3VtZW50LmRlZmF1bHRWaWV3O1xuICAgIC8vIEEgc2FmZXR5IHdheSBpcyB0byBhY2Nlc3Mgb25lIG9mIHRoZSBjcm9zcyBvcmlnaW4gcHJvcGVydGllczogV2luZG93IG9yIExvY2F0aW9uXG4gICAgLy8gV2hpY2ggbWlnaHQgcmVzdWx0IGluIFwiU2VjdXJpdHlFcnJvclwiIERPTSBFeGNlcHRpb24gYW5kIGl0IGlzIGNvbXBhdGlibGUgdG8gU2FmYXJpLlxuICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Jyb3dzZXJzLmh0bWwjaW50ZWdyYXRpb24td2l0aC1pZGxcbiAgICByZXR1cm4gdHlwZW9mIGlmcmFtZS5jb250ZW50V2luZG93LmxvY2F0aW9uLmhyZWYgPT09ICdzdHJpbmcnO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QWN0aXZlRWxlbWVudERlZXAoKSB7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG4gIHZhciBlbGVtZW50ID0gZ2V0QWN0aXZlRWxlbWVudCgpO1xuXG4gIHdoaWxlIChlbGVtZW50IGluc3RhbmNlb2Ygd2luLkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgaWYgKGlzU2FtZU9yaWdpbkZyYW1lKGVsZW1lbnQpKSB7XG4gICAgICB3aW4gPSBlbGVtZW50LmNvbnRlbnRXaW5kb3c7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIGVsZW1lbnQgPSBnZXRBY3RpdmVFbGVtZW50KHdpbi5kb2N1bWVudCk7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn1cbi8qKlxuICogQFJlYWN0SW5wdXRTZWxlY3Rpb246IFJlYWN0IGlucHV0IHNlbGVjdGlvbiBtb2R1bGUuIEJhc2VkIG9uIFNlbGVjdGlvbi5qcyxcbiAqIGJ1dCBtb2RpZmllZCB0byBiZSBzdWl0YWJsZSBmb3IgcmVhY3QgYW5kIGhhcyBhIGNvdXBsZSBvZiBidWcgZml4ZXMgKGRvZXNuJ3RcbiAqIGFzc3VtZSBidXR0b25zIGhhdmUgcmFuZ2Ugc2VsZWN0aW9ucyBhbGxvd2VkKS5cbiAqIElucHV0IHNlbGVjdGlvbiBtb2R1bGUgZm9yIFJlYWN0LlxuICovXG5cbi8qKlxuICogQGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllczogd2UgZ2V0IHRoZSBlbGVtZW50IHR5cGVzIHRoYXQgc3VwcG9ydCBzZWxlY3Rpb25cbiAqIGZyb20gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy8jZG8tbm90LWFwcGx5LCBsb29raW5nIGF0IGBzZWxlY3Rpb25TdGFydGBcbiAqIGFuZCBgc2VsZWN0aW9uRW5kYCByb3dzLlxuICovXG5cblxuZnVuY3Rpb24gaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGVsZW0pIHtcbiAgdmFyIG5vZGVOYW1lID0gZWxlbSAmJiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIG5vZGVOYW1lICYmIChub2RlTmFtZSA9PT0gJ2lucHV0JyAmJiAoZWxlbS50eXBlID09PSAndGV4dCcgfHwgZWxlbS50eXBlID09PSAnc2VhcmNoJyB8fCBlbGVtLnR5cGUgPT09ICd0ZWwnIHx8IGVsZW0udHlwZSA9PT0gJ3VybCcgfHwgZWxlbS50eXBlID09PSAncGFzc3dvcmQnKSB8fCBub2RlTmFtZSA9PT0gJ3RleHRhcmVhJyB8fCBlbGVtLmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnKTtcbn1cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbkluZm9ybWF0aW9uKCkge1xuICB2YXIgZm9jdXNlZEVsZW0gPSBnZXRBY3RpdmVFbGVtZW50RGVlcCgpO1xuICByZXR1cm4ge1xuICAgIGZvY3VzZWRFbGVtOiBmb2N1c2VkRWxlbSxcbiAgICBzZWxlY3Rpb25SYW5nZTogaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzKGZvY3VzZWRFbGVtKSA/IGdldFNlbGVjdGlvbihmb2N1c2VkRWxlbSkgOiBudWxsXG4gIH07XG59XG4vKipcbiAqIEByZXN0b3JlU2VsZWN0aW9uOiBJZiBhbnkgc2VsZWN0aW9uIGluZm9ybWF0aW9uIHdhcyBwb3RlbnRpYWxseSBsb3N0LFxuICogcmVzdG9yZSBpdC4gVGhpcyBpcyB1c2VmdWwgd2hlbiBwZXJmb3JtaW5nIG9wZXJhdGlvbnMgdGhhdCBjb3VsZCByZW1vdmUgZG9tXG4gKiBub2RlcyBhbmQgcGxhY2UgdGhlbSBiYWNrIGluLCByZXN1bHRpbmcgaW4gZm9jdXMgYmVpbmcgbG9zdC5cbiAqL1xuXG5mdW5jdGlvbiByZXN0b3JlU2VsZWN0aW9uKHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24pIHtcbiAgdmFyIGN1ckZvY3VzZWRFbGVtID0gZ2V0QWN0aXZlRWxlbWVudERlZXAoKTtcbiAgdmFyIHByaW9yRm9jdXNlZEVsZW0gPSBwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uLmZvY3VzZWRFbGVtO1xuICB2YXIgcHJpb3JTZWxlY3Rpb25SYW5nZSA9IHByaW9yU2VsZWN0aW9uSW5mb3JtYXRpb24uc2VsZWN0aW9uUmFuZ2U7XG5cbiAgaWYgKGN1ckZvY3VzZWRFbGVtICE9PSBwcmlvckZvY3VzZWRFbGVtICYmIGlzSW5Eb2N1bWVudChwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgIGlmIChwcmlvclNlbGVjdGlvblJhbmdlICE9PSBudWxsICYmIGhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyhwcmlvckZvY3VzZWRFbGVtKSkge1xuICAgICAgc2V0U2VsZWN0aW9uKHByaW9yRm9jdXNlZEVsZW0sIHByaW9yU2VsZWN0aW9uUmFuZ2UpO1xuICAgIH0gLy8gRm9jdXNpbmcgYSBub2RlIGNhbiBjaGFuZ2UgdGhlIHNjcm9sbCBwb3NpdGlvbiwgd2hpY2ggaXMgdW5kZXNpcmFibGVcblxuXG4gICAgdmFyIGFuY2VzdG9ycyA9IFtdO1xuICAgIHZhciBhbmNlc3RvciA9IHByaW9yRm9jdXNlZEVsZW07XG5cbiAgICB3aGlsZSAoYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnROb2RlKSB7XG4gICAgICBpZiAoYW5jZXN0b3Iubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICBhbmNlc3RvcnMucHVzaCh7XG4gICAgICAgICAgZWxlbWVudDogYW5jZXN0b3IsXG4gICAgICAgICAgbGVmdDogYW5jZXN0b3Iuc2Nyb2xsTGVmdCxcbiAgICAgICAgICB0b3A6IGFuY2VzdG9yLnNjcm9sbFRvcFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHByaW9yRm9jdXNlZEVsZW0uZm9jdXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByaW9yRm9jdXNlZEVsZW0uZm9jdXMoKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFuY2VzdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGluZm8gPSBhbmNlc3RvcnNbaV07XG4gICAgICBpbmZvLmVsZW1lbnQuc2Nyb2xsTGVmdCA9IGluZm8ubGVmdDtcbiAgICAgIGluZm8uZWxlbWVudC5zY3JvbGxUb3AgPSBpbmZvLnRvcDtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogQGdldFNlbGVjdGlvbjogR2V0cyB0aGUgc2VsZWN0aW9uIGJvdW5kcyBvZiBhIGZvY3VzZWQgdGV4dGFyZWEsIGlucHV0IG9yXG4gKiBjb250ZW50RWRpdGFibGUgbm9kZS5cbiAqIC1AaW5wdXQ6IExvb2sgdXAgc2VsZWN0aW9uIGJvdW5kcyBvZiB0aGlzIGlucHV0XG4gKiAtQHJldHVybiB7c3RhcnQ6IHNlbGVjdGlvblN0YXJ0LCBlbmQ6IHNlbGVjdGlvbkVuZH1cbiAqL1xuXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb24oaW5wdXQpIHtcbiAgdmFyIHNlbGVjdGlvbjtcblxuICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuICAgIC8vIE1vZGVybiBicm93c2VyIHdpdGggaW5wdXQgb3IgdGV4dGFyZWEuXG4gICAgc2VsZWN0aW9uID0ge1xuICAgICAgc3RhcnQ6IGlucHV0LnNlbGVjdGlvblN0YXJ0LFxuICAgICAgZW5kOiBpbnB1dC5zZWxlY3Rpb25FbmRcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIC8vIENvbnRlbnQgZWRpdGFibGUgb3Igb2xkIElFIHRleHRhcmVhLlxuICAgIHNlbGVjdGlvbiA9IGdldE9mZnNldHMoaW5wdXQpO1xuICB9XG5cbiAgcmV0dXJuIHNlbGVjdGlvbiB8fCB7XG4gICAgc3RhcnQ6IDAsXG4gICAgZW5kOiAwXG4gIH07XG59XG4vKipcbiAqIEBzZXRTZWxlY3Rpb246IFNldHMgdGhlIHNlbGVjdGlvbiBib3VuZHMgb2YgYSB0ZXh0YXJlYSBvciBpbnB1dCBhbmQgZm9jdXNlc1xuICogdGhlIGlucHV0LlxuICogLUBpbnB1dCAgICAgU2V0IHNlbGVjdGlvbiBib3VuZHMgb2YgdGhpcyBpbnB1dCBvciB0ZXh0YXJlYVxuICogLUBvZmZzZXRzICAgT2JqZWN0IG9mIHNhbWUgZm9ybSB0aGF0IGlzIHJldHVybmVkIGZyb20gZ2V0KlxuICovXG5cbmZ1bmN0aW9uIHNldFNlbGVjdGlvbihpbnB1dCwgb2Zmc2V0cykge1xuICB2YXIgc3RhcnQgPSBvZmZzZXRzLnN0YXJ0O1xuICB2YXIgZW5kID0gb2Zmc2V0cy5lbmQ7XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gc3RhcnQ7XG4gIH1cblxuICBpZiAoJ3NlbGVjdGlvblN0YXJ0JyBpbiBpbnB1dCkge1xuICAgIGlucHV0LnNlbGVjdGlvblN0YXJ0ID0gc3RhcnQ7XG4gICAgaW5wdXQuc2VsZWN0aW9uRW5kID0gTWF0aC5taW4oZW5kLCBpbnB1dC52YWx1ZS5sZW5ndGgpO1xuICB9IGVsc2Uge1xuICAgIHNldE9mZnNldHMoaW5wdXQsIG9mZnNldHMpO1xuICB9XG59XG5cbnZhciBza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQgPSBjYW5Vc2VET00gJiYgJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDw9IDExO1xuXG5mdW5jdGlvbiByZWdpc3RlckV2ZW50cyQzKCkge1xuICByZWdpc3RlclR3b1BoYXNlRXZlbnQoJ29uU2VsZWN0JywgWydmb2N1c291dCcsICdjb250ZXh0bWVudScsICdkcmFnZW5kJywgJ2ZvY3VzaW4nLCAna2V5ZG93bicsICdrZXl1cCcsICdtb3VzZWRvd24nLCAnbW91c2V1cCcsICdzZWxlY3Rpb25jaGFuZ2UnXSk7XG59XG5cbnZhciBhY3RpdmVFbGVtZW50JDEgPSBudWxsO1xudmFyIGFjdGl2ZUVsZW1lbnRJbnN0JDEgPSBudWxsO1xudmFyIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xudmFyIG1vdXNlRG93biA9IGZhbHNlO1xuLyoqXG4gKiBHZXQgYW4gb2JqZWN0IHdoaWNoIGlzIGEgdW5pcXVlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjdXJyZW50IHNlbGVjdGlvbi5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgbm90IGJlIGNvbnNpc3RlbnQgYWNyb3NzIG5vZGVzIG9yIGJyb3dzZXJzLCBidXRcbiAqIHR3byBpZGVudGljYWwgc2VsZWN0aW9ucyBvbiB0aGUgc2FtZSBub2RlIHdpbGwgcmV0dXJuIGlkZW50aWNhbCBvYmplY3RzLlxuICovXG5cbmZ1bmN0aW9uIGdldFNlbGVjdGlvbiQxKG5vZGUpIHtcbiAgaWYgKCdzZWxlY3Rpb25TdGFydCcgaW4gbm9kZSAmJiBoYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMobm9kZSkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhcnQ6IG5vZGUuc2VsZWN0aW9uU3RhcnQsXG4gICAgICBlbmQ6IG5vZGUuc2VsZWN0aW9uRW5kXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgd2luID0gbm9kZS5vd25lckRvY3VtZW50ICYmIG5vZGUub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG4gICAgdmFyIHNlbGVjdGlvbiA9IHdpbi5nZXRTZWxlY3Rpb24oKTtcbiAgICByZXR1cm4ge1xuICAgICAgYW5jaG9yTm9kZTogc2VsZWN0aW9uLmFuY2hvck5vZGUsXG4gICAgICBhbmNob3JPZmZzZXQ6IHNlbGVjdGlvbi5hbmNob3JPZmZzZXQsXG4gICAgICBmb2N1c05vZGU6IHNlbGVjdGlvbi5mb2N1c05vZGUsXG4gICAgICBmb2N1c09mZnNldDogc2VsZWN0aW9uLmZvY3VzT2Zmc2V0XG4gICAgfTtcbiAgfVxufVxuLyoqXG4gKiBHZXQgZG9jdW1lbnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBldmVudCB0YXJnZXQuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRFdmVudFRhcmdldERvY3VtZW50KGV2ZW50VGFyZ2V0KSB7XG4gIHJldHVybiBldmVudFRhcmdldC53aW5kb3cgPT09IGV2ZW50VGFyZ2V0ID8gZXZlbnRUYXJnZXQuZG9jdW1lbnQgOiBldmVudFRhcmdldC5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfTk9ERSA/IGV2ZW50VGFyZ2V0IDogZXZlbnRUYXJnZXQub3duZXJEb2N1bWVudDtcbn1cbi8qKlxuICogUG9sbCBzZWxlY3Rpb24gdG8gc2VlIHdoZXRoZXIgaXQncyBjaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50VGFyZ2V0XG4gKiBAcmV0dXJuIHs/U3ludGhldGljRXZlbnR9XG4gKi9cblxuXG5mdW5jdGlvbiBjb25zdHJ1Y3RTZWxlY3RFdmVudChkaXNwYXRjaFF1ZXVlLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgLy8gRW5zdXJlIHdlIGhhdmUgdGhlIHJpZ2h0IGVsZW1lbnQsIGFuZCB0aGF0IHRoZSB1c2VyIGlzIG5vdCBkcmFnZ2luZyBhXG4gIC8vIHNlbGVjdGlvbiAodGhpcyBtYXRjaGVzIG5hdGl2ZSBgc2VsZWN0YCBldmVudCBiZWhhdmlvcikuIEluIEhUTUw1LCBzZWxlY3RcbiAgLy8gZmlyZXMgb25seSBvbiBpbnB1dCBhbmQgdGV4dGFyZWEgdGh1cyBpZiB0aGVyZSdzIG5vIGZvY3VzZWQgZWxlbWVudCB3ZVxuICAvLyB3b24ndCBkaXNwYXRjaC5cbiAgdmFyIGRvYyA9IGdldEV2ZW50VGFyZ2V0RG9jdW1lbnQobmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gIGlmIChtb3VzZURvd24gfHwgYWN0aXZlRWxlbWVudCQxID09IG51bGwgfHwgYWN0aXZlRWxlbWVudCQxICE9PSBnZXRBY3RpdmVFbGVtZW50KGRvYykpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gT25seSBmaXJlIHdoZW4gc2VsZWN0aW9uIGhhcyBhY3R1YWxseSBjaGFuZ2VkLlxuXG5cbiAgdmFyIGN1cnJlbnRTZWxlY3Rpb24gPSBnZXRTZWxlY3Rpb24kMShhY3RpdmVFbGVtZW50JDEpO1xuXG4gIGlmICghbGFzdFNlbGVjdGlvbiB8fCAhc2hhbGxvd0VxdWFsKGxhc3RTZWxlY3Rpb24sIGN1cnJlbnRTZWxlY3Rpb24pKSB7XG4gICAgbGFzdFNlbGVjdGlvbiA9IGN1cnJlbnRTZWxlY3Rpb247XG4gICAgdmFyIGxpc3RlbmVycyA9IGFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyhhY3RpdmVFbGVtZW50SW5zdCQxLCAnb25TZWxlY3QnKTtcblxuICAgIGlmIChsaXN0ZW5lcnMubGVuZ3RoID4gMCkge1xuICAgICAgdmFyIGV2ZW50ID0gbmV3IFN5bnRoZXRpY0V2ZW50KCdvblNlbGVjdCcsICdzZWxlY3QnLCBudWxsLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgZGlzcGF0Y2hRdWV1ZS5wdXNoKHtcbiAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICBsaXN0ZW5lcnM6IGxpc3RlbmVyc1xuICAgICAgfSk7XG4gICAgICBldmVudC50YXJnZXQgPSBhY3RpdmVFbGVtZW50JDE7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIFRoaXMgcGx1Z2luIGNyZWF0ZXMgYW4gYG9uU2VsZWN0YCBldmVudCB0aGF0IG5vcm1hbGl6ZXMgc2VsZWN0IGV2ZW50c1xuICogYWNyb3NzIGZvcm0gZWxlbWVudHMuXG4gKlxuICogU3VwcG9ydGVkIGVsZW1lbnRzIGFyZTpcbiAqIC0gaW5wdXQgKHNlZSBgaXNUZXh0SW5wdXRFbGVtZW50YClcbiAqIC0gdGV4dGFyZWFcbiAqIC0gY29udGVudEVkaXRhYmxlXG4gKlxuICogVGhpcyBkaWZmZXJzIGZyb20gbmF0aXZlIGJyb3dzZXIgaW1wbGVtZW50YXRpb25zIGluIHRoZSBmb2xsb3dpbmcgd2F5czpcbiAqIC0gRmlyZXMgb24gY29udGVudEVkaXRhYmxlIGZpZWxkcyBhcyB3ZWxsIGFzIGlucHV0cy5cbiAqIC0gRmlyZXMgZm9yIGNvbGxhcHNlZCBzZWxlY3Rpb24uXG4gKiAtIEZpcmVzIGFmdGVyIHVzZXIgaW5wdXQuXG4gKi9cblxuXG5mdW5jdGlvbiBleHRyYWN0RXZlbnRzJDMoZGlzcGF0Y2hRdWV1ZSwgZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQsIGV2ZW50U3lzdGVtRmxhZ3MsIHRhcmdldENvbnRhaW5lcikge1xuICB2YXIgdGFyZ2V0Tm9kZSA9IHRhcmdldEluc3QgPyBnZXROb2RlRnJvbUluc3RhbmNlKHRhcmdldEluc3QpIDogd2luZG93O1xuXG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgLy8gVHJhY2sgdGhlIGlucHV0IG5vZGUgdGhhdCBoYXMgZm9jdXMuXG4gICAgY2FzZSAnZm9jdXNpbic6XG4gICAgICBpZiAoaXNUZXh0SW5wdXRFbGVtZW50KHRhcmdldE5vZGUpIHx8IHRhcmdldE5vZGUuY29udGVudEVkaXRhYmxlID09PSAndHJ1ZScpIHtcbiAgICAgICAgYWN0aXZlRWxlbWVudCQxID0gdGFyZ2V0Tm9kZTtcbiAgICAgICAgYWN0aXZlRWxlbWVudEluc3QkMSA9IHRhcmdldEluc3Q7XG4gICAgICAgIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2ZvY3Vzb3V0JzpcbiAgICAgIGFjdGl2ZUVsZW1lbnQkMSA9IG51bGw7XG4gICAgICBhY3RpdmVFbGVtZW50SW5zdCQxID0gbnVsbDtcbiAgICAgIGxhc3RTZWxlY3Rpb24gPSBudWxsO1xuICAgICAgYnJlYWs7XG4gICAgLy8gRG9uJ3QgZmlyZSB0aGUgZXZlbnQgd2hpbGUgdGhlIHVzZXIgaXMgZHJhZ2dpbmcuIFRoaXMgbWF0Y2hlcyB0aGVcbiAgICAvLyBzZW1hbnRpY3Mgb2YgdGhlIG5hdGl2ZSBzZWxlY3QgZXZlbnQuXG5cbiAgICBjYXNlICdtb3VzZWRvd24nOlxuICAgICAgbW91c2VEb3duID0gdHJ1ZTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnY29udGV4dG1lbnUnOlxuICAgIGNhc2UgJ21vdXNldXAnOlxuICAgIGNhc2UgJ2RyYWdlbmQnOlxuICAgICAgbW91c2VEb3duID0gZmFsc2U7XG4gICAgICBjb25zdHJ1Y3RTZWxlY3RFdmVudChkaXNwYXRjaFF1ZXVlLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgYnJlYWs7XG4gICAgLy8gQ2hyb21lIGFuZCBJRSBmaXJlIG5vbi1zdGFuZGFyZCBldmVudCB3aGVuIHNlbGVjdGlvbiBpcyBjaGFuZ2VkIChhbmRcbiAgICAvLyBzb21ldGltZXMgd2hlbiBpdCBoYXNuJ3QpLiBJRSdzIGV2ZW50IGZpcmVzIG91dCBvZiBvcmRlciB3aXRoIHJlc3BlY3RcbiAgICAvLyB0byBrZXkgYW5kIGlucHV0IGV2ZW50cyBvbiBkZWxldGlvbiwgc28gd2UgZGlzY2FyZCBpdC5cbiAgICAvL1xuICAgIC8vIEZpcmVmb3ggZG9lc24ndCBzdXBwb3J0IHNlbGVjdGlvbmNoYW5nZSwgc28gY2hlY2sgc2VsZWN0aW9uIHN0YXR1c1xuICAgIC8vIGFmdGVyIGVhY2gga2V5IGVudHJ5LiBUaGUgc2VsZWN0aW9uIGNoYW5nZXMgYWZ0ZXIga2V5ZG93biBhbmQgYmVmb3JlXG4gICAgLy8ga2V5dXAsIGJ1dCB3ZSBjaGVjayBvbiBrZXlkb3duIGFzIHdlbGwgaW4gdGhlIGNhc2Ugb2YgaG9sZGluZyBkb3duIGFcbiAgICAvLyBrZXksIHdoZW4gbXVsdGlwbGUga2V5ZG93biBldmVudHMgYXJlIGZpcmVkIGJ1dCBvbmx5IG9uZSBrZXl1cCBpcy5cbiAgICAvLyBUaGlzIGlzIGFsc28gb3VyIGFwcHJvYWNoIGZvciBJRSBoYW5kbGluZywgZm9yIHRoZSByZWFzb24gYWJvdmUuXG5cbiAgICBjYXNlICdzZWxlY3Rpb25jaGFuZ2UnOlxuICAgICAgaWYgKHNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIC8vIGZhbGxzIHRocm91Z2hcblxuICAgIGNhc2UgJ2tleWRvd24nOlxuICAgIGNhc2UgJ2tleXVwJzpcbiAgICAgIGNvbnN0cnVjdFNlbGVjdEV2ZW50KGRpc3BhdGNoUXVldWUsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZSBhIG1hcHBpbmcgb2Ygc3RhbmRhcmQgdmVuZG9yIHByZWZpeGVzIHVzaW5nIHRoZSBkZWZpbmVkIHN0eWxlIHByb3BlcnR5IGFuZCBldmVudCBuYW1lLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHlsZVByb3BcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cblxuZnVuY3Rpb24gbWFrZVByZWZpeE1hcChzdHlsZVByb3AsIGV2ZW50TmFtZSkge1xuICB2YXIgcHJlZml4ZXMgPSB7fTtcbiAgcHJlZml4ZXNbc3R5bGVQcm9wLnRvTG93ZXJDYXNlKCldID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XG4gIHByZWZpeGVzWydXZWJraXQnICsgc3R5bGVQcm9wXSA9ICd3ZWJraXQnICsgZXZlbnROYW1lO1xuICBwcmVmaXhlc1snTW96JyArIHN0eWxlUHJvcF0gPSAnbW96JyArIGV2ZW50TmFtZTtcbiAgcmV0dXJuIHByZWZpeGVzO1xufVxuLyoqXG4gKiBBIGxpc3Qgb2YgZXZlbnQgbmFtZXMgdG8gYSBjb25maWd1cmFibGUgbGlzdCBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cblxuXG52YXIgdmVuZG9yUHJlZml4ZXMgPSB7XG4gIGFuaW1hdGlvbmVuZDogbWFrZVByZWZpeE1hcCgnQW5pbWF0aW9uJywgJ0FuaW1hdGlvbkVuZCcpLFxuICBhbmltYXRpb25pdGVyYXRpb246IG1ha2VQcmVmaXhNYXAoJ0FuaW1hdGlvbicsICdBbmltYXRpb25JdGVyYXRpb24nKSxcbiAgYW5pbWF0aW9uc3RhcnQ6IG1ha2VQcmVmaXhNYXAoJ0FuaW1hdGlvbicsICdBbmltYXRpb25TdGFydCcpLFxuICB0cmFuc2l0aW9uZW5kOiBtYWtlUHJlZml4TWFwKCdUcmFuc2l0aW9uJywgJ1RyYW5zaXRpb25FbmQnKVxufTtcbi8qKlxuICogRXZlbnQgbmFtZXMgdGhhdCBoYXZlIGFscmVhZHkgYmVlbiBkZXRlY3RlZCBhbmQgcHJlZml4ZWQgKGlmIGFwcGxpY2FibGUpLlxuICovXG5cbnZhciBwcmVmaXhlZEV2ZW50TmFtZXMgPSB7fTtcbi8qKlxuICogRWxlbWVudCB0byBjaGVjayBmb3IgcHJlZml4ZXMgb24uXG4gKi9cblxudmFyIHN0eWxlID0ge307XG4vKipcbiAqIEJvb3RzdHJhcCBpZiBhIERPTSBleGlzdHMuXG4gKi9cblxuaWYgKGNhblVzZURPTSkge1xuICBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLnN0eWxlOyAvLyBPbiBzb21lIHBsYXRmb3JtcywgaW4gcGFydGljdWxhciBzb21lIHJlbGVhc2VzIG9mIEFuZHJvaWQgNC54LFxuICAvLyB0aGUgdW4tcHJlZml4ZWQgXCJhbmltYXRpb25cIiBhbmQgXCJ0cmFuc2l0aW9uXCIgcHJvcGVydGllcyBhcmUgZGVmaW5lZCBvbiB0aGVcbiAgLy8gc3R5bGUgb2JqZWN0IGJ1dCB0aGUgZXZlbnRzIHRoYXQgZmlyZSB3aWxsIHN0aWxsIGJlIHByZWZpeGVkLCBzbyB3ZSBuZWVkXG4gIC8vIHRvIGNoZWNrIGlmIHRoZSB1bi1wcmVmaXhlZCBldmVudHMgYXJlIHVzYWJsZSwgYW5kIGlmIG5vdCByZW1vdmUgdGhlbSBmcm9tIHRoZSBtYXAuXG5cbiAgaWYgKCEoJ0FuaW1hdGlvbkV2ZW50JyBpbiB3aW5kb3cpKSB7XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbmVuZC5hbmltYXRpb247XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb247XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbjtcbiAgfSAvLyBTYW1lIGFzIGFib3ZlXG5cblxuICBpZiAoISgnVHJhbnNpdGlvbkV2ZW50JyBpbiB3aW5kb3cpKSB7XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbjtcbiAgfVxufVxuLyoqXG4gKiBBdHRlbXB0cyB0byBkZXRlcm1pbmUgdGhlIGNvcnJlY3QgdmVuZG9yIHByZWZpeGVkIGV2ZW50IG5hbWUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuXG5cbmZ1bmN0aW9uIGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKGV2ZW50TmFtZSkge1xuICBpZiAocHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV0pIHtcbiAgICByZXR1cm4gcHJlZml4ZWRFdmVudE5hbWVzW2V2ZW50TmFtZV07XG4gIH0gZWxzZSBpZiAoIXZlbmRvclByZWZpeGVzW2V2ZW50TmFtZV0pIHtcbiAgICByZXR1cm4gZXZlbnROYW1lO1xuICB9XG5cbiAgdmFyIHByZWZpeE1hcCA9IHZlbmRvclByZWZpeGVzW2V2ZW50TmFtZV07XG5cbiAgZm9yICh2YXIgc3R5bGVQcm9wIGluIHByZWZpeE1hcCkge1xuICAgIGlmIChwcmVmaXhNYXAuaGFzT3duUHJvcGVydHkoc3R5bGVQcm9wKSAmJiBzdHlsZVByb3AgaW4gc3R5bGUpIHtcbiAgICAgIHJldHVybiBwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXSA9IHByZWZpeE1hcFtzdHlsZVByb3BdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBldmVudE5hbWU7XG59XG5cbnZhciBBTklNQVRJT05fRU5EID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ2FuaW1hdGlvbmVuZCcpO1xudmFyIEFOSU1BVElPTl9JVEVSQVRJT04gPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSgnYW5pbWF0aW9uaXRlcmF0aW9uJyk7XG52YXIgQU5JTUFUSU9OX1NUQVJUID0gZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ2FuaW1hdGlvbnN0YXJ0Jyk7XG52YXIgVFJBTlNJVElPTl9FTkQgPSBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSgndHJhbnNpdGlvbmVuZCcpO1xuXG52YXIgdG9wTGV2ZWxFdmVudHNUb1JlYWN0TmFtZXMgPSBuZXcgTWFwKCk7IC8vIE5PVEU6IENhcGl0YWxpemF0aW9uIGlzIGltcG9ydGFudCBpbiB0aGlzIGxpc3QhXG4vL1xuLy8gRS5nLiBpdCBuZWVkcyBcInBvaW50ZXJEb3duXCIsIG5vdCBcInBvaW50ZXJkb3duXCIuXG4vLyBUaGlzIGlzIGJlY2F1c2Ugd2UgZGVyaXZlIGJvdGggUmVhY3QgbmFtZSAoXCJvblBvaW50ZXJEb3duXCIpXG4vLyBhbmQgRE9NIG5hbWUgKFwicG9pbnRlcmRvd25cIikgZnJvbSB0aGUgc2FtZSBsaXN0LlxuLy9cbi8vIEV4Y2VwdGlvbnMgdGhhdCBkb24ndCBtYXRjaCB0aGlzIGNvbnZlbnRpb24gYXJlIGxpc3RlZCBzZXBhcmF0ZWx5LlxuLy9cbi8vIHByZXR0aWVyLWlnbm9yZVxuXG52YXIgc2ltcGxlRXZlbnRQbHVnaW5FdmVudHMgPSBbJ2Fib3J0JywgJ2F1eENsaWNrJywgJ2NhbmNlbCcsICdjYW5QbGF5JywgJ2NhblBsYXlUaHJvdWdoJywgJ2NsaWNrJywgJ2Nsb3NlJywgJ2NvbnRleHRNZW51JywgJ2NvcHknLCAnY3V0JywgJ2RyYWcnLCAnZHJhZ0VuZCcsICdkcmFnRW50ZXInLCAnZHJhZ0V4aXQnLCAnZHJhZ0xlYXZlJywgJ2RyYWdPdmVyJywgJ2RyYWdTdGFydCcsICdkcm9wJywgJ2R1cmF0aW9uQ2hhbmdlJywgJ2VtcHRpZWQnLCAnZW5jcnlwdGVkJywgJ2VuZGVkJywgJ2Vycm9yJywgJ2dvdFBvaW50ZXJDYXB0dXJlJywgJ2lucHV0JywgJ2ludmFsaWQnLCAna2V5RG93bicsICdrZXlQcmVzcycsICdrZXlVcCcsICdsb2FkJywgJ2xvYWRlZERhdGEnLCAnbG9hZGVkTWV0YWRhdGEnLCAnbG9hZFN0YXJ0JywgJ2xvc3RQb2ludGVyQ2FwdHVyZScsICdtb3VzZURvd24nLCAnbW91c2VNb3ZlJywgJ21vdXNlT3V0JywgJ21vdXNlT3ZlcicsICdtb3VzZVVwJywgJ3Bhc3RlJywgJ3BhdXNlJywgJ3BsYXknLCAncGxheWluZycsICdwb2ludGVyQ2FuY2VsJywgJ3BvaW50ZXJEb3duJywgJ3BvaW50ZXJNb3ZlJywgJ3BvaW50ZXJPdXQnLCAncG9pbnRlck92ZXInLCAncG9pbnRlclVwJywgJ3Byb2dyZXNzJywgJ3JhdGVDaGFuZ2UnLCAncmVzZXQnLCAncmVzaXplJywgJ3NlZWtlZCcsICdzZWVraW5nJywgJ3N0YWxsZWQnLCAnc3VibWl0JywgJ3N1c3BlbmQnLCAndGltZVVwZGF0ZScsICd0b3VjaENhbmNlbCcsICd0b3VjaEVuZCcsICd0b3VjaFN0YXJ0JywgJ3ZvbHVtZUNoYW5nZScsICdzY3JvbGwnLCAndG9nZ2xlJywgJ3RvdWNoTW92ZScsICd3YWl0aW5nJywgJ3doZWVsJ107XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyU2ltcGxlRXZlbnQoZG9tRXZlbnROYW1lLCByZWFjdE5hbWUpIHtcbiAgdG9wTGV2ZWxFdmVudHNUb1JlYWN0TmFtZXMuc2V0KGRvbUV2ZW50TmFtZSwgcmVhY3ROYW1lKTtcbiAgcmVnaXN0ZXJUd29QaGFzZUV2ZW50KHJlYWN0TmFtZSwgW2RvbUV2ZW50TmFtZV0pO1xufVxuXG5mdW5jdGlvbiByZWdpc3RlclNpbXBsZUV2ZW50cygpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaW1wbGVFdmVudFBsdWdpbkV2ZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBldmVudE5hbWUgPSBzaW1wbGVFdmVudFBsdWdpbkV2ZW50c1tpXTtcbiAgICB2YXIgZG9tRXZlbnROYW1lID0gZXZlbnROYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFyIGNhcGl0YWxpemVkRXZlbnQgPSBldmVudE5hbWVbMF0udG9VcHBlckNhc2UoKSArIGV2ZW50TmFtZS5zbGljZSgxKTtcbiAgICByZWdpc3RlclNpbXBsZUV2ZW50KGRvbUV2ZW50TmFtZSwgJ29uJyArIGNhcGl0YWxpemVkRXZlbnQpO1xuICB9IC8vIFNwZWNpYWwgY2FzZXMgd2hlcmUgZXZlbnQgbmFtZXMgZG9uJ3QgbWF0Y2guXG5cblxuICByZWdpc3RlclNpbXBsZUV2ZW50KEFOSU1BVElPTl9FTkQsICdvbkFuaW1hdGlvbkVuZCcpO1xuICByZWdpc3RlclNpbXBsZUV2ZW50KEFOSU1BVElPTl9JVEVSQVRJT04sICdvbkFuaW1hdGlvbkl0ZXJhdGlvbicpO1xuICByZWdpc3RlclNpbXBsZUV2ZW50KEFOSU1BVElPTl9TVEFSVCwgJ29uQW5pbWF0aW9uU3RhcnQnKTtcbiAgcmVnaXN0ZXJTaW1wbGVFdmVudCgnZGJsY2xpY2snLCAnb25Eb3VibGVDbGljaycpO1xuICByZWdpc3RlclNpbXBsZUV2ZW50KCdmb2N1c2luJywgJ29uRm9jdXMnKTtcbiAgcmVnaXN0ZXJTaW1wbGVFdmVudCgnZm9jdXNvdXQnLCAnb25CbHVyJyk7XG4gIHJlZ2lzdGVyU2ltcGxlRXZlbnQoVFJBTlNJVElPTl9FTkQsICdvblRyYW5zaXRpb25FbmQnKTtcbn1cblxuZnVuY3Rpb24gZXh0cmFjdEV2ZW50cyQ0KGRpc3BhdGNoUXVldWUsIGRvbUV2ZW50TmFtZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0LCBldmVudFN5c3RlbUZsYWdzLCB0YXJnZXRDb250YWluZXIpIHtcbiAgdmFyIHJlYWN0TmFtZSA9IHRvcExldmVsRXZlbnRzVG9SZWFjdE5hbWVzLmdldChkb21FdmVudE5hbWUpO1xuXG4gIGlmIChyZWFjdE5hbWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNFdmVudDtcbiAgdmFyIHJlYWN0RXZlbnRUeXBlID0gZG9tRXZlbnROYW1lO1xuXG4gIHN3aXRjaCAoZG9tRXZlbnROYW1lKSB7XG4gICAgY2FzZSAna2V5cHJlc3MnOlxuICAgICAgLy8gRmlyZWZveCBjcmVhdGVzIGEga2V5cHJlc3MgZXZlbnQgZm9yIGZ1bmN0aW9uIGtleXMgdG9vLiBUaGlzIHJlbW92ZXNcbiAgICAgIC8vIHRoZSB1bndhbnRlZCBrZXlwcmVzcyBldmVudHMuIEVudGVyIGlzIGhvd2V2ZXIgYm90aCBwcmludGFibGUgYW5kXG4gICAgICAvLyBub24tcHJpbnRhYmxlLiBPbmUgd291bGQgZXhwZWN0IFRhYiB0byBiZSBhcyB3ZWxsIChidXQgaXQgaXNuJ3QpLlxuICAgICAgaWYgKGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cblxuICAgIGNhc2UgJ2tleWRvd24nOlxuICAgIGNhc2UgJ2tleXVwJzpcbiAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0tleWJvYXJkRXZlbnQ7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2ZvY3VzaW4nOlxuICAgICAgcmVhY3RFdmVudFR5cGUgPSAnZm9jdXMnO1xuICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnZm9jdXNvdXQnOlxuICAgICAgcmVhY3RFdmVudFR5cGUgPSAnYmx1cic7XG4gICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNGb2N1c0V2ZW50O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdiZWZvcmVibHVyJzpcbiAgICBjYXNlICdhZnRlcmJsdXInOlxuICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljRm9jdXNFdmVudDtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnY2xpY2snOlxuICAgICAgLy8gRmlyZWZveCBjcmVhdGVzIGEgY2xpY2sgZXZlbnQgb24gcmlnaHQgbW91c2UgY2xpY2tzLiBUaGlzIHJlbW92ZXMgdGhlXG4gICAgICAvLyB1bndhbnRlZCBjbGljayBldmVudHMuXG4gICAgICBpZiAobmF0aXZlRXZlbnQuYnV0dG9uID09PSAyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cblxuICAgIGNhc2UgJ2F1eGNsaWNrJzpcbiAgICBjYXNlICdkYmxjbGljayc6XG4gICAgY2FzZSAnbW91c2Vkb3duJzpcbiAgICBjYXNlICdtb3VzZW1vdmUnOlxuICAgIGNhc2UgJ21vdXNldXAnOiAvLyBUT0RPOiBEaXNhYmxlZCBlbGVtZW50cyBzaG91bGQgbm90IHJlc3BvbmQgdG8gbW91c2UgZXZlbnRzXG5cbiAgICAvKiBmYWxscyB0aHJvdWdoICovXG5cbiAgICBjYXNlICdtb3VzZW91dCc6XG4gICAgY2FzZSAnbW91c2VvdmVyJzpcbiAgICBjYXNlICdjb250ZXh0bWVudSc6XG4gICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNNb3VzZUV2ZW50O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdkcmFnJzpcbiAgICBjYXNlICdkcmFnZW5kJzpcbiAgICBjYXNlICdkcmFnZW50ZXInOlxuICAgIGNhc2UgJ2RyYWdleGl0JzpcbiAgICBjYXNlICdkcmFnbGVhdmUnOlxuICAgIGNhc2UgJ2RyYWdvdmVyJzpcbiAgICBjYXNlICdkcmFnc3RhcnQnOlxuICAgIGNhc2UgJ2Ryb3AnOlxuICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljRHJhZ0V2ZW50O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0b3VjaGNhbmNlbCc6XG4gICAgY2FzZSAndG91Y2hlbmQnOlxuICAgIGNhc2UgJ3RvdWNobW92ZSc6XG4gICAgY2FzZSAndG91Y2hzdGFydCc6XG4gICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNUb3VjaEV2ZW50O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIEFOSU1BVElPTl9FTkQ6XG4gICAgY2FzZSBBTklNQVRJT05fSVRFUkFUSU9OOlxuICAgIGNhc2UgQU5JTUFUSU9OX1NUQVJUOlxuICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljQW5pbWF0aW9uRXZlbnQ7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgVFJBTlNJVElPTl9FTkQ6XG4gICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQ7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3Njcm9sbCc6XG4gICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNVSUV2ZW50O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd3aGVlbCc6XG4gICAgICBTeW50aGV0aWNFdmVudEN0b3IgPSBTeW50aGV0aWNXaGVlbEV2ZW50O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdjb3B5JzpcbiAgICBjYXNlICdjdXQnOlxuICAgIGNhc2UgJ3Bhc3RlJzpcbiAgICAgIFN5bnRoZXRpY0V2ZW50Q3RvciA9IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdnb3Rwb2ludGVyY2FwdHVyZSc6XG4gICAgY2FzZSAnbG9zdHBvaW50ZXJjYXB0dXJlJzpcbiAgICBjYXNlICdwb2ludGVyY2FuY2VsJzpcbiAgICBjYXNlICdwb2ludGVyZG93bic6XG4gICAgY2FzZSAncG9pbnRlcm1vdmUnOlxuICAgIGNhc2UgJ3BvaW50ZXJvdXQnOlxuICAgIGNhc2UgJ3BvaW50ZXJvdmVyJzpcbiAgICBjYXNlICdwb2ludGVydXAnOlxuICAgICAgU3ludGhldGljRXZlbnRDdG9yID0gU3ludGhldGljUG9pbnRlckV2ZW50O1xuICAgICAgYnJlYWs7XG4gIH1cblxuICB2YXIgaW5DYXB0dXJlUGhhc2UgPSAoZXZlbnRTeXN0ZW1GbGFncyAmIElTX0NBUFRVUkVfUEhBU0UpICE9PSAwO1xuXG4gIHtcbiAgICAvLyBTb21lIGV2ZW50cyBkb24ndCBidWJibGUgaW4gdGhlIGJyb3dzZXIuXG4gICAgLy8gSW4gdGhlIHBhc3QsIFJlYWN0IGhhcyBhbHdheXMgYnViYmxlZCB0aGVtLCBidXQgdGhpcyBjYW4gYmUgc3VycHJpc2luZy5cbiAgICAvLyBXZSdyZSBnb2luZyB0byB0cnkgYWxpZ25pbmcgY2xvc2VyIHRvIHRoZSBicm93c2VyIGJlaGF2aW9yIGJ5IG5vdCBidWJibGluZ1xuICAgIC8vIHRoZW0gaW4gUmVhY3QgZWl0aGVyLiBXZSdsbCBzdGFydCBieSBub3QgYnViYmxpbmcgb25TY3JvbGwsIGFuZCB0aGVuIGV4cGFuZC5cbiAgICB2YXIgYWNjdW11bGF0ZVRhcmdldE9ubHkgPSAhaW5DYXB0dXJlUGhhc2UgJiYgLy8gVE9ETzogaWRlYWxseSwgd2UnZCBldmVudHVhbGx5IGFkZCBhbGwgZXZlbnRzIGZyb21cbiAgICAvLyBub25EZWxlZ2F0ZWRFdmVudHMgbGlzdCBpbiBET01QbHVnaW5FdmVudFN5c3RlbS5cbiAgICAvLyBUaGVuIHdlIGNhbiByZW1vdmUgdGhpcyBzcGVjaWFsIGxpc3QuXG4gICAgLy8gVGhpcyBpcyBhIGJyZWFraW5nIGNoYW5nZSB0aGF0IGNhbiB3YWl0IHVudGlsIFJlYWN0IDE4LlxuICAgIGRvbUV2ZW50TmFtZSA9PT0gJ3Njcm9sbCc7XG5cbiAgICB2YXIgX2xpc3RlbmVycyA9IGFjY3VtdWxhdGVTaW5nbGVQaGFzZUxpc3RlbmVycyh0YXJnZXRJbnN0LCByZWFjdE5hbWUsIG5hdGl2ZUV2ZW50LnR5cGUsIGluQ2FwdHVyZVBoYXNlLCBhY2N1bXVsYXRlVGFyZ2V0T25seSk7XG5cbiAgICBpZiAoX2xpc3RlbmVycy5sZW5ndGggPiAwKSB7XG4gICAgICAvLyBJbnRlbnRpb25hbGx5IGNyZWF0ZSBldmVudCBsYXppbHkuXG4gICAgICB2YXIgX2V2ZW50ID0gbmV3IFN5bnRoZXRpY0V2ZW50Q3RvcihyZWFjdE5hbWUsIHJlYWN0RXZlbnRUeXBlLCBudWxsLCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuXG4gICAgICBkaXNwYXRjaFF1ZXVlLnB1c2goe1xuICAgICAgICBldmVudDogX2V2ZW50LFxuICAgICAgICBsaXN0ZW5lcnM6IF9saXN0ZW5lcnNcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG4vLyBUT0RPOiByZW1vdmUgdG9wLWxldmVsIHNpZGUgZWZmZWN0LlxucmVnaXN0ZXJTaW1wbGVFdmVudHMoKTtcbnJlZ2lzdGVyRXZlbnRzJDIoKTtcbnJlZ2lzdGVyRXZlbnRzJDEoKTtcbnJlZ2lzdGVyRXZlbnRzJDMoKTtcbnJlZ2lzdGVyRXZlbnRzKCk7XG5cbmZ1bmN0aW9uIGV4dHJhY3RFdmVudHMkNShkaXNwYXRjaFF1ZXVlLCBkb21FdmVudE5hbWUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCwgZXZlbnRTeXN0ZW1GbGFncywgdGFyZ2V0Q29udGFpbmVyKSB7XG4gIC8vIFRPRE86IHdlIHNob3VsZCByZW1vdmUgdGhlIGNvbmNlcHQgb2YgYSBcIlNpbXBsZUV2ZW50UGx1Z2luXCIuXG4gIC8vIFRoaXMgaXMgdGhlIGJhc2ljIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIGV2ZW50IHN5c3RlbS4gQWxsXG4gIC8vIHRoZSBvdGhlciBwbHVnaW5zIGFyZSBlc3NlbnRpYWxseSBwb2x5ZmlsbHMuIFNvIHRoZSBwbHVnaW5cbiAgLy8gc2hvdWxkIHByb2JhYmx5IGJlIGlubGluZWQgc29tZXdoZXJlIGFuZCBoYXZlIGl0cyBsb2dpY1xuICAvLyBiZSBjb3JlIHRoZSB0byBldmVudCBzeXN0ZW0uIFRoaXMgd291bGQgcG90ZW50aWFsbHkgYWxsb3dcbiAgLy8gdXMgdG8gc2hpcCBidWlsZHMgb2YgUmVhY3Qgd2l0aG91dCB0aGUgcG9seWZpbGxlZCBwbHVnaW5zIGJlbG93LlxuICBleHRyYWN0RXZlbnRzJDQoZGlzcGF0Y2hRdWV1ZSwgZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQsIGV2ZW50U3lzdGVtRmxhZ3MpO1xuICB2YXIgc2hvdWxkUHJvY2Vzc1BvbHlmaWxsUGx1Z2lucyA9IChldmVudFN5c3RlbUZsYWdzICYgU0hPVUxEX05PVF9QUk9DRVNTX1BPTFlGSUxMX0VWRU5UX1BMVUdJTlMpID09PSAwOyAvLyBXZSBkb24ndCBwcm9jZXNzIHRoZXNlIGV2ZW50cyB1bmxlc3Mgd2UgYXJlIGluIHRoZVxuICAvLyBldmVudCdzIG5hdGl2ZSBcImJ1YmJsZVwiIHBoYXNlLCB3aGljaCBtZWFucyB0aGF0IHdlJ3JlXG4gIC8vIG5vdCBpbiB0aGUgY2FwdHVyZSBwaGFzZS4gVGhhdCdzIGJlY2F1c2Ugd2UgZW11bGF0ZVxuICAvLyB0aGUgY2FwdHVyZSBwaGFzZSBoZXJlIHN0aWxsLiBUaGlzIGlzIGEgdHJhZGUtb2ZmLFxuICAvLyBiZWNhdXNlIGluIGFuIGlkZWFsIHdvcmxkIHdlIHdvdWxkIG5vdCBlbXVsYXRlIGFuZCB1c2VcbiAgLy8gdGhlIHBoYXNlcyBwcm9wZXJseSwgbGlrZSB3ZSBkbyB3aXRoIHRoZSBTaW1wbGVFdmVudFxuICAvLyBwbHVnaW4uIEhvd2V2ZXIsIHRoZSBwbHVnaW5zIGJlbG93IGVpdGhlciBleHBlY3RcbiAgLy8gZW11bGF0aW9uIChFbnRlckxlYXZlKSBvciB1c2Ugc3RhdGUgbG9jYWxpemVkIHRvIHRoYXRcbiAgLy8gcGx1Z2luIChCZWZvcmVJbnB1dCwgQ2hhbmdlLCBTZWxlY3QpLiBUaGUgc3RhdGUgaW5cbiAgLy8gdGhlc2UgbW9kdWxlcyBjb21wbGljYXRlcyB0aGluZ3MsIGFzIHlvdSdsbCBlc3NlbnRpYWxseVxuICAvLyBnZXQgdGhlIGNhc2Ugd2hlcmUgdGhlIGNhcHR1cmUgcGhhc2UgZXZlbnQgbWlnaHQgY2hhbmdlXG4gIC8vIHN0YXRlLCBvbmx5IGZvciB0aGUgZm9sbG93aW5nIGJ1YmJsZSBldmVudCB0byBjb21lIGluXG4gIC8vIGxhdGVyIGFuZCBub3QgdHJpZ2dlciBhbnl0aGluZyBhcyB0aGUgc3RhdGUgbm93XG4gIC8vIGludmFsaWRhdGVzIHRoZSBoZXVyaXN0aWNzIG9mIHRoZSBldmVudCBwbHVnaW4uIFdlXG4gIC8vIGNvdWxkIGFsdGVyIGFsbCB0aGVzZSBwbHVnaW5zIHRvIHdvcmsgaW4gc3VjaCB3YXlzLCBidXRcbiAgLy8gdGhhdCBtaWdodCBjYXVzZSBvdGhlciB1bmtub3duIHNpZGUtZWZmZWN0cyB0aGF0IHdlXG4gIC8vIGNhbid0IGZvcmVzZWUgcmlnaHQgbm93LlxuXG4gIGlmIChzaG91bGRQcm9jZXNzUG9seWZpbGxQbHVnaW5zKSB7XG4gICAgZXh0cmFjdEV2ZW50cyQyKGRpc3BhdGNoUXVldWUsIGRvbUV2ZW50TmFtZSwgdGFyZ2V0SW5zdCwgbmF0aXZlRXZlbnQsIG5hdGl2ZUV2ZW50VGFyZ2V0KTtcbiAgICBleHRyYWN0RXZlbnRzJDEoZGlzcGF0Y2hRdWV1ZSwgZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgIGV4dHJhY3RFdmVudHMkMyhkaXNwYXRjaFF1ZXVlLCBkb21FdmVudE5hbWUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgZXh0cmFjdEV2ZW50cyhkaXNwYXRjaFF1ZXVlLCBkb21FdmVudE5hbWUsIHRhcmdldEluc3QsIG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gIH1cbn0gLy8gTGlzdCBvZiBldmVudHMgdGhhdCBuZWVkIHRvIGJlIGluZGl2aWR1YWxseSBhdHRhY2hlZCB0byBtZWRpYSBlbGVtZW50cy5cblxuXG52YXIgbWVkaWFFdmVudFR5cGVzID0gWydhYm9ydCcsICdjYW5wbGF5JywgJ2NhbnBsYXl0aHJvdWdoJywgJ2R1cmF0aW9uY2hhbmdlJywgJ2VtcHRpZWQnLCAnZW5jcnlwdGVkJywgJ2VuZGVkJywgJ2Vycm9yJywgJ2xvYWRlZGRhdGEnLCAnbG9hZGVkbWV0YWRhdGEnLCAnbG9hZHN0YXJ0JywgJ3BhdXNlJywgJ3BsYXknLCAncGxheWluZycsICdwcm9ncmVzcycsICdyYXRlY2hhbmdlJywgJ3Jlc2l6ZScsICdzZWVrZWQnLCAnc2Vla2luZycsICdzdGFsbGVkJywgJ3N1c3BlbmQnLCAndGltZXVwZGF0ZScsICd2b2x1bWVjaGFuZ2UnLCAnd2FpdGluZyddOyAvLyBXZSBzaG91bGQgbm90IGRlbGVnYXRlIHRoZXNlIGV2ZW50cyB0byB0aGUgY29udGFpbmVyLCBidXQgcmF0aGVyXG4vLyBzZXQgdGhlbSBvbiB0aGUgYWN0dWFsIHRhcmdldCBlbGVtZW50IGl0c2VsZi4gVGhpcyBpcyBwcmltYXJpbHlcbi8vIGJlY2F1c2UgdGhlc2UgZXZlbnRzIGRvIG5vdCBjb25zaXN0ZW50bHkgYnViYmxlIGluIHRoZSBET00uXG5cbnZhciBub25EZWxlZ2F0ZWRFdmVudHMgPSBuZXcgU2V0KFsnY2FuY2VsJywgJ2Nsb3NlJywgJ2ludmFsaWQnLCAnbG9hZCcsICdzY3JvbGwnLCAndG9nZ2xlJ10uY29uY2F0KG1lZGlhRXZlbnRUeXBlcykpO1xuXG5mdW5jdGlvbiBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIGxpc3RlbmVyLCBjdXJyZW50VGFyZ2V0KSB7XG4gIHZhciB0eXBlID0gZXZlbnQudHlwZSB8fCAndW5rbm93bi1ldmVudCc7XG4gIGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBjdXJyZW50VGFyZ2V0O1xuICBpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IodHlwZSwgbGlzdGVuZXIsIHVuZGVmaW5lZCwgZXZlbnQpO1xuICBldmVudC5jdXJyZW50VGFyZ2V0ID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0Rpc3BhdGNoUXVldWVJdGVtc0luT3JkZXIoZXZlbnQsIGRpc3BhdGNoTGlzdGVuZXJzLCBpbkNhcHR1cmVQaGFzZSkge1xuICB2YXIgcHJldmlvdXNJbnN0YW5jZTtcblxuICBpZiAoaW5DYXB0dXJlUGhhc2UpIHtcbiAgICBmb3IgKHZhciBpID0gZGlzcGF0Y2hMaXN0ZW5lcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBfZGlzcGF0Y2hMaXN0ZW5lcnMkaSA9IGRpc3BhdGNoTGlzdGVuZXJzW2ldLFxuICAgICAgICAgIGluc3RhbmNlID0gX2Rpc3BhdGNoTGlzdGVuZXJzJGkuaW5zdGFuY2UsXG4gICAgICAgICAgY3VycmVudFRhcmdldCA9IF9kaXNwYXRjaExpc3RlbmVycyRpLmN1cnJlbnRUYXJnZXQsXG4gICAgICAgICAgbGlzdGVuZXIgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkaS5saXN0ZW5lcjtcblxuICAgICAgaWYgKGluc3RhbmNlICE9PSBwcmV2aW91c0luc3RhbmNlICYmIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBleGVjdXRlRGlzcGF0Y2goZXZlbnQsIGxpc3RlbmVyLCBjdXJyZW50VGFyZ2V0KTtcbiAgICAgIHByZXZpb3VzSW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGRpc3BhdGNoTGlzdGVuZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9kaXNwYXRjaExpc3RlbmVycyRfaSA9IGRpc3BhdGNoTGlzdGVuZXJzW19pXSxcbiAgICAgICAgICBfaW5zdGFuY2UgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkX2kuaW5zdGFuY2UsXG4gICAgICAgICAgX2N1cnJlbnRUYXJnZXQgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkX2kuY3VycmVudFRhcmdldCxcbiAgICAgICAgICBfbGlzdGVuZXIgPSBfZGlzcGF0Y2hMaXN0ZW5lcnMkX2kubGlzdGVuZXI7XG5cbiAgICAgIGlmIChfaW5zdGFuY2UgIT09IHByZXZpb3VzSW5zdGFuY2UgJiYgZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGV4ZWN1dGVEaXNwYXRjaChldmVudCwgX2xpc3RlbmVyLCBfY3VycmVudFRhcmdldCk7XG4gICAgICBwcmV2aW91c0luc3RhbmNlID0gX2luc3RhbmNlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRGlzcGF0Y2hRdWV1ZShkaXNwYXRjaFF1ZXVlLCBldmVudFN5c3RlbUZsYWdzKSB7XG4gIHZhciBpbkNhcHR1cmVQaGFzZSA9IChldmVudFN5c3RlbUZsYWdzICYgSVNfQ0FQVFVSRV9QSEFTRSkgIT09IDA7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaXNwYXRjaFF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIF9kaXNwYXRjaFF1ZXVlJGkgPSBkaXNwYXRjaFF1ZXVlW2ldLFxuICAgICAgICBldmVudCA9IF9kaXNwYXRjaFF1ZXVlJGkuZXZlbnQsXG4gICAgICAgIGxpc3RlbmVycyA9IF9kaXNwYXRjaFF1ZXVlJGkubGlzdGVuZXJzO1xuICAgIHByb2Nlc3NEaXNwYXRjaFF1ZXVlSXRlbXNJbk9yZGVyKGV2ZW50LCBsaXN0ZW5lcnMsIGluQ2FwdHVyZVBoYXNlKTsgLy8gIGV2ZW50IHN5c3RlbSBkb2Vzbid0IHVzZSBwb29saW5nLlxuICB9IC8vIFRoaXMgd291bGQgYmUgYSBnb29kIHRpbWUgdG8gcmV0aHJvdyBpZiBhbnkgb2YgdGhlIGV2ZW50IGhhbmRsZXJzIHRocmV3LlxuXG5cbiAgcmV0aHJvd0NhdWdodEVycm9yKCk7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoRXZlbnRzRm9yUGx1Z2lucyhkb21FdmVudE5hbWUsIGV2ZW50U3lzdGVtRmxhZ3MsIG5hdGl2ZUV2ZW50LCB0YXJnZXRJbnN0LCB0YXJnZXRDb250YWluZXIpIHtcbiAgdmFyIG5hdGl2ZUV2ZW50VGFyZ2V0ID0gZ2V0RXZlbnRUYXJnZXQobmF0aXZlRXZlbnQpO1xuICB2YXIgZGlzcGF0Y2hRdWV1ZSA9IFtdO1xuICBleHRyYWN0RXZlbnRzJDUoZGlzcGF0Y2hRdWV1ZSwgZG9tRXZlbnROYW1lLCB0YXJnZXRJbnN0LCBuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQsIGV2ZW50U3lzdGVtRmxhZ3MpO1xuICBwcm9jZXNzRGlzcGF0Y2hRdWV1ZShkaXNwYXRjaFF1ZXVlLCBldmVudFN5c3RlbUZsYWdzKTtcbn1cblxuZnVuY3Rpb24gbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChkb21FdmVudE5hbWUsIHRhcmdldEVsZW1lbnQpIHtcbiAge1xuICAgIGlmICghbm9uRGVsZWdhdGVkRXZlbnRzLmhhcyhkb21FdmVudE5hbWUpKSB7XG4gICAgICBlcnJvcignRGlkIG5vdCBleHBlY3QgYSBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KCkgY2FsbCBmb3IgXCIlc1wiLiAnICsgJ1RoaXMgaXMgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicsIGRvbUV2ZW50TmFtZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXIgPSBmYWxzZTtcbiAgdmFyIGxpc3RlbmVyU2V0ID0gZ2V0RXZlbnRMaXN0ZW5lclNldCh0YXJnZXRFbGVtZW50KTtcbiAgdmFyIGxpc3RlbmVyU2V0S2V5ID0gZ2V0TGlzdGVuZXJTZXRLZXkoZG9tRXZlbnROYW1lLCBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyKTtcblxuICBpZiAoIWxpc3RlbmVyU2V0LmhhcyhsaXN0ZW5lclNldEtleSkpIHtcbiAgICBhZGRUcmFwcGVkRXZlbnRMaXN0ZW5lcih0YXJnZXRFbGVtZW50LCBkb21FdmVudE5hbWUsIElTX05PTl9ERUxFR0FURUQsIGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXIpO1xuICAgIGxpc3RlbmVyU2V0LmFkZChsaXN0ZW5lclNldEtleSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGxpc3RlblRvTmF0aXZlRXZlbnQoZG9tRXZlbnROYW1lLCBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyLCB0YXJnZXQpIHtcbiAge1xuICAgIGlmIChub25EZWxlZ2F0ZWRFdmVudHMuaGFzKGRvbUV2ZW50TmFtZSkgJiYgIWlzQ2FwdHVyZVBoYXNlTGlzdGVuZXIpIHtcbiAgICAgIGVycm9yKCdEaWQgbm90IGV4cGVjdCBhIGxpc3RlblRvTmF0aXZlRXZlbnQoKSBjYWxsIGZvciBcIiVzXCIgaW4gdGhlIGJ1YmJsZSBwaGFzZS4gJyArICdUaGlzIGlzIGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nLCBkb21FdmVudE5hbWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBldmVudFN5c3RlbUZsYWdzID0gMDtcblxuICBpZiAoaXNDYXB0dXJlUGhhc2VMaXN0ZW5lcikge1xuICAgIGV2ZW50U3lzdGVtRmxhZ3MgfD0gSVNfQ0FQVFVSRV9QSEFTRTtcbiAgfVxuXG4gIGFkZFRyYXBwZWRFdmVudExpc3RlbmVyKHRhcmdldCwgZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCBpc0NhcHR1cmVQaGFzZUxpc3RlbmVyKTtcbn0gLy8gVGhpcyBpcyBvbmx5IHVzZWQgYnkgY3JlYXRlRXZlbnRIYW5kbGUgd2hlbiB0aGVcbnZhciBsaXN0ZW5pbmdNYXJrZXIgPSAnX3JlYWN0TGlzdGVuaW5nJyArIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO1xuZnVuY3Rpb24gbGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMocm9vdENvbnRhaW5lckVsZW1lbnQpIHtcbiAgaWYgKCFyb290Q29udGFpbmVyRWxlbWVudFtsaXN0ZW5pbmdNYXJrZXJdKSB7XG4gICAgcm9vdENvbnRhaW5lckVsZW1lbnRbbGlzdGVuaW5nTWFya2VyXSA9IHRydWU7XG4gICAgYWxsTmF0aXZlRXZlbnRzLmZvckVhY2goZnVuY3Rpb24gKGRvbUV2ZW50TmFtZSkge1xuICAgICAgLy8gV2UgaGFuZGxlIHNlbGVjdGlvbmNoYW5nZSBzZXBhcmF0ZWx5IGJlY2F1c2UgaXRcbiAgICAgIC8vIGRvZXNuJ3QgYnViYmxlIGFuZCBuZWVkcyB0byBiZSBvbiB0aGUgZG9jdW1lbnQuXG4gICAgICBpZiAoZG9tRXZlbnROYW1lICE9PSAnc2VsZWN0aW9uY2hhbmdlJykge1xuICAgICAgICBpZiAoIW5vbkRlbGVnYXRlZEV2ZW50cy5oYXMoZG9tRXZlbnROYW1lKSkge1xuICAgICAgICAgIGxpc3RlblRvTmF0aXZlRXZlbnQoZG9tRXZlbnROYW1lLCBmYWxzZSwgcm9vdENvbnRhaW5lckVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdGVuVG9OYXRpdmVFdmVudChkb21FdmVudE5hbWUsIHRydWUsIHJvb3RDb250YWluZXJFbGVtZW50KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IHJvb3RDb250YWluZXJFbGVtZW50Lm5vZGVUeXBlID09PSBET0NVTUVOVF9OT0RFID8gcm9vdENvbnRhaW5lckVsZW1lbnQgOiByb290Q29udGFpbmVyRWxlbWVudC5vd25lckRvY3VtZW50O1xuXG4gICAgaWYgKG93bmVyRG9jdW1lbnQgIT09IG51bGwpIHtcbiAgICAgIC8vIFRoZSBzZWxlY3Rpb25jaGFuZ2UgZXZlbnQgYWxzbyBuZWVkcyBkZWR1cGxpY2F0aW9uXG4gICAgICAvLyBidXQgaXQgaXMgYXR0YWNoZWQgdG8gdGhlIGRvY3VtZW50LlxuICAgICAgaWYgKCFvd25lckRvY3VtZW50W2xpc3RlbmluZ01hcmtlcl0pIHtcbiAgICAgICAgb3duZXJEb2N1bWVudFtsaXN0ZW5pbmdNYXJrZXJdID0gdHJ1ZTtcbiAgICAgICAgbGlzdGVuVG9OYXRpdmVFdmVudCgnc2VsZWN0aW9uY2hhbmdlJywgZmFsc2UsIG93bmVyRG9jdW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBhZGRUcmFwcGVkRXZlbnRMaXN0ZW5lcih0YXJnZXRDb250YWluZXIsIGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgaXNDYXB0dXJlUGhhc2VMaXN0ZW5lciwgaXNEZWZlcnJlZExpc3RlbmVyRm9yTGVnYWN5RkJTdXBwb3J0KSB7XG4gIHZhciBsaXN0ZW5lciA9IGNyZWF0ZUV2ZW50TGlzdGVuZXJXcmFwcGVyV2l0aFByaW9yaXR5KHRhcmdldENvbnRhaW5lciwgZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzKTsgLy8gSWYgcGFzc2l2ZSBvcHRpb24gaXMgbm90IHN1cHBvcnRlZCwgdGhlbiB0aGUgZXZlbnQgd2lsbCBiZVxuICAvLyBhY3RpdmUgYW5kIG5vdCBwYXNzaXZlLlxuXG4gIHZhciBpc1Bhc3NpdmVMaXN0ZW5lciA9IHVuZGVmaW5lZDtcblxuICBpZiAocGFzc2l2ZUJyb3dzZXJFdmVudHNTdXBwb3J0ZWQpIHtcbiAgICAvLyBCcm93c2VycyBpbnRyb2R1Y2VkIGFuIGludGVydmVudGlvbiwgbWFraW5nIHRoZXNlIGV2ZW50c1xuICAgIC8vIHBhc3NpdmUgYnkgZGVmYXVsdCBvbiBkb2N1bWVudC4gUmVhY3QgZG9lc24ndCBiaW5kIHRoZW1cbiAgICAvLyB0byBkb2N1bWVudCBhbnltb3JlLCBidXQgY2hhbmdpbmcgdGhpcyBub3cgd291bGQgdW5kb1xuICAgIC8vIHRoZSBwZXJmb3JtYW5jZSB3aW5zIGZyb20gdGhlIGNoYW5nZS4gU28gd2UgZW11bGF0ZVxuICAgIC8vIHRoZSBleGlzdGluZyBiZWhhdmlvciBtYW51YWxseSBvbiB0aGUgcm9vdHMgbm93LlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTk2NTFcbiAgICBpZiAoZG9tRXZlbnROYW1lID09PSAndG91Y2hzdGFydCcgfHwgZG9tRXZlbnROYW1lID09PSAndG91Y2htb3ZlJyB8fCBkb21FdmVudE5hbWUgPT09ICd3aGVlbCcpIHtcbiAgICAgIGlzUGFzc2l2ZUxpc3RlbmVyID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICB0YXJnZXRDb250YWluZXIgPSAgdGFyZ2V0Q29udGFpbmVyO1xuICB2YXIgdW5zdWJzY3JpYmVMaXN0ZW5lcjsgLy8gV2hlbiBsZWdhY3lGQlN1cHBvcnQgaXMgZW5hYmxlZCwgaXQncyBmb3Igd2hlbiB3ZVxuXG5cbiAgaWYgKGlzQ2FwdHVyZVBoYXNlTGlzdGVuZXIpIHtcbiAgICBpZiAoaXNQYXNzaXZlTGlzdGVuZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdW5zdWJzY3JpYmVMaXN0ZW5lciA9IGFkZEV2ZW50Q2FwdHVyZUxpc3RlbmVyV2l0aFBhc3NpdmVGbGFnKHRhcmdldENvbnRhaW5lciwgZG9tRXZlbnROYW1lLCBsaXN0ZW5lciwgaXNQYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bnN1YnNjcmliZUxpc3RlbmVyID0gYWRkRXZlbnRDYXB0dXJlTGlzdGVuZXIodGFyZ2V0Q29udGFpbmVyLCBkb21FdmVudE5hbWUsIGxpc3RlbmVyKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzUGFzc2l2ZUxpc3RlbmVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHVuc3Vic2NyaWJlTGlzdGVuZXIgPSBhZGRFdmVudEJ1YmJsZUxpc3RlbmVyV2l0aFBhc3NpdmVGbGFnKHRhcmdldENvbnRhaW5lciwgZG9tRXZlbnROYW1lLCBsaXN0ZW5lciwgaXNQYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB1bnN1YnNjcmliZUxpc3RlbmVyID0gYWRkRXZlbnRCdWJibGVMaXN0ZW5lcih0YXJnZXRDb250YWluZXIsIGRvbUV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc01hdGNoaW5nUm9vdENvbnRhaW5lcihncmFuZENvbnRhaW5lciwgdGFyZ2V0Q29udGFpbmVyKSB7XG4gIHJldHVybiBncmFuZENvbnRhaW5lciA9PT0gdGFyZ2V0Q29udGFpbmVyIHx8IGdyYW5kQ29udGFpbmVyLm5vZGVUeXBlID09PSBDT01NRU5UX05PREUgJiYgZ3JhbmRDb250YWluZXIucGFyZW50Tm9kZSA9PT0gdGFyZ2V0Q29udGFpbmVyO1xufVxuXG5mdW5jdGlvbiBkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0oZG9tRXZlbnROYW1lLCBldmVudFN5c3RlbUZsYWdzLCBuYXRpdmVFdmVudCwgdGFyZ2V0SW5zdCwgdGFyZ2V0Q29udGFpbmVyKSB7XG4gIHZhciBhbmNlc3Rvckluc3QgPSB0YXJnZXRJbnN0O1xuXG4gIGlmICgoZXZlbnRTeXN0ZW1GbGFncyAmIElTX0VWRU5UX0hBTkRMRV9OT05fTUFOQUdFRF9OT0RFKSA9PT0gMCAmJiAoZXZlbnRTeXN0ZW1GbGFncyAmIElTX05PTl9ERUxFR0FURUQpID09PSAwKSB7XG4gICAgdmFyIHRhcmdldENvbnRhaW5lck5vZGUgPSB0YXJnZXRDb250YWluZXI7IC8vIElmIHdlIGFyZSB1c2luZyB0aGUgbGVnYWN5IEZCIHN1cHBvcnQgZmxhZywgd2VcblxuICAgIGlmICh0YXJnZXRJbnN0ICE9PSBudWxsKSB7XG4gICAgICAvLyBUaGUgYmVsb3cgbG9naWMgYXR0ZW1wdHMgdG8gd29yayBvdXQgaWYgd2UgbmVlZCB0byBjaGFuZ2VcbiAgICAgIC8vIHRoZSB0YXJnZXQgZmliZXIgdG8gYSBkaWZmZXJlbnQgYW5jZXN0b3IuIFdlIGhhZCBzaW1pbGFyIGxvZ2ljXG4gICAgICAvLyBpbiB0aGUgbGVnYWN5IGV2ZW50IHN5c3RlbSwgZXhjZXB0IHRoZSBiaWcgZGlmZmVyZW5jZSBiZXR3ZWVuXG4gICAgICAvLyBzeXN0ZW1zIGlzIHRoYXQgdGhlIG1vZGVybiBldmVudCBzeXN0ZW0gbm93IGhhcyBhbiBldmVudCBsaXN0ZW5lclxuICAgICAgLy8gYXR0YWNoZWQgdG8gZWFjaCBSZWFjdCBSb290IGFuZCBSZWFjdCBQb3J0YWwgUm9vdC4gVG9nZXRoZXIsXG4gICAgICAvLyB0aGUgRE9NIG5vZGVzIHJlcHJlc2VudGluZyB0aGVzZSByb290cyBhcmUgdGhlIFwicm9vdENvbnRhaW5lclwiLlxuICAgICAgLy8gVG8gZmlndXJlIG91dCB3aGljaCBhbmNlc3RvciBpbnN0YW5jZSB3ZSBzaG91bGQgdXNlLCB3ZSB0cmF2ZXJzZVxuICAgICAgLy8gdXAgdGhlIGZpYmVyIHRyZWUgZnJvbSB0aGUgdGFyZ2V0IGluc3RhbmNlIGFuZCBhdHRlbXB0IHRvIGZpbmRcbiAgICAgIC8vIHJvb3QgYm91bmRhcmllcyB0aGF0IG1hdGNoIHRoYXQgb2Ygb3VyIGN1cnJlbnQgXCJyb290Q29udGFpbmVyXCIuXG4gICAgICAvLyBJZiB3ZSBmaW5kIHRoYXQgXCJyb290Q29udGFpbmVyXCIsIHdlIGZpbmQgdGhlIHBhcmVudCBmaWJlclxuICAgICAgLy8gc3ViLXRyZWUgZm9yIHRoYXQgcm9vdCBhbmQgbWFrZSB0aGF0IG91ciBhbmNlc3RvciBpbnN0YW5jZS5cbiAgICAgIHZhciBub2RlID0gdGFyZ2V0SW5zdDtcblxuICAgICAgbWFpbkxvb3A6IHdoaWxlICh0cnVlKSB7XG4gICAgICAgIGlmIChub2RlID09PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5vZGVUYWcgPSBub2RlLnRhZztcblxuICAgICAgICBpZiAobm9kZVRhZyA9PT0gSG9zdFJvb3QgfHwgbm9kZVRhZyA9PT0gSG9zdFBvcnRhbCkge1xuICAgICAgICAgIHZhciBjb250YWluZXIgPSBub2RlLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuXG4gICAgICAgICAgaWYgKGlzTWF0Y2hpbmdSb290Q29udGFpbmVyKGNvbnRhaW5lciwgdGFyZ2V0Q29udGFpbmVyTm9kZSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChub2RlVGFnID09PSBIb3N0UG9ydGFsKSB7XG4gICAgICAgICAgICAvLyBUaGUgdGFyZ2V0IGlzIGEgcG9ydGFsLCBidXQgaXQncyBub3QgdGhlIHJvb3RDb250YWluZXIgd2UncmUgbG9va2luZyBmb3IuXG4gICAgICAgICAgICAvLyBOb3JtYWxseSBwb3J0YWxzIGhhbmRsZSB0aGVpciBvd24gZXZlbnRzIGFsbCB0aGUgd2F5IGRvd24gdG8gdGhlIHJvb3QuXG4gICAgICAgICAgICAvLyBTbyB3ZSBzaG91bGQgYmUgYWJsZSB0byBzdG9wIG5vdy4gSG93ZXZlciwgd2UgZG9uJ3Qga25vdyBpZiB0aGlzIHBvcnRhbFxuICAgICAgICAgICAgLy8gd2FzIHBhcnQgb2YgKm91ciogcm9vdC5cbiAgICAgICAgICAgIHZhciBncmFuZE5vZGUgPSBub2RlLnJldHVybjtcblxuICAgICAgICAgICAgd2hpbGUgKGdyYW5kTm9kZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB2YXIgZ3JhbmRUYWcgPSBncmFuZE5vZGUudGFnO1xuXG4gICAgICAgICAgICAgIGlmIChncmFuZFRhZyA9PT0gSG9zdFJvb3QgfHwgZ3JhbmRUYWcgPT09IEhvc3RQb3J0YWwpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ3JhbmRDb250YWluZXIgPSBncmFuZE5vZGUuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNNYXRjaGluZ1Jvb3RDb250YWluZXIoZ3JhbmRDb250YWluZXIsIHRhcmdldENvbnRhaW5lck5vZGUpKSB7XG4gICAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIHRoZSByb290Q29udGFpbmVyIHdlJ3JlIGxvb2tpbmcgZm9yIGFuZCB3ZSBmb3VuZCBpdCBhc1xuICAgICAgICAgICAgICAgICAgLy8gYSBwYXJlbnQgb2YgdGhlIFBvcnRhbC4gVGhhdCBtZWFucyB3ZSBjYW4gaWdub3JlIGl0IGJlY2F1c2UgdGhlXG4gICAgICAgICAgICAgICAgICAvLyBQb3J0YWwgd2lsbCBidWJibGUgdGhyb3VnaCB0byB1cy5cbiAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBncmFuZE5vZGUgPSBncmFuZE5vZGUucmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gLy8gTm93IHdlIG5lZWQgdG8gZmluZCBpdCdzIGNvcnJlc3BvbmRpbmcgaG9zdCBmaWJlciBpbiB0aGUgb3RoZXJcbiAgICAgICAgICAvLyB0cmVlLiBUbyBkbyB0aGlzIHdlIGNhbiB1c2UgZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUsIGJ1dCB3ZVxuICAgICAgICAgIC8vIG5lZWQgdG8gdmFsaWRhdGUgdGhhdCB0aGUgZmliZXIgaXMgYSBob3N0IGluc3RhbmNlLCBvdGhlcndpc2VcbiAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHRyYXZlcnNlIHVwIHRocm91Z2ggdGhlIERPTSB0aWxsIHdlIGZpbmQgdGhlIGNvcnJlY3RcbiAgICAgICAgICAvLyBub2RlIHRoYXQgaXMgZnJvbSB0aGUgb3RoZXIgdHJlZS5cblxuXG4gICAgICAgICAgd2hpbGUgKGNvbnRhaW5lciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIHBhcmVudE5vZGUgPSBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShjb250YWluZXIpO1xuXG4gICAgICAgICAgICBpZiAocGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYXJlbnRUYWcgPSBwYXJlbnROb2RlLnRhZztcblxuICAgICAgICAgICAgaWYgKHBhcmVudFRhZyA9PT0gSG9zdENvbXBvbmVudCB8fCBwYXJlbnRUYWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICAgICAgICAgIG5vZGUgPSBhbmNlc3Rvckluc3QgPSBwYXJlbnROb2RlO1xuICAgICAgICAgICAgICBjb250aW51ZSBtYWluTG9vcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGFpbmVyID0gY29udGFpbmVyLnBhcmVudE5vZGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGJhdGNoZWRVcGRhdGVzKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2hFdmVudHNGb3JQbHVnaW5zKGRvbUV2ZW50TmFtZSwgZXZlbnRTeXN0ZW1GbGFncywgbmF0aXZlRXZlbnQsIGFuY2VzdG9ySW5zdCk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVEaXNwYXRjaExpc3RlbmVyKGluc3RhbmNlLCBsaXN0ZW5lciwgY3VycmVudFRhcmdldCkge1xuICByZXR1cm4ge1xuICAgIGluc3RhbmNlOiBpbnN0YW5jZSxcbiAgICBsaXN0ZW5lcjogbGlzdGVuZXIsXG4gICAgY3VycmVudFRhcmdldDogY3VycmVudFRhcmdldFxuICB9O1xufVxuXG5mdW5jdGlvbiBhY2N1bXVsYXRlU2luZ2xlUGhhc2VMaXN0ZW5lcnModGFyZ2V0RmliZXIsIHJlYWN0TmFtZSwgbmF0aXZlRXZlbnRUeXBlLCBpbkNhcHR1cmVQaGFzZSwgYWNjdW11bGF0ZVRhcmdldE9ubHksIG5hdGl2ZUV2ZW50KSB7XG4gIHZhciBjYXB0dXJlTmFtZSA9IHJlYWN0TmFtZSAhPT0gbnVsbCA/IHJlYWN0TmFtZSArICdDYXB0dXJlJyA6IG51bGw7XG4gIHZhciByZWFjdEV2ZW50TmFtZSA9IGluQ2FwdHVyZVBoYXNlID8gY2FwdHVyZU5hbWUgOiByZWFjdE5hbWU7XG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIGluc3RhbmNlID0gdGFyZ2V0RmliZXI7XG4gIHZhciBsYXN0SG9zdENvbXBvbmVudCA9IG51bGw7IC8vIEFjY3VtdWxhdGUgYWxsIGluc3RhbmNlcyBhbmQgbGlzdGVuZXJzIHZpYSB0aGUgdGFyZ2V0IC0+IHJvb3QgcGF0aC5cblxuICB3aGlsZSAoaW5zdGFuY2UgIT09IG51bGwpIHtcbiAgICB2YXIgX2luc3RhbmNlMiA9IGluc3RhbmNlLFxuICAgICAgICBzdGF0ZU5vZGUgPSBfaW5zdGFuY2UyLnN0YXRlTm9kZSxcbiAgICAgICAgdGFnID0gX2luc3RhbmNlMi50YWc7IC8vIEhhbmRsZSBsaXN0ZW5lcnMgdGhhdCBhcmUgb24gSG9zdENvbXBvbmVudHMgKGkuZS4gPGRpdj4pXG5cbiAgICBpZiAodGFnID09PSBIb3N0Q29tcG9uZW50ICYmIHN0YXRlTm9kZSAhPT0gbnVsbCkge1xuICAgICAgbGFzdEhvc3RDb21wb25lbnQgPSBzdGF0ZU5vZGU7IC8vIGNyZWF0ZUV2ZW50SGFuZGxlIGxpc3RlbmVyc1xuXG5cbiAgICAgIGlmIChyZWFjdEV2ZW50TmFtZSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBnZXRMaXN0ZW5lcihpbnN0YW5jZSwgcmVhY3RFdmVudE5hbWUpO1xuXG4gICAgICAgIGlmIChsaXN0ZW5lciAhPSBudWxsKSB7XG4gICAgICAgICAgbGlzdGVuZXJzLnB1c2goY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcihpbnN0YW5jZSwgbGlzdGVuZXIsIGxhc3RIb3N0Q29tcG9uZW50KSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IC8vIElmIHdlIGFyZSBvbmx5IGFjY3VtdWxhdGluZyBldmVudHMgZm9yIHRoZSB0YXJnZXQsIHRoZW4gd2UgZG9uJ3RcbiAgICAvLyBjb250aW51ZSB0byBwcm9wYWdhdGUgdGhyb3VnaCB0aGUgUmVhY3QgZmliZXIgdHJlZSB0byBmaW5kIG90aGVyXG4gICAgLy8gbGlzdGVuZXJzLlxuXG5cbiAgICBpZiAoYWNjdW11bGF0ZVRhcmdldE9ubHkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH0gLy8gSWYgd2UgYXJlIHByb2Nlc3NpbmcgdGhlIG9uQmVmb3JlQmx1ciBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIHRha2VcblxuICAgIGluc3RhbmNlID0gaW5zdGFuY2UucmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIGxpc3RlbmVycztcbn0gLy8gV2Ugc2hvdWxkIG9ubHkgdXNlIHRoaXMgZnVuY3Rpb24gZm9yOlxuLy8gLSBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luXG4vLyAtIENoYW5nZUV2ZW50UGx1Z2luXG4vLyAtIFNlbGVjdEV2ZW50UGx1Z2luXG4vLyBUaGlzIGlzIGJlY2F1c2Ugd2Ugb25seSBwcm9jZXNzIHRoZXNlIHBsdWdpbnNcbi8vIGluIHRoZSBidWJibGUgcGhhc2UsIHNvIHdlIG5lZWQgdG8gYWNjdW11bGF0ZSB0d29cbi8vIHBoYXNlIGV2ZW50IGxpc3RlbmVycyAodmlhIGVtdWxhdGlvbikuXG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVUd29QaGFzZUxpc3RlbmVycyh0YXJnZXRGaWJlciwgcmVhY3ROYW1lKSB7XG4gIHZhciBjYXB0dXJlTmFtZSA9IHJlYWN0TmFtZSArICdDYXB0dXJlJztcbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuICB2YXIgaW5zdGFuY2UgPSB0YXJnZXRGaWJlcjsgLy8gQWNjdW11bGF0ZSBhbGwgaW5zdGFuY2VzIGFuZCBsaXN0ZW5lcnMgdmlhIHRoZSB0YXJnZXQgLT4gcm9vdCBwYXRoLlxuXG4gIHdoaWxlIChpbnN0YW5jZSAhPT0gbnVsbCkge1xuICAgIHZhciBfaW5zdGFuY2UzID0gaW5zdGFuY2UsXG4gICAgICAgIHN0YXRlTm9kZSA9IF9pbnN0YW5jZTMuc3RhdGVOb2RlLFxuICAgICAgICB0YWcgPSBfaW5zdGFuY2UzLnRhZzsgLy8gSGFuZGxlIGxpc3RlbmVycyB0aGF0IGFyZSBvbiBIb3N0Q29tcG9uZW50cyAoaS5lLiA8ZGl2PilcblxuICAgIGlmICh0YWcgPT09IEhvc3RDb21wb25lbnQgJiYgc3RhdGVOb2RlICE9PSBudWxsKSB7XG4gICAgICB2YXIgY3VycmVudFRhcmdldCA9IHN0YXRlTm9kZTtcbiAgICAgIHZhciBjYXB0dXJlTGlzdGVuZXIgPSBnZXRMaXN0ZW5lcihpbnN0YW5jZSwgY2FwdHVyZU5hbWUpO1xuXG4gICAgICBpZiAoY2FwdHVyZUxpc3RlbmVyICE9IG51bGwpIHtcbiAgICAgICAgbGlzdGVuZXJzLnVuc2hpZnQoY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcihpbnN0YW5jZSwgY2FwdHVyZUxpc3RlbmVyLCBjdXJyZW50VGFyZ2V0KSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBidWJibGVMaXN0ZW5lciA9IGdldExpc3RlbmVyKGluc3RhbmNlLCByZWFjdE5hbWUpO1xuXG4gICAgICBpZiAoYnViYmxlTGlzdGVuZXIgIT0gbnVsbCkge1xuICAgICAgICBsaXN0ZW5lcnMucHVzaChjcmVhdGVEaXNwYXRjaExpc3RlbmVyKGluc3RhbmNlLCBidWJibGVMaXN0ZW5lciwgY3VycmVudFRhcmdldCkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGluc3RhbmNlID0gaW5zdGFuY2UucmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIGxpc3RlbmVycztcbn1cblxuZnVuY3Rpb24gZ2V0UGFyZW50KGluc3QpIHtcbiAgaWYgKGluc3QgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGRvIHtcbiAgICBpbnN0ID0gaW5zdC5yZXR1cm47IC8vIFRPRE86IElmIHRoaXMgaXMgYSBIb3N0Um9vdCB3ZSBtaWdodCB3YW50IHRvIGJhaWwgb3V0LlxuICAgIC8vIFRoYXQgaXMgZGVwZW5kaW5nIG9uIGlmIHdlIHdhbnQgbmVzdGVkIHN1YnRyZWVzIChsYXllcnMpIHRvIGJ1YmJsZVxuICAgIC8vIGV2ZW50cyB0byB0aGVpciBwYXJlbnQuIFdlIGNvdWxkIGFsc28gZ28gdGhyb3VnaCBwYXJlbnROb2RlIG9uIHRoZVxuICAgIC8vIGhvc3Qgbm9kZSBidXQgdGhhdCB3b3VsZG4ndCB3b3JrIGZvciBSZWFjdCBOYXRpdmUgYW5kIGRvZXNuJ3QgbGV0IHVzXG4gICAgLy8gZG8gdGhlIHBvcnRhbCBmZWF0dXJlLlxuICB9IHdoaWxlIChpbnN0ICYmIGluc3QudGFnICE9PSBIb3N0Q29tcG9uZW50KTtcblxuICBpZiAoaW5zdCkge1xuICAgIHJldHVybiBpbnN0O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG4vKipcbiAqIFJldHVybiB0aGUgbG93ZXN0IGNvbW1vbiBhbmNlc3RvciBvZiBBIGFuZCBCLCBvciBudWxsIGlmIHRoZXkgYXJlIGluXG4gKiBkaWZmZXJlbnQgdHJlZXMuXG4gKi9cblxuXG5mdW5jdGlvbiBnZXRMb3dlc3RDb21tb25BbmNlc3RvcihpbnN0QSwgaW5zdEIpIHtcbiAgdmFyIG5vZGVBID0gaW5zdEE7XG4gIHZhciBub2RlQiA9IGluc3RCO1xuICB2YXIgZGVwdGhBID0gMDtcblxuICBmb3IgKHZhciB0ZW1wQSA9IG5vZGVBOyB0ZW1wQTsgdGVtcEEgPSBnZXRQYXJlbnQodGVtcEEpKSB7XG4gICAgZGVwdGhBKys7XG4gIH1cblxuICB2YXIgZGVwdGhCID0gMDtcblxuICBmb3IgKHZhciB0ZW1wQiA9IG5vZGVCOyB0ZW1wQjsgdGVtcEIgPSBnZXRQYXJlbnQodGVtcEIpKSB7XG4gICAgZGVwdGhCKys7XG4gIH0gLy8gSWYgQSBpcyBkZWVwZXIsIGNyYXdsIHVwLlxuXG5cbiAgd2hpbGUgKGRlcHRoQSAtIGRlcHRoQiA+IDApIHtcbiAgICBub2RlQSA9IGdldFBhcmVudChub2RlQSk7XG4gICAgZGVwdGhBLS07XG4gIH0gLy8gSWYgQiBpcyBkZWVwZXIsIGNyYXdsIHVwLlxuXG5cbiAgd2hpbGUgKGRlcHRoQiAtIGRlcHRoQSA+IDApIHtcbiAgICBub2RlQiA9IGdldFBhcmVudChub2RlQik7XG4gICAgZGVwdGhCLS07XG4gIH0gLy8gV2FsayBpbiBsb2Nrc3RlcCB1bnRpbCB3ZSBmaW5kIGEgbWF0Y2guXG5cblxuICB2YXIgZGVwdGggPSBkZXB0aEE7XG5cbiAgd2hpbGUgKGRlcHRoLS0pIHtcbiAgICBpZiAobm9kZUEgPT09IG5vZGVCIHx8IG5vZGVCICE9PSBudWxsICYmIG5vZGVBID09PSBub2RlQi5hbHRlcm5hdGUpIHtcbiAgICAgIHJldHVybiBub2RlQTtcbiAgICB9XG5cbiAgICBub2RlQSA9IGdldFBhcmVudChub2RlQSk7XG4gICAgbm9kZUIgPSBnZXRQYXJlbnQobm9kZUIpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVFbnRlckxlYXZlTGlzdGVuZXJzRm9yRXZlbnQoZGlzcGF0Y2hRdWV1ZSwgZXZlbnQsIHRhcmdldCwgY29tbW9uLCBpbkNhcHR1cmVQaGFzZSkge1xuICB2YXIgcmVnaXN0cmF0aW9uTmFtZSA9IGV2ZW50Ll9yZWFjdE5hbWU7XG4gIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgdmFyIGluc3RhbmNlID0gdGFyZ2V0O1xuXG4gIHdoaWxlIChpbnN0YW5jZSAhPT0gbnVsbCkge1xuICAgIGlmIChpbnN0YW5jZSA9PT0gY29tbW9uKSB7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgX2luc3RhbmNlNCA9IGluc3RhbmNlLFxuICAgICAgICBhbHRlcm5hdGUgPSBfaW5zdGFuY2U0LmFsdGVybmF0ZSxcbiAgICAgICAgc3RhdGVOb2RlID0gX2luc3RhbmNlNC5zdGF0ZU5vZGUsXG4gICAgICAgIHRhZyA9IF9pbnN0YW5jZTQudGFnO1xuXG4gICAgaWYgKGFsdGVybmF0ZSAhPT0gbnVsbCAmJiBhbHRlcm5hdGUgPT09IGNvbW1vbikge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHRhZyA9PT0gSG9zdENvbXBvbmVudCAmJiBzdGF0ZU5vZGUgIT09IG51bGwpIHtcbiAgICAgIHZhciBjdXJyZW50VGFyZ2V0ID0gc3RhdGVOb2RlO1xuXG4gICAgICBpZiAoaW5DYXB0dXJlUGhhc2UpIHtcbiAgICAgICAgdmFyIGNhcHR1cmVMaXN0ZW5lciA9IGdldExpc3RlbmVyKGluc3RhbmNlLCByZWdpc3RyYXRpb25OYW1lKTtcblxuICAgICAgICBpZiAoY2FwdHVyZUxpc3RlbmVyICE9IG51bGwpIHtcbiAgICAgICAgICBsaXN0ZW5lcnMudW5zaGlmdChjcmVhdGVEaXNwYXRjaExpc3RlbmVyKGluc3RhbmNlLCBjYXB0dXJlTGlzdGVuZXIsIGN1cnJlbnRUYXJnZXQpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghaW5DYXB0dXJlUGhhc2UpIHtcbiAgICAgICAgdmFyIGJ1YmJsZUxpc3RlbmVyID0gZ2V0TGlzdGVuZXIoaW5zdGFuY2UsIHJlZ2lzdHJhdGlvbk5hbWUpO1xuXG4gICAgICAgIGlmIChidWJibGVMaXN0ZW5lciAhPSBudWxsKSB7XG4gICAgICAgICAgbGlzdGVuZXJzLnB1c2goY3JlYXRlRGlzcGF0Y2hMaXN0ZW5lcihpbnN0YW5jZSwgYnViYmxlTGlzdGVuZXIsIGN1cnJlbnRUYXJnZXQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGluc3RhbmNlID0gaW5zdGFuY2UucmV0dXJuO1xuICB9XG5cbiAgaWYgKGxpc3RlbmVycy5sZW5ndGggIT09IDApIHtcbiAgICBkaXNwYXRjaFF1ZXVlLnB1c2goe1xuICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgbGlzdGVuZXJzOiBsaXN0ZW5lcnNcbiAgICB9KTtcbiAgfVxufSAvLyBXZSBzaG91bGQgb25seSB1c2UgdGhpcyBmdW5jdGlvbiBmb3I6XG4vLyAtIEVudGVyTGVhdmVFdmVudFBsdWdpblxuLy8gVGhpcyBpcyBiZWNhdXNlIHdlIG9ubHkgcHJvY2VzcyB0aGlzIHBsdWdpblxuLy8gaW4gdGhlIGJ1YmJsZSBwaGFzZSwgc28gd2UgbmVlZCB0byBhY2N1bXVsYXRlIHR3b1xuLy8gcGhhc2UgZXZlbnQgbGlzdGVuZXJzLlxuXG5cbmZ1bmN0aW9uIGFjY3VtdWxhdGVFbnRlckxlYXZlVHdvUGhhc2VMaXN0ZW5lcnMoZGlzcGF0Y2hRdWV1ZSwgbGVhdmVFdmVudCwgZW50ZXJFdmVudCwgZnJvbSwgdG8pIHtcbiAgdmFyIGNvbW1vbiA9IGZyb20gJiYgdG8gPyBnZXRMb3dlc3RDb21tb25BbmNlc3Rvcihmcm9tLCB0bykgOiBudWxsO1xuXG4gIGlmIChmcm9tICE9PSBudWxsKSB7XG4gICAgYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudChkaXNwYXRjaFF1ZXVlLCBsZWF2ZUV2ZW50LCBmcm9tLCBjb21tb24sIGZhbHNlKTtcbiAgfVxuXG4gIGlmICh0byAhPT0gbnVsbCAmJiBlbnRlckV2ZW50ICE9PSBudWxsKSB7XG4gICAgYWNjdW11bGF0ZUVudGVyTGVhdmVMaXN0ZW5lcnNGb3JFdmVudChkaXNwYXRjaFF1ZXVlLCBlbnRlckV2ZW50LCB0bywgY29tbW9uLCB0cnVlKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0TGlzdGVuZXJTZXRLZXkoZG9tRXZlbnROYW1lLCBjYXB0dXJlKSB7XG4gIHJldHVybiBkb21FdmVudE5hbWUgKyBcIl9fXCIgKyAoY2FwdHVyZSA/ICdjYXB0dXJlJyA6ICdidWJibGUnKTtcbn1cblxudmFyIGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uID0gZmFsc2U7XG52YXIgREFOR0VST1VTTFlfU0VUX0lOTkVSX0hUTUwgPSAnZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwnO1xudmFyIFNVUFBSRVNTX0NPTlRFTlRfRURJVEFCTEVfV0FSTklORyA9ICdzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcnO1xudmFyIFNVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HID0gJ3N1cHByZXNzSHlkcmF0aW9uV2FybmluZyc7XG52YXIgQVVUT0ZPQ1VTID0gJ2F1dG9Gb2N1cyc7XG52YXIgQ0hJTERSRU4gPSAnY2hpbGRyZW4nO1xudmFyIFNUWUxFID0gJ3N0eWxlJztcbnZhciBIVE1MJDEgPSAnX19odG1sJztcbnZhciB3YXJuZWRVbmtub3duVGFncztcbnZhciB2YWxpZGF0ZVByb3BlcnRpZXNJbkRldmVsb3BtZW50O1xudmFyIHdhcm5Gb3JQcm9wRGlmZmVyZW5jZTtcbnZhciB3YXJuRm9yRXh0cmFBdHRyaWJ1dGVzO1xudmFyIHdhcm5Gb3JJbnZhbGlkRXZlbnRMaXN0ZW5lcjtcbnZhciBjYW5EaWZmU3R5bGVGb3JIeWRyYXRpb25XYXJuaW5nO1xudmFyIG5vcm1hbGl6ZUhUTUw7XG5cbntcbiAgd2FybmVkVW5rbm93blRhZ3MgPSB7XG4gICAgLy8gVGhlcmUgYXJlIHdvcmtpbmcgcG9seWZpbGxzIGZvciA8ZGlhbG9nPi4gTGV0IHBlb3BsZSB1c2UgaXQuXG4gICAgZGlhbG9nOiB0cnVlLFxuICAgIC8vIEVsZWN0cm9uIHNoaXBzIGEgY3VzdG9tIDx3ZWJ2aWV3PiB0YWcgdG8gZGlzcGxheSBleHRlcm5hbCB3ZWIgY29udGVudCBpblxuICAgIC8vIGFuIGlzb2xhdGVkIGZyYW1lIGFuZCBwcm9jZXNzLlxuICAgIC8vIFRoaXMgdGFnIGlzIG5vdCBwcmVzZW50IGluIG5vbiBFbGVjdHJvbiBlbnZpcm9ubWVudHMgc3VjaCBhcyBKU0RvbSB3aGljaFxuICAgIC8vIGlzIG9mdGVuIHVzZWQgZm9yIHRlc3RpbmcgcHVycG9zZXMuXG4gICAgLy8gQHNlZSBodHRwczovL2VsZWN0cm9uanMub3JnL2RvY3MvYXBpL3dlYnZpZXctdGFnXG4gICAgd2VidmlldzogdHJ1ZVxuICB9O1xuXG4gIHZhbGlkYXRlUHJvcGVydGllc0luRGV2ZWxvcG1lbnQgPSBmdW5jdGlvbiAodHlwZSwgcHJvcHMpIHtcbiAgICB2YWxpZGF0ZVByb3BlcnRpZXModHlwZSwgcHJvcHMpO1xuICAgIHZhbGlkYXRlUHJvcGVydGllcyQxKHR5cGUsIHByb3BzKTtcbiAgICB2YWxpZGF0ZVByb3BlcnRpZXMkMih0eXBlLCBwcm9wcywge1xuICAgICAgcmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llczogcmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyxcbiAgICAgIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6IHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXNcbiAgICB9KTtcbiAgfTsgLy8gSUUgMTEgcGFyc2VzICYgbm9ybWFsaXplcyB0aGUgc3R5bGUgYXR0cmlidXRlIGFzIG9wcG9zZWQgdG8gb3RoZXJcbiAgLy8gYnJvd3NlcnMuIEl0IGFkZHMgc3BhY2VzIGFuZCBzb3J0cyB0aGUgcHJvcGVydGllcyBpbiBzb21lXG4gIC8vIG5vbi1hbHBoYWJldGljYWwgb3JkZXIuIEhhbmRsaW5nIHRoYXQgd291bGQgcmVxdWlyZSBzb3J0aW5nIENTU1xuICAvLyBwcm9wZXJ0aWVzIGluIHRoZSBjbGllbnQgJiBzZXJ2ZXIgdmVyc2lvbnMgb3IgYXBwbHlpbmdcbiAgLy8gYGV4cGVjdGVkU3R5bGVgIHRvIGEgdGVtcG9yYXJ5IERPTSBub2RlIHRvIHJlYWQgaXRzIGBzdHlsZWAgYXR0cmlidXRlXG4gIC8vIG5vcm1hbGl6ZWQuIFNpbmNlIGl0IG9ubHkgYWZmZWN0cyBJRSwgd2UncmUgc2tpcHBpbmcgc3R5bGUgd2FybmluZ3NcbiAgLy8gaW4gdGhhdCBicm93c2VyIGNvbXBsZXRlbHkgaW4gZmF2b3Igb2YgZG9pbmcgYWxsIHRoYXQgd29yay5cbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTE4MDdcblxuXG4gIGNhbkRpZmZTdHlsZUZvckh5ZHJhdGlvbldhcm5pbmcgPSBjYW5Vc2VET00gJiYgIWRvY3VtZW50LmRvY3VtZW50TW9kZTtcblxuICB3YXJuRm9yUHJvcERpZmZlcmVuY2UgPSBmdW5jdGlvbiAocHJvcE5hbWUsIHNlcnZlclZhbHVlLCBjbGllbnRWYWx1ZSkge1xuICAgIGlmIChkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBub3JtYWxpemVkQ2xpZW50VmFsdWUgPSBub3JtYWxpemVNYXJrdXBGb3JUZXh0T3JBdHRyaWJ1dGUoY2xpZW50VmFsdWUpO1xuICAgIHZhciBub3JtYWxpemVkU2VydmVyVmFsdWUgPSBub3JtYWxpemVNYXJrdXBGb3JUZXh0T3JBdHRyaWJ1dGUoc2VydmVyVmFsdWUpO1xuXG4gICAgaWYgKG5vcm1hbGl6ZWRTZXJ2ZXJWYWx1ZSA9PT0gbm9ybWFsaXplZENsaWVudFZhbHVlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGlkV2FybkludmFsaWRIeWRyYXRpb24gPSB0cnVlO1xuXG4gICAgZXJyb3IoJ1Byb3AgYCVzYCBkaWQgbm90IG1hdGNoLiBTZXJ2ZXI6ICVzIENsaWVudDogJXMnLCBwcm9wTmFtZSwgSlNPTi5zdHJpbmdpZnkobm9ybWFsaXplZFNlcnZlclZhbHVlKSwgSlNPTi5zdHJpbmdpZnkobm9ybWFsaXplZENsaWVudFZhbHVlKSk7XG4gIH07XG5cbiAgd2FybkZvckV4dHJhQXR0cmlidXRlcyA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lcykge1xuICAgIGlmIChkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uID0gdHJ1ZTtcbiAgICB2YXIgbmFtZXMgPSBbXTtcbiAgICBhdHRyaWJ1dGVOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICBuYW1lcy5wdXNoKG5hbWUpO1xuICAgIH0pO1xuXG4gICAgZXJyb3IoJ0V4dHJhIGF0dHJpYnV0ZXMgZnJvbSB0aGUgc2VydmVyOiAlcycsIG5hbWVzKTtcbiAgfTtcblxuICB3YXJuRm9ySW52YWxpZEV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAocmVnaXN0cmF0aW9uTmFtZSwgbGlzdGVuZXIpIHtcbiAgICBpZiAobGlzdGVuZXIgPT09IGZhbHNlKSB7XG4gICAgICBlcnJvcignRXhwZWN0ZWQgYCVzYCBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLCBpbnN0ZWFkIGdvdCBgZmFsc2VgLlxcblxcbicgKyAnSWYgeW91IHVzZWQgdG8gY29uZGl0aW9uYWxseSBvbWl0IGl0IHdpdGggJXM9e2NvbmRpdGlvbiAmJiB2YWx1ZX0sICcgKyAncGFzcyAlcz17Y29uZGl0aW9uID8gdmFsdWUgOiB1bmRlZmluZWR9IGluc3RlYWQuJywgcmVnaXN0cmF0aW9uTmFtZSwgcmVnaXN0cmF0aW9uTmFtZSwgcmVnaXN0cmF0aW9uTmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVycm9yKCdFeHBlY3RlZCBgJXNgIGxpc3RlbmVyIHRvIGJlIGEgZnVuY3Rpb24sIGluc3RlYWQgZ290IGEgdmFsdWUgb2YgYCVzYCB0eXBlLicsIHJlZ2lzdHJhdGlvbk5hbWUsIHR5cGVvZiBsaXN0ZW5lcik7XG4gICAgfVxuICB9OyAvLyBQYXJzZSB0aGUgSFRNTCBhbmQgcmVhZCBpdCBiYWNrIHRvIG5vcm1hbGl6ZSB0aGUgSFRNTCBzdHJpbmcgc28gdGhhdCBpdFxuICAvLyBjYW4gYmUgdXNlZCBmb3IgY29tcGFyaXNvbi5cblxuXG4gIG5vcm1hbGl6ZUhUTUwgPSBmdW5jdGlvbiAocGFyZW50LCBodG1sKSB7XG4gICAgLy8gV2UgY291bGQgaGF2ZSBjcmVhdGVkIGEgc2VwYXJhdGUgZG9jdW1lbnQgaGVyZSB0byBhdm9pZFxuICAgIC8vIHJlLWluaXRpYWxpemluZyBjdXN0b20gZWxlbWVudHMgaWYgdGhleSBleGlzdC4gQnV0IHRoaXMgYnJlYWtzXG4gICAgLy8gaG93IDxub3NjcmlwdD4gaXMgYmVpbmcgaGFuZGxlZC4gU28gd2UgdXNlIHRoZSBzYW1lIGRvY3VtZW50LlxuICAgIC8vIFNlZSB0aGUgZGlzY3Vzc2lvbiBpbiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8xMTE1Ny5cbiAgICB2YXIgdGVzdEVsZW1lbnQgPSBwYXJlbnQubmFtZXNwYWNlVVJJID09PSBIVE1MX05BTUVTUEFDRSA/IHBhcmVudC5vd25lckRvY3VtZW50LmNyZWF0ZUVsZW1lbnQocGFyZW50LnRhZ05hbWUpIDogcGFyZW50Lm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKHBhcmVudC5uYW1lc3BhY2VVUkksIHBhcmVudC50YWdOYW1lKTtcbiAgICB0ZXN0RWxlbWVudC5pbm5lckhUTUwgPSBodG1sO1xuICAgIHJldHVybiB0ZXN0RWxlbWVudC5pbm5lckhUTUw7XG4gIH07XG59IC8vIEhUTUwgcGFyc2luZyBub3JtYWxpemVzIENSIGFuZCBDUkxGIHRvIExGLlxuLy8gSXQgYWxzbyBjYW4gdHVybiBcXHUwMDAwIGludG8gXFx1RkZGRCBpbnNpZGUgYXR0cmlidXRlcy5cbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9zaW5nbGUtcGFnZS5odG1sI3ByZXByb2Nlc3NpbmctdGhlLWlucHV0LXN0cmVhbVxuLy8gSWYgd2UgaGF2ZSBhIG1pc21hdGNoLCBpdCBtaWdodCBiZSBjYXVzZWQgYnkgdGhhdC5cbi8vIFdlIHdpbGwgc3RpbGwgcGF0Y2ggdXAgaW4gdGhpcyBjYXNlIGJ1dCBub3QgZmlyZSB0aGUgd2FybmluZy5cblxuXG52YXIgTk9STUFMSVpFX05FV0xJTkVTX1JFR0VYID0gL1xcclxcbj8vZztcbnZhciBOT1JNQUxJWkVfTlVMTF9BTkRfUkVQTEFDRU1FTlRfUkVHRVggPSAvXFx1MDAwMHxcXHVGRkZEL2c7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZShtYXJrdXApIHtcbiAge1xuICAgIGNoZWNrSHRtbFN0cmluZ0NvZXJjaW9uKG1hcmt1cCk7XG4gIH1cblxuICB2YXIgbWFya3VwU3RyaW5nID0gdHlwZW9mIG1hcmt1cCA9PT0gJ3N0cmluZycgPyBtYXJrdXAgOiAnJyArIG1hcmt1cDtcbiAgcmV0dXJuIG1hcmt1cFN0cmluZy5yZXBsYWNlKE5PUk1BTElaRV9ORVdMSU5FU19SRUdFWCwgJ1xcbicpLnJlcGxhY2UoTk9STUFMSVpFX05VTExfQU5EX1JFUExBQ0VNRU5UX1JFR0VYLCAnJyk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9yVW5tYXRjaGVkVGV4dChzZXJ2ZXJUZXh0LCBjbGllbnRUZXh0LCBpc0NvbmN1cnJlbnRNb2RlLCBzaG91bGRXYXJuRGV2KSB7XG4gIHZhciBub3JtYWxpemVkQ2xpZW50VGV4dCA9IG5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZShjbGllbnRUZXh0KTtcbiAgdmFyIG5vcm1hbGl6ZWRTZXJ2ZXJUZXh0ID0gbm9ybWFsaXplTWFya3VwRm9yVGV4dE9yQXR0cmlidXRlKHNlcnZlclRleHQpO1xuXG4gIGlmIChub3JtYWxpemVkU2VydmVyVGV4dCA9PT0gbm9ybWFsaXplZENsaWVudFRleHQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoc2hvdWxkV2FybkRldikge1xuICAgIHtcbiAgICAgIGlmICghZGlkV2FybkludmFsaWRIeWRyYXRpb24pIHtcbiAgICAgICAgZGlkV2FybkludmFsaWRIeWRyYXRpb24gPSB0cnVlO1xuXG4gICAgICAgIGVycm9yKCdUZXh0IGNvbnRlbnQgZGlkIG5vdCBtYXRjaC4gU2VydmVyOiBcIiVzXCIgQ2xpZW50OiBcIiVzXCInLCBub3JtYWxpemVkU2VydmVyVGV4dCwgbm9ybWFsaXplZENsaWVudFRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChpc0NvbmN1cnJlbnRNb2RlICYmIGVuYWJsZUNsaWVudFJlbmRlckZhbGxiYWNrT25UZXh0TWlzbWF0Y2gpIHtcbiAgICAvLyBJbiBjb25jdXJyZW50IHJvb3RzLCB3ZSB0aHJvdyB3aGVuIHRoZXJlJ3MgYSB0ZXh0IG1pc21hdGNoIGFuZCByZXZlcnQgdG9cbiAgICAvLyBjbGllbnQgcmVuZGVyaW5nLCB1cCB0byB0aGUgbmVhcmVzdCBTdXNwZW5zZSBib3VuZGFyeS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RleHQgY29udGVudCBkb2VzIG5vdCBtYXRjaCBzZXJ2ZXItcmVuZGVyZWQgSFRNTC4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRPd25lckRvY3VtZW50RnJvbVJvb3RDb250YWluZXIocm9vdENvbnRhaW5lckVsZW1lbnQpIHtcbiAgcmV0dXJuIHJvb3RDb250YWluZXJFbGVtZW50Lm5vZGVUeXBlID09PSBET0NVTUVOVF9OT0RFID8gcm9vdENvbnRhaW5lckVsZW1lbnQgOiByb290Q29udGFpbmVyRWxlbWVudC5vd25lckRvY3VtZW50O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cblxuZnVuY3Rpb24gdHJhcENsaWNrT25Ob25JbnRlcmFjdGl2ZUVsZW1lbnQobm9kZSkge1xuICAvLyBNb2JpbGUgU2FmYXJpIGRvZXMgbm90IGZpcmUgcHJvcGVybHkgYnViYmxlIGNsaWNrIGV2ZW50cyBvblxuICAvLyBub24taW50ZXJhY3RpdmUgZWxlbWVudHMsIHdoaWNoIG1lYW5zIGRlbGVnYXRlZCBjbGljayBsaXN0ZW5lcnMgZG8gbm90XG4gIC8vIGZpcmUuIFRoZSB3b3JrYXJvdW5kIGZvciB0aGlzIGJ1ZyBpbnZvbHZlcyBhdHRhY2hpbmcgYW4gZW1wdHkgY2xpY2tcbiAgLy8gbGlzdGVuZXIgb24gdGhlIHRhcmdldCBub2RlLlxuICAvLyBodHRwczovL3d3dy5xdWlya3Ntb2RlLm9yZy9ibG9nL2FyY2hpdmVzLzIwMTAvMDkvY2xpY2tfZXZlbnRfZGVsLmh0bWxcbiAgLy8gSnVzdCBzZXQgaXQgdXNpbmcgdGhlIG9uY2xpY2sgcHJvcGVydHkgc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIG1hbmFnZSBhbnlcbiAgLy8gYm9va2tlZXBpbmcgZm9yIGl0LiBOb3Qgc3VyZSBpZiB3ZSBuZWVkIHRvIGNsZWFyIGl0IHdoZW4gdGhlIGxpc3RlbmVyIGlzXG4gIC8vIHJlbW92ZWQuXG4gIC8vIFRPRE86IE9ubHkgZG8gdGhpcyBmb3IgdGhlIHJlbGV2YW50IFNhZmFyaXMgbWF5YmU/XG4gIG5vZGUub25jbGljayA9IG5vb3A7XG59XG5cbmZ1bmN0aW9uIHNldEluaXRpYWxET01Qcm9wZXJ0aWVzKHRhZywgZG9tRWxlbWVudCwgcm9vdENvbnRhaW5lckVsZW1lbnQsIG5leHRQcm9wcywgaXNDdXN0b21Db21wb25lbnRUYWcpIHtcbiAgZm9yICh2YXIgcHJvcEtleSBpbiBuZXh0UHJvcHMpIHtcbiAgICBpZiAoIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgdmFyIG5leHRQcm9wID0gbmV4dFByb3BzW3Byb3BLZXldO1xuXG4gICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICB7XG4gICAgICAgIGlmIChuZXh0UHJvcCkge1xuICAgICAgICAgIC8vIEZyZWV6ZSB0aGUgbmV4dCBzdHlsZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gYXNzdW1lIGl0IHdvbid0IGJlXG4gICAgICAgICAgLy8gbXV0YXRlZC4gV2UgaGF2ZSBhbHJlYWR5IHdhcm5lZCBmb3IgdGhpcyBpbiB0aGUgcGFzdC5cbiAgICAgICAgICBPYmplY3QuZnJlZXplKG5leHRQcm9wKTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBSZWxpZXMgb24gYHVwZGF0ZVN0eWxlc0J5SURgIG5vdCBtdXRhdGluZyBgc3R5bGVVcGRhdGVzYC5cblxuXG4gICAgICBzZXRWYWx1ZUZvclN0eWxlcyhkb21FbGVtZW50LCBuZXh0UHJvcCk7XG4gICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBEQU5HRVJPVVNMWV9TRVRfSU5ORVJfSFRNTCkge1xuICAgICAgdmFyIG5leHRIdG1sID0gbmV4dFByb3AgPyBuZXh0UHJvcFtIVE1MJDFdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAobmV4dEh0bWwgIT0gbnVsbCkge1xuICAgICAgICBzZXRJbm5lckhUTUwoZG9tRWxlbWVudCwgbmV4dEh0bWwpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gQ0hJTERSRU4pIHtcbiAgICAgIGlmICh0eXBlb2YgbmV4dFByb3AgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIC8vIEF2b2lkIHNldHRpbmcgaW5pdGlhbCB0ZXh0Q29udGVudCB3aGVuIHRoZSB0ZXh0IGlzIGVtcHR5LiBJbiBJRTExIHNldHRpbmdcbiAgICAgICAgLy8gdGV4dENvbnRlbnQgb24gYSA8dGV4dGFyZWE+IHdpbGwgY2F1c2UgdGhlIHBsYWNlaG9sZGVyIHRvIG5vdFxuICAgICAgICAvLyBzaG93IHdpdGhpbiB0aGUgPHRleHRhcmVhPiB1bnRpbCBpdCBoYXMgYmVlbiBmb2N1c2VkIGFuZCBibHVycmVkIGFnYWluLlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzY3MzEjaXNzdWVjb21tZW50LTI1NDg3NDU1M1xuICAgICAgICB2YXIgY2FuU2V0VGV4dENvbnRlbnQgPSB0YWcgIT09ICd0ZXh0YXJlYScgfHwgbmV4dFByb3AgIT09ICcnO1xuXG4gICAgICAgIGlmIChjYW5TZXRUZXh0Q29udGVudCkge1xuICAgICAgICAgIHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsIG5leHRQcm9wKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgbmV4dFByb3AgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsICcnICsgbmV4dFByb3ApO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gU1VQUFJFU1NfQ09OVEVOVF9FRElUQUJMRV9XQVJOSU5HIHx8IHByb3BLZXkgPT09IFNVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HKSA7IGVsc2UgaWYgKHByb3BLZXkgPT09IEFVVE9GT0NVUykgOyBlbHNlIGlmIChyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICBpZiAobmV4dFByb3AgIT0gbnVsbCkge1xuICAgICAgICBpZiAoIHR5cGVvZiBuZXh0UHJvcCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHdhcm5Gb3JJbnZhbGlkRXZlbnRMaXN0ZW5lcihwcm9wS2V5LCBuZXh0UHJvcCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvcEtleSA9PT0gJ29uU2Nyb2xsJykge1xuICAgICAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoJ3Njcm9sbCcsIGRvbUVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXh0UHJvcCAhPSBudWxsKSB7XG4gICAgICBzZXRWYWx1ZUZvclByb3BlcnR5KGRvbUVsZW1lbnQsIHByb3BLZXksIG5leHRQcm9wLCBpc0N1c3RvbUNvbXBvbmVudFRhZyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURPTVByb3BlcnRpZXMoZG9tRWxlbWVudCwgdXBkYXRlUGF5bG9hZCwgd2FzQ3VzdG9tQ29tcG9uZW50VGFnLCBpc0N1c3RvbUNvbXBvbmVudFRhZykge1xuICAvLyBUT0RPOiBIYW5kbGUgd2FzQ3VzdG9tQ29tcG9uZW50VGFnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdXBkYXRlUGF5bG9hZC5sZW5ndGg7IGkgKz0gMikge1xuICAgIHZhciBwcm9wS2V5ID0gdXBkYXRlUGF5bG9hZFtpXTtcbiAgICB2YXIgcHJvcFZhbHVlID0gdXBkYXRlUGF5bG9hZFtpICsgMV07XG5cbiAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgIHNldFZhbHVlRm9yU3R5bGVzKGRvbUVsZW1lbnQsIHByb3BWYWx1ZSk7XG4gICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBEQU5HRVJPVVNMWV9TRVRfSU5ORVJfSFRNTCkge1xuICAgICAgc2V0SW5uZXJIVE1MKGRvbUVsZW1lbnQsIHByb3BWYWx1ZSk7XG4gICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBDSElMRFJFTikge1xuICAgICAgc2V0VGV4dENvbnRlbnQoZG9tRWxlbWVudCwgcHJvcFZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0VmFsdWVGb3JQcm9wZXJ0eShkb21FbGVtZW50LCBwcm9wS2V5LCBwcm9wVmFsdWUsIGlzQ3VzdG9tQ29tcG9uZW50VGFnKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckVsZW1lbnQsIHBhcmVudE5hbWVzcGFjZSkge1xuICB2YXIgaXNDdXN0b21Db21wb25lbnRUYWc7IC8vIFdlIGNyZWF0ZSB0YWdzIGluIHRoZSBuYW1lc3BhY2Ugb2YgdGhlaXIgcGFyZW50IGNvbnRhaW5lciwgZXhjZXB0IEhUTUxcbiAgLy8gdGFncyBnZXQgbm8gbmFtZXNwYWNlLlxuXG4gIHZhciBvd25lckRvY3VtZW50ID0gZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyKHJvb3RDb250YWluZXJFbGVtZW50KTtcbiAgdmFyIGRvbUVsZW1lbnQ7XG4gIHZhciBuYW1lc3BhY2VVUkkgPSBwYXJlbnROYW1lc3BhY2U7XG5cbiAgaWYgKG5hbWVzcGFjZVVSSSA9PT0gSFRNTF9OQU1FU1BBQ0UpIHtcbiAgICBuYW1lc3BhY2VVUkkgPSBnZXRJbnRyaW5zaWNOYW1lc3BhY2UodHlwZSk7XG4gIH1cblxuICBpZiAobmFtZXNwYWNlVVJJID09PSBIVE1MX05BTUVTUEFDRSkge1xuICAgIHtcbiAgICAgIGlzQ3VzdG9tQ29tcG9uZW50VGFnID0gaXNDdXN0b21Db21wb25lbnQodHlwZSwgcHJvcHMpOyAvLyBTaG91bGQgdGhpcyBjaGVjayBiZSBnYXRlZCBieSBwYXJlbnQgbmFtZXNwYWNlPyBOb3Qgc3VyZSB3ZSB3YW50IHRvXG4gICAgICAvLyBhbGxvdyA8U1ZHPiBvciA8bUFUSD4uXG5cbiAgICAgIGlmICghaXNDdXN0b21Db21wb25lbnRUYWcgJiYgdHlwZSAhPT0gdHlwZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIGVycm9yKCc8JXMgLz4gaXMgdXNpbmcgaW5jb3JyZWN0IGNhc2luZy4gJyArICdVc2UgUGFzY2FsQ2FzZSBmb3IgUmVhY3QgY29tcG9uZW50cywgJyArICdvciBsb3dlcmNhc2UgZm9yIEhUTUwgZWxlbWVudHMuJywgdHlwZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09ICdzY3JpcHQnKSB7XG4gICAgICAvLyBDcmVhdGUgdGhlIHNjcmlwdCB2aWEgLmlubmVySFRNTCBzbyBpdHMgXCJwYXJzZXItaW5zZXJ0ZWRcIiBmbGFnIGlzXG4gICAgICAvLyBzZXQgdG8gdHJ1ZSBhbmQgaXQgZG9lcyBub3QgZXhlY3V0ZVxuICAgICAgdmFyIGRpdiA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgICAgIGRpdi5pbm5lckhUTUwgPSAnPHNjcmlwdD48JyArICcvc2NyaXB0Pic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICAgIC8vIFRoaXMgaXMgZ3VhcmFudGVlZCB0byB5aWVsZCBhIHNjcmlwdCBlbGVtZW50LlxuXG4gICAgICB2YXIgZmlyc3RDaGlsZCA9IGRpdi5maXJzdENoaWxkO1xuICAgICAgZG9tRWxlbWVudCA9IGRpdi5yZW1vdmVDaGlsZChmaXJzdENoaWxkKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9wcy5pcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vICRGbG93SXNzdWUgYGNyZWF0ZUVsZW1lbnRgIHNob3VsZCBiZSB1cGRhdGVkIGZvciBXZWIgQ29tcG9uZW50c1xuICAgICAgZG9tRWxlbWVudCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlLCB7XG4gICAgICAgIGlzOiBwcm9wcy5pc1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNlcGFyYXRlIGVsc2UgYnJhbmNoIGluc3RlYWQgb2YgdXNpbmcgYHByb3BzLmlzIHx8IHVuZGVmaW5lZGAgYWJvdmUgYmVjYXVzZSBvZiBhIEZpcmVmb3ggYnVnLlxuICAgICAgLy8gU2VlIGRpc2N1c3Npb24gaW4gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvNjg5NlxuICAgICAgLy8gYW5kIGRpc2N1c3Npb24gaW4gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTI3NjI0MFxuICAgICAgZG9tRWxlbWVudCA9IG93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0eXBlKTsgLy8gTm9ybWFsbHkgYXR0cmlidXRlcyBhcmUgYXNzaWduZWQgaW4gYHNldEluaXRpYWxET01Qcm9wZXJ0aWVzYCwgaG93ZXZlciB0aGUgYG11bHRpcGxlYCBhbmQgYHNpemVgXG4gICAgICAvLyBhdHRyaWJ1dGVzIG9uIGBzZWxlY3RgcyBuZWVkcyB0byBiZSBhZGRlZCBiZWZvcmUgYG9wdGlvbmBzIGFyZSBpbnNlcnRlZC5cbiAgICAgIC8vIFRoaXMgcHJldmVudHM6XG4gICAgICAvLyAtIGEgYnVnIHdoZXJlIHRoZSBgc2VsZWN0YCBkb2VzIG5vdCBzY3JvbGwgdG8gdGhlIGNvcnJlY3Qgb3B0aW9uIGJlY2F1c2Ugc2luZ3VsYXJcbiAgICAgIC8vICBgc2VsZWN0YCBlbGVtZW50cyBhdXRvbWF0aWNhbGx5IHBpY2sgdGhlIGZpcnN0IGl0ZW0gIzEzMjIyXG4gICAgICAvLyAtIGEgYnVnIHdoZXJlIHRoZSBgc2VsZWN0YCBzZXQgdGhlIGZpcnN0IGl0ZW0gYXMgc2VsZWN0ZWQgZGVzcGl0ZSB0aGUgYHNpemVgIGF0dHJpYnV0ZSAjMTQyMzlcbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzEzMjIyXG4gICAgICAvLyBhbmQgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNDIzOVxuXG4gICAgICBpZiAodHlwZSA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBkb21FbGVtZW50O1xuXG4gICAgICAgIGlmIChwcm9wcy5tdWx0aXBsZSkge1xuICAgICAgICAgIG5vZGUubXVsdGlwbGUgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BzLnNpemUpIHtcbiAgICAgICAgICAvLyBTZXR0aW5nIGEgc2l6ZSBncmVhdGVyIHRoYW4gMSBjYXVzZXMgYSBzZWxlY3QgdG8gYmVoYXZlIGxpa2UgYG11bHRpcGxlPXRydWVgLCB3aGVyZVxuICAgICAgICAgIC8vIGl0IGlzIHBvc3NpYmxlIHRoYXQgbm8gb3B0aW9uIGlzIHNlbGVjdGVkLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gVGhpcyBpcyBvbmx5IG5lY2Vzc2FyeSB3aGVuIGEgc2VsZWN0IGluIFwic2luZ2xlIHNlbGVjdGlvbiBtb2RlXCIuXG4gICAgICAgICAgbm9kZS5zaXplID0gcHJvcHMuc2l6ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkb21FbGVtZW50ID0gb3duZXJEb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlVVJJLCB0eXBlKTtcbiAgfVxuXG4gIHtcbiAgICBpZiAobmFtZXNwYWNlVVJJID09PSBIVE1MX05BTUVTUEFDRSkge1xuICAgICAgaWYgKCFpc0N1c3RvbUNvbXBvbmVudFRhZyAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZG9tRWxlbWVudCkgPT09ICdbb2JqZWN0IEhUTUxVbmtub3duRWxlbWVudF0nICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKHdhcm5lZFVua25vd25UYWdzLCB0eXBlKSkge1xuICAgICAgICB3YXJuZWRVbmtub3duVGFnc1t0eXBlXSA9IHRydWU7XG5cbiAgICAgICAgZXJyb3IoJ1RoZSB0YWcgPCVzPiBpcyB1bnJlY29nbml6ZWQgaW4gdGhpcyBicm93c2VyLiAnICsgJ0lmIHlvdSBtZWFudCB0byByZW5kZXIgYSBSZWFjdCBjb21wb25lbnQsIHN0YXJ0IGl0cyBuYW1lIHdpdGggJyArICdhbiB1cHBlcmNhc2UgbGV0dGVyLicsIHR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkb21FbGVtZW50O1xufVxuZnVuY3Rpb24gY3JlYXRlVGV4dE5vZGUodGV4dCwgcm9vdENvbnRhaW5lckVsZW1lbnQpIHtcbiAgcmV0dXJuIGdldE93bmVyRG9jdW1lbnRGcm9tUm9vdENvbnRhaW5lcihyb290Q29udGFpbmVyRWxlbWVudCkuY3JlYXRlVGV4dE5vZGUodGV4dCk7XG59XG5mdW5jdGlvbiBzZXRJbml0aWFsUHJvcGVydGllcyhkb21FbGVtZW50LCB0YWcsIHJhd1Byb3BzLCByb290Q29udGFpbmVyRWxlbWVudCkge1xuICB2YXIgaXNDdXN0b21Db21wb25lbnRUYWcgPSBpc0N1c3RvbUNvbXBvbmVudCh0YWcsIHJhd1Byb3BzKTtcblxuICB7XG4gICAgdmFsaWRhdGVQcm9wZXJ0aWVzSW5EZXZlbG9wbWVudCh0YWcsIHJhd1Byb3BzKTtcbiAgfSAvLyBUT0RPOiBNYWtlIHN1cmUgdGhhdCB3ZSBjaGVjayBpc01vdW50ZWQgYmVmb3JlIGZpcmluZyBhbnkgb2YgdGhlc2UgZXZlbnRzLlxuXG5cbiAgdmFyIHByb3BzO1xuXG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSAnZGlhbG9nJzpcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoJ2NhbmNlbCcsIGRvbUVsZW1lbnQpO1xuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudCgnY2xvc2UnLCBkb21FbGVtZW50KTtcbiAgICAgIHByb3BzID0gcmF3UHJvcHM7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2lmcmFtZSc6XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICBjYXNlICdlbWJlZCc6XG4gICAgICAvLyBXZSBsaXN0ZW4gdG8gdGhpcyBldmVudCBpbiBjYXNlIHRvIGVuc3VyZSBlbXVsYXRlZCBidWJibGVcbiAgICAgIC8vIGxpc3RlbmVycyBzdGlsbCBmaXJlIGZvciB0aGUgbG9hZCBldmVudC5cbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoJ2xvYWQnLCBkb21FbGVtZW50KTtcbiAgICAgIHByb3BzID0gcmF3UHJvcHM7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3ZpZGVvJzpcbiAgICBjYXNlICdhdWRpbyc6XG4gICAgICAvLyBXZSBsaXN0ZW4gdG8gdGhlc2UgZXZlbnRzIGluIGNhc2UgdG8gZW5zdXJlIGVtdWxhdGVkIGJ1YmJsZVxuICAgICAgLy8gbGlzdGVuZXJzIHN0aWxsIGZpcmUgZm9yIGFsbCB0aGUgbWVkaWEgZXZlbnRzLlxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZWRpYUV2ZW50VHlwZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudChtZWRpYUV2ZW50VHlwZXNbaV0sIGRvbUVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBwcm9wcyA9IHJhd1Byb3BzO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdzb3VyY2UnOlxuICAgICAgLy8gV2UgbGlzdGVuIHRvIHRoaXMgZXZlbnQgaW4gY2FzZSB0byBlbnN1cmUgZW11bGF0ZWQgYnViYmxlXG4gICAgICAvLyBsaXN0ZW5lcnMgc3RpbGwgZmlyZSBmb3IgdGhlIGVycm9yIGV2ZW50LlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudCgnZXJyb3InLCBkb21FbGVtZW50KTtcbiAgICAgIHByb3BzID0gcmF3UHJvcHM7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2ltZyc6XG4gICAgY2FzZSAnaW1hZ2UnOlxuICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgLy8gV2UgbGlzdGVuIHRvIHRoZXNlIGV2ZW50cyBpbiBjYXNlIHRvIGVuc3VyZSBlbXVsYXRlZCBidWJibGVcbiAgICAgIC8vIGxpc3RlbmVycyBzdGlsbCBmaXJlIGZvciBlcnJvciBhbmQgbG9hZCBldmVudHMuXG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KCdlcnJvcicsIGRvbUVsZW1lbnQpO1xuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudCgnbG9hZCcsIGRvbUVsZW1lbnQpO1xuICAgICAgcHJvcHMgPSByYXdQcm9wcztcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnZGV0YWlscyc6XG4gICAgICAvLyBXZSBsaXN0ZW4gdG8gdGhpcyBldmVudCBpbiBjYXNlIHRvIGVuc3VyZSBlbXVsYXRlZCBidWJibGVcbiAgICAgIC8vIGxpc3RlbmVycyBzdGlsbCBmaXJlIGZvciB0aGUgdG9nZ2xlIGV2ZW50LlxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudCgndG9nZ2xlJywgZG9tRWxlbWVudCk7XG4gICAgICBwcm9wcyA9IHJhd1Byb3BzO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICBpbml0V3JhcHBlclN0YXRlKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHByb3BzID0gZ2V0SG9zdFByb3BzKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTsgLy8gV2UgbGlzdGVuIHRvIHRoaXMgZXZlbnQgaW4gY2FzZSB0byBlbnN1cmUgZW11bGF0ZWQgYnViYmxlXG4gICAgICAvLyBsaXN0ZW5lcnMgc3RpbGwgZmlyZSBmb3IgdGhlIGludmFsaWQgZXZlbnQuXG5cbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoJ2ludmFsaWQnLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgIHZhbGlkYXRlUHJvcHMoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgcHJvcHMgPSByYXdQcm9wcztcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGluaXRXcmFwcGVyU3RhdGUkMShkb21FbGVtZW50LCByYXdQcm9wcyk7XG4gICAgICBwcm9wcyA9IGdldEhvc3RQcm9wcyQxKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTsgLy8gV2UgbGlzdGVuIHRvIHRoaXMgZXZlbnQgaW4gY2FzZSB0byBlbnN1cmUgZW11bGF0ZWQgYnViYmxlXG4gICAgICAvLyBsaXN0ZW5lcnMgc3RpbGwgZmlyZSBmb3IgdGhlIGludmFsaWQgZXZlbnQuXG5cbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoJ2ludmFsaWQnLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgaW5pdFdyYXBwZXJTdGF0ZSQyKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIHByb3BzID0gZ2V0SG9zdFByb3BzJDIoZG9tRWxlbWVudCwgcmF3UHJvcHMpOyAvLyBXZSBsaXN0ZW4gdG8gdGhpcyBldmVudCBpbiBjYXNlIHRvIGVuc3VyZSBlbXVsYXRlZCBidWJibGVcbiAgICAgIC8vIGxpc3RlbmVycyBzdGlsbCBmaXJlIGZvciB0aGUgaW52YWxpZCBldmVudC5cblxuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudCgnaW52YWxpZCcsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcHJvcHMgPSByYXdQcm9wcztcbiAgfVxuXG4gIGFzc2VydFZhbGlkUHJvcHModGFnLCBwcm9wcyk7XG4gIHNldEluaXRpYWxET01Qcm9wZXJ0aWVzKHRhZywgZG9tRWxlbWVudCwgcm9vdENvbnRhaW5lckVsZW1lbnQsIHByb3BzLCBpc0N1c3RvbUNvbXBvbmVudFRhZyk7XG5cbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICAvLyBUT0RPOiBNYWtlIHN1cmUgd2UgY2hlY2sgaWYgdGhpcyBpcyBzdGlsbCB1bm1vdW50ZWQgb3IgZG8gYW55IGNsZWFuXG4gICAgICAvLyB1cCBuZWNlc3Nhcnkgc2luY2Ugd2UgbmV2ZXIgc3RvcCB0cmFja2luZyBhbnltb3JlLlxuICAgICAgdHJhY2soZG9tRWxlbWVudCk7XG4gICAgICBwb3N0TW91bnRXcmFwcGVyKGRvbUVsZW1lbnQsIHJhd1Byb3BzLCBmYWxzZSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgIC8vIFRPRE86IE1ha2Ugc3VyZSB3ZSBjaGVjayBpZiB0aGlzIGlzIHN0aWxsIHVubW91bnRlZCBvciBkbyBhbnkgY2xlYW5cbiAgICAgIC8vIHVwIG5lY2Vzc2FyeSBzaW5jZSB3ZSBuZXZlciBzdG9wIHRyYWNraW5nIGFueW1vcmUuXG4gICAgICB0cmFjayhkb21FbGVtZW50KTtcbiAgICAgIHBvc3RNb3VudFdyYXBwZXIkMyhkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnb3B0aW9uJzpcbiAgICAgIHBvc3RNb3VudFdyYXBwZXIkMShkb21FbGVtZW50LCByYXdQcm9wcyk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICBwb3N0TW91bnRXcmFwcGVyJDIoZG9tRWxlbWVudCwgcmF3UHJvcHMpO1xuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHR5cGVvZiBwcm9wcy5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIFRPRE86IFRoaXMgY2FzdCBtYXkgbm90IGJlIHNvdW5kIGZvciBTVkcsIE1hdGhNTCBvciBjdXN0b20gZWxlbWVudHMuXG4gICAgICAgIHRyYXBDbGlja09uTm9uSW50ZXJhY3RpdmVFbGVtZW50KGRvbUVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgfVxufSAvLyBDYWxjdWxhdGUgdGhlIGRpZmYgYmV0d2VlbiB0aGUgdHdvIG9iamVjdHMuXG5cbmZ1bmN0aW9uIGRpZmZQcm9wZXJ0aWVzKGRvbUVsZW1lbnQsIHRhZywgbGFzdFJhd1Byb3BzLCBuZXh0UmF3UHJvcHMsIHJvb3RDb250YWluZXJFbGVtZW50KSB7XG4gIHtcbiAgICB2YWxpZGF0ZVByb3BlcnRpZXNJbkRldmVsb3BtZW50KHRhZywgbmV4dFJhd1Byb3BzKTtcbiAgfVxuXG4gIHZhciB1cGRhdGVQYXlsb2FkID0gbnVsbDtcbiAgdmFyIGxhc3RQcm9wcztcbiAgdmFyIG5leHRQcm9wcztcblxuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgJ2lucHV0JzpcbiAgICAgIGxhc3RQcm9wcyA9IGdldEhvc3RQcm9wcyhkb21FbGVtZW50LCBsYXN0UmF3UHJvcHMpO1xuICAgICAgbmV4dFByb3BzID0gZ2V0SG9zdFByb3BzKGRvbUVsZW1lbnQsIG5leHRSYXdQcm9wcyk7XG4gICAgICB1cGRhdGVQYXlsb2FkID0gW107XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICBsYXN0UHJvcHMgPSBnZXRIb3N0UHJvcHMkMShkb21FbGVtZW50LCBsYXN0UmF3UHJvcHMpO1xuICAgICAgbmV4dFByb3BzID0gZ2V0SG9zdFByb3BzJDEoZG9tRWxlbWVudCwgbmV4dFJhd1Byb3BzKTtcbiAgICAgIHVwZGF0ZVBheWxvYWQgPSBbXTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndGV4dGFyZWEnOlxuICAgICAgbGFzdFByb3BzID0gZ2V0SG9zdFByb3BzJDIoZG9tRWxlbWVudCwgbGFzdFJhd1Byb3BzKTtcbiAgICAgIG5leHRQcm9wcyA9IGdldEhvc3RQcm9wcyQyKGRvbUVsZW1lbnQsIG5leHRSYXdQcm9wcyk7XG4gICAgICB1cGRhdGVQYXlsb2FkID0gW107XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBsYXN0UHJvcHMgPSBsYXN0UmF3UHJvcHM7XG4gICAgICBuZXh0UHJvcHMgPSBuZXh0UmF3UHJvcHM7XG5cbiAgICAgIGlmICh0eXBlb2YgbGFzdFByb3BzLm9uQ2xpY2sgIT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG5leHRQcm9wcy5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIFRPRE86IFRoaXMgY2FzdCBtYXkgbm90IGJlIHNvdW5kIGZvciBTVkcsIE1hdGhNTCBvciBjdXN0b20gZWxlbWVudHMuXG4gICAgICAgIHRyYXBDbGlja09uTm9uSW50ZXJhY3RpdmVFbGVtZW50KGRvbUVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgfVxuXG4gIGFzc2VydFZhbGlkUHJvcHModGFnLCBuZXh0UHJvcHMpO1xuICB2YXIgcHJvcEtleTtcbiAgdmFyIHN0eWxlTmFtZTtcbiAgdmFyIHN0eWxlVXBkYXRlcyA9IG51bGw7XG5cbiAgZm9yIChwcm9wS2V5IGluIGxhc3RQcm9wcykge1xuICAgIGlmIChuZXh0UHJvcHMuaGFzT3duUHJvcGVydHkocHJvcEtleSkgfHwgIWxhc3RQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fCBsYXN0UHJvcHNbcHJvcEtleV0gPT0gbnVsbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHByb3BLZXkgPT09IFNUWUxFKSB7XG4gICAgICB2YXIgbGFzdFN0eWxlID0gbGFzdFByb3BzW3Byb3BLZXldO1xuXG4gICAgICBmb3IgKHN0eWxlTmFtZSBpbiBsYXN0U3R5bGUpIHtcbiAgICAgICAgaWYgKGxhc3RTdHlsZS5oYXNPd25Qcm9wZXJ0eShzdHlsZU5hbWUpKSB7XG4gICAgICAgICAgaWYgKCFzdHlsZVVwZGF0ZXMpIHtcbiAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHt9O1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHN0eWxlVXBkYXRlc1tzdHlsZU5hbWVdID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb3BLZXkgPT09IERBTkdFUk9VU0xZX1NFVF9JTk5FUl9IVE1MIHx8IHByb3BLZXkgPT09IENISUxEUkVOKSA7IGVsc2UgaWYgKHByb3BLZXkgPT09IFNVUFBSRVNTX0NPTlRFTlRfRURJVEFCTEVfV0FSTklORyB8fCBwcm9wS2V5ID09PSBTVVBQUkVTU19IWURSQVRJT05fV0FSTklORykgOyBlbHNlIGlmIChwcm9wS2V5ID09PSBBVVRPRk9DVVMpIDsgZWxzZSBpZiAocmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgLy8gVGhpcyBpcyBhIHNwZWNpYWwgY2FzZS4gSWYgYW55IGxpc3RlbmVyIHVwZGF0ZXMgd2UgbmVlZCB0byBlbnN1cmVcbiAgICAgIC8vIHRoYXQgdGhlIFwiY3VycmVudFwiIGZpYmVyIHBvaW50ZXIgZ2V0cyB1cGRhdGVkIHNvIHdlIG5lZWQgYSBjb21taXRcbiAgICAgIC8vIHRvIHVwZGF0ZSB0aGlzIGVsZW1lbnQuXG4gICAgICBpZiAoIXVwZGF0ZVBheWxvYWQpIHtcbiAgICAgICAgdXBkYXRlUGF5bG9hZCA9IFtdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGb3IgYWxsIG90aGVyIGRlbGV0ZWQgcHJvcGVydGllcyB3ZSBhZGQgaXQgdG8gdGhlIHF1ZXVlLiBXZSB1c2VcbiAgICAgIC8vIHRoZSBhbGxvd2VkIHByb3BlcnR5IGxpc3QgaW4gdGhlIGNvbW1pdCBwaGFzZSBpbnN0ZWFkLlxuICAgICAgKHVwZGF0ZVBheWxvYWQgPSB1cGRhdGVQYXlsb2FkIHx8IFtdKS5wdXNoKHByb3BLZXksIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAocHJvcEtleSBpbiBuZXh0UHJvcHMpIHtcbiAgICB2YXIgbmV4dFByb3AgPSBuZXh0UHJvcHNbcHJvcEtleV07XG4gICAgdmFyIGxhc3RQcm9wID0gbGFzdFByb3BzICE9IG51bGwgPyBsYXN0UHJvcHNbcHJvcEtleV0gOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoIW5leHRQcm9wcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSB8fCBuZXh0UHJvcCA9PT0gbGFzdFByb3AgfHwgbmV4dFByb3AgPT0gbnVsbCAmJiBsYXN0UHJvcCA9PSBudWxsKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgIHtcbiAgICAgICAgaWYgKG5leHRQcm9wKSB7XG4gICAgICAgICAgLy8gRnJlZXplIHRoZSBuZXh0IHN0eWxlIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBhc3N1bWUgaXQgd29uJ3QgYmVcbiAgICAgICAgICAvLyBtdXRhdGVkLiBXZSBoYXZlIGFscmVhZHkgd2FybmVkIGZvciB0aGlzIGluIHRoZSBwYXN0LlxuICAgICAgICAgIE9iamVjdC5mcmVlemUobmV4dFByb3ApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChsYXN0UHJvcCkge1xuICAgICAgICAvLyBVbnNldCBzdHlsZXMgb24gYGxhc3RQcm9wYCBidXQgbm90IG9uIGBuZXh0UHJvcGAuXG4gICAgICAgIGZvciAoc3R5bGVOYW1lIGluIGxhc3RQcm9wKSB7XG4gICAgICAgICAgaWYgKGxhc3RQcm9wLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkgJiYgKCFuZXh0UHJvcCB8fCAhbmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSkpIHtcbiAgICAgICAgICAgIGlmICghc3R5bGVVcGRhdGVzKSB7XG4gICAgICAgICAgICAgIHN0eWxlVXBkYXRlcyA9IHt9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzdHlsZVVwZGF0ZXNbc3R5bGVOYW1lXSA9ICcnO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBVcGRhdGUgc3R5bGVzIHRoYXQgY2hhbmdlZCBzaW5jZSBgbGFzdFByb3BgLlxuXG5cbiAgICAgICAgZm9yIChzdHlsZU5hbWUgaW4gbmV4dFByb3ApIHtcbiAgICAgICAgICBpZiAobmV4dFByb3AuaGFzT3duUHJvcGVydHkoc3R5bGVOYW1lKSAmJiBsYXN0UHJvcFtzdHlsZU5hbWVdICE9PSBuZXh0UHJvcFtzdHlsZU5hbWVdKSB7XG4gICAgICAgICAgICBpZiAoIXN0eWxlVXBkYXRlcykge1xuICAgICAgICAgICAgICBzdHlsZVVwZGF0ZXMgPSB7fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc3R5bGVVcGRhdGVzW3N0eWxlTmFtZV0gPSBuZXh0UHJvcFtzdHlsZU5hbWVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmVsaWVzIG9uIGB1cGRhdGVTdHlsZXNCeUlEYCBub3QgbXV0YXRpbmcgYHN0eWxlVXBkYXRlc2AuXG4gICAgICAgIGlmICghc3R5bGVVcGRhdGVzKSB7XG4gICAgICAgICAgaWYgKCF1cGRhdGVQYXlsb2FkKSB7XG4gICAgICAgICAgICB1cGRhdGVQYXlsb2FkID0gW107XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdXBkYXRlUGF5bG9hZC5wdXNoKHByb3BLZXksIHN0eWxlVXBkYXRlcyk7XG4gICAgICAgIH1cblxuICAgICAgICBzdHlsZVVwZGF0ZXMgPSBuZXh0UHJvcDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb3BLZXkgPT09IERBTkdFUk9VU0xZX1NFVF9JTk5FUl9IVE1MKSB7XG4gICAgICB2YXIgbmV4dEh0bWwgPSBuZXh0UHJvcCA/IG5leHRQcm9wW0hUTUwkMV0gOiB1bmRlZmluZWQ7XG4gICAgICB2YXIgbGFzdEh0bWwgPSBsYXN0UHJvcCA/IGxhc3RQcm9wW0hUTUwkMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChuZXh0SHRtbCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChsYXN0SHRtbCAhPT0gbmV4dEh0bWwpIHtcbiAgICAgICAgICAodXBkYXRlUGF5bG9hZCA9IHVwZGF0ZVBheWxvYWQgfHwgW10pLnB1c2gocHJvcEtleSwgbmV4dEh0bWwpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBDSElMRFJFTikge1xuICAgICAgaWYgKHR5cGVvZiBuZXh0UHJvcCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5leHRQcm9wID09PSAnbnVtYmVyJykge1xuICAgICAgICAodXBkYXRlUGF5bG9hZCA9IHVwZGF0ZVBheWxvYWQgfHwgW10pLnB1c2gocHJvcEtleSwgJycgKyBuZXh0UHJvcCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcm9wS2V5ID09PSBTVVBQUkVTU19DT05URU5UX0VESVRBQkxFX1dBUk5JTkcgfHwgcHJvcEtleSA9PT0gU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkcpIDsgZWxzZSBpZiAocmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcy5oYXNPd25Qcm9wZXJ0eShwcm9wS2V5KSkge1xuICAgICAgaWYgKG5leHRQcm9wICE9IG51bGwpIHtcbiAgICAgICAgLy8gV2UgZWFnZXJseSBsaXN0ZW4gdG8gdGhpcyBldmVuIHRob3VnaCB3ZSBoYXZlbid0IGNvbW1pdHRlZCB5ZXQuXG4gICAgICAgIGlmICggdHlwZW9mIG5leHRQcm9wICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgd2FybkZvckludmFsaWRFdmVudExpc3RlbmVyKHByb3BLZXksIG5leHRQcm9wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9wS2V5ID09PSAnb25TY3JvbGwnKSB7XG4gICAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudCgnc2Nyb2xsJywgZG9tRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF1cGRhdGVQYXlsb2FkICYmIGxhc3RQcm9wICE9PSBuZXh0UHJvcCkge1xuICAgICAgICAvLyBUaGlzIGlzIGEgc3BlY2lhbCBjYXNlLiBJZiBhbnkgbGlzdGVuZXIgdXBkYXRlcyB3ZSBuZWVkIHRvIGVuc3VyZVxuICAgICAgICAvLyB0aGF0IHRoZSBcImN1cnJlbnRcIiBwcm9wcyBwb2ludGVyIGdldHMgdXBkYXRlZCBzbyB3ZSBuZWVkIGEgY29tbWl0XG4gICAgICAgIC8vIHRvIHVwZGF0ZSB0aGlzIGVsZW1lbnQuXG4gICAgICAgIHVwZGF0ZVBheWxvYWQgPSBbXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRm9yIGFueSBvdGhlciBwcm9wZXJ0eSB3ZSBhbHdheXMgYWRkIGl0IHRvIHRoZSBxdWV1ZSBhbmQgdGhlbiB3ZVxuICAgICAgLy8gZmlsdGVyIGl0IG91dCB1c2luZyB0aGUgYWxsb3dlZCBwcm9wZXJ0eSBsaXN0IGR1cmluZyB0aGUgY29tbWl0LlxuICAgICAgKHVwZGF0ZVBheWxvYWQgPSB1cGRhdGVQYXlsb2FkIHx8IFtdKS5wdXNoKHByb3BLZXksIG5leHRQcm9wKTtcbiAgICB9XG4gIH1cblxuICBpZiAoc3R5bGVVcGRhdGVzKSB7XG4gICAge1xuICAgICAgdmFsaWRhdGVTaG9ydGhhbmRQcm9wZXJ0eUNvbGxpc2lvbkluRGV2KHN0eWxlVXBkYXRlcywgbmV4dFByb3BzW1NUWUxFXSk7XG4gICAgfVxuXG4gICAgKHVwZGF0ZVBheWxvYWQgPSB1cGRhdGVQYXlsb2FkIHx8IFtdKS5wdXNoKFNUWUxFLCBzdHlsZVVwZGF0ZXMpO1xuICB9XG5cbiAgcmV0dXJuIHVwZGF0ZVBheWxvYWQ7XG59IC8vIEFwcGx5IHRoZSBkaWZmLlxuXG5mdW5jdGlvbiB1cGRhdGVQcm9wZXJ0aWVzKGRvbUVsZW1lbnQsIHVwZGF0ZVBheWxvYWQsIHRhZywgbGFzdFJhd1Byb3BzLCBuZXh0UmF3UHJvcHMpIHtcbiAgLy8gVXBkYXRlIGNoZWNrZWQgKmJlZm9yZSogbmFtZS5cbiAgLy8gSW4gdGhlIG1pZGRsZSBvZiBhbiB1cGRhdGUsIGl0IGlzIHBvc3NpYmxlIHRvIGhhdmUgbXVsdGlwbGUgY2hlY2tlZC5cbiAgLy8gV2hlbiBhIGNoZWNrZWQgcmFkaW8gdHJpZXMgdG8gY2hhbmdlIG5hbWUsIGJyb3dzZXIgbWFrZXMgYW5vdGhlciByYWRpbydzIGNoZWNrZWQgZmFsc2UuXG4gIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgbmV4dFJhd1Byb3BzLnR5cGUgPT09ICdyYWRpbycgJiYgbmV4dFJhd1Byb3BzLm5hbWUgIT0gbnVsbCkge1xuICAgIHVwZGF0ZUNoZWNrZWQoZG9tRWxlbWVudCwgbmV4dFJhd1Byb3BzKTtcbiAgfVxuXG4gIHZhciB3YXNDdXN0b21Db21wb25lbnRUYWcgPSBpc0N1c3RvbUNvbXBvbmVudCh0YWcsIGxhc3RSYXdQcm9wcyk7XG4gIHZhciBpc0N1c3RvbUNvbXBvbmVudFRhZyA9IGlzQ3VzdG9tQ29tcG9uZW50KHRhZywgbmV4dFJhd1Byb3BzKTsgLy8gQXBwbHkgdGhlIGRpZmYuXG5cbiAgdXBkYXRlRE9NUHJvcGVydGllcyhkb21FbGVtZW50LCB1cGRhdGVQYXlsb2FkLCB3YXNDdXN0b21Db21wb25lbnRUYWcsIGlzQ3VzdG9tQ29tcG9uZW50VGFnKTsgLy8gVE9ETzogRW5zdXJlIHRoYXQgYW4gdXBkYXRlIGdldHMgc2NoZWR1bGVkIGlmIGFueSBvZiB0aGUgc3BlY2lhbCBwcm9wc1xuICAvLyBjaGFuZ2VkLlxuXG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSAnaW5wdXQnOlxuICAgICAgLy8gVXBkYXRlIHRoZSB3cmFwcGVyIGFyb3VuZCBpbnB1dHMgKmFmdGVyKiB1cGRhdGluZyBwcm9wcy4gVGhpcyBoYXMgdG9cbiAgICAgIC8vIGhhcHBlbiBhZnRlciBgdXBkYXRlRE9NUHJvcGVydGllc2AuIE90aGVyd2lzZSBIVE1MNSBpbnB1dCB2YWxpZGF0aW9uc1xuICAgICAgLy8gcmFpc2Ugd2FybmluZ3MgYW5kIHByZXZlbnQgdGhlIG5ldyB2YWx1ZSBmcm9tIGJlaW5nIGFzc2lnbmVkLlxuICAgICAgdXBkYXRlV3JhcHBlcihkb21FbGVtZW50LCBuZXh0UmF3UHJvcHMpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICB1cGRhdGVXcmFwcGVyJDEoZG9tRWxlbWVudCwgbmV4dFJhd1Byb3BzKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIC8vIDxzZWxlY3Q+IHZhbHVlIHVwZGF0ZSBuZWVkcyB0byBvY2N1ciBhZnRlciA8b3B0aW9uPiBjaGlsZHJlblxuICAgICAgLy8gcmVjb25jaWxpYXRpb25cbiAgICAgIHBvc3RVcGRhdGVXcmFwcGVyKGRvbUVsZW1lbnQsIG5leHRSYXdQcm9wcyk7XG4gICAgICBicmVhaztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRQb3NzaWJsZVN0YW5kYXJkTmFtZShwcm9wTmFtZSkge1xuICB7XG4gICAgdmFyIGxvd2VyQ2FzZWROYW1lID0gcHJvcE5hbWUudG9Mb3dlckNhc2UoKTtcblxuICAgIGlmICghcG9zc2libGVTdGFuZGFyZE5hbWVzLmhhc093blByb3BlcnR5KGxvd2VyQ2FzZWROYW1lKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvc3NpYmxlU3RhbmRhcmROYW1lc1tsb3dlckNhc2VkTmFtZV0gfHwgbnVsbDtcbiAgfVxufVxuXG5mdW5jdGlvbiBkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzKGRvbUVsZW1lbnQsIHRhZywgcmF3UHJvcHMsIHBhcmVudE5hbWVzcGFjZSwgcm9vdENvbnRhaW5lckVsZW1lbnQsIGlzQ29uY3VycmVudE1vZGUsIHNob3VsZFdhcm5EZXYpIHtcbiAgdmFyIGlzQ3VzdG9tQ29tcG9uZW50VGFnO1xuICB2YXIgZXh0cmFBdHRyaWJ1dGVOYW1lcztcblxuICB7XG4gICAgaXNDdXN0b21Db21wb25lbnRUYWcgPSBpc0N1c3RvbUNvbXBvbmVudCh0YWcsIHJhd1Byb3BzKTtcbiAgICB2YWxpZGF0ZVByb3BlcnRpZXNJbkRldmVsb3BtZW50KHRhZywgcmF3UHJvcHMpO1xuICB9IC8vIFRPRE86IE1ha2Ugc3VyZSB0aGF0IHdlIGNoZWNrIGlzTW91bnRlZCBiZWZvcmUgZmlyaW5nIGFueSBvZiB0aGVzZSBldmVudHMuXG5cblxuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgJ2RpYWxvZyc6XG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KCdjYW5jZWwnLCBkb21FbGVtZW50KTtcbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoJ2Nsb3NlJywgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2lmcmFtZSc6XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICBjYXNlICdlbWJlZCc6XG4gICAgICAvLyBXZSBsaXN0ZW4gdG8gdGhpcyBldmVudCBpbiBjYXNlIHRvIGVuc3VyZSBlbXVsYXRlZCBidWJibGVcbiAgICAgIC8vIGxpc3RlbmVycyBzdGlsbCBmaXJlIGZvciB0aGUgbG9hZCBldmVudC5cbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoJ2xvYWQnLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAndmlkZW8nOlxuICAgIGNhc2UgJ2F1ZGlvJzpcbiAgICAgIC8vIFdlIGxpc3RlbiB0byB0aGVzZSBldmVudHMgaW4gY2FzZSB0byBlbnN1cmUgZW11bGF0ZWQgYnViYmxlXG4gICAgICAvLyBsaXN0ZW5lcnMgc3RpbGwgZmlyZSBmb3IgYWxsIHRoZSBtZWRpYSBldmVudHMuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lZGlhRXZlbnRUeXBlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KG1lZGlhRXZlbnRUeXBlc1tpXSwgZG9tRWxlbWVudCk7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnc291cmNlJzpcbiAgICAgIC8vIFdlIGxpc3RlbiB0byB0aGlzIGV2ZW50IGluIGNhc2UgdG8gZW5zdXJlIGVtdWxhdGVkIGJ1YmJsZVxuICAgICAgLy8gbGlzdGVuZXJzIHN0aWxsIGZpcmUgZm9yIHRoZSBlcnJvciBldmVudC5cbiAgICAgIGxpc3RlblRvTm9uRGVsZWdhdGVkRXZlbnQoJ2Vycm9yJywgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ2ltZyc6XG4gICAgY2FzZSAnaW1hZ2UnOlxuICAgIGNhc2UgJ2xpbmsnOlxuICAgICAgLy8gV2UgbGlzdGVuIHRvIHRoZXNlIGV2ZW50cyBpbiBjYXNlIHRvIGVuc3VyZSBlbXVsYXRlZCBidWJibGVcbiAgICAgIC8vIGxpc3RlbmVycyBzdGlsbCBmaXJlIGZvciBlcnJvciBhbmQgbG9hZCBldmVudHMuXG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KCdlcnJvcicsIGRvbUVsZW1lbnQpO1xuICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudCgnbG9hZCcsIGRvbUVsZW1lbnQpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdkZXRhaWxzJzpcbiAgICAgIC8vIFdlIGxpc3RlbiB0byB0aGlzIGV2ZW50IGluIGNhc2UgdG8gZW5zdXJlIGVtdWxhdGVkIGJ1YmJsZVxuICAgICAgLy8gbGlzdGVuZXJzIHN0aWxsIGZpcmUgZm9yIHRoZSB0b2dnbGUgZXZlbnQuXG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KCd0b2dnbGUnLCBkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnaW5wdXQnOlxuICAgICAgaW5pdFdyYXBwZXJTdGF0ZShkb21FbGVtZW50LCByYXdQcm9wcyk7IC8vIFdlIGxpc3RlbiB0byB0aGlzIGV2ZW50IGluIGNhc2UgdG8gZW5zdXJlIGVtdWxhdGVkIGJ1YmJsZVxuICAgICAgLy8gbGlzdGVuZXJzIHN0aWxsIGZpcmUgZm9yIHRoZSBpbnZhbGlkIGV2ZW50LlxuXG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KCdpbnZhbGlkJywgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ29wdGlvbic6XG4gICAgICB2YWxpZGF0ZVByb3BzKGRvbUVsZW1lbnQsIHJhd1Byb3BzKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICAgIGluaXRXcmFwcGVyU3RhdGUkMShkb21FbGVtZW50LCByYXdQcm9wcyk7IC8vIFdlIGxpc3RlbiB0byB0aGlzIGV2ZW50IGluIGNhc2UgdG8gZW5zdXJlIGVtdWxhdGVkIGJ1YmJsZVxuICAgICAgLy8gbGlzdGVuZXJzIHN0aWxsIGZpcmUgZm9yIHRoZSBpbnZhbGlkIGV2ZW50LlxuXG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KCdpbnZhbGlkJywgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgIGluaXRXcmFwcGVyU3RhdGUkMihkb21FbGVtZW50LCByYXdQcm9wcyk7IC8vIFdlIGxpc3RlbiB0byB0aGlzIGV2ZW50IGluIGNhc2UgdG8gZW5zdXJlIGVtdWxhdGVkIGJ1YmJsZVxuICAgICAgLy8gbGlzdGVuZXJzIHN0aWxsIGZpcmUgZm9yIHRoZSBpbnZhbGlkIGV2ZW50LlxuXG4gICAgICBsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50KCdpbnZhbGlkJywgZG9tRWxlbWVudCk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGFzc2VydFZhbGlkUHJvcHModGFnLCByYXdQcm9wcyk7XG5cbiAge1xuICAgIGV4dHJhQXR0cmlidXRlTmFtZXMgPSBuZXcgU2V0KCk7XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBkb21FbGVtZW50LmF0dHJpYnV0ZXM7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXR0cmlidXRlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBuYW1lID0gYXR0cmlidXRlc1tfaV0ubmFtZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICBzd2l0Y2ggKG5hbWUpIHtcbiAgICAgICAgLy8gQ29udHJvbGxlZCBhdHRyaWJ1dGVzIGFyZSBub3QgdmFsaWRhdGVkXG4gICAgICAgIC8vIFRPRE86IE9ubHkgaWdub3JlIHRoZW0gb24gY29udHJvbGxlZCB0YWdzLlxuICAgICAgICBjYXNlICd2YWx1ZSc6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnY2hlY2tlZCc6XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnc2VsZWN0ZWQnOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgLy8gSW50ZW50aW9uYWxseSB1c2UgdGhlIG9yaWdpbmFsIG5hbWUuXG4gICAgICAgICAgLy8gU2VlIGRpc2N1c3Npb24gaW4gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMTA2NzYuXG4gICAgICAgICAgZXh0cmFBdHRyaWJ1dGVOYW1lcy5hZGQoYXR0cmlidXRlc1tfaV0ubmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHVwZGF0ZVBheWxvYWQgPSBudWxsO1xuXG4gIGZvciAodmFyIHByb3BLZXkgaW4gcmF3UHJvcHMpIHtcbiAgICBpZiAoIXJhd1Byb3BzLmhhc093blByb3BlcnR5KHByb3BLZXkpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dFByb3AgPSByYXdQcm9wc1twcm9wS2V5XTtcblxuICAgIGlmIChwcm9wS2V5ID09PSBDSElMRFJFTikge1xuICAgICAgLy8gRm9yIHRleHQgY29udGVudCBjaGlsZHJlbiB3ZSBjb21wYXJlIGFnYWluc3QgdGV4dENvbnRlbnQuIFRoaXNcbiAgICAgIC8vIG1pZ2h0IG1hdGNoIGFkZGl0aW9uYWwgSFRNTCB0aGF0IGlzIGhpZGRlbiB3aGVuIHdlIHJlYWQgaXQgdXNpbmdcbiAgICAgIC8vIHRleHRDb250ZW50LiBFLmcuIFwiZm9vXCIgd2lsbCBtYXRjaCBcImY8c3Bhbj5vbzwvc3Bhbj5cIiBidXQgdGhhdCBzdGlsbFxuICAgICAgLy8gc2F0aXNmaWVzIG91ciByZXF1aXJlbWVudC4gT3VyIHJlcXVpcmVtZW50IGlzIG5vdCB0byBwcm9kdWNlIHBlcmZlY3RcbiAgICAgIC8vIEhUTUwgYW5kIGF0dHJpYnV0ZXMuIElkZWFsbHkgd2Ugc2hvdWxkIHByZXNlcnZlIHN0cnVjdHVyZSBidXQgaXQnc1xuICAgICAgLy8gb2sgbm90IHRvIGlmIHRoZSB2aXNpYmxlIGNvbnRlbnQgaXMgc3RpbGwgZW5vdWdoIHRvIGluZGljYXRlIHdoYXRcbiAgICAgIC8vIGV2ZW4gbGlzdGVuZXJzIHRoZXNlIG5vZGVzIG1pZ2h0IGJlIHdpcmVkIHVwIHRvLlxuICAgICAgLy8gVE9ETzogV2FybiBpZiB0aGVyZSBpcyBtb3JlIHRoYW4gYSBzaW5nbGUgdGV4dE5vZGUgYXMgYSBjaGlsZC5cbiAgICAgIC8vIFRPRE86IFNob3VsZCB3ZSB1c2UgZG9tRWxlbWVudC5maXJzdENoaWxkLm5vZGVWYWx1ZSB0byBjb21wYXJlP1xuICAgICAgaWYgKHR5cGVvZiBuZXh0UHJvcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKGRvbUVsZW1lbnQudGV4dENvbnRlbnQgIT09IG5leHRQcm9wKSB7XG4gICAgICAgICAgaWYgKHJhd1Byb3BzW1NVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgY2hlY2tGb3JVbm1hdGNoZWRUZXh0KGRvbUVsZW1lbnQudGV4dENvbnRlbnQsIG5leHRQcm9wLCBpc0NvbmN1cnJlbnRNb2RlLCBzaG91bGRXYXJuRGV2KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB1cGRhdGVQYXlsb2FkID0gW0NISUxEUkVOLCBuZXh0UHJvcF07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5leHRQcm9wID09PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoZG9tRWxlbWVudC50ZXh0Q29udGVudCAhPT0gJycgKyBuZXh0UHJvcCkge1xuICAgICAgICAgIGlmIChyYXdQcm9wc1tTVVBQUkVTU19IWURSQVRJT05fV0FSTklOR10gIT09IHRydWUpIHtcbiAgICAgICAgICAgIGNoZWNrRm9yVW5tYXRjaGVkVGV4dChkb21FbGVtZW50LnRleHRDb250ZW50LCBuZXh0UHJvcCwgaXNDb25jdXJyZW50TW9kZSwgc2hvdWxkV2FybkRldik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdXBkYXRlUGF5bG9hZCA9IFtDSElMRFJFTiwgJycgKyBuZXh0UHJvcF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMuaGFzT3duUHJvcGVydHkocHJvcEtleSkpIHtcbiAgICAgIGlmIChuZXh0UHJvcCAhPSBudWxsKSB7XG4gICAgICAgIGlmICggdHlwZW9mIG5leHRQcm9wICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgd2FybkZvckludmFsaWRFdmVudExpc3RlbmVyKHByb3BLZXksIG5leHRQcm9wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwcm9wS2V5ID09PSAnb25TY3JvbGwnKSB7XG4gICAgICAgICAgbGlzdGVuVG9Ob25EZWxlZ2F0ZWRFdmVudCgnc2Nyb2xsJywgZG9tRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHNob3VsZFdhcm5EZXYgJiYgdHJ1ZSAmJiAvLyBDb252aW5jZSBGbG93IHdlJ3ZlIGNhbGN1bGF0ZWQgaXQgKGl0J3MgREVWLW9ubHkgaW4gdGhpcyBtZXRob2QuKVxuICAgIHR5cGVvZiBpc0N1c3RvbUNvbXBvbmVudFRhZyA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAvLyBWYWxpZGF0ZSB0aGF0IHRoZSBwcm9wZXJ0aWVzIGNvcnJlc3BvbmQgdG8gdGhlaXIgZXhwZWN0ZWQgdmFsdWVzLlxuICAgICAgdmFyIHNlcnZlclZhbHVlID0gdm9pZCAwO1xuICAgICAgdmFyIHByb3BlcnR5SW5mbyA9IGlzQ3VzdG9tQ29tcG9uZW50VGFnICYmIGVuYWJsZUN1c3RvbUVsZW1lbnRQcm9wZXJ0eVN1cHBvcnQgPyBudWxsIDogZ2V0UHJvcGVydHlJbmZvKHByb3BLZXkpO1xuXG4gICAgICBpZiAocmF3UHJvcHNbU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkddID09PSB0cnVlKSA7IGVsc2UgaWYgKHByb3BLZXkgPT09IFNVUFBSRVNTX0NPTlRFTlRfRURJVEFCTEVfV0FSTklORyB8fCBwcm9wS2V5ID09PSBTVVBQUkVTU19IWURSQVRJT05fV0FSTklORyB8fCAvLyBDb250cm9sbGVkIGF0dHJpYnV0ZXMgYXJlIG5vdCB2YWxpZGF0ZWRcbiAgICAgIC8vIFRPRE86IE9ubHkgaWdub3JlIHRoZW0gb24gY29udHJvbGxlZCB0YWdzLlxuICAgICAgcHJvcEtleSA9PT0gJ3ZhbHVlJyB8fCBwcm9wS2V5ID09PSAnY2hlY2tlZCcgfHwgcHJvcEtleSA9PT0gJ3NlbGVjdGVkJykgOyBlbHNlIGlmIChwcm9wS2V5ID09PSBEQU5HRVJPVVNMWV9TRVRfSU5ORVJfSFRNTCkge1xuICAgICAgICB2YXIgc2VydmVySFRNTCA9IGRvbUVsZW1lbnQuaW5uZXJIVE1MO1xuICAgICAgICB2YXIgbmV4dEh0bWwgPSBuZXh0UHJvcCA/IG5leHRQcm9wW0hUTUwkMV0gOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKG5leHRIdG1sICE9IG51bGwpIHtcbiAgICAgICAgICB2YXIgZXhwZWN0ZWRIVE1MID0gbm9ybWFsaXplSFRNTChkb21FbGVtZW50LCBuZXh0SHRtbCk7XG5cbiAgICAgICAgICBpZiAoZXhwZWN0ZWRIVE1MICE9PSBzZXJ2ZXJIVE1MKSB7XG4gICAgICAgICAgICB3YXJuRm9yUHJvcERpZmZlcmVuY2UocHJvcEtleSwgc2VydmVySFRNTCwgZXhwZWN0ZWRIVE1MKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocHJvcEtleSA9PT0gU1RZTEUpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZSAtIFNob3VsZCBiZSBpbmZlcnJlZCBhcyBub3QgdW5kZWZpbmVkLlxuICAgICAgICBleHRyYUF0dHJpYnV0ZU5hbWVzLmRlbGV0ZShwcm9wS2V5KTtcblxuICAgICAgICBpZiAoY2FuRGlmZlN0eWxlRm9ySHlkcmF0aW9uV2FybmluZykge1xuICAgICAgICAgIHZhciBleHBlY3RlZFN0eWxlID0gY3JlYXRlRGFuZ2Vyb3VzU3RyaW5nRm9yU3R5bGVzKG5leHRQcm9wKTtcbiAgICAgICAgICBzZXJ2ZXJWYWx1ZSA9IGRvbUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdzdHlsZScpO1xuXG4gICAgICAgICAgaWYgKGV4cGVjdGVkU3R5bGUgIT09IHNlcnZlclZhbHVlKSB7XG4gICAgICAgICAgICB3YXJuRm9yUHJvcERpZmZlcmVuY2UocHJvcEtleSwgc2VydmVyVmFsdWUsIGV4cGVjdGVkU3R5bGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc0N1c3RvbUNvbXBvbmVudFRhZyAmJiAhZW5hYmxlQ3VzdG9tRWxlbWVudFByb3BlcnR5U3VwcG9ydCkge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lIC0gU2hvdWxkIGJlIGluZmVycmVkIGFzIG5vdCB1bmRlZmluZWQuXG4gICAgICAgIGV4dHJhQXR0cmlidXRlTmFtZXMuZGVsZXRlKHByb3BLZXkudG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIHNlcnZlclZhbHVlID0gZ2V0VmFsdWVGb3JBdHRyaWJ1dGUoZG9tRWxlbWVudCwgcHJvcEtleSwgbmV4dFByb3ApO1xuXG4gICAgICAgIGlmIChuZXh0UHJvcCAhPT0gc2VydmVyVmFsdWUpIHtcbiAgICAgICAgICB3YXJuRm9yUHJvcERpZmZlcmVuY2UocHJvcEtleSwgc2VydmVyVmFsdWUsIG5leHRQcm9wKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICghc2hvdWxkSWdub3JlQXR0cmlidXRlKHByb3BLZXksIHByb3BlcnR5SW5mbywgaXNDdXN0b21Db21wb25lbnRUYWcpICYmICFzaG91bGRSZW1vdmVBdHRyaWJ1dGUocHJvcEtleSwgbmV4dFByb3AsIHByb3BlcnR5SW5mbywgaXNDdXN0b21Db21wb25lbnRUYWcpKSB7XG4gICAgICAgIHZhciBpc01pc21hdGNoRHVlVG9CYWRDYXNpbmcgPSBmYWxzZTtcblxuICAgICAgICBpZiAocHJvcGVydHlJbmZvICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gJEZsb3dGaXhNZSAtIFNob3VsZCBiZSBpbmZlcnJlZCBhcyBub3QgdW5kZWZpbmVkLlxuICAgICAgICAgIGV4dHJhQXR0cmlidXRlTmFtZXMuZGVsZXRlKHByb3BlcnR5SW5mby5hdHRyaWJ1dGVOYW1lKTtcbiAgICAgICAgICBzZXJ2ZXJWYWx1ZSA9IGdldFZhbHVlRm9yUHJvcGVydHkoZG9tRWxlbWVudCwgcHJvcEtleSwgbmV4dFByb3AsIHByb3BlcnR5SW5mbyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIG93bk5hbWVzcGFjZSA9IHBhcmVudE5hbWVzcGFjZTtcblxuICAgICAgICAgIGlmIChvd25OYW1lc3BhY2UgPT09IEhUTUxfTkFNRVNQQUNFKSB7XG4gICAgICAgICAgICBvd25OYW1lc3BhY2UgPSBnZXRJbnRyaW5zaWNOYW1lc3BhY2UodGFnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAob3duTmFtZXNwYWNlID09PSBIVE1MX05BTUVTUEFDRSkge1xuICAgICAgICAgICAgLy8gJEZsb3dGaXhNZSAtIFNob3VsZCBiZSBpbmZlcnJlZCBhcyBub3QgdW5kZWZpbmVkLlxuICAgICAgICAgICAgZXh0cmFBdHRyaWJ1dGVOYW1lcy5kZWxldGUocHJvcEtleS50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHN0YW5kYXJkTmFtZSA9IGdldFBvc3NpYmxlU3RhbmRhcmROYW1lKHByb3BLZXkpO1xuXG4gICAgICAgICAgICBpZiAoc3RhbmRhcmROYW1lICE9PSBudWxsICYmIHN0YW5kYXJkTmFtZSAhPT0gcHJvcEtleSkge1xuICAgICAgICAgICAgICAvLyBJZiBhbiBTVkcgcHJvcCBpcyBzdXBwbGllZCB3aXRoIGJhZCBjYXNpbmcsIGl0IHdpbGxcbiAgICAgICAgICAgICAgLy8gYmUgc3VjY2Vzc2Z1bGx5IHBhcnNlZCBmcm9tIEhUTUwsIGJ1dCB3aWxsIHByb2R1Y2UgYSBtaXNtYXRjaFxuICAgICAgICAgICAgICAvLyAoYW5kIHdvdWxkIGJlIGluY29ycmVjdGx5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQpLlxuICAgICAgICAgICAgICAvLyBIb3dldmVyLCB3ZSBhbHJlYWR5IHdhcm4gYWJvdXQgYmFkIGNhc2luZyBlbHNld2hlcmUuXG4gICAgICAgICAgICAgIC8vIFNvIHdlJ2xsIHNraXAgdGhlIG1pc2xlYWRpbmcgZXh0cmEgbWlzbWF0Y2ggd2FybmluZyBpbiB0aGlzIGNhc2UuXG4gICAgICAgICAgICAgIGlzTWlzbWF0Y2hEdWVUb0JhZENhc2luZyA9IHRydWU7IC8vICRGbG93Rml4TWUgLSBTaG91bGQgYmUgaW5mZXJyZWQgYXMgbm90IHVuZGVmaW5lZC5cblxuICAgICAgICAgICAgICBleHRyYUF0dHJpYnV0ZU5hbWVzLmRlbGV0ZShzdGFuZGFyZE5hbWUpO1xuICAgICAgICAgICAgfSAvLyAkRmxvd0ZpeE1lIC0gU2hvdWxkIGJlIGluZmVycmVkIGFzIG5vdCB1bmRlZmluZWQuXG5cblxuICAgICAgICAgICAgZXh0cmFBdHRyaWJ1dGVOYW1lcy5kZWxldGUocHJvcEtleSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc2VydmVyVmFsdWUgPSBnZXRWYWx1ZUZvckF0dHJpYnV0ZShkb21FbGVtZW50LCBwcm9wS2V5LCBuZXh0UHJvcCk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZG9udFdhcm5DdXN0b21FbGVtZW50ID0gZW5hYmxlQ3VzdG9tRWxlbWVudFByb3BlcnR5U3VwcG9ydCAgO1xuXG4gICAgICAgIGlmICghZG9udFdhcm5DdXN0b21FbGVtZW50ICYmIG5leHRQcm9wICE9PSBzZXJ2ZXJWYWx1ZSAmJiAhaXNNaXNtYXRjaER1ZVRvQmFkQ2FzaW5nKSB7XG4gICAgICAgICAgd2FybkZvclByb3BEaWZmZXJlbmNlKHByb3BLZXksIHNlcnZlclZhbHVlLCBuZXh0UHJvcCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB7XG4gICAgaWYgKHNob3VsZFdhcm5EZXYpIHtcbiAgICAgIGlmICggLy8gJEZsb3dGaXhNZSAtIFNob3VsZCBiZSBpbmZlcnJlZCBhcyBub3QgdW5kZWZpbmVkLlxuICAgICAgZXh0cmFBdHRyaWJ1dGVOYW1lcy5zaXplID4gMCAmJiByYXdQcm9wc1tTVVBQUkVTU19IWURSQVRJT05fV0FSTklOR10gIT09IHRydWUpIHtcbiAgICAgICAgLy8gJEZsb3dGaXhNZSAtIFNob3VsZCBiZSBpbmZlcnJlZCBhcyBub3QgdW5kZWZpbmVkLlxuICAgICAgICB3YXJuRm9yRXh0cmFBdHRyaWJ1dGVzKGV4dHJhQXR0cmlidXRlTmFtZXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSAnaW5wdXQnOlxuICAgICAgLy8gVE9ETzogTWFrZSBzdXJlIHdlIGNoZWNrIGlmIHRoaXMgaXMgc3RpbGwgdW5tb3VudGVkIG9yIGRvIGFueSBjbGVhblxuICAgICAgLy8gdXAgbmVjZXNzYXJ5IHNpbmNlIHdlIG5ldmVyIHN0b3AgdHJhY2tpbmcgYW55bW9yZS5cbiAgICAgIHRyYWNrKGRvbUVsZW1lbnQpO1xuICAgICAgcG9zdE1vdW50V3JhcHBlcihkb21FbGVtZW50LCByYXdQcm9wcywgdHJ1ZSk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgIC8vIFRPRE86IE1ha2Ugc3VyZSB3ZSBjaGVjayBpZiB0aGlzIGlzIHN0aWxsIHVubW91bnRlZCBvciBkbyBhbnkgY2xlYW5cbiAgICAgIC8vIHVwIG5lY2Vzc2FyeSBzaW5jZSB3ZSBuZXZlciBzdG9wIHRyYWNraW5nIGFueW1vcmUuXG4gICAgICB0cmFjayhkb21FbGVtZW50KTtcbiAgICAgIHBvc3RNb3VudFdyYXBwZXIkMyhkb21FbGVtZW50KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICBjYXNlICdvcHRpb24nOlxuICAgICAgLy8gRm9yIGlucHV0IGFuZCB0ZXh0YXJlYSB3ZSBjdXJyZW50IGFsd2F5cyBzZXQgdGhlIHZhbHVlIHByb3BlcnR5IGF0XG4gICAgICAvLyBwb3N0IG1vdW50IHRvIGZvcmNlIGl0IHRvIGRpdmVyZ2UgZnJvbSBhdHRyaWJ1dGVzLiBIb3dldmVyLCBmb3JcbiAgICAgIC8vIG9wdGlvbiBhbmQgc2VsZWN0IHdlIGRvbid0IHF1aXRlIGRvIHRoZSBzYW1lIHRoaW5nIGFuZCBzZWxlY3RcbiAgICAgIC8vIGlzIG5vdCByZXNpbGllbnQgdG8gdGhlIERPTSBzdGF0ZSBjaGFuZ2luZyBzbyB3ZSBkb24ndCBkbyB0aGF0IGhlcmUuXG4gICAgICAvLyBUT0RPOiBDb25zaWRlciBub3QgZG9pbmcgdGhpcyBmb3IgaW5wdXQgYW5kIHRleHRhcmVhLlxuICAgICAgYnJlYWs7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgaWYgKHR5cGVvZiByYXdQcm9wcy5vbkNsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIFRPRE86IFRoaXMgY2FzdCBtYXkgbm90IGJlIHNvdW5kIGZvciBTVkcsIE1hdGhNTCBvciBjdXN0b20gZWxlbWVudHMuXG4gICAgICAgIHRyYXBDbGlja09uTm9uSW50ZXJhY3RpdmVFbGVtZW50KGRvbUVsZW1lbnQpO1xuICAgICAgfVxuXG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiB1cGRhdGVQYXlsb2FkO1xufVxuZnVuY3Rpb24gZGlmZkh5ZHJhdGVkVGV4dCh0ZXh0Tm9kZSwgdGV4dCwgaXNDb25jdXJyZW50TW9kZSkge1xuICB2YXIgaXNEaWZmZXJlbnQgPSB0ZXh0Tm9kZS5ub2RlVmFsdWUgIT09IHRleHQ7XG4gIHJldHVybiBpc0RpZmZlcmVudDtcbn1cbmZ1bmN0aW9uIHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQocGFyZW50Tm9kZSwgY2hpbGQpIHtcbiAge1xuICAgIGlmIChkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uID0gdHJ1ZTtcblxuICAgIGVycm9yKCdEaWQgbm90IGV4cGVjdCBzZXJ2ZXIgSFRNTCB0byBjb250YWluIGEgPCVzPiBpbiA8JXM+LicsIGNoaWxkLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksIHBhcmVudE5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQocGFyZW50Tm9kZSwgY2hpbGQpIHtcbiAge1xuICAgIGlmIChkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uID0gdHJ1ZTtcblxuICAgIGVycm9yKCdEaWQgbm90IGV4cGVjdCBzZXJ2ZXIgSFRNTCB0byBjb250YWluIHRoZSB0ZXh0IG5vZGUgXCIlc1wiIGluIDwlcz4uJywgY2hpbGQubm9kZVZhbHVlLCBwYXJlbnROb2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICB9XG59XG5mdW5jdGlvbiB3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQocGFyZW50Tm9kZSwgdGFnLCBwcm9wcykge1xuICB7XG4gICAgaWYgKGRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGlkV2FybkludmFsaWRIeWRyYXRpb24gPSB0cnVlO1xuXG4gICAgZXJyb3IoJ0V4cGVjdGVkIHNlcnZlciBIVE1MIHRvIGNvbnRhaW4gYSBtYXRjaGluZyA8JXM+IGluIDwlcz4uJywgdGFnLCBwYXJlbnROb2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICB9XG59XG5mdW5jdGlvbiB3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQocGFyZW50Tm9kZSwgdGV4dCkge1xuICB7XG4gICAgaWYgKHRleHQgPT09ICcnKSB7XG4gICAgICAvLyBXZSBleHBlY3QgdG8gaW5zZXJ0IGVtcHR5IHRleHQgbm9kZXMgc2luY2UgdGhleSdyZSBub3QgcmVwcmVzZW50ZWQgaW5cbiAgICAgIC8vIHRoZSBIVE1MLlxuICAgICAgLy8gVE9ETzogUmVtb3ZlIHRoaXMgc3BlY2lhbCBjYXNlIGlmIHdlIGNhbiBqdXN0IGF2b2lkIGluc2VydGluZyBlbXB0eVxuICAgICAgLy8gdGV4dCBub2Rlcy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZGlkV2FybkludmFsaWRIeWRyYXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBkaWRXYXJuSW52YWxpZEh5ZHJhdGlvbiA9IHRydWU7XG5cbiAgICBlcnJvcignRXhwZWN0ZWQgc2VydmVyIEhUTUwgdG8gY29udGFpbiBhIG1hdGNoaW5nIHRleHQgbm9kZSBmb3IgXCIlc1wiIGluIDwlcz4uJywgdGV4dCwgcGFyZW50Tm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKTtcbiAgfVxufVxuZnVuY3Rpb24gcmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSQzKGRvbUVsZW1lbnQsIHRhZywgcHJvcHMpIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgICByZXN0b3JlQ29udHJvbGxlZFN0YXRlKGRvbUVsZW1lbnQsIHByb3BzKTtcbiAgICAgIHJldHVybjtcblxuICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgIHJlc3RvcmVDb250cm9sbGVkU3RhdGUkMihkb21FbGVtZW50LCBwcm9wcyk7XG4gICAgICByZXR1cm47XG5cbiAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgcmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSQxKGRvbUVsZW1lbnQsIHByb3BzKTtcbiAgICAgIHJldHVybjtcbiAgfVxufVxuXG52YXIgdmFsaWRhdGVET01OZXN0aW5nID0gZnVuY3Rpb24gKCkge307XG5cbnZhciB1cGRhdGVkQW5jZXN0b3JJbmZvID0gZnVuY3Rpb24gKCkge307XG5cbntcbiAgLy8gVGhpcyB2YWxpZGF0aW9uIGNvZGUgd2FzIHdyaXR0ZW4gYmFzZWQgb24gdGhlIEhUTUw1IHBhcnNpbmcgc3BlYzpcbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjaGFzLWFuLWVsZW1lbnQtaW4tc2NvcGVcbiAgLy9cbiAgLy8gTm90ZTogdGhpcyBkb2VzIG5vdCBjYXRjaCBhbGwgaW52YWxpZCBuZXN0aW5nLCBub3IgZG9lcyBpdCB0cnkgdG8gKGFzIGl0J3NcbiAgLy8gbm90IGNsZWFyIHdoYXQgcHJhY3RpY2FsIGJlbmVmaXQgZG9pbmcgc28gcHJvdmlkZXMpOyBpbnN0ZWFkLCB3ZSB3YXJuIG9ubHlcbiAgLy8gZm9yIGNhc2VzIHdoZXJlIHRoZSBwYXJzZXIgd2lsbCBnaXZlIGEgcGFyc2UgdHJlZSBkaWZmZXJpbmcgZnJvbSB3aGF0IFJlYWN0XG4gIC8vIGludGVuZGVkLiBGb3IgZXhhbXBsZSwgPGI+PGRpdj48L2Rpdj48L2I+IGlzIGludmFsaWQgYnV0IHdlIGRvbid0IHdhcm5cbiAgLy8gYmVjYXVzZSBpdCBzdGlsbCBwYXJzZXMgY29ycmVjdGx5OyB3ZSBkbyB3YXJuIGZvciBvdGhlciBjYXNlcyBsaWtlIG5lc3RlZFxuICAvLyA8cD4gdGFncyB3aGVyZSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzZWNvbmQgZWxlbWVudCBpbXBsaWNpdGx5IGNsb3NlcyB0aGVcbiAgLy8gZmlyc3QsIGNhdXNpbmcgYSBjb25mdXNpbmcgbWVzcy5cbiAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjc3BlY2lhbFxuICB2YXIgc3BlY2lhbFRhZ3MgPSBbJ2FkZHJlc3MnLCAnYXBwbGV0JywgJ2FyZWEnLCAnYXJ0aWNsZScsICdhc2lkZScsICdiYXNlJywgJ2Jhc2Vmb250JywgJ2Jnc291bmQnLCAnYmxvY2txdW90ZScsICdib2R5JywgJ2JyJywgJ2J1dHRvbicsICdjYXB0aW9uJywgJ2NlbnRlcicsICdjb2wnLCAnY29sZ3JvdXAnLCAnZGQnLCAnZGV0YWlscycsICdkaXInLCAnZGl2JywgJ2RsJywgJ2R0JywgJ2VtYmVkJywgJ2ZpZWxkc2V0JywgJ2ZpZ2NhcHRpb24nLCAnZmlndXJlJywgJ2Zvb3RlcicsICdmb3JtJywgJ2ZyYW1lJywgJ2ZyYW1lc2V0JywgJ2gxJywgJ2gyJywgJ2gzJywgJ2g0JywgJ2g1JywgJ2g2JywgJ2hlYWQnLCAnaGVhZGVyJywgJ2hncm91cCcsICdocicsICdodG1sJywgJ2lmcmFtZScsICdpbWcnLCAnaW5wdXQnLCAnaXNpbmRleCcsICdsaScsICdsaW5rJywgJ2xpc3RpbmcnLCAnbWFpbicsICdtYXJxdWVlJywgJ21lbnUnLCAnbWVudWl0ZW0nLCAnbWV0YScsICduYXYnLCAnbm9lbWJlZCcsICdub2ZyYW1lcycsICdub3NjcmlwdCcsICdvYmplY3QnLCAnb2wnLCAncCcsICdwYXJhbScsICdwbGFpbnRleHQnLCAncHJlJywgJ3NjcmlwdCcsICdzZWN0aW9uJywgJ3NlbGVjdCcsICdzb3VyY2UnLCAnc3R5bGUnLCAnc3VtbWFyeScsICd0YWJsZScsICd0Ym9keScsICd0ZCcsICd0ZW1wbGF0ZScsICd0ZXh0YXJlYScsICd0Zm9vdCcsICd0aCcsICd0aGVhZCcsICd0aXRsZScsICd0cicsICd0cmFjaycsICd1bCcsICd3YnInLCAneG1wJ107IC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2hhcy1hbi1lbGVtZW50LWluLXNjb3BlXG5cbiAgdmFyIGluU2NvcGVUYWdzID0gWydhcHBsZXQnLCAnY2FwdGlvbicsICdodG1sJywgJ3RhYmxlJywgJ3RkJywgJ3RoJywgJ21hcnF1ZWUnLCAnb2JqZWN0JywgJ3RlbXBsYXRlJywgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjaHRtbC1pbnRlZ3JhdGlvbi1wb2ludFxuICAvLyBUT0RPOiBEaXN0aW5ndWlzaCBieSBuYW1lc3BhY2UgaGVyZSAtLSBmb3IgPHRpdGxlPiwgaW5jbHVkaW5nIGl0IGhlcmVcbiAgLy8gZXJycyBvbiB0aGUgc2lkZSBvZiBmZXdlciB3YXJuaW5nc1xuICAnZm9yZWlnbk9iamVjdCcsICdkZXNjJywgJ3RpdGxlJ107IC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2hhcy1hbi1lbGVtZW50LWluLWJ1dHRvbi1zY29wZVxuXG4gIHZhciBidXR0b25TY29wZVRhZ3MgPSBpblNjb3BlVGFncy5jb25jYXQoWydidXR0b24nXSk7IC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2dlbmVyYXRlLWltcGxpZWQtZW5kLXRhZ3NcblxuICB2YXIgaW1wbGllZEVuZFRhZ3MgPSBbJ2RkJywgJ2R0JywgJ2xpJywgJ29wdGlvbicsICdvcHRncm91cCcsICdwJywgJ3JwJywgJ3J0J107XG4gIHZhciBlbXB0eUFuY2VzdG9ySW5mbyA9IHtcbiAgICBjdXJyZW50OiBudWxsLFxuICAgIGZvcm1UYWc6IG51bGwsXG4gICAgYVRhZ0luU2NvcGU6IG51bGwsXG4gICAgYnV0dG9uVGFnSW5TY29wZTogbnVsbCxcbiAgICBub2JyVGFnSW5TY29wZTogbnVsbCxcbiAgICBwVGFnSW5CdXR0b25TY29wZTogbnVsbCxcbiAgICBsaXN0SXRlbVRhZ0F1dG9jbG9zaW5nOiBudWxsLFxuICAgIGRsSXRlbVRhZ0F1dG9jbG9zaW5nOiBudWxsXG4gIH07XG5cbiAgdXBkYXRlZEFuY2VzdG9ySW5mbyA9IGZ1bmN0aW9uIChvbGRJbmZvLCB0YWcpIHtcbiAgICB2YXIgYW5jZXN0b3JJbmZvID0gYXNzaWduKHt9LCBvbGRJbmZvIHx8IGVtcHR5QW5jZXN0b3JJbmZvKTtcblxuICAgIHZhciBpbmZvID0ge1xuICAgICAgdGFnOiB0YWdcbiAgICB9O1xuXG4gICAgaWYgKGluU2NvcGVUYWdzLmluZGV4T2YodGFnKSAhPT0gLTEpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5hVGFnSW5TY29wZSA9IG51bGw7XG4gICAgICBhbmNlc3RvckluZm8uYnV0dG9uVGFnSW5TY29wZSA9IG51bGw7XG4gICAgICBhbmNlc3RvckluZm8ubm9iclRhZ0luU2NvcGUgPSBudWxsO1xuICAgIH1cblxuICAgIGlmIChidXR0b25TY29wZVRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSkge1xuICAgICAgYW5jZXN0b3JJbmZvLnBUYWdJbkJ1dHRvblNjb3BlID0gbnVsbDtcbiAgICB9IC8vIFNlZSBydWxlcyBmb3IgJ2xpJywgJ2RkJywgJ2R0JyBzdGFydCB0YWdzIGluXG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluYm9keVxuXG5cbiAgICBpZiAoc3BlY2lhbFRhZ3MuaW5kZXhPZih0YWcpICE9PSAtMSAmJiB0YWcgIT09ICdhZGRyZXNzJyAmJiB0YWcgIT09ICdkaXYnICYmIHRhZyAhPT0gJ3AnKSB7XG4gICAgICBhbmNlc3RvckluZm8ubGlzdEl0ZW1UYWdBdXRvY2xvc2luZyA9IG51bGw7XG4gICAgICBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3NpbmcgPSBudWxsO1xuICAgIH1cblxuICAgIGFuY2VzdG9ySW5mby5jdXJyZW50ID0gaW5mbztcblxuICAgIGlmICh0YWcgPT09ICdmb3JtJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmZvcm1UYWcgPSBpbmZvO1xuICAgIH1cblxuICAgIGlmICh0YWcgPT09ICdhJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmFUYWdJblNjb3BlID0gaW5mbztcbiAgICB9XG5cbiAgICBpZiAodGFnID09PSAnYnV0dG9uJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmJ1dHRvblRhZ0luU2NvcGUgPSBpbmZvO1xuICAgIH1cblxuICAgIGlmICh0YWcgPT09ICdub2JyJykge1xuICAgICAgYW5jZXN0b3JJbmZvLm5vYnJUYWdJblNjb3BlID0gaW5mbztcbiAgICB9XG5cbiAgICBpZiAodGFnID09PSAncCcpIHtcbiAgICAgIGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZSA9IGluZm87XG4gICAgfVxuXG4gICAgaWYgKHRhZyA9PT0gJ2xpJykge1xuICAgICAgYW5jZXN0b3JJbmZvLmxpc3RJdGVtVGFnQXV0b2Nsb3NpbmcgPSBpbmZvO1xuICAgIH1cblxuICAgIGlmICh0YWcgPT09ICdkZCcgfHwgdGFnID09PSAnZHQnKSB7XG4gICAgICBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3NpbmcgPSBpbmZvO1xuICAgIH1cblxuICAgIHJldHVybiBhbmNlc3RvckluZm87XG4gIH07XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXJcbiAgICovXG5cblxuICB2YXIgaXNUYWdWYWxpZFdpdGhQYXJlbnQgPSBmdW5jdGlvbiAodGFnLCBwYXJlbnRUYWcpIHtcbiAgICAvLyBGaXJzdCwgbGV0J3MgY2hlY2sgaWYgd2UncmUgaW4gYW4gdW51c3VhbCBwYXJzaW5nIG1vZGUuLi5cbiAgICBzd2l0Y2ggKHBhcmVudFRhZykge1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluc2VsZWN0XG4gICAgICBjYXNlICdzZWxlY3QnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnb3B0aW9uJyB8fCB0YWcgPT09ICdvcHRncm91cCcgfHwgdGFnID09PSAnI3RleHQnO1xuXG4gICAgICBjYXNlICdvcHRncm91cCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdvcHRpb24nIHx8IHRhZyA9PT0gJyN0ZXh0JztcbiAgICAgIC8vIFN0cmljdGx5IHNwZWFraW5nLCBzZWVpbmcgYW4gPG9wdGlvbj4gZG9lc24ndCBtZWFuIHdlJ3JlIGluIGEgPHNlbGVjdD5cbiAgICAgIC8vIGJ1dFxuXG4gICAgICBjYXNlICdvcHRpb24nOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnI3RleHQnO1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWludGRcbiAgICAgIC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI3BhcnNpbmctbWFpbi1pbmNhcHRpb25cbiAgICAgIC8vIE5vIHNwZWNpYWwgYmVoYXZpb3Igc2luY2UgdGhlc2UgcnVsZXMgZmFsbCBiYWNrIHRvIFwiaW4gYm9keVwiIG1vZGUgZm9yXG4gICAgICAvLyBhbGwgZXhjZXB0IHNwZWNpYWwgdGFibGUgbm9kZXMgd2hpY2ggY2F1c2UgYmFkIHBhcnNpbmcgYmVoYXZpb3IgYW55d2F5LlxuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWludHJcblxuICAgICAgY2FzZSAndHInOlxuICAgICAgICByZXR1cm4gdGFnID09PSAndGgnIHx8IHRhZyA9PT0gJ3RkJyB8fCB0YWcgPT09ICdzdHlsZScgfHwgdGFnID09PSAnc2NyaXB0JyB8fCB0YWcgPT09ICd0ZW1wbGF0ZSc7XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW50Ym9keVxuXG4gICAgICBjYXNlICd0Ym9keSc6XG4gICAgICBjYXNlICd0aGVhZCc6XG4gICAgICBjYXNlICd0Zm9vdCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICd0cicgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluY29sZ3JvdXBcblxuICAgICAgY2FzZSAnY29sZ3JvdXAnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnY29sJyB8fCB0YWcgPT09ICd0ZW1wbGF0ZSc7XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNwYXJzaW5nLW1haW4taW50YWJsZVxuXG4gICAgICBjYXNlICd0YWJsZSc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdjYXB0aW9uJyB8fCB0YWcgPT09ICdjb2xncm91cCcgfHwgdGFnID09PSAndGJvZHknIHx8IHRhZyA9PT0gJ3Rmb290JyB8fCB0YWcgPT09ICd0aGVhZCcgfHwgdGFnID09PSAnc3R5bGUnIHx8IHRhZyA9PT0gJ3NjcmlwdCcgfHwgdGFnID09PSAndGVtcGxhdGUnO1xuICAgICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluaGVhZFxuXG4gICAgICBjYXNlICdoZWFkJzpcbiAgICAgICAgcmV0dXJuIHRhZyA9PT0gJ2Jhc2UnIHx8IHRhZyA9PT0gJ2Jhc2Vmb250JyB8fCB0YWcgPT09ICdiZ3NvdW5kJyB8fCB0YWcgPT09ICdsaW5rJyB8fCB0YWcgPT09ICdtZXRhJyB8fCB0YWcgPT09ICd0aXRsZScgfHwgdGFnID09PSAnbm9zY3JpcHQnIHx8IHRhZyA9PT0gJ25vZnJhbWVzJyB8fCB0YWcgPT09ICdzdHlsZScgfHwgdGFnID09PSAnc2NyaXB0JyB8fCB0YWcgPT09ICd0ZW1wbGF0ZSc7XG4gICAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zZW1hbnRpY3MuaHRtbCN0aGUtaHRtbC1lbGVtZW50XG5cbiAgICAgIGNhc2UgJ2h0bWwnOlxuICAgICAgICByZXR1cm4gdGFnID09PSAnaGVhZCcgfHwgdGFnID09PSAnYm9keScgfHwgdGFnID09PSAnZnJhbWVzZXQnO1xuXG4gICAgICBjYXNlICdmcmFtZXNldCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdmcmFtZSc7XG5cbiAgICAgIGNhc2UgJyNkb2N1bWVudCc6XG4gICAgICAgIHJldHVybiB0YWcgPT09ICdodG1sJztcbiAgICB9IC8vIFByb2JhYmx5IGluIHRoZSBcImluIGJvZHlcIiBwYXJzaW5nIG1vZGUsIHNvIHdlIG91dGxhdyBvbmx5IHRhZyBjb21ib3NcbiAgICAvLyB3aGVyZSB0aGUgcGFyc2luZyBydWxlcyBjYXVzZSBpbXBsaWNpdCBvcGVucyBvciBjbG9zZXMgdG8gYmUgYWRkZWQuXG4gICAgLy8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjcGFyc2luZy1tYWluLWluYm9keVxuXG5cbiAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgY2FzZSAnaDEnOlxuICAgICAgY2FzZSAnaDInOlxuICAgICAgY2FzZSAnaDMnOlxuICAgICAgY2FzZSAnaDQnOlxuICAgICAgY2FzZSAnaDUnOlxuICAgICAgY2FzZSAnaDYnOlxuICAgICAgICByZXR1cm4gcGFyZW50VGFnICE9PSAnaDEnICYmIHBhcmVudFRhZyAhPT0gJ2gyJyAmJiBwYXJlbnRUYWcgIT09ICdoMycgJiYgcGFyZW50VGFnICE9PSAnaDQnICYmIHBhcmVudFRhZyAhPT0gJ2g1JyAmJiBwYXJlbnRUYWcgIT09ICdoNic7XG5cbiAgICAgIGNhc2UgJ3JwJzpcbiAgICAgIGNhc2UgJ3J0JzpcbiAgICAgICAgcmV0dXJuIGltcGxpZWRFbmRUYWdzLmluZGV4T2YocGFyZW50VGFnKSA9PT0gLTE7XG5cbiAgICAgIGNhc2UgJ2JvZHknOlxuICAgICAgY2FzZSAnY2FwdGlvbic6XG4gICAgICBjYXNlICdjb2wnOlxuICAgICAgY2FzZSAnY29sZ3JvdXAnOlxuICAgICAgY2FzZSAnZnJhbWVzZXQnOlxuICAgICAgY2FzZSAnZnJhbWUnOlxuICAgICAgY2FzZSAnaGVhZCc6XG4gICAgICBjYXNlICdodG1sJzpcbiAgICAgIGNhc2UgJ3Rib2R5JzpcbiAgICAgIGNhc2UgJ3RkJzpcbiAgICAgIGNhc2UgJ3Rmb290JzpcbiAgICAgIGNhc2UgJ3RoJzpcbiAgICAgIGNhc2UgJ3RoZWFkJzpcbiAgICAgIGNhc2UgJ3RyJzpcbiAgICAgICAgLy8gVGhlc2UgdGFncyBhcmUgb25seSB2YWxpZCB3aXRoIGEgZmV3IHBhcmVudHMgdGhhdCBoYXZlIHNwZWNpYWwgY2hpbGRcbiAgICAgICAgLy8gcGFyc2luZyBydWxlcyAtLSBpZiB3ZSdyZSBkb3duIGhlcmUsIHRoZW4gbm9uZSBvZiB0aG9zZSBtYXRjaGVkIGFuZFxuICAgICAgICAvLyBzbyB3ZSBhbGxvdyBpdCBvbmx5IGlmIHdlIGRvbid0IGtub3cgd2hhdCB0aGUgcGFyZW50IGlzLCBhcyBhbGwgb3RoZXJcbiAgICAgICAgLy8gY2FzZXMgYXJlIGludmFsaWQuXG4gICAgICAgIHJldHVybiBwYXJlbnRUYWcgPT0gbnVsbDtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlclxuICAgKi9cblxuXG4gIHZhciBmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnID0gZnVuY3Rpb24gKHRhZywgYW5jZXN0b3JJbmZvKSB7XG4gICAgc3dpdGNoICh0YWcpIHtcbiAgICAgIGNhc2UgJ2FkZHJlc3MnOlxuICAgICAgY2FzZSAnYXJ0aWNsZSc6XG4gICAgICBjYXNlICdhc2lkZSc6XG4gICAgICBjYXNlICdibG9ja3F1b3RlJzpcbiAgICAgIGNhc2UgJ2NlbnRlcic6XG4gICAgICBjYXNlICdkZXRhaWxzJzpcbiAgICAgIGNhc2UgJ2RpYWxvZyc6XG4gICAgICBjYXNlICdkaXInOlxuICAgICAgY2FzZSAnZGl2JzpcbiAgICAgIGNhc2UgJ2RsJzpcbiAgICAgIGNhc2UgJ2ZpZWxkc2V0JzpcbiAgICAgIGNhc2UgJ2ZpZ2NhcHRpb24nOlxuICAgICAgY2FzZSAnZmlndXJlJzpcbiAgICAgIGNhc2UgJ2Zvb3Rlcic6XG4gICAgICBjYXNlICdoZWFkZXInOlxuICAgICAgY2FzZSAnaGdyb3VwJzpcbiAgICAgIGNhc2UgJ21haW4nOlxuICAgICAgY2FzZSAnbWVudSc6XG4gICAgICBjYXNlICduYXYnOlxuICAgICAgY2FzZSAnb2wnOlxuICAgICAgY2FzZSAncCc6XG4gICAgICBjYXNlICdzZWN0aW9uJzpcbiAgICAgIGNhc2UgJ3N1bW1hcnknOlxuICAgICAgY2FzZSAndWwnOlxuICAgICAgY2FzZSAncHJlJzpcbiAgICAgIGNhc2UgJ2xpc3RpbmcnOlxuICAgICAgY2FzZSAndGFibGUnOlxuICAgICAgY2FzZSAnaHInOlxuICAgICAgY2FzZSAneG1wJzpcbiAgICAgIGNhc2UgJ2gxJzpcbiAgICAgIGNhc2UgJ2gyJzpcbiAgICAgIGNhc2UgJ2gzJzpcbiAgICAgIGNhc2UgJ2g0JzpcbiAgICAgIGNhc2UgJ2g1JzpcbiAgICAgIGNhc2UgJ2g2JzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5wVGFnSW5CdXR0b25TY29wZTtcblxuICAgICAgY2FzZSAnZm9ybSc6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uZm9ybVRhZyB8fCBhbmNlc3RvckluZm8ucFRhZ0luQnV0dG9uU2NvcGU7XG5cbiAgICAgIGNhc2UgJ2xpJzpcbiAgICAgICAgcmV0dXJuIGFuY2VzdG9ySW5mby5saXN0SXRlbVRhZ0F1dG9jbG9zaW5nO1xuXG4gICAgICBjYXNlICdkZCc6XG4gICAgICBjYXNlICdkdCc6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uZGxJdGVtVGFnQXV0b2Nsb3Npbmc7XG5cbiAgICAgIGNhc2UgJ2J1dHRvbic6XG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uYnV0dG9uVGFnSW5TY29wZTtcblxuICAgICAgY2FzZSAnYSc6XG4gICAgICAgIC8vIFNwZWMgc2F5cyBzb21ldGhpbmcgYWJvdXQgc3RvcmluZyBhIGxpc3Qgb2YgbWFya2VycywgYnV0IGl0IHNvdW5kc1xuICAgICAgICAvLyBlcXVpdmFsZW50IHRvIHRoaXMgY2hlY2suXG4gICAgICAgIHJldHVybiBhbmNlc3RvckluZm8uYVRhZ0luU2NvcGU7XG5cbiAgICAgIGNhc2UgJ25vYnInOlxuICAgICAgICByZXR1cm4gYW5jZXN0b3JJbmZvLm5vYnJUYWdJblNjb3BlO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9O1xuXG4gIHZhciBkaWRXYXJuJDEgPSB7fTtcblxuICB2YWxpZGF0ZURPTU5lc3RpbmcgPSBmdW5jdGlvbiAoY2hpbGRUYWcsIGNoaWxkVGV4dCwgYW5jZXN0b3JJbmZvKSB7XG4gICAgYW5jZXN0b3JJbmZvID0gYW5jZXN0b3JJbmZvIHx8IGVtcHR5QW5jZXN0b3JJbmZvO1xuICAgIHZhciBwYXJlbnRJbmZvID0gYW5jZXN0b3JJbmZvLmN1cnJlbnQ7XG4gICAgdmFyIHBhcmVudFRhZyA9IHBhcmVudEluZm8gJiYgcGFyZW50SW5mby50YWc7XG5cbiAgICBpZiAoY2hpbGRUZXh0ICE9IG51bGwpIHtcbiAgICAgIGlmIChjaGlsZFRhZyAhPSBudWxsKSB7XG4gICAgICAgIGVycm9yKCd2YWxpZGF0ZURPTU5lc3Rpbmc6IHdoZW4gY2hpbGRUZXh0IGlzIHBhc3NlZCwgY2hpbGRUYWcgc2hvdWxkIGJlIG51bGwnKTtcbiAgICAgIH1cblxuICAgICAgY2hpbGRUYWcgPSAnI3RleHQnO1xuICAgIH1cblxuICAgIHZhciBpbnZhbGlkUGFyZW50ID0gaXNUYWdWYWxpZFdpdGhQYXJlbnQoY2hpbGRUYWcsIHBhcmVudFRhZykgPyBudWxsIDogcGFyZW50SW5mbztcbiAgICB2YXIgaW52YWxpZEFuY2VzdG9yID0gaW52YWxpZFBhcmVudCA/IG51bGwgOiBmaW5kSW52YWxpZEFuY2VzdG9yRm9yVGFnKGNoaWxkVGFnLCBhbmNlc3RvckluZm8pO1xuICAgIHZhciBpbnZhbGlkUGFyZW50T3JBbmNlc3RvciA9IGludmFsaWRQYXJlbnQgfHwgaW52YWxpZEFuY2VzdG9yO1xuXG4gICAgaWYgKCFpbnZhbGlkUGFyZW50T3JBbmNlc3Rvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBhbmNlc3RvclRhZyA9IGludmFsaWRQYXJlbnRPckFuY2VzdG9yLnRhZztcbiAgICB2YXIgd2FybktleSA9ICEhaW52YWxpZFBhcmVudCArICd8JyArIGNoaWxkVGFnICsgJ3wnICsgYW5jZXN0b3JUYWc7XG5cbiAgICBpZiAoZGlkV2FybiQxW3dhcm5LZXldKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgZGlkV2FybiQxW3dhcm5LZXldID0gdHJ1ZTtcbiAgICB2YXIgdGFnRGlzcGxheU5hbWUgPSBjaGlsZFRhZztcbiAgICB2YXIgd2hpdGVzcGFjZUluZm8gPSAnJztcblxuICAgIGlmIChjaGlsZFRhZyA9PT0gJyN0ZXh0Jykge1xuICAgICAgaWYgKC9cXFMvLnRlc3QoY2hpbGRUZXh0KSkge1xuICAgICAgICB0YWdEaXNwbGF5TmFtZSA9ICdUZXh0IG5vZGVzJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhZ0Rpc3BsYXlOYW1lID0gJ1doaXRlc3BhY2UgdGV4dCBub2Rlcyc7XG4gICAgICAgIHdoaXRlc3BhY2VJbmZvID0gXCIgTWFrZSBzdXJlIHlvdSBkb24ndCBoYXZlIGFueSBleHRyYSB3aGl0ZXNwYWNlIGJldHdlZW4gdGFncyBvbiBcIiArICdlYWNoIGxpbmUgb2YgeW91ciBzb3VyY2UgY29kZS4nO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0YWdEaXNwbGF5TmFtZSA9ICc8JyArIGNoaWxkVGFnICsgJz4nO1xuICAgIH1cblxuICAgIGlmIChpbnZhbGlkUGFyZW50KSB7XG4gICAgICB2YXIgaW5mbyA9ICcnO1xuXG4gICAgICBpZiAoYW5jZXN0b3JUYWcgPT09ICd0YWJsZScgJiYgY2hpbGRUYWcgPT09ICd0cicpIHtcbiAgICAgICAgaW5mbyArPSAnIEFkZCBhIDx0Ym9keT4sIDx0aGVhZD4gb3IgPHRmb290PiB0byB5b3VyIGNvZGUgdG8gbWF0Y2ggdGhlIERPTSB0cmVlIGdlbmVyYXRlZCBieSAnICsgJ3RoZSBicm93c2VyLic7XG4gICAgICB9XG5cbiAgICAgIGVycm9yKCd2YWxpZGF0ZURPTU5lc3RpbmcoLi4uKTogJXMgY2Fubm90IGFwcGVhciBhcyBhIGNoaWxkIG9mIDwlcz4uJXMlcycsIHRhZ0Rpc3BsYXlOYW1lLCBhbmNlc3RvclRhZywgd2hpdGVzcGFjZUluZm8sIGluZm8pO1xuICAgIH0gZWxzZSB7XG4gICAgICBlcnJvcigndmFsaWRhdGVET01OZXN0aW5nKC4uLik6ICVzIGNhbm5vdCBhcHBlYXIgYXMgYSBkZXNjZW5kYW50IG9mICcgKyAnPCVzPi4nLCB0YWdEaXNwbGF5TmFtZSwgYW5jZXN0b3JUYWcpO1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFNVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HJDEgPSAnc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJztcbnZhciBTVVNQRU5TRV9TVEFSVF9EQVRBID0gJyQnO1xudmFyIFNVU1BFTlNFX0VORF9EQVRBID0gJy8kJztcbnZhciBTVVNQRU5TRV9QRU5ESU5HX1NUQVJUX0RBVEEgPSAnJD8nO1xudmFyIFNVU1BFTlNFX0ZBTExCQUNLX1NUQVJUX0RBVEEgPSAnJCEnO1xudmFyIFNUWUxFJDEgPSAnc3R5bGUnO1xudmFyIGV2ZW50c0VuYWJsZWQgPSBudWxsO1xudmFyIHNlbGVjdGlvbkluZm9ybWF0aW9uID0gbnVsbDtcbmZ1bmN0aW9uIGdldFJvb3RIb3N0Q29udGV4dChyb290Q29udGFpbmVySW5zdGFuY2UpIHtcbiAgdmFyIHR5cGU7XG4gIHZhciBuYW1lc3BhY2U7XG4gIHZhciBub2RlVHlwZSA9IHJvb3RDb250YWluZXJJbnN0YW5jZS5ub2RlVHlwZTtcblxuICBzd2l0Y2ggKG5vZGVUeXBlKSB7XG4gICAgY2FzZSBET0NVTUVOVF9OT0RFOlxuICAgIGNhc2UgRE9DVU1FTlRfRlJBR01FTlRfTk9ERTpcbiAgICAgIHtcbiAgICAgICAgdHlwZSA9IG5vZGVUeXBlID09PSBET0NVTUVOVF9OT0RFID8gJyNkb2N1bWVudCcgOiAnI2ZyYWdtZW50JztcbiAgICAgICAgdmFyIHJvb3QgPSByb290Q29udGFpbmVySW5zdGFuY2UuZG9jdW1lbnRFbGVtZW50O1xuICAgICAgICBuYW1lc3BhY2UgPSByb290ID8gcm9vdC5uYW1lc3BhY2VVUkkgOiBnZXRDaGlsZE5hbWVzcGFjZShudWxsLCAnJyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IG5vZGVUeXBlID09PSBDT01NRU5UX05PREUgPyByb290Q29udGFpbmVySW5zdGFuY2UucGFyZW50Tm9kZSA6IHJvb3RDb250YWluZXJJbnN0YW5jZTtcbiAgICAgICAgdmFyIG93bk5hbWVzcGFjZSA9IGNvbnRhaW5lci5uYW1lc3BhY2VVUkkgfHwgbnVsbDtcbiAgICAgICAgdHlwZSA9IGNvbnRhaW5lci50YWdOYW1lO1xuICAgICAgICBuYW1lc3BhY2UgPSBnZXRDaGlsZE5hbWVzcGFjZShvd25OYW1lc3BhY2UsIHR5cGUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgfVxuXG4gIHtcbiAgICB2YXIgdmFsaWRhdGVkVGFnID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhciBhbmNlc3RvckluZm8gPSB1cGRhdGVkQW5jZXN0b3JJbmZvKG51bGwsIHZhbGlkYXRlZFRhZyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWVzcGFjZTogbmFtZXNwYWNlLFxuICAgICAgYW5jZXN0b3JJbmZvOiBhbmNlc3RvckluZm9cbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiBnZXRDaGlsZEhvc3RDb250ZXh0KHBhcmVudEhvc3RDb250ZXh0LCB0eXBlLCByb290Q29udGFpbmVySW5zdGFuY2UpIHtcbiAge1xuICAgIHZhciBwYXJlbnRIb3N0Q29udGV4dERldiA9IHBhcmVudEhvc3RDb250ZXh0O1xuICAgIHZhciBuYW1lc3BhY2UgPSBnZXRDaGlsZE5hbWVzcGFjZShwYXJlbnRIb3N0Q29udGV4dERldi5uYW1lc3BhY2UsIHR5cGUpO1xuICAgIHZhciBhbmNlc3RvckluZm8gPSB1cGRhdGVkQW5jZXN0b3JJbmZvKHBhcmVudEhvc3RDb250ZXh0RGV2LmFuY2VzdG9ySW5mbywgdHlwZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWVzcGFjZTogbmFtZXNwYWNlLFxuICAgICAgYW5jZXN0b3JJbmZvOiBhbmNlc3RvckluZm9cbiAgICB9O1xuICB9XG59XG5mdW5jdGlvbiBnZXRQdWJsaWNJbnN0YW5jZShpbnN0YW5jZSkge1xuICByZXR1cm4gaW5zdGFuY2U7XG59XG5mdW5jdGlvbiBwcmVwYXJlRm9yQ29tbWl0KGNvbnRhaW5lckluZm8pIHtcbiAgZXZlbnRzRW5hYmxlZCA9IGlzRW5hYmxlZCgpO1xuICBzZWxlY3Rpb25JbmZvcm1hdGlvbiA9IGdldFNlbGVjdGlvbkluZm9ybWF0aW9uKCk7XG4gIHZhciBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG5cbiAgc2V0RW5hYmxlZChmYWxzZSk7XG4gIHJldHVybiBhY3RpdmVJbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIHJlc2V0QWZ0ZXJDb21taXQoY29udGFpbmVySW5mbykge1xuICByZXN0b3JlU2VsZWN0aW9uKHNlbGVjdGlvbkluZm9ybWF0aW9uKTtcbiAgc2V0RW5hYmxlZChldmVudHNFbmFibGVkKTtcbiAgZXZlbnRzRW5hYmxlZCA9IG51bGw7XG4gIHNlbGVjdGlvbkluZm9ybWF0aW9uID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKHR5cGUsIHByb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGhvc3RDb250ZXh0LCBpbnRlcm5hbEluc3RhbmNlSGFuZGxlKSB7XG4gIHZhciBwYXJlbnROYW1lc3BhY2U7XG5cbiAge1xuICAgIC8vIFRPRE86IHRha2UgbmFtZXNwYWNlIGludG8gYWNjb3VudCB3aGVuIHZhbGlkYXRpbmcuXG4gICAgdmFyIGhvc3RDb250ZXh0RGV2ID0gaG9zdENvbnRleHQ7XG4gICAgdmFsaWRhdGVET01OZXN0aW5nKHR5cGUsIG51bGwsIGhvc3RDb250ZXh0RGV2LmFuY2VzdG9ySW5mbyk7XG5cbiAgICBpZiAodHlwZW9mIHByb3BzLmNoaWxkcmVuID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gPT09ICdudW1iZXInKSB7XG4gICAgICB2YXIgc3RyaW5nID0gJycgKyBwcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBvd25BbmNlc3RvckluZm8gPSB1cGRhdGVkQW5jZXN0b3JJbmZvKGhvc3RDb250ZXh0RGV2LmFuY2VzdG9ySW5mbywgdHlwZSk7XG4gICAgICB2YWxpZGF0ZURPTU5lc3RpbmcobnVsbCwgc3RyaW5nLCBvd25BbmNlc3RvckluZm8pO1xuICAgIH1cblxuICAgIHBhcmVudE5hbWVzcGFjZSA9IGhvc3RDb250ZXh0RGV2Lm5hbWVzcGFjZTtcbiAgfVxuXG4gIHZhciBkb21FbGVtZW50ID0gY3JlYXRlRWxlbWVudCh0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBwYXJlbnROYW1lc3BhY2UpO1xuICBwcmVjYWNoZUZpYmVyTm9kZShpbnRlcm5hbEluc3RhbmNlSGFuZGxlLCBkb21FbGVtZW50KTtcbiAgdXBkYXRlRmliZXJQcm9wcyhkb21FbGVtZW50LCBwcm9wcyk7XG4gIHJldHVybiBkb21FbGVtZW50O1xufVxuZnVuY3Rpb24gYXBwZW5kSW5pdGlhbENoaWxkKHBhcmVudEluc3RhbmNlLCBjaGlsZCkge1xuICBwYXJlbnRJbnN0YW5jZS5hcHBlbmRDaGlsZChjaGlsZCk7XG59XG5mdW5jdGlvbiBmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbihkb21FbGVtZW50LCB0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCkge1xuICBzZXRJbml0aWFsUHJvcGVydGllcyhkb21FbGVtZW50LCB0eXBlLCBwcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlKTtcblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdidXR0b24nOlxuICAgIGNhc2UgJ2lucHV0JzpcbiAgICBjYXNlICdzZWxlY3QnOlxuICAgIGNhc2UgJ3RleHRhcmVhJzpcbiAgICAgIHJldHVybiAhIXByb3BzLmF1dG9Gb2N1cztcblxuICAgIGNhc2UgJ2ltZyc6XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cbmZ1bmN0aW9uIHByZXBhcmVVcGRhdGUoZG9tRWxlbWVudCwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGhvc3RDb250ZXh0KSB7XG4gIHtcbiAgICB2YXIgaG9zdENvbnRleHREZXYgPSBob3N0Q29udGV4dDtcblxuICAgIGlmICh0eXBlb2YgbmV3UHJvcHMuY2hpbGRyZW4gIT09IHR5cGVvZiBvbGRQcm9wcy5jaGlsZHJlbiAmJiAodHlwZW9mIG5ld1Byb3BzLmNoaWxkcmVuID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbmV3UHJvcHMuY2hpbGRyZW4gPT09ICdudW1iZXInKSkge1xuICAgICAgdmFyIHN0cmluZyA9ICcnICsgbmV3UHJvcHMuY2hpbGRyZW47XG4gICAgICB2YXIgb3duQW5jZXN0b3JJbmZvID0gdXBkYXRlZEFuY2VzdG9ySW5mbyhob3N0Q29udGV4dERldi5hbmNlc3RvckluZm8sIHR5cGUpO1xuICAgICAgdmFsaWRhdGVET01OZXN0aW5nKG51bGwsIHN0cmluZywgb3duQW5jZXN0b3JJbmZvKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGlmZlByb3BlcnRpZXMoZG9tRWxlbWVudCwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzKTtcbn1cbmZ1bmN0aW9uIHNob3VsZFNldFRleHRDb250ZW50KHR5cGUsIHByb3BzKSB7XG4gIHJldHVybiB0eXBlID09PSAndGV4dGFyZWEnIHx8IHR5cGUgPT09ICdub3NjcmlwdCcgfHwgdHlwZW9mIHByb3BzLmNoaWxkcmVuID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgcHJvcHMuY2hpbGRyZW4gPT09ICdudW1iZXInIHx8IHR5cGVvZiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PT0gJ29iamVjdCcgJiYgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgIT09IG51bGwgJiYgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sICE9IG51bGw7XG59XG5mdW5jdGlvbiBjcmVhdGVUZXh0SW5zdGFuY2UodGV4dCwgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCwgaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSkge1xuICB7XG4gICAgdmFyIGhvc3RDb250ZXh0RGV2ID0gaG9zdENvbnRleHQ7XG4gICAgdmFsaWRhdGVET01OZXN0aW5nKG51bGwsIHRleHQsIGhvc3RDb250ZXh0RGV2LmFuY2VzdG9ySW5mbyk7XG4gIH1cblxuICB2YXIgdGV4dE5vZGUgPSBjcmVhdGVUZXh0Tm9kZSh0ZXh0LCByb290Q29udGFpbmVySW5zdGFuY2UpO1xuICBwcmVjYWNoZUZpYmVyTm9kZShpbnRlcm5hbEluc3RhbmNlSGFuZGxlLCB0ZXh0Tm9kZSk7XG4gIHJldHVybiB0ZXh0Tm9kZTtcbn1cbmZ1bmN0aW9uIGdldEN1cnJlbnRFdmVudFByaW9yaXR5KCkge1xuICB2YXIgY3VycmVudEV2ZW50ID0gd2luZG93LmV2ZW50O1xuXG4gIGlmIChjdXJyZW50RXZlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBEZWZhdWx0RXZlbnRQcmlvcml0eTtcbiAgfVxuXG4gIHJldHVybiBnZXRFdmVudFByaW9yaXR5KGN1cnJlbnRFdmVudC50eXBlKTtcbn1cbi8vIGlmIGEgY29tcG9uZW50IGp1c3QgaW1wb3J0cyBSZWFjdERPTSAoZS5nLiBmb3IgZmluZERPTU5vZGUpLlxuLy8gU29tZSBlbnZpcm9ubWVudHMgbWlnaHQgbm90IGhhdmUgc2V0VGltZW91dCBvciBjbGVhclRpbWVvdXQuXG5cbnZhciBzY2hlZHVsZVRpbWVvdXQgPSB0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJyA/IHNldFRpbWVvdXQgOiB1bmRlZmluZWQ7XG52YXIgY2FuY2VsVGltZW91dCA9IHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicgPyBjbGVhclRpbWVvdXQgOiB1bmRlZmluZWQ7XG52YXIgbm9UaW1lb3V0ID0gLTE7XG52YXIgbG9jYWxQcm9taXNlID0gdHlwZW9mIFByb21pc2UgPT09ICdmdW5jdGlvbicgPyBQcm9taXNlIDogdW5kZWZpbmVkOyAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tXG52YXIgc2NoZWR1bGVNaWNyb3Rhc2sgPSB0eXBlb2YgcXVldWVNaWNyb3Rhc2sgPT09ICdmdW5jdGlvbicgPyBxdWV1ZU1pY3JvdGFzayA6IHR5cGVvZiBsb2NhbFByb21pc2UgIT09ICd1bmRlZmluZWQnID8gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gIHJldHVybiBsb2NhbFByb21pc2UucmVzb2x2ZShudWxsKS50aGVuKGNhbGxiYWNrKS5jYXRjaChoYW5kbGVFcnJvckluTmV4dFRpY2spO1xufSA6IHNjaGVkdWxlVGltZW91dDsgLy8gVE9ETzogRGV0ZXJtaW5lIHRoZSBiZXN0IGZhbGxiYWNrIGhlcmUuXG5cbmZ1bmN0aW9uIGhhbmRsZUVycm9ySW5OZXh0VGljayhlcnJvcikge1xuICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICB0aHJvdyBlcnJvcjtcbiAgfSk7XG59IC8vIC0tLS0tLS0tLS0tLS0tLS0tLS1cbmZ1bmN0aW9uIGNvbW1pdE1vdW50KGRvbUVsZW1lbnQsIHR5cGUsIG5ld1Byb3BzLCBpbnRlcm5hbEluc3RhbmNlSGFuZGxlKSB7XG4gIC8vIERlc3BpdGUgdGhlIG5hbWluZyB0aGF0IG1pZ2h0IGltcGx5IG90aGVyd2lzZSwgdGhpcyBtZXRob2Qgb25seVxuICAvLyBmaXJlcyBpZiB0aGVyZSBpcyBhbiBgVXBkYXRlYCBlZmZlY3Qgc2NoZWR1bGVkIGR1cmluZyBtb3VudGluZy5cbiAgLy8gVGhpcyBoYXBwZW5zIGlmIGBmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbmAgcmV0dXJucyBgdHJ1ZWAgKHdoaWNoIGl0XG4gIC8vIGRvZXMgdG8gaW1wbGVtZW50IHRoZSBgYXV0b0ZvY3VzYCBhdHRyaWJ1dGUgb24gdGhlIGNsaWVudCkuIEJ1dFxuICAvLyB0aGVyZSBhcmUgYWxzbyBvdGhlciBjYXNlcyB3aGVuIHRoaXMgbWlnaHQgaGFwcGVuIChzdWNoIGFzIHBhdGNoaW5nXG4gIC8vIHVwIHRleHQgY29udGVudCBkdXJpbmcgaHlkcmF0aW9uIG1pc21hdGNoKS4gU28gd2UnbGwgY2hlY2sgdGhpcyBhZ2Fpbi5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnYnV0dG9uJzpcbiAgICBjYXNlICdpbnB1dCc6XG4gICAgY2FzZSAnc2VsZWN0JzpcbiAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICBpZiAobmV3UHJvcHMuYXV0b0ZvY3VzKSB7XG4gICAgICAgIGRvbUVsZW1lbnQuZm9jdXMoKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuO1xuXG4gICAgY2FzZSAnaW1nJzpcbiAgICAgIHtcbiAgICAgICAgaWYgKG5ld1Byb3BzLnNyYykge1xuICAgICAgICAgIGRvbUVsZW1lbnQuc3JjID0gbmV3UHJvcHMuc3JjO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG59XG5mdW5jdGlvbiBjb21taXRVcGRhdGUoZG9tRWxlbWVudCwgdXBkYXRlUGF5bG9hZCwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCBpbnRlcm5hbEluc3RhbmNlSGFuZGxlKSB7XG4gIC8vIEFwcGx5IHRoZSBkaWZmIHRvIHRoZSBET00gbm9kZS5cbiAgdXBkYXRlUHJvcGVydGllcyhkb21FbGVtZW50LCB1cGRhdGVQYXlsb2FkLCB0eXBlLCBvbGRQcm9wcywgbmV3UHJvcHMpOyAvLyBVcGRhdGUgdGhlIHByb3BzIGhhbmRsZSBzbyB0aGF0IHdlIGtub3cgd2hpY2ggcHJvcHMgYXJlIHRoZSBvbmVzIHdpdGhcbiAgLy8gd2l0aCBjdXJyZW50IGV2ZW50IGhhbmRsZXJzLlxuXG4gIHVwZGF0ZUZpYmVyUHJvcHMoZG9tRWxlbWVudCwgbmV3UHJvcHMpO1xufVxuZnVuY3Rpb24gcmVzZXRUZXh0Q29udGVudChkb21FbGVtZW50KSB7XG4gIHNldFRleHRDb250ZW50KGRvbUVsZW1lbnQsICcnKTtcbn1cbmZ1bmN0aW9uIGNvbW1pdFRleHRVcGRhdGUodGV4dEluc3RhbmNlLCBvbGRUZXh0LCBuZXdUZXh0KSB7XG4gIHRleHRJbnN0YW5jZS5ub2RlVmFsdWUgPSBuZXdUZXh0O1xufVxuZnVuY3Rpb24gYXBwZW5kQ2hpbGQocGFyZW50SW5zdGFuY2UsIGNoaWxkKSB7XG4gIHBhcmVudEluc3RhbmNlLmFwcGVuZENoaWxkKGNoaWxkKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZENoaWxkVG9Db250YWluZXIoY29udGFpbmVyLCBjaGlsZCkge1xuICB2YXIgcGFyZW50Tm9kZTtcblxuICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBDT01NRU5UX05PREUpIHtcbiAgICBwYXJlbnROb2RlID0gY29udGFpbmVyLnBhcmVudE5vZGU7XG4gICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoY2hpbGQsIGNvbnRhaW5lcik7XG4gIH0gZWxzZSB7XG4gICAgcGFyZW50Tm9kZSA9IGNvbnRhaW5lcjtcbiAgICBwYXJlbnROb2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgfSAvLyBUaGlzIGNvbnRhaW5lciBtaWdodCBiZSB1c2VkIGZvciBhIHBvcnRhbC5cbiAgLy8gSWYgc29tZXRoaW5nIGluc2lkZSBhIHBvcnRhbCBpcyBjbGlja2VkLCB0aGF0IGNsaWNrIHNob3VsZCBidWJibGVcbiAgLy8gdGhyb3VnaCB0aGUgUmVhY3QgdHJlZS4gSG93ZXZlciwgb24gTW9iaWxlIFNhZmFyaSB0aGUgY2xpY2sgd291bGRcbiAgLy8gbmV2ZXIgYnViYmxlIHRocm91Z2ggdGhlICpET00qIHRyZWUgdW5sZXNzIGFuIGFuY2VzdG9yIHdpdGggb25jbGlja1xuICAvLyBldmVudCBleGlzdHMuIFNvIHdlIHdvdWxkbid0IHNlZSBpdCBhbmQgZGlzcGF0Y2ggaXQuXG4gIC8vIFRoaXMgaXMgd2h5IHdlIGVuc3VyZSB0aGF0IG5vbiBSZWFjdCByb290IGNvbnRhaW5lcnMgaGF2ZSBpbmxpbmUgb25jbGlja1xuICAvLyBkZWZpbmVkLlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzExOTE4XG5cblxuICB2YXIgcmVhY3RSb290Q29udGFpbmVyID0gY29udGFpbmVyLl9yZWFjdFJvb3RDb250YWluZXI7XG5cbiAgaWYgKChyZWFjdFJvb3RDb250YWluZXIgPT09IG51bGwgfHwgcmVhY3RSb290Q29udGFpbmVyID09PSB1bmRlZmluZWQpICYmIHBhcmVudE5vZGUub25jbGljayA9PT0gbnVsbCkge1xuICAgIC8vIFRPRE86IFRoaXMgY2FzdCBtYXkgbm90IGJlIHNvdW5kIGZvciBTVkcsIE1hdGhNTCBvciBjdXN0b20gZWxlbWVudHMuXG4gICAgdHJhcENsaWNrT25Ob25JbnRlcmFjdGl2ZUVsZW1lbnQocGFyZW50Tm9kZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGluc2VydEJlZm9yZShwYXJlbnRJbnN0YW5jZSwgY2hpbGQsIGJlZm9yZUNoaWxkKSB7XG4gIHBhcmVudEluc3RhbmNlLmluc2VydEJlZm9yZShjaGlsZCwgYmVmb3JlQ2hpbGQpO1xufVxuZnVuY3Rpb24gaW5zZXJ0SW5Db250YWluZXJCZWZvcmUoY29udGFpbmVyLCBjaGlsZCwgYmVmb3JlQ2hpbGQpIHtcbiAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFKSB7XG4gICAgY29udGFpbmVyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkLCBiZWZvcmVDaGlsZCk7XG4gIH0gZWxzZSB7XG4gICAgY29udGFpbmVyLmluc2VydEJlZm9yZShjaGlsZCwgYmVmb3JlQ2hpbGQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUNoaWxkKHBhcmVudEluc3RhbmNlLCBjaGlsZCkge1xuICBwYXJlbnRJbnN0YW5jZS5yZW1vdmVDaGlsZChjaGlsZCk7XG59XG5mdW5jdGlvbiByZW1vdmVDaGlsZEZyb21Db250YWluZXIoY29udGFpbmVyLCBjaGlsZCkge1xuICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBDT01NRU5UX05PREUpIHtcbiAgICBjb250YWluZXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG4gIH0gZWxzZSB7XG4gICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNoaWxkKTtcbiAgfVxufVxuZnVuY3Rpb24gY2xlYXJTdXNwZW5zZUJvdW5kYXJ5KHBhcmVudEluc3RhbmNlLCBzdXNwZW5zZUluc3RhbmNlKSB7XG4gIHZhciBub2RlID0gc3VzcGVuc2VJbnN0YW5jZTsgLy8gRGVsZXRlIGFsbCBub2RlcyB3aXRoaW4gdGhpcyBzdXNwZW5zZSBib3VuZGFyeS5cbiAgLy8gVGhlcmUgbWlnaHQgYmUgbmVzdGVkIG5vZGVzIHNvIHdlIG5lZWQgdG8ga2VlcCB0cmFjayBvZiBob3dcbiAgLy8gZGVlcCB3ZSBhcmUgYW5kIG9ubHkgYnJlYWsgb3V0IHdoZW4gd2UncmUgYmFjayBvbiB0b3AuXG5cbiAgdmFyIGRlcHRoID0gMDtcblxuICBkbyB7XG4gICAgdmFyIG5leHROb2RlID0gbm9kZS5uZXh0U2libGluZztcbiAgICBwYXJlbnRJbnN0YW5jZS5yZW1vdmVDaGlsZChub2RlKTtcblxuICAgIGlmIChuZXh0Tm9kZSAmJiBuZXh0Tm9kZS5ub2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFKSB7XG4gICAgICB2YXIgZGF0YSA9IG5leHROb2RlLmRhdGE7XG5cbiAgICAgIGlmIChkYXRhID09PSBTVVNQRU5TRV9FTkRfREFUQSkge1xuICAgICAgICBpZiAoZGVwdGggPT09IDApIHtcbiAgICAgICAgICBwYXJlbnRJbnN0YW5jZS5yZW1vdmVDaGlsZChuZXh0Tm9kZSk7IC8vIFJldHJ5IGlmIGFueSBldmVudCByZXBsYXlpbmcgd2FzIGJsb2NrZWQgb24gdGhpcy5cblxuICAgICAgICAgIHJldHJ5SWZCbG9ja2VkT24oc3VzcGVuc2VJbnN0YW5jZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlcHRoLS07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gU1VTUEVOU0VfU1RBUlRfREFUQSB8fCBkYXRhID09PSBTVVNQRU5TRV9QRU5ESU5HX1NUQVJUX0RBVEEgfHwgZGF0YSA9PT0gU1VTUEVOU0VfRkFMTEJBQ0tfU1RBUlRfREFUQSkge1xuICAgICAgICBkZXB0aCsrO1xuICAgICAgfVxuICAgIH1cblxuICAgIG5vZGUgPSBuZXh0Tm9kZTtcbiAgfSB3aGlsZSAobm9kZSk7IC8vIFRPRE86IFdhcm4sIHdlIGRpZG4ndCBmaW5kIHRoZSBlbmQgY29tbWVudCBib3VuZGFyeS5cbiAgLy8gUmV0cnkgaWYgYW55IGV2ZW50IHJlcGxheWluZyB3YXMgYmxvY2tlZCBvbiB0aGlzLlxuXG5cbiAgcmV0cnlJZkJsb2NrZWRPbihzdXNwZW5zZUluc3RhbmNlKTtcbn1cbmZ1bmN0aW9uIGNsZWFyU3VzcGVuc2VCb3VuZGFyeUZyb21Db250YWluZXIoY29udGFpbmVyLCBzdXNwZW5zZUluc3RhbmNlKSB7XG4gIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IENPTU1FTlRfTk9ERSkge1xuICAgIGNsZWFyU3VzcGVuc2VCb3VuZGFyeShjb250YWluZXIucGFyZW50Tm9kZSwgc3VzcGVuc2VJbnN0YW5jZSk7XG4gIH0gZWxzZSBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICBjbGVhclN1c3BlbnNlQm91bmRhcnkoY29udGFpbmVyLCBzdXNwZW5zZUluc3RhbmNlKTtcbiAgfSAvLyBSZXRyeSBpZiBhbnkgZXZlbnQgcmVwbGF5aW5nIHdhcyBibG9ja2VkIG9uIHRoaXMuXG5cblxuICByZXRyeUlmQmxvY2tlZE9uKGNvbnRhaW5lcik7XG59XG5mdW5jdGlvbiBoaWRlSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgLy8gVE9ETzogRG9lcyB0aGlzIHdvcmsgZm9yIGFsbCBlbGVtZW50IHR5cGVzPyBXaGF0IGFib3V0IE1hdGhNTD8gU2hvdWxkIHdlXG4gIC8vIHBhc3MgaG9zdCBjb250ZXh0IHRvIHRoaXMgbWV0aG9kP1xuICBpbnN0YW5jZSA9IGluc3RhbmNlO1xuICB2YXIgc3R5bGUgPSBpbnN0YW5jZS5zdHlsZTtcblxuICBpZiAodHlwZW9mIHN0eWxlLnNldFByb3BlcnR5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgc3R5bGUuc2V0UHJvcGVydHkoJ2Rpc3BsYXknLCAnbm9uZScsICdpbXBvcnRhbnQnKTtcbiAgfSBlbHNlIHtcbiAgICBzdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB9XG59XG5mdW5jdGlvbiBoaWRlVGV4dEluc3RhbmNlKHRleHRJbnN0YW5jZSkge1xuICB0ZXh0SW5zdGFuY2Uubm9kZVZhbHVlID0gJyc7XG59XG5mdW5jdGlvbiB1bmhpZGVJbnN0YW5jZShpbnN0YW5jZSwgcHJvcHMpIHtcbiAgaW5zdGFuY2UgPSBpbnN0YW5jZTtcbiAgdmFyIHN0eWxlUHJvcCA9IHByb3BzW1NUWUxFJDFdO1xuICB2YXIgZGlzcGxheSA9IHN0eWxlUHJvcCAhPT0gdW5kZWZpbmVkICYmIHN0eWxlUHJvcCAhPT0gbnVsbCAmJiBzdHlsZVByb3AuaGFzT3duUHJvcGVydHkoJ2Rpc3BsYXknKSA/IHN0eWxlUHJvcC5kaXNwbGF5IDogbnVsbDtcbiAgaW5zdGFuY2Uuc3R5bGUuZGlzcGxheSA9IGRhbmdlcm91c1N0eWxlVmFsdWUoJ2Rpc3BsYXknLCBkaXNwbGF5KTtcbn1cbmZ1bmN0aW9uIHVuaGlkZVRleHRJbnN0YW5jZSh0ZXh0SW5zdGFuY2UsIHRleHQpIHtcbiAgdGV4dEluc3RhbmNlLm5vZGVWYWx1ZSA9IHRleHQ7XG59XG5mdW5jdGlvbiBjbGVhckNvbnRhaW5lcihjb250YWluZXIpIHtcbiAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgY29udGFpbmVyLnRleHRDb250ZW50ID0gJyc7XG4gIH0gZWxzZSBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBET0NVTUVOVF9OT0RFKSB7XG4gICAgaWYgKGNvbnRhaW5lci5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIuZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cbn0gLy8gLS0tLS0tLS0tLS0tLS0tLS0tLVxuZnVuY3Rpb24gY2FuSHlkcmF0ZUluc3RhbmNlKGluc3RhbmNlLCB0eXBlLCBwcm9wcykge1xuICBpZiAoaW5zdGFuY2Uubm9kZVR5cGUgIT09IEVMRU1FTlRfTk9ERSB8fCB0eXBlLnRvTG93ZXJDYXNlKCkgIT09IGluc3RhbmNlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfSAvLyBUaGlzIGhhcyBub3cgYmVlbiByZWZpbmVkIHRvIGFuIGVsZW1lbnQgbm9kZS5cblxuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UoaW5zdGFuY2UsIHRleHQpIHtcbiAgaWYgKHRleHQgPT09ICcnIHx8IGluc3RhbmNlLm5vZGVUeXBlICE9PSBURVhUX05PREUpIHtcbiAgICAvLyBFbXB0eSBzdHJpbmdzIGFyZSBub3QgcGFyc2VkIGJ5IEhUTUwgc28gdGhlcmUgd29uJ3QgYmUgYSBjb3JyZWN0IG1hdGNoIGhlcmUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gVGhpcyBoYXMgbm93IGJlZW4gcmVmaW5lZCB0byBhIHRleHQgbm9kZS5cblxuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIGNhbkh5ZHJhdGVTdXNwZW5zZUluc3RhbmNlKGluc3RhbmNlKSB7XG4gIGlmIChpbnN0YW5jZS5ub2RlVHlwZSAhPT0gQ09NTUVOVF9OT0RFKSB7XG4gICAgLy8gRW1wdHkgc3RyaW5ncyBhcmUgbm90IHBhcnNlZCBieSBIVE1MIHNvIHRoZXJlIHdvbid0IGJlIGEgY29ycmVjdCBtYXRjaCBoZXJlLlxuICAgIHJldHVybiBudWxsO1xuICB9IC8vIFRoaXMgaGFzIG5vdyBiZWVuIHJlZmluZWQgdG8gYSBzdXNwZW5zZSBub2RlLlxuXG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuZnVuY3Rpb24gaXNTdXNwZW5zZUluc3RhbmNlUGVuZGluZyhpbnN0YW5jZSkge1xuICByZXR1cm4gaW5zdGFuY2UuZGF0YSA9PT0gU1VTUEVOU0VfUEVORElOR19TVEFSVF9EQVRBO1xufVxuZnVuY3Rpb24gaXNTdXNwZW5zZUluc3RhbmNlRmFsbGJhY2soaW5zdGFuY2UpIHtcbiAgcmV0dXJuIGluc3RhbmNlLmRhdGEgPT09IFNVU1BFTlNFX0ZBTExCQUNLX1NUQVJUX0RBVEE7XG59XG5mdW5jdGlvbiBnZXRTdXNwZW5zZUluc3RhbmNlRmFsbGJhY2tFcnJvckRldGFpbHMoaW5zdGFuY2UpIHtcbiAgdmFyIGRhdGFzZXQgPSBpbnN0YW5jZS5uZXh0U2libGluZyAmJiBpbnN0YW5jZS5uZXh0U2libGluZy5kYXRhc2V0O1xuICB2YXIgZGlnZXN0LCBtZXNzYWdlLCBzdGFjaztcblxuICBpZiAoZGF0YXNldCkge1xuICAgIGRpZ2VzdCA9IGRhdGFzZXQuZGdzdDtcblxuICAgIHtcbiAgICAgIG1lc3NhZ2UgPSBkYXRhc2V0Lm1zZztcbiAgICAgIHN0YWNrID0gZGF0YXNldC5zdGNrO1xuICAgIH1cbiAgfVxuXG4gIHtcbiAgICByZXR1cm4ge1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIGRpZ2VzdDogZGlnZXN0LFxuICAgICAgc3RhY2s6IHN0YWNrXG4gICAgfTtcbiAgfSAvLyBsZXQgdmFsdWUgPSB7bWVzc2FnZTogdW5kZWZpbmVkLCBoYXNoOiB1bmRlZmluZWR9O1xuICAvLyBjb25zdCBuZXh0U2libGluZyA9IGluc3RhbmNlLm5leHRTaWJsaW5nO1xuICAvLyBpZiAobmV4dFNpYmxpbmcpIHtcbiAgLy8gICBjb25zdCBkYXRhc2V0ID0gKChuZXh0U2libGluZzogYW55KTogSFRNTFRlbXBsYXRlRWxlbWVudCkuZGF0YXNldDtcbiAgLy8gICB2YWx1ZS5tZXNzYWdlID0gZGF0YXNldC5tc2c7XG4gIC8vICAgdmFsdWUuaGFzaCA9IGRhdGFzZXQuaGFzaDtcbiAgLy8gICBpZiAodHJ1ZSkge1xuICAvLyAgICAgdmFsdWUuc3RhY2sgPSBkYXRhc2V0LnN0YWNrO1xuICAvLyAgIH1cbiAgLy8gfVxuICAvLyByZXR1cm4gdmFsdWU7XG5cbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyU3VzcGVuc2VJbnN0YW5jZVJldHJ5KGluc3RhbmNlLCBjYWxsYmFjaykge1xuICBpbnN0YW5jZS5fcmVhY3RSZXRyeSA9IGNhbGxiYWNrO1xufVxuXG5mdW5jdGlvbiBnZXROZXh0SHlkcmF0YWJsZShub2RlKSB7XG4gIC8vIFNraXAgbm9uLWh5ZHJhdGFibGUgbm9kZXMuXG4gIGZvciAoOyBub2RlICE9IG51bGw7IG5vZGUgPSBub2RlLm5leHRTaWJsaW5nKSB7XG4gICAgdmFyIG5vZGVUeXBlID0gbm9kZS5ub2RlVHlwZTtcblxuICAgIGlmIChub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFIHx8IG5vZGVUeXBlID09PSBURVhUX05PREUpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChub2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFKSB7XG4gICAgICB2YXIgbm9kZURhdGEgPSBub2RlLmRhdGE7XG5cbiAgICAgIGlmIChub2RlRGF0YSA9PT0gU1VTUEVOU0VfU1RBUlRfREFUQSB8fCBub2RlRGF0YSA9PT0gU1VTUEVOU0VfRkFMTEJBQ0tfU1RBUlRfREFUQSB8fCBub2RlRGF0YSA9PT0gU1VTUEVOU0VfUEVORElOR19TVEFSVF9EQVRBKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAobm9kZURhdGEgPT09IFNVU1BFTlNFX0VORF9EQVRBKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBub2RlO1xufVxuXG5mdW5jdGlvbiBnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcoaW5zdGFuY2UpIHtcbiAgcmV0dXJuIGdldE5leHRIeWRyYXRhYmxlKGluc3RhbmNlLm5leHRTaWJsaW5nKTtcbn1cbmZ1bmN0aW9uIGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkKHBhcmVudEluc3RhbmNlKSB7XG4gIHJldHVybiBnZXROZXh0SHlkcmF0YWJsZShwYXJlbnRJbnN0YW5jZS5maXJzdENoaWxkKTtcbn1cbmZ1bmN0aW9uIGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkV2l0aGluQ29udGFpbmVyKHBhcmVudENvbnRhaW5lcikge1xuICByZXR1cm4gZ2V0TmV4dEh5ZHJhdGFibGUocGFyZW50Q29udGFpbmVyLmZpcnN0Q2hpbGQpO1xufVxuZnVuY3Rpb24gZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGRXaXRoaW5TdXNwZW5zZUluc3RhbmNlKHBhcmVudEluc3RhbmNlKSB7XG4gIHJldHVybiBnZXROZXh0SHlkcmF0YWJsZShwYXJlbnRJbnN0YW5jZS5uZXh0U2libGluZyk7XG59XG5mdW5jdGlvbiBoeWRyYXRlSW5zdGFuY2UoaW5zdGFuY2UsIHR5cGUsIHByb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGhvc3RDb250ZXh0LCBpbnRlcm5hbEluc3RhbmNlSGFuZGxlLCBzaG91bGRXYXJuRGV2KSB7XG4gIHByZWNhY2hlRmliZXJOb2RlKGludGVybmFsSW5zdGFuY2VIYW5kbGUsIGluc3RhbmNlKTsgLy8gVE9ETzogUG9zc2libHkgZGVmZXIgdGhpcyB1bnRpbCB0aGUgY29tbWl0IHBoYXNlIHdoZXJlIGFsbCB0aGUgZXZlbnRzXG4gIC8vIGdldCBhdHRhY2hlZC5cblxuICB1cGRhdGVGaWJlclByb3BzKGluc3RhbmNlLCBwcm9wcyk7XG4gIHZhciBwYXJlbnROYW1lc3BhY2U7XG5cbiAge1xuICAgIHZhciBob3N0Q29udGV4dERldiA9IGhvc3RDb250ZXh0O1xuICAgIHBhcmVudE5hbWVzcGFjZSA9IGhvc3RDb250ZXh0RGV2Lm5hbWVzcGFjZTtcbiAgfSAvLyBUT0RPOiBUZW1wb3JhcnkgaGFjayB0byBjaGVjayBpZiB3ZSdyZSBpbiBhIGNvbmN1cnJlbnQgcm9vdC4gV2UgY2FuIGRlbGV0ZVxuICAvLyB3aGVuIHRoZSBsZWdhY3kgcm9vdCBBUEkgaXMgcmVtb3ZlZC5cblxuXG4gIHZhciBpc0NvbmN1cnJlbnRNb2RlID0gKGludGVybmFsSW5zdGFuY2VIYW5kbGUubW9kZSAmIENvbmN1cnJlbnRNb2RlKSAhPT0gTm9Nb2RlO1xuICByZXR1cm4gZGlmZkh5ZHJhdGVkUHJvcGVydGllcyhpbnN0YW5jZSwgdHlwZSwgcHJvcHMsIHBhcmVudE5hbWVzcGFjZSwgcm9vdENvbnRhaW5lckluc3RhbmNlLCBpc0NvbmN1cnJlbnRNb2RlLCBzaG91bGRXYXJuRGV2KTtcbn1cbmZ1bmN0aW9uIGh5ZHJhdGVUZXh0SW5zdGFuY2UodGV4dEluc3RhbmNlLCB0ZXh0LCBpbnRlcm5hbEluc3RhbmNlSGFuZGxlLCBzaG91bGRXYXJuRGV2KSB7XG4gIHByZWNhY2hlRmliZXJOb2RlKGludGVybmFsSW5zdGFuY2VIYW5kbGUsIHRleHRJbnN0YW5jZSk7IC8vIFRPRE86IFRlbXBvcmFyeSBoYWNrIHRvIGNoZWNrIGlmIHdlJ3JlIGluIGEgY29uY3VycmVudCByb290LiBXZSBjYW4gZGVsZXRlXG4gIC8vIHdoZW4gdGhlIGxlZ2FjeSByb290IEFQSSBpcyByZW1vdmVkLlxuXG4gIHZhciBpc0NvbmN1cnJlbnRNb2RlID0gKGludGVybmFsSW5zdGFuY2VIYW5kbGUubW9kZSAmIENvbmN1cnJlbnRNb2RlKSAhPT0gTm9Nb2RlO1xuICByZXR1cm4gZGlmZkh5ZHJhdGVkVGV4dCh0ZXh0SW5zdGFuY2UsIHRleHQpO1xufVxuZnVuY3Rpb24gaHlkcmF0ZVN1c3BlbnNlSW5zdGFuY2Uoc3VzcGVuc2VJbnN0YW5jZSwgaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSkge1xuICBwcmVjYWNoZUZpYmVyTm9kZShpbnRlcm5hbEluc3RhbmNlSGFuZGxlLCBzdXNwZW5zZUluc3RhbmNlKTtcbn1cbmZ1bmN0aW9uIGdldE5leHRIeWRyYXRhYmxlSW5zdGFuY2VBZnRlclN1c3BlbnNlSW5zdGFuY2Uoc3VzcGVuc2VJbnN0YW5jZSkge1xuICB2YXIgbm9kZSA9IHN1c3BlbnNlSW5zdGFuY2UubmV4dFNpYmxpbmc7IC8vIFNraXAgcGFzdCBhbGwgbm9kZXMgd2l0aGluIHRoaXMgc3VzcGVuc2UgYm91bmRhcnkuXG4gIC8vIFRoZXJlIG1pZ2h0IGJlIG5lc3RlZCBub2RlcyBzbyB3ZSBuZWVkIHRvIGtlZXAgdHJhY2sgb2YgaG93XG4gIC8vIGRlZXAgd2UgYXJlIGFuZCBvbmx5IGJyZWFrIG91dCB3aGVuIHdlJ3JlIGJhY2sgb24gdG9wLlxuXG4gIHZhciBkZXB0aCA9IDA7XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFKSB7XG4gICAgICB2YXIgZGF0YSA9IG5vZGUuZGF0YTtcblxuICAgICAgaWYgKGRhdGEgPT09IFNVU1BFTlNFX0VORF9EQVRBKSB7XG4gICAgICAgIGlmIChkZXB0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcobm9kZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVwdGgtLTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChkYXRhID09PSBTVVNQRU5TRV9TVEFSVF9EQVRBIHx8IGRhdGEgPT09IFNVU1BFTlNFX0ZBTExCQUNLX1NUQVJUX0RBVEEgfHwgZGF0YSA9PT0gU1VTUEVOU0VfUEVORElOR19TVEFSVF9EQVRBKSB7XG4gICAgICAgIGRlcHRoKys7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbm9kZSA9IG5vZGUubmV4dFNpYmxpbmc7XG4gIH0gLy8gVE9ETzogV2Fybiwgd2UgZGlkbid0IGZpbmQgdGhlIGVuZCBjb21tZW50IGJvdW5kYXJ5LlxuXG5cbiAgcmV0dXJuIG51bGw7XG59IC8vIFJldHVybnMgdGhlIFN1c3BlbnNlSW5zdGFuY2UgaWYgdGhpcyBub2RlIGlzIGEgZGlyZWN0IGNoaWxkIG9mIGFcbi8vIFN1c3BlbnNlSW5zdGFuY2UuIEkuZS4gaWYgaXRzIHByZXZpb3VzIHNpYmxpbmcgaXMgYSBDb21tZW50IHdpdGhcbi8vIFNVU1BFTlNFX3hfU1RBUlRfREFUQS4gT3RoZXJ3aXNlLCBudWxsLlxuXG5mdW5jdGlvbiBnZXRQYXJlbnRTdXNwZW5zZUluc3RhbmNlKHRhcmdldEluc3RhbmNlKSB7XG4gIHZhciBub2RlID0gdGFyZ2V0SW5zdGFuY2UucHJldmlvdXNTaWJsaW5nOyAvLyBTa2lwIHBhc3QgYWxsIG5vZGVzIHdpdGhpbiB0aGlzIHN1c3BlbnNlIGJvdW5kYXJ5LlxuICAvLyBUaGVyZSBtaWdodCBiZSBuZXN0ZWQgbm9kZXMgc28gd2UgbmVlZCB0byBrZWVwIHRyYWNrIG9mIGhvd1xuICAvLyBkZWVwIHdlIGFyZSBhbmQgb25seSBicmVhayBvdXQgd2hlbiB3ZSdyZSBiYWNrIG9uIHRvcC5cblxuICB2YXIgZGVwdGggPSAwO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IENPTU1FTlRfTk9ERSkge1xuICAgICAgdmFyIGRhdGEgPSBub2RlLmRhdGE7XG5cbiAgICAgIGlmIChkYXRhID09PSBTVVNQRU5TRV9TVEFSVF9EQVRBIHx8IGRhdGEgPT09IFNVU1BFTlNFX0ZBTExCQUNLX1NUQVJUX0RBVEEgfHwgZGF0YSA9PT0gU1VTUEVOU0VfUEVORElOR19TVEFSVF9EQVRBKSB7XG4gICAgICAgIGlmIChkZXB0aCA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlcHRoLS07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZGF0YSA9PT0gU1VTUEVOU0VfRU5EX0RBVEEpIHtcbiAgICAgICAgZGVwdGgrKztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBub2RlID0gbm9kZS5wcmV2aW91c1NpYmxpbmc7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGNvbW1pdEh5ZHJhdGVkQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICAvLyBSZXRyeSBpZiBhbnkgZXZlbnQgcmVwbGF5aW5nIHdhcyBibG9ja2VkIG9uIHRoaXMuXG4gIHJldHJ5SWZCbG9ja2VkT24oY29udGFpbmVyKTtcbn1cbmZ1bmN0aW9uIGNvbW1pdEh5ZHJhdGVkU3VzcGVuc2VJbnN0YW5jZShzdXNwZW5zZUluc3RhbmNlKSB7XG4gIC8vIFJldHJ5IGlmIGFueSBldmVudCByZXBsYXlpbmcgd2FzIGJsb2NrZWQgb24gdGhpcy5cbiAgcmV0cnlJZkJsb2NrZWRPbihzdXNwZW5zZUluc3RhbmNlKTtcbn1cbmZ1bmN0aW9uIHNob3VsZERlbGV0ZVVuaHlkcmF0ZWRUYWlsSW5zdGFuY2VzKHBhcmVudFR5cGUpIHtcbiAgcmV0dXJuIHBhcmVudFR5cGUgIT09ICdoZWFkJyAmJiBwYXJlbnRUeXBlICE9PSAnYm9keSc7XG59XG5mdW5jdGlvbiBkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlKHBhcmVudENvbnRhaW5lciwgdGV4dEluc3RhbmNlLCB0ZXh0LCBpc0NvbmN1cnJlbnRNb2RlKSB7XG4gIHZhciBzaG91bGRXYXJuRGV2ID0gdHJ1ZTtcbiAgY2hlY2tGb3JVbm1hdGNoZWRUZXh0KHRleHRJbnN0YW5jZS5ub2RlVmFsdWUsIHRleHQsIGlzQ29uY3VycmVudE1vZGUsIHNob3VsZFdhcm5EZXYpO1xufVxuZnVuY3Rpb24gZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZShwYXJlbnRUeXBlLCBwYXJlbnRQcm9wcywgcGFyZW50SW5zdGFuY2UsIHRleHRJbnN0YW5jZSwgdGV4dCwgaXNDb25jdXJyZW50TW9kZSkge1xuICBpZiAocGFyZW50UHJvcHNbU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkckMV0gIT09IHRydWUpIHtcbiAgICB2YXIgc2hvdWxkV2FybkRldiA9IHRydWU7XG4gICAgY2hlY2tGb3JVbm1hdGNoZWRUZXh0KHRleHRJbnN0YW5jZS5ub2RlVmFsdWUsIHRleHQsIGlzQ29uY3VycmVudE1vZGUsIHNob3VsZFdhcm5EZXYpO1xuICB9XG59XG5mdW5jdGlvbiBkaWROb3RIeWRyYXRlSW5zdGFuY2VXaXRoaW5Db250YWluZXIocGFyZW50Q29udGFpbmVyLCBpbnN0YW5jZSkge1xuICB7XG4gICAgaWYgKGluc3RhbmNlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgIHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZUVsZW1lbnQocGFyZW50Q29udGFpbmVyLCBpbnN0YW5jZSk7XG4gICAgfSBlbHNlIGlmIChpbnN0YW5jZS5ub2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFKSA7IGVsc2Uge1xuICAgICAgd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dChwYXJlbnRDb250YWluZXIsIGluc3RhbmNlKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGRpZE5vdEh5ZHJhdGVJbnN0YW5jZVdpdGhpblN1c3BlbnNlSW5zdGFuY2UocGFyZW50SW5zdGFuY2UsIGluc3RhbmNlKSB7XG4gIHtcbiAgICAvLyAkRmxvd0ZpeE1lOiBPbmx5IEVsZW1lbnQgb3IgRG9jdW1lbnQgY2FuIGJlIHBhcmVudCBub2Rlcy5cbiAgICB2YXIgcGFyZW50Tm9kZSA9IHBhcmVudEluc3RhbmNlLnBhcmVudE5vZGU7XG5cbiAgICBpZiAocGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKGluc3RhbmNlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUpIHtcbiAgICAgICAgd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudChwYXJlbnROb2RlLCBpbnN0YW5jZSk7XG4gICAgICB9IGVsc2UgaWYgKGluc3RhbmNlLm5vZGVUeXBlID09PSBDT01NRU5UX05PREUpIDsgZWxzZSB7XG4gICAgICAgIHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQocGFyZW50Tm9kZSwgaW5zdGFuY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZGlkTm90SHlkcmF0ZUluc3RhbmNlKHBhcmVudFR5cGUsIHBhcmVudFByb3BzLCBwYXJlbnRJbnN0YW5jZSwgaW5zdGFuY2UsIGlzQ29uY3VycmVudE1vZGUpIHtcbiAge1xuICAgIGlmIChpc0NvbmN1cnJlbnRNb2RlIHx8IHBhcmVudFByb3BzW1NVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HJDFdICE9PSB0cnVlKSB7XG4gICAgICBpZiAoaW5zdGFuY2Uubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSkge1xuICAgICAgICB3YXJuRm9yRGVsZXRlZEh5ZHJhdGFibGVFbGVtZW50KHBhcmVudEluc3RhbmNlLCBpbnN0YW5jZSk7XG4gICAgICB9IGVsc2UgaWYgKGluc3RhbmNlLm5vZGVUeXBlID09PSBDT01NRU5UX05PREUpIDsgZWxzZSB7XG4gICAgICAgIHdhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQocGFyZW50SW5zdGFuY2UsIGluc3RhbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2VXaXRoaW5Db250YWluZXIocGFyZW50Q29udGFpbmVyLCB0eXBlLCBwcm9wcykge1xuICB7XG4gICAgd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50KHBhcmVudENvbnRhaW5lciwgdHlwZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlV2l0aGluQ29udGFpbmVyKHBhcmVudENvbnRhaW5lciwgdGV4dCkge1xuICB7XG4gICAgd2FybkZvckluc2VydGVkSHlkcmF0ZWRUZXh0KHBhcmVudENvbnRhaW5lciwgdGV4dCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2VXaXRoaW5TdXNwZW5zZUluc3RhbmNlKHBhcmVudEluc3RhbmNlLCB0eXBlLCBwcm9wcykge1xuICB7XG4gICAgLy8gJEZsb3dGaXhNZTogT25seSBFbGVtZW50IG9yIERvY3VtZW50IGNhbiBiZSBwYXJlbnQgbm9kZXMuXG4gICAgdmFyIHBhcmVudE5vZGUgPSBwYXJlbnRJbnN0YW5jZS5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlICE9PSBudWxsKSB3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQocGFyZW50Tm9kZSwgdHlwZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlV2l0aGluU3VzcGVuc2VJbnN0YW5jZShwYXJlbnRJbnN0YW5jZSwgdGV4dCkge1xuICB7XG4gICAgLy8gJEZsb3dGaXhNZTogT25seSBFbGVtZW50IG9yIERvY3VtZW50IGNhbiBiZSBwYXJlbnQgbm9kZXMuXG4gICAgdmFyIHBhcmVudE5vZGUgPSBwYXJlbnRJbnN0YW5jZS5wYXJlbnROb2RlO1xuICAgIGlmIChwYXJlbnROb2RlICE9PSBudWxsKSB3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQocGFyZW50Tm9kZSwgdGV4dCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2UocGFyZW50VHlwZSwgcGFyZW50UHJvcHMsIHBhcmVudEluc3RhbmNlLCB0eXBlLCBwcm9wcywgaXNDb25jdXJyZW50TW9kZSkge1xuICB7XG4gICAgaWYgKGlzQ29uY3VycmVudE1vZGUgfHwgcGFyZW50UHJvcHNbU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkckMV0gIT09IHRydWUpIHtcbiAgICAgIHdhcm5Gb3JJbnNlcnRlZEh5ZHJhdGVkRWxlbWVudChwYXJlbnRJbnN0YW5jZSwgdHlwZSk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZShwYXJlbnRUeXBlLCBwYXJlbnRQcm9wcywgcGFyZW50SW5zdGFuY2UsIHRleHQsIGlzQ29uY3VycmVudE1vZGUpIHtcbiAge1xuICAgIGlmIChpc0NvbmN1cnJlbnRNb2RlIHx8IHBhcmVudFByb3BzW1NVUFBSRVNTX0hZRFJBVElPTl9XQVJOSU5HJDFdICE9PSB0cnVlKSB7XG4gICAgICB3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQocGFyZW50SW5zdGFuY2UsIHRleHQpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZXJyb3JIeWRyYXRpbmdDb250YWluZXIocGFyZW50Q29udGFpbmVyKSB7XG4gIHtcbiAgICAvLyBUT0RPOiBUaGlzIGdldHMgbG9nZ2VkIGJ5IG9uUmVjb3ZlcmFibGVFcnJvciwgdG9vLCBzbyB3ZSBzaG91bGQgYmVcbiAgICAvLyBhYmxlIHRvIHJlbW92ZSBpdC5cbiAgICBlcnJvcignQW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIGh5ZHJhdGlvbi4gVGhlIHNlcnZlciBIVE1MIHdhcyByZXBsYWNlZCB3aXRoIGNsaWVudCBjb250ZW50IGluIDwlcz4uJywgcGFyZW50Q29udGFpbmVyLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkpO1xuICB9XG59XG5mdW5jdGlvbiBwcmVwYXJlUG9ydGFsTW91bnQocG9ydGFsSW5zdGFuY2UpIHtcbiAgbGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMocG9ydGFsSW5zdGFuY2UpO1xufVxuXG52YXIgcmFuZG9tS2V5ID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG52YXIgaW50ZXJuYWxJbnN0YW5jZUtleSA9ICdfX3JlYWN0RmliZXIkJyArIHJhbmRvbUtleTtcbnZhciBpbnRlcm5hbFByb3BzS2V5ID0gJ19fcmVhY3RQcm9wcyQnICsgcmFuZG9tS2V5O1xudmFyIGludGVybmFsQ29udGFpbmVySW5zdGFuY2VLZXkgPSAnX19yZWFjdENvbnRhaW5lciQnICsgcmFuZG9tS2V5O1xudmFyIGludGVybmFsRXZlbnRIYW5kbGVyc0tleSA9ICdfX3JlYWN0RXZlbnRzJCcgKyByYW5kb21LZXk7XG52YXIgaW50ZXJuYWxFdmVudEhhbmRsZXJMaXN0ZW5lcnNLZXkgPSAnX19yZWFjdExpc3RlbmVycyQnICsgcmFuZG9tS2V5O1xudmFyIGludGVybmFsRXZlbnRIYW5kbGVzU2V0S2V5ID0gJ19fcmVhY3RIYW5kbGVzJCcgKyByYW5kb21LZXk7XG5mdW5jdGlvbiBkZXRhY2hEZWxldGVkSW5zdGFuY2Uobm9kZSkge1xuICAvLyBUT0RPOiBUaGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkIG9uIGhvc3QgY29tcG9uZW50cy4gSSBkb24ndCB0aGluayBhbGwgb2ZcbiAgLy8gdGhlc2UgZmllbGRzIGFyZSByZWxldmFudC5cbiAgZGVsZXRlIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV07XG4gIGRlbGV0ZSBub2RlW2ludGVybmFsUHJvcHNLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXldO1xuICBkZWxldGUgbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlckxpc3RlbmVyc0tleV07XG4gIGRlbGV0ZSBub2RlW2ludGVybmFsRXZlbnRIYW5kbGVzU2V0S2V5XTtcbn1cbmZ1bmN0aW9uIHByZWNhY2hlRmliZXJOb2RlKGhvc3RJbnN0LCBub2RlKSB7XG4gIG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gPSBob3N0SW5zdDtcbn1cbmZ1bmN0aW9uIG1hcmtDb250YWluZXJBc1Jvb3QoaG9zdFJvb3QsIG5vZGUpIHtcbiAgbm9kZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSA9IGhvc3RSb290O1xufVxuZnVuY3Rpb24gdW5tYXJrQ29udGFpbmVyQXNSb290KG5vZGUpIHtcbiAgbm9kZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XSA9IG51bGw7XG59XG5mdW5jdGlvbiBpc0NvbnRhaW5lck1hcmtlZEFzUm9vdChub2RlKSB7XG4gIHJldHVybiAhIW5vZGVbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV07XG59IC8vIEdpdmVuIGEgRE9NIG5vZGUsIHJldHVybiB0aGUgY2xvc2VzdCBIb3N0Q29tcG9uZW50IG9yIEhvc3RUZXh0IGZpYmVyIGFuY2VzdG9yLlxuLy8gSWYgdGhlIHRhcmdldCBub2RlIGlzIHBhcnQgb2YgYSBoeWRyYXRlZCBvciBub3QgeWV0IHJlbmRlcmVkIHN1YnRyZWUsIHRoZW5cbi8vIHRoaXMgbWF5IGFsc28gcmV0dXJuIGEgU3VzcGVuc2VDb21wb25lbnQgb3IgSG9zdFJvb3QgdG8gaW5kaWNhdGUgdGhhdC5cbi8vIENvbmNlcHR1YWxseSB0aGUgSG9zdFJvb3QgZmliZXIgaXMgYSBjaGlsZCBvZiB0aGUgQ29udGFpbmVyIG5vZGUuIFNvIGlmIHlvdVxuLy8gcGFzcyB0aGUgQ29udGFpbmVyIG5vZGUgYXMgdGhlIHRhcmdldE5vZGUsIHlvdSB3aWxsIG5vdCBhY3R1YWxseSBnZXQgdGhlXG4vLyBIb3N0Um9vdCBiYWNrLiBUbyBnZXQgdG8gdGhlIEhvc3RSb290LCB5b3UgbmVlZCB0byBwYXNzIGEgY2hpbGQgb2YgaXQuXG4vLyBUaGUgc2FtZSB0aGluZyBhcHBsaWVzIHRvIFN1c3BlbnNlIGJvdW5kYXJpZXMuXG5cbmZ1bmN0aW9uIGdldENsb3Nlc3RJbnN0YW5jZUZyb21Ob2RlKHRhcmdldE5vZGUpIHtcbiAgdmFyIHRhcmdldEluc3QgPSB0YXJnZXROb2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuXG4gIGlmICh0YXJnZXRJbnN0KSB7XG4gICAgLy8gRG9uJ3QgcmV0dXJuIEhvc3RSb290IG9yIFN1c3BlbnNlQ29tcG9uZW50IGhlcmUuXG4gICAgcmV0dXJuIHRhcmdldEluc3Q7XG4gIH0gLy8gSWYgdGhlIGRpcmVjdCBldmVudCB0YXJnZXQgaXNuJ3QgYSBSZWFjdCBvd25lZCBET00gbm9kZSwgd2UgbmVlZCB0byBsb29rXG4gIC8vIHRvIHNlZSBpZiBvbmUgb2YgaXRzIHBhcmVudHMgaXMgYSBSZWFjdCBvd25lZCBET00gbm9kZS5cblxuXG4gIHZhciBwYXJlbnROb2RlID0gdGFyZ2V0Tm9kZS5wYXJlbnROb2RlO1xuXG4gIHdoaWxlIChwYXJlbnROb2RlKSB7XG4gICAgLy8gV2UnbGwgY2hlY2sgaWYgdGhpcyBpcyBhIGNvbnRhaW5lciByb290IHRoYXQgY291bGQgaW5jbHVkZVxuICAgIC8vIFJlYWN0IG5vZGVzIGluIHRoZSBmdXR1cmUuIFdlIG5lZWQgdG8gY2hlY2sgdGhpcyBmaXJzdCBiZWNhdXNlXG4gICAgLy8gaWYgd2UncmUgYSBjaGlsZCBvZiBhIGRlaHlkcmF0ZWQgY29udGFpbmVyLCB3ZSBuZWVkIHRvIGZpcnN0XG4gICAgLy8gZmluZCB0aGF0IGlubmVyIGNvbnRhaW5lciBiZWZvcmUgbW92aW5nIG9uIHRvIGZpbmRpbmcgdGhlIHBhcmVudFxuICAgIC8vIGluc3RhbmNlLiBOb3RlIHRoYXQgd2UgZG9uJ3QgY2hlY2sgdGhpcyBmaWVsZCBvbiAgdGhlIHRhcmdldE5vZGVcbiAgICAvLyBpdHNlbGYgYmVjYXVzZSB0aGUgZmliZXJzIGFyZSBjb25jZXB0dWFsbHkgYmV0d2VlbiB0aGUgY29udGFpbmVyXG4gICAgLy8gbm9kZSBhbmQgdGhlIGZpcnN0IGNoaWxkLiBJdCBpc24ndCBzdXJyb3VuZGluZyB0aGUgY29udGFpbmVyIG5vZGUuXG4gICAgLy8gSWYgaXQncyBub3QgYSBjb250YWluZXIsIHdlIGNoZWNrIGlmIGl0J3MgYW4gaW5zdGFuY2UuXG4gICAgdGFyZ2V0SW5zdCA9IHBhcmVudE5vZGVbaW50ZXJuYWxDb250YWluZXJJbnN0YW5jZUtleV0gfHwgcGFyZW50Tm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XTtcblxuICAgIGlmICh0YXJnZXRJbnN0KSB7XG4gICAgICAvLyBTaW5jZSB0aGlzIHdhc24ndCB0aGUgZGlyZWN0IHRhcmdldCBvZiB0aGUgZXZlbnQsIHdlIG1pZ2h0IGhhdmVcbiAgICAgIC8vIHN0ZXBwZWQgcGFzdCBkZWh5ZHJhdGVkIERPTSBub2RlcyB0byBnZXQgaGVyZS4gSG93ZXZlciB0aGV5IGNvdWxkXG4gICAgICAvLyBhbHNvIGhhdmUgYmVlbiBub24tUmVhY3Qgbm9kZXMuIFdlIG5lZWQgdG8gYW5zd2VyIHdoaWNoIG9uZS5cbiAgICAgIC8vIElmIHdlIHRoZSBpbnN0YW5jZSBkb2Vzbid0IGhhdmUgYW55IGNoaWxkcmVuLCB0aGVuIHRoZXJlIGNhbid0IGJlXG4gICAgICAvLyBhIG5lc3RlZCBzdXNwZW5zZSBib3VuZGFyeSB3aXRoaW4gaXQuIFNvIHdlIGNhbiB1c2UgdGhpcyBhcyBhIGZhc3RcbiAgICAgIC8vIGJhaWxvdXQuIE1vc3Qgb2YgdGhlIHRpbWUsIHdoZW4gcGVvcGxlIGFkZCBub24tUmVhY3QgY2hpbGRyZW4gdG9cbiAgICAgIC8vIHRoZSB0cmVlLCBpdCBpcyB1c2luZyBhIHJlZiB0byBhIGNoaWxkLWxlc3MgRE9NIG5vZGUuXG4gICAgICAvLyBOb3JtYWxseSB3ZSdkIG9ubHkgbmVlZCB0byBjaGVjayBvbmUgb2YgdGhlIGZpYmVycyBiZWNhdXNlIGlmIGl0XG4gICAgICAvLyBoYXMgZXZlciBnb25lIGZyb20gaGF2aW5nIGNoaWxkcmVuIHRvIGRlbGV0aW5nIHRoZW0gb3IgdmljZSB2ZXJzYVxuICAgICAgLy8gaXQgd291bGQgaGF2ZSBkZWxldGVkIHRoZSBkZWh5ZHJhdGVkIGJvdW5kYXJ5IG5lc3RlZCBpbnNpZGUgYWxyZWFkeS5cbiAgICAgIC8vIEhvd2V2ZXIsIHNpbmNlIHRoZSBIb3N0Um9vdCBzdGFydHMgb3V0IHdpdGggYW4gYWx0ZXJuYXRlIGl0IG1pZ2h0XG4gICAgICAvLyBoYXZlIG9uZSBvbiB0aGUgYWx0ZXJuYXRlIHNvIHdlIG5lZWQgdG8gY2hlY2sgaW4gY2FzZSB0aGlzIHdhcyBhXG4gICAgICAvLyByb290LlxuICAgICAgdmFyIGFsdGVybmF0ZSA9IHRhcmdldEluc3QuYWx0ZXJuYXRlO1xuXG4gICAgICBpZiAodGFyZ2V0SW5zdC5jaGlsZCAhPT0gbnVsbCB8fCBhbHRlcm5hdGUgIT09IG51bGwgJiYgYWx0ZXJuYXRlLmNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgIC8vIE5leHQgd2UgbmVlZCB0byBmaWd1cmUgb3V0IGlmIHRoZSBub2RlIHRoYXQgc2tpcHBlZCBwYXN0IGlzXG4gICAgICAgIC8vIG5lc3RlZCB3aXRoaW4gYSBkZWh5ZHJhdGVkIGJvdW5kYXJ5IGFuZCBpZiBzbywgd2hpY2ggb25lLlxuICAgICAgICB2YXIgc3VzcGVuc2VJbnN0YW5jZSA9IGdldFBhcmVudFN1c3BlbnNlSW5zdGFuY2UodGFyZ2V0Tm9kZSk7XG5cbiAgICAgICAgd2hpbGUgKHN1c3BlbnNlSW5zdGFuY2UgIT09IG51bGwpIHtcbiAgICAgICAgICAvLyBXZSBmb3VuZCBhIHN1c3BlbnNlIGluc3RhbmNlLiBUaGF0IG1lYW5zIHRoYXQgd2UgaGF2ZW4ndFxuICAgICAgICAgIC8vIGh5ZHJhdGVkIGl0IHlldC4gRXZlbiB0aG91Z2ggd2UgbGVhdmUgdGhlIGNvbW1lbnRzIGluIHRoZVxuICAgICAgICAgIC8vIERPTSBhZnRlciBoeWRyYXRpbmcsIGFuZCB0aGVyZSBhcmUgYm91bmRhcmllcyBpbiB0aGUgRE9NXG4gICAgICAgICAgLy8gdGhhdCBjb3VsZCBhbHJlYWR5IGJlIGh5ZHJhdGVkLCB3ZSB3b3VsZG4ndCBoYXZlIGZvdW5kIHRoZW1cbiAgICAgICAgICAvLyB0aHJvdWdoIHRoaXMgcGFzcyBzaW5jZSBpZiB0aGUgdGFyZ2V0IGlzIGh5ZHJhdGVkIGl0IHdvdWxkXG4gICAgICAgICAgLy8gaGF2ZSBoYWQgYW4gaW50ZXJuYWxJbnN0YW5jZUtleSBvbiBpdC5cbiAgICAgICAgICAvLyBMZXQncyBnZXQgdGhlIGZpYmVyIGFzc29jaWF0ZWQgd2l0aCB0aGUgU3VzcGVuc2VDb21wb25lbnRcbiAgICAgICAgICAvLyBhcyB0aGUgZGVlcGVzdCBpbnN0YW5jZS5cbiAgICAgICAgICB2YXIgdGFyZ2V0U3VzcGVuc2VJbnN0ID0gc3VzcGVuc2VJbnN0YW5jZVtpbnRlcm5hbEluc3RhbmNlS2V5XTtcblxuICAgICAgICAgIGlmICh0YXJnZXRTdXNwZW5zZUluc3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0YXJnZXRTdXNwZW5zZUluc3Q7XG4gICAgICAgICAgfSAvLyBJZiB3ZSBkb24ndCBmaW5kIGEgRmliZXIgb24gdGhlIGNvbW1lbnQsIGl0IG1pZ2h0IGJlIGJlY2F1c2VcbiAgICAgICAgICAvLyB3ZSBoYXZlbid0IGdvdHRlbiB0byBoeWRyYXRlIGl0IHlldC4gVGhlcmUgbWlnaHQgc3RpbGwgYmUgYVxuICAgICAgICAgIC8vIHBhcmVudCBib3VuZGFyeSB0aGF0IGhhc24ndCBhYm92ZSB0aGlzIG9uZSBzbyB3ZSBuZWVkIHRvIGZpbmRcbiAgICAgICAgICAvLyB0aGUgb3V0ZXIgbW9zdCB0aGF0IGlzIGtub3duLlxuXG5cbiAgICAgICAgICBzdXNwZW5zZUluc3RhbmNlID0gZ2V0UGFyZW50U3VzcGVuc2VJbnN0YW5jZShzdXNwZW5zZUluc3RhbmNlKTsgLy8gSWYgd2UgZG9uJ3QgZmluZCBvbmUsIHRoZW4gdGhhdCBzaG91bGQgbWVhbiB0aGF0IHRoZSBwYXJlbnRcbiAgICAgICAgICAvLyBob3N0IGNvbXBvbmVudCBhbHNvIGhhc24ndCBoeWRyYXRlZCB5ZXQuIFdlIGNhbiByZXR1cm4gaXRcbiAgICAgICAgICAvLyBiZWxvdyBzaW5jZSBpdCB3aWxsIGJhaWwgb3V0IG9uIHRoZSBpc01vdW50ZWQgY2hlY2sgbGF0ZXIuXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRhcmdldEluc3Q7XG4gICAgfVxuXG4gICAgdGFyZ2V0Tm9kZSA9IHBhcmVudE5vZGU7XG4gICAgcGFyZW50Tm9kZSA9IHRhcmdldE5vZGUucGFyZW50Tm9kZTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBHaXZlbiBhIERPTSBub2RlLCByZXR1cm4gdGhlIFJlYWN0RE9NQ29tcG9uZW50IG9yIFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICogaW5zdGFuY2UsIG9yIG51bGwgaWYgdGhlIG5vZGUgd2FzIG5vdCByZW5kZXJlZCBieSB0aGlzIFJlYWN0LlxuICovXG5cbmZ1bmN0aW9uIGdldEluc3RhbmNlRnJvbU5vZGUobm9kZSkge1xuICB2YXIgaW5zdCA9IG5vZGVbaW50ZXJuYWxJbnN0YW5jZUtleV0gfHwgbm9kZVtpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5XTtcblxuICBpZiAoaW5zdCkge1xuICAgIGlmIChpbnN0LnRhZyA9PT0gSG9zdENvbXBvbmVudCB8fCBpbnN0LnRhZyA9PT0gSG9zdFRleHQgfHwgaW5zdC50YWcgPT09IFN1c3BlbnNlQ29tcG9uZW50IHx8IGluc3QudGFnID09PSBIb3N0Um9vdCkge1xuICAgICAgcmV0dXJuIGluc3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBHaXZlbiBhIFJlYWN0RE9NQ29tcG9uZW50IG9yIFJlYWN0RE9NVGV4dENvbXBvbmVudCwgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nXG4gKiBET00gbm9kZS5cbiAqL1xuXG5mdW5jdGlvbiBnZXROb2RlRnJvbUluc3RhbmNlKGluc3QpIHtcbiAgaWYgKGluc3QudGFnID09PSBIb3N0Q29tcG9uZW50IHx8IGluc3QudGFnID09PSBIb3N0VGV4dCkge1xuICAgIC8vIEluIEZpYmVyIHRoaXMsIGlzIGp1c3QgdGhlIHN0YXRlIG5vZGUgcmlnaHQgbm93LiBXZSBhc3N1bWUgaXQgd2lsbCBiZVxuICAgIC8vIGEgaG9zdCBjb21wb25lbnQgb3IgaG9zdCB0ZXh0LlxuICAgIHJldHVybiBpbnN0LnN0YXRlTm9kZTtcbiAgfSAvLyBXaXRob3V0IHRoaXMgZmlyc3QgaW52YXJpYW50LCBwYXNzaW5nIGEgbm9uLURPTS1jb21wb25lbnQgdHJpZ2dlcnMgdGhlIG5leHRcbiAgLy8gaW52YXJpYW50IGZvciBhIG1pc3NpbmcgcGFyZW50LCB3aGljaCBpcyBzdXBlciBjb25mdXNpbmcuXG5cblxuICB0aHJvdyBuZXcgRXJyb3IoJ2dldE5vZGVGcm9tSW5zdGFuY2U6IEludmFsaWQgYXJndW1lbnQuJyk7XG59XG5mdW5jdGlvbiBnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGVbaW50ZXJuYWxQcm9wc0tleV0gfHwgbnVsbDtcbn1cbmZ1bmN0aW9uIHVwZGF0ZUZpYmVyUHJvcHMobm9kZSwgcHJvcHMpIHtcbiAgbm9kZVtpbnRlcm5hbFByb3BzS2V5XSA9IHByb3BzO1xufVxuZnVuY3Rpb24gZ2V0RXZlbnRMaXN0ZW5lclNldChub2RlKSB7XG4gIHZhciBlbGVtZW50TGlzdGVuZXJTZXQgPSBub2RlW2ludGVybmFsRXZlbnRIYW5kbGVyc0tleV07XG5cbiAgaWYgKGVsZW1lbnRMaXN0ZW5lclNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZWxlbWVudExpc3RlbmVyU2V0ID0gbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXldID0gbmV3IFNldCgpO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRMaXN0ZW5lclNldDtcbn1cblxudmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xudmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUkMSA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0RGVidWdDdXJyZW50RnJhbWU7XG5cbmZ1bmN0aW9uIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KGVsZW1lbnQpIHtcbiAge1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB2YXIgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcbiAgICAgIHZhciBzdGFjayA9IGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVihlbGVtZW50LnR5cGUsIGVsZW1lbnQuX3NvdXJjZSwgb3duZXIgPyBvd25lci50eXBlIDogbnVsbCk7XG4gICAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEuc2V0RXh0cmFTdGFja0ZyYW1lKHN0YWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSQxLnNldEV4dHJhU3RhY2tGcmFtZShudWxsKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCBjb21wb25lbnROYW1lLCBlbGVtZW50KSB7XG4gIHtcbiAgICAvLyAkRmxvd0ZpeE1lIFRoaXMgaXMgb2theSBidXQgRmxvdyBkb2Vzbid0IGtub3cgaXQuXG4gICAgdmFyIGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChoYXNPd25Qcm9wZXJ0eSk7XG5cbiAgICBmb3IgKHZhciB0eXBlU3BlY05hbWUgaW4gdHlwZVNwZWNzKSB7XG4gICAgICBpZiAoaGFzKHR5cGVTcGVjcywgdHlwZVNwZWNOYW1lKSkge1xuICAgICAgICB2YXIgZXJyb3IkMSA9IHZvaWQgMDsgLy8gUHJvcCB0eXBlIHZhbGlkYXRpb24gbWF5IHRocm93LiBJbiBjYXNlIHRoZXkgZG8sIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LlxuICAgICAgICAvLyBBZnRlciB0aGVzZSBoYXZlIGJlZW4gY2xlYW5lZCB1cCwgd2UnbGwgbGV0IHRoZW0gdGhyb3cuXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL3Byb2QtZXJyb3ItY29kZXNcbiAgICAgICAgICAgIHZhciBlcnIgPSBFcnJvcigoY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnKSArICc6ICcgKyBsb2NhdGlvbiArICcgdHlwZSBgJyArIHR5cGVTcGVjTmFtZSArICdgIGlzIGludmFsaWQ7ICcgKyAnaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLCBidXQgcmVjZWl2ZWQgYCcgKyB0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gKyAnYC4nICsgJ1RoaXMgb2Z0ZW4gaGFwcGVucyBiZWNhdXNlIG9mIHR5cG9zIHN1Y2ggYXMgYFByb3BUeXBlcy5mdW5jdGlvbmAgaW5zdGVhZCBvZiBgUHJvcFR5cGVzLmZ1bmNgLicpO1xuICAgICAgICAgICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXJyb3IkMSA9IHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdKHZhbHVlcywgdHlwZVNwZWNOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgbnVsbCwgJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJyk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXJyb3IkMSA9IGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycm9yJDEgJiYgIShlcnJvciQxIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgICBlcnJvcignJXM6IHR5cGUgc3BlY2lmaWNhdGlvbiBvZiAlcycgKyAnIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICsgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiAnICsgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gcGFzcyBhbiBhcmd1bWVudCB0byB0aGUgdHlwZSBjaGVja2VyICcgKyAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICsgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIGxvY2F0aW9uLCB0eXBlU3BlY05hbWUsIHR5cGVvZiBlcnJvciQxKTtcblxuICAgICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycm9yJDEgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yJDEubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgICAgLy8gT25seSBtb25pdG9yIHRoaXMgZmFpbHVyZSBvbmNlIGJlY2F1c2UgdGhlcmUgdGVuZHMgdG8gYmUgYSBsb3Qgb2YgdGhlXG4gICAgICAgICAgLy8gc2FtZSBlcnJvci5cbiAgICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IkMS5tZXNzYWdlXSA9IHRydWU7XG4gICAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgICBlcnJvcignRmFpbGVkICVzIHR5cGU6ICVzJywgbG9jYXRpb24sIGVycm9yJDEubWVzc2FnZSk7XG5cbiAgICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgdmFsdWVTdGFjayA9IFtdO1xudmFyIGZpYmVyU3RhY2s7XG5cbntcbiAgZmliZXJTdGFjayA9IFtdO1xufVxuXG52YXIgaW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY3JlYXRlQ3Vyc29yKGRlZmF1bHRWYWx1ZSkge1xuICByZXR1cm4ge1xuICAgIGN1cnJlbnQ6IGRlZmF1bHRWYWx1ZVxuICB9O1xufVxuXG5mdW5jdGlvbiBwb3AoY3Vyc29yLCBmaWJlcikge1xuICBpZiAoaW5kZXggPCAwKSB7XG4gICAge1xuICAgICAgZXJyb3IoJ1VuZXhwZWN0ZWQgcG9wLicpO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfVxuXG4gIHtcbiAgICBpZiAoZmliZXIgIT09IGZpYmVyU3RhY2tbaW5kZXhdKSB7XG4gICAgICBlcnJvcignVW5leHBlY3RlZCBGaWJlciBwb3BwZWQuJyk7XG4gICAgfVxuICB9XG5cbiAgY3Vyc29yLmN1cnJlbnQgPSB2YWx1ZVN0YWNrW2luZGV4XTtcbiAgdmFsdWVTdGFja1tpbmRleF0gPSBudWxsO1xuXG4gIHtcbiAgICBmaWJlclN0YWNrW2luZGV4XSA9IG51bGw7XG4gIH1cblxuICBpbmRleC0tO1xufVxuXG5mdW5jdGlvbiBwdXNoKGN1cnNvciwgdmFsdWUsIGZpYmVyKSB7XG4gIGluZGV4Kys7XG4gIHZhbHVlU3RhY2tbaW5kZXhdID0gY3Vyc29yLmN1cnJlbnQ7XG5cbiAge1xuICAgIGZpYmVyU3RhY2tbaW5kZXhdID0gZmliZXI7XG4gIH1cblxuICBjdXJzb3IuY3VycmVudCA9IHZhbHVlO1xufVxuXG52YXIgd2FybmVkQWJvdXRNaXNzaW5nR2V0Q2hpbGRDb250ZXh0O1xuXG57XG4gIHdhcm5lZEFib3V0TWlzc2luZ0dldENoaWxkQ29udGV4dCA9IHt9O1xufVxuXG52YXIgZW1wdHlDb250ZXh0T2JqZWN0ID0ge307XG5cbntcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eUNvbnRleHRPYmplY3QpO1xufSAvLyBBIGN1cnNvciB0byB0aGUgY3VycmVudCBtZXJnZWQgY29udGV4dCBvYmplY3Qgb24gdGhlIHN0YWNrLlxuXG5cbnZhciBjb250ZXh0U3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IoZW1wdHlDb250ZXh0T2JqZWN0KTsgLy8gQSBjdXJzb3IgdG8gYSBib29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgY29udGV4dCBoYXMgY2hhbmdlZC5cblxudmFyIGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IoZmFsc2UpOyAvLyBLZWVwIHRyYWNrIG9mIHRoZSBwcmV2aW91cyBjb250ZXh0IG9iamVjdCB0aGF0IHdhcyBvbiB0aGUgc3RhY2suXG4vLyBXZSB1c2UgdGhpcyB0byBnZXQgYWNjZXNzIHRvIHRoZSBwYXJlbnQgY29udGV4dCBhZnRlciB3ZSBoYXZlIGFscmVhZHlcbi8vIHB1c2hlZCB0aGUgbmV4dCBjb250ZXh0IHByb3ZpZGVyLCBhbmQgbm93IG5lZWQgdG8gbWVyZ2UgdGhlaXIgY29udGV4dHMuXG5cbnZhciBwcmV2aW91c0NvbnRleHQgPSBlbXB0eUNvbnRleHRPYmplY3Q7XG5cbmZ1bmN0aW9uIGdldFVubWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBkaWRQdXNoT3duQ29udGV4dElmUHJvdmlkZXIpIHtcbiAge1xuICAgIGlmIChkaWRQdXNoT3duQ29udGV4dElmUHJvdmlkZXIgJiYgaXNDb250ZXh0UHJvdmlkZXIoQ29tcG9uZW50KSkge1xuICAgICAgLy8gSWYgdGhlIGZpYmVyIGlzIGEgY29udGV4dCBwcm92aWRlciBpdHNlbGYsIHdoZW4gd2UgcmVhZCBpdHMgY29udGV4dFxuICAgICAgLy8gd2UgbWF5IGhhdmUgYWxyZWFkeSBwdXNoZWQgaXRzIG93biBjaGlsZCBjb250ZXh0IG9uIHRoZSBzdGFjay4gQSBjb250ZXh0XG4gICAgICAvLyBwcm92aWRlciBzaG91bGQgbm90IFwic2VlXCIgaXRzIG93biBjaGlsZCBjb250ZXh0LiBUaGVyZWZvcmUgd2UgcmVhZCB0aGVcbiAgICAgIC8vIHByZXZpb3VzIChwYXJlbnQpIGNvbnRleHQgaW5zdGVhZCBmb3IgYSBjb250ZXh0IHByb3ZpZGVyLlxuICAgICAgcmV0dXJuIHByZXZpb3VzQ29udGV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGV4dFN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FjaGVDb250ZXh0KHdvcmtJblByb2dyZXNzLCB1bm1hc2tlZENvbnRleHQsIG1hc2tlZENvbnRleHQpIHtcbiAge1xuICAgIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICBpbnN0YW5jZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0ID0gdW5tYXNrZWRDb250ZXh0O1xuICAgIGluc3RhbmNlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0ID0gbWFza2VkQ29udGV4dDtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRNYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCB1bm1hc2tlZENvbnRleHQpIHtcbiAge1xuICAgIHZhciB0eXBlID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICB2YXIgY29udGV4dFR5cGVzID0gdHlwZS5jb250ZXh0VHlwZXM7XG5cbiAgICBpZiAoIWNvbnRleHRUeXBlcykge1xuICAgICAgcmV0dXJuIGVtcHR5Q29udGV4dE9iamVjdDtcbiAgICB9IC8vIEF2b2lkIHJlY3JlYXRpbmcgbWFza2VkIGNvbnRleHQgdW5sZXNzIHVubWFza2VkIGNvbnRleHQgaGFzIGNoYW5nZWQuXG4gICAgLy8gRmFpbGluZyB0byBkbyB0aGlzIHdpbGwgcmVzdWx0IGluIHVubmVjZXNzYXJ5IGNhbGxzIHRvIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMuXG4gICAgLy8gVGhpcyBtYXkgdHJpZ2dlciBpbmZpbml0ZSBsb29wcyBpZiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIGNhbGxzIHNldFN0YXRlLlxuXG5cbiAgICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG5cbiAgICBpZiAoaW5zdGFuY2UgJiYgaW5zdGFuY2UuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCA9PT0gdW5tYXNrZWRDb250ZXh0KSB7XG4gICAgICByZXR1cm4gaW5zdGFuY2UuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRleHQgPSB7fTtcblxuICAgIGZvciAodmFyIGtleSBpbiBjb250ZXh0VHlwZXMpIHtcbiAgICAgIGNvbnRleHRba2V5XSA9IHVubWFza2VkQ29udGV4dFtrZXldO1xuICAgIH1cblxuICAgIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcih3b3JrSW5Qcm9ncmVzcykgfHwgJ1Vua25vd24nO1xuICAgICAgY2hlY2tQcm9wVHlwZXMoY29udGV4dFR5cGVzLCBjb250ZXh0LCAnY29udGV4dCcsIG5hbWUpO1xuICAgIH0gLy8gQ2FjaGUgdW5tYXNrZWQgY29udGV4dCBzbyB3ZSBjYW4gYXZvaWQgcmVjcmVhdGluZyBtYXNrZWQgY29udGV4dCB1bmxlc3MgbmVjZXNzYXJ5LlxuICAgIC8vIENvbnRleHQgaXMgY3JlYXRlZCBiZWZvcmUgdGhlIGNsYXNzIGNvbXBvbmVudCBpcyBpbnN0YW50aWF0ZWQgc28gY2hlY2sgZm9yIGluc3RhbmNlLlxuXG5cbiAgICBpZiAoaW5zdGFuY2UpIHtcbiAgICAgIGNhY2hlQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgdW5tYXNrZWRDb250ZXh0LCBjb250ZXh0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29udGV4dDtcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNDb250ZXh0Q2hhbmdlZCgpIHtcbiAge1xuICAgIHJldHVybiBkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNDb250ZXh0UHJvdmlkZXIodHlwZSkge1xuICB7XG4gICAgdmFyIGNoaWxkQ29udGV4dFR5cGVzID0gdHlwZS5jaGlsZENvbnRleHRUeXBlcztcbiAgICByZXR1cm4gY2hpbGRDb250ZXh0VHlwZXMgIT09IG51bGwgJiYgY2hpbGRDb250ZXh0VHlwZXMgIT09IHVuZGVmaW5lZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb3BDb250ZXh0KGZpYmVyKSB7XG4gIHtcbiAgICBwb3AoZGlkUGVyZm9ybVdvcmtTdGFja0N1cnNvciwgZmliZXIpO1xuICAgIHBvcChjb250ZXh0U3RhY2tDdXJzb3IsIGZpYmVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb3BUb3BMZXZlbENvbnRleHRPYmplY3QoZmliZXIpIHtcbiAge1xuICAgIHBvcChkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLCBmaWJlcik7XG4gICAgcG9wKGNvbnRleHRTdGFja0N1cnNvciwgZmliZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QoZmliZXIsIGNvbnRleHQsIGRpZENoYW5nZSkge1xuICB7XG4gICAgaWYgKGNvbnRleHRTdGFja0N1cnNvci5jdXJyZW50ICE9PSBlbXB0eUNvbnRleHRPYmplY3QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBjb250ZXh0IGZvdW5kIG9uIHN0YWNrLiAnICsgJ1RoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuXG4gICAgcHVzaChjb250ZXh0U3RhY2tDdXJzb3IsIGNvbnRleHQsIGZpYmVyKTtcbiAgICBwdXNoKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIGRpZENoYW5nZSwgZmliZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NDaGlsZENvbnRleHQoZmliZXIsIHR5cGUsIHBhcmVudENvbnRleHQpIHtcbiAge1xuICAgIHZhciBpbnN0YW5jZSA9IGZpYmVyLnN0YXRlTm9kZTtcbiAgICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSB0eXBlLmNoaWxkQ29udGV4dFR5cGVzOyAvLyBUT0RPIChidmF1Z2huKSBSZXBsYWNlIHRoaXMgYmVoYXZpb3Igd2l0aCBhbiBpbnZhcmlhbnQoKSBpbiB0aGUgZnV0dXJlLlxuICAgIC8vIEl0IGhhcyBvbmx5IGJlZW4gYWRkZWQgaW4gRmliZXIgdG8gbWF0Y2ggdGhlICh1bmludGVudGlvbmFsKSBiZWhhdmlvciBpbiBTdGFjay5cblxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuZ2V0Q2hpbGRDb250ZXh0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB7XG4gICAgICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcihmaWJlcikgfHwgJ1Vua25vd24nO1xuXG4gICAgICAgIGlmICghd2FybmVkQWJvdXRNaXNzaW5nR2V0Q2hpbGRDb250ZXh0W2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgICAgd2FybmVkQWJvdXRNaXNzaW5nR2V0Q2hpbGRDb250ZXh0W2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcblxuICAgICAgICAgIGVycm9yKCclcy5jaGlsZENvbnRleHRUeXBlcyBpcyBzcGVjaWZpZWQgYnV0IHRoZXJlIGlzIG5vIGdldENoaWxkQ29udGV4dCgpIG1ldGhvZCAnICsgJ29uIHRoZSBpbnN0YW5jZS4gWW91IGNhbiBlaXRoZXIgZGVmaW5lIGdldENoaWxkQ29udGV4dCgpIG9uICVzIG9yIHJlbW92ZSAnICsgJ2NoaWxkQ29udGV4dFR5cGVzIGZyb20gaXQuJywgY29tcG9uZW50TmFtZSwgY29tcG9uZW50TmFtZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcmVudENvbnRleHQ7XG4gICAgfVxuXG4gICAgdmFyIGNoaWxkQ29udGV4dCA9IGluc3RhbmNlLmdldENoaWxkQ29udGV4dCgpO1xuXG4gICAgZm9yICh2YXIgY29udGV4dEtleSBpbiBjaGlsZENvbnRleHQpIHtcbiAgICAgIGlmICghKGNvbnRleHRLZXkgaW4gY2hpbGRDb250ZXh0VHlwZXMpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigoZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcihmaWJlcikgfHwgJ1Vua25vd24nKSArIFwiLmdldENoaWxkQ29udGV4dCgpOiBrZXkgXFxcIlwiICsgY29udGV4dEtleSArIFwiXFxcIiBpcyBub3QgZGVmaW5lZCBpbiBjaGlsZENvbnRleHRUeXBlcy5cIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAge1xuICAgICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKGZpYmVyKSB8fCAnVW5rbm93bic7XG4gICAgICBjaGVja1Byb3BUeXBlcyhjaGlsZENvbnRleHRUeXBlcywgY2hpbGRDb250ZXh0LCAnY2hpbGQgY29udGV4dCcsIG5hbWUpO1xuICAgIH1cblxuICAgIHJldHVybiBhc3NpZ24oe30sIHBhcmVudENvbnRleHQsIGNoaWxkQ29udGV4dCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHVzaENvbnRleHRQcm92aWRlcih3b3JrSW5Qcm9ncmVzcykge1xuICB7XG4gICAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlOyAvLyBXZSBwdXNoIHRoZSBjb250ZXh0IGFzIGVhcmx5IGFzIHBvc3NpYmxlIHRvIGVuc3VyZSBzdGFjayBpbnRlZ3JpdHkuXG4gICAgLy8gSWYgdGhlIGluc3RhbmNlIGRvZXMgbm90IGV4aXN0IHlldCwgd2Ugd2lsbCBwdXNoIG51bGwgYXQgZmlyc3QsXG4gICAgLy8gYW5kIHJlcGxhY2UgaXQgb24gdGhlIHN0YWNrIGxhdGVyIHdoZW4gaW52YWxpZGF0aW5nIHRoZSBjb250ZXh0LlxuXG4gICAgdmFyIG1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0ID0gaW5zdGFuY2UgJiYgaW5zdGFuY2UuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQgfHwgZW1wdHlDb250ZXh0T2JqZWN0OyAvLyBSZW1lbWJlciB0aGUgcGFyZW50IGNvbnRleHQgc28gd2UgY2FuIG1lcmdlIHdpdGggaXQgbGF0ZXIuXG4gICAgLy8gSW5oZXJpdCB0aGUgcGFyZW50J3MgZGlkLXBlcmZvcm0td29yayB2YWx1ZSB0byBhdm9pZCBpbmFkdmVydGVudGx5IGJsb2NraW5nIHVwZGF0ZXMuXG5cbiAgICBwcmV2aW91c0NvbnRleHQgPSBjb250ZXh0U3RhY2tDdXJzb3IuY3VycmVudDtcbiAgICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciwgbWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQsIHdvcmtJblByb2dyZXNzKTtcbiAgICBwdXNoKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IuY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIHR5cGUsIGRpZENoYW5nZSkge1xuICB7XG4gICAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuXG4gICAgaWYgKCFpbnN0YW5jZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0byBoYXZlIGFuIGluc3RhbmNlIGJ5IHRoaXMgcG9pbnQuICcgKyAnVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICB9XG5cbiAgICBpZiAoZGlkQ2hhbmdlKSB7XG4gICAgICAvLyBNZXJnZSBwYXJlbnQgYW5kIG93biBjb250ZXh0LlxuICAgICAgLy8gU2tpcCB0aGlzIGlmIHdlJ3JlIG5vdCB1cGRhdGluZyBkdWUgdG8gc0NVLlxuICAgICAgLy8gVGhpcyBhdm9pZHMgdW5uZWNlc3NhcmlseSByZWNvbXB1dGluZyBtZW1vaXplZCB2YWx1ZXMuXG4gICAgICB2YXIgbWVyZ2VkQ29udGV4dCA9IHByb2Nlc3NDaGlsZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHR5cGUsIHByZXZpb3VzQ29udGV4dCk7XG4gICAgICBpbnN0YW5jZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCA9IG1lcmdlZENvbnRleHQ7IC8vIFJlcGxhY2UgdGhlIG9sZCAob3IgZW1wdHkpIGNvbnRleHQgd2l0aCB0aGUgbmV3IG9uZS5cbiAgICAgIC8vIEl0IGlzIGltcG9ydGFudCB0byB1bndpbmQgdGhlIGNvbnRleHQgaW4gdGhlIHJldmVyc2Ugb3JkZXIuXG5cbiAgICAgIHBvcChkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yLCB3b3JrSW5Qcm9ncmVzcyk7IC8vIE5vdyBwdXNoIHRoZSBuZXcgY29udGV4dCBhbmQgbWFyayB0aGF0IGl0IGhhcyBjaGFuZ2VkLlxuXG4gICAgICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciwgbWVyZ2VkQ29udGV4dCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcHVzaChkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yLCBkaWRDaGFuZ2UsIHdvcmtJblByb2dyZXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcG9wKGRpZFBlcmZvcm1Xb3JrU3RhY2tDdXJzb3IsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHB1c2goZGlkUGVyZm9ybVdvcmtTdGFja0N1cnNvciwgZGlkQ2hhbmdlLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0KGZpYmVyKSB7XG4gIHtcbiAgICAvLyBDdXJyZW50bHkgdGhpcyBpcyBvbmx5IHVzZWQgd2l0aCByZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcjsgbm90IHN1cmUgaWYgaXRcbiAgICAvLyBtYWtlcyBzZW5zZSBlbHNld2hlcmVcbiAgICBpZiAoIWlzRmliZXJNb3VudGVkKGZpYmVyKSB8fCBmaWJlci50YWcgIT09IENsYXNzQ29tcG9uZW50KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHN1YnRyZWUgcGFyZW50IHRvIGJlIGEgbW91bnRlZCBjbGFzcyBjb21wb25lbnQuICcgKyAnVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICB9XG5cbiAgICB2YXIgbm9kZSA9IGZpYmVyO1xuXG4gICAgZG8ge1xuICAgICAgc3dpdGNoIChub2RlLnRhZykge1xuICAgICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICAgIHJldHVybiBub2RlLnN0YXRlTm9kZS5jb250ZXh0O1xuXG4gICAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIENvbXBvbmVudCA9IG5vZGUudHlwZTtcblxuICAgICAgICAgICAgaWYgKGlzQ29udGV4dFByb3ZpZGVyKENvbXBvbmVudCkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5vZGUuc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICB9IHdoaWxlIChub2RlICE9PSBudWxsKTtcblxuICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgdW5leHBlY3RlZCBkZXRhY2hlZCBzdWJ0cmVlIHBhcmVudC4gJyArICdUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICB9XG59XG5cbnZhciBMZWdhY3lSb290ID0gMDtcbnZhciBDb25jdXJyZW50Um9vdCA9IDE7XG5cbnZhciBzeW5jUXVldWUgPSBudWxsO1xudmFyIGluY2x1ZGVzTGVnYWN5U3luY0NhbGxiYWNrcyA9IGZhbHNlO1xudmFyIGlzRmx1c2hpbmdTeW5jUXVldWUgPSBmYWxzZTtcbmZ1bmN0aW9uIHNjaGVkdWxlU3luY0NhbGxiYWNrKGNhbGxiYWNrKSB7XG4gIC8vIFB1c2ggdGhpcyBjYWxsYmFjayBpbnRvIGFuIGludGVybmFsIHF1ZXVlLiBXZSdsbCBmbHVzaCB0aGVzZSBlaXRoZXIgaW5cbiAgLy8gdGhlIG5leHQgdGljaywgb3IgZWFybGllciBpZiBzb21ldGhpbmcgY2FsbHMgYGZsdXNoU3luY0NhbGxiYWNrUXVldWVgLlxuICBpZiAoc3luY1F1ZXVlID09PSBudWxsKSB7XG4gICAgc3luY1F1ZXVlID0gW2NhbGxiYWNrXTtcbiAgfSBlbHNlIHtcbiAgICAvLyBQdXNoIG9udG8gZXhpc3RpbmcgcXVldWUuIERvbid0IG5lZWQgdG8gc2NoZWR1bGUgYSBjYWxsYmFjayBiZWNhdXNlXG4gICAgLy8gd2UgYWxyZWFkeSBzY2hlZHVsZWQgb25lIHdoZW4gd2UgY3JlYXRlZCB0aGUgcXVldWUuXG4gICAgc3luY1F1ZXVlLnB1c2goY2FsbGJhY2spO1xuICB9XG59XG5mdW5jdGlvbiBzY2hlZHVsZUxlZ2FjeVN5bmNDYWxsYmFjayhjYWxsYmFjaykge1xuICBpbmNsdWRlc0xlZ2FjeVN5bmNDYWxsYmFja3MgPSB0cnVlO1xuICBzY2hlZHVsZVN5bmNDYWxsYmFjayhjYWxsYmFjayk7XG59XG5mdW5jdGlvbiBmbHVzaFN5bmNDYWxsYmFja3NPbmx5SW5MZWdhY3lNb2RlKCkge1xuICAvLyBPbmx5IGZsdXNoZXMgdGhlIHF1ZXVlIGlmIHRoZXJlJ3MgYSBsZWdhY3kgc3luYyBjYWxsYmFjayBzY2hlZHVsZWQuXG4gIC8vIFRPRE86IFRoZXJlJ3Mgb25seSBhIHNpbmdsZSB0eXBlIG9mIGNhbGxiYWNrOiBwZXJmb3JtU3luY09uV29ya09uUm9vdC4gU29cbiAgLy8gaXQgbWlnaHQgbWFrZSBtb3JlIHNlbnNlIGZvciB0aGUgcXVldWUgdG8gYmUgYSBsaXN0IG9mIHJvb3RzIGluc3RlYWQgb2YgYVxuICAvLyBsaXN0IG9mIGdlbmVyaWMgY2FsbGJhY2tzLiBUaGVuIHdlIGNhbiBoYXZlIHR3bzogb25lIGZvciBsZWdhY3kgcm9vdHMsIG9uZVxuICAvLyBmb3IgY29uY3VycmVudCByb290cy4gQW5kIHRoaXMgbWV0aG9kIHdvdWxkIG9ubHkgZmx1c2ggdGhlIGxlZ2FjeSBvbmVzLlxuICBpZiAoaW5jbHVkZXNMZWdhY3lTeW5jQ2FsbGJhY2tzKSB7XG4gICAgZmx1c2hTeW5jQ2FsbGJhY2tzKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGZsdXNoU3luY0NhbGxiYWNrcygpIHtcbiAgaWYgKCFpc0ZsdXNoaW5nU3luY1F1ZXVlICYmIHN5bmNRdWV1ZSAhPT0gbnVsbCkge1xuICAgIC8vIFByZXZlbnQgcmUtZW50cmFuY2UuXG4gICAgaXNGbHVzaGluZ1N5bmNRdWV1ZSA9IHRydWU7XG4gICAgdmFyIGkgPSAwO1xuICAgIHZhciBwcmV2aW91c1VwZGF0ZVByaW9yaXR5ID0gZ2V0Q3VycmVudFVwZGF0ZVByaW9yaXR5KCk7XG5cbiAgICB0cnkge1xuICAgICAgdmFyIGlzU3luYyA9IHRydWU7XG4gICAgICB2YXIgcXVldWUgPSBzeW5jUXVldWU7IC8vIFRPRE86IElzIHRoaXMgbmVjZXNzYXJ5IGFueW1vcmU/IFRoZSBvbmx5IHVzZXIgY29kZSB0aGF0IHJ1bnMgaW4gdGhpc1xuICAgICAgLy8gcXVldWUgaXMgaW4gdGhlIHJlbmRlciBvciBjb21taXQgcGhhc2VzLlxuXG4gICAgICBzZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkoRGlzY3JldGVFdmVudFByaW9yaXR5KTtcblxuICAgICAgZm9yICg7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY2FsbGJhY2sgPSBxdWV1ZVtpXTtcblxuICAgICAgICBkbyB7XG4gICAgICAgICAgY2FsbGJhY2sgPSBjYWxsYmFjayhpc1N5bmMpO1xuICAgICAgICB9IHdoaWxlIChjYWxsYmFjayAhPT0gbnVsbCk7XG4gICAgICB9XG5cbiAgICAgIHN5bmNRdWV1ZSA9IG51bGw7XG4gICAgICBpbmNsdWRlc0xlZ2FjeVN5bmNDYWxsYmFja3MgPSBmYWxzZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gSWYgc29tZXRoaW5nIHRocm93cywgbGVhdmUgdGhlIHJlbWFpbmluZyBjYWxsYmFja3Mgb24gdGhlIHF1ZXVlLlxuICAgICAgaWYgKHN5bmNRdWV1ZSAhPT0gbnVsbCkge1xuICAgICAgICBzeW5jUXVldWUgPSBzeW5jUXVldWUuc2xpY2UoaSArIDEpO1xuICAgICAgfSAvLyBSZXN1bWUgZmx1c2hpbmcgaW4gdGhlIG5leHQgdGlja1xuXG5cbiAgICAgIHNjaGVkdWxlQ2FsbGJhY2soSW1tZWRpYXRlUHJpb3JpdHksIGZsdXNoU3luY0NhbGxiYWNrcyk7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgc2V0Q3VycmVudFVwZGF0ZVByaW9yaXR5KHByZXZpb3VzVXBkYXRlUHJpb3JpdHkpO1xuICAgICAgaXNGbHVzaGluZ1N5bmNRdWV1ZSA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vLyBUT0RPOiBVc2UgdGhlIHVuaWZpZWQgZmliZXIgc3RhY2sgbW9kdWxlIGluc3RlYWQgb2YgdGhpcyBsb2NhbCBvbmU/XG4vLyBJbnRlbnRpb25hbGx5IG5vdCB1c2luZyBpdCB5ZXQgdG8gZGVyaXNrIHRoZSBpbml0aWFsIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlXG4vLyB0aGUgd2F5IHdlIHB1c2gvcG9wIHRoZXNlIHZhbHVlcyBpcyBhIGJpdCB1bnVzdWFsLiBJZiB0aGVyZSdzIGEgbWlzdGFrZSwgSSdkXG4vLyByYXRoZXIgdGhlIGlkcyBiZSB3cm9uZyB0aGFuIGNyYXNoIHRoZSB3aG9sZSByZWNvbmNpbGVyLlxudmFyIGZvcmtTdGFjayA9IFtdO1xudmFyIGZvcmtTdGFja0luZGV4ID0gMDtcbnZhciB0cmVlRm9ya1Byb3ZpZGVyID0gbnVsbDtcbnZhciB0cmVlRm9ya0NvdW50ID0gMDtcbnZhciBpZFN0YWNrID0gW107XG52YXIgaWRTdGFja0luZGV4ID0gMDtcbnZhciB0cmVlQ29udGV4dFByb3ZpZGVyID0gbnVsbDtcbnZhciB0cmVlQ29udGV4dElkID0gMTtcbnZhciB0cmVlQ29udGV4dE92ZXJmbG93ID0gJyc7XG5mdW5jdGlvbiBpc0ZvcmtlZENoaWxkKHdvcmtJblByb2dyZXNzKSB7XG4gIHdhcm5JZk5vdEh5ZHJhdGluZygpO1xuICByZXR1cm4gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgRm9ya2VkKSAhPT0gTm9GbGFncztcbn1cbmZ1bmN0aW9uIGdldEZvcmtzQXRMZXZlbCh3b3JrSW5Qcm9ncmVzcykge1xuICB3YXJuSWZOb3RIeWRyYXRpbmcoKTtcbiAgcmV0dXJuIHRyZWVGb3JrQ291bnQ7XG59XG5mdW5jdGlvbiBnZXRUcmVlSWQoKSB7XG4gIHZhciBvdmVyZmxvdyA9IHRyZWVDb250ZXh0T3ZlcmZsb3c7XG4gIHZhciBpZFdpdGhMZWFkaW5nQml0ID0gdHJlZUNvbnRleHRJZDtcbiAgdmFyIGlkID0gaWRXaXRoTGVhZGluZ0JpdCAmIH5nZXRMZWFkaW5nQml0KGlkV2l0aExlYWRpbmdCaXQpO1xuICByZXR1cm4gaWQudG9TdHJpbmcoMzIpICsgb3ZlcmZsb3c7XG59XG5mdW5jdGlvbiBwdXNoVHJlZUZvcmsod29ya0luUHJvZ3Jlc3MsIHRvdGFsQ2hpbGRyZW4pIHtcbiAgLy8gVGhpcyBpcyBjYWxsZWQgcmlnaHQgYWZ0ZXIgd2UgcmVjb25jaWxlIGFuIGFycmF5IChvciBpdGVyYXRvcikgb2YgY2hpbGRcbiAgLy8gZmliZXJzLCBiZWNhdXNlIHRoYXQncyB0aGUgb25seSBwbGFjZSB3aGVyZSB3ZSBrbm93IGhvdyBtYW55IGNoaWxkcmVuIGluXG4gIC8vIHRoZSB3aG9sZSBzZXQgd2l0aG91dCBkb2luZyBleHRyYSB3b3JrIGxhdGVyLCBvciBzdG9yaW5nIGFkZHRpb25hbFxuICAvLyBpbmZvcm1hdGlvbiBvbiB0aGUgZmliZXIuXG4gIC8vXG4gIC8vIFRoYXQncyB3aHkgdGhpcyBmdW5jdGlvbiBpcyBzZXBhcmF0ZSBmcm9tIHB1c2hUcmVlSWQg4oCUIGl0J3MgY2FsbGVkIGR1cmluZ1xuICAvLyB0aGUgcmVuZGVyIHBoYXNlIG9mIHRoZSBmb3JrIHBhcmVudCwgbm90IHRoZSBjaGlsZCwgd2hpY2ggaXMgd2hlcmUgd2UgcHVzaFxuICAvLyB0aGUgb3RoZXIgY29udGV4dCB2YWx1ZXMuXG4gIC8vXG4gIC8vIEluIHRoZSBGaXp6IGltcGxlbWVudGF0aW9uIHRoaXMgaXMgbXVjaCBzaW1wbGVyIGJlY2F1c2UgdGhlIGNoaWxkIGlzXG4gIC8vIHJlbmRlcmVkIGluIHRoZSBzYW1lIGNhbGxzdGFjayBhcyB0aGUgcGFyZW50LlxuICAvL1xuICAvLyBJdCBtaWdodCBiZSBiZXR0ZXIgdG8ganVzdCBhZGQgYSBgZm9ya3NgIGZpZWxkIHRvIHRoZSBGaWJlciB0eXBlLiBJdCB3b3VsZFxuICAvLyBtYWtlIHRoaXMgbW9kdWxlIHNpbXBsZXIuXG4gIHdhcm5JZk5vdEh5ZHJhdGluZygpO1xuICBmb3JrU3RhY2tbZm9ya1N0YWNrSW5kZXgrK10gPSB0cmVlRm9ya0NvdW50O1xuICBmb3JrU3RhY2tbZm9ya1N0YWNrSW5kZXgrK10gPSB0cmVlRm9ya1Byb3ZpZGVyO1xuICB0cmVlRm9ya1Byb3ZpZGVyID0gd29ya0luUHJvZ3Jlc3M7XG4gIHRyZWVGb3JrQ291bnQgPSB0b3RhbENoaWxkcmVuO1xufVxuZnVuY3Rpb24gcHVzaFRyZWVJZCh3b3JrSW5Qcm9ncmVzcywgdG90YWxDaGlsZHJlbiwgaW5kZXgpIHtcbiAgd2FybklmTm90SHlkcmF0aW5nKCk7XG4gIGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRJZDtcbiAgaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dE92ZXJmbG93O1xuICBpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0UHJvdmlkZXI7XG4gIHRyZWVDb250ZXh0UHJvdmlkZXIgPSB3b3JrSW5Qcm9ncmVzcztcbiAgdmFyIGJhc2VJZFdpdGhMZWFkaW5nQml0ID0gdHJlZUNvbnRleHRJZDtcbiAgdmFyIGJhc2VPdmVyZmxvdyA9IHRyZWVDb250ZXh0T3ZlcmZsb3c7IC8vIFRoZSBsZWZ0bW9zdCAxIG1hcmtzIHRoZSBlbmQgb2YgdGhlIHNlcXVlbmNlLCBub24taW5jbHVzaXZlLiBJdCdzIG5vdCBwYXJ0XG4gIC8vIG9mIHRoZSBpZDsgd2UgdXNlIGl0IHRvIGFjY291bnQgZm9yIGxlYWRpbmcgMHMuXG5cbiAgdmFyIGJhc2VMZW5ndGggPSBnZXRCaXRMZW5ndGgoYmFzZUlkV2l0aExlYWRpbmdCaXQpIC0gMTtcbiAgdmFyIGJhc2VJZCA9IGJhc2VJZFdpdGhMZWFkaW5nQml0ICYgfigxIDw8IGJhc2VMZW5ndGgpO1xuICB2YXIgc2xvdCA9IGluZGV4ICsgMTtcbiAgdmFyIGxlbmd0aCA9IGdldEJpdExlbmd0aCh0b3RhbENoaWxkcmVuKSArIGJhc2VMZW5ndGg7IC8vIDMwIGlzIHRoZSBtYXggbGVuZ3RoIHdlIGNhbiBzdG9yZSB3aXRob3V0IG92ZXJmbG93aW5nLCB0YWtpbmcgaW50b1xuICAvLyBjb25zaWRlcmF0aW9uIHRoZSBsZWFkaW5nIDEgd2UgdXNlIHRvIG1hcmsgdGhlIGVuZCBvZiB0aGUgc2VxdWVuY2UuXG5cbiAgaWYgKGxlbmd0aCA+IDMwKSB7XG4gICAgLy8gV2Ugb3ZlcmZsb3dlZCB0aGUgYml0d2lzZS1zYWZlIHJhbmdlLiBGYWxsIGJhY2sgdG8gc2xvd2VyIGFsZ29yaXRobS5cbiAgICAvLyBUaGlzIGJyYW5jaCBhc3N1bWVzIHRoZSBsZW5ndGggb2YgdGhlIGJhc2UgaWQgaXMgZ3JlYXRlciB0aGFuIDU7IGl0IHdvbid0XG4gICAgLy8gd29yayBmb3Igc21hbGxlciBpZHMsIGJlY2F1c2UgeW91IG5lZWQgNSBiaXRzIHBlciBjaGFyYWN0ZXIuXG4gICAgLy9cbiAgICAvLyBXZSBlbmNvZGUgdGhlIGlkIGluIG11bHRpcGxlIHN0ZXBzOiBmaXJzdCB0aGUgYmFzZSBpZCwgdGhlbiB0aGVcbiAgICAvLyByZW1haW5pbmcgZGlnaXRzLlxuICAgIC8vXG4gICAgLy8gRWFjaCA1IGJpdCBzZXF1ZW5jZSBjb3JyZXNwb25kcyB0byBhIHNpbmdsZSBiYXNlIDMyIGNoYXJhY3Rlci4gU28gZm9yXG4gICAgLy8gZXhhbXBsZSwgaWYgdGhlIGN1cnJlbnQgaWQgaXMgMjMgYml0cyBsb25nLCB3ZSBjYW4gY29udmVydCAyMCBvZiB0aG9zZVxuICAgIC8vIGJpdHMgaW50byBhIHN0cmluZyBvZiA0IGNoYXJhY3RlcnMsIHdpdGggMyBiaXRzIGxlZnQgb3Zlci5cbiAgICAvL1xuICAgIC8vIEZpcnN0IGNhbGN1bGF0ZSBob3cgbWFueSBiaXRzIGluIHRoZSBiYXNlIGlkIHJlcHJlc2VudCBhIGNvbXBsZXRlXG4gICAgLy8gc2VxdWVuY2Ugb2YgY2hhcmFjdGVycy5cbiAgICB2YXIgbnVtYmVyT2ZPdmVyZmxvd0JpdHMgPSBiYXNlTGVuZ3RoIC0gYmFzZUxlbmd0aCAlIDU7IC8vIFRoZW4gY3JlYXRlIGEgYml0bWFzayB0aGF0IHNlbGVjdHMgb25seSB0aG9zZSBiaXRzLlxuXG4gICAgdmFyIG5ld092ZXJmbG93Qml0cyA9ICgxIDw8IG51bWJlck9mT3ZlcmZsb3dCaXRzKSAtIDE7IC8vIFNlbGVjdCB0aGUgYml0cywgYW5kIGNvbnZlcnQgdGhlbSB0byBhIGJhc2UgMzIgc3RyaW5nLlxuXG4gICAgdmFyIG5ld092ZXJmbG93ID0gKGJhc2VJZCAmIG5ld092ZXJmbG93Qml0cykudG9TdHJpbmcoMzIpOyAvLyBOb3cgd2UgY2FuIHJlbW92ZSB0aG9zZSBiaXRzIGZyb20gdGhlIGJhc2UgaWQuXG5cbiAgICB2YXIgcmVzdE9mQmFzZUlkID0gYmFzZUlkID4+IG51bWJlck9mT3ZlcmZsb3dCaXRzO1xuICAgIHZhciByZXN0T2ZCYXNlTGVuZ3RoID0gYmFzZUxlbmd0aCAtIG51bWJlck9mT3ZlcmZsb3dCaXRzOyAvLyBGaW5hbGx5LCBlbmNvZGUgdGhlIHJlc3Qgb2YgdGhlIGJpdHMgdXNpbmcgdGhlIG5vcm1hbCBhbGdvcml0aG0uIEJlY2F1c2VcbiAgICAvLyB3ZSBtYWRlIG1vcmUgcm9vbSwgdGhpcyB0aW1lIGl0IHdvbid0IG92ZXJmbG93LlxuXG4gICAgdmFyIHJlc3RPZkxlbmd0aCA9IGdldEJpdExlbmd0aCh0b3RhbENoaWxkcmVuKSArIHJlc3RPZkJhc2VMZW5ndGg7XG4gICAgdmFyIHJlc3RPZk5ld0JpdHMgPSBzbG90IDw8IHJlc3RPZkJhc2VMZW5ndGg7XG4gICAgdmFyIGlkID0gcmVzdE9mTmV3Qml0cyB8IHJlc3RPZkJhc2VJZDtcbiAgICB2YXIgb3ZlcmZsb3cgPSBuZXdPdmVyZmxvdyArIGJhc2VPdmVyZmxvdztcbiAgICB0cmVlQ29udGV4dElkID0gMSA8PCByZXN0T2ZMZW5ndGggfCBpZDtcbiAgICB0cmVlQ29udGV4dE92ZXJmbG93ID0gb3ZlcmZsb3c7XG4gIH0gZWxzZSB7XG4gICAgLy8gTm9ybWFsIHBhdGhcbiAgICB2YXIgbmV3Qml0cyA9IHNsb3QgPDwgYmFzZUxlbmd0aDtcblxuICAgIHZhciBfaWQgPSBuZXdCaXRzIHwgYmFzZUlkO1xuXG4gICAgdmFyIF9vdmVyZmxvdyA9IGJhc2VPdmVyZmxvdztcbiAgICB0cmVlQ29udGV4dElkID0gMSA8PCBsZW5ndGggfCBfaWQ7XG4gICAgdHJlZUNvbnRleHRPdmVyZmxvdyA9IF9vdmVyZmxvdztcbiAgfVxufVxuZnVuY3Rpb24gcHVzaE1hdGVyaWFsaXplZFRyZWVJZCh3b3JrSW5Qcm9ncmVzcykge1xuICB3YXJuSWZOb3RIeWRyYXRpbmcoKTsgLy8gVGhpcyBjb21wb25lbnQgbWF0ZXJpYWxpemVkIGFuIGlkLiBUaGlzIHdpbGwgYWZmZWN0IGFueSBpZHMgdGhhdCBhcHBlYXJcbiAgLy8gaW4gaXRzIGNoaWxkcmVuLlxuXG4gIHZhciByZXR1cm5GaWJlciA9IHdvcmtJblByb2dyZXNzLnJldHVybjtcblxuICBpZiAocmV0dXJuRmliZXIgIT09IG51bGwpIHtcbiAgICB2YXIgbnVtYmVyT2ZGb3JrcyA9IDE7XG4gICAgdmFyIHNsb3RJbmRleCA9IDA7XG4gICAgcHVzaFRyZWVGb3JrKHdvcmtJblByb2dyZXNzLCBudW1iZXJPZkZvcmtzKTtcbiAgICBwdXNoVHJlZUlkKHdvcmtJblByb2dyZXNzLCBudW1iZXJPZkZvcmtzLCBzbG90SW5kZXgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldEJpdExlbmd0aChudW1iZXIpIHtcbiAgcmV0dXJuIDMyIC0gY2x6MzIobnVtYmVyKTtcbn1cblxuZnVuY3Rpb24gZ2V0TGVhZGluZ0JpdChpZCkge1xuICByZXR1cm4gMSA8PCBnZXRCaXRMZW5ndGgoaWQpIC0gMTtcbn1cblxuZnVuY3Rpb24gcG9wVHJlZUNvbnRleHQod29ya0luUHJvZ3Jlc3MpIHtcbiAgLy8gUmVzdG9yZSB0aGUgcHJldmlvdXMgdmFsdWVzLlxuICAvLyBUaGlzIGlzIGEgYml0IG1vcmUgY29tcGxpY2F0ZWQgdGhhbiBvdGhlciBjb250ZXh0LWxpa2UgbW9kdWxlcyBpbiBGaWJlclxuICAvLyBiZWNhdXNlIHRoZSBzYW1lIEZpYmVyIG1heSBhcHBlYXIgb24gdGhlIHN0YWNrIG11bHRpcGxlIHRpbWVzIGFuZCBmb3JcbiAgLy8gZGlmZmVyZW50IHJlYXNvbnMuIFdlIGhhdmUgdG8ga2VlcCBwb3BwaW5nIHVudGlsIHRoZSB3b3JrLWluLXByb2dyZXNzIGlzXG4gIC8vIG5vIGxvbmdlciBhdCB0aGUgdG9wIG9mIHRoZSBzdGFjay5cbiAgd2hpbGUgKHdvcmtJblByb2dyZXNzID09PSB0cmVlRm9ya1Byb3ZpZGVyKSB7XG4gICAgdHJlZUZvcmtQcm92aWRlciA9IGZvcmtTdGFja1stLWZvcmtTdGFja0luZGV4XTtcbiAgICBmb3JrU3RhY2tbZm9ya1N0YWNrSW5kZXhdID0gbnVsbDtcbiAgICB0cmVlRm9ya0NvdW50ID0gZm9ya1N0YWNrWy0tZm9ya1N0YWNrSW5kZXhdO1xuICAgIGZvcmtTdGFja1tmb3JrU3RhY2tJbmRleF0gPSBudWxsO1xuICB9XG5cbiAgd2hpbGUgKHdvcmtJblByb2dyZXNzID09PSB0cmVlQ29udGV4dFByb3ZpZGVyKSB7XG4gICAgdHJlZUNvbnRleHRQcm92aWRlciA9IGlkU3RhY2tbLS1pZFN0YWNrSW5kZXhdO1xuICAgIGlkU3RhY2tbaWRTdGFja0luZGV4XSA9IG51bGw7XG4gICAgdHJlZUNvbnRleHRPdmVyZmxvdyA9IGlkU3RhY2tbLS1pZFN0YWNrSW5kZXhdO1xuICAgIGlkU3RhY2tbaWRTdGFja0luZGV4XSA9IG51bGw7XG4gICAgdHJlZUNvbnRleHRJZCA9IGlkU3RhY2tbLS1pZFN0YWNrSW5kZXhdO1xuICAgIGlkU3RhY2tbaWRTdGFja0luZGV4XSA9IG51bGw7XG4gIH1cbn1cbmZ1bmN0aW9uIGdldFN1c3BlbmRlZFRyZWVDb250ZXh0KCkge1xuICB3YXJuSWZOb3RIeWRyYXRpbmcoKTtcblxuICBpZiAodHJlZUNvbnRleHRQcm92aWRlciAhPT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBpZDogdHJlZUNvbnRleHRJZCxcbiAgICAgIG92ZXJmbG93OiB0cmVlQ29udGV4dE92ZXJmbG93XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuZnVuY3Rpb24gcmVzdG9yZVN1c3BlbmRlZFRyZWVDb250ZXh0KHdvcmtJblByb2dyZXNzLCBzdXNwZW5kZWRDb250ZXh0KSB7XG4gIHdhcm5JZk5vdEh5ZHJhdGluZygpO1xuICBpZFN0YWNrW2lkU3RhY2tJbmRleCsrXSA9IHRyZWVDb250ZXh0SWQ7XG4gIGlkU3RhY2tbaWRTdGFja0luZGV4KytdID0gdHJlZUNvbnRleHRPdmVyZmxvdztcbiAgaWRTdGFja1tpZFN0YWNrSW5kZXgrK10gPSB0cmVlQ29udGV4dFByb3ZpZGVyO1xuICB0cmVlQ29udGV4dElkID0gc3VzcGVuZGVkQ29udGV4dC5pZDtcbiAgdHJlZUNvbnRleHRPdmVyZmxvdyA9IHN1c3BlbmRlZENvbnRleHQub3ZlcmZsb3c7XG4gIHRyZWVDb250ZXh0UHJvdmlkZXIgPSB3b3JrSW5Qcm9ncmVzcztcbn1cblxuZnVuY3Rpb24gd2FybklmTm90SHlkcmF0aW5nKCkge1xuICB7XG4gICAgaWYgKCFnZXRJc0h5ZHJhdGluZygpKSB7XG4gICAgICBlcnJvcignRXhwZWN0ZWQgdG8gYmUgaHlkcmF0aW5nLiBUaGlzIGlzIGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSAnICsgJ2FuIGlzc3VlLicpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBUaGlzIG1heSBoYXZlIGJlZW4gYW4gaW5zZXJ0aW9uIG9yIGEgaHlkcmF0aW9uLlxuXG52YXIgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBudWxsO1xudmFyIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsO1xudmFyIGlzSHlkcmF0aW5nID0gZmFsc2U7IC8vIFRoaXMgZmxhZyBhbGxvd3MgZm9yIHdhcm5pbmcgc3VwcmVzc2lvbiB3aGVuIHdlIGV4cGVjdCB0aGVyZSB0byBiZSBtaXNtYXRjaGVzXG4vLyBkdWUgdG8gZWFybGllciBtaXNtYXRjaGVzIG9yIGEgc3VzcGVuZGVkIGZpYmVyLlxuXG52YXIgZGlkU3VzcGVuZE9yRXJyb3JERVYgPSBmYWxzZTsgLy8gSHlkcmF0aW9uIGVycm9ycyB0aGF0IHdlcmUgdGhyb3duIGluc2lkZSB0aGlzIGJvdW5kYXJ5XG5cbnZhciBoeWRyYXRpb25FcnJvcnMgPSBudWxsO1xuXG5mdW5jdGlvbiB3YXJuSWZIeWRyYXRpbmcoKSB7XG4gIHtcbiAgICBpZiAoaXNIeWRyYXRpbmcpIHtcbiAgICAgIGVycm9yKCdXZSBzaG91bGQgbm90IGJlIGh5ZHJhdGluZyBoZXJlLiBUaGlzIGlzIGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhIGJ1Zy4nKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya0RpZFRocm93V2hpbGVIeWRyYXRpbmdERVYoKSB7XG4gIHtcbiAgICBkaWRTdXNwZW5kT3JFcnJvckRFViA9IHRydWU7XG4gIH1cbn1cbmZ1bmN0aW9uIGRpZFN1c3BlbmRPckVycm9yV2hpbGVIeWRyYXRpbmdERVYoKSB7XG4gIHtcbiAgICByZXR1cm4gZGlkU3VzcGVuZE9yRXJyb3JERVY7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW50ZXJIeWRyYXRpb25TdGF0ZShmaWJlcikge1xuXG4gIHZhciBwYXJlbnRJbnN0YW5jZSA9IGZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGRXaXRoaW5Db250YWluZXIocGFyZW50SW5zdGFuY2UpO1xuICBoeWRyYXRpb25QYXJlbnRGaWJlciA9IGZpYmVyO1xuICBpc0h5ZHJhdGluZyA9IHRydWU7XG4gIGh5ZHJhdGlvbkVycm9ycyA9IG51bGw7XG4gIGRpZFN1c3BlbmRPckVycm9yREVWID0gZmFsc2U7XG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZWVudGVySHlkcmF0aW9uU3RhdGVGcm9tRGVoeWRyYXRlZFN1c3BlbnNlSW5zdGFuY2UoZmliZXIsIHN1c3BlbnNlSW5zdGFuY2UsIHRyZWVDb250ZXh0KSB7XG5cbiAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkV2l0aGluU3VzcGVuc2VJbnN0YW5jZShzdXNwZW5zZUluc3RhbmNlKTtcbiAgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBmaWJlcjtcbiAgaXNIeWRyYXRpbmcgPSB0cnVlO1xuICBoeWRyYXRpb25FcnJvcnMgPSBudWxsO1xuICBkaWRTdXNwZW5kT3JFcnJvckRFViA9IGZhbHNlO1xuXG4gIGlmICh0cmVlQ29udGV4dCAhPT0gbnVsbCkge1xuICAgIHJlc3RvcmVTdXNwZW5kZWRUcmVlQ29udGV4dChmaWJlciwgdHJlZUNvbnRleHQpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHdhcm5Vbmh5ZHJhdGVkSW5zdGFuY2UocmV0dXJuRmliZXIsIGluc3RhbmNlKSB7XG4gIHtcbiAgICBzd2l0Y2ggKHJldHVybkZpYmVyLnRhZykge1xuICAgICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgICAge1xuICAgICAgICAgIGRpZE5vdEh5ZHJhdGVJbnN0YW5jZVdpdGhpbkNvbnRhaW5lcihyZXR1cm5GaWJlci5zdGF0ZU5vZGUuY29udGFpbmVySW5mbywgaW5zdGFuY2UpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBpc0NvbmN1cnJlbnRNb2RlID0gKHJldHVybkZpYmVyLm1vZGUgJiBDb25jdXJyZW50TW9kZSkgIT09IE5vTW9kZTtcbiAgICAgICAgICBkaWROb3RIeWRyYXRlSW5zdGFuY2UocmV0dXJuRmliZXIudHlwZSwgcmV0dXJuRmliZXIubWVtb2l6ZWRQcm9wcywgcmV0dXJuRmliZXIuc3RhdGVOb2RlLCBpbnN0YW5jZSwgLy8gVE9ETzogRGVsZXRlIHRoaXMgYXJndW1lbnQgd2hlbiB3ZSByZW1vdmUgdGhlIGxlZ2FjeSByb290IEFQSS5cbiAgICAgICAgICBpc0NvbmN1cnJlbnRNb2RlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIFN1c3BlbnNlQ29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIHN1c3BlbnNlU3RhdGUgPSByZXR1cm5GaWJlci5tZW1vaXplZFN0YXRlO1xuICAgICAgICAgIGlmIChzdXNwZW5zZVN0YXRlLmRlaHlkcmF0ZWQgIT09IG51bGwpIGRpZE5vdEh5ZHJhdGVJbnN0YW5jZVdpdGhpblN1c3BlbnNlSW5zdGFuY2Uoc3VzcGVuc2VTdGF0ZS5kZWh5ZHJhdGVkLCBpbnN0YW5jZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVsZXRlSHlkcmF0YWJsZUluc3RhbmNlKHJldHVybkZpYmVyLCBpbnN0YW5jZSkge1xuICB3YXJuVW5oeWRyYXRlZEluc3RhbmNlKHJldHVybkZpYmVyLCBpbnN0YW5jZSk7XG4gIHZhciBjaGlsZFRvRGVsZXRlID0gY3JlYXRlRmliZXJGcm9tSG9zdEluc3RhbmNlRm9yRGVsZXRpb24oKTtcbiAgY2hpbGRUb0RlbGV0ZS5zdGF0ZU5vZGUgPSBpbnN0YW5jZTtcbiAgY2hpbGRUb0RlbGV0ZS5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgdmFyIGRlbGV0aW9ucyA9IHJldHVybkZpYmVyLmRlbGV0aW9ucztcblxuICBpZiAoZGVsZXRpb25zID09PSBudWxsKSB7XG4gICAgcmV0dXJuRmliZXIuZGVsZXRpb25zID0gW2NoaWxkVG9EZWxldGVdO1xuICAgIHJldHVybkZpYmVyLmZsYWdzIHw9IENoaWxkRGVsZXRpb247XG4gIH0gZWxzZSB7XG4gICAgZGVsZXRpb25zLnB1c2goY2hpbGRUb0RlbGV0ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2Fybk5vbmh5ZHJhdGVkSW5zdGFuY2UocmV0dXJuRmliZXIsIGZpYmVyKSB7XG4gIHtcbiAgICBpZiAoZGlkU3VzcGVuZE9yRXJyb3JERVYpIHtcbiAgICAgIC8vIEluc2lkZSBhIGJvdW5kYXJ5IHRoYXQgYWxyZWFkeSBzdXNwZW5kZWQuIFdlJ3JlIGN1cnJlbnRseSByZW5kZXJpbmcgdGhlXG4gICAgICAvLyBzaWJsaW5ncyBvZiBhIHN1c3BlbmRlZCBub2RlLiBUaGUgbWlzbWF0Y2ggbWF5IGJlIGR1ZSB0byB0aGUgbWlzc2luZ1xuICAgICAgLy8gZGF0YSwgc28gaXQncyBwcm9iYWJseSBhIGZhbHNlIHBvc2l0aXZlLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHN3aXRjaCAocmV0dXJuRmliZXIudGFnKSB7XG4gICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIHBhcmVudENvbnRhaW5lciA9IHJldHVybkZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuXG4gICAgICAgICAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICAgICAgICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgICAgICAgICAgdmFyIHR5cGUgPSBmaWJlci50eXBlO1xuICAgICAgICAgICAgICB2YXIgcHJvcHMgPSBmaWJlci5wZW5kaW5nUHJvcHM7XG4gICAgICAgICAgICAgIGRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2VXaXRoaW5Db250YWluZXIocGFyZW50Q29udGFpbmVyLCB0eXBlKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgSG9zdFRleHQ6XG4gICAgICAgICAgICAgIHZhciB0ZXh0ID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgICBkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZVdpdGhpbkNvbnRhaW5lcihwYXJlbnRDb250YWluZXIsIHRleHQpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgcGFyZW50VHlwZSA9IHJldHVybkZpYmVyLnR5cGU7XG4gICAgICAgICAgdmFyIHBhcmVudFByb3BzID0gcmV0dXJuRmliZXIubWVtb2l6ZWRQcm9wcztcbiAgICAgICAgICB2YXIgcGFyZW50SW5zdGFuY2UgPSByZXR1cm5GaWJlci5zdGF0ZU5vZGU7XG5cbiAgICAgICAgICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgICAgICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIF90eXBlID0gZmliZXIudHlwZTtcbiAgICAgICAgICAgICAgICB2YXIgX3Byb3BzID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgICAgICAgICAgICAgIHZhciBpc0NvbmN1cnJlbnRNb2RlID0gKHJldHVybkZpYmVyLm1vZGUgJiBDb25jdXJyZW50TW9kZSkgIT09IE5vTW9kZTtcbiAgICAgICAgICAgICAgICBkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlKHBhcmVudFR5cGUsIHBhcmVudFByb3BzLCBwYXJlbnRJbnN0YW5jZSwgX3R5cGUsIF9wcm9wcywgLy8gVE9ETzogRGVsZXRlIHRoaXMgYXJndW1lbnQgd2hlbiB3ZSByZW1vdmUgdGhlIGxlZ2FjeSByb290IEFQSS5cbiAgICAgICAgICAgICAgICBpc0NvbmN1cnJlbnRNb2RlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYXNlIEhvc3RUZXh0OlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdmFyIF90ZXh0ID0gZmliZXIucGVuZGluZ1Byb3BzO1xuXG4gICAgICAgICAgICAgICAgdmFyIF9pc0NvbmN1cnJlbnRNb2RlID0gKHJldHVybkZpYmVyLm1vZGUgJiBDb25jdXJyZW50TW9kZSkgIT09IE5vTW9kZTtcblxuICAgICAgICAgICAgICAgIGRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlKHBhcmVudFR5cGUsIHBhcmVudFByb3BzLCBwYXJlbnRJbnN0YW5jZSwgX3RleHQsIC8vIFRPRE86IERlbGV0ZSB0aGlzIGFyZ3VtZW50IHdoZW4gd2UgcmVtb3ZlIHRoZSBsZWdhY3kgcm9vdCBBUEkuXG4gICAgICAgICAgICAgICAgX2lzQ29uY3VycmVudE1vZGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBTdXNwZW5zZUNvbXBvbmVudDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBzdXNwZW5zZVN0YXRlID0gcmV0dXJuRmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICB2YXIgX3BhcmVudEluc3RhbmNlID0gc3VzcGVuc2VTdGF0ZS5kZWh5ZHJhdGVkO1xuICAgICAgICAgIGlmIChfcGFyZW50SW5zdGFuY2UgIT09IG51bGwpIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAgICAgIHZhciBfdHlwZTIgPSBmaWJlci50eXBlO1xuICAgICAgICAgICAgICB2YXIgX3Byb3BzMiA9IGZpYmVyLnBlbmRpbmdQcm9wcztcbiAgICAgICAgICAgICAgZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZVdpdGhpblN1c3BlbnNlSW5zdGFuY2UoX3BhcmVudEluc3RhbmNlLCBfdHlwZTIpO1xuICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBIb3N0VGV4dDpcbiAgICAgICAgICAgICAgdmFyIF90ZXh0MiA9IGZpYmVyLnBlbmRpbmdQcm9wcztcbiAgICAgICAgICAgICAgZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2VXaXRoaW5TdXNwZW5zZUluc3RhbmNlKF9wYXJlbnRJbnN0YW5jZSwgX3RleHQyKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0Tm9uSHlkcmF0ZWRJbnN0YW5jZShyZXR1cm5GaWJlciwgZmliZXIpIHtcbiAgZmliZXIuZmxhZ3MgPSBmaWJlci5mbGFncyAmIH5IeWRyYXRpbmcgfCBQbGFjZW1lbnQ7XG4gIHdhcm5Ob25oeWRyYXRlZEluc3RhbmNlKHJldHVybkZpYmVyLCBmaWJlcik7XG59XG5cbmZ1bmN0aW9uIHRyeUh5ZHJhdGUoZmliZXIsIG5leHRJbnN0YW5jZSkge1xuICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIHR5cGUgPSBmaWJlci50eXBlO1xuICAgICAgICB2YXIgcHJvcHMgPSBmaWJlci5wZW5kaW5nUHJvcHM7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGNhbkh5ZHJhdGVJbnN0YW5jZShuZXh0SW5zdGFuY2UsIHR5cGUpO1xuXG4gICAgICAgIGlmIChpbnN0YW5jZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGZpYmVyLnN0YXRlTm9kZSA9IGluc3RhbmNlO1xuICAgICAgICAgIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gZmliZXI7XG4gICAgICAgICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkKGluc3RhbmNlKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgIGNhc2UgSG9zdFRleHQ6XG4gICAgICB7XG4gICAgICAgIHZhciB0ZXh0ID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgICAgICB2YXIgdGV4dEluc3RhbmNlID0gY2FuSHlkcmF0ZVRleHRJbnN0YW5jZShuZXh0SW5zdGFuY2UsIHRleHQpO1xuXG4gICAgICAgIGlmICh0ZXh0SW5zdGFuY2UgIT09IG51bGwpIHtcbiAgICAgICAgICBmaWJlci5zdGF0ZU5vZGUgPSB0ZXh0SW5zdGFuY2U7XG4gICAgICAgICAgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBmaWJlcjsgLy8gVGV4dCBJbnN0YW5jZXMgZG9uJ3QgaGF2ZSBjaGlsZHJlbiBzbyB0aGVyZSdzIG5vdGhpbmcgdG8gaHlkcmF0ZS5cblxuICAgICAgICAgIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsO1xuICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgY2FzZSBTdXNwZW5zZUNvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIHN1c3BlbnNlSW5zdGFuY2UgPSBjYW5IeWRyYXRlU3VzcGVuc2VJbnN0YW5jZShuZXh0SW5zdGFuY2UpO1xuXG4gICAgICAgIGlmIChzdXNwZW5zZUluc3RhbmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIHN1c3BlbnNlU3RhdGUgPSB7XG4gICAgICAgICAgICBkZWh5ZHJhdGVkOiBzdXNwZW5zZUluc3RhbmNlLFxuICAgICAgICAgICAgdHJlZUNvbnRleHQ6IGdldFN1c3BlbmRlZFRyZWVDb250ZXh0KCksXG4gICAgICAgICAgICByZXRyeUxhbmU6IE9mZnNjcmVlbkxhbmVcbiAgICAgICAgICB9O1xuICAgICAgICAgIGZpYmVyLm1lbW9pemVkU3RhdGUgPSBzdXNwZW5zZVN0YXRlOyAvLyBTdG9yZSB0aGUgZGVoeWRyYXRlZCBmcmFnbWVudCBhcyBhIGNoaWxkIGZpYmVyLlxuICAgICAgICAgIC8vIFRoaXMgc2ltcGxpZmllcyB0aGUgY29kZSBmb3IgZ2V0SG9zdFNpYmxpbmcgYW5kIGRlbGV0aW5nIG5vZGVzLFxuICAgICAgICAgIC8vIHNpbmNlIGl0IGRvZXNuJ3QgaGF2ZSB0byBjb25zaWRlciBhbGwgU3VzcGVuc2UgYm91bmRhcmllcyBhbmRcbiAgICAgICAgICAvLyBjaGVjayBpZiB0aGV5J3JlIGRlaHlkcmF0ZWQgb25lcyBvciBub3QuXG5cbiAgICAgICAgICB2YXIgZGVoeWRyYXRlZEZyYWdtZW50ID0gY3JlYXRlRmliZXJGcm9tRGVoeWRyYXRlZEZyYWdtZW50KHN1c3BlbnNlSW5zdGFuY2UpO1xuICAgICAgICAgIGRlaHlkcmF0ZWRGcmFnbWVudC5yZXR1cm4gPSBmaWJlcjtcbiAgICAgICAgICBmaWJlci5jaGlsZCA9IGRlaHlkcmF0ZWRGcmFnbWVudDtcbiAgICAgICAgICBoeWRyYXRpb25QYXJlbnRGaWJlciA9IGZpYmVyOyAvLyBXaGlsZSBhIFN1c3BlbnNlIEluc3RhbmNlIGRvZXMgaGF2ZSBjaGlsZHJlbiwgd2Ugd29uJ3Qgc3RlcCBpbnRvXG4gICAgICAgICAgLy8gaXQgZHVyaW5nIHRoZSBmaXJzdCBwYXNzLiBJbnN0ZWFkLCB3ZSdsbCByZWVudGVyIGl0IGxhdGVyLlxuXG4gICAgICAgICAgbmV4dEh5ZHJhdGFibGVJbnN0YW5jZSA9IG51bGw7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNob3VsZENsaWVudFJlbmRlck9uTWlzbWF0Y2goZmliZXIpIHtcbiAgcmV0dXJuIChmaWJlci5tb2RlICYgQ29uY3VycmVudE1vZGUpICE9PSBOb01vZGUgJiYgKGZpYmVyLmZsYWdzICYgRGlkQ2FwdHVyZSkgPT09IE5vRmxhZ3M7XG59XG5cbmZ1bmN0aW9uIHRocm93T25IeWRyYXRpb25NaXNtYXRjaChmaWJlcikge1xuICB0aHJvdyBuZXcgRXJyb3IoJ0h5ZHJhdGlvbiBmYWlsZWQgYmVjYXVzZSB0aGUgaW5pdGlhbCBVSSBkb2VzIG5vdCBtYXRjaCB3aGF0IHdhcyAnICsgJ3JlbmRlcmVkIG9uIHRoZSBzZXJ2ZXIuJyk7XG59XG5cbmZ1bmN0aW9uIHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlKGZpYmVyKSB7XG4gIGlmICghaXNIeWRyYXRpbmcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgbmV4dEluc3RhbmNlID0gbmV4dEh5ZHJhdGFibGVJbnN0YW5jZTtcblxuICBpZiAoIW5leHRJbnN0YW5jZSkge1xuICAgIGlmIChzaG91bGRDbGllbnRSZW5kZXJPbk1pc21hdGNoKGZpYmVyKSkge1xuICAgICAgd2Fybk5vbmh5ZHJhdGVkSW5zdGFuY2UoaHlkcmF0aW9uUGFyZW50RmliZXIsIGZpYmVyKTtcbiAgICAgIHRocm93T25IeWRyYXRpb25NaXNtYXRjaCgpO1xuICAgIH0gLy8gTm90aGluZyB0byBoeWRyYXRlLiBNYWtlIGl0IGFuIGluc2VydGlvbi5cblxuXG4gICAgaW5zZXJ0Tm9uSHlkcmF0ZWRJbnN0YW5jZShoeWRyYXRpb25QYXJlbnRGaWJlciwgZmliZXIpO1xuICAgIGlzSHlkcmF0aW5nID0gZmFsc2U7XG4gICAgaHlkcmF0aW9uUGFyZW50RmliZXIgPSBmaWJlcjtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZmlyc3RBdHRlbXB0ZWRJbnN0YW5jZSA9IG5leHRJbnN0YW5jZTtcblxuICBpZiAoIXRyeUh5ZHJhdGUoZmliZXIsIG5leHRJbnN0YW5jZSkpIHtcbiAgICBpZiAoc2hvdWxkQ2xpZW50UmVuZGVyT25NaXNtYXRjaChmaWJlcikpIHtcbiAgICAgIHdhcm5Ob25oeWRyYXRlZEluc3RhbmNlKGh5ZHJhdGlvblBhcmVudEZpYmVyLCBmaWJlcik7XG4gICAgICB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2goKTtcbiAgICB9IC8vIElmIHdlIGNhbid0IGh5ZHJhdGUgdGhpcyBpbnN0YW5jZSBsZXQncyB0cnkgdGhlIG5leHQgb25lLlxuICAgIC8vIFdlIHVzZSB0aGlzIGFzIGEgaGV1cmlzdGljLiBJdCdzIGJhc2VkIG9uIGludHVpdGlvbiBhbmQgbm90IGRhdGEgc28gaXRcbiAgICAvLyBtaWdodCBiZSBmbGF3ZWQgb3IgdW5uZWNlc3NhcnkuXG5cblxuICAgIG5leHRJbnN0YW5jZSA9IGdldE5leHRIeWRyYXRhYmxlU2libGluZyhmaXJzdEF0dGVtcHRlZEluc3RhbmNlKTtcbiAgICB2YXIgcHJldkh5ZHJhdGlvblBhcmVudEZpYmVyID0gaHlkcmF0aW9uUGFyZW50RmliZXI7XG5cbiAgICBpZiAoIW5leHRJbnN0YW5jZSB8fCAhdHJ5SHlkcmF0ZShmaWJlciwgbmV4dEluc3RhbmNlKSkge1xuICAgICAgLy8gTm90aGluZyB0byBoeWRyYXRlLiBNYWtlIGl0IGFuIGluc2VydGlvbi5cbiAgICAgIGluc2VydE5vbkh5ZHJhdGVkSW5zdGFuY2UoaHlkcmF0aW9uUGFyZW50RmliZXIsIGZpYmVyKTtcbiAgICAgIGlzSHlkcmF0aW5nID0gZmFsc2U7XG4gICAgICBoeWRyYXRpb25QYXJlbnRGaWJlciA9IGZpYmVyO1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gV2UgbWF0Y2hlZCB0aGUgbmV4dCBvbmUsIHdlJ2xsIG5vdyBhc3N1bWUgdGhhdCB0aGUgZmlyc3Qgb25lIHdhc1xuICAgIC8vIHN1cGVyZmx1b3VzIGFuZCB3ZSdsbCBkZWxldGUgaXQuIFNpbmNlIHdlIGNhbid0IGVhZ2VybHkgZGVsZXRlIGl0XG4gICAgLy8gd2UnbGwgaGF2ZSB0byBzY2hlZHVsZSBhIGRlbGV0aW9uLiBUbyBkbyB0aGF0LCB0aGlzIG5vZGUgbmVlZHMgYSBkdW1teVxuICAgIC8vIGZpYmVyIGFzc29jaWF0ZWQgd2l0aCBpdC5cblxuXG4gICAgZGVsZXRlSHlkcmF0YWJsZUluc3RhbmNlKHByZXZIeWRyYXRpb25QYXJlbnRGaWJlciwgZmlyc3RBdHRlbXB0ZWRJbnN0YW5jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZShmaWJlciwgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCkge1xuXG4gIHZhciBpbnN0YW5jZSA9IGZpYmVyLnN0YXRlTm9kZTtcbiAgdmFyIHNob3VsZFdhcm5JZk1pc21hdGNoRGV2ID0gIWRpZFN1c3BlbmRPckVycm9yREVWO1xuICB2YXIgdXBkYXRlUGF5bG9hZCA9IGh5ZHJhdGVJbnN0YW5jZShpbnN0YW5jZSwgZmliZXIudHlwZSwgZmliZXIubWVtb2l6ZWRQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlLCBob3N0Q29udGV4dCwgZmliZXIsIHNob3VsZFdhcm5JZk1pc21hdGNoRGV2KTsgLy8gVE9ETzogVHlwZSB0aGlzIHNwZWNpZmljIHRvIHRoaXMgdHlwZSBvZiBjb21wb25lbnQuXG5cbiAgZmliZXIudXBkYXRlUXVldWUgPSB1cGRhdGVQYXlsb2FkOyAvLyBJZiB0aGUgdXBkYXRlIHBheWxvYWQgaW5kaWNhdGVzIHRoYXQgdGhlcmUgaXMgYSBjaGFuZ2Ugb3IgaWYgdGhlcmVcbiAgLy8gaXMgYSBuZXcgcmVmIHdlIG1hcmsgdGhpcyBhcyBhbiB1cGRhdGUuXG5cbiAgaWYgKHVwZGF0ZVBheWxvYWQgIT09IG51bGwpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcHJlcGFyZVRvSHlkcmF0ZUhvc3RUZXh0SW5zdGFuY2UoZmliZXIpIHtcblxuICB2YXIgdGV4dEluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlO1xuICB2YXIgdGV4dENvbnRlbnQgPSBmaWJlci5tZW1vaXplZFByb3BzO1xuICB2YXIgc2hvdWxkVXBkYXRlID0gaHlkcmF0ZVRleHRJbnN0YW5jZSh0ZXh0SW5zdGFuY2UsIHRleHRDb250ZW50LCBmaWJlcik7XG5cbiAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgIC8vIFdlIGFzc3VtZSB0aGF0IHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlIGlzIGNhbGxlZCBpbiBhIGNvbnRleHQgd2hlcmUgdGhlXG4gICAgLy8gaHlkcmF0aW9uIHBhcmVudCBpcyB0aGUgcGFyZW50IGhvc3QgY29tcG9uZW50IG9mIHRoaXMgaG9zdCB0ZXh0LlxuICAgIHZhciByZXR1cm5GaWJlciA9IGh5ZHJhdGlvblBhcmVudEZpYmVyO1xuXG4gICAgaWYgKHJldHVybkZpYmVyICE9PSBudWxsKSB7XG4gICAgICBzd2l0Y2ggKHJldHVybkZpYmVyLnRhZykge1xuICAgICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnRDb250YWluZXIgPSByZXR1cm5GaWJlci5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgICAgIHZhciBpc0NvbmN1cnJlbnRNb2RlID0gKHJldHVybkZpYmVyLm1vZGUgJiBDb25jdXJyZW50TW9kZSkgIT09IE5vTW9kZTtcbiAgICAgICAgICAgIGRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UocGFyZW50Q29udGFpbmVyLCB0ZXh0SW5zdGFuY2UsIHRleHRDb250ZW50LCAvLyBUT0RPOiBEZWxldGUgdGhpcyBhcmd1bWVudCB3aGVuIHdlIHJlbW92ZSB0aGUgbGVnYWN5IHJvb3QgQVBJLlxuICAgICAgICAgICAgaXNDb25jdXJyZW50TW9kZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBwYXJlbnRUeXBlID0gcmV0dXJuRmliZXIudHlwZTtcbiAgICAgICAgICAgIHZhciBwYXJlbnRQcm9wcyA9IHJldHVybkZpYmVyLm1lbW9pemVkUHJvcHM7XG4gICAgICAgICAgICB2YXIgcGFyZW50SW5zdGFuY2UgPSByZXR1cm5GaWJlci5zdGF0ZU5vZGU7XG5cbiAgICAgICAgICAgIHZhciBfaXNDb25jdXJyZW50TW9kZTIgPSAocmV0dXJuRmliZXIubW9kZSAmIENvbmN1cnJlbnRNb2RlKSAhPT0gTm9Nb2RlO1xuXG4gICAgICAgICAgICBkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlKHBhcmVudFR5cGUsIHBhcmVudFByb3BzLCBwYXJlbnRJbnN0YW5jZSwgdGV4dEluc3RhbmNlLCB0ZXh0Q29udGVudCwgLy8gVE9ETzogRGVsZXRlIHRoaXMgYXJndW1lbnQgd2hlbiB3ZSByZW1vdmUgdGhlIGxlZ2FjeSByb290IEFQSS5cbiAgICAgICAgICAgIF9pc0NvbmN1cnJlbnRNb2RlMik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHNob3VsZFVwZGF0ZTtcbn1cblxuZnVuY3Rpb24gcHJlcGFyZVRvSHlkcmF0ZUhvc3RTdXNwZW5zZUluc3RhbmNlKGZpYmVyKSB7XG5cbiAgdmFyIHN1c3BlbnNlU3RhdGUgPSBmaWJlci5tZW1vaXplZFN0YXRlO1xuICB2YXIgc3VzcGVuc2VJbnN0YW5jZSA9IHN1c3BlbnNlU3RhdGUgIT09IG51bGwgPyBzdXNwZW5zZVN0YXRlLmRlaHlkcmF0ZWQgOiBudWxsO1xuXG4gIGlmICghc3VzcGVuc2VJbnN0YW5jZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdG8gaGF2ZSBhIGh5ZHJhdGVkIHN1c3BlbnNlIGluc3RhbmNlLiAnICsgJ1RoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gIH1cblxuICBoeWRyYXRlU3VzcGVuc2VJbnN0YW5jZShzdXNwZW5zZUluc3RhbmNlLCBmaWJlcik7XG59XG5cbmZ1bmN0aW9uIHNraXBQYXN0RGVoeWRyYXRlZFN1c3BlbnNlSW5zdGFuY2UoZmliZXIpIHtcblxuICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGZpYmVyLm1lbW9pemVkU3RhdGU7XG4gIHZhciBzdXNwZW5zZUluc3RhbmNlID0gc3VzcGVuc2VTdGF0ZSAhPT0gbnVsbCA/IHN1c3BlbnNlU3RhdGUuZGVoeWRyYXRlZCA6IG51bGw7XG5cbiAgaWYgKCFzdXNwZW5zZUluc3RhbmNlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0byBoYXZlIGEgaHlkcmF0ZWQgc3VzcGVuc2UgaW5zdGFuY2UuICcgKyAnVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgfVxuXG4gIHJldHVybiBnZXROZXh0SHlkcmF0YWJsZUluc3RhbmNlQWZ0ZXJTdXNwZW5zZUluc3RhbmNlKHN1c3BlbnNlSW5zdGFuY2UpO1xufVxuXG5mdW5jdGlvbiBwb3BUb05leHRIb3N0UGFyZW50KGZpYmVyKSB7XG4gIHZhciBwYXJlbnQgPSBmaWJlci5yZXR1cm47XG5cbiAgd2hpbGUgKHBhcmVudCAhPT0gbnVsbCAmJiBwYXJlbnQudGFnICE9PSBIb3N0Q29tcG9uZW50ICYmIHBhcmVudC50YWcgIT09IEhvc3RSb290ICYmIHBhcmVudC50YWcgIT09IFN1c3BlbnNlQ29tcG9uZW50KSB7XG4gICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgfVxuXG4gIGh5ZHJhdGlvblBhcmVudEZpYmVyID0gcGFyZW50O1xufVxuXG5mdW5jdGlvbiBwb3BIeWRyYXRpb25TdGF0ZShmaWJlcikge1xuXG4gIGlmIChmaWJlciAhPT0gaHlkcmF0aW9uUGFyZW50RmliZXIpIHtcbiAgICAvLyBXZSdyZSBkZWVwZXIgdGhhbiB0aGUgY3VycmVudCBoeWRyYXRpb24gY29udGV4dCwgaW5zaWRlIGFuIGluc2VydGVkXG4gICAgLy8gdHJlZS5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoIWlzSHlkcmF0aW5nKSB7XG4gICAgLy8gSWYgd2UncmUgbm90IGN1cnJlbnRseSBoeWRyYXRpbmcgYnV0IHdlJ3JlIGluIGEgaHlkcmF0aW9uIGNvbnRleHQsIHRoZW5cbiAgICAvLyB3ZSB3ZXJlIGFuIGluc2VydGlvbiBhbmQgbm93IG5lZWQgdG8gcG9wIHVwIHJlZW50ZXIgaHlkcmF0aW9uIG9mIG91clxuICAgIC8vIHNpYmxpbmdzLlxuICAgIHBvcFRvTmV4dEhvc3RQYXJlbnQoZmliZXIpO1xuICAgIGlzSHlkcmF0aW5nID0gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gSWYgd2UgaGF2ZSBhbnkgcmVtYWluaW5nIGh5ZHJhdGFibGUgbm9kZXMsIHdlIG5lZWQgdG8gZGVsZXRlIHRoZW0gbm93LlxuICAvLyBXZSBvbmx5IGRvIHRoaXMgZGVlcGVyIHRoYW4gaGVhZCBhbmQgYm9keSBzaW5jZSB0aGV5IHRlbmQgdG8gaGF2ZSByYW5kb21cbiAgLy8gb3RoZXIgbm9kZXMgaW4gdGhlbS4gV2UgYWxzbyBpZ25vcmUgY29tcG9uZW50cyB3aXRoIHB1cmUgdGV4dCBjb250ZW50IGluXG4gIC8vIHNpZGUgb2YgdGhlbS4gV2UgYWxzbyBkb24ndCBkZWxldGUgYW55dGhpbmcgaW5zaWRlIHRoZSByb290IGNvbnRhaW5lci5cblxuXG4gIGlmIChmaWJlci50YWcgIT09IEhvc3RSb290ICYmIChmaWJlci50YWcgIT09IEhvc3RDb21wb25lbnQgfHwgc2hvdWxkRGVsZXRlVW5oeWRyYXRlZFRhaWxJbnN0YW5jZXMoZmliZXIudHlwZSkgJiYgIXNob3VsZFNldFRleHRDb250ZW50KGZpYmVyLnR5cGUsIGZpYmVyLm1lbW9pemVkUHJvcHMpKSkge1xuICAgIHZhciBuZXh0SW5zdGFuY2UgPSBuZXh0SHlkcmF0YWJsZUluc3RhbmNlO1xuXG4gICAgaWYgKG5leHRJbnN0YW5jZSkge1xuICAgICAgaWYgKHNob3VsZENsaWVudFJlbmRlck9uTWlzbWF0Y2goZmliZXIpKSB7XG4gICAgICAgIHdhcm5JZlVuaHlkcmF0ZWRUYWlsTm9kZXMoZmliZXIpO1xuICAgICAgICB0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2goKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdoaWxlIChuZXh0SW5zdGFuY2UpIHtcbiAgICAgICAgICBkZWxldGVIeWRyYXRhYmxlSW5zdGFuY2UoZmliZXIsIG5leHRJbnN0YW5jZSk7XG4gICAgICAgICAgbmV4dEluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nKG5leHRJbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwb3BUb05leHRIb3N0UGFyZW50KGZpYmVyKTtcblxuICBpZiAoZmliZXIudGFnID09PSBTdXNwZW5zZUNvbXBvbmVudCkge1xuICAgIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBza2lwUGFzdERlaHlkcmF0ZWRTdXNwZW5zZUluc3RhbmNlKGZpYmVyKTtcbiAgfSBlbHNlIHtcbiAgICBuZXh0SHlkcmF0YWJsZUluc3RhbmNlID0gaHlkcmF0aW9uUGFyZW50RmliZXIgPyBnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcoZmliZXIuc3RhdGVOb2RlKSA6IG51bGw7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gaGFzVW5oeWRyYXRlZFRhaWxOb2RlcygpIHtcbiAgcmV0dXJuIGlzSHlkcmF0aW5nICYmIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIHdhcm5JZlVuaHlkcmF0ZWRUYWlsTm9kZXMoZmliZXIpIHtcbiAgdmFyIG5leHRJbnN0YW5jZSA9IG5leHRIeWRyYXRhYmxlSW5zdGFuY2U7XG5cbiAgd2hpbGUgKG5leHRJbnN0YW5jZSkge1xuICAgIHdhcm5Vbmh5ZHJhdGVkSW5zdGFuY2UoZmliZXIsIG5leHRJbnN0YW5jZSk7XG4gICAgbmV4dEluc3RhbmNlID0gZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nKG5leHRJbnN0YW5jZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVzZXRIeWRyYXRpb25TdGF0ZSgpIHtcblxuICBoeWRyYXRpb25QYXJlbnRGaWJlciA9IG51bGw7XG4gIG5leHRIeWRyYXRhYmxlSW5zdGFuY2UgPSBudWxsO1xuICBpc0h5ZHJhdGluZyA9IGZhbHNlO1xuICBkaWRTdXNwZW5kT3JFcnJvckRFViA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiB1cGdyYWRlSHlkcmF0aW9uRXJyb3JzVG9SZWNvdmVyYWJsZSgpIHtcbiAgaWYgKGh5ZHJhdGlvbkVycm9ycyAhPT0gbnVsbCkge1xuICAgIC8vIFN1Y2Nlc3NmdWxseSBjb21wbGV0ZWQgYSBmb3JjZWQgY2xpZW50IHJlbmRlci4gVGhlIGVycm9ycyB0aGF0IG9jY3VycmVkXG4gICAgLy8gZHVyaW5nIHRoZSBoeWRyYXRpb24gYXR0ZW1wdCBhcmUgbm93IHJlY292ZXJlZC4gV2Ugd2lsbCBsb2cgdGhlbSBpblxuICAgIC8vIGNvbW1pdCBwaGFzZSwgb25jZSB0aGUgZW50aXJlIHRyZWUgaGFzIGZpbmlzaGVkLlxuICAgIHF1ZXVlUmVjb3ZlcmFibGVFcnJvcnMoaHlkcmF0aW9uRXJyb3JzKTtcbiAgICBoeWRyYXRpb25FcnJvcnMgPSBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldElzSHlkcmF0aW5nKCkge1xuICByZXR1cm4gaXNIeWRyYXRpbmc7XG59XG5cbmZ1bmN0aW9uIHF1ZXVlSHlkcmF0aW9uRXJyb3IoZXJyb3IpIHtcbiAgaWYgKGh5ZHJhdGlvbkVycm9ycyA9PT0gbnVsbCkge1xuICAgIGh5ZHJhdGlvbkVycm9ycyA9IFtlcnJvcl07XG4gIH0gZWxzZSB7XG4gICAgaHlkcmF0aW9uRXJyb3JzLnB1c2goZXJyb3IpO1xuICB9XG59XG5cbnZhciBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyQxID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7XG52YXIgTm9UcmFuc2l0aW9uID0gbnVsbDtcbmZ1bmN0aW9uIHJlcXVlc3RDdXJyZW50VHJhbnNpdGlvbigpIHtcbiAgcmV0dXJuIFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnJDEudHJhbnNpdGlvbjtcbn1cblxudmFyIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzID0ge1xuICByZWNvcmRVbnNhZmVMaWZlY3ljbGVXYXJuaW5nczogZnVuY3Rpb24gKGZpYmVyLCBpbnN0YW5jZSkge30sXG4gIGZsdXNoUGVuZGluZ1Vuc2FmZUxpZmVjeWNsZVdhcm5pbmdzOiBmdW5jdGlvbiAoKSB7fSxcbiAgcmVjb3JkTGVnYWN5Q29udGV4dFdhcm5pbmc6IGZ1bmN0aW9uIChmaWJlciwgaW5zdGFuY2UpIHt9LFxuICBmbHVzaExlZ2FjeUNvbnRleHRXYXJuaW5nOiBmdW5jdGlvbiAoKSB7fSxcbiAgZGlzY2FyZFBlbmRpbmdXYXJuaW5nczogZnVuY3Rpb24gKCkge31cbn07XG5cbntcbiAgdmFyIGZpbmRTdHJpY3RSb290ID0gZnVuY3Rpb24gKGZpYmVyKSB7XG4gICAgdmFyIG1heWJlU3RyaWN0Um9vdCA9IG51bGw7XG4gICAgdmFyIG5vZGUgPSBmaWJlcjtcblxuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICBpZiAobm9kZS5tb2RlICYgU3RyaWN0TGVnYWN5TW9kZSkge1xuICAgICAgICBtYXliZVN0cmljdFJvb3QgPSBub2RlO1xuICAgICAgfVxuXG4gICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIG1heWJlU3RyaWN0Um9vdDtcbiAgfTtcblxuICB2YXIgc2V0VG9Tb3J0ZWRTdHJpbmcgPSBmdW5jdGlvbiAoc2V0KSB7XG4gICAgdmFyIGFycmF5ID0gW107XG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBhcnJheS5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gYXJyYXkuc29ydCgpLmpvaW4oJywgJyk7XG4gIH07XG5cbiAgdmFyIHBlbmRpbmdDb21wb25lbnRXaWxsTW91bnRXYXJuaW5ncyA9IFtdO1xuICB2YXIgcGVuZGluZ1VOU0FGRV9Db21wb25lbnRXaWxsTW91bnRXYXJuaW5ncyA9IFtdO1xuICB2YXIgcGVuZGluZ0NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNXYXJuaW5ncyA9IFtdO1xuICB2YXIgcGVuZGluZ1VOU0FGRV9Db21wb25lbnRXaWxsUmVjZWl2ZVByb3BzV2FybmluZ3MgPSBbXTtcbiAgdmFyIHBlbmRpbmdDb21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MgPSBbXTtcbiAgdmFyIHBlbmRpbmdVTlNBRkVfQ29tcG9uZW50V2lsbFVwZGF0ZVdhcm5pbmdzID0gW107IC8vIFRyYWNrcyBjb21wb25lbnRzIHdlIGhhdmUgYWxyZWFkeSB3YXJuZWQgYWJvdXQuXG5cbiAgdmFyIGRpZFdhcm5BYm91dFVuc2FmZUxpZmVjeWNsZXMgPSBuZXcgU2V0KCk7XG5cbiAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MucmVjb3JkVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MgPSBmdW5jdGlvbiAoZmliZXIsIGluc3RhbmNlKSB7XG4gICAgLy8gRGVkdXBlIHN0cmF0ZWd5OiBXYXJuIG9uY2UgcGVyIGNvbXBvbmVudC5cbiAgICBpZiAoZGlkV2FybkFib3V0VW5zYWZlTGlmZWN5Y2xlcy5oYXMoZmliZXIudHlwZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBEb24ndCB3YXJuIGFib3V0IHJlYWN0LWxpZmVjeWNsZXMtY29tcGF0IHBvbHlmaWxsZWQgY29tcG9uZW50cy5cbiAgICBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQuX19zdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZyAhPT0gdHJ1ZSkge1xuICAgICAgcGVuZGluZ0NvbXBvbmVudFdpbGxNb3VudFdhcm5pbmdzLnB1c2goZmliZXIpO1xuICAgIH1cblxuICAgIGlmIChmaWJlci5tb2RlICYgU3RyaWN0TGVnYWN5TW9kZSAmJiB0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGVuZGluZ1VOU0FGRV9Db21wb25lbnRXaWxsTW91bnRXYXJuaW5ncy5wdXNoKGZpYmVyKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicgJiYgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcy5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nICE9PSB0cnVlKSB7XG4gICAgICBwZW5kaW5nQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1dhcm5pbmdzLnB1c2goZmliZXIpO1xuICAgIH1cblxuICAgIGlmIChmaWJlci5tb2RlICYgU3RyaWN0TGVnYWN5TW9kZSAmJiB0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHBlbmRpbmdVTlNBRkVfQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1dhcm5pbmdzLnB1c2goZmliZXIpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnN0YW5jZS5jb21wb25lbnRXaWxsVXBkYXRlLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgIT09IHRydWUpIHtcbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MucHVzaChmaWJlcik7XG4gICAgfVxuXG4gICAgaWYgKGZpYmVyLm1vZGUgJiBTdHJpY3RMZWdhY3lNb2RlICYmIHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGVuZGluZ1VOU0FGRV9Db21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MucHVzaChmaWJlcik7XG4gICAgfVxuICB9O1xuXG4gIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLmZsdXNoUGVuZGluZ1Vuc2FmZUxpZmVjeWNsZVdhcm5pbmdzID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFdlIGRvIGFuIGluaXRpYWwgcGFzcyB0byBnYXRoZXIgY29tcG9uZW50IG5hbWVzXG4gICAgdmFyIGNvbXBvbmVudFdpbGxNb3VudFVuaXF1ZU5hbWVzID0gbmV3IFNldCgpO1xuXG4gICAgaWYgKHBlbmRpbmdDb21wb25lbnRXaWxsTW91bnRXYXJuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICBwZW5kaW5nQ29tcG9uZW50V2lsbE1vdW50V2FybmluZ3MuZm9yRWFjaChmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgICAgY29tcG9uZW50V2lsbE1vdW50VW5pcXVlTmFtZXMuYWRkKGdldENvbXBvbmVudE5hbWVGcm9tRmliZXIoZmliZXIpIHx8ICdDb21wb25lbnQnKTtcbiAgICAgICAgZGlkV2FybkFib3V0VW5zYWZlTGlmZWN5Y2xlcy5hZGQoZmliZXIudHlwZSk7XG4gICAgICB9KTtcbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsTW91bnRXYXJuaW5ncyA9IFtdO1xuICAgIH1cblxuICAgIHZhciBVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50VW5pcXVlTmFtZXMgPSBuZXcgU2V0KCk7XG5cbiAgICBpZiAocGVuZGluZ1VOU0FGRV9Db21wb25lbnRXaWxsTW91bnRXYXJuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICBwZW5kaW5nVU5TQUZFX0NvbXBvbmVudFdpbGxNb3VudFdhcm5pbmdzLmZvckVhY2goZnVuY3Rpb24gKGZpYmVyKSB7XG4gICAgICAgIFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnRVbmlxdWVOYW1lcy5hZGQoZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcihmaWJlcikgfHwgJ0NvbXBvbmVudCcpO1xuICAgICAgICBkaWRXYXJuQWJvdXRVbnNhZmVMaWZlY3ljbGVzLmFkZChmaWJlci50eXBlKTtcbiAgICAgIH0pO1xuICAgICAgcGVuZGluZ1VOU0FGRV9Db21wb25lbnRXaWxsTW91bnRXYXJuaW5ncyA9IFtdO1xuICAgIH1cblxuICAgIHZhciBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzVW5pcXVlTmFtZXMgPSBuZXcgU2V0KCk7XG5cbiAgICBpZiAocGVuZGluZ0NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNXYXJuaW5ncy5sZW5ndGggPiAwKSB7XG4gICAgICBwZW5kaW5nQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1dhcm5pbmdzLmZvckVhY2goZnVuY3Rpb24gKGZpYmVyKSB7XG4gICAgICAgIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNVbmlxdWVOYW1lcy5hZGQoZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcihmaWJlcikgfHwgJ0NvbXBvbmVudCcpO1xuICAgICAgICBkaWRXYXJuQWJvdXRVbnNhZmVMaWZlY3ljbGVzLmFkZChmaWJlci50eXBlKTtcbiAgICAgIH0pO1xuICAgICAgcGVuZGluZ0NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNXYXJuaW5ncyA9IFtdO1xuICAgIH1cblxuICAgIHZhciBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1VuaXF1ZU5hbWVzID0gbmV3IFNldCgpO1xuXG4gICAgaWYgKHBlbmRpbmdVTlNBRkVfQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1dhcm5pbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgIHBlbmRpbmdVTlNBRkVfQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1dhcm5pbmdzLmZvckVhY2goZnVuY3Rpb24gKGZpYmVyKSB7XG4gICAgICAgIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzVW5pcXVlTmFtZXMuYWRkKGdldENvbXBvbmVudE5hbWVGcm9tRmliZXIoZmliZXIpIHx8ICdDb21wb25lbnQnKTtcbiAgICAgICAgZGlkV2FybkFib3V0VW5zYWZlTGlmZWN5Y2xlcy5hZGQoZmliZXIudHlwZSk7XG4gICAgICB9KTtcbiAgICAgIHBlbmRpbmdVTlNBRkVfQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1dhcm5pbmdzID0gW107XG4gICAgfVxuXG4gICAgdmFyIGNvbXBvbmVudFdpbGxVcGRhdGVVbmlxdWVOYW1lcyA9IG5ldyBTZXQoKTtcblxuICAgIGlmIChwZW5kaW5nQ29tcG9uZW50V2lsbFVwZGF0ZVdhcm5pbmdzLmxlbmd0aCA+IDApIHtcbiAgICAgIHBlbmRpbmdDb21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MuZm9yRWFjaChmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgICAgY29tcG9uZW50V2lsbFVwZGF0ZVVuaXF1ZU5hbWVzLmFkZChnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKGZpYmVyKSB8fCAnQ29tcG9uZW50Jyk7XG4gICAgICAgIGRpZFdhcm5BYm91dFVuc2FmZUxpZmVjeWNsZXMuYWRkKGZpYmVyLnR5cGUpO1xuICAgICAgfSk7XG4gICAgICBwZW5kaW5nQ29tcG9uZW50V2lsbFVwZGF0ZVdhcm5pbmdzID0gW107XG4gICAgfVxuXG4gICAgdmFyIFVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlVW5pcXVlTmFtZXMgPSBuZXcgU2V0KCk7XG5cbiAgICBpZiAocGVuZGluZ1VOU0FGRV9Db21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgcGVuZGluZ1VOU0FGRV9Db21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MuZm9yRWFjaChmdW5jdGlvbiAoZmliZXIpIHtcbiAgICAgICAgVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGVVbmlxdWVOYW1lcy5hZGQoZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcihmaWJlcikgfHwgJ0NvbXBvbmVudCcpO1xuICAgICAgICBkaWRXYXJuQWJvdXRVbnNhZmVMaWZlY3ljbGVzLmFkZChmaWJlci50eXBlKTtcbiAgICAgIH0pO1xuICAgICAgcGVuZGluZ1VOU0FGRV9Db21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MgPSBbXTtcbiAgICB9IC8vIEZpbmFsbHksIHdlIGZsdXNoIGFsbCB0aGUgd2FybmluZ3NcbiAgICAvLyBVTlNBRkVfIG9uZXMgYmVmb3JlIHRoZSBkZXByZWNhdGVkIG9uZXMsIHNpbmNlIHRoZXknbGwgYmUgJ2xvdWRlcidcblxuXG4gICAgaWYgKFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnRVbmlxdWVOYW1lcy5zaXplID4gMCkge1xuICAgICAgdmFyIHNvcnRlZE5hbWVzID0gc2V0VG9Tb3J0ZWRTdHJpbmcoVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudFVuaXF1ZU5hbWVzKTtcblxuICAgICAgZXJyb3IoJ1VzaW5nIFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgaW4gc3RyaWN0IG1vZGUgaXMgbm90IHJlY29tbWVuZGVkIGFuZCBtYXkgaW5kaWNhdGUgYnVncyBpbiB5b3VyIGNvZGUuICcgKyAnU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay91bnNhZmUtY29tcG9uZW50LWxpZmVjeWNsZXMgZm9yIGRldGFpbHMuXFxuXFxuJyArICcqIE1vdmUgY29kZSB3aXRoIHNpZGUgZWZmZWN0cyB0byBjb21wb25lbnREaWRNb3VudCwgYW5kIHNldCBpbml0aWFsIHN0YXRlIGluIHRoZSBjb25zdHJ1Y3Rvci5cXG4nICsgJ1xcblBsZWFzZSB1cGRhdGUgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOiAlcycsIHNvcnRlZE5hbWVzKTtcbiAgICB9XG5cbiAgICBpZiAoVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNVbmlxdWVOYW1lcy5zaXplID4gMCkge1xuICAgICAgdmFyIF9zb3J0ZWROYW1lcyA9IHNldFRvU29ydGVkU3RyaW5nKFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzVW5pcXVlTmFtZXMpO1xuXG4gICAgICBlcnJvcignVXNpbmcgVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgaW4gc3RyaWN0IG1vZGUgaXMgbm90IHJlY29tbWVuZGVkICcgKyAnYW5kIG1heSBpbmRpY2F0ZSBidWdzIGluIHlvdXIgY29kZS4gJyArICdTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3Vuc2FmZS1jb21wb25lbnQtbGlmZWN5Y2xlcyBmb3IgZGV0YWlscy5cXG5cXG4nICsgJyogTW92ZSBkYXRhIGZldGNoaW5nIGNvZGUgb3Igc2lkZSBlZmZlY3RzIHRvIGNvbXBvbmVudERpZFVwZGF0ZS5cXG4nICsgXCIqIElmIHlvdSdyZSB1cGRhdGluZyBzdGF0ZSB3aGVuZXZlciBwcm9wcyBjaGFuZ2UsIFwiICsgJ3JlZmFjdG9yIHlvdXIgY29kZSB0byB1c2UgbWVtb2l6YXRpb24gdGVjaG5pcXVlcyBvciBtb3ZlIGl0IHRvICcgKyAnc3RhdGljIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcy4gTGVhcm4gbW9yZSBhdDogaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL2Rlcml2ZWQtc3RhdGVcXG4nICsgJ1xcblBsZWFzZSB1cGRhdGUgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOiAlcycsIF9zb3J0ZWROYW1lcyk7XG4gICAgfVxuXG4gICAgaWYgKFVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlVW5pcXVlTmFtZXMuc2l6ZSA+IDApIHtcbiAgICAgIHZhciBfc29ydGVkTmFtZXMyID0gc2V0VG9Tb3J0ZWRTdHJpbmcoVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGVVbmlxdWVOYW1lcyk7XG5cbiAgICAgIGVycm9yKCdVc2luZyBVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSBpbiBzdHJpY3QgbW9kZSBpcyBub3QgcmVjb21tZW5kZWQgJyArICdhbmQgbWF5IGluZGljYXRlIGJ1Z3MgaW4geW91ciBjb2RlLiAnICsgJ1NlZSBodHRwczovL3JlYWN0anMub3JnL2xpbmsvdW5zYWZlLWNvbXBvbmVudC1saWZlY3ljbGVzIGZvciBkZXRhaWxzLlxcblxcbicgKyAnKiBNb3ZlIGRhdGEgZmV0Y2hpbmcgY29kZSBvciBzaWRlIGVmZmVjdHMgdG8gY29tcG9uZW50RGlkVXBkYXRlLlxcbicgKyAnXFxuUGxlYXNlIHVwZGF0ZSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6ICVzJywgX3NvcnRlZE5hbWVzMik7XG4gICAgfVxuXG4gICAgaWYgKGNvbXBvbmVudFdpbGxNb3VudFVuaXF1ZU5hbWVzLnNpemUgPiAwKSB7XG4gICAgICB2YXIgX3NvcnRlZE5hbWVzMyA9IHNldFRvU29ydGVkU3RyaW5nKGNvbXBvbmVudFdpbGxNb3VudFVuaXF1ZU5hbWVzKTtcblxuICAgICAgd2FybignY29tcG9uZW50V2lsbE1vdW50IGhhcyBiZWVuIHJlbmFtZWQsIGFuZCBpcyBub3QgcmVjb21tZW5kZWQgZm9yIHVzZS4gJyArICdTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3Vuc2FmZS1jb21wb25lbnQtbGlmZWN5Y2xlcyBmb3IgZGV0YWlscy5cXG5cXG4nICsgJyogTW92ZSBjb2RlIHdpdGggc2lkZSBlZmZlY3RzIHRvIGNvbXBvbmVudERpZE1vdW50LCBhbmQgc2V0IGluaXRpYWwgc3RhdGUgaW4gdGhlIGNvbnN0cnVjdG9yLlxcbicgKyAnKiBSZW5hbWUgY29tcG9uZW50V2lsbE1vdW50IHRvIFVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgdG8gc3VwcHJlc3MgJyArICd0aGlzIHdhcm5pbmcgaW4gbm9uLXN0cmljdCBtb2RlLiBJbiBSZWFjdCAxOC54LCBvbmx5IHRoZSBVTlNBRkVfIG5hbWUgd2lsbCB3b3JrLiAnICsgJ1RvIHJlbmFtZSBhbGwgZGVwcmVjYXRlZCBsaWZlY3ljbGVzIHRvIHRoZWlyIG5ldyBuYW1lcywgeW91IGNhbiBydW4gJyArICdgbnB4IHJlYWN0LWNvZGVtb2QgcmVuYW1lLXVuc2FmZS1saWZlY3ljbGVzYCBpbiB5b3VyIHByb2plY3Qgc291cmNlIGZvbGRlci5cXG4nICsgJ1xcblBsZWFzZSB1cGRhdGUgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOiAlcycsIF9zb3J0ZWROYW1lczMpO1xuICAgIH1cblxuICAgIGlmIChjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzVW5pcXVlTmFtZXMuc2l6ZSA+IDApIHtcbiAgICAgIHZhciBfc29ydGVkTmFtZXM0ID0gc2V0VG9Tb3J0ZWRTdHJpbmcoY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1VuaXF1ZU5hbWVzKTtcblxuICAgICAgd2FybignY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyBoYXMgYmVlbiByZW5hbWVkLCBhbmQgaXMgbm90IHJlY29tbWVuZGVkIGZvciB1c2UuICcgKyAnU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay91bnNhZmUtY29tcG9uZW50LWxpZmVjeWNsZXMgZm9yIGRldGFpbHMuXFxuXFxuJyArICcqIE1vdmUgZGF0YSBmZXRjaGluZyBjb2RlIG9yIHNpZGUgZWZmZWN0cyB0byBjb21wb25lbnREaWRVcGRhdGUuXFxuJyArIFwiKiBJZiB5b3UncmUgdXBkYXRpbmcgc3RhdGUgd2hlbmV2ZXIgcHJvcHMgY2hhbmdlLCByZWZhY3RvciB5b3VyIFwiICsgJ2NvZGUgdG8gdXNlIG1lbW9pemF0aW9uIHRlY2huaXF1ZXMgb3IgbW92ZSBpdCB0byAnICsgJ3N0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuIExlYXJuIG1vcmUgYXQ6IGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9kZXJpdmVkLXN0YXRlXFxuJyArICcqIFJlbmFtZSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIHRvIFVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIHRvIHN1cHByZXNzICcgKyAndGhpcyB3YXJuaW5nIGluIG5vbi1zdHJpY3QgbW9kZS4gSW4gUmVhY3QgMTgueCwgb25seSB0aGUgVU5TQUZFXyBuYW1lIHdpbGwgd29yay4gJyArICdUbyByZW5hbWUgYWxsIGRlcHJlY2F0ZWQgbGlmZWN5Y2xlcyB0byB0aGVpciBuZXcgbmFtZXMsIHlvdSBjYW4gcnVuICcgKyAnYG5weCByZWFjdC1jb2RlbW9kIHJlbmFtZS11bnNhZmUtbGlmZWN5Y2xlc2AgaW4geW91ciBwcm9qZWN0IHNvdXJjZSBmb2xkZXIuXFxuJyArICdcXG5QbGVhc2UgdXBkYXRlIHRoZSBmb2xsb3dpbmcgY29tcG9uZW50czogJXMnLCBfc29ydGVkTmFtZXM0KTtcbiAgICB9XG5cbiAgICBpZiAoY29tcG9uZW50V2lsbFVwZGF0ZVVuaXF1ZU5hbWVzLnNpemUgPiAwKSB7XG4gICAgICB2YXIgX3NvcnRlZE5hbWVzNSA9IHNldFRvU29ydGVkU3RyaW5nKGNvbXBvbmVudFdpbGxVcGRhdGVVbmlxdWVOYW1lcyk7XG5cbiAgICAgIHdhcm4oJ2NvbXBvbmVudFdpbGxVcGRhdGUgaGFzIGJlZW4gcmVuYW1lZCwgYW5kIGlzIG5vdCByZWNvbW1lbmRlZCBmb3IgdXNlLiAnICsgJ1NlZSBodHRwczovL3JlYWN0anMub3JnL2xpbmsvdW5zYWZlLWNvbXBvbmVudC1saWZlY3ljbGVzIGZvciBkZXRhaWxzLlxcblxcbicgKyAnKiBNb3ZlIGRhdGEgZmV0Y2hpbmcgY29kZSBvciBzaWRlIGVmZmVjdHMgdG8gY29tcG9uZW50RGlkVXBkYXRlLlxcbicgKyAnKiBSZW5hbWUgY29tcG9uZW50V2lsbFVwZGF0ZSB0byBVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSB0byBzdXBwcmVzcyAnICsgJ3RoaXMgd2FybmluZyBpbiBub24tc3RyaWN0IG1vZGUuIEluIFJlYWN0IDE4LngsIG9ubHkgdGhlIFVOU0FGRV8gbmFtZSB3aWxsIHdvcmsuICcgKyAnVG8gcmVuYW1lIGFsbCBkZXByZWNhdGVkIGxpZmVjeWNsZXMgdG8gdGhlaXIgbmV3IG5hbWVzLCB5b3UgY2FuIHJ1biAnICsgJ2BucHggcmVhY3QtY29kZW1vZCByZW5hbWUtdW5zYWZlLWxpZmVjeWNsZXNgIGluIHlvdXIgcHJvamVjdCBzb3VyY2UgZm9sZGVyLlxcbicgKyAnXFxuUGxlYXNlIHVwZGF0ZSB0aGUgZm9sbG93aW5nIGNvbXBvbmVudHM6ICVzJywgX3NvcnRlZE5hbWVzNSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBwZW5kaW5nTGVnYWN5Q29udGV4dFdhcm5pbmcgPSBuZXcgTWFwKCk7IC8vIFRyYWNrcyBjb21wb25lbnRzIHdlIGhhdmUgYWxyZWFkeSB3YXJuZWQgYWJvdXQuXG5cbiAgdmFyIGRpZFdhcm5BYm91dExlZ2FjeUNvbnRleHQgPSBuZXcgU2V0KCk7XG5cbiAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MucmVjb3JkTGVnYWN5Q29udGV4dFdhcm5pbmcgPSBmdW5jdGlvbiAoZmliZXIsIGluc3RhbmNlKSB7XG4gICAgdmFyIHN0cmljdFJvb3QgPSBmaW5kU3RyaWN0Um9vdChmaWJlcik7XG5cbiAgICBpZiAoc3RyaWN0Um9vdCA9PT0gbnVsbCkge1xuICAgICAgZXJyb3IoJ0V4cGVjdGVkIHRvIGZpbmQgYSBTdHJpY3RNb2RlIGNvbXBvbmVudCBpbiBhIHN0cmljdCBtb2RlIHRyZWUuICcgKyAnVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcblxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRGVkdXAgc3RyYXRlZ3k6IFdhcm4gb25jZSBwZXIgY29tcG9uZW50LlxuXG5cbiAgICBpZiAoZGlkV2FybkFib3V0TGVnYWN5Q29udGV4dC5oYXMoZmliZXIudHlwZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgd2FybmluZ3NGb3JSb290ID0gcGVuZGluZ0xlZ2FjeUNvbnRleHRXYXJuaW5nLmdldChzdHJpY3RSb290KTtcblxuICAgIGlmIChmaWJlci50eXBlLmNvbnRleHRUeXBlcyAhPSBudWxsIHx8IGZpYmVyLnR5cGUuY2hpbGRDb250ZXh0VHlwZXMgIT0gbnVsbCB8fCBpbnN0YW5jZSAhPT0gbnVsbCAmJiB0eXBlb2YgaW5zdGFuY2UuZ2V0Q2hpbGRDb250ZXh0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAod2FybmluZ3NGb3JSb290ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgd2FybmluZ3NGb3JSb290ID0gW107XG4gICAgICAgIHBlbmRpbmdMZWdhY3lDb250ZXh0V2FybmluZy5zZXQoc3RyaWN0Um9vdCwgd2FybmluZ3NGb3JSb290KTtcbiAgICAgIH1cblxuICAgICAgd2FybmluZ3NGb3JSb290LnB1c2goZmliZXIpO1xuICAgIH1cbiAgfTtcblxuICBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncy5mbHVzaExlZ2FjeUNvbnRleHRXYXJuaW5nID0gZnVuY3Rpb24gKCkge1xuICAgIHBlbmRpbmdMZWdhY3lDb250ZXh0V2FybmluZy5mb3JFYWNoKGZ1bmN0aW9uIChmaWJlckFycmF5LCBzdHJpY3RSb290KSB7XG4gICAgICBpZiAoZmliZXJBcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZmlyc3RGaWJlciA9IGZpYmVyQXJyYXlbMF07XG4gICAgICB2YXIgdW5pcXVlTmFtZXMgPSBuZXcgU2V0KCk7XG4gICAgICBmaWJlckFycmF5LmZvckVhY2goZnVuY3Rpb24gKGZpYmVyKSB7XG4gICAgICAgIHVuaXF1ZU5hbWVzLmFkZChnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKGZpYmVyKSB8fCAnQ29tcG9uZW50Jyk7XG4gICAgICAgIGRpZFdhcm5BYm91dExlZ2FjeUNvbnRleHQuYWRkKGZpYmVyLnR5cGUpO1xuICAgICAgfSk7XG4gICAgICB2YXIgc29ydGVkTmFtZXMgPSBzZXRUb1NvcnRlZFN0cmluZyh1bmlxdWVOYW1lcyk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHNldEN1cnJlbnRGaWJlcihmaXJzdEZpYmVyKTtcblxuICAgICAgICBlcnJvcignTGVnYWN5IGNvbnRleHQgQVBJIGhhcyBiZWVuIGRldGVjdGVkIHdpdGhpbiBhIHN0cmljdC1tb2RlIHRyZWUuJyArICdcXG5cXG5UaGUgb2xkIEFQSSB3aWxsIGJlIHN1cHBvcnRlZCBpbiBhbGwgMTYueCByZWxlYXNlcywgYnV0IGFwcGxpY2F0aW9ucyAnICsgJ3VzaW5nIGl0IHNob3VsZCBtaWdyYXRlIHRvIHRoZSBuZXcgdmVyc2lvbi4nICsgJ1xcblxcblBsZWFzZSB1cGRhdGUgdGhlIGZvbGxvd2luZyBjb21wb25lbnRzOiAlcycgKyAnXFxuXFxuTGVhcm4gbW9yZSBhYm91dCB0aGlzIHdhcm5pbmcgaGVyZTogaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL2xlZ2FjeS1jb250ZXh0Jywgc29ydGVkTmFtZXMpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgcmVzZXRDdXJyZW50RmliZXIoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncy5kaXNjYXJkUGVuZGluZ1dhcm5pbmdzID0gZnVuY3Rpb24gKCkge1xuICAgIHBlbmRpbmdDb21wb25lbnRXaWxsTW91bnRXYXJuaW5ncyA9IFtdO1xuICAgIHBlbmRpbmdVTlNBRkVfQ29tcG9uZW50V2lsbE1vdW50V2FybmluZ3MgPSBbXTtcbiAgICBwZW5kaW5nQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1dhcm5pbmdzID0gW107XG4gICAgcGVuZGluZ1VOU0FGRV9Db21wb25lbnRXaWxsUmVjZWl2ZVByb3BzV2FybmluZ3MgPSBbXTtcbiAgICBwZW5kaW5nQ29tcG9uZW50V2lsbFVwZGF0ZVdhcm5pbmdzID0gW107XG4gICAgcGVuZGluZ1VOU0FGRV9Db21wb25lbnRXaWxsVXBkYXRlV2FybmluZ3MgPSBbXTtcbiAgICBwZW5kaW5nTGVnYWN5Q29udGV4dFdhcm5pbmcgPSBuZXcgTWFwKCk7XG4gIH07XG59XG5cbnZhciBkaWRXYXJuQWJvdXRNYXBzO1xudmFyIGRpZFdhcm5BYm91dEdlbmVyYXRvcnM7XG52YXIgZGlkV2FybkFib3V0U3RyaW5nUmVmcztcbnZhciBvd25lckhhc0tleVVzZVdhcm5pbmc7XG52YXIgb3duZXJIYXNGdW5jdGlvblR5cGVXYXJuaW5nO1xuXG52YXIgd2FybkZvck1pc3NpbmdLZXkgPSBmdW5jdGlvbiAoY2hpbGQsIHJldHVybkZpYmVyKSB7fTtcblxue1xuICBkaWRXYXJuQWJvdXRNYXBzID0gZmFsc2U7XG4gIGRpZFdhcm5BYm91dEdlbmVyYXRvcnMgPSBmYWxzZTtcbiAgZGlkV2FybkFib3V0U3RyaW5nUmVmcyA9IHt9O1xuICAvKipcbiAgICogV2FybiBpZiB0aGVyZSdzIG5vIGtleSBleHBsaWNpdGx5IHNldCBvbiBkeW5hbWljIGFycmF5cyBvZiBjaGlsZHJlbiBvclxuICAgKiBvYmplY3Qga2V5cyBhcmUgbm90IHZhbGlkLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHRyYWNrIG9mIGNoaWxkcmVuIGJldHdlZW5cbiAgICogdXBkYXRlcy5cbiAgICovXG5cbiAgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0ge307XG4gIG93bmVySGFzRnVuY3Rpb25UeXBlV2FybmluZyA9IHt9O1xuXG4gIHdhcm5Gb3JNaXNzaW5nS2V5ID0gZnVuY3Rpb24gKGNoaWxkLCByZXR1cm5GaWJlcikge1xuICAgIGlmIChjaGlsZCA9PT0gbnVsbCB8fCB0eXBlb2YgY2hpbGQgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFjaGlsZC5fc3RvcmUgfHwgY2hpbGQuX3N0b3JlLnZhbGlkYXRlZCB8fCBjaGlsZC5rZXkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2hpbGQuX3N0b3JlICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZWFjdCBDb21wb25lbnQgaW4gd2FybkZvck1pc3NpbmdLZXkgc2hvdWxkIGhhdmUgYSBfc3RvcmUuICcgKyAnVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICB9XG5cbiAgICBjaGlsZC5fc3RvcmUudmFsaWRhdGVkID0gdHJ1ZTtcbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWVGcm9tRmliZXIocmV0dXJuRmliZXIpIHx8ICdDb21wb25lbnQnO1xuXG4gICAgaWYgKG93bmVySGFzS2V5VXNlV2FybmluZ1tjb21wb25lbnROYW1lXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG93bmVySGFzS2V5VXNlV2FybmluZ1tjb21wb25lbnROYW1lXSA9IHRydWU7XG5cbiAgICBlcnJvcignRWFjaCBjaGlsZCBpbiBhIGxpc3Qgc2hvdWxkIGhhdmUgYSB1bmlxdWUgJyArICdcImtleVwiIHByb3AuIFNlZSBodHRwczovL3JlYWN0anMub3JnL2xpbmsvd2FybmluZy1rZXlzIGZvciAnICsgJ21vcmUgaW5mb3JtYXRpb24uJyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzUmVhY3RDbGFzcyh0eXBlKSB7XG4gIHJldHVybiB0eXBlLnByb3RvdHlwZSAmJiB0eXBlLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50O1xufVxuXG5mdW5jdGlvbiBjb2VyY2VSZWYocmV0dXJuRmliZXIsIGN1cnJlbnQsIGVsZW1lbnQpIHtcbiAgdmFyIG1peGVkUmVmID0gZWxlbWVudC5yZWY7XG5cbiAgaWYgKG1peGVkUmVmICE9PSBudWxsICYmIHR5cGVvZiBtaXhlZFJlZiAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgbWl4ZWRSZWYgIT09ICdvYmplY3QnKSB7XG4gICAge1xuICAgICAgLy8gVE9ETzogQ2xlYW4gdGhpcyB1cCBvbmNlIHdlIHR1cm4gb24gdGhlIHN0cmluZyByZWYgd2FybmluZyBmb3JcbiAgICAgIC8vIGV2ZXJ5b25lLCBiZWNhdXNlIHRoZSBzdHJpY3QgbW9kZSBjYXNlIHdpbGwgbm8gbG9uZ2VyIGJlIHJlbGV2YW50XG4gICAgICBpZiAoKHJldHVybkZpYmVyLm1vZGUgJiBTdHJpY3RMZWdhY3lNb2RlIHx8IHdhcm5BYm91dFN0cmluZ1JlZnMpICYmIC8vIFdlIHdhcm4gaW4gUmVhY3RFbGVtZW50LmpzIGlmIG93bmVyIGFuZCBzZWxmIGFyZSBlcXVhbCBmb3Igc3RyaW5nIHJlZnNcbiAgICAgIC8vIGJlY2F1c2UgdGhlc2UgY2Fubm90IGJlIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIHRvIGFuIGFycm93IGZ1bmN0aW9uXG4gICAgICAvLyB1c2luZyBhIGNvZGVtb2QuIFRoZXJlZm9yZSwgd2UgZG9uJ3QgaGF2ZSB0byB3YXJuIGFib3V0IHN0cmluZyByZWZzIGFnYWluLlxuICAgICAgIShlbGVtZW50Ll9vd25lciAmJiBlbGVtZW50Ll9zZWxmICYmIGVsZW1lbnQuX293bmVyLnN0YXRlTm9kZSAhPT0gZWxlbWVudC5fc2VsZikgJiYgLy8gV2lsbCBhbHJlYWR5IHRocm93IHdpdGggXCJGdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBoYXZlIHN0cmluZyByZWZzXCJcbiAgICAgICEoZWxlbWVudC5fb3duZXIgJiYgZWxlbWVudC5fb3duZXIudGFnICE9PSBDbGFzc0NvbXBvbmVudCkgJiYgLy8gV2lsbCBhbHJlYWR5IHdhcm4gd2l0aCBcIkZ1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IGJlIGdpdmVuIHJlZnNcIlxuICAgICAgISh0eXBlb2YgZWxlbWVudC50eXBlID09PSAnZnVuY3Rpb24nICYmICFpc1JlYWN0Q2xhc3MoZWxlbWVudC50eXBlKSkgJiYgLy8gV2lsbCBhbHJlYWR5IHRocm93IHdpdGggXCJFbGVtZW50IHJlZiB3YXMgc3BlY2lmaWVkIGFzIGEgc3RyaW5nIChzb21lU3RyaW5nUmVmKSBidXQgbm8gb3duZXIgd2FzIHNldFwiXG4gICAgICBlbGVtZW50Ll9vd25lcikge1xuICAgICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWVGcm9tRmliZXIocmV0dXJuRmliZXIpIHx8ICdDb21wb25lbnQnO1xuXG4gICAgICAgIGlmICghZGlkV2FybkFib3V0U3RyaW5nUmVmc1tjb21wb25lbnROYW1lXSkge1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVycm9yKCdDb21wb25lbnQgXCIlc1wiIGNvbnRhaW5zIHRoZSBzdHJpbmcgcmVmIFwiJXNcIi4gU3VwcG9ydCBmb3Igc3RyaW5nIHJlZnMgJyArICd3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gV2UgcmVjb21tZW5kIHVzaW5nICcgKyAndXNlUmVmKCkgb3IgY3JlYXRlUmVmKCkgaW5zdGVhZC4gJyArICdMZWFybiBtb3JlIGFib3V0IHVzaW5nIHJlZnMgc2FmZWx5IGhlcmU6ICcgKyAnaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3N0cmljdC1tb2RlLXN0cmluZy1yZWYnLCBjb21wb25lbnROYW1lLCBtaXhlZFJlZik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlkV2FybkFib3V0U3RyaW5nUmVmc1tjb21wb25lbnROYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC5fb3duZXIpIHtcbiAgICAgIHZhciBvd25lciA9IGVsZW1lbnQuX293bmVyO1xuICAgICAgdmFyIGluc3Q7XG5cbiAgICAgIGlmIChvd25lcikge1xuICAgICAgICB2YXIgb3duZXJGaWJlciA9IG93bmVyO1xuXG4gICAgICAgIGlmIChvd25lckZpYmVyLnRhZyAhPT0gQ2xhc3NDb21wb25lbnQpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IGhhdmUgc3RyaW5nIHJlZnMuICcgKyAnV2UgcmVjb21tZW5kIHVzaW5nIHVzZVJlZigpIGluc3RlYWQuICcgKyAnTGVhcm4gbW9yZSBhYm91dCB1c2luZyByZWZzIHNhZmVseSBoZXJlOiAnICsgJ2h0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9zdHJpY3QtbW9kZS1zdHJpbmctcmVmJyk7XG4gICAgICAgIH1cblxuICAgICAgICBpbnN0ID0gb3duZXJGaWJlci5zdGF0ZU5vZGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaW5zdCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIG93bmVyIGZvciBzdHJpbmcgcmVmIFwiICsgbWl4ZWRSZWYgKyBcIi4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgXCIgKyAnYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICAgIH0gLy8gQXNzaWduaW5nIHRoaXMgdG8gYSBjb25zdCBzbyBGbG93IGtub3dzIGl0IHdvbid0IGNoYW5nZSBpbiB0aGUgY2xvc3VyZVxuXG5cbiAgICAgIHZhciByZXNvbHZlZEluc3QgPSBpbnN0O1xuXG4gICAgICB7XG4gICAgICAgIGNoZWNrUHJvcFN0cmluZ0NvZXJjaW9uKG1peGVkUmVmLCAncmVmJyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBzdHJpbmdSZWYgPSAnJyArIG1peGVkUmVmOyAvLyBDaGVjayBpZiBwcmV2aW91cyBzdHJpbmcgcmVmIG1hdGNoZXMgbmV3IHN0cmluZyByZWZcblxuICAgICAgaWYgKGN1cnJlbnQgIT09IG51bGwgJiYgY3VycmVudC5yZWYgIT09IG51bGwgJiYgdHlwZW9mIGN1cnJlbnQucmVmID09PSAnZnVuY3Rpb24nICYmIGN1cnJlbnQucmVmLl9zdHJpbmdSZWYgPT09IHN0cmluZ1JlZikge1xuICAgICAgICByZXR1cm4gY3VycmVudC5yZWY7XG4gICAgICB9XG5cbiAgICAgIHZhciByZWYgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdmFyIHJlZnMgPSByZXNvbHZlZEluc3QucmVmcztcblxuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICBkZWxldGUgcmVmc1tzdHJpbmdSZWZdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlZnNbc3RyaW5nUmVmXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZWYuX3N0cmluZ1JlZiA9IHN0cmluZ1JlZjtcbiAgICAgIHJldHVybiByZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgbWl4ZWRSZWYgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgcmVmIHRvIGJlIGEgZnVuY3Rpb24sIGEgc3RyaW5nLCBhbiBvYmplY3QgcmV0dXJuZWQgYnkgUmVhY3QuY3JlYXRlUmVmKCksIG9yIG51bGwuJyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghZWxlbWVudC5fb3duZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRWxlbWVudCByZWYgd2FzIHNwZWNpZmllZCBhcyBhIHN0cmluZyAoXCIgKyBtaXhlZFJlZiArIFwiKSBidXQgbm8gb3duZXIgd2FzIHNldC4gVGhpcyBjb3VsZCBoYXBwZW4gZm9yIG9uZSBvZlwiICsgJyB0aGUgZm9sbG93aW5nIHJlYXNvbnM6XFxuJyArICcxLiBZb3UgbWF5IGJlIGFkZGluZyBhIHJlZiB0byBhIGZ1bmN0aW9uIGNvbXBvbmVudFxcbicgKyBcIjIuIFlvdSBtYXkgYmUgYWRkaW5nIGEgcmVmIHRvIGEgY29tcG9uZW50IHRoYXQgd2FzIG5vdCBjcmVhdGVkIGluc2lkZSBhIGNvbXBvbmVudCdzIHJlbmRlciBtZXRob2RcXG5cIiArICczLiBZb3UgaGF2ZSBtdWx0aXBsZSBjb3BpZXMgb2YgUmVhY3QgbG9hZGVkXFxuJyArICdTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlZnMtbXVzdC1oYXZlLW93bmVyIGZvciBtb3JlIGluZm9ybWF0aW9uLicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtaXhlZFJlZjtcbn1cblxuZnVuY3Rpb24gdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCkge1xuICB2YXIgY2hpbGRTdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3Q2hpbGQpO1xuICB0aHJvdyBuZXcgRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiICsgKGNoaWxkU3RyaW5nID09PSAnW29iamVjdCBPYmplY3RdJyA/ICdvYmplY3Qgd2l0aCBrZXlzIHsnICsgT2JqZWN0LmtleXMobmV3Q2hpbGQpLmpvaW4oJywgJykgKyAnfScgOiBjaGlsZFN0cmluZykgKyBcIikuIFwiICsgJ0lmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgJyArICdpbnN0ZWFkLicpO1xufVxuXG5mdW5jdGlvbiB3YXJuT25GdW5jdGlvblR5cGUocmV0dXJuRmliZXIpIHtcbiAge1xuICAgIHZhciBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcihyZXR1cm5GaWJlcikgfHwgJ0NvbXBvbmVudCc7XG5cbiAgICBpZiAob3duZXJIYXNGdW5jdGlvblR5cGVXYXJuaW5nW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgb3duZXJIYXNGdW5jdGlvblR5cGVXYXJuaW5nW2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcblxuICAgIGVycm9yKCdGdW5jdGlvbnMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkLiBUaGlzIG1heSBoYXBwZW4gaWYgJyArICd5b3UgcmV0dXJuIGEgQ29tcG9uZW50IGluc3RlYWQgb2YgPENvbXBvbmVudCAvPiBmcm9tIHJlbmRlci4gJyArICdPciBtYXliZSB5b3UgbWVhbnQgdG8gY2FsbCB0aGlzIGZ1bmN0aW9uIHJhdGhlciB0aGFuIHJldHVybiBpdC4nKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlTGF6eShsYXp5VHlwZSkge1xuICB2YXIgcGF5bG9hZCA9IGxhenlUeXBlLl9wYXlsb2FkO1xuICB2YXIgaW5pdCA9IGxhenlUeXBlLl9pbml0O1xuICByZXR1cm4gaW5pdChwYXlsb2FkKTtcbn0gLy8gVGhpcyB3cmFwcGVyIGZ1bmN0aW9uIGV4aXN0cyBiZWNhdXNlIEkgZXhwZWN0IHRvIGNsb25lIHRoZSBjb2RlIGluIGVhY2ggcGF0aFxuLy8gdG8gYmUgYWJsZSB0byBvcHRpbWl6ZSBlYWNoIHBhdGggaW5kaXZpZHVhbGx5IGJ5IGJyYW5jaGluZyBlYXJseS4gVGhpcyBuZWVkc1xuLy8gYSBjb21waWxlciBvciB3ZSBjYW4gZG8gaXQgbWFudWFsbHkuIEhlbHBlcnMgdGhhdCBkb24ndCBuZWVkIHRoaXMgYnJhbmNoaW5nXG4vLyBsaXZlIG91dHNpZGUgb2YgdGhpcyBmdW5jdGlvbi5cblxuXG5mdW5jdGlvbiBDaGlsZFJlY29uY2lsZXIoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICBmdW5jdGlvbiBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY2hpbGRUb0RlbGV0ZSkge1xuICAgIGlmICghc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgLy8gTm9vcC5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgZGVsZXRpb25zID0gcmV0dXJuRmliZXIuZGVsZXRpb25zO1xuXG4gICAgaWYgKGRlbGV0aW9ucyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuRmliZXIuZGVsZXRpb25zID0gW2NoaWxkVG9EZWxldGVdO1xuICAgICAgcmV0dXJuRmliZXIuZmxhZ3MgfD0gQ2hpbGREZWxldGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRpb25zLnB1c2goY2hpbGRUb0RlbGV0ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKSB7XG4gICAgaWYgKCFzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAvLyBOb29wLlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSAvLyBUT0RPOiBGb3IgdGhlIHNob3VsZENsb25lIGNhc2UsIHRoaXMgY291bGQgYmUgbWljcm8tb3B0aW1pemVkIGEgYml0IGJ5XG4gICAgLy8gYXNzdW1pbmcgdGhhdCBhZnRlciB0aGUgZmlyc3QgY2hpbGQgd2UndmUgYWxyZWFkeSBhZGRlZCBldmVyeXRoaW5nLlxuXG5cbiAgICB2YXIgY2hpbGRUb0RlbGV0ZSA9IGN1cnJlbnRGaXJzdENoaWxkO1xuXG4gICAgd2hpbGUgKGNoaWxkVG9EZWxldGUgIT09IG51bGwpIHtcbiAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZFRvRGVsZXRlKTtcbiAgICAgIGNoaWxkVG9EZWxldGUgPSBjaGlsZFRvRGVsZXRlLnNpYmxpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBtYXBSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpIHtcbiAgICAvLyBBZGQgdGhlIHJlbWFpbmluZyBjaGlsZHJlbiB0byBhIHRlbXBvcmFyeSBtYXAgc28gdGhhdCB3ZSBjYW4gZmluZCB0aGVtIGJ5XG4gICAgLy8ga2V5cyBxdWlja2x5LiBJbXBsaWNpdCAobnVsbCkga2V5cyBnZXQgYWRkZWQgdG8gdGhpcyBzZXQgd2l0aCB0aGVpciBpbmRleFxuICAgIC8vIGluc3RlYWQuXG4gICAgdmFyIGV4aXN0aW5nQ2hpbGRyZW4gPSBuZXcgTWFwKCk7XG4gICAgdmFyIGV4aXN0aW5nQ2hpbGQgPSBjdXJyZW50Rmlyc3RDaGlsZDtcblxuICAgIHdoaWxlIChleGlzdGluZ0NoaWxkICE9PSBudWxsKSB7XG4gICAgICBpZiAoZXhpc3RpbmdDaGlsZC5rZXkgIT09IG51bGwpIHtcbiAgICAgICAgZXhpc3RpbmdDaGlsZHJlbi5zZXQoZXhpc3RpbmdDaGlsZC5rZXksIGV4aXN0aW5nQ2hpbGQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhpc3RpbmdDaGlsZHJlbi5zZXQoZXhpc3RpbmdDaGlsZC5pbmRleCwgZXhpc3RpbmdDaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIGV4aXN0aW5nQ2hpbGQgPSBleGlzdGluZ0NoaWxkLnNpYmxpbmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4aXN0aW5nQ2hpbGRyZW47XG4gIH1cblxuICBmdW5jdGlvbiB1c2VGaWJlcihmaWJlciwgcGVuZGluZ1Byb3BzKSB7XG4gICAgLy8gV2UgY3VycmVudGx5IHNldCBzaWJsaW5nIHRvIG51bGwgYW5kIGluZGV4IHRvIDAgaGVyZSBiZWNhdXNlIGl0IGlzIGVhc3lcbiAgICAvLyB0byBmb3JnZXQgdG8gZG8gYmVmb3JlIHJldHVybmluZyBpdC4gRS5nLiBmb3IgdGhlIHNpbmdsZSBjaGlsZCBjYXNlLlxuICAgIHZhciBjbG9uZSA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGZpYmVyLCBwZW5kaW5nUHJvcHMpO1xuICAgIGNsb25lLmluZGV4ID0gMDtcbiAgICBjbG9uZS5zaWJsaW5nID0gbnVsbDtcbiAgICByZXR1cm4gY2xvbmU7XG4gIH1cblxuICBmdW5jdGlvbiBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0luZGV4KSB7XG4gICAgbmV3RmliZXIuaW5kZXggPSBuZXdJbmRleDtcblxuICAgIGlmICghc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgLy8gRHVyaW5nIGh5ZHJhdGlvbiwgdGhlIHVzZUlkIGFsZ29yaXRobSBuZWVkcyB0byBrbm93IHdoaWNoIGZpYmVycyBhcmVcbiAgICAgIC8vIHBhcnQgb2YgYSBsaXN0IG9mIGNoaWxkcmVuIChhcnJheXMsIGl0ZXJhdG9ycykuXG4gICAgICBuZXdGaWJlci5mbGFncyB8PSBGb3JrZWQ7XG4gICAgICByZXR1cm4gbGFzdFBsYWNlZEluZGV4O1xuICAgIH1cblxuICAgIHZhciBjdXJyZW50ID0gbmV3RmliZXIuYWx0ZXJuYXRlO1xuXG4gICAgaWYgKGN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgIHZhciBvbGRJbmRleCA9IGN1cnJlbnQuaW5kZXg7XG5cbiAgICAgIGlmIChvbGRJbmRleCA8IGxhc3RQbGFjZWRJbmRleCkge1xuICAgICAgICAvLyBUaGlzIGlzIGEgbW92ZS5cbiAgICAgICAgbmV3RmliZXIuZmxhZ3MgfD0gUGxhY2VtZW50O1xuICAgICAgICByZXR1cm4gbGFzdFBsYWNlZEluZGV4O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhpcyBpdGVtIGNhbiBzdGF5IGluIHBsYWNlLlxuICAgICAgICByZXR1cm4gb2xkSW5kZXg7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoaXMgaXMgYW4gaW5zZXJ0aW9uLlxuICAgICAgbmV3RmliZXIuZmxhZ3MgfD0gUGxhY2VtZW50O1xuICAgICAgcmV0dXJuIGxhc3RQbGFjZWRJbmRleDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwbGFjZVNpbmdsZUNoaWxkKG5ld0ZpYmVyKSB7XG4gICAgLy8gVGhpcyBpcyBzaW1wbGVyIGZvciB0aGUgc2luZ2xlIGNoaWxkIGNhc2UuIFdlIG9ubHkgbmVlZCB0byBkbyBhXG4gICAgLy8gcGxhY2VtZW50IGZvciBpbnNlcnRpbmcgbmV3IGNoaWxkcmVuLlxuICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmIG5ld0ZpYmVyLmFsdGVybmF0ZSA9PT0gbnVsbCkge1xuICAgICAgbmV3RmliZXIuZmxhZ3MgfD0gUGxhY2VtZW50O1xuICAgIH1cblxuICAgIHJldHVybiBuZXdGaWJlcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVRleHROb2RlKHJldHVybkZpYmVyLCBjdXJyZW50LCB0ZXh0Q29udGVudCwgbGFuZXMpIHtcbiAgICBpZiAoY3VycmVudCA9PT0gbnVsbCB8fCBjdXJyZW50LnRhZyAhPT0gSG9zdFRleHQpIHtcbiAgICAgIC8vIEluc2VydFxuICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21UZXh0KHRleHRDb250ZW50LCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcyk7XG4gICAgICBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGNyZWF0ZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVwZGF0ZVxuICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY3VycmVudCwgdGV4dENvbnRlbnQpO1xuICAgICAgZXhpc3RpbmcucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRWxlbWVudChyZXR1cm5GaWJlciwgY3VycmVudCwgZWxlbWVudCwgbGFuZXMpIHtcbiAgICB2YXIgZWxlbWVudFR5cGUgPSBlbGVtZW50LnR5cGU7XG5cbiAgICBpZiAoZWxlbWVudFR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpIHtcbiAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChyZXR1cm5GaWJlciwgY3VycmVudCwgZWxlbWVudC5wcm9wcy5jaGlsZHJlbiwgbGFuZXMsIGVsZW1lbnQua2V5KTtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudCAhPT0gbnVsbCkge1xuICAgICAgaWYgKGN1cnJlbnQuZWxlbWVudFR5cGUgPT09IGVsZW1lbnRUeXBlIHx8ICggLy8gS2VlcCB0aGlzIGNoZWNrIGlubGluZSBzbyBpdCBvbmx5IHJ1bnMgb24gdGhlIGZhbHNlIHBhdGg6XG4gICAgICAgaXNDb21wYXRpYmxlRmFtaWx5Rm9ySG90UmVsb2FkaW5nKGN1cnJlbnQsIGVsZW1lbnQpICkgfHwgLy8gTGF6eSB0eXBlcyBzaG91bGQgcmVjb25jaWxlIHRoZWlyIHJlc29sdmVkIHR5cGUuXG4gICAgICAvLyBXZSBuZWVkIHRvIGRvIHRoaXMgYWZ0ZXIgdGhlIEhvdCBSZWxvYWRpbmcgY2hlY2sgYWJvdmUsXG4gICAgICAvLyBiZWNhdXNlIGhvdCByZWxvYWRpbmcgaGFzIGRpZmZlcmVudCBzZW1hbnRpY3MgdGhhbiBwcm9kIGJlY2F1c2VcbiAgICAgIC8vIGl0IGRvZXNuJ3QgcmVzdXNwZW5kLiBTbyB3ZSBjYW4ndCBsZXQgdGhlIGNhbGwgYmVsb3cgc3VzcGVuZC5cbiAgICAgIHR5cGVvZiBlbGVtZW50VHlwZSA9PT0gJ29iamVjdCcgJiYgZWxlbWVudFR5cGUgIT09IG51bGwgJiYgZWxlbWVudFR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSAmJiByZXNvbHZlTGF6eShlbGVtZW50VHlwZSkgPT09IGN1cnJlbnQudHlwZSkge1xuICAgICAgICAvLyBNb3ZlIGJhc2VkIG9uIGluZGV4XG4gICAgICAgIHZhciBleGlzdGluZyA9IHVzZUZpYmVyKGN1cnJlbnQsIGVsZW1lbnQucHJvcHMpO1xuICAgICAgICBleGlzdGluZy5yZWYgPSBjb2VyY2VSZWYocmV0dXJuRmliZXIsIGN1cnJlbnQsIGVsZW1lbnQpO1xuICAgICAgICBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcblxuICAgICAgICB7XG4gICAgICAgICAgZXhpc3RpbmcuX2RlYnVnU291cmNlID0gZWxlbWVudC5fc291cmNlO1xuICAgICAgICAgIGV4aXN0aW5nLl9kZWJ1Z093bmVyID0gZWxlbWVudC5fb3duZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICB9XG4gICAgfSAvLyBJbnNlcnRcblxuXG4gICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21FbGVtZW50KGVsZW1lbnQsIHJldHVybkZpYmVyLm1vZGUsIGxhbmVzKTtcbiAgICBjcmVhdGVkLnJlZiA9IGNvZXJjZVJlZihyZXR1cm5GaWJlciwgY3VycmVudCwgZWxlbWVudCk7XG4gICAgY3JlYXRlZC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICByZXR1cm4gY3JlYXRlZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgY3VycmVudCwgcG9ydGFsLCBsYW5lcykge1xuICAgIGlmIChjdXJyZW50ID09PSBudWxsIHx8IGN1cnJlbnQudGFnICE9PSBIb3N0UG9ydGFsIHx8IGN1cnJlbnQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8gIT09IHBvcnRhbC5jb250YWluZXJJbmZvIHx8IGN1cnJlbnQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uICE9PSBwb3J0YWwuaW1wbGVtZW50YXRpb24pIHtcbiAgICAgIC8vIEluc2VydFxuICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21Qb3J0YWwocG9ydGFsLCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcyk7XG4gICAgICBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGNyZWF0ZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVwZGF0ZVxuICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY3VycmVudCwgcG9ydGFsLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgIGV4aXN0aW5nLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBjdXJyZW50LCBmcmFnbWVudCwgbGFuZXMsIGtleSkge1xuICAgIGlmIChjdXJyZW50ID09PSBudWxsIHx8IGN1cnJlbnQudGFnICE9PSBGcmFnbWVudCkge1xuICAgICAgLy8gSW5zZXJ0XG4gICAgICB2YXIgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KGZyYWdtZW50LCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcywga2V5KTtcbiAgICAgIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gY3JlYXRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVXBkYXRlXG4gICAgICB2YXIgZXhpc3RpbmcgPSB1c2VGaWJlcihjdXJyZW50LCBmcmFnbWVudCk7XG4gICAgICBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBleGlzdGluZztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgbmV3Q2hpbGQsIGxhbmVzKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycgJiYgbmV3Q2hpbGQgIT09ICcnIHx8IHR5cGVvZiBuZXdDaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgIC8vIFRleHQgbm9kZXMgZG9uJ3QgaGF2ZSBrZXlzLiBJZiB0aGUgcHJldmlvdXMgbm9kZSBpcyBpbXBsaWNpdGx5IGtleWVkXG4gICAgICAvLyB3ZSBjYW4gY29udGludWUgdG8gcmVwbGFjZSBpdCB3aXRob3V0IGFib3J0aW5nIGV2ZW4gaWYgaXQgaXMgbm90IGEgdGV4dFxuICAgICAgLy8gbm9kZS5cbiAgICAgIHZhciBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tVGV4dCgnJyArIG5ld0NoaWxkLCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcyk7XG4gICAgICBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGNyZWF0ZWQ7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ29iamVjdCcgJiYgbmV3Q2hpbGQgIT09IG51bGwpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIF9jcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tRWxlbWVudChuZXdDaGlsZCwgcmV0dXJuRmliZXIubW9kZSwgbGFuZXMpO1xuXG4gICAgICAgICAgICBfY3JlYXRlZC5yZWYgPSBjb2VyY2VSZWYocmV0dXJuRmliZXIsIG51bGwsIG5ld0NoaWxkKTtcbiAgICAgICAgICAgIF9jcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVkO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBfY3JlYXRlZDIgPSBjcmVhdGVGaWJlckZyb21Qb3J0YWwobmV3Q2hpbGQsIHJldHVybkZpYmVyLm1vZGUsIGxhbmVzKTtcblxuICAgICAgICAgICAgX2NyZWF0ZWQyLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgICAgICAgcmV0dXJuIF9jcmVhdGVkMjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgY2FzZSBSRUFDVF9MQVpZX1RZUEU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIHBheWxvYWQgPSBuZXdDaGlsZC5fcGF5bG9hZDtcbiAgICAgICAgICAgIHZhciBpbml0ID0gbmV3Q2hpbGQuX2luaXQ7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlQ2hpbGQocmV0dXJuRmliZXIsIGluaXQocGF5bG9hZCksIGxhbmVzKTtcbiAgICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0FycmF5KG5ld0NoaWxkKSB8fCBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSkge1xuICAgICAgICB2YXIgX2NyZWF0ZWQzID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQobmV3Q2hpbGQsIHJldHVybkZpYmVyLm1vZGUsIGxhbmVzLCBudWxsKTtcblxuICAgICAgICBfY3JlYXRlZDMucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgIHJldHVybiBfY3JlYXRlZDM7XG4gICAgICB9XG5cbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2Fybk9uRnVuY3Rpb25UeXBlKHJldHVybkZpYmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVNsb3QocmV0dXJuRmliZXIsIG9sZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpIHtcbiAgICAvLyBVcGRhdGUgdGhlIGZpYmVyIGlmIHRoZSBrZXlzIG1hdGNoLCBvdGhlcndpc2UgcmV0dXJuIG51bGwuXG4gICAgdmFyIGtleSA9IG9sZEZpYmVyICE9PSBudWxsID8gb2xkRmliZXIua2V5IDogbnVsbDtcblxuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnICYmIG5ld0NoaWxkICE9PSAnJyB8fCB0eXBlb2YgbmV3Q2hpbGQgPT09ICdudW1iZXInKSB7XG4gICAgICAvLyBUZXh0IG5vZGVzIGRvbid0IGhhdmUga2V5cy4gSWYgdGhlIHByZXZpb3VzIG5vZGUgaXMgaW1wbGljaXRseSBrZXllZFxuICAgICAgLy8gd2UgY2FuIGNvbnRpbnVlIHRvIHJlcGxhY2UgaXQgd2l0aG91dCBhYm9ydGluZyBldmVuIGlmIGl0IGlzIG5vdCBhIHRleHRcbiAgICAgIC8vIG5vZGUuXG4gICAgICBpZiAoa2V5ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdXBkYXRlVGV4dE5vZGUocmV0dXJuRmliZXIsIG9sZEZpYmVyLCAnJyArIG5ld0NoaWxkLCBsYW5lcyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ29iamVjdCcgJiYgbmV3Q2hpbGQgIT09IG51bGwpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKG5ld0NoaWxkLmtleSA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgIHJldHVybiB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGxhbmVzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmIChuZXdDaGlsZC5rZXkgPT09IGtleSkge1xuICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlUG9ydGFsKHJldHVybkZpYmVyLCBvbGRGaWJlciwgbmV3Q2hpbGQsIGxhbmVzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgcGF5bG9hZCA9IG5ld0NoaWxkLl9wYXlsb2FkO1xuICAgICAgICAgICAgdmFyIGluaXQgPSBuZXdDaGlsZC5faW5pdDtcbiAgICAgICAgICAgIHJldHVybiB1cGRhdGVTbG90KHJldHVybkZpYmVyLCBvbGRGaWJlciwgaW5pdChwYXlsb2FkKSwgbGFuZXMpO1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzQXJyYXkobmV3Q2hpbGQpIHx8IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKSB7XG4gICAgICAgIGlmIChrZXkgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkLCBsYW5lcywgbnVsbCk7XG4gICAgICB9XG5cbiAgICAgIHRocm93T25JbnZhbGlkT2JqZWN0VHlwZShyZXR1cm5GaWJlciwgbmV3Q2hpbGQpO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2Fybk9uRnVuY3Rpb25UeXBlKHJldHVybkZpYmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUZyb21NYXAoZXhpc3RpbmdDaGlsZHJlbiwgcmV0dXJuRmliZXIsIG5ld0lkeCwgbmV3Q2hpbGQsIGxhbmVzKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycgJiYgbmV3Q2hpbGQgIT09ICcnIHx8IHR5cGVvZiBuZXdDaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgIC8vIFRleHQgbm9kZXMgZG9uJ3QgaGF2ZSBrZXlzLCBzbyB3ZSBuZWl0aGVyIGhhdmUgdG8gY2hlY2sgdGhlIG9sZCBub3JcbiAgICAgIC8vIG5ldyBub2RlIGZvciB0aGUga2V5LiBJZiBib3RoIGFyZSB0ZXh0IG5vZGVzLCB0aGV5IG1hdGNoLlxuICAgICAgdmFyIG1hdGNoZWRGaWJlciA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5ld0lkeCkgfHwgbnVsbDtcbiAgICAgIHJldHVybiB1cGRhdGVUZXh0Tm9kZShyZXR1cm5GaWJlciwgbWF0Y2hlZEZpYmVyLCAnJyArIG5ld0NoaWxkLCBsYW5lcyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ29iamVjdCcgJiYgbmV3Q2hpbGQgIT09IG51bGwpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIF9tYXRjaGVkRmliZXIgPSBleGlzdGluZ0NoaWxkcmVuLmdldChuZXdDaGlsZC5rZXkgPT09IG51bGwgPyBuZXdJZHggOiBuZXdDaGlsZC5rZXkpIHx8IG51bGw7XG5cbiAgICAgICAgICAgIHJldHVybiB1cGRhdGVFbGVtZW50KHJldHVybkZpYmVyLCBfbWF0Y2hlZEZpYmVyLCBuZXdDaGlsZCwgbGFuZXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBfbWF0Y2hlZEZpYmVyMiA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5ld0NoaWxkLmtleSA9PT0gbnVsbCA/IG5ld0lkeCA6IG5ld0NoaWxkLmtleSkgfHwgbnVsbDtcblxuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZVBvcnRhbChyZXR1cm5GaWJlciwgX21hdGNoZWRGaWJlcjIsIG5ld0NoaWxkLCBsYW5lcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgIHZhciBwYXlsb2FkID0gbmV3Q2hpbGQuX3BheWxvYWQ7XG4gICAgICAgICAgdmFyIGluaXQgPSBuZXdDaGlsZC5faW5pdDtcbiAgICAgICAgICByZXR1cm4gdXBkYXRlRnJvbU1hcChleGlzdGluZ0NoaWxkcmVuLCByZXR1cm5GaWJlciwgbmV3SWR4LCBpbml0KHBheWxvYWQpLCBsYW5lcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0FycmF5KG5ld0NoaWxkKSB8fCBnZXRJdGVyYXRvckZuKG5ld0NoaWxkKSkge1xuICAgICAgICB2YXIgX21hdGNoZWRGaWJlcjMgPSBleGlzdGluZ0NoaWxkcmVuLmdldChuZXdJZHgpIHx8IG51bGw7XG5cbiAgICAgICAgcmV0dXJuIHVwZGF0ZUZyYWdtZW50KHJldHVybkZpYmVyLCBfbWF0Y2hlZEZpYmVyMywgbmV3Q2hpbGQsIGxhbmVzLCBudWxsKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyLCBuZXdDaGlsZCk7XG4gICAgfVxuXG4gICAge1xuICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuT25GdW5jdGlvblR5cGUocmV0dXJuRmliZXIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiBXYXJucyBpZiB0aGVyZSBpcyBhIGR1cGxpY2F0ZSBvciBtaXNzaW5nIGtleVxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHdhcm5PbkludmFsaWRLZXkoY2hpbGQsIGtub3duS2V5cywgcmV0dXJuRmliZXIpIHtcbiAgICB7XG4gICAgICBpZiAodHlwZW9mIGNoaWxkICE9PSAnb2JqZWN0JyB8fCBjaGlsZCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4ga25vd25LZXlzO1xuICAgICAgfVxuXG4gICAgICBzd2l0Y2ggKGNoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIHdhcm5Gb3JNaXNzaW5nS2V5KGNoaWxkLCByZXR1cm5GaWJlcik7XG4gICAgICAgICAgdmFyIGtleSA9IGNoaWxkLmtleTtcblxuICAgICAgICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGtub3duS2V5cyA9PT0gbnVsbCkge1xuICAgICAgICAgICAga25vd25LZXlzID0gbmV3IFNldCgpO1xuICAgICAgICAgICAga25vd25LZXlzLmFkZChrZXkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKCFrbm93bktleXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIGtub3duS2V5cy5hZGQoa2V5KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGVycm9yKCdFbmNvdW50ZXJlZCB0d28gY2hpbGRyZW4gd2l0aCB0aGUgc2FtZSBrZXksIGAlc2AuICcgKyAnS2V5cyBzaG91bGQgYmUgdW5pcXVlIHNvIHRoYXQgY29tcG9uZW50cyBtYWludGFpbiB0aGVpciBpZGVudGl0eSAnICsgJ2Fjcm9zcyB1cGRhdGVzLiBOb24tdW5pcXVlIGtleXMgbWF5IGNhdXNlIGNoaWxkcmVuIHRvIGJlICcgKyAnZHVwbGljYXRlZCBhbmQvb3Igb21pdHRlZCDigJQgdGhlIGJlaGF2aW9yIGlzIHVuc3VwcG9ydGVkIGFuZCAnICsgJ2NvdWxkIGNoYW5nZSBpbiBhIGZ1dHVyZSB2ZXJzaW9uLicsIGtleSk7XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICB2YXIgcGF5bG9hZCA9IGNoaWxkLl9wYXlsb2FkO1xuICAgICAgICAgIHZhciBpbml0ID0gY2hpbGQuX2luaXQ7XG4gICAgICAgICAgd2Fybk9uSW52YWxpZEtleShpbml0KHBheWxvYWQpLCBrbm93bktleXMsIHJldHVybkZpYmVyKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ga25vd25LZXlzO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRyZW5BcnJheShyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0NoaWxkcmVuLCBsYW5lcykge1xuICAgIC8vIFRoaXMgYWxnb3JpdGhtIGNhbid0IG9wdGltaXplIGJ5IHNlYXJjaGluZyBmcm9tIGJvdGggZW5kcyBzaW5jZSB3ZVxuICAgIC8vIGRvbid0IGhhdmUgYmFja3BvaW50ZXJzIG9uIGZpYmVycy4gSSdtIHRyeWluZyB0byBzZWUgaG93IGZhciB3ZSBjYW4gZ2V0XG4gICAgLy8gd2l0aCB0aGF0IG1vZGVsLiBJZiBpdCBlbmRzIHVwIG5vdCBiZWluZyB3b3J0aCB0aGUgdHJhZGVvZmZzLCB3ZSBjYW5cbiAgICAvLyBhZGQgaXQgbGF0ZXIuXG4gICAgLy8gRXZlbiB3aXRoIGEgdHdvIGVuZGVkIG9wdGltaXphdGlvbiwgd2UnZCB3YW50IHRvIG9wdGltaXplIGZvciB0aGUgY2FzZVxuICAgIC8vIHdoZXJlIHRoZXJlIGFyZSBmZXcgY2hhbmdlcyBhbmQgYnJ1dGUgZm9yY2UgdGhlIGNvbXBhcmlzb24gaW5zdGVhZCBvZlxuICAgIC8vIGdvaW5nIGZvciB0aGUgTWFwLiBJdCdkIGxpa2UgdG8gZXhwbG9yZSBoaXR0aW5nIHRoYXQgcGF0aCBmaXJzdCBpblxuICAgIC8vIGZvcndhcmQtb25seSBtb2RlIGFuZCBvbmx5IGdvIGZvciB0aGUgTWFwIG9uY2Ugd2Ugbm90aWNlIHRoYXQgd2UgbmVlZFxuICAgIC8vIGxvdHMgb2YgbG9vayBhaGVhZC4gVGhpcyBkb2Vzbid0IGhhbmRsZSByZXZlcnNhbCBhcyB3ZWxsIGFzIHR3byBlbmRlZFxuICAgIC8vIHNlYXJjaCBidXQgdGhhdCdzIHVudXN1YWwuIEJlc2lkZXMsIGZvciB0aGUgdHdvIGVuZGVkIG9wdGltaXphdGlvbiB0b1xuICAgIC8vIHdvcmsgb24gSXRlcmFibGVzLCB3ZSdkIG5lZWQgdG8gY29weSB0aGUgd2hvbGUgc2V0LlxuICAgIC8vIEluIHRoaXMgZmlyc3QgaXRlcmF0aW9uLCB3ZSdsbCBqdXN0IGxpdmUgd2l0aCBoaXR0aW5nIHRoZSBiYWQgY2FzZVxuICAgIC8vIChhZGRpbmcgZXZlcnl0aGluZyB0byBhIE1hcCkgaW4gZm9yIGV2ZXJ5IGluc2VydC9tb3ZlLlxuICAgIC8vIElmIHlvdSBjaGFuZ2UgdGhpcyBjb2RlLCBhbHNvIHVwZGF0ZSByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKCkgd2hpY2hcbiAgICAvLyB1c2VzIHRoZSBzYW1lIGFsZ29yaXRobS5cbiAgICB7XG4gICAgICAvLyBGaXJzdCwgdmFsaWRhdGUga2V5cy5cbiAgICAgIHZhciBrbm93bktleXMgPSBudWxsO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjaGlsZCA9IG5ld0NoaWxkcmVuW2ldO1xuICAgICAgICBrbm93bktleXMgPSB3YXJuT25JbnZhbGlkS2V5KGNoaWxkLCBrbm93bktleXMsIHJldHVybkZpYmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG51bGw7XG4gICAgdmFyIHByZXZpb3VzTmV3RmliZXIgPSBudWxsO1xuICAgIHZhciBvbGRGaWJlciA9IGN1cnJlbnRGaXJzdENoaWxkO1xuICAgIHZhciBsYXN0UGxhY2VkSW5kZXggPSAwO1xuICAgIHZhciBuZXdJZHggPSAwO1xuICAgIHZhciBuZXh0T2xkRmliZXIgPSBudWxsO1xuXG4gICAgZm9yICg7IG9sZEZpYmVyICE9PSBudWxsICYmIG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgbmV3SWR4KyspIHtcbiAgICAgIGlmIChvbGRGaWJlci5pbmRleCA+IG5ld0lkeCkge1xuICAgICAgICBuZXh0T2xkRmliZXIgPSBvbGRGaWJlcjtcbiAgICAgICAgb2xkRmliZXIgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gb2xkRmliZXIuc2libGluZztcbiAgICAgIH1cblxuICAgICAgdmFyIG5ld0ZpYmVyID0gdXBkYXRlU2xvdChyZXR1cm5GaWJlciwgb2xkRmliZXIsIG5ld0NoaWxkcmVuW25ld0lkeF0sIGxhbmVzKTtcblxuICAgICAgaWYgKG5ld0ZpYmVyID09PSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE86IFRoaXMgYnJlYWtzIG9uIGVtcHR5IHNsb3RzIGxpa2UgbnVsbCBjaGlsZHJlbi4gVGhhdCdzXG4gICAgICAgIC8vIHVuZm9ydHVuYXRlIGJlY2F1c2UgaXQgdHJpZ2dlcnMgdGhlIHNsb3cgcGF0aCBhbGwgdGhlIHRpbWUuIFdlIG5lZWRcbiAgICAgICAgLy8gYSBiZXR0ZXIgd2F5IHRvIGNvbW11bmljYXRlIHdoZXRoZXIgdGhpcyB3YXMgYSBtaXNzIG9yIG51bGwsXG4gICAgICAgIC8vIGJvb2xlYW4sIHVuZGVmaW5lZCwgZXRjLlxuICAgICAgICBpZiAob2xkRmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgICBvbGRGaWJlciA9IG5leHRPbGRGaWJlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBpZiAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgICBpZiAob2xkRmliZXIgJiYgbmV3RmliZXIuYWx0ZXJuYXRlID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gV2UgbWF0Y2hlZCB0aGUgc2xvdCwgYnV0IHdlIGRpZG4ndCByZXVzZSB0aGUgZXhpc3RpbmcgZmliZXIsIHNvIHdlXG4gICAgICAgICAgLy8gbmVlZCB0byBkZWxldGUgdGhlIGV4aXN0aW5nIGNoaWxkLlxuICAgICAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBvbGRGaWJlcik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGFzdFBsYWNlZEluZGV4ID0gcGxhY2VDaGlsZChuZXdGaWJlciwgbGFzdFBsYWNlZEluZGV4LCBuZXdJZHgpO1xuXG4gICAgICBpZiAocHJldmlvdXNOZXdGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAvLyBUT0RPOiBNb3ZlIG91dCBvZiB0aGUgbG9vcC4gVGhpcyBvbmx5IGhhcHBlbnMgZm9yIHRoZSBmaXJzdCBydW4uXG4gICAgICAgIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBuZXdGaWJlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRPRE86IERlZmVyIHNpYmxpbmdzIGlmIHdlJ3JlIG5vdCBhdCB0aGUgcmlnaHQgaW5kZXggZm9yIHRoaXMgc2xvdC5cbiAgICAgICAgLy8gSS5lLiBpZiB3ZSBoYWQgbnVsbCB2YWx1ZXMgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gZGVmZXIgdGhpc1xuICAgICAgICAvLyBmb3IgZWFjaCBudWxsIHZhbHVlLiBIb3dldmVyLCB3ZSBhbHNvIGRvbid0IHdhbnQgdG8gY2FsbCB1cGRhdGVTbG90XG4gICAgICAgIC8vIHdpdGggdGhlIHByZXZpb3VzIG9uZS5cbiAgICAgICAgcHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gbmV3RmliZXI7XG4gICAgICB9XG5cbiAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBuZXdGaWJlcjtcbiAgICAgIG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyO1xuICAgIH1cblxuICAgIGlmIChuZXdJZHggPT09IG5ld0NoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgLy8gV2UndmUgcmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBuZXcgY2hpbGRyZW4uIFdlIGNhbiBkZWxldGUgdGhlIHJlc3QuXG4gICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgb2xkRmliZXIpO1xuXG4gICAgICBpZiAoZ2V0SXNIeWRyYXRpbmcoKSkge1xuICAgICAgICB2YXIgbnVtYmVyT2ZGb3JrcyA9IG5ld0lkeDtcbiAgICAgICAgcHVzaFRyZWVGb3JrKHJldHVybkZpYmVyLCBudW1iZXJPZkZvcmtzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfVxuXG4gICAgaWYgKG9sZEZpYmVyID09PSBudWxsKSB7XG4gICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGFueSBtb3JlIGV4aXN0aW5nIGNoaWxkcmVuIHdlIGNhbiBjaG9vc2UgYSBmYXN0IHBhdGhcbiAgICAgIC8vIHNpbmNlIHRoZSByZXN0IHdpbGwgYWxsIGJlIGluc2VydGlvbnMuXG4gICAgICBmb3IgKDsgbmV3SWR4IDwgbmV3Q2hpbGRyZW4ubGVuZ3RoOyBuZXdJZHgrKykge1xuICAgICAgICB2YXIgX25ld0ZpYmVyID0gY3JlYXRlQ2hpbGQocmV0dXJuRmliZXIsIG5ld0NoaWxkcmVuW25ld0lkeF0sIGxhbmVzKTtcblxuICAgICAgICBpZiAoX25ld0ZpYmVyID09PSBudWxsKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0UGxhY2VkSW5kZXggPSBwbGFjZUNoaWxkKF9uZXdGaWJlciwgbGFzdFBsYWNlZEluZGV4LCBuZXdJZHgpO1xuXG4gICAgICAgIGlmIChwcmV2aW91c05ld0ZpYmVyID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gVE9ETzogTW92ZSBvdXQgb2YgdGhlIGxvb3AuIFRoaXMgb25seSBoYXBwZW5zIGZvciB0aGUgZmlyc3QgcnVuLlxuICAgICAgICAgIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBfbmV3RmliZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gX25ld0ZpYmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldmlvdXNOZXdGaWJlciA9IF9uZXdGaWJlcjtcbiAgICAgIH1cblxuICAgICAgaWYgKGdldElzSHlkcmF0aW5nKCkpIHtcbiAgICAgICAgdmFyIF9udW1iZXJPZkZvcmtzID0gbmV3SWR4O1xuICAgICAgICBwdXNoVHJlZUZvcmsocmV0dXJuRmliZXIsIF9udW1iZXJPZkZvcmtzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfSAvLyBBZGQgYWxsIGNoaWxkcmVuIHRvIGEga2V5IG1hcCBmb3IgcXVpY2sgbG9va3Vwcy5cblxuXG4gICAgdmFyIGV4aXN0aW5nQ2hpbGRyZW4gPSBtYXBSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgb2xkRmliZXIpOyAvLyBLZWVwIHNjYW5uaW5nIGFuZCB1c2UgdGhlIG1hcCB0byByZXN0b3JlIGRlbGV0ZWQgaXRlbXMgYXMgbW92ZXMuXG5cbiAgICBmb3IgKDsgbmV3SWR4IDwgbmV3Q2hpbGRyZW4ubGVuZ3RoOyBuZXdJZHgrKykge1xuICAgICAgdmFyIF9uZXdGaWJlcjIgPSB1cGRhdGVGcm9tTWFwKGV4aXN0aW5nQ2hpbGRyZW4sIHJldHVybkZpYmVyLCBuZXdJZHgsIG5ld0NoaWxkcmVuW25ld0lkeF0sIGxhbmVzKTtcblxuICAgICAgaWYgKF9uZXdGaWJlcjIgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgICAgICBpZiAoX25ld0ZpYmVyMi5hbHRlcm5hdGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIFRoZSBuZXcgZmliZXIgaXMgYSB3b3JrIGluIHByb2dyZXNzLCBidXQgaWYgdGhlcmUgZXhpc3RzIGFcbiAgICAgICAgICAgIC8vIGN1cnJlbnQsIHRoYXQgbWVhbnMgdGhhdCB3ZSByZXVzZWQgdGhlIGZpYmVyLiBXZSBuZWVkIHRvIGRlbGV0ZVxuICAgICAgICAgICAgLy8gaXQgZnJvbSB0aGUgY2hpbGQgbGlzdCBzbyB0aGF0IHdlIGRvbid0IGFkZCBpdCB0byB0aGUgZGVsZXRpb25cbiAgICAgICAgICAgIC8vIGxpc3QuXG4gICAgICAgICAgICBleGlzdGluZ0NoaWxkcmVuLmRlbGV0ZShfbmV3RmliZXIyLmtleSA9PT0gbnVsbCA/IG5ld0lkeCA6IF9uZXdGaWJlcjIua2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0UGxhY2VkSW5kZXggPSBwbGFjZUNoaWxkKF9uZXdGaWJlcjIsIGxhc3RQbGFjZWRJbmRleCwgbmV3SWR4KTtcblxuICAgICAgICBpZiAocHJldmlvdXNOZXdGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBfbmV3RmliZXIyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IF9uZXdGaWJlcjI7XG4gICAgICAgIH1cblxuICAgICAgICBwcmV2aW91c05ld0ZpYmVyID0gX25ld0ZpYmVyMjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgLy8gQW55IGV4aXN0aW5nIGNoaWxkcmVuIHRoYXQgd2VyZW4ndCBjb25zdW1lZCBhYm92ZSB3ZXJlIGRlbGV0ZWQuIFdlIG5lZWRcbiAgICAgIC8vIHRvIGFkZCB0aGVtIHRvIHRoZSBkZWxldGlvbiBsaXN0LlxuICAgICAgZXhpc3RpbmdDaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICByZXR1cm4gZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChnZXRJc0h5ZHJhdGluZygpKSB7XG4gICAgICB2YXIgX251bWJlck9mRm9ya3MyID0gbmV3SWR4O1xuICAgICAgcHVzaFRyZWVGb3JrKHJldHVybkZpYmVyLCBfbnVtYmVyT2ZGb3JrczIpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRpbmdGaXJzdENoaWxkO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRyZW5JdGVyYXRvcihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0NoaWxkcmVuSXRlcmFibGUsIGxhbmVzKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgc2FtZSBpbXBsZW1lbnRhdGlvbiBhcyByZWNvbmNpbGVDaGlsZHJlbkFycmF5KCksXG4gICAgLy8gYnV0IHVzaW5nIHRoZSBpdGVyYXRvciBpbnN0ZWFkLlxuICAgIHZhciBpdGVyYXRvckZuID0gZ2V0SXRlcmF0b3JGbihuZXdDaGlsZHJlbkl0ZXJhYmxlKTtcblxuICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbiBvYmplY3QgaXMgbm90IGFuIGl0ZXJhYmxlLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gJyArICdSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuXG4gICAge1xuICAgICAgLy8gV2UgZG9uJ3Qgc3VwcG9ydCByZW5kZXJpbmcgR2VuZXJhdG9ycyBiZWNhdXNlIGl0J3MgYSBtdXRhdGlvbi5cbiAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzEyOTk1XG4gICAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyAkRmxvd0ZpeE1lIEZsb3cgZG9lc24ndCBrbm93IGFib3V0IHRvU3RyaW5nVGFnXG4gICAgICBuZXdDaGlsZHJlbkl0ZXJhYmxlW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdHZW5lcmF0b3InKSB7XG4gICAgICAgIGlmICghZGlkV2FybkFib3V0R2VuZXJhdG9ycykge1xuICAgICAgICAgIGVycm9yKCdVc2luZyBHZW5lcmF0b3JzIGFzIGNoaWxkcmVuIGlzIHVuc3VwcG9ydGVkIGFuZCB3aWxsIGxpa2VseSB5aWVsZCAnICsgJ3VuZXhwZWN0ZWQgcmVzdWx0cyBiZWNhdXNlIGVudW1lcmF0aW5nIGEgZ2VuZXJhdG9yIG11dGF0ZXMgaXQuICcgKyAnWW91IG1heSBjb252ZXJ0IGl0IHRvIGFuIGFycmF5IHdpdGggYEFycmF5LmZyb20oKWAgb3IgdGhlICcgKyAnYFsuLi5zcHJlYWRdYCBvcGVyYXRvciBiZWZvcmUgcmVuZGVyaW5nLiBLZWVwIGluIG1pbmQgJyArICd5b3UgbWlnaHQgbmVlZCB0byBwb2x5ZmlsbCB0aGVzZSBmZWF0dXJlcyBmb3Igb2xkZXIgYnJvd3NlcnMuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkaWRXYXJuQWJvdXRHZW5lcmF0b3JzID0gdHJ1ZTtcbiAgICAgIH0gLy8gV2FybiBhYm91dCB1c2luZyBNYXBzIGFzIGNoaWxkcmVuXG5cblxuICAgICAgaWYgKG5ld0NoaWxkcmVuSXRlcmFibGUuZW50cmllcyA9PT0gaXRlcmF0b3JGbikge1xuICAgICAgICBpZiAoIWRpZFdhcm5BYm91dE1hcHMpIHtcbiAgICAgICAgICBlcnJvcignVXNpbmcgTWFwcyBhcyBjaGlsZHJlbiBpcyBub3Qgc3VwcG9ydGVkLiAnICsgJ1VzZSBhbiBhcnJheSBvZiBrZXllZCBSZWFjdEVsZW1lbnRzIGluc3RlYWQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkaWRXYXJuQWJvdXRNYXBzID0gdHJ1ZTtcbiAgICAgIH0gLy8gRmlyc3QsIHZhbGlkYXRlIGtleXMuXG4gICAgICAvLyBXZSdsbCBnZXQgYSBkaWZmZXJlbnQgaXRlcmF0b3IgbGF0ZXIgZm9yIHRoZSBtYWluIHBhc3MuXG5cblxuICAgICAgdmFyIF9uZXdDaGlsZHJlbiA9IGl0ZXJhdG9yRm4uY2FsbChuZXdDaGlsZHJlbkl0ZXJhYmxlKTtcblxuICAgICAgaWYgKF9uZXdDaGlsZHJlbikge1xuICAgICAgICB2YXIga25vd25LZXlzID0gbnVsbDtcblxuICAgICAgICB2YXIgX3N0ZXAgPSBfbmV3Q2hpbGRyZW4ubmV4dCgpO1xuXG4gICAgICAgIGZvciAoOyAhX3N0ZXAuZG9uZTsgX3N0ZXAgPSBfbmV3Q2hpbGRyZW4ubmV4dCgpKSB7XG4gICAgICAgICAgdmFyIGNoaWxkID0gX3N0ZXAudmFsdWU7XG4gICAgICAgICAga25vd25LZXlzID0gd2Fybk9uSW52YWxpZEtleShjaGlsZCwga25vd25LZXlzLCByZXR1cm5GaWJlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbmV3Q2hpbGRyZW4gPSBpdGVyYXRvckZuLmNhbGwobmV3Q2hpbGRyZW5JdGVyYWJsZSk7XG5cbiAgICBpZiAobmV3Q2hpbGRyZW4gPT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbiBpdGVyYWJsZSBvYmplY3QgcHJvdmlkZWQgbm8gaXRlcmF0b3IuJyk7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBudWxsO1xuICAgIHZhciBwcmV2aW91c05ld0ZpYmVyID0gbnVsbDtcbiAgICB2YXIgb2xkRmliZXIgPSBjdXJyZW50Rmlyc3RDaGlsZDtcbiAgICB2YXIgbGFzdFBsYWNlZEluZGV4ID0gMDtcbiAgICB2YXIgbmV3SWR4ID0gMDtcbiAgICB2YXIgbmV4dE9sZEZpYmVyID0gbnVsbDtcbiAgICB2YXIgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKTtcblxuICAgIGZvciAoOyBvbGRGaWJlciAhPT0gbnVsbCAmJiAhc3RlcC5kb25lOyBuZXdJZHgrKywgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKSkge1xuICAgICAgaWYgKG9sZEZpYmVyLmluZGV4ID4gbmV3SWR4KSB7XG4gICAgICAgIG5leHRPbGRGaWJlciA9IG9sZEZpYmVyO1xuICAgICAgICBvbGRGaWJlciA9IG51bGw7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0T2xkRmliZXIgPSBvbGRGaWJlci5zaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICB2YXIgbmV3RmliZXIgPSB1cGRhdGVTbG90KHJldHVybkZpYmVyLCBvbGRGaWJlciwgc3RlcC52YWx1ZSwgbGFuZXMpO1xuXG4gICAgICBpZiAobmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVE9ETzogVGhpcyBicmVha3Mgb24gZW1wdHkgc2xvdHMgbGlrZSBudWxsIGNoaWxkcmVuLiBUaGF0J3NcbiAgICAgICAgLy8gdW5mb3J0dW5hdGUgYmVjYXVzZSBpdCB0cmlnZ2VycyB0aGUgc2xvdyBwYXRoIGFsbCB0aGUgdGltZS4gV2UgbmVlZFxuICAgICAgICAvLyBhIGJldHRlciB3YXkgdG8gY29tbXVuaWNhdGUgd2hldGhlciB0aGlzIHdhcyBhIG1pc3Mgb3IgbnVsbCxcbiAgICAgICAgLy8gYm9vbGVhbiwgdW5kZWZpbmVkLCBldGMuXG4gICAgICAgIGlmIChvbGRGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAgIG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAgIGlmIChvbGRGaWJlciAmJiBuZXdGaWJlci5hbHRlcm5hdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBXZSBtYXRjaGVkIHRoZSBzbG90LCBidXQgd2UgZGlkbid0IHJldXNlIHRoZSBleGlzdGluZyBmaWJlciwgc28gd2VcbiAgICAgICAgICAvLyBuZWVkIHRvIGRlbGV0ZSB0aGUgZXhpc3RpbmcgY2hpbGQuXG4gICAgICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsYXN0UGxhY2VkSW5kZXggPSBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0lkeCk7XG5cbiAgICAgIGlmIChwcmV2aW91c05ld0ZpYmVyID09PSBudWxsKSB7XG4gICAgICAgIC8vIFRPRE86IE1vdmUgb3V0IG9mIHRoZSBsb29wLiBUaGlzIG9ubHkgaGFwcGVucyBmb3IgdGhlIGZpcnN0IHJ1bi5cbiAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG5ld0ZpYmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVE9ETzogRGVmZXIgc2libGluZ3MgaWYgd2UncmUgbm90IGF0IHRoZSByaWdodCBpbmRleCBmb3IgdGhpcyBzbG90LlxuICAgICAgICAvLyBJLmUuIGlmIHdlIGhhZCBudWxsIHZhbHVlcyBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byBkZWZlciB0aGlzXG4gICAgICAgIC8vIGZvciBlYWNoIG51bGwgdmFsdWUuIEhvd2V2ZXIsIHdlIGFsc28gZG9uJ3Qgd2FudCB0byBjYWxsIHVwZGF0ZVNsb3RcbiAgICAgICAgLy8gd2l0aCB0aGUgcHJldmlvdXMgb25lLlxuICAgICAgICBwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBuZXdGaWJlcjtcbiAgICAgIH1cblxuICAgICAgcHJldmlvdXNOZXdGaWJlciA9IG5ld0ZpYmVyO1xuICAgICAgb2xkRmliZXIgPSBuZXh0T2xkRmliZXI7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgLy8gV2UndmUgcmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBuZXcgY2hpbGRyZW4uIFdlIGNhbiBkZWxldGUgdGhlIHJlc3QuXG4gICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgb2xkRmliZXIpO1xuXG4gICAgICBpZiAoZ2V0SXNIeWRyYXRpbmcoKSkge1xuICAgICAgICB2YXIgbnVtYmVyT2ZGb3JrcyA9IG5ld0lkeDtcbiAgICAgICAgcHVzaFRyZWVGb3JrKHJldHVybkZpYmVyLCBudW1iZXJPZkZvcmtzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfVxuXG4gICAgaWYgKG9sZEZpYmVyID09PSBudWxsKSB7XG4gICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGFueSBtb3JlIGV4aXN0aW5nIGNoaWxkcmVuIHdlIGNhbiBjaG9vc2UgYSBmYXN0IHBhdGhcbiAgICAgIC8vIHNpbmNlIHRoZSByZXN0IHdpbGwgYWxsIGJlIGluc2VydGlvbnMuXG4gICAgICBmb3IgKDsgIXN0ZXAuZG9uZTsgbmV3SWR4KyssIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCkpIHtcbiAgICAgICAgdmFyIF9uZXdGaWJlcjMgPSBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgc3RlcC52YWx1ZSwgbGFuZXMpO1xuXG4gICAgICAgIGlmIChfbmV3RmliZXIzID09PSBudWxsKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBsYXN0UGxhY2VkSW5kZXggPSBwbGFjZUNoaWxkKF9uZXdGaWJlcjMsIGxhc3RQbGFjZWRJbmRleCwgbmV3SWR4KTtcblxuICAgICAgICBpZiAocHJldmlvdXNOZXdGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIFRPRE86IE1vdmUgb3V0IG9mIHRoZSBsb29wLiBUaGlzIG9ubHkgaGFwcGVucyBmb3IgdGhlIGZpcnN0IHJ1bi5cbiAgICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkID0gX25ld0ZpYmVyMztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBfbmV3RmliZXIzO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldmlvdXNOZXdGaWJlciA9IF9uZXdGaWJlcjM7XG4gICAgICB9XG5cbiAgICAgIGlmIChnZXRJc0h5ZHJhdGluZygpKSB7XG4gICAgICAgIHZhciBfbnVtYmVyT2ZGb3JrczMgPSBuZXdJZHg7XG4gICAgICAgIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgX251bWJlck9mRm9ya3MzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfSAvLyBBZGQgYWxsIGNoaWxkcmVuIHRvIGEga2V5IG1hcCBmb3IgcXVpY2sgbG9va3Vwcy5cblxuXG4gICAgdmFyIGV4aXN0aW5nQ2hpbGRyZW4gPSBtYXBSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgb2xkRmliZXIpOyAvLyBLZWVwIHNjYW5uaW5nIGFuZCB1c2UgdGhlIG1hcCB0byByZXN0b3JlIGRlbGV0ZWQgaXRlbXMgYXMgbW92ZXMuXG5cbiAgICBmb3IgKDsgIXN0ZXAuZG9uZTsgbmV3SWR4KyssIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCkpIHtcbiAgICAgIHZhciBfbmV3RmliZXI0ID0gdXBkYXRlRnJvbU1hcChleGlzdGluZ0NoaWxkcmVuLCByZXR1cm5GaWJlciwgbmV3SWR4LCBzdGVwLnZhbHVlLCBsYW5lcyk7XG5cbiAgICAgIGlmIChfbmV3RmliZXI0ICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAgICAgaWYgKF9uZXdGaWJlcjQuYWx0ZXJuYXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBUaGUgbmV3IGZpYmVyIGlzIGEgd29yayBpbiBwcm9ncmVzcywgYnV0IGlmIHRoZXJlIGV4aXN0cyBhXG4gICAgICAgICAgICAvLyBjdXJyZW50LCB0aGF0IG1lYW5zIHRoYXQgd2UgcmV1c2VkIHRoZSBmaWJlci4gV2UgbmVlZCB0byBkZWxldGVcbiAgICAgICAgICAgIC8vIGl0IGZyb20gdGhlIGNoaWxkIGxpc3Qgc28gdGhhdCB3ZSBkb24ndCBhZGQgaXQgdG8gdGhlIGRlbGV0aW9uXG4gICAgICAgICAgICAvLyBsaXN0LlxuICAgICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbi5kZWxldGUoX25ld0ZpYmVyNC5rZXkgPT09IG51bGwgPyBuZXdJZHggOiBfbmV3RmliZXI0LmtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGFzdFBsYWNlZEluZGV4ID0gcGxhY2VDaGlsZChfbmV3RmliZXI0LCBsYXN0UGxhY2VkSW5kZXgsIG5ld0lkeCk7XG5cbiAgICAgICAgaWYgKHByZXZpb3VzTmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkID0gX25ld0ZpYmVyNDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBfbmV3RmliZXI0O1xuICAgICAgICB9XG5cbiAgICAgICAgcHJldmlvdXNOZXdGaWJlciA9IF9uZXdGaWJlcjQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgIC8vIEFueSBleGlzdGluZyBjaGlsZHJlbiB0aGF0IHdlcmVuJ3QgY29uc3VtZWQgYWJvdmUgd2VyZSBkZWxldGVkLiBXZSBuZWVkXG4gICAgICAvLyB0byBhZGQgdGhlbSB0byB0aGUgZGVsZXRpb24gbGlzdC5cbiAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICAgICAgcmV0dXJuIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoZ2V0SXNIeWRyYXRpbmcoKSkge1xuICAgICAgdmFyIF9udW1iZXJPZkZvcmtzNCA9IG5ld0lkeDtcbiAgICAgIHB1c2hUcmVlRm9yayhyZXR1cm5GaWJlciwgX251bWJlck9mRm9ya3M0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29uY2lsZVNpbmdsZVRleHROb2RlKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgdGV4dENvbnRlbnQsIGxhbmVzKSB7XG4gICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIGNoZWNrIGZvciBrZXlzIG9uIHRleHQgbm9kZXMgc2luY2Ugd2UgZG9uJ3QgaGF2ZSBhXG4gICAgLy8gd2F5IHRvIGRlZmluZSB0aGVtLlxuICAgIGlmIChjdXJyZW50Rmlyc3RDaGlsZCAhPT0gbnVsbCAmJiBjdXJyZW50Rmlyc3RDaGlsZC50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICAvLyBXZSBhbHJlYWR5IGhhdmUgYW4gZXhpc3Rpbmcgbm9kZSBzbyBsZXQncyBqdXN0IHVwZGF0ZSBpdCBhbmQgZGVsZXRlXG4gICAgICAvLyB0aGUgcmVzdC5cbiAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZC5zaWJsaW5nKTtcbiAgICAgIHZhciBleGlzdGluZyA9IHVzZUZpYmVyKGN1cnJlbnRGaXJzdENoaWxkLCB0ZXh0Q29udGVudCk7XG4gICAgICBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBleGlzdGluZztcbiAgICB9IC8vIFRoZSBleGlzdGluZyBmaXJzdCBjaGlsZCBpcyBub3QgYSB0ZXh0IG5vZGUgc28gd2UgbmVlZCB0byBjcmVhdGUgb25lXG4gICAgLy8gYW5kIGRlbGV0ZSB0aGUgZXhpc3Rpbmcgb25lcy5cblxuXG4gICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgICB2YXIgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbVRleHQodGV4dENvbnRlbnQsIHJldHVybkZpYmVyLm1vZGUsIGxhbmVzKTtcbiAgICBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjcmVhdGVkO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVjb25jaWxlU2luZ2xlRWxlbWVudChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIGVsZW1lbnQsIGxhbmVzKSB7XG4gICAgdmFyIGtleSA9IGVsZW1lbnQua2V5O1xuICAgIHZhciBjaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkO1xuXG4gICAgd2hpbGUgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgICAvLyBUT0RPOiBJZiBrZXkgPT09IG51bGwgYW5kIGNoaWxkLmtleSA9PT0gbnVsbCwgdGhlbiB0aGlzIG9ubHkgYXBwbGllcyB0b1xuICAgICAgLy8gdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIGxpc3QuXG4gICAgICBpZiAoY2hpbGQua2V5ID09PSBrZXkpIHtcbiAgICAgICAgdmFyIGVsZW1lbnRUeXBlID0gZWxlbWVudC50eXBlO1xuXG4gICAgICAgIGlmIChlbGVtZW50VHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSkge1xuICAgICAgICAgIGlmIChjaGlsZC50YWcgPT09IEZyYWdtZW50KSB7XG4gICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY2hpbGQuc2libGluZyk7XG4gICAgICAgICAgICB2YXIgZXhpc3RpbmcgPSB1c2VGaWJlcihjaGlsZCwgZWxlbWVudC5wcm9wcy5jaGlsZHJlbik7XG4gICAgICAgICAgICBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBleGlzdGluZy5fZGVidWdTb3VyY2UgPSBlbGVtZW50Ll9zb3VyY2U7XG4gICAgICAgICAgICAgIGV4aXN0aW5nLl9kZWJ1Z093bmVyID0gZWxlbWVudC5fb3duZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBleGlzdGluZztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGNoaWxkLmVsZW1lbnRUeXBlID09PSBlbGVtZW50VHlwZSB8fCAoIC8vIEtlZXAgdGhpcyBjaGVjayBpbmxpbmUgc28gaXQgb25seSBydW5zIG9uIHRoZSBmYWxzZSBwYXRoOlxuICAgICAgICAgICBpc0NvbXBhdGlibGVGYW1pbHlGb3JIb3RSZWxvYWRpbmcoY2hpbGQsIGVsZW1lbnQpICkgfHwgLy8gTGF6eSB0eXBlcyBzaG91bGQgcmVjb25jaWxlIHRoZWlyIHJlc29sdmVkIHR5cGUuXG4gICAgICAgICAgLy8gV2UgbmVlZCB0byBkbyB0aGlzIGFmdGVyIHRoZSBIb3QgUmVsb2FkaW5nIGNoZWNrIGFib3ZlLFxuICAgICAgICAgIC8vIGJlY2F1c2UgaG90IHJlbG9hZGluZyBoYXMgZGlmZmVyZW50IHNlbWFudGljcyB0aGFuIHByb2QgYmVjYXVzZVxuICAgICAgICAgIC8vIGl0IGRvZXNuJ3QgcmVzdXNwZW5kLiBTbyB3ZSBjYW4ndCBsZXQgdGhlIGNhbGwgYmVsb3cgc3VzcGVuZC5cbiAgICAgICAgICB0eXBlb2YgZWxlbWVudFR5cGUgPT09ICdvYmplY3QnICYmIGVsZW1lbnRUeXBlICE9PSBudWxsICYmIGVsZW1lbnRUeXBlLiQkdHlwZW9mID09PSBSRUFDVF9MQVpZX1RZUEUgJiYgcmVzb2x2ZUxhenkoZWxlbWVudFR5cGUpID09PSBjaGlsZC50eXBlKSB7XG4gICAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY2hpbGQuc2libGluZyk7XG5cbiAgICAgICAgICAgIHZhciBfZXhpc3RpbmcgPSB1c2VGaWJlcihjaGlsZCwgZWxlbWVudC5wcm9wcyk7XG5cbiAgICAgICAgICAgIF9leGlzdGluZy5yZWYgPSBjb2VyY2VSZWYocmV0dXJuRmliZXIsIGNoaWxkLCBlbGVtZW50KTtcbiAgICAgICAgICAgIF9leGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBfZXhpc3RpbmcuX2RlYnVnU291cmNlID0gZWxlbWVudC5fc291cmNlO1xuICAgICAgICAgICAgICBfZXhpc3RpbmcuX2RlYnVnT3duZXIgPSBlbGVtZW50Ll9vd25lcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIF9leGlzdGluZztcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gRGlkbid0IG1hdGNoLlxuXG5cbiAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgY2hpbGQpO1xuICAgICAgfVxuXG4gICAgICBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSkge1xuICAgICAgdmFyIGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChlbGVtZW50LnByb3BzLmNoaWxkcmVuLCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcywgZWxlbWVudC5rZXkpO1xuICAgICAgY3JlYXRlZC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBjcmVhdGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2NyZWF0ZWQ0ID0gY3JlYXRlRmliZXJGcm9tRWxlbWVudChlbGVtZW50LCByZXR1cm5GaWJlci5tb2RlLCBsYW5lcyk7XG5cbiAgICAgIF9jcmVhdGVkNC5yZWYgPSBjb2VyY2VSZWYocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBlbGVtZW50KTtcbiAgICAgIF9jcmVhdGVkNC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBfY3JlYXRlZDQ7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVjb25jaWxlU2luZ2xlUG9ydGFsKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgcG9ydGFsLCBsYW5lcykge1xuICAgIHZhciBrZXkgPSBwb3J0YWwua2V5O1xuICAgIHZhciBjaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkO1xuXG4gICAgd2hpbGUgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgICAvLyBUT0RPOiBJZiBrZXkgPT09IG51bGwgYW5kIGNoaWxkLmtleSA9PT0gbnVsbCwgdGhlbiB0aGlzIG9ubHkgYXBwbGllcyB0b1xuICAgICAgLy8gdGhlIGZpcnN0IGl0ZW0gaW4gdGhlIGxpc3QuXG4gICAgICBpZiAoY2hpbGQua2V5ID09PSBrZXkpIHtcbiAgICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gSG9zdFBvcnRhbCAmJiBjaGlsZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyA9PT0gcG9ydGFsLmNvbnRhaW5lckluZm8gJiYgY2hpbGQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uID09PSBwb3J0YWwuaW1wbGVtZW50YXRpb24pIHtcbiAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY2hpbGQuc2libGluZyk7XG4gICAgICAgICAgdmFyIGV4aXN0aW5nID0gdXNlRmliZXIoY2hpbGQsIHBvcnRhbC5jaGlsZHJlbiB8fCBbXSk7XG4gICAgICAgICAgZXhpc3RpbmcucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICB9XG5cbiAgICAgIGNoaWxkID0gY2hpbGQuc2libGluZztcbiAgICB9XG5cbiAgICB2YXIgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbVBvcnRhbChwb3J0YWwsIHJldHVybkZpYmVyLm1vZGUsIGxhbmVzKTtcbiAgICBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgIHJldHVybiBjcmVhdGVkO1xuICB9IC8vIFRoaXMgQVBJIHdpbGwgdGFnIHRoZSBjaGlsZHJlbiB3aXRoIHRoZSBzaWRlLWVmZmVjdCBvZiB0aGUgcmVjb25jaWxpYXRpb25cbiAgLy8gaXRzZWxmLiBUaGV5IHdpbGwgYmUgYWRkZWQgdG8gdGhlIHNpZGUtZWZmZWN0IGxpc3QgYXMgd2UgcGFzcyB0aHJvdWdoIHRoZVxuICAvLyBjaGlsZHJlbiBhbmQgdGhlIHBhcmVudC5cblxuXG4gIGZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkRmliZXJzKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgbmV3Q2hpbGQsIGxhbmVzKSB7XG4gICAgLy8gVGhpcyBmdW5jdGlvbiBpcyBub3QgcmVjdXJzaXZlLlxuICAgIC8vIElmIHRoZSB0b3AgbGV2ZWwgaXRlbSBpcyBhbiBhcnJheSwgd2UgdHJlYXQgaXQgYXMgYSBzZXQgb2YgY2hpbGRyZW4sXG4gICAgLy8gbm90IGFzIGEgZnJhZ21lbnQuIE5lc3RlZCBhcnJheXMgb24gdGhlIG90aGVyIGhhbmQgd2lsbCBiZSB0cmVhdGVkIGFzXG4gICAgLy8gZnJhZ21lbnQgbm9kZXMuIFJlY3Vyc2lvbiBoYXBwZW5zIGF0IHRoZSBub3JtYWwgZmxvdy5cbiAgICAvLyBIYW5kbGUgdG9wIGxldmVsIHVua2V5ZWQgZnJhZ21lbnRzIGFzIGlmIHRoZXkgd2VyZSBhcnJheXMuXG4gICAgLy8gVGhpcyBsZWFkcyB0byBhbiBhbWJpZ3VpdHkgYmV0d2VlbiA8PntbLi4uXX08Lz4gYW5kIDw+Li4uPC8+LlxuICAgIC8vIFdlIHRyZWF0IHRoZSBhbWJpZ3VvdXMgY2FzZXMgYWJvdmUgdGhlIHNhbWUuXG4gICAgdmFyIGlzVW5rZXllZFRvcExldmVsRnJhZ21lbnQgPSB0eXBlb2YgbmV3Q2hpbGQgPT09ICdvYmplY3QnICYmIG5ld0NoaWxkICE9PSBudWxsICYmIG5ld0NoaWxkLnR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgJiYgbmV3Q2hpbGQua2V5ID09PSBudWxsO1xuXG4gICAgaWYgKGlzVW5rZXllZFRvcExldmVsRnJhZ21lbnQpIHtcbiAgICAgIG5ld0NoaWxkID0gbmV3Q2hpbGQucHJvcHMuY2hpbGRyZW47XG4gICAgfSAvLyBIYW5kbGUgb2JqZWN0IHR5cGVzXG5cblxuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdvYmplY3QnICYmIG5ld0NoaWxkICE9PSBudWxsKSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIHJldHVybiBwbGFjZVNpbmdsZUNoaWxkKHJlY29uY2lsZVNpbmdsZUVsZW1lbnQocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCwgbGFuZXMpKTtcblxuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIHJldHVybiBwbGFjZVNpbmdsZUNoaWxkKHJlY29uY2lsZVNpbmdsZVBvcnRhbChyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQsIG5ld0NoaWxkLCBsYW5lcykpO1xuXG4gICAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICAgIHZhciBwYXlsb2FkID0gbmV3Q2hpbGQuX3BheWxvYWQ7XG4gICAgICAgICAgdmFyIGluaXQgPSBuZXdDaGlsZC5faW5pdDsgLy8gVE9ETzogVGhpcyBmdW5jdGlvbiBpcyBzdXBwb3NlZCB0byBiZSBub24tcmVjdXJzaXZlLlxuXG4gICAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkRmliZXJzKHJldHVybkZpYmVyLCBjdXJyZW50Rmlyc3RDaGlsZCwgaW5pdChwYXlsb2FkKSwgbGFuZXMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNBcnJheShuZXdDaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkcmVuQXJyYXkocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCwgbGFuZXMpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpIHtcbiAgICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkcmVuSXRlcmF0b3IocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBuZXdDaGlsZCwgbGFuZXMpO1xuICAgICAgfVxuXG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnc3RyaW5nJyAmJiBuZXdDaGlsZCAhPT0gJycgfHwgdHlwZW9mIG5ld0NoaWxkID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHBsYWNlU2luZ2xlQ2hpbGQocmVjb25jaWxlU2luZ2xlVGV4dE5vZGUocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCAnJyArIG5ld0NoaWxkLCBsYW5lcykpO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgd2Fybk9uRnVuY3Rpb25UeXBlKHJldHVybkZpYmVyKTtcbiAgICAgIH1cbiAgICB9IC8vIFJlbWFpbmluZyBjYXNlcyBhcmUgYWxsIHRyZWF0ZWQgYXMgZW1wdHkuXG5cblxuICAgIHJldHVybiBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICB9XG5cbiAgcmV0dXJuIHJlY29uY2lsZUNoaWxkRmliZXJzO1xufVxuXG52YXIgcmVjb25jaWxlQ2hpbGRGaWJlcnMgPSBDaGlsZFJlY29uY2lsZXIodHJ1ZSk7XG52YXIgbW91bnRDaGlsZEZpYmVycyA9IENoaWxkUmVjb25jaWxlcihmYWxzZSk7XG5mdW5jdGlvbiBjbG9uZUNoaWxkRmliZXJzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7XG4gIGlmIChjdXJyZW50ICE9PSBudWxsICYmIHdvcmtJblByb2dyZXNzLmNoaWxkICE9PSBjdXJyZW50LmNoaWxkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZXN1bWluZyB3b3JrIG5vdCB5ZXQgaW1wbGVtZW50ZWQuJyk7XG4gIH1cblxuICBpZiAod29ya0luUHJvZ3Jlc3MuY2hpbGQgPT09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgY3VycmVudENoaWxkID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIHZhciBuZXdDaGlsZCA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnRDaGlsZCwgY3VycmVudENoaWxkLnBlbmRpbmdQcm9wcyk7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID0gbmV3Q2hpbGQ7XG4gIG5ld0NoaWxkLnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuXG4gIHdoaWxlIChjdXJyZW50Q2hpbGQuc2libGluZyAhPT0gbnVsbCkge1xuICAgIGN1cnJlbnRDaGlsZCA9IGN1cnJlbnRDaGlsZC5zaWJsaW5nO1xuICAgIG5ld0NoaWxkID0gbmV3Q2hpbGQuc2libGluZyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnRDaGlsZCwgY3VycmVudENoaWxkLnBlbmRpbmdQcm9wcyk7XG4gICAgbmV3Q2hpbGQucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gIH1cblxuICBuZXdDaGlsZC5zaWJsaW5nID0gbnVsbDtcbn0gLy8gUmVzZXQgYSB3b3JrSW5Qcm9ncmVzcyBjaGlsZCBzZXQgdG8gcHJlcGFyZSBpdCBmb3IgYSBzZWNvbmQgcGFzcy5cblxuZnVuY3Rpb24gcmVzZXRDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgbGFuZXMpIHtcbiAgdmFyIGNoaWxkID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG5cbiAgd2hpbGUgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgcmVzZXRXb3JrSW5Qcm9ncmVzcyhjaGlsZCwgbGFuZXMpO1xuICAgIGNoaWxkID0gY2hpbGQuc2libGluZztcbiAgfVxufVxuXG52YXIgdmFsdWVDdXJzb3IgPSBjcmVhdGVDdXJzb3IobnVsbCk7XG52YXIgcmVuZGVyZXJTaWdpbDtcblxue1xuICAvLyBVc2UgdGhpcyB0byBkZXRlY3QgbXVsdGlwbGUgcmVuZGVyZXJzIHVzaW5nIHRoZSBzYW1lIGNvbnRleHRcbiAgcmVuZGVyZXJTaWdpbCA9IHt9O1xufVxuXG52YXIgY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsO1xudmFyIGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9IG51bGw7XG52YXIgbGFzdEZ1bGx5T2JzZXJ2ZWRDb250ZXh0ID0gbnVsbDtcbnZhciBpc0Rpc2FsbG93ZWRDb250ZXh0UmVhZEluREVWID0gZmFsc2U7XG5mdW5jdGlvbiByZXNldENvbnRleHREZXBlbmRlbmNpZXMoKSB7XG4gIC8vIFRoaXMgaXMgY2FsbGVkIHJpZ2h0IGJlZm9yZSBSZWFjdCB5aWVsZHMgZXhlY3V0aW9uLCB0byBlbnN1cmUgYHJlYWRDb250ZXh0YFxuICAvLyBjYW5ub3QgYmUgY2FsbGVkIG91dHNpZGUgdGhlIHJlbmRlciBwaGFzZS5cbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSBudWxsO1xuICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBudWxsO1xuICBsYXN0RnVsbHlPYnNlcnZlZENvbnRleHQgPSBudWxsO1xuXG4gIHtcbiAgICBpc0Rpc2FsbG93ZWRDb250ZXh0UmVhZEluREVWID0gZmFsc2U7XG4gIH1cbn1cbmZ1bmN0aW9uIGVudGVyRGlzYWxsb3dlZENvbnRleHRSZWFkSW5ERVYoKSB7XG4gIHtcbiAgICBpc0Rpc2FsbG93ZWRDb250ZXh0UmVhZEluREVWID0gdHJ1ZTtcbiAgfVxufVxuZnVuY3Rpb24gZXhpdERpc2FsbG93ZWRDb250ZXh0UmVhZEluREVWKCkge1xuICB7XG4gICAgaXNEaXNhbGxvd2VkQ29udGV4dFJlYWRJbkRFViA9IGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBwdXNoUHJvdmlkZXIocHJvdmlkZXJGaWJlciwgY29udGV4dCwgbmV4dFZhbHVlKSB7XG4gIHtcbiAgICBwdXNoKHZhbHVlQ3Vyc29yLCBjb250ZXh0Ll9jdXJyZW50VmFsdWUsIHByb3ZpZGVyRmliZXIpO1xuICAgIGNvbnRleHQuX2N1cnJlbnRWYWx1ZSA9IG5leHRWYWx1ZTtcblxuICAgIHtcbiAgICAgIGlmIChjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIgIT09IHVuZGVmaW5lZCAmJiBjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIgIT09IG51bGwgJiYgY29udGV4dC5fY3VycmVudFJlbmRlcmVyICE9PSByZW5kZXJlclNpZ2lsKSB7XG4gICAgICAgIGVycm9yKCdEZXRlY3RlZCBtdWx0aXBsZSByZW5kZXJlcnMgY29uY3VycmVudGx5IHJlbmRlcmluZyB0aGUgJyArICdzYW1lIGNvbnRleHQgcHJvdmlkZXIuIFRoaXMgaXMgY3VycmVudGx5IHVuc3VwcG9ydGVkLicpO1xuICAgICAgfVxuXG4gICAgICBjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIgPSByZW5kZXJlclNpZ2lsO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcG9wUHJvdmlkZXIoY29udGV4dCwgcHJvdmlkZXJGaWJlcikge1xuICB2YXIgY3VycmVudFZhbHVlID0gdmFsdWVDdXJzb3IuY3VycmVudDtcbiAgcG9wKHZhbHVlQ3Vyc29yLCBwcm92aWRlckZpYmVyKTtcblxuICB7XG4gICAge1xuICAgICAgY29udGV4dC5fY3VycmVudFZhbHVlID0gY3VycmVudFZhbHVlO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc2NoZWR1bGVDb250ZXh0V29ya09uUGFyZW50UGF0aChwYXJlbnQsIHJlbmRlckxhbmVzLCBwcm9wYWdhdGlvblJvb3QpIHtcbiAgLy8gVXBkYXRlIHRoZSBjaGlsZCBsYW5lcyBvZiBhbGwgdGhlIGFuY2VzdG9ycywgaW5jbHVkaW5nIHRoZSBhbHRlcm5hdGVzLlxuICB2YXIgbm9kZSA9IHBhcmVudDtcblxuICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgIHZhciBhbHRlcm5hdGUgPSBub2RlLmFsdGVybmF0ZTtcblxuICAgIGlmICghaXNTdWJzZXRPZkxhbmVzKG5vZGUuY2hpbGRMYW5lcywgcmVuZGVyTGFuZXMpKSB7XG4gICAgICBub2RlLmNoaWxkTGFuZXMgPSBtZXJnZUxhbmVzKG5vZGUuY2hpbGRMYW5lcywgcmVuZGVyTGFuZXMpO1xuXG4gICAgICBpZiAoYWx0ZXJuYXRlICE9PSBudWxsKSB7XG4gICAgICAgIGFsdGVybmF0ZS5jaGlsZExhbmVzID0gbWVyZ2VMYW5lcyhhbHRlcm5hdGUuY2hpbGRMYW5lcywgcmVuZGVyTGFuZXMpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYWx0ZXJuYXRlICE9PSBudWxsICYmICFpc1N1YnNldE9mTGFuZXMoYWx0ZXJuYXRlLmNoaWxkTGFuZXMsIHJlbmRlckxhbmVzKSkge1xuICAgICAgYWx0ZXJuYXRlLmNoaWxkTGFuZXMgPSBtZXJnZUxhbmVzKGFsdGVybmF0ZS5jaGlsZExhbmVzLCByZW5kZXJMYW5lcyk7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUgPT09IHByb3BhZ2F0aW9uUm9vdCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICB9XG5cbiAge1xuICAgIGlmIChub2RlICE9PSBwcm9wYWdhdGlvblJvb3QpIHtcbiAgICAgIGVycm9yKCdFeHBlY3RlZCB0byBmaW5kIHRoZSBwcm9wYWdhdGlvbiByb290IHdoZW4gc2NoZWR1bGluZyBjb250ZXh0IHdvcmsuICcgKyAnVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2Uod29ya0luUHJvZ3Jlc3MsIGNvbnRleHQsIHJlbmRlckxhbmVzKSB7XG4gIHtcbiAgICBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlX2VhZ2VyKHdvcmtJblByb2dyZXNzLCBjb250ZXh0LCByZW5kZXJMYW5lcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvcGFnYXRlQ29udGV4dENoYW5nZV9lYWdlcih3b3JrSW5Qcm9ncmVzcywgY29udGV4dCwgcmVuZGVyTGFuZXMpIHtcblxuICB2YXIgZmliZXIgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcblxuICBpZiAoZmliZXIgIT09IG51bGwpIHtcbiAgICAvLyBTZXQgdGhlIHJldHVybiBwb2ludGVyIG9mIHRoZSBjaGlsZCB0byB0aGUgd29yay1pbi1wcm9ncmVzcyBmaWJlci5cbiAgICBmaWJlci5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgfVxuXG4gIHdoaWxlIChmaWJlciAhPT0gbnVsbCkge1xuICAgIHZhciBuZXh0RmliZXIgPSB2b2lkIDA7IC8vIFZpc2l0IHRoaXMgZmliZXIuXG5cbiAgICB2YXIgbGlzdCA9IGZpYmVyLmRlcGVuZGVuY2llcztcblxuICAgIGlmIChsaXN0ICE9PSBudWxsKSB7XG4gICAgICBuZXh0RmliZXIgPSBmaWJlci5jaGlsZDtcbiAgICAgIHZhciBkZXBlbmRlbmN5ID0gbGlzdC5maXJzdENvbnRleHQ7XG5cbiAgICAgIHdoaWxlIChkZXBlbmRlbmN5ICE9PSBudWxsKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIHRoZSBjb250ZXh0IG1hdGNoZXMuXG4gICAgICAgIGlmIChkZXBlbmRlbmN5LmNvbnRleHQgPT09IGNvbnRleHQpIHtcbiAgICAgICAgICAvLyBNYXRjaCEgU2NoZWR1bGUgYW4gdXBkYXRlIG9uIHRoaXMgZmliZXIuXG4gICAgICAgICAgaWYgKGZpYmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQpIHtcbiAgICAgICAgICAgIC8vIFNjaGVkdWxlIGEgZm9yY2UgdXBkYXRlIG9uIHRoZSB3b3JrLWluLXByb2dyZXNzLlxuICAgICAgICAgICAgdmFyIGxhbmUgPSBwaWNrQXJiaXRyYXJ5TGFuZShyZW5kZXJMYW5lcyk7XG4gICAgICAgICAgICB2YXIgdXBkYXRlID0gY3JlYXRlVXBkYXRlKE5vVGltZXN0YW1wLCBsYW5lKTtcbiAgICAgICAgICAgIHVwZGF0ZS50YWcgPSBGb3JjZVVwZGF0ZTsgLy8gVE9ETzogQmVjYXVzZSB3ZSBkb24ndCBoYXZlIGEgd29yay1pbi1wcm9ncmVzcywgdGhpcyB3aWxsIGFkZCB0aGVcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0byB0aGUgY3VycmVudCBmaWJlciwgdG9vLCB3aGljaCBtZWFucyBpdCB3aWxsIHBlcnNpc3QgZXZlbiBpZlxuICAgICAgICAgICAgLy8gdGhpcyByZW5kZXIgaXMgdGhyb3duIGF3YXkuIFNpbmNlIGl0J3MgYSByYWNlIGNvbmRpdGlvbiwgbm90IHN1cmUgaXQnc1xuICAgICAgICAgICAgLy8gd29ydGggZml4aW5nLlxuICAgICAgICAgICAgLy8gSW5saW5lZCBgZW5xdWV1ZVVwZGF0ZWAgdG8gcmVtb3ZlIGludGVybGVhdmVkIHVwZGF0ZSBjaGVja1xuXG4gICAgICAgICAgICB2YXIgdXBkYXRlUXVldWUgPSBmaWJlci51cGRhdGVRdWV1ZTtcblxuICAgICAgICAgICAgaWYgKHVwZGF0ZVF1ZXVlID09PSBudWxsKSA7IGVsc2Uge1xuICAgICAgICAgICAgICB2YXIgc2hhcmVkUXVldWUgPSB1cGRhdGVRdWV1ZS5zaGFyZWQ7XG4gICAgICAgICAgICAgIHZhciBwZW5kaW5nID0gc2hhcmVkUXVldWUucGVuZGluZztcblxuICAgICAgICAgICAgICBpZiAocGVuZGluZyA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IHVwZGF0ZS4gQ3JlYXRlIGEgY2lyY3VsYXIgbGlzdC5cbiAgICAgICAgICAgICAgICB1cGRhdGUubmV4dCA9IHVwZGF0ZTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1cGRhdGUubmV4dCA9IHBlbmRpbmcubmV4dDtcbiAgICAgICAgICAgICAgICBwZW5kaW5nLm5leHQgPSB1cGRhdGU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBzaGFyZWRRdWV1ZS5wZW5kaW5nID0gdXBkYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGZpYmVyLmxhbmVzID0gbWVyZ2VMYW5lcyhmaWJlci5sYW5lcywgcmVuZGVyTGFuZXMpO1xuICAgICAgICAgIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG5cbiAgICAgICAgICBpZiAoYWx0ZXJuYXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBhbHRlcm5hdGUubGFuZXMgPSBtZXJnZUxhbmVzKGFsdGVybmF0ZS5sYW5lcywgcmVuZGVyTGFuZXMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHNjaGVkdWxlQ29udGV4dFdvcmtPblBhcmVudFBhdGgoZmliZXIucmV0dXJuLCByZW5kZXJMYW5lcywgd29ya0luUHJvZ3Jlc3MpOyAvLyBNYXJrIHRoZSB1cGRhdGVkIGxhbmVzIG9uIHRoZSBsaXN0LCB0b28uXG5cbiAgICAgICAgICBsaXN0LmxhbmVzID0gbWVyZ2VMYW5lcyhsaXN0LmxhbmVzLCByZW5kZXJMYW5lcyk7IC8vIFNpbmNlIHdlIGFscmVhZHkgZm91bmQgYSBtYXRjaCwgd2UgY2FuIHN0b3AgdHJhdmVyc2luZyB0aGVcbiAgICAgICAgICAvLyBkZXBlbmRlbmN5IGxpc3QuXG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGRlcGVuZGVuY3kgPSBkZXBlbmRlbmN5Lm5leHQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWJlci50YWcgPT09IENvbnRleHRQcm92aWRlcikge1xuICAgICAgLy8gRG9uJ3Qgc2NhbiBkZWVwZXIgaWYgdGhpcyBpcyBhIG1hdGNoaW5nIHByb3ZpZGVyXG4gICAgICBuZXh0RmliZXIgPSBmaWJlci50eXBlID09PSB3b3JrSW5Qcm9ncmVzcy50eXBlID8gbnVsbCA6IGZpYmVyLmNoaWxkO1xuICAgIH0gZWxzZSBpZiAoZmliZXIudGFnID09PSBEZWh5ZHJhdGVkRnJhZ21lbnQpIHtcbiAgICAgIC8vIElmIGEgZGVoeWRyYXRlZCBzdXNwZW5zZSBib3VuZGFyeSBpcyBpbiB0aGlzIHN1YnRyZWUsIHdlIGRvbid0IGtub3dcbiAgICAgIC8vIGlmIGl0IHdpbGwgaGF2ZSBhbnkgY29udGV4dCBjb25zdW1lcnMgaW4gaXQuIFRoZSBiZXN0IHdlIGNhbiBkbyBpc1xuICAgICAgLy8gbWFyayBpdCBhcyBoYXZpbmcgdXBkYXRlcy5cbiAgICAgIHZhciBwYXJlbnRTdXNwZW5zZSA9IGZpYmVyLnJldHVybjtcblxuICAgICAgaWYgKHBhcmVudFN1c3BlbnNlID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignV2UganVzdCBjYW1lIGZyb20gYSBwYXJlbnQgc28gd2UgbXVzdCBoYXZlIGhhZCBhIHBhcmVudC4gVGhpcyBpcyBhIGJ1ZyBpbiBSZWFjdC4nKTtcbiAgICAgIH1cblxuICAgICAgcGFyZW50U3VzcGVuc2UubGFuZXMgPSBtZXJnZUxhbmVzKHBhcmVudFN1c3BlbnNlLmxhbmVzLCByZW5kZXJMYW5lcyk7XG4gICAgICB2YXIgX2FsdGVybmF0ZSA9IHBhcmVudFN1c3BlbnNlLmFsdGVybmF0ZTtcblxuICAgICAgaWYgKF9hbHRlcm5hdGUgIT09IG51bGwpIHtcbiAgICAgICAgX2FsdGVybmF0ZS5sYW5lcyA9IG1lcmdlTGFuZXMoX2FsdGVybmF0ZS5sYW5lcywgcmVuZGVyTGFuZXMpO1xuICAgICAgfSAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgcGFzc2luZyB0aGlzIGZpYmVyIGFzIHRoZSBwYXJlbnRcbiAgICAgIC8vIGJlY2F1c2Ugd2Ugd2FudCB0byBzY2hlZHVsZSB0aGlzIGZpYmVyIGFzIGhhdmluZyB3b3JrXG4gICAgICAvLyBvbiBpdHMgY2hpbGRyZW4uIFdlJ2xsIHVzZSB0aGUgY2hpbGRMYW5lcyBvblxuICAgICAgLy8gdGhpcyBmaWJlciB0byBpbmRpY2F0ZSB0aGF0IGEgY29udGV4dCBoYXMgY2hhbmdlZC5cblxuXG4gICAgICBzY2hlZHVsZUNvbnRleHRXb3JrT25QYXJlbnRQYXRoKHBhcmVudFN1c3BlbnNlLCByZW5kZXJMYW5lcywgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgbmV4dEZpYmVyID0gZmliZXIuc2libGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVHJhdmVyc2UgZG93bi5cbiAgICAgIG5leHRGaWJlciA9IGZpYmVyLmNoaWxkO1xuICAgIH1cblxuICAgIGlmIChuZXh0RmliZXIgIT09IG51bGwpIHtcbiAgICAgIC8vIFNldCB0aGUgcmV0dXJuIHBvaW50ZXIgb2YgdGhlIGNoaWxkIHRvIHRoZSB3b3JrLWluLXByb2dyZXNzIGZpYmVyLlxuICAgICAgbmV4dEZpYmVyLnJldHVybiA9IGZpYmVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBObyBjaGlsZC4gVHJhdmVyc2UgdG8gbmV4dCBzaWJsaW5nLlxuICAgICAgbmV4dEZpYmVyID0gZmliZXI7XG5cbiAgICAgIHdoaWxlIChuZXh0RmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKG5leHRGaWJlciA9PT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAvLyBXZSdyZSBiYWNrIHRvIHRoZSByb290IG9mIHRoaXMgc3VidHJlZS4gRXhpdC5cbiAgICAgICAgICBuZXh0RmliZXIgPSBudWxsO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNpYmxpbmcgPSBuZXh0RmliZXIuc2libGluZztcblxuICAgICAgICBpZiAoc2libGluZyAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIFNldCB0aGUgcmV0dXJuIHBvaW50ZXIgb2YgdGhlIHNpYmxpbmcgdG8gdGhlIHdvcmstaW4tcHJvZ3Jlc3MgZmliZXIuXG4gICAgICAgICAgc2libGluZy5yZXR1cm4gPSBuZXh0RmliZXIucmV0dXJuO1xuICAgICAgICAgIG5leHRGaWJlciA9IHNpYmxpbmc7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gLy8gTm8gbW9yZSBzaWJsaW5ncy4gVHJhdmVyc2UgdXAuXG5cblxuICAgICAgICBuZXh0RmliZXIgPSBuZXh0RmliZXIucmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZpYmVyID0gbmV4dEZpYmVyO1xuICB9XG59XG5mdW5jdGlvbiBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIgPSB3b3JrSW5Qcm9ncmVzcztcbiAgbGFzdENvbnRleHREZXBlbmRlbmN5ID0gbnVsbDtcbiAgbGFzdEZ1bGx5T2JzZXJ2ZWRDb250ZXh0ID0gbnVsbDtcbiAgdmFyIGRlcGVuZGVuY2llcyA9IHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcztcblxuICBpZiAoZGVwZW5kZW5jaWVzICE9PSBudWxsKSB7XG4gICAge1xuICAgICAgdmFyIGZpcnN0Q29udGV4dCA9IGRlcGVuZGVuY2llcy5maXJzdENvbnRleHQ7XG5cbiAgICAgIGlmIChmaXJzdENvbnRleHQgIT09IG51bGwpIHtcbiAgICAgICAgaWYgKGluY2x1ZGVzU29tZUxhbmUoZGVwZW5kZW5jaWVzLmxhbmVzLCByZW5kZXJMYW5lcykpIHtcbiAgICAgICAgICAvLyBDb250ZXh0IGxpc3QgaGFzIGEgcGVuZGluZyB1cGRhdGUuIE1hcmsgdGhhdCB0aGlzIGZpYmVyIHBlcmZvcm1lZCB3b3JrLlxuICAgICAgICAgIG1hcmtXb3JrSW5Qcm9ncmVzc1JlY2VpdmVkVXBkYXRlKCk7XG4gICAgICAgIH0gLy8gUmVzZXQgdGhlIHdvcmstaW4tcHJvZ3Jlc3MgbGlzdFxuXG5cbiAgICAgICAgZGVwZW5kZW5jaWVzLmZpcnN0Q29udGV4dCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiByZWFkQ29udGV4dChjb250ZXh0KSB7XG4gIHtcbiAgICAvLyBUaGlzIHdhcm5pbmcgd291bGQgZmlyZSBpZiB5b3UgcmVhZCBjb250ZXh0IGluc2lkZSBhIEhvb2sgbGlrZSB1c2VNZW1vLlxuICAgIC8vIFVubGlrZSB0aGUgY2xhc3MgY2hlY2sgYmVsb3csIGl0J3Mgbm90IGVuZm9yY2VkIGluIHByb2R1Y3Rpb24gZm9yIHBlcmYuXG4gICAgaWYgKGlzRGlzYWxsb3dlZENvbnRleHRSZWFkSW5ERVYpIHtcbiAgICAgIGVycm9yKCdDb250ZXh0IGNhbiBvbmx5IGJlIHJlYWQgd2hpbGUgUmVhY3QgaXMgcmVuZGVyaW5nLiAnICsgJ0luIGNsYXNzZXMsIHlvdSBjYW4gcmVhZCBpdCBpbiB0aGUgcmVuZGVyIG1ldGhvZCBvciBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuICcgKyAnSW4gZnVuY3Rpb24gY29tcG9uZW50cywgeW91IGNhbiByZWFkIGl0IGRpcmVjdGx5IGluIHRoZSBmdW5jdGlvbiBib2R5LCBidXQgbm90ICcgKyAnaW5zaWRlIEhvb2tzIGxpa2UgdXNlUmVkdWNlcigpIG9yIHVzZU1lbW8oKS4nKTtcbiAgICB9XG4gIH1cblxuICB2YXIgdmFsdWUgPSAgY29udGV4dC5fY3VycmVudFZhbHVlIDtcblxuICBpZiAobGFzdEZ1bGx5T2JzZXJ2ZWRDb250ZXh0ID09PSBjb250ZXh0KSA7IGVsc2Uge1xuICAgIHZhciBjb250ZXh0SXRlbSA9IHtcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICBtZW1vaXplZFZhbHVlOiB2YWx1ZSxcbiAgICAgIG5leHQ6IG51bGxcbiAgICB9O1xuXG4gICAgaWYgKGxhc3RDb250ZXh0RGVwZW5kZW5jeSA9PT0gbnVsbCkge1xuICAgICAgaWYgKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyID09PSBudWxsKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ29udGV4dCBjYW4gb25seSBiZSByZWFkIHdoaWxlIFJlYWN0IGlzIHJlbmRlcmluZy4gJyArICdJbiBjbGFzc2VzLCB5b3UgY2FuIHJlYWQgaXQgaW4gdGhlIHJlbmRlciBtZXRob2Qgb3IgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLiAnICsgJ0luIGZ1bmN0aW9uIGNvbXBvbmVudHMsIHlvdSBjYW4gcmVhZCBpdCBkaXJlY3RseSBpbiB0aGUgZnVuY3Rpb24gYm9keSwgYnV0IG5vdCAnICsgJ2luc2lkZSBIb29rcyBsaWtlIHVzZVJlZHVjZXIoKSBvciB1c2VNZW1vKCkuJyk7XG4gICAgICB9IC8vIFRoaXMgaXMgdGhlIGZpcnN0IGRlcGVuZGVuY3kgZm9yIHRoaXMgY29tcG9uZW50LiBDcmVhdGUgYSBuZXcgbGlzdC5cblxuXG4gICAgICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBjb250ZXh0SXRlbTtcbiAgICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyLmRlcGVuZGVuY2llcyA9IHtcbiAgICAgICAgbGFuZXM6IE5vTGFuZXMsXG4gICAgICAgIGZpcnN0Q29udGV4dDogY29udGV4dEl0ZW1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFwcGVuZCBhIG5ldyBjb250ZXh0IGl0ZW0uXG4gICAgICBsYXN0Q29udGV4dERlcGVuZGVuY3kgPSBsYXN0Q29udGV4dERlcGVuZGVuY3kubmV4dCA9IGNvbnRleHRJdGVtO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLy8gcmVuZGVyLiBXaGVuIHRoaXMgcmVuZGVyIGV4aXRzLCBlaXRoZXIgYmVjYXVzZSBpdCBmaW5pc2hlcyBvciBiZWNhdXNlIGl0IGlzXG4vLyBpbnRlcnJ1cHRlZCwgdGhlIGludGVybGVhdmVkIHVwZGF0ZXMgd2lsbCBiZSB0cmFuc2ZlcnJlZCBvbnRvIHRoZSBtYWluIHBhcnRcbi8vIG9mIHRoZSBxdWV1ZS5cblxudmFyIGNvbmN1cnJlbnRRdWV1ZXMgPSBudWxsO1xuZnVuY3Rpb24gcHVzaENvbmN1cnJlbnRVcGRhdGVRdWV1ZShxdWV1ZSkge1xuICBpZiAoY29uY3VycmVudFF1ZXVlcyA9PT0gbnVsbCkge1xuICAgIGNvbmN1cnJlbnRRdWV1ZXMgPSBbcXVldWVdO1xuICB9IGVsc2Uge1xuICAgIGNvbmN1cnJlbnRRdWV1ZXMucHVzaChxdWV1ZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKSB7XG4gIC8vIFRyYW5zZmVyIHRoZSBpbnRlcmxlYXZlZCB1cGRhdGVzIG9udG8gdGhlIG1haW4gcXVldWUuIEVhY2ggcXVldWUgaGFzIGFcbiAgLy8gYHBlbmRpbmdgIGZpZWxkIGFuZCBhbiBgaW50ZXJsZWF2ZWRgIGZpZWxkLiBXaGVuIHRoZXkgYXJlIG5vdCBudWxsLCB0aGV5XG4gIC8vIHBvaW50IHRvIHRoZSBsYXN0IG5vZGUgaW4gYSBjaXJjdWxhciBsaW5rZWQgbGlzdC4gV2UgbmVlZCB0byBhcHBlbmQgdGhlXG4gIC8vIGludGVybGVhdmVkIGxpc3QgdG8gdGhlIGVuZCBvZiB0aGUgcGVuZGluZyBsaXN0IGJ5IGpvaW5pbmcgdGhlbSBpbnRvIGFcbiAgLy8gc2luZ2xlLCBjaXJjdWxhciBsaXN0LlxuICBpZiAoY29uY3VycmVudFF1ZXVlcyAhPT0gbnVsbCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29uY3VycmVudFF1ZXVlcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHF1ZXVlID0gY29uY3VycmVudFF1ZXVlc1tpXTtcbiAgICAgIHZhciBsYXN0SW50ZXJsZWF2ZWRVcGRhdGUgPSBxdWV1ZS5pbnRlcmxlYXZlZDtcblxuICAgICAgaWYgKGxhc3RJbnRlcmxlYXZlZFVwZGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICBxdWV1ZS5pbnRlcmxlYXZlZCA9IG51bGw7XG4gICAgICAgIHZhciBmaXJzdEludGVybGVhdmVkVXBkYXRlID0gbGFzdEludGVybGVhdmVkVXBkYXRlLm5leHQ7XG4gICAgICAgIHZhciBsYXN0UGVuZGluZ1VwZGF0ZSA9IHF1ZXVlLnBlbmRpbmc7XG5cbiAgICAgICAgaWYgKGxhc3RQZW5kaW5nVXBkYXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIGZpcnN0UGVuZGluZ1VwZGF0ZSA9IGxhc3RQZW5kaW5nVXBkYXRlLm5leHQ7XG4gICAgICAgICAgbGFzdFBlbmRpbmdVcGRhdGUubmV4dCA9IGZpcnN0SW50ZXJsZWF2ZWRVcGRhdGU7XG4gICAgICAgICAgbGFzdEludGVybGVhdmVkVXBkYXRlLm5leHQgPSBmaXJzdFBlbmRpbmdVcGRhdGU7XG4gICAgICAgIH1cblxuICAgICAgICBxdWV1ZS5wZW5kaW5nID0gbGFzdEludGVybGVhdmVkVXBkYXRlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbmN1cnJlbnRRdWV1ZXMgPSBudWxsO1xuICB9XG59XG5mdW5jdGlvbiBlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpIHtcbiAgdmFyIGludGVybGVhdmVkID0gcXVldWUuaW50ZXJsZWF2ZWQ7XG5cbiAgaWYgKGludGVybGVhdmVkID09PSBudWxsKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgdXBkYXRlLiBDcmVhdGUgYSBjaXJjdWxhciBsaXN0LlxuICAgIHVwZGF0ZS5uZXh0ID0gdXBkYXRlOyAvLyBBdCB0aGUgZW5kIG9mIHRoZSBjdXJyZW50IHJlbmRlciwgdGhpcyBxdWV1ZSdzIGludGVybGVhdmVkIHVwZGF0ZXMgd2lsbFxuICAgIC8vIGJlIHRyYW5zZmVycmVkIHRvIHRoZSBwZW5kaW5nIHF1ZXVlLlxuXG4gICAgcHVzaENvbmN1cnJlbnRVcGRhdGVRdWV1ZShxdWV1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdXBkYXRlLm5leHQgPSBpbnRlcmxlYXZlZC5uZXh0O1xuICAgIGludGVybGVhdmVkLm5leHQgPSB1cGRhdGU7XG4gIH1cblxuICBxdWV1ZS5pbnRlcmxlYXZlZCA9IHVwZGF0ZTtcbiAgcmV0dXJuIG1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290KGZpYmVyLCBsYW5lKTtcbn1cbmZ1bmN0aW9uIGVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZUFuZEVhZ2VybHlCYWlsb3V0KGZpYmVyLCBxdWV1ZSwgdXBkYXRlLCBsYW5lKSB7XG4gIHZhciBpbnRlcmxlYXZlZCA9IHF1ZXVlLmludGVybGVhdmVkO1xuXG4gIGlmIChpbnRlcmxlYXZlZCA9PT0gbnVsbCkge1xuICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IHVwZGF0ZS4gQ3JlYXRlIGEgY2lyY3VsYXIgbGlzdC5cbiAgICB1cGRhdGUubmV4dCA9IHVwZGF0ZTsgLy8gQXQgdGhlIGVuZCBvZiB0aGUgY3VycmVudCByZW5kZXIsIHRoaXMgcXVldWUncyBpbnRlcmxlYXZlZCB1cGRhdGVzIHdpbGxcbiAgICAvLyBiZSB0cmFuc2ZlcnJlZCB0byB0aGUgcGVuZGluZyBxdWV1ZS5cblxuICAgIHB1c2hDb25jdXJyZW50VXBkYXRlUXVldWUocXVldWUpO1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZS5uZXh0ID0gaW50ZXJsZWF2ZWQubmV4dDtcbiAgICBpbnRlcmxlYXZlZC5uZXh0ID0gdXBkYXRlO1xuICB9XG5cbiAgcXVldWUuaW50ZXJsZWF2ZWQgPSB1cGRhdGU7XG59XG5mdW5jdGlvbiBlbnF1ZXVlQ29uY3VycmVudENsYXNzVXBkYXRlKGZpYmVyLCBxdWV1ZSwgdXBkYXRlLCBsYW5lKSB7XG4gIHZhciBpbnRlcmxlYXZlZCA9IHF1ZXVlLmludGVybGVhdmVkO1xuXG4gIGlmIChpbnRlcmxlYXZlZCA9PT0gbnVsbCkge1xuICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IHVwZGF0ZS4gQ3JlYXRlIGEgY2lyY3VsYXIgbGlzdC5cbiAgICB1cGRhdGUubmV4dCA9IHVwZGF0ZTsgLy8gQXQgdGhlIGVuZCBvZiB0aGUgY3VycmVudCByZW5kZXIsIHRoaXMgcXVldWUncyBpbnRlcmxlYXZlZCB1cGRhdGVzIHdpbGxcbiAgICAvLyBiZSB0cmFuc2ZlcnJlZCB0byB0aGUgcGVuZGluZyBxdWV1ZS5cblxuICAgIHB1c2hDb25jdXJyZW50VXBkYXRlUXVldWUocXVldWUpO1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZS5uZXh0ID0gaW50ZXJsZWF2ZWQubmV4dDtcbiAgICBpbnRlcmxlYXZlZC5uZXh0ID0gdXBkYXRlO1xuICB9XG5cbiAgcXVldWUuaW50ZXJsZWF2ZWQgPSB1cGRhdGU7XG4gIHJldHVybiBtYXJrVXBkYXRlTGFuZUZyb21GaWJlclRvUm9vdChmaWJlciwgbGFuZSk7XG59XG5mdW5jdGlvbiBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIGxhbmUpIHtcbiAgcmV0dXJuIG1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290KGZpYmVyLCBsYW5lKTtcbn0gLy8gQ2FsbGluZyB0aGlzIGZ1bmN0aW9uIG91dHNpZGUgdGhpcyBtb2R1bGUgc2hvdWxkIG9ubHkgYmUgZG9uZSBmb3IgYmFja3dhcmRzXG4vLyBjb21wYXRpYmlsaXR5IGFuZCBzaG91bGQgYWx3YXlzIGJlIGFjY29tcGFuaWVkIGJ5IGEgd2FybmluZy5cblxudmFyIHVuc2FmZV9tYXJrVXBkYXRlTGFuZUZyb21GaWJlclRvUm9vdCA9IG1hcmtVcGRhdGVMYW5lRnJvbUZpYmVyVG9Sb290O1xuXG5mdW5jdGlvbiBtYXJrVXBkYXRlTGFuZUZyb21GaWJlclRvUm9vdChzb3VyY2VGaWJlciwgbGFuZSkge1xuICAvLyBVcGRhdGUgdGhlIHNvdXJjZSBmaWJlcidzIGxhbmVzXG4gIHNvdXJjZUZpYmVyLmxhbmVzID0gbWVyZ2VMYW5lcyhzb3VyY2VGaWJlci5sYW5lcywgbGFuZSk7XG4gIHZhciBhbHRlcm5hdGUgPSBzb3VyY2VGaWJlci5hbHRlcm5hdGU7XG5cbiAgaWYgKGFsdGVybmF0ZSAhPT0gbnVsbCkge1xuICAgIGFsdGVybmF0ZS5sYW5lcyA9IG1lcmdlTGFuZXMoYWx0ZXJuYXRlLmxhbmVzLCBsYW5lKTtcbiAgfVxuXG4gIHtcbiAgICBpZiAoYWx0ZXJuYXRlID09PSBudWxsICYmIChzb3VyY2VGaWJlci5mbGFncyAmIChQbGFjZW1lbnQgfCBIeWRyYXRpbmcpKSAhPT0gTm9GbGFncykge1xuICAgICAgd2FybkFib3V0VXBkYXRlT25Ob3RZZXRNb3VudGVkRmliZXJJbkRFVihzb3VyY2VGaWJlcik7XG4gICAgfVxuICB9IC8vIFdhbGsgdGhlIHBhcmVudCBwYXRoIHRvIHRoZSByb290IGFuZCB1cGRhdGUgdGhlIGNoaWxkIGxhbmVzLlxuXG5cbiAgdmFyIG5vZGUgPSBzb3VyY2VGaWJlcjtcbiAgdmFyIHBhcmVudCA9IHNvdXJjZUZpYmVyLnJldHVybjtcblxuICB3aGlsZSAocGFyZW50ICE9PSBudWxsKSB7XG4gICAgcGFyZW50LmNoaWxkTGFuZXMgPSBtZXJnZUxhbmVzKHBhcmVudC5jaGlsZExhbmVzLCBsYW5lKTtcbiAgICBhbHRlcm5hdGUgPSBwYXJlbnQuYWx0ZXJuYXRlO1xuXG4gICAgaWYgKGFsdGVybmF0ZSAhPT0gbnVsbCkge1xuICAgICAgYWx0ZXJuYXRlLmNoaWxkTGFuZXMgPSBtZXJnZUxhbmVzKGFsdGVybmF0ZS5jaGlsZExhbmVzLCBsYW5lKTtcbiAgICB9IGVsc2Uge1xuICAgICAge1xuICAgICAgICBpZiAoKHBhcmVudC5mbGFncyAmIChQbGFjZW1lbnQgfCBIeWRyYXRpbmcpKSAhPT0gTm9GbGFncykge1xuICAgICAgICAgIHdhcm5BYm91dFVwZGF0ZU9uTm90WWV0TW91bnRlZEZpYmVySW5ERVYoc291cmNlRmliZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgbm9kZSA9IHBhcmVudDtcbiAgICBwYXJlbnQgPSBwYXJlbnQucmV0dXJuO1xuICB9XG5cbiAgaWYgKG5vZGUudGFnID09PSBIb3N0Um9vdCkge1xuICAgIHZhciByb290ID0gbm9kZS5zdGF0ZU5vZGU7XG4gICAgcmV0dXJuIHJvb3Q7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cblxudmFyIFVwZGF0ZVN0YXRlID0gMDtcbnZhciBSZXBsYWNlU3RhdGUgPSAxO1xudmFyIEZvcmNlVXBkYXRlID0gMjtcbnZhciBDYXB0dXJlVXBkYXRlID0gMzsgLy8gR2xvYmFsIHN0YXRlIHRoYXQgaXMgcmVzZXQgYXQgdGhlIGJlZ2lubmluZyBvZiBjYWxsaW5nIGBwcm9jZXNzVXBkYXRlUXVldWVgLlxuLy8gSXQgc2hvdWxkIG9ubHkgYmUgcmVhZCByaWdodCBhZnRlciBjYWxsaW5nIGBwcm9jZXNzVXBkYXRlUXVldWVgLCB2aWFcbi8vIGBjaGVja0hhc0ZvcmNlVXBkYXRlQWZ0ZXJQcm9jZXNzaW5nYC5cblxudmFyIGhhc0ZvcmNlVXBkYXRlID0gZmFsc2U7XG52YXIgZGlkV2FyblVwZGF0ZUluc2lkZVVwZGF0ZTtcbnZhciBjdXJyZW50bHlQcm9jZXNzaW5nUXVldWU7XG5cbntcbiAgZGlkV2FyblVwZGF0ZUluc2lkZVVwZGF0ZSA9IGZhbHNlO1xuICBjdXJyZW50bHlQcm9jZXNzaW5nUXVldWUgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBpbml0aWFsaXplVXBkYXRlUXVldWUoZmliZXIpIHtcbiAgdmFyIHF1ZXVlID0ge1xuICAgIGJhc2VTdGF0ZTogZmliZXIubWVtb2l6ZWRTdGF0ZSxcbiAgICBmaXJzdEJhc2VVcGRhdGU6IG51bGwsXG4gICAgbGFzdEJhc2VVcGRhdGU6IG51bGwsXG4gICAgc2hhcmVkOiB7XG4gICAgICBwZW5kaW5nOiBudWxsLFxuICAgICAgaW50ZXJsZWF2ZWQ6IG51bGwsXG4gICAgICBsYW5lczogTm9MYW5lc1xuICAgIH0sXG4gICAgZWZmZWN0czogbnVsbFxuICB9O1xuICBmaWJlci51cGRhdGVRdWV1ZSA9IHF1ZXVlO1xufVxuZnVuY3Rpb24gY2xvbmVVcGRhdGVRdWV1ZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAvLyBDbG9uZSB0aGUgdXBkYXRlIHF1ZXVlIGZyb20gY3VycmVudC4gVW5sZXNzIGl0J3MgYWxyZWFkeSBhIGNsb25lLlxuICB2YXIgcXVldWUgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZTtcbiAgdmFyIGN1cnJlbnRRdWV1ZSA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG5cbiAgaWYgKHF1ZXVlID09PSBjdXJyZW50UXVldWUpIHtcbiAgICB2YXIgY2xvbmUgPSB7XG4gICAgICBiYXNlU3RhdGU6IGN1cnJlbnRRdWV1ZS5iYXNlU3RhdGUsXG4gICAgICBmaXJzdEJhc2VVcGRhdGU6IGN1cnJlbnRRdWV1ZS5maXJzdEJhc2VVcGRhdGUsXG4gICAgICBsYXN0QmFzZVVwZGF0ZTogY3VycmVudFF1ZXVlLmxhc3RCYXNlVXBkYXRlLFxuICAgICAgc2hhcmVkOiBjdXJyZW50UXVldWUuc2hhcmVkLFxuICAgICAgZWZmZWN0czogY3VycmVudFF1ZXVlLmVmZmVjdHNcbiAgICB9O1xuICAgIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY2xvbmU7XG4gIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZVVwZGF0ZShldmVudFRpbWUsIGxhbmUpIHtcbiAgdmFyIHVwZGF0ZSA9IHtcbiAgICBldmVudFRpbWU6IGV2ZW50VGltZSxcbiAgICBsYW5lOiBsYW5lLFxuICAgIHRhZzogVXBkYXRlU3RhdGUsXG4gICAgcGF5bG9hZDogbnVsbCxcbiAgICBjYWxsYmFjazogbnVsbCxcbiAgICBuZXh0OiBudWxsXG4gIH07XG4gIHJldHVybiB1cGRhdGU7XG59XG5mdW5jdGlvbiBlbnF1ZXVlVXBkYXRlKGZpYmVyLCB1cGRhdGUsIGxhbmUpIHtcbiAgdmFyIHVwZGF0ZVF1ZXVlID0gZmliZXIudXBkYXRlUXVldWU7XG5cbiAgaWYgKHVwZGF0ZVF1ZXVlID09PSBudWxsKSB7XG4gICAgLy8gT25seSBvY2N1cnMgaWYgdGhlIGZpYmVyIGhhcyBiZWVuIHVubW91bnRlZC5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBzaGFyZWRRdWV1ZSA9IHVwZGF0ZVF1ZXVlLnNoYXJlZDtcblxuICB7XG4gICAgaWYgKGN1cnJlbnRseVByb2Nlc3NpbmdRdWV1ZSA9PT0gc2hhcmVkUXVldWUgJiYgIWRpZFdhcm5VcGRhdGVJbnNpZGVVcGRhdGUpIHtcbiAgICAgIGVycm9yKCdBbiB1cGRhdGUgKHNldFN0YXRlLCByZXBsYWNlU3RhdGUsIG9yIGZvcmNlVXBkYXRlKSB3YXMgc2NoZWR1bGVkICcgKyAnZnJvbSBpbnNpZGUgYW4gdXBkYXRlIGZ1bmN0aW9uLiBVcGRhdGUgZnVuY3Rpb25zIHNob3VsZCBiZSBwdXJlLCAnICsgJ3dpdGggemVybyBzaWRlLWVmZmVjdHMuIENvbnNpZGVyIHVzaW5nIGNvbXBvbmVudERpZFVwZGF0ZSBvciBhICcgKyAnY2FsbGJhY2suJyk7XG5cbiAgICAgIGRpZFdhcm5VcGRhdGVJbnNpZGVVcGRhdGUgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChpc1Vuc2FmZUNsYXNzUmVuZGVyUGhhc2VVcGRhdGUoKSkge1xuICAgIC8vIFRoaXMgaXMgYW4gdW5zYWZlIHJlbmRlciBwaGFzZSB1cGRhdGUuIEFkZCBkaXJlY3RseSB0byB0aGUgdXBkYXRlXG4gICAgLy8gcXVldWUgc28gd2UgY2FuIHByb2Nlc3MgaXQgaW1tZWRpYXRlbHkgZHVyaW5nIHRoZSBjdXJyZW50IHJlbmRlci5cbiAgICB2YXIgcGVuZGluZyA9IHNoYXJlZFF1ZXVlLnBlbmRpbmc7XG5cbiAgICBpZiAocGVuZGluZyA9PT0gbnVsbCkge1xuICAgICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgdXBkYXRlLiBDcmVhdGUgYSBjaXJjdWxhciBsaXN0LlxuICAgICAgdXBkYXRlLm5leHQgPSB1cGRhdGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVwZGF0ZS5uZXh0ID0gcGVuZGluZy5uZXh0O1xuICAgICAgcGVuZGluZy5uZXh0ID0gdXBkYXRlO1xuICAgIH1cblxuICAgIHNoYXJlZFF1ZXVlLnBlbmRpbmcgPSB1cGRhdGU7IC8vIFVwZGF0ZSB0aGUgY2hpbGRMYW5lcyBldmVuIHRob3VnaCB3ZSdyZSBtb3N0IGxpa2VseSBhbHJlYWR5IHJlbmRlcmluZ1xuICAgIC8vIHRoaXMgZmliZXIuIFRoaXMgaXMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IGluIHRoZSBjYXNlIHdoZXJlIHlvdVxuICAgIC8vIHVwZGF0ZSBhIGRpZmZlcmVudCBjb21wb25lbnQgZHVyaW5nIHJlbmRlciBwaGFzZSB0aGFuIHRoZSBvbmUgdGhhdCBpc1xuICAgIC8vIGN1cnJlbnRseSByZW5kZXJpbmdzIChhIHBhdHRlcm4gdGhhdCBpcyBhY2NvbXBhbmllZCBieSBhIHdhcm5pbmcpLlxuXG4gICAgcmV0dXJuIHVuc2FmZV9tYXJrVXBkYXRlTGFuZUZyb21GaWJlclRvUm9vdChmaWJlciwgbGFuZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVucXVldWVDb25jdXJyZW50Q2xhc3NVcGRhdGUoZmliZXIsIHNoYXJlZFF1ZXVlLCB1cGRhdGUsIGxhbmUpO1xuICB9XG59XG5mdW5jdGlvbiBlbnRhbmdsZVRyYW5zaXRpb25zKHJvb3QsIGZpYmVyLCBsYW5lKSB7XG4gIHZhciB1cGRhdGVRdWV1ZSA9IGZpYmVyLnVwZGF0ZVF1ZXVlO1xuXG4gIGlmICh1cGRhdGVRdWV1ZSA9PT0gbnVsbCkge1xuICAgIC8vIE9ubHkgb2NjdXJzIGlmIHRoZSBmaWJlciBoYXMgYmVlbiB1bm1vdW50ZWQuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHNoYXJlZFF1ZXVlID0gdXBkYXRlUXVldWUuc2hhcmVkO1xuXG4gIGlmIChpc1RyYW5zaXRpb25MYW5lKGxhbmUpKSB7XG4gICAgdmFyIHF1ZXVlTGFuZXMgPSBzaGFyZWRRdWV1ZS5sYW5lczsgLy8gSWYgYW55IGVudGFuZ2xlZCBsYW5lcyBhcmUgbm8gbG9uZ2VyIHBlbmRpbmcgb24gdGhlIHJvb3QsIHRoZW4gdGhleSBtdXN0XG4gICAgLy8gaGF2ZSBmaW5pc2hlZC4gV2UgY2FuIHJlbW92ZSB0aGVtIGZyb20gdGhlIHNoYXJlZCBxdWV1ZSwgd2hpY2ggcmVwcmVzZW50c1xuICAgIC8vIGEgc3VwZXJzZXQgb2YgdGhlIGFjdHVhbGx5IHBlbmRpbmcgbGFuZXMuIEluIHNvbWUgY2FzZXMgd2UgbWF5IGVudGFuZ2xlXG4gICAgLy8gbW9yZSB0aGFuIHdlIG5lZWQgdG8sIGJ1dCB0aGF0J3MgT0suIEluIGZhY3QgaXQncyB3b3JzZSBpZiB3ZSAqZG9uJ3QqXG4gICAgLy8gZW50YW5nbGUgd2hlbiB3ZSBzaG91bGQuXG5cbiAgICBxdWV1ZUxhbmVzID0gaW50ZXJzZWN0TGFuZXMocXVldWVMYW5lcywgcm9vdC5wZW5kaW5nTGFuZXMpOyAvLyBFbnRhbmdsZSB0aGUgbmV3IHRyYW5zaXRpb24gbGFuZSB3aXRoIHRoZSBvdGhlciB0cmFuc2l0aW9uIGxhbmVzLlxuXG4gICAgdmFyIG5ld1F1ZXVlTGFuZXMgPSBtZXJnZUxhbmVzKHF1ZXVlTGFuZXMsIGxhbmUpO1xuICAgIHNoYXJlZFF1ZXVlLmxhbmVzID0gbmV3UXVldWVMYW5lczsgLy8gRXZlbiBpZiBxdWV1ZS5sYW5lcyBhbHJlYWR5IGluY2x1ZGUgbGFuZSwgd2UgZG9uJ3Qga25vdyBmb3IgY2VydGFpbiBpZlxuICAgIC8vIHRoZSBsYW5lIGZpbmlzaGVkIHNpbmNlIHRoZSBsYXN0IHRpbWUgd2UgZW50YW5nbGVkIGl0LiBTbyB3ZSBuZWVkIHRvXG4gICAgLy8gZW50YW5nbGUgaXQgYWdhaW4sIGp1c3QgdG8gYmUgc3VyZS5cblxuICAgIG1hcmtSb290RW50YW5nbGVkKHJvb3QsIG5ld1F1ZXVlTGFuZXMpO1xuICB9XG59XG5mdW5jdGlvbiBlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUod29ya0luUHJvZ3Jlc3MsIGNhcHR1cmVkVXBkYXRlKSB7XG4gIC8vIENhcHR1cmVkIHVwZGF0ZXMgYXJlIHVwZGF0ZXMgdGhhdCBhcmUgdGhyb3duIGJ5IGEgY2hpbGQgZHVyaW5nIHRoZSByZW5kZXJcbiAgLy8gcGhhc2UuIFRoZXkgc2hvdWxkIGJlIGRpc2NhcmRlZCBpZiB0aGUgcmVuZGVyIGlzIGFib3J0ZWQuIFRoZXJlZm9yZSxcbiAgLy8gd2Ugc2hvdWxkIG9ubHkgcHV0IHRoZW0gb24gdGhlIHdvcmstaW4tcHJvZ3Jlc3MgcXVldWUsIG5vdCB0aGUgY3VycmVudCBvbmUuXG4gIHZhciBxdWV1ZSA9IHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlOyAvLyBDaGVjayBpZiB0aGUgd29yay1pbi1wcm9ncmVzcyBxdWV1ZSBpcyBhIGNsb25lLlxuXG4gIHZhciBjdXJyZW50ID0gd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlO1xuXG4gIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgdmFyIGN1cnJlbnRRdWV1ZSA9IGN1cnJlbnQudXBkYXRlUXVldWU7XG5cbiAgICBpZiAocXVldWUgPT09IGN1cnJlbnRRdWV1ZSkge1xuICAgICAgLy8gVGhlIHdvcmstaW4tcHJvZ3Jlc3MgcXVldWUgaXMgdGhlIHNhbWUgYXMgY3VycmVudC4gVGhpcyBoYXBwZW5zIHdoZW5cbiAgICAgIC8vIHdlIGJhaWwgb3V0IG9uIGEgcGFyZW50IGZpYmVyIHRoYXQgdGhlbiBjYXB0dXJlcyBhbiBlcnJvciB0aHJvd24gYnlcbiAgICAgIC8vIGEgY2hpbGQuIFNpbmNlIHdlIHdhbnQgdG8gYXBwZW5kIHRoZSB1cGRhdGUgb25seSB0byB0aGUgd29yay1pblxuICAgICAgLy8gLXByb2dyZXNzIHF1ZXVlLCB3ZSBuZWVkIHRvIGNsb25lIHRoZSB1cGRhdGVzLiBXZSB1c3VhbGx5IGNsb25lIGR1cmluZ1xuICAgICAgLy8gcHJvY2Vzc1VwZGF0ZVF1ZXVlLCBidXQgdGhhdCBkaWRuJ3QgaGFwcGVuIGluIHRoaXMgY2FzZSBiZWNhdXNlIHdlXG4gICAgICAvLyBza2lwcGVkIG92ZXIgdGhlIHBhcmVudCB3aGVuIHdlIGJhaWxlZCBvdXQuXG4gICAgICB2YXIgbmV3Rmlyc3QgPSBudWxsO1xuICAgICAgdmFyIG5ld0xhc3QgPSBudWxsO1xuICAgICAgdmFyIGZpcnN0QmFzZVVwZGF0ZSA9IHF1ZXVlLmZpcnN0QmFzZVVwZGF0ZTtcblxuICAgICAgaWYgKGZpcnN0QmFzZVVwZGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAvLyBMb29wIHRocm91Z2ggdGhlIHVwZGF0ZXMgYW5kIGNsb25lIHRoZW0uXG4gICAgICAgIHZhciB1cGRhdGUgPSBmaXJzdEJhc2VVcGRhdGU7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgIHZhciBjbG9uZSA9IHtcbiAgICAgICAgICAgIGV2ZW50VGltZTogdXBkYXRlLmV2ZW50VGltZSxcbiAgICAgICAgICAgIGxhbmU6IHVwZGF0ZS5sYW5lLFxuICAgICAgICAgICAgdGFnOiB1cGRhdGUudGFnLFxuICAgICAgICAgICAgcGF5bG9hZDogdXBkYXRlLnBheWxvYWQsXG4gICAgICAgICAgICBjYWxsYmFjazogdXBkYXRlLmNhbGxiYWNrLFxuICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBpZiAobmV3TGFzdCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgbmV3Rmlyc3QgPSBuZXdMYXN0ID0gY2xvbmU7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0xhc3QubmV4dCA9IGNsb25lO1xuICAgICAgICAgICAgbmV3TGFzdCA9IGNsb25lO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHVwZGF0ZSA9IHVwZGF0ZS5uZXh0O1xuICAgICAgICB9IHdoaWxlICh1cGRhdGUgIT09IG51bGwpOyAvLyBBcHBlbmQgdGhlIGNhcHR1cmVkIHVwZGF0ZSB0aGUgZW5kIG9mIHRoZSBjbG9uZWQgbGlzdC5cblxuXG4gICAgICAgIGlmIChuZXdMYXN0ID09PSBudWxsKSB7XG4gICAgICAgICAgbmV3Rmlyc3QgPSBuZXdMYXN0ID0gY2FwdHVyZWRVcGRhdGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3TGFzdC5uZXh0ID0gY2FwdHVyZWRVcGRhdGU7XG4gICAgICAgICAgbmV3TGFzdCA9IGNhcHR1cmVkVXBkYXRlO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGVyZSBhcmUgbm8gYmFzZSB1cGRhdGVzLlxuICAgICAgICBuZXdGaXJzdCA9IG5ld0xhc3QgPSBjYXB0dXJlZFVwZGF0ZTtcbiAgICAgIH1cblxuICAgICAgcXVldWUgPSB7XG4gICAgICAgIGJhc2VTdGF0ZTogY3VycmVudFF1ZXVlLmJhc2VTdGF0ZSxcbiAgICAgICAgZmlyc3RCYXNlVXBkYXRlOiBuZXdGaXJzdCxcbiAgICAgICAgbGFzdEJhc2VVcGRhdGU6IG5ld0xhc3QsXG4gICAgICAgIHNoYXJlZDogY3VycmVudFF1ZXVlLnNoYXJlZCxcbiAgICAgICAgZWZmZWN0czogY3VycmVudFF1ZXVlLmVmZmVjdHNcbiAgICAgIH07XG4gICAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IHF1ZXVlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfSAvLyBBcHBlbmQgdGhlIHVwZGF0ZSB0byB0aGUgZW5kIG9mIHRoZSBsaXN0LlxuXG5cbiAgdmFyIGxhc3RCYXNlVXBkYXRlID0gcXVldWUubGFzdEJhc2VVcGRhdGU7XG5cbiAgaWYgKGxhc3RCYXNlVXBkYXRlID09PSBudWxsKSB7XG4gICAgcXVldWUuZmlyc3RCYXNlVXBkYXRlID0gY2FwdHVyZWRVcGRhdGU7XG4gIH0gZWxzZSB7XG4gICAgbGFzdEJhc2VVcGRhdGUubmV4dCA9IGNhcHR1cmVkVXBkYXRlO1xuICB9XG5cbiAgcXVldWUubGFzdEJhc2VVcGRhdGUgPSBjYXB0dXJlZFVwZGF0ZTtcbn1cblxuZnVuY3Rpb24gZ2V0U3RhdGVGcm9tVXBkYXRlKHdvcmtJblByb2dyZXNzLCBxdWV1ZSwgdXBkYXRlLCBwcmV2U3RhdGUsIG5leHRQcm9wcywgaW5zdGFuY2UpIHtcbiAgc3dpdGNoICh1cGRhdGUudGFnKSB7XG4gICAgY2FzZSBSZXBsYWNlU3RhdGU6XG4gICAgICB7XG4gICAgICAgIHZhciBwYXlsb2FkID0gdXBkYXRlLnBheWxvYWQ7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwYXlsb2FkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgLy8gVXBkYXRlciBmdW5jdGlvblxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGVudGVyRGlzYWxsb3dlZENvbnRleHRSZWFkSW5ERVYoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbmV4dFN0YXRlID0gcGF5bG9hZC5jYWxsKGluc3RhbmNlLCBwcmV2U3RhdGUsIG5leHRQcm9wcyk7XG5cbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAoIHdvcmtJblByb2dyZXNzLm1vZGUgJiBTdHJpY3RMZWdhY3lNb2RlKSB7XG4gICAgICAgICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKHRydWUpO1xuXG4gICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGF5bG9hZC5jYWxsKGluc3RhbmNlLCBwcmV2U3RhdGUsIG5leHRQcm9wcyk7XG4gICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGV4aXREaXNhbGxvd2VkQ29udGV4dFJlYWRJbkRFVigpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBuZXh0U3RhdGU7XG4gICAgICAgIH0gLy8gU3RhdGUgb2JqZWN0XG5cblxuICAgICAgICByZXR1cm4gcGF5bG9hZDtcbiAgICAgIH1cblxuICAgIGNhc2UgQ2FwdHVyZVVwZGF0ZTpcbiAgICAgIHtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSB3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIH5TaG91bGRDYXB0dXJlIHwgRGlkQ2FwdHVyZTtcbiAgICAgIH1cbiAgICAvLyBJbnRlbnRpb25hbCBmYWxsdGhyb3VnaFxuXG4gICAgY2FzZSBVcGRhdGVTdGF0ZTpcbiAgICAgIHtcbiAgICAgICAgdmFyIF9wYXlsb2FkID0gdXBkYXRlLnBheWxvYWQ7XG4gICAgICAgIHZhciBwYXJ0aWFsU3RhdGU7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBfcGF5bG9hZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIC8vIFVwZGF0ZXIgZnVuY3Rpb25cbiAgICAgICAgICB7XG4gICAgICAgICAgICBlbnRlckRpc2FsbG93ZWRDb250ZXh0UmVhZEluREVWKCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGFydGlhbFN0YXRlID0gX3BheWxvYWQuY2FsbChpbnN0YW5jZSwgcHJldlN0YXRlLCBuZXh0UHJvcHMpO1xuXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKCB3b3JrSW5Qcm9ncmVzcy5tb2RlICYgU3RyaWN0TGVnYWN5TW9kZSkge1xuICAgICAgICAgICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyh0cnVlKTtcblxuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIF9wYXlsb2FkLmNhbGwoaW5zdGFuY2UsIHByZXZTdGF0ZSwgbmV4dFByb3BzKTtcbiAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyhmYWxzZSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXhpdERpc2FsbG93ZWRDb250ZXh0UmVhZEluREVWKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFBhcnRpYWwgc3RhdGUgb2JqZWN0XG4gICAgICAgICAgcGFydGlhbFN0YXRlID0gX3BheWxvYWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFydGlhbFN0YXRlID09PSBudWxsIHx8IHBhcnRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gTnVsbCBhbmQgdW5kZWZpbmVkIGFyZSB0cmVhdGVkIGFzIG5vLW9wcy5cbiAgICAgICAgICByZXR1cm4gcHJldlN0YXRlO1xuICAgICAgICB9IC8vIE1lcmdlIHRoZSBwYXJ0aWFsIHN0YXRlIGFuZCB0aGUgcHJldmlvdXMgc3RhdGUuXG5cblxuICAgICAgICByZXR1cm4gYXNzaWduKHt9LCBwcmV2U3RhdGUsIHBhcnRpYWxTdGF0ZSk7XG4gICAgICB9XG5cbiAgICBjYXNlIEZvcmNlVXBkYXRlOlxuICAgICAge1xuICAgICAgICBoYXNGb3JjZVVwZGF0ZSA9IHRydWU7XG4gICAgICAgIHJldHVybiBwcmV2U3RhdGU7XG4gICAgICB9XG4gIH1cblxuICByZXR1cm4gcHJldlN0YXRlO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzVXBkYXRlUXVldWUod29ya0luUHJvZ3Jlc3MsIHByb3BzLCBpbnN0YW5jZSwgcmVuZGVyTGFuZXMpIHtcbiAgLy8gVGhpcyBpcyBhbHdheXMgbm9uLW51bGwgb24gYSBDbGFzc0NvbXBvbmVudCBvciBIb3N0Um9vdFxuICB2YXIgcXVldWUgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZTtcbiAgaGFzRm9yY2VVcGRhdGUgPSBmYWxzZTtcblxuICB7XG4gICAgY3VycmVudGx5UHJvY2Vzc2luZ1F1ZXVlID0gcXVldWUuc2hhcmVkO1xuICB9XG5cbiAgdmFyIGZpcnN0QmFzZVVwZGF0ZSA9IHF1ZXVlLmZpcnN0QmFzZVVwZGF0ZTtcbiAgdmFyIGxhc3RCYXNlVXBkYXRlID0gcXVldWUubGFzdEJhc2VVcGRhdGU7IC8vIENoZWNrIGlmIHRoZXJlIGFyZSBwZW5kaW5nIHVwZGF0ZXMuIElmIHNvLCB0cmFuc2ZlciB0aGVtIHRvIHRoZSBiYXNlIHF1ZXVlLlxuXG4gIHZhciBwZW5kaW5nUXVldWUgPSBxdWV1ZS5zaGFyZWQucGVuZGluZztcblxuICBpZiAocGVuZGluZ1F1ZXVlICE9PSBudWxsKSB7XG4gICAgcXVldWUuc2hhcmVkLnBlbmRpbmcgPSBudWxsOyAvLyBUaGUgcGVuZGluZyBxdWV1ZSBpcyBjaXJjdWxhci4gRGlzY29ubmVjdCB0aGUgcG9pbnRlciBiZXR3ZWVuIGZpcnN0XG4gICAgLy8gYW5kIGxhc3Qgc28gdGhhdCBpdCdzIG5vbi1jaXJjdWxhci5cblxuICAgIHZhciBsYXN0UGVuZGluZ1VwZGF0ZSA9IHBlbmRpbmdRdWV1ZTtcbiAgICB2YXIgZmlyc3RQZW5kaW5nVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGUubmV4dDtcbiAgICBsYXN0UGVuZGluZ1VwZGF0ZS5uZXh0ID0gbnVsbDsgLy8gQXBwZW5kIHBlbmRpbmcgdXBkYXRlcyB0byBiYXNlIHF1ZXVlXG5cbiAgICBpZiAobGFzdEJhc2VVcGRhdGUgPT09IG51bGwpIHtcbiAgICAgIGZpcnN0QmFzZVVwZGF0ZSA9IGZpcnN0UGVuZGluZ1VwZGF0ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdEJhc2VVcGRhdGUubmV4dCA9IGZpcnN0UGVuZGluZ1VwZGF0ZTtcbiAgICB9XG5cbiAgICBsYXN0QmFzZVVwZGF0ZSA9IGxhc3RQZW5kaW5nVXBkYXRlOyAvLyBJZiB0aGVyZSdzIGEgY3VycmVudCBxdWV1ZSwgYW5kIGl0J3MgZGlmZmVyZW50IGZyb20gdGhlIGJhc2UgcXVldWUsIHRoZW5cbiAgICAvLyB3ZSBuZWVkIHRvIHRyYW5zZmVyIHRoZSB1cGRhdGVzIHRvIHRoYXQgcXVldWUsIHRvby4gQmVjYXVzZSB0aGUgYmFzZVxuICAgIC8vIHF1ZXVlIGlzIGEgc2luZ2x5LWxpbmtlZCBsaXN0IHdpdGggbm8gY3ljbGVzLCB3ZSBjYW4gYXBwZW5kIHRvIGJvdGhcbiAgICAvLyBsaXN0cyBhbmQgdGFrZSBhZHZhbnRhZ2Ugb2Ygc3RydWN0dXJhbCBzaGFyaW5nLlxuICAgIC8vIFRPRE86IFBhc3MgYGN1cnJlbnRgIGFzIGFyZ3VtZW50XG5cbiAgICB2YXIgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZTtcblxuICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAvLyBUaGlzIGlzIGFsd2F5cyBub24tbnVsbCBvbiBhIENsYXNzQ29tcG9uZW50IG9yIEhvc3RSb290XG4gICAgICB2YXIgY3VycmVudFF1ZXVlID0gY3VycmVudC51cGRhdGVRdWV1ZTtcbiAgICAgIHZhciBjdXJyZW50TGFzdEJhc2VVcGRhdGUgPSBjdXJyZW50UXVldWUubGFzdEJhc2VVcGRhdGU7XG5cbiAgICAgIGlmIChjdXJyZW50TGFzdEJhc2VVcGRhdGUgIT09IGxhc3RCYXNlVXBkYXRlKSB7XG4gICAgICAgIGlmIChjdXJyZW50TGFzdEJhc2VVcGRhdGUgPT09IG51bGwpIHtcbiAgICAgICAgICBjdXJyZW50UXVldWUuZmlyc3RCYXNlVXBkYXRlID0gZmlyc3RQZW5kaW5nVXBkYXRlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGN1cnJlbnRMYXN0QmFzZVVwZGF0ZS5uZXh0ID0gZmlyc3RQZW5kaW5nVXBkYXRlO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFF1ZXVlLmxhc3RCYXNlVXBkYXRlID0gbGFzdFBlbmRpbmdVcGRhdGU7XG4gICAgICB9XG4gICAgfVxuICB9IC8vIFRoZXNlIHZhbHVlcyBtYXkgY2hhbmdlIGFzIHdlIHByb2Nlc3MgdGhlIHF1ZXVlLlxuXG5cbiAgaWYgKGZpcnN0QmFzZVVwZGF0ZSAhPT0gbnVsbCkge1xuICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCB0aGUgbGlzdCBvZiB1cGRhdGVzIHRvIGNvbXB1dGUgdGhlIHJlc3VsdC5cbiAgICB2YXIgbmV3U3RhdGUgPSBxdWV1ZS5iYXNlU3RhdGU7IC8vIFRPRE86IERvbid0IG5lZWQgdG8gYWNjdW11bGF0ZSB0aGlzLiBJbnN0ZWFkLCB3ZSBjYW4gcmVtb3ZlIHJlbmRlckxhbmVzXG4gICAgLy8gZnJvbSB0aGUgb3JpZ2luYWwgbGFuZXMuXG5cbiAgICB2YXIgbmV3TGFuZXMgPSBOb0xhbmVzO1xuICAgIHZhciBuZXdCYXNlU3RhdGUgPSBudWxsO1xuICAgIHZhciBuZXdGaXJzdEJhc2VVcGRhdGUgPSBudWxsO1xuICAgIHZhciBuZXdMYXN0QmFzZVVwZGF0ZSA9IG51bGw7XG4gICAgdmFyIHVwZGF0ZSA9IGZpcnN0QmFzZVVwZGF0ZTtcblxuICAgIGRvIHtcbiAgICAgIHZhciB1cGRhdGVMYW5lID0gdXBkYXRlLmxhbmU7XG4gICAgICB2YXIgdXBkYXRlRXZlbnRUaW1lID0gdXBkYXRlLmV2ZW50VGltZTtcblxuICAgICAgaWYgKCFpc1N1YnNldE9mTGFuZXMocmVuZGVyTGFuZXMsIHVwZGF0ZUxhbmUpKSB7XG4gICAgICAgIC8vIFByaW9yaXR5IGlzIGluc3VmZmljaWVudC4gU2tpcCB0aGlzIHVwZGF0ZS4gSWYgdGhpcyBpcyB0aGUgZmlyc3RcbiAgICAgICAgLy8gc2tpcHBlZCB1cGRhdGUsIHRoZSBwcmV2aW91cyB1cGRhdGUvc3RhdGUgaXMgdGhlIG5ldyBiYXNlXG4gICAgICAgIC8vIHVwZGF0ZS9zdGF0ZS5cbiAgICAgICAgdmFyIGNsb25lID0ge1xuICAgICAgICAgIGV2ZW50VGltZTogdXBkYXRlRXZlbnRUaW1lLFxuICAgICAgICAgIGxhbmU6IHVwZGF0ZUxhbmUsXG4gICAgICAgICAgdGFnOiB1cGRhdGUudGFnLFxuICAgICAgICAgIHBheWxvYWQ6IHVwZGF0ZS5wYXlsb2FkLFxuICAgICAgICAgIGNhbGxiYWNrOiB1cGRhdGUuY2FsbGJhY2ssXG4gICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChuZXdMYXN0QmFzZVVwZGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIG5ld0ZpcnN0QmFzZVVwZGF0ZSA9IG5ld0xhc3RCYXNlVXBkYXRlID0gY2xvbmU7XG4gICAgICAgICAgbmV3QmFzZVN0YXRlID0gbmV3U3RhdGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3TGFzdEJhc2VVcGRhdGUgPSBuZXdMYXN0QmFzZVVwZGF0ZS5uZXh0ID0gY2xvbmU7XG4gICAgICAgIH0gLy8gVXBkYXRlIHRoZSByZW1haW5pbmcgcHJpb3JpdHkgaW4gdGhlIHF1ZXVlLlxuXG5cbiAgICAgICAgbmV3TGFuZXMgPSBtZXJnZUxhbmVzKG5ld0xhbmVzLCB1cGRhdGVMYW5lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoaXMgdXBkYXRlIGRvZXMgaGF2ZSBzdWZmaWNpZW50IHByaW9yaXR5LlxuICAgICAgICBpZiAobmV3TGFzdEJhc2VVcGRhdGUgIT09IG51bGwpIHtcbiAgICAgICAgICB2YXIgX2Nsb25lID0ge1xuICAgICAgICAgICAgZXZlbnRUaW1lOiB1cGRhdGVFdmVudFRpbWUsXG4gICAgICAgICAgICAvLyBUaGlzIHVwZGF0ZSBpcyBnb2luZyB0byBiZSBjb21taXR0ZWQgc28gd2UgbmV2ZXIgd2FudCB1bmNvbW1pdFxuICAgICAgICAgICAgLy8gaXQuIFVzaW5nIE5vTGFuZSB3b3JrcyBiZWNhdXNlIDAgaXMgYSBzdWJzZXQgb2YgYWxsIGJpdG1hc2tzLCBzb1xuICAgICAgICAgICAgLy8gdGhpcyB3aWxsIG5ldmVyIGJlIHNraXBwZWQgYnkgdGhlIGNoZWNrIGFib3ZlLlxuICAgICAgICAgICAgbGFuZTogTm9MYW5lLFxuICAgICAgICAgICAgdGFnOiB1cGRhdGUudGFnLFxuICAgICAgICAgICAgcGF5bG9hZDogdXBkYXRlLnBheWxvYWQsXG4gICAgICAgICAgICBjYWxsYmFjazogdXBkYXRlLmNhbGxiYWNrLFxuICAgICAgICAgICAgbmV4dDogbnVsbFxuICAgICAgICAgIH07XG4gICAgICAgICAgbmV3TGFzdEJhc2VVcGRhdGUgPSBuZXdMYXN0QmFzZVVwZGF0ZS5uZXh0ID0gX2Nsb25lO1xuICAgICAgICB9IC8vIFByb2Nlc3MgdGhpcyB1cGRhdGUuXG5cblxuICAgICAgICBuZXdTdGF0ZSA9IGdldFN0YXRlRnJvbVVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgcXVldWUsIHVwZGF0ZSwgbmV3U3RhdGUsIHByb3BzLCBpbnN0YW5jZSk7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHVwZGF0ZS5jYWxsYmFjaztcblxuICAgICAgICBpZiAoY2FsbGJhY2sgIT09IG51bGwgJiYgLy8gSWYgdGhlIHVwZGF0ZSB3YXMgYWxyZWFkeSBjb21taXR0ZWQsIHdlIHNob3VsZCBub3QgcXVldWUgaXRzXG4gICAgICAgIC8vIGNhbGxiYWNrIGFnYWluLlxuICAgICAgICB1cGRhdGUubGFuZSAhPT0gTm9MYW5lKSB7XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gQ2FsbGJhY2s7XG4gICAgICAgICAgdmFyIGVmZmVjdHMgPSBxdWV1ZS5lZmZlY3RzO1xuXG4gICAgICAgICAgaWYgKGVmZmVjdHMgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHF1ZXVlLmVmZmVjdHMgPSBbdXBkYXRlXTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWZmZWN0cy5wdXNoKHVwZGF0ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZSA9IHVwZGF0ZS5uZXh0O1xuXG4gICAgICBpZiAodXBkYXRlID09PSBudWxsKSB7XG4gICAgICAgIHBlbmRpbmdRdWV1ZSA9IHF1ZXVlLnNoYXJlZC5wZW5kaW5nO1xuXG4gICAgICAgIGlmIChwZW5kaW5nUXVldWUgPT09IG51bGwpIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBBbiB1cGRhdGUgd2FzIHNjaGVkdWxlZCBmcm9tIGluc2lkZSBhIHJlZHVjZXIuIEFkZCB0aGUgbmV3XG4gICAgICAgICAgLy8gcGVuZGluZyB1cGRhdGVzIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3QgYW5kIGtlZXAgcHJvY2Vzc2luZy5cbiAgICAgICAgICB2YXIgX2xhc3RQZW5kaW5nVXBkYXRlID0gcGVuZGluZ1F1ZXVlOyAvLyBJbnRlbnRpb25hbGx5IHVuc291bmQuIFBlbmRpbmcgdXBkYXRlcyBmb3JtIGEgY2lyY3VsYXIgbGlzdCwgYnV0IHdlXG4gICAgICAgICAgLy8gdW5yYXZlbCB0aGVtIHdoZW4gdHJhbnNmZXJyaW5nIHRoZW0gdG8gdGhlIGJhc2UgcXVldWUuXG5cbiAgICAgICAgICB2YXIgX2ZpcnN0UGVuZGluZ1VwZGF0ZSA9IF9sYXN0UGVuZGluZ1VwZGF0ZS5uZXh0O1xuICAgICAgICAgIF9sYXN0UGVuZGluZ1VwZGF0ZS5uZXh0ID0gbnVsbDtcbiAgICAgICAgICB1cGRhdGUgPSBfZmlyc3RQZW5kaW5nVXBkYXRlO1xuICAgICAgICAgIHF1ZXVlLmxhc3RCYXNlVXBkYXRlID0gX2xhc3RQZW5kaW5nVXBkYXRlO1xuICAgICAgICAgIHF1ZXVlLnNoYXJlZC5wZW5kaW5nID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gd2hpbGUgKHRydWUpO1xuXG4gICAgaWYgKG5ld0xhc3RCYXNlVXBkYXRlID09PSBudWxsKSB7XG4gICAgICBuZXdCYXNlU3RhdGUgPSBuZXdTdGF0ZTtcbiAgICB9XG5cbiAgICBxdWV1ZS5iYXNlU3RhdGUgPSBuZXdCYXNlU3RhdGU7XG4gICAgcXVldWUuZmlyc3RCYXNlVXBkYXRlID0gbmV3Rmlyc3RCYXNlVXBkYXRlO1xuICAgIHF1ZXVlLmxhc3RCYXNlVXBkYXRlID0gbmV3TGFzdEJhc2VVcGRhdGU7IC8vIEludGVybGVhdmVkIHVwZGF0ZXMgYXJlIHN0b3JlZCBvbiBhIHNlcGFyYXRlIHF1ZXVlLiBXZSBhcmVuJ3QgZ29pbmcgdG9cbiAgICAvLyBwcm9jZXNzIHRoZW0gZHVyaW5nIHRoaXMgcmVuZGVyLCBidXQgd2UgZG8gbmVlZCB0byB0cmFjayB3aGljaCBsYW5lc1xuICAgIC8vIGFyZSByZW1haW5pbmcuXG5cbiAgICB2YXIgbGFzdEludGVybGVhdmVkID0gcXVldWUuc2hhcmVkLmludGVybGVhdmVkO1xuXG4gICAgaWYgKGxhc3RJbnRlcmxlYXZlZCAhPT0gbnVsbCkge1xuICAgICAgdmFyIGludGVybGVhdmVkID0gbGFzdEludGVybGVhdmVkO1xuXG4gICAgICBkbyB7XG4gICAgICAgIG5ld0xhbmVzID0gbWVyZ2VMYW5lcyhuZXdMYW5lcywgaW50ZXJsZWF2ZWQubGFuZSk7XG4gICAgICAgIGludGVybGVhdmVkID0gaW50ZXJsZWF2ZWQubmV4dDtcbiAgICAgIH0gd2hpbGUgKGludGVybGVhdmVkICE9PSBsYXN0SW50ZXJsZWF2ZWQpO1xuICAgIH0gZWxzZSBpZiAoZmlyc3RCYXNlVXBkYXRlID09PSBudWxsKSB7XG4gICAgICAvLyBgcXVldWUubGFuZXNgIGlzIHVzZWQgZm9yIGVudGFuZ2xpbmcgdHJhbnNpdGlvbnMuIFdlIGNhbiBzZXQgaXQgYmFjayB0b1xuICAgICAgLy8gemVybyBvbmNlIHRoZSBxdWV1ZSBpcyBlbXB0eS5cbiAgICAgIHF1ZXVlLnNoYXJlZC5sYW5lcyA9IE5vTGFuZXM7XG4gICAgfSAvLyBTZXQgdGhlIHJlbWFpbmluZyBleHBpcmF0aW9uIHRpbWUgdG8gYmUgd2hhdGV2ZXIgaXMgcmVtYWluaW5nIGluIHRoZSBxdWV1ZS5cbiAgICAvLyBUaGlzIHNob3VsZCBiZSBmaW5lIGJlY2F1c2UgdGhlIG9ubHkgdHdvIG90aGVyIHRoaW5ncyB0aGF0IGNvbnRyaWJ1dGUgdG9cbiAgICAvLyBleHBpcmF0aW9uIHRpbWUgYXJlIHByb3BzIGFuZCBjb250ZXh0LiBXZSdyZSBhbHJlYWR5IGluIHRoZSBtaWRkbGUgb2YgdGhlXG4gICAgLy8gYmVnaW4gcGhhc2UgYnkgdGhlIHRpbWUgd2Ugc3RhcnQgcHJvY2Vzc2luZyB0aGUgcXVldWUsIHNvIHdlJ3ZlIGFscmVhZHlcbiAgICAvLyBkZWFsdCB3aXRoIHRoZSBwcm9wcy4gQ29udGV4dCBpbiBjb21wb25lbnRzIHRoYXQgc3BlY2lmeVxuICAgIC8vIHNob3VsZENvbXBvbmVudFVwZGF0ZSBpcyB0cmlja3k7IGJ1dCB3ZSdsbCBoYXZlIHRvIGFjY291bnQgZm9yXG4gICAgLy8gdGhhdCByZWdhcmRsZXNzLlxuXG5cbiAgICBtYXJrU2tpcHBlZFVwZGF0ZUxhbmVzKG5ld0xhbmVzKTtcbiAgICB3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IG5ld0xhbmVzO1xuICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBuZXdTdGF0ZTtcbiAgfVxuXG4gIHtcbiAgICBjdXJyZW50bHlQcm9jZXNzaW5nUXVldWUgPSBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxDYWxsYmFjayhjYWxsYmFjaywgY29udGV4dCkge1xuICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGFyZ3VtZW50IHBhc3NlZCBhcyBjYWxsYmFjay4gRXhwZWN0ZWQgYSBmdW5jdGlvbi4gSW5zdGVhZCAnICsgKFwicmVjZWl2ZWQ6IFwiICsgY2FsbGJhY2spKTtcbiAgfVxuXG4gIGNhbGxiYWNrLmNhbGwoY29udGV4dCk7XG59XG5cbmZ1bmN0aW9uIHJlc2V0SGFzRm9yY2VVcGRhdGVCZWZvcmVQcm9jZXNzaW5nKCkge1xuICBoYXNGb3JjZVVwZGF0ZSA9IGZhbHNlO1xufVxuZnVuY3Rpb24gY2hlY2tIYXNGb3JjZVVwZGF0ZUFmdGVyUHJvY2Vzc2luZygpIHtcbiAgcmV0dXJuIGhhc0ZvcmNlVXBkYXRlO1xufVxuZnVuY3Rpb24gY29tbWl0VXBkYXRlUXVldWUoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFF1ZXVlLCBpbnN0YW5jZSkge1xuICAvLyBDb21taXQgdGhlIGVmZmVjdHNcbiAgdmFyIGVmZmVjdHMgPSBmaW5pc2hlZFF1ZXVlLmVmZmVjdHM7XG4gIGZpbmlzaGVkUXVldWUuZWZmZWN0cyA9IG51bGw7XG5cbiAgaWYgKGVmZmVjdHMgIT09IG51bGwpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVmZmVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBlZmZlY3QgPSBlZmZlY3RzW2ldO1xuICAgICAgdmFyIGNhbGxiYWNrID0gZWZmZWN0LmNhbGxiYWNrO1xuXG4gICAgICBpZiAoY2FsbGJhY2sgIT09IG51bGwpIHtcbiAgICAgICAgZWZmZWN0LmNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgY2FsbENhbGxiYWNrKGNhbGxiYWNrLCBpbnN0YW5jZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBOT19DT05URVhUID0ge307XG52YXIgY29udGV4dFN0YWNrQ3Vyc29yJDEgPSBjcmVhdGVDdXJzb3IoTk9fQ09OVEVYVCk7XG52YXIgY29udGV4dEZpYmVyU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IoTk9fQ09OVEVYVCk7XG52YXIgcm9vdEluc3RhbmNlU3RhY2tDdXJzb3IgPSBjcmVhdGVDdXJzb3IoTk9fQ09OVEVYVCk7XG5cbmZ1bmN0aW9uIHJlcXVpcmVkQ29udGV4dChjKSB7XG4gIGlmIChjID09PSBOT19DT05URVhUKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBob3N0IGNvbnRleHQgdG8gZXhpc3QuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyAnICsgJ2luIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgfVxuXG4gIHJldHVybiBjO1xufVxuXG5mdW5jdGlvbiBnZXRSb290SG9zdENvbnRhaW5lcigpIHtcbiAgdmFyIHJvb3RJbnN0YW5jZSA9IHJlcXVpcmVkQ29udGV4dChyb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50KTtcbiAgcmV0dXJuIHJvb3RJbnN0YW5jZTtcbn1cblxuZnVuY3Rpb24gcHVzaEhvc3RDb250YWluZXIoZmliZXIsIG5leHRSb290SW5zdGFuY2UpIHtcbiAgLy8gUHVzaCBjdXJyZW50IHJvb3QgaW5zdGFuY2Ugb250byB0aGUgc3RhY2s7XG4gIC8vIFRoaXMgYWxsb3dzIHVzIHRvIHJlc2V0IHJvb3Qgd2hlbiBwb3J0YWxzIGFyZSBwb3BwZWQuXG4gIHB1c2gocm9vdEluc3RhbmNlU3RhY2tDdXJzb3IsIG5leHRSb290SW5zdGFuY2UsIGZpYmVyKTsgLy8gVHJhY2sgdGhlIGNvbnRleHQgYW5kIHRoZSBGaWJlciB0aGF0IHByb3ZpZGVkIGl0LlxuICAvLyBUaGlzIGVuYWJsZXMgdXMgdG8gcG9wIG9ubHkgRmliZXJzIHRoYXQgcHJvdmlkZSB1bmlxdWUgY29udGV4dHMuXG5cbiAgcHVzaChjb250ZXh0RmliZXJTdGFja0N1cnNvciwgZmliZXIsIGZpYmVyKTsgLy8gRmluYWxseSwgd2UgbmVlZCB0byBwdXNoIHRoZSBob3N0IGNvbnRleHQgdG8gdGhlIHN0YWNrLlxuICAvLyBIb3dldmVyLCB3ZSBjYW4ndCBqdXN0IGNhbGwgZ2V0Um9vdEhvc3RDb250ZXh0KCkgYW5kIHB1c2ggaXQgYmVjYXVzZVxuICAvLyB3ZSdkIGhhdmUgYSBkaWZmZXJlbnQgbnVtYmVyIG9mIGVudHJpZXMgb24gdGhlIHN0YWNrIGRlcGVuZGluZyBvblxuICAvLyB3aGV0aGVyIGdldFJvb3RIb3N0Q29udGV4dCgpIHRocm93cyBzb21ld2hlcmUgaW4gcmVuZGVyZXIgY29kZSBvciBub3QuXG4gIC8vIFNvIHdlIHB1c2ggYW4gZW1wdHkgdmFsdWUgZmlyc3QuIFRoaXMgbGV0cyB1cyBzYWZlbHkgdW53aW5kIG9uIGVycm9ycy5cblxuICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciQxLCBOT19DT05URVhULCBmaWJlcik7XG4gIHZhciBuZXh0Um9vdENvbnRleHQgPSBnZXRSb290SG9zdENvbnRleHQobmV4dFJvb3RJbnN0YW5jZSk7IC8vIE5vdyB0aGF0IHdlIGtub3cgdGhpcyBmdW5jdGlvbiBkb2Vzbid0IHRocm93LCByZXBsYWNlIGl0LlxuXG4gIHBvcChjb250ZXh0U3RhY2tDdXJzb3IkMSwgZmliZXIpO1xuICBwdXNoKGNvbnRleHRTdGFja0N1cnNvciQxLCBuZXh0Um9vdENvbnRleHQsIGZpYmVyKTtcbn1cblxuZnVuY3Rpb24gcG9wSG9zdENvbnRhaW5lcihmaWJlcikge1xuICBwb3AoY29udGV4dFN0YWNrQ3Vyc29yJDEsIGZpYmVyKTtcbiAgcG9wKGNvbnRleHRGaWJlclN0YWNrQ3Vyc29yLCBmaWJlcik7XG4gIHBvcChyb290SW5zdGFuY2VTdGFja0N1cnNvciwgZmliZXIpO1xufVxuXG5mdW5jdGlvbiBnZXRIb3N0Q29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHQgPSByZXF1aXJlZENvbnRleHQoY29udGV4dFN0YWNrQ3Vyc29yJDEuY3VycmVudCk7XG4gIHJldHVybiBjb250ZXh0O1xufVxuXG5mdW5jdGlvbiBwdXNoSG9zdENvbnRleHQoZmliZXIpIHtcbiAgdmFyIHJvb3RJbnN0YW5jZSA9IHJlcXVpcmVkQ29udGV4dChyb290SW5zdGFuY2VTdGFja0N1cnNvci5jdXJyZW50KTtcbiAgdmFyIGNvbnRleHQgPSByZXF1aXJlZENvbnRleHQoY29udGV4dFN0YWNrQ3Vyc29yJDEuY3VycmVudCk7XG4gIHZhciBuZXh0Q29udGV4dCA9IGdldENoaWxkSG9zdENvbnRleHQoY29udGV4dCwgZmliZXIudHlwZSk7IC8vIERvbid0IHB1c2ggdGhpcyBGaWJlcidzIGNvbnRleHQgdW5sZXNzIGl0J3MgdW5pcXVlLlxuXG4gIGlmIChjb250ZXh0ID09PSBuZXh0Q29udGV4dCkge1xuICAgIHJldHVybjtcbiAgfSAvLyBUcmFjayB0aGUgY29udGV4dCBhbmQgdGhlIEZpYmVyIHRoYXQgcHJvdmlkZWQgaXQuXG4gIC8vIFRoaXMgZW5hYmxlcyB1cyB0byBwb3Agb25seSBGaWJlcnMgdGhhdCBwcm92aWRlIHVuaXF1ZSBjb250ZXh0cy5cblxuXG4gIHB1c2goY29udGV4dEZpYmVyU3RhY2tDdXJzb3IsIGZpYmVyLCBmaWJlcik7XG4gIHB1c2goY29udGV4dFN0YWNrQ3Vyc29yJDEsIG5leHRDb250ZXh0LCBmaWJlcik7XG59XG5cbmZ1bmN0aW9uIHBvcEhvc3RDb250ZXh0KGZpYmVyKSB7XG4gIC8vIERvIG5vdCBwb3AgdW5sZXNzIHRoaXMgRmliZXIgcHJvdmlkZWQgdGhlIGN1cnJlbnQgY29udGV4dC5cbiAgLy8gcHVzaEhvc3RDb250ZXh0KCkgb25seSBwdXNoZXMgRmliZXJzIHRoYXQgcHJvdmlkZSB1bmlxdWUgY29udGV4dHMuXG4gIGlmIChjb250ZXh0RmliZXJTdGFja0N1cnNvci5jdXJyZW50ICE9PSBmaWJlcikge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHBvcChjb250ZXh0U3RhY2tDdXJzb3IkMSwgZmliZXIpO1xuICBwb3AoY29udGV4dEZpYmVyU3RhY2tDdXJzb3IsIGZpYmVyKTtcbn1cblxudmFyIERlZmF1bHRTdXNwZW5zZUNvbnRleHQgPSAwOyAvLyBUaGUgU3VzcGVuc2UgQ29udGV4dCBpcyBzcGxpdCBpbnRvIHR3byBwYXJ0cy4gVGhlIGxvd2VyIGJpdHMgaXNcbi8vIGluaGVyaXRlZCBkZWVwbHkgZG93biB0aGUgc3VidHJlZS4gVGhlIHVwcGVyIGJpdHMgb25seSBhZmZlY3Rcbi8vIHRoaXMgaW1tZWRpYXRlIHN1c3BlbnNlIGJvdW5kYXJ5IGFuZCBnZXRzIHJlc2V0IGVhY2ggbmV3XG4vLyBib3VuZGFyeSBvciBzdXNwZW5zZSBsaXN0LlxuXG52YXIgU3VidHJlZVN1c3BlbnNlQ29udGV4dE1hc2sgPSAxOyAvLyBTdWJ0cmVlIEZsYWdzOlxuLy8gSW52aXNpYmxlUGFyZW50U3VzcGVuc2VDb250ZXh0IGluZGljYXRlcyB0aGF0IG9uZSBvZiBvdXIgcGFyZW50IFN1c3BlbnNlXG4vLyBib3VuZGFyaWVzIGlzIG5vdCBjdXJyZW50bHkgc2hvd2luZyB2aXNpYmxlIG1haW4gY29udGVudC5cbi8vIEVpdGhlciBiZWNhdXNlIGl0IGlzIGFscmVhZHkgc2hvd2luZyBhIGZhbGxiYWNrIG9yIGlzIG5vdCBtb3VudGVkIGF0IGFsbC5cbi8vIFdlIGNhbiB1c2UgdGhpcyB0byBkZXRlcm1pbmUgaWYgaXQgaXMgZGVzaXJhYmxlIHRvIHRyaWdnZXIgYSBmYWxsYmFjayBhdFxuLy8gdGhlIHBhcmVudC4gSWYgbm90LCB0aGVuIHdlIG1pZ2h0IG5lZWQgdG8gdHJpZ2dlciB1bmRlc2lyYWJsZSBib3VuZGFyaWVzXG4vLyBhbmQvb3Igc3VzcGVuZCB0aGUgY29tbWl0IHRvIGF2b2lkIGhpZGluZyB0aGUgcGFyZW50IGNvbnRlbnQuXG5cbnZhciBJbnZpc2libGVQYXJlbnRTdXNwZW5zZUNvbnRleHQgPSAxOyAvLyBTaGFsbG93IEZsYWdzOlxuLy8gRm9yY2VTdXNwZW5zZUZhbGxiYWNrIGNhbiBiZSB1c2VkIGJ5IFN1c3BlbnNlTGlzdCB0byBmb3JjZSBuZXdseSBhZGRlZFxuLy8gaXRlbXMgaW50byB0aGVpciBmYWxsYmFjayBzdGF0ZSBkdXJpbmcgb25lIG9mIHRoZSByZW5kZXIgcGFzc2VzLlxuXG52YXIgRm9yY2VTdXNwZW5zZUZhbGxiYWNrID0gMjtcbnZhciBzdXNwZW5zZVN0YWNrQ3Vyc29yID0gY3JlYXRlQ3Vyc29yKERlZmF1bHRTdXNwZW5zZUNvbnRleHQpO1xuZnVuY3Rpb24gaGFzU3VzcGVuc2VDb250ZXh0KHBhcmVudENvbnRleHQsIGZsYWcpIHtcbiAgcmV0dXJuIChwYXJlbnRDb250ZXh0ICYgZmxhZykgIT09IDA7XG59XG5mdW5jdGlvbiBzZXREZWZhdWx0U2hhbGxvd1N1c3BlbnNlQ29udGV4dChwYXJlbnRDb250ZXh0KSB7XG4gIHJldHVybiBwYXJlbnRDb250ZXh0ICYgU3VidHJlZVN1c3BlbnNlQ29udGV4dE1hc2s7XG59XG5mdW5jdGlvbiBzZXRTaGFsbG93U3VzcGVuc2VDb250ZXh0KHBhcmVudENvbnRleHQsIHNoYWxsb3dDb250ZXh0KSB7XG4gIHJldHVybiBwYXJlbnRDb250ZXh0ICYgU3VidHJlZVN1c3BlbnNlQ29udGV4dE1hc2sgfCBzaGFsbG93Q29udGV4dDtcbn1cbmZ1bmN0aW9uIGFkZFN1YnRyZWVTdXNwZW5zZUNvbnRleHQocGFyZW50Q29udGV4dCwgc3VidHJlZUNvbnRleHQpIHtcbiAgcmV0dXJuIHBhcmVudENvbnRleHQgfCBzdWJ0cmVlQ29udGV4dDtcbn1cbmZ1bmN0aW9uIHB1c2hTdXNwZW5zZUNvbnRleHQoZmliZXIsIG5ld0NvbnRleHQpIHtcbiAgcHVzaChzdXNwZW5zZVN0YWNrQ3Vyc29yLCBuZXdDb250ZXh0LCBmaWJlcik7XG59XG5mdW5jdGlvbiBwb3BTdXNwZW5zZUNvbnRleHQoZmliZXIpIHtcbiAgcG9wKHN1c3BlbnNlU3RhY2tDdXJzb3IsIGZpYmVyKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkQ2FwdHVyZVN1c3BlbnNlKHdvcmtJblByb2dyZXNzLCBoYXNJbnZpc2libGVQYXJlbnQpIHtcbiAgLy8gSWYgaXQgd2FzIHRoZSBwcmltYXJ5IGNoaWxkcmVuIHRoYXQganVzdCBzdXNwZW5kZWQsIGNhcHR1cmUgYW5kIHJlbmRlciB0aGVcbiAgLy8gZmFsbGJhY2suIE90aGVyd2lzZSwgZG9uJ3QgY2FwdHVyZSBhbmQgYnViYmxlIHRvIHRoZSBuZXh0IGJvdW5kYXJ5LlxuICB2YXIgbmV4dFN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcblxuICBpZiAobmV4dFN0YXRlICE9PSBudWxsKSB7XG4gICAgaWYgKG5leHRTdGF0ZS5kZWh5ZHJhdGVkICE9PSBudWxsKSB7XG4gICAgICAvLyBBIGRlaHlkcmF0ZWQgYm91bmRhcnkgYWx3YXlzIGNhcHR1cmVzLlxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHByb3BzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wczsgLy8gUmVndWxhciBib3VuZGFyaWVzIGFsd2F5cyBjYXB0dXJlLlxuXG4gIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBJZiBpdCdzIGEgYm91bmRhcnkgd2Ugc2hvdWxkIGF2b2lkLCB0aGVuIHdlIHByZWZlciB0byBidWJibGUgdXAgdG8gdGhlXG59XG5mdW5jdGlvbiBmaW5kRmlyc3RTdXNwZW5kZWQocm93KSB7XG4gIHZhciBub2RlID0gcm93O1xuXG4gIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgaWYgKG5vZGUudGFnID09PSBTdXNwZW5zZUNvbXBvbmVudCkge1xuICAgICAgdmFyIHN0YXRlID0gbm9kZS5tZW1vaXplZFN0YXRlO1xuXG4gICAgICBpZiAoc3RhdGUgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIGRlaHlkcmF0ZWQgPSBzdGF0ZS5kZWh5ZHJhdGVkO1xuXG4gICAgICAgIGlmIChkZWh5ZHJhdGVkID09PSBudWxsIHx8IGlzU3VzcGVuc2VJbnN0YW5jZVBlbmRpbmcoZGVoeWRyYXRlZCkgfHwgaXNTdXNwZW5zZUluc3RhbmNlRmFsbGJhY2soZGVoeWRyYXRlZCkpIHtcbiAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobm9kZS50YWcgPT09IFN1c3BlbnNlTGlzdENvbXBvbmVudCAmJiAvLyByZXZlYWxPcmRlciB1bmRlZmluZWQgY2FuJ3QgYmUgdHJ1c3RlZCBiZWNhdXNlIGl0IGRvbid0XG4gICAgLy8ga2VlcCB0cmFjayBvZiB3aGV0aGVyIGl0IHN1c3BlbmRlZCBvciBub3QuXG4gICAgbm9kZS5tZW1vaXplZFByb3BzLnJldmVhbE9yZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBkaWRTdXNwZW5kID0gKG5vZGUuZmxhZ3MgJiBEaWRDYXB0dXJlKSAhPT0gTm9GbGFncztcblxuICAgICAgaWYgKGRpZFN1c3BlbmQpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlLmNoaWxkICE9PSBudWxsKSB7XG4gICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGU7XG4gICAgICBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChub2RlID09PSByb3cpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHdoaWxlIChub2RlLnNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgIGlmIChub2RlLnJldHVybiA9PT0gbnVsbCB8fCBub2RlLnJldHVybiA9PT0gcm93KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgfVxuXG4gICAgbm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuO1xuICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxudmFyIE5vRmxhZ3MkMSA9XG4vKiAgICovXG4wOyAvLyBSZXByZXNlbnRzIHdoZXRoZXIgZWZmZWN0IHNob3VsZCBmaXJlLlxuXG52YXIgSGFzRWZmZWN0ID1cbi8qICovXG4xOyAvLyBSZXByZXNlbnRzIHRoZSBwaGFzZSBpbiB3aGljaCB0aGUgZWZmZWN0IChub3QgdGhlIGNsZWFuLXVwKSBmaXJlcy5cblxudmFyIEluc2VydGlvbiA9XG4vKiAgKi9cbjI7XG52YXIgTGF5b3V0ID1cbi8qICAgICovXG40O1xudmFyIFBhc3NpdmUkMSA9XG4vKiAgICovXG44O1xuXG4vLyBhbmQgc2hvdWxkIGJlIHJlc2V0IGJlZm9yZSBzdGFydGluZyBhIG5ldyByZW5kZXIuXG4vLyBUaGlzIHRyYWNrcyB3aGljaCBtdXRhYmxlIHNvdXJjZXMgbmVlZCB0byBiZSByZXNldCBhZnRlciBhIHJlbmRlci5cblxudmFyIHdvcmtJblByb2dyZXNzU291cmNlcyA9IFtdO1xuZnVuY3Rpb24gcmVzZXRXb3JrSW5Qcm9ncmVzc1ZlcnNpb25zKCkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHdvcmtJblByb2dyZXNzU291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBtdXRhYmxlU291cmNlID0gd29ya0luUHJvZ3Jlc3NTb3VyY2VzW2ldO1xuXG4gICAge1xuICAgICAgbXV0YWJsZVNvdXJjZS5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgd29ya0luUHJvZ3Jlc3NTb3VyY2VzLmxlbmd0aCA9IDA7XG59XG4vLyBUaGlzIGVuc3VyZXMgdGhhdCB0aGUgdmVyc2lvbiB1c2VkIGZvciBzZXJ2ZXIgcmVuZGVyaW5nIG1hdGNoZXMgdGhlIG9uZVxuLy8gdGhhdCBpcyBldmVudHVhbGx5IHJlYWQgZHVyaW5nIGh5ZHJhdGlvbi5cbi8vIElmIHRoZXkgZG9uJ3QgbWF0Y2ggdGhlcmUncyBhIHBvdGVudGlhbCB0ZWFyIGFuZCBhIGZ1bGwgZGVvcHQgcmVuZGVyIGlzIHJlcXVpcmVkLlxuXG5mdW5jdGlvbiByZWdpc3Rlck11dGFibGVTb3VyY2VGb3JIeWRyYXRpb24ocm9vdCwgbXV0YWJsZVNvdXJjZSkge1xuICB2YXIgZ2V0VmVyc2lvbiA9IG11dGFibGVTb3VyY2UuX2dldFZlcnNpb247XG4gIHZhciB2ZXJzaW9uID0gZ2V0VmVyc2lvbihtdXRhYmxlU291cmNlLl9zb3VyY2UpOyAvLyBUT0RPIENsZWFyIHRoaXMgZGF0YSBvbmNlIGFsbCBwZW5kaW5nIGh5ZHJhdGlvbiB3b3JrIGlzIGZpbmlzaGVkLlxuICAvLyBSZXRhaW5pbmcgaXQgZm9yZXZlciBtYXkgaW50ZXJmZXJlIHdpdGggR0MuXG5cbiAgaWYgKHJvb3QubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSA9PSBudWxsKSB7XG4gICAgcm9vdC5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhID0gW211dGFibGVTb3VyY2UsIHZlcnNpb25dO1xuICB9IGVsc2Uge1xuICAgIHJvb3QubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YS5wdXNoKG11dGFibGVTb3VyY2UsIHZlcnNpb24pO1xuICB9XG59XG5cbnZhciBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLFxuICAgIFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnJDIgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZztcbnZhciBkaWRXYXJuQWJvdXRNaXNtYXRjaGVkSG9va3NGb3JDb21wb25lbnQ7XG52YXIgZGlkV2FyblVuY2FjaGVkR2V0U25hcHNob3Q7XG5cbntcbiAgZGlkV2FybkFib3V0TWlzbWF0Y2hlZEhvb2tzRm9yQ29tcG9uZW50ID0gbmV3IFNldCgpO1xufVxuXG4vLyBUaGVzZSBhcmUgc2V0IHJpZ2h0IGJlZm9yZSBjYWxsaW5nIHRoZSBjb21wb25lbnQuXG52YXIgcmVuZGVyTGFuZXMgPSBOb0xhbmVzOyAvLyBUaGUgd29yay1pbi1wcm9ncmVzcyBmaWJlci4gSSd2ZSBuYW1lZCBpdCBkaWZmZXJlbnRseSB0byBkaXN0aW5ndWlzaCBpdCBmcm9tXG4vLyB0aGUgd29yay1pbi1wcm9ncmVzcyBob29rLlxuXG52YXIgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSA9IG51bGw7IC8vIEhvb2tzIGFyZSBzdG9yZWQgYXMgYSBsaW5rZWQgbGlzdCBvbiB0aGUgZmliZXIncyBtZW1vaXplZFN0YXRlIGZpZWxkLiBUaGVcbi8vIGN1cnJlbnQgaG9vayBsaXN0IGlzIHRoZSBsaXN0IHRoYXQgYmVsb25ncyB0byB0aGUgY3VycmVudCBmaWJlci4gVGhlXG4vLyB3b3JrLWluLXByb2dyZXNzIGhvb2sgbGlzdCBpcyBhIG5ldyBsaXN0IHRoYXQgd2lsbCBiZSBhZGRlZCB0byB0aGVcbi8vIHdvcmstaW4tcHJvZ3Jlc3MgZmliZXIuXG5cbnZhciBjdXJyZW50SG9vayA9IG51bGw7XG52YXIgd29ya0luUHJvZ3Jlc3NIb29rID0gbnVsbDsgLy8gV2hldGhlciBhbiB1cGRhdGUgd2FzIHNjaGVkdWxlZCBhdCBhbnkgcG9pbnQgZHVyaW5nIHRoZSByZW5kZXIgcGhhc2UuIFRoaXNcbi8vIGRvZXMgbm90IGdldCByZXNldCBpZiB3ZSBkbyBhbm90aGVyIHJlbmRlciBwYXNzOyBvbmx5IHdoZW4gd2UncmUgY29tcGxldGVseVxuLy8gZmluaXNoZWQgZXZhbHVhdGluZyB0aGlzIGNvbXBvbmVudC4gVGhpcyBpcyBhbiBvcHRpbWl6YXRpb24gc28gd2Uga25vd1xuLy8gd2hldGhlciB3ZSBuZWVkIHRvIGNsZWFyIHJlbmRlciBwaGFzZSB1cGRhdGVzIGFmdGVyIGEgdGhyb3cuXG5cbnZhciBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gZmFsc2U7IC8vIFdoZXJlIGFuIHVwZGF0ZSB3YXMgc2NoZWR1bGVkIG9ubHkgZHVyaW5nIHRoZSBjdXJyZW50IHJlbmRlciBwYXNzLiBUaGlzXG4vLyBnZXRzIHJlc2V0IGFmdGVyIGVhY2ggYXR0ZW1wdC5cbi8vIFRPRE86IE1heWJlIHRoZXJlJ3Mgc29tZSB3YXkgdG8gY29uc29saWRhdGUgdGhpcyB3aXRoXG4vLyBgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZWAuIE9yIHdpdGggYG51bWJlck9mUmVSZW5kZXJzYC5cblxudmFyIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyA9IGZhbHNlOyAvLyBDb3VudHMgdGhlIG51bWJlciBvZiB1c2VJZCBob29rcyBpbiB0aGlzIGNvbXBvbmVudC5cblxudmFyIGxvY2FsSWRDb3VudGVyID0gMDsgLy8gVXNlZCBmb3IgaWRzIHRoYXQgYXJlIGdlbmVyYXRlZCBjb21wbGV0ZWx5IGNsaWVudC1zaWRlIChpLmUuIG5vdCBkdXJpbmdcbi8vIGh5ZHJhdGlvbikuIFRoaXMgY291bnRlciBpcyBnbG9iYWwsIHNvIGNsaWVudCBpZHMgYXJlIG5vdCBzdGFibGUgYWNyb3NzXG4vLyByZW5kZXIgYXR0ZW1wdHMuXG5cbnZhciBnbG9iYWxDbGllbnRJZENvdW50ZXIgPSAwO1xudmFyIFJFX1JFTkRFUl9MSU1JVCA9IDI1OyAvLyBJbiBERVYsIHRoaXMgaXMgdGhlIG5hbWUgb2YgdGhlIGN1cnJlbnRseSBleGVjdXRpbmcgcHJpbWl0aXZlIGhvb2tcblxudmFyIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gbnVsbDsgLy8gSW4gREVWLCB0aGlzIGxpc3QgZW5zdXJlcyB0aGF0IGhvb2tzIGFyZSBjYWxsZWQgaW4gdGhlIHNhbWUgb3JkZXIgYmV0d2VlbiByZW5kZXJzLlxuLy8gVGhlIGxpc3Qgc3RvcmVzIHRoZSBvcmRlciBvZiBob29rcyB1c2VkIGR1cmluZyB0aGUgaW5pdGlhbCByZW5kZXIgKG1vdW50KS5cbi8vIFN1YnNlcXVlbnQgcmVuZGVycyAodXBkYXRlcykgcmVmZXJlbmNlIHRoaXMgbGlzdC5cblxudmFyIGhvb2tUeXBlc0RldiA9IG51bGw7XG52YXIgaG9va1R5cGVzVXBkYXRlSW5kZXhEZXYgPSAtMTsgLy8gSW4gREVWLCB0aGlzIHRyYWNrcyB3aGV0aGVyIGN1cnJlbnRseSByZW5kZXJpbmcgY29tcG9uZW50IG5lZWRzIHRvIGlnbm9yZVxuLy8gdGhlIGRlcGVuZGVuY2llcyBmb3IgSG9va3MgdGhhdCBuZWVkIHRoZW0gKGUuZy4gdXNlRWZmZWN0IG9yIHVzZU1lbW8pLlxuLy8gV2hlbiB0cnVlLCBzdWNoIEhvb2tzIHdpbGwgYWx3YXlzIGJlIFwicmVtb3VudGVkXCIuIE9ubHkgdXNlZCBkdXJpbmcgaG90IHJlbG9hZC5cblxudmFyIGlnbm9yZVByZXZpb3VzRGVwZW5kZW5jaWVzID0gZmFsc2U7XG5cbmZ1bmN0aW9uIG1vdW50SG9va1R5cGVzRGV2KCkge1xuICB7XG4gICAgdmFyIGhvb2tOYW1lID0gY3VycmVudEhvb2tOYW1lSW5EZXY7XG5cbiAgICBpZiAoaG9va1R5cGVzRGV2ID09PSBudWxsKSB7XG4gICAgICBob29rVHlwZXNEZXYgPSBbaG9va05hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBob29rVHlwZXNEZXYucHVzaChob29rTmFtZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUhvb2tUeXBlc0RldigpIHtcbiAge1xuICAgIHZhciBob29rTmFtZSA9IGN1cnJlbnRIb29rTmFtZUluRGV2O1xuXG4gICAgaWYgKGhvb2tUeXBlc0RldiAhPT0gbnVsbCkge1xuICAgICAgaG9va1R5cGVzVXBkYXRlSW5kZXhEZXYrKztcblxuICAgICAgaWYgKGhvb2tUeXBlc0Rldltob29rVHlwZXNVcGRhdGVJbmRleERldl0gIT09IGhvb2tOYW1lKSB7XG4gICAgICAgIHdhcm5Pbkhvb2tNaXNtYXRjaEluRGV2KGhvb2tOYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tEZXBzQXJlQXJyYXlEZXYoZGVwcykge1xuICB7XG4gICAgaWYgKGRlcHMgIT09IHVuZGVmaW5lZCAmJiBkZXBzICE9PSBudWxsICYmICFpc0FycmF5KGRlcHMpKSB7XG4gICAgICAvLyBWZXJpZnkgZGVwcywgYnV0IG9ubHkgb24gbW91bnQgdG8gYXZvaWQgZXh0cmEgY2hlY2tzLlxuICAgICAgLy8gSXQncyB1bmxpa2VseSB0aGVpciB0eXBlIHdvdWxkIGNoYW5nZSBhcyB1c3VhbGx5IHlvdSBkZWZpbmUgdGhlbSBpbmxpbmUuXG4gICAgICBlcnJvcignJXMgcmVjZWl2ZWQgYSBmaW5hbCBhcmd1bWVudCB0aGF0IGlzIG5vdCBhbiBhcnJheSAoaW5zdGVhZCwgcmVjZWl2ZWQgYCVzYCkuIFdoZW4gJyArICdzcGVjaWZpZWQsIHRoZSBmaW5hbCBhcmd1bWVudCBtdXN0IGJlIGFuIGFycmF5LicsIGN1cnJlbnRIb29rTmFtZUluRGV2LCB0eXBlb2YgZGVwcyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm5Pbkhvb2tNaXNtYXRjaEluRGV2KGN1cnJlbnRIb29rTmFtZSkge1xuICB7XG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEpO1xuXG4gICAgaWYgKCFkaWRXYXJuQWJvdXRNaXNtYXRjaGVkSG9va3NGb3JDb21wb25lbnQuaGFzKGNvbXBvbmVudE5hbWUpKSB7XG4gICAgICBkaWRXYXJuQWJvdXRNaXNtYXRjaGVkSG9va3NGb3JDb21wb25lbnQuYWRkKGNvbXBvbmVudE5hbWUpO1xuXG4gICAgICBpZiAoaG9va1R5cGVzRGV2ICE9PSBudWxsKSB7XG4gICAgICAgIHZhciB0YWJsZSA9ICcnO1xuICAgICAgICB2YXIgc2Vjb25kQ29sdW1uU3RhcnQgPSAzMDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8PSBob29rVHlwZXNVcGRhdGVJbmRleERldjsgaSsrKSB7XG4gICAgICAgICAgdmFyIG9sZEhvb2tOYW1lID0gaG9va1R5cGVzRGV2W2ldO1xuICAgICAgICAgIHZhciBuZXdIb29rTmFtZSA9IGkgPT09IGhvb2tUeXBlc1VwZGF0ZUluZGV4RGV2ID8gY3VycmVudEhvb2tOYW1lIDogb2xkSG9va05hbWU7XG4gICAgICAgICAgdmFyIHJvdyA9IGkgKyAxICsgXCIuIFwiICsgb2xkSG9va05hbWU7IC8vIEV4dHJhIHNwYWNlIHNvIHNlY29uZCBjb2x1bW4gbGluZXMgdXBcbiAgICAgICAgICAvLyBsb2wgQCBJRSBub3Qgc3VwcG9ydGluZyBTdHJpbmcjcmVwZWF0XG5cbiAgICAgICAgICB3aGlsZSAocm93Lmxlbmd0aCA8IHNlY29uZENvbHVtblN0YXJ0KSB7XG4gICAgICAgICAgICByb3cgKz0gJyAnO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJvdyArPSBuZXdIb29rTmFtZSArICdcXG4nO1xuICAgICAgICAgIHRhYmxlICs9IHJvdztcbiAgICAgICAgfVxuXG4gICAgICAgIGVycm9yKCdSZWFjdCBoYXMgZGV0ZWN0ZWQgYSBjaGFuZ2UgaW4gdGhlIG9yZGVyIG9mIEhvb2tzIGNhbGxlZCBieSAlcy4gJyArICdUaGlzIHdpbGwgbGVhZCB0byBidWdzIGFuZCBlcnJvcnMgaWYgbm90IGZpeGVkLiAnICsgJ0ZvciBtb3JlIGluZm9ybWF0aW9uLCByZWFkIHRoZSBSdWxlcyBvZiBIb29rczogaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3J1bGVzLW9mLWhvb2tzXFxuXFxuJyArICcgICBQcmV2aW91cyByZW5kZXIgICAgICAgICAgICBOZXh0IHJlbmRlclxcbicgKyAnICAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuJyArICclcycgKyAnICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXFxuJywgY29tcG9uZW50TmFtZSwgdGFibGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0aHJvd0ludmFsaWRIb29rRXJyb3IoKSB7XG4gIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBob29rIGNhbGwuIEhvb2tzIGNhbiBvbmx5IGJlIGNhbGxlZCBpbnNpZGUgb2YgdGhlIGJvZHkgb2YgYSBmdW5jdGlvbiBjb21wb25lbnQuIFRoaXMgY291bGQgaGFwcGVuIGZvcicgKyAnIG9uZSBvZiB0aGUgZm9sbG93aW5nIHJlYXNvbnM6XFxuJyArICcxLiBZb3UgbWlnaHQgaGF2ZSBtaXNtYXRjaGluZyB2ZXJzaW9ucyBvZiBSZWFjdCBhbmQgdGhlIHJlbmRlcmVyIChzdWNoIGFzIFJlYWN0IERPTSlcXG4nICsgJzIuIFlvdSBtaWdodCBiZSBicmVha2luZyB0aGUgUnVsZXMgb2YgSG9va3NcXG4nICsgJzMuIFlvdSBtaWdodCBoYXZlIG1vcmUgdGhhbiBvbmUgY29weSBvZiBSZWFjdCBpbiB0aGUgc2FtZSBhcHBcXG4nICsgJ1NlZSBodHRwczovL3JlYWN0anMub3JnL2xpbmsvaW52YWxpZC1ob29rLWNhbGwgZm9yIHRpcHMgYWJvdXQgaG93IHRvIGRlYnVnIGFuZCBmaXggdGhpcyBwcm9ibGVtLicpO1xufVxuXG5mdW5jdGlvbiBhcmVIb29rSW5wdXRzRXF1YWwobmV4dERlcHMsIHByZXZEZXBzKSB7XG4gIHtcbiAgICBpZiAoaWdub3JlUHJldmlvdXNEZXBlbmRlbmNpZXMpIHtcbiAgICAgIC8vIE9ubHkgdHJ1ZSB3aGVuIHRoaXMgY29tcG9uZW50IGlzIGJlaW5nIGhvdCByZWxvYWRlZC5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAocHJldkRlcHMgPT09IG51bGwpIHtcbiAgICB7XG4gICAgICBlcnJvcignJXMgcmVjZWl2ZWQgYSBmaW5hbCBhcmd1bWVudCBkdXJpbmcgdGhpcyByZW5kZXIsIGJ1dCBub3QgZHVyaW5nICcgKyAndGhlIHByZXZpb3VzIHJlbmRlci4gRXZlbiB0aG91Z2ggdGhlIGZpbmFsIGFyZ3VtZW50IGlzIG9wdGlvbmFsLCAnICsgJ2l0cyB0eXBlIGNhbm5vdCBjaGFuZ2UgYmV0d2VlbiByZW5kZXJzLicsIGN1cnJlbnRIb29rTmFtZUluRGV2KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB7XG4gICAgLy8gRG9uJ3QgYm90aGVyIGNvbXBhcmluZyBsZW5ndGhzIGluIHByb2QgYmVjYXVzZSB0aGVzZSBhcnJheXMgc2hvdWxkIGJlXG4gICAgLy8gcGFzc2VkIGlubGluZS5cbiAgICBpZiAobmV4dERlcHMubGVuZ3RoICE9PSBwcmV2RGVwcy5sZW5ndGgpIHtcbiAgICAgIGVycm9yKCdUaGUgZmluYWwgYXJndW1lbnQgcGFzc2VkIHRvICVzIGNoYW5nZWQgc2l6ZSBiZXR3ZWVuIHJlbmRlcnMuIFRoZSAnICsgJ29yZGVyIGFuZCBzaXplIG9mIHRoaXMgYXJyYXkgbXVzdCByZW1haW4gY29uc3RhbnQuXFxuXFxuJyArICdQcmV2aW91czogJXNcXG4nICsgJ0luY29taW5nOiAlcycsIGN1cnJlbnRIb29rTmFtZUluRGV2LCBcIltcIiArIHByZXZEZXBzLmpvaW4oJywgJykgKyBcIl1cIiwgXCJbXCIgKyBuZXh0RGVwcy5qb2luKCcsICcpICsgXCJdXCIpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcHJldkRlcHMubGVuZ3RoICYmIGkgPCBuZXh0RGVwcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChvYmplY3RJcyhuZXh0RGVwc1tpXSwgcHJldkRlcHNbaV0pKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyV2l0aEhvb2tzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHByb3BzLCBzZWNvbmRBcmcsIG5leHRSZW5kZXJMYW5lcykge1xuICByZW5kZXJMYW5lcyA9IG5leHRSZW5kZXJMYW5lcztcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSA9IHdvcmtJblByb2dyZXNzO1xuXG4gIHtcbiAgICBob29rVHlwZXNEZXYgPSBjdXJyZW50ICE9PSBudWxsID8gY3VycmVudC5fZGVidWdIb29rVHlwZXMgOiBudWxsO1xuICAgIGhvb2tUeXBlc1VwZGF0ZUluZGV4RGV2ID0gLTE7IC8vIFVzZWQgZm9yIGhvdCByZWxvYWRpbmc6XG5cbiAgICBpZ25vcmVQcmV2aW91c0RlcGVuZGVuY2llcyA9IGN1cnJlbnQgIT09IG51bGwgJiYgY3VycmVudC50eXBlICE9PSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICB9XG5cbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSBOb0xhbmVzOyAvLyBUaGUgZm9sbG93aW5nIHNob3VsZCBoYXZlIGFscmVhZHkgYmVlbiByZXNldFxuICAvLyBjdXJyZW50SG9vayA9IG51bGw7XG4gIC8vIHdvcmtJblByb2dyZXNzSG9vayA9IG51bGw7XG4gIC8vIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUgPSBmYWxzZTtcbiAgLy8gbG9jYWxJZENvdW50ZXIgPSAwO1xuICAvLyBUT0RPIFdhcm4gaWYgbm8gaG9va3MgYXJlIHVzZWQgYXQgYWxsIGR1cmluZyBtb3VudCwgdGhlbiBzb21lIGFyZSB1c2VkIGR1cmluZyB1cGRhdGUuXG4gIC8vIEN1cnJlbnRseSB3ZSB3aWxsIGlkZW50aWZ5IHRoZSB1cGRhdGUgcmVuZGVyIGFzIGEgbW91bnQgYmVjYXVzZSBtZW1vaXplZFN0YXRlID09PSBudWxsLlxuICAvLyBUaGlzIGlzIHRyaWNreSBiZWNhdXNlIGl0J3MgdmFsaWQgZm9yIGNlcnRhaW4gdHlwZXMgb2YgY29tcG9uZW50cyAoZS5nLiBSZWFjdC5sYXp5KVxuICAvLyBVc2luZyBtZW1vaXplZFN0YXRlIHRvIGRpZmZlcmVudGlhdGUgYmV0d2VlbiBtb3VudC91cGRhdGUgb25seSB3b3JrcyBpZiBhdCBsZWFzdCBvbmUgc3RhdGVmdWwgaG9vayBpcyB1c2VkLlxuICAvLyBOb24tc3RhdGVmdWwgaG9va3MgKGUuZy4gY29udGV4dCkgZG9uJ3QgZ2V0IGFkZGVkIHRvIG1lbW9pemVkU3RhdGUsXG4gIC8vIHNvIG1lbW9pemVkU3RhdGUgd291bGQgYmUgbnVsbCBkdXJpbmcgdXBkYXRlcyBhbmQgbW91bnRzLlxuXG4gIHtcbiAgICBpZiAoY3VycmVudCAhPT0gbnVsbCAmJiBjdXJyZW50Lm1lbW9pemVkU3RhdGUgIT09IG51bGwpIHtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSG9va3NEaXNwYXRjaGVyT25VcGRhdGVJbkRFVjtcbiAgICB9IGVsc2UgaWYgKGhvb2tUeXBlc0RldiAhPT0gbnVsbCkge1xuICAgICAgLy8gVGhpcyBkaXNwYXRjaGVyIGhhbmRsZXMgYW4gZWRnZSBjYXNlIHdoZXJlIGEgY29tcG9uZW50IGlzIHVwZGF0aW5nLFxuICAgICAgLy8gYnV0IG5vIHN0YXRlZnVsIGhvb2tzIGhhdmUgYmVlbiB1c2VkLlxuICAgICAgLy8gV2Ugd2FudCB0byBtYXRjaCB0aGUgcHJvZHVjdGlvbiBjb2RlIGJlaGF2aW9yICh3aGljaCB3aWxsIHVzZSBIb29rc0Rpc3BhdGNoZXJPbk1vdW50KSxcbiAgICAgIC8vIGJ1dCB3aXRoIHRoZSBleHRyYSBERVYgdmFsaWRhdGlvbiB0byBlbnN1cmUgaG9va3Mgb3JkZXJpbmcgaGFzbid0IGNoYW5nZWQuXG4gICAgICAvLyBUaGlzIGRpc3BhdGNoZXIgZG9lcyB0aGF0LlxuICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBIb29rc0Rpc3BhdGNoZXJPbk1vdW50V2l0aEhvb2tUeXBlc0luREVWO1xuICAgIH0gZWxzZSB7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEhvb2tzRGlzcGF0Y2hlck9uTW91bnRJbkRFVjtcbiAgICB9XG4gIH1cblxuICB2YXIgY2hpbGRyZW4gPSBDb21wb25lbnQocHJvcHMsIHNlY29uZEFyZyk7IC8vIENoZWNrIGlmIHRoZXJlIHdhcyBhIHJlbmRlciBwaGFzZSB1cGRhdGVcblxuICBpZiAoZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZUR1cmluZ1RoaXNQYXNzKSB7XG4gICAgLy8gS2VlcCByZW5kZXJpbmcgaW4gYSBsb29wIGZvciBhcyBsb25nIGFzIHJlbmRlciBwaGFzZSB1cGRhdGVzIGNvbnRpbnVlIHRvXG4gICAgLy8gYmUgc2NoZWR1bGVkLiBVc2UgYSBjb3VudGVyIHRvIHByZXZlbnQgaW5maW5pdGUgbG9vcHMuXG4gICAgdmFyIG51bWJlck9mUmVSZW5kZXJzID0gMDtcblxuICAgIGRvIHtcbiAgICAgIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyA9IGZhbHNlO1xuICAgICAgbG9jYWxJZENvdW50ZXIgPSAwO1xuXG4gICAgICBpZiAobnVtYmVyT2ZSZVJlbmRlcnMgPj0gUkVfUkVOREVSX0xJTUlUKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVG9vIG1hbnkgcmUtcmVuZGVycy4gUmVhY3QgbGltaXRzIHRoZSBudW1iZXIgb2YgcmVuZGVycyB0byBwcmV2ZW50ICcgKyAnYW4gaW5maW5pdGUgbG9vcC4nKTtcbiAgICAgIH1cblxuICAgICAgbnVtYmVyT2ZSZVJlbmRlcnMgKz0gMTtcblxuICAgICAge1xuICAgICAgICAvLyBFdmVuIHdoZW4gaG90IHJlbG9hZGluZywgYWxsb3cgZGVwZW5kZW5jaWVzIHRvIHN0YWJpbGl6ZVxuICAgICAgICAvLyBhZnRlciBmaXJzdCByZW5kZXIgdG8gcHJldmVudCBpbmZpbml0ZSByZW5kZXIgcGhhc2UgdXBkYXRlcy5cbiAgICAgICAgaWdub3JlUHJldmlvdXNEZXBlbmRlbmNpZXMgPSBmYWxzZTtcbiAgICAgIH0gLy8gU3RhcnQgb3ZlciBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpc3RcblxuXG4gICAgICBjdXJyZW50SG9vayA9IG51bGw7XG4gICAgICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBudWxsO1xuICAgICAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBudWxsO1xuXG4gICAgICB7XG4gICAgICAgIC8vIEFsc28gdmFsaWRhdGUgaG9vayBvcmRlciBmb3IgY2FzY2FkaW5nIHVwZGF0ZXMuXG4gICAgICAgIGhvb2tUeXBlc1VwZGF0ZUluZGV4RGV2ID0gLTE7XG4gICAgICB9XG5cbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gIEhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXJJbkRFViA7XG4gICAgICBjaGlsZHJlbiA9IENvbXBvbmVudChwcm9wcywgc2Vjb25kQXJnKTtcbiAgICB9IHdoaWxlIChkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MpO1xuICB9IC8vIFdlIGNhbiBhc3N1bWUgdGhlIHByZXZpb3VzIGRpc3BhdGNoZXIgaXMgYWx3YXlzIHRoaXMgb25lLCBzaW5jZSB3ZSBzZXQgaXRcbiAgLy8gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgcmVuZGVyIHBoYXNlIGFuZCB0aGVyZSdzIG5vIHJlLWVudHJhbmNlLlxuXG5cbiAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBDb250ZXh0T25seURpc3BhdGNoZXI7XG5cbiAge1xuICAgIHdvcmtJblByb2dyZXNzLl9kZWJ1Z0hvb2tUeXBlcyA9IGhvb2tUeXBlc0RldjtcbiAgfSAvLyBUaGlzIGNoZWNrIHVzZXMgY3VycmVudEhvb2sgc28gdGhhdCBpdCB3b3JrcyB0aGUgc2FtZSBpbiBERVYgYW5kIHByb2QgYnVuZGxlcy5cbiAgLy8gaG9va1R5cGVzRGV2IGNvdWxkIGNhdGNoIG1vcmUgY2FzZXMgKGUuZy4gY29udGV4dCkgYnV0IG9ubHkgaW4gREVWIGJ1bmRsZXMuXG5cblxuICB2YXIgZGlkUmVuZGVyVG9vRmV3SG9va3MgPSBjdXJyZW50SG9vayAhPT0gbnVsbCAmJiBjdXJyZW50SG9vay5uZXh0ICE9PSBudWxsO1xuICByZW5kZXJMYW5lcyA9IE5vTGFuZXM7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEgPSBudWxsO1xuICBjdXJyZW50SG9vayA9IG51bGw7XG4gIHdvcmtJblByb2dyZXNzSG9vayA9IG51bGw7XG5cbiAge1xuICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gbnVsbDtcbiAgICBob29rVHlwZXNEZXYgPSBudWxsO1xuICAgIGhvb2tUeXBlc1VwZGF0ZUluZGV4RGV2ID0gLTE7IC8vIENvbmZpcm0gdGhhdCBhIHN0YXRpYyBmbGFnIHdhcyBub3QgYWRkZWQgb3IgcmVtb3ZlZCBzaW5jZSB0aGUgbGFzdFxuICAgIC8vIHJlbmRlci4gSWYgdGhpcyBmaXJlcywgaXQgc3VnZ2VzdHMgdGhhdCB3ZSBpbmNvcnJlY3RseSByZXNldCB0aGUgc3RhdGljXG4gICAgLy8gZmxhZ3MgaW4gc29tZSBvdGhlciBwYXJ0IG9mIHRoZSBjb2RlYmFzZS4gVGhpcyBoYXMgaGFwcGVuZWQgYmVmb3JlLCBmb3JcbiAgICAvLyBleGFtcGxlLCBpbiB0aGUgU3VzcGVuc2VMaXN0IGltcGxlbWVudGF0aW9uLlxuXG4gICAgaWYgKGN1cnJlbnQgIT09IG51bGwgJiYgKGN1cnJlbnQuZmxhZ3MgJiBTdGF0aWNNYXNrKSAhPT0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgU3RhdGljTWFzaykgJiYgLy8gRGlzYWJsZSB0aGlzIHdhcm5pbmcgaW4gbGVnYWN5IG1vZGUsIGJlY2F1c2UgbGVnYWN5IFN1c3BlbnNlIGlzIHdlaXJkXG4gICAgLy8gYW5kIGNyZWF0ZXMgZmFsc2UgcG9zaXRpdmVzLiBUbyBtYWtlIHRoaXMgd29yayBpbiBsZWdhY3kgbW9kZSwgd2UnZFxuICAgIC8vIG5lZWQgdG8gbWFyayBmaWJlcnMgdGhhdCBjb21taXQgaW4gYW4gaW5jb21wbGV0ZSBzdGF0ZSwgc29tZWhvdy4gRm9yXG4gICAgLy8gbm93IEknbGwgZGlzYWJsZSB0aGUgd2FybmluZyB0aGF0IG1vc3Qgb2YgdGhlIGJ1Z3MgdGhhdCB3b3VsZCB0cmlnZ2VyXG4gICAgLy8gaXQgYXJlIGVpdGhlciBleGNsdXNpdmUgdG8gY29uY3VycmVudCBtb2RlIG9yIGV4aXN0IGluIGJvdGguXG4gICAgKGN1cnJlbnQubW9kZSAmIENvbmN1cnJlbnRNb2RlKSAhPT0gTm9Nb2RlKSB7XG4gICAgICBlcnJvcignSW50ZXJuYWwgUmVhY3QgZXJyb3I6IEV4cGVjdGVkIHN0YXRpYyBmbGFnIHdhcyBtaXNzaW5nLiBQbGVhc2UgJyArICdub3RpZnkgdGhlIFJlYWN0IHRlYW0uJyk7XG4gICAgfVxuICB9XG5cbiAgZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSA9IGZhbHNlOyAvLyBUaGlzIGlzIHJlc2V0IGJ5IGNoZWNrRGlkUmVuZGVySWRIb29rXG4gIC8vIGxvY2FsSWRDb3VudGVyID0gMDtcblxuICBpZiAoZGlkUmVuZGVyVG9vRmV3SG9va3MpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlbmRlcmVkIGZld2VyIGhvb2tzIHRoYW4gZXhwZWN0ZWQuIFRoaXMgbWF5IGJlIGNhdXNlZCBieSBhbiBhY2NpZGVudGFsICcgKyAnZWFybHkgcmV0dXJuIHN0YXRlbWVudC4nKTtcbiAgfVxuXG4gIHJldHVybiBjaGlsZHJlbjtcbn1cbmZ1bmN0aW9uIGNoZWNrRGlkUmVuZGVySWRIb29rKCkge1xuICAvLyBUaGlzIHNob3VsZCBiZSBjYWxsZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgZXZlcnkgcmVuZGVyV2l0aEhvb2tzIGNhbGwuXG4gIC8vIENvbmNlcHR1YWxseSwgaXQncyBwYXJ0IG9mIHRoZSByZXR1cm4gdmFsdWUgb2YgcmVuZGVyV2l0aEhvb2tzOyBpdCdzIG9ubHkgYVxuICAvLyBzZXBhcmF0ZSBmdW5jdGlvbiB0byBhdm9pZCB1c2luZyBhbiBhcnJheSB0dXBsZS5cbiAgdmFyIGRpZFJlbmRlcklkSG9vayA9IGxvY2FsSWRDb3VudGVyICE9PSAwO1xuICBsb2NhbElkQ291bnRlciA9IDA7XG4gIHJldHVybiBkaWRSZW5kZXJJZEhvb2s7XG59XG5mdW5jdGlvbiBiYWlsb3V0SG9va3MoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIGxhbmVzKSB7XG4gIHdvcmtJblByb2dyZXNzLnVwZGF0ZVF1ZXVlID0gY3VycmVudC51cGRhdGVRdWV1ZTsgLy8gVE9ETzogRG9uJ3QgbmVlZCB0byByZXNldCB0aGUgZmxhZ3MgaGVyZSwgYmVjYXVzZSB0aGV5J3JlIHJlc2V0IGluIHRoZVxuICAvLyBjb21wbGV0ZSBwaGFzZSAoYnViYmxlUHJvcGVydGllcykuXG5cbiAgaWYgKCAod29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdEVmZmVjdHNNb2RlKSAhPT0gTm9Nb2RlKSB7XG4gICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gfihNb3VudFBhc3NpdmVEZXYgfCBNb3VudExheW91dERldiB8IFBhc3NpdmUgfCBVcGRhdGUpO1xuICB9IGVsc2Uge1xuICAgIHdvcmtJblByb2dyZXNzLmZsYWdzICY9IH4oUGFzc2l2ZSB8IFVwZGF0ZSk7XG4gIH1cblxuICBjdXJyZW50LmxhbmVzID0gcmVtb3ZlTGFuZXMoY3VycmVudC5sYW5lcywgbGFuZXMpO1xufVxuZnVuY3Rpb24gcmVzZXRIb29rc0FmdGVyVGhyb3coKSB7XG4gIC8vIFdlIGNhbiBhc3N1bWUgdGhlIHByZXZpb3VzIGRpc3BhdGNoZXIgaXMgYWx3YXlzIHRoaXMgb25lLCBzaW5jZSB3ZSBzZXQgaXRcbiAgLy8gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgcmVuZGVyIHBoYXNlIGFuZCB0aGVyZSdzIG5vIHJlLWVudHJhbmNlLlxuICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IENvbnRleHRPbmx5RGlzcGF0Y2hlcjtcblxuICBpZiAoZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSkge1xuICAgIC8vIFRoZXJlIHdlcmUgcmVuZGVyIHBoYXNlIHVwZGF0ZXMuIFRoZXNlIGFyZSBvbmx5IHZhbGlkIGZvciB0aGlzIHJlbmRlclxuICAgIC8vIHBoYXNlLCB3aGljaCB3ZSBhcmUgbm93IGFib3J0aW5nLiBSZW1vdmUgdGhlIHVwZGF0ZXMgZnJvbSB0aGUgcXVldWVzIHNvXG4gICAgLy8gdGhleSBkbyBub3QgcGVyc2lzdCB0byB0aGUgbmV4dCByZW5kZXIuIERvIG5vdCByZW1vdmUgdXBkYXRlcyBmcm9tIGhvb2tzXG4gICAgLy8gdGhhdCB3ZXJlbid0IHByb2Nlc3NlZC5cbiAgICAvL1xuICAgIC8vIE9ubHkgcmVzZXQgdGhlIHVwZGF0ZXMgZnJvbSB0aGUgcXVldWUgaWYgaXQgaGFzIGEgY2xvbmUuIElmIGl0IGRvZXNcbiAgICAvLyBub3QgaGF2ZSBhIGNsb25lLCB0aGF0IG1lYW5zIGl0IHdhc24ndCBwcm9jZXNzZWQsIGFuZCB0aGUgdXBkYXRlcyB3ZXJlXG4gICAgLy8gc2NoZWR1bGVkIGJlZm9yZSB3ZSBlbnRlcmVkIHRoZSByZW5kZXIgcGhhc2UuXG4gICAgdmFyIGhvb2sgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLm1lbW9pemVkU3RhdGU7XG5cbiAgICB3aGlsZSAoaG9vayAhPT0gbnVsbCkge1xuICAgICAgdmFyIHF1ZXVlID0gaG9vay5xdWV1ZTtcblxuICAgICAgaWYgKHF1ZXVlICE9PSBudWxsKSB7XG4gICAgICAgIHF1ZXVlLnBlbmRpbmcgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICBob29rID0gaG9vay5uZXh0O1xuICAgIH1cblxuICAgIGRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGUgPSBmYWxzZTtcbiAgfVxuXG4gIHJlbmRlckxhbmVzID0gTm9MYW5lcztcbiAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSA9IG51bGw7XG4gIGN1cnJlbnRIb29rID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3NIb29rID0gbnVsbDtcblxuICB7XG4gICAgaG9va1R5cGVzRGV2ID0gbnVsbDtcbiAgICBob29rVHlwZXNVcGRhdGVJbmRleERldiA9IC0xO1xuICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gbnVsbDtcbiAgICBpc1VwZGF0aW5nT3BhcXVlVmFsdWVJblJlbmRlclBoYXNlID0gZmFsc2U7XG4gIH1cblxuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgPSBmYWxzZTtcbiAgbG9jYWxJZENvdW50ZXIgPSAwO1xufVxuXG5mdW5jdGlvbiBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpIHtcbiAgdmFyIGhvb2sgPSB7XG4gICAgbWVtb2l6ZWRTdGF0ZTogbnVsbCxcbiAgICBiYXNlU3RhdGU6IG51bGwsXG4gICAgYmFzZVF1ZXVlOiBudWxsLFxuICAgIHF1ZXVlOiBudWxsLFxuICAgIG5leHQ6IG51bGxcbiAgfTtcblxuICBpZiAod29ya0luUHJvZ3Jlc3NIb29rID09PSBudWxsKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgaG9vayBpbiB0aGUgbGlzdFxuICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubWVtb2l6ZWRTdGF0ZSA9IHdvcmtJblByb2dyZXNzSG9vayA9IGhvb2s7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXBwZW5kIHRvIHRoZSBlbmQgb2YgdGhlIGxpc3RcbiAgICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSB3b3JrSW5Qcm9ncmVzc0hvb2submV4dCA9IGhvb2s7XG4gIH1cblxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3NIb29rO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKSB7XG4gIC8vIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBib3RoIGZvciB1cGRhdGVzIGFuZCBmb3IgcmUtcmVuZGVycyB0cmlnZ2VyZWQgYnkgYVxuICAvLyByZW5kZXIgcGhhc2UgdXBkYXRlLiBJdCBhc3N1bWVzIHRoZXJlIGlzIGVpdGhlciBhIGN1cnJlbnQgaG9vayB3ZSBjYW5cbiAgLy8gY2xvbmUsIG9yIGEgd29yay1pbi1wcm9ncmVzcyBob29rIGZyb20gYSBwcmV2aW91cyByZW5kZXIgcGFzcyB0aGF0IHdlIGNhblxuICAvLyB1c2UgYXMgYSBiYXNlLiBXaGVuIHdlIHJlYWNoIHRoZSBlbmQgb2YgdGhlIGJhc2UgbGlzdCwgd2UgbXVzdCBzd2l0Y2ggdG9cbiAgLy8gdGhlIGRpc3BhdGNoZXIgdXNlZCBmb3IgbW91bnRzLlxuICB2YXIgbmV4dEN1cnJlbnRIb29rO1xuXG4gIGlmIChjdXJyZW50SG9vayA9PT0gbnVsbCkge1xuICAgIHZhciBjdXJyZW50ID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5hbHRlcm5hdGU7XG5cbiAgICBpZiAoY3VycmVudCAhPT0gbnVsbCkge1xuICAgICAgbmV4dEN1cnJlbnRIb29rID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0Q3VycmVudEhvb2sgPSBudWxsO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBuZXh0Q3VycmVudEhvb2sgPSBjdXJyZW50SG9vay5uZXh0O1xuICB9XG5cbiAgdmFyIG5leHRXb3JrSW5Qcm9ncmVzc0hvb2s7XG5cbiAgaWYgKHdvcmtJblByb2dyZXNzSG9vayA9PT0gbnVsbCkge1xuICAgIG5leHRXb3JrSW5Qcm9ncmVzc0hvb2sgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLm1lbW9pemVkU3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgbmV4dFdvcmtJblByb2dyZXNzSG9vayA9IHdvcmtJblByb2dyZXNzSG9vay5uZXh0O1xuICB9XG5cbiAgaWYgKG5leHRXb3JrSW5Qcm9ncmVzc0hvb2sgIT09IG51bGwpIHtcbiAgICAvLyBUaGVyZSdzIGFscmVhZHkgYSB3b3JrLWluLXByb2dyZXNzLiBSZXVzZSBpdC5cbiAgICB3b3JrSW5Qcm9ncmVzc0hvb2sgPSBuZXh0V29ya0luUHJvZ3Jlc3NIb29rO1xuICAgIG5leHRXb3JrSW5Qcm9ncmVzc0hvb2sgPSB3b3JrSW5Qcm9ncmVzc0hvb2submV4dDtcbiAgICBjdXJyZW50SG9vayA9IG5leHRDdXJyZW50SG9vaztcbiAgfSBlbHNlIHtcbiAgICAvLyBDbG9uZSBmcm9tIHRoZSBjdXJyZW50IGhvb2suXG4gICAgaWYgKG5leHRDdXJyZW50SG9vayA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSZW5kZXJlZCBtb3JlIGhvb2tzIHRoYW4gZHVyaW5nIHRoZSBwcmV2aW91cyByZW5kZXIuJyk7XG4gICAgfVxuXG4gICAgY3VycmVudEhvb2sgPSBuZXh0Q3VycmVudEhvb2s7XG4gICAgdmFyIG5ld0hvb2sgPSB7XG4gICAgICBtZW1vaXplZFN0YXRlOiBjdXJyZW50SG9vay5tZW1vaXplZFN0YXRlLFxuICAgICAgYmFzZVN0YXRlOiBjdXJyZW50SG9vay5iYXNlU3RhdGUsXG4gICAgICBiYXNlUXVldWU6IGN1cnJlbnRIb29rLmJhc2VRdWV1ZSxcbiAgICAgIHF1ZXVlOiBjdXJyZW50SG9vay5xdWV1ZSxcbiAgICAgIG5leHQ6IG51bGxcbiAgICB9O1xuXG4gICAgaWYgKHdvcmtJblByb2dyZXNzSG9vayA9PT0gbnVsbCkge1xuICAgICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgaG9vayBpbiB0aGUgbGlzdC5cbiAgICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubWVtb2l6ZWRTdGF0ZSA9IHdvcmtJblByb2dyZXNzSG9vayA9IG5ld0hvb2s7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEFwcGVuZCB0byB0aGUgZW5kIG9mIHRoZSBsaXN0LlxuICAgICAgd29ya0luUHJvZ3Jlc3NIb29rID0gd29ya0luUHJvZ3Jlc3NIb29rLm5leHQgPSBuZXdIb29rO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzc0hvb2s7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUoKSB7XG4gIHJldHVybiB7XG4gICAgbGFzdEVmZmVjdDogbnVsbCxcbiAgICBzdG9yZXM6IG51bGxcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmFzaWNTdGF0ZVJlZHVjZXIoc3RhdGUsIGFjdGlvbikge1xuICAvLyAkRmxvd0ZpeE1lOiBGbG93IGRvZXNuJ3QgbGlrZSBtaXhlZCB0eXBlc1xuICByZXR1cm4gdHlwZW9mIGFjdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IGFjdGlvbihzdGF0ZSkgOiBhY3Rpb247XG59XG5cbmZ1bmN0aW9uIG1vdW50UmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KSB7XG4gIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgdmFyIGluaXRpYWxTdGF0ZTtcblxuICBpZiAoaW5pdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaW5pdGlhbFN0YXRlID0gaW5pdChpbml0aWFsQXJnKTtcbiAgfSBlbHNlIHtcbiAgICBpbml0aWFsU3RhdGUgPSBpbml0aWFsQXJnO1xuICB9XG5cbiAgaG9vay5tZW1vaXplZFN0YXRlID0gaG9vay5iYXNlU3RhdGUgPSBpbml0aWFsU3RhdGU7XG4gIHZhciBxdWV1ZSA9IHtcbiAgICBwZW5kaW5nOiBudWxsLFxuICAgIGludGVybGVhdmVkOiBudWxsLFxuICAgIGxhbmVzOiBOb0xhbmVzLFxuICAgIGRpc3BhdGNoOiBudWxsLFxuICAgIGxhc3RSZW5kZXJlZFJlZHVjZXI6IHJlZHVjZXIsXG4gICAgbGFzdFJlbmRlcmVkU3RhdGU6IGluaXRpYWxTdGF0ZVxuICB9O1xuICBob29rLnF1ZXVlID0gcXVldWU7XG4gIHZhciBkaXNwYXRjaCA9IHF1ZXVlLmRpc3BhdGNoID0gZGlzcGF0Y2hSZWR1Y2VyQWN0aW9uLmJpbmQobnVsbCwgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSwgcXVldWUpO1xuICByZXR1cm4gW2hvb2subWVtb2l6ZWRTdGF0ZSwgZGlzcGF0Y2hdO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVSZWR1Y2VyKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgdmFyIHF1ZXVlID0gaG9vay5xdWV1ZTtcblxuICBpZiAocXVldWUgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Nob3VsZCBoYXZlIGEgcXVldWUuIFRoaXMgaXMgbGlrZWx5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgfVxuXG4gIHF1ZXVlLmxhc3RSZW5kZXJlZFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudCA9IGN1cnJlbnRIb29rOyAvLyBUaGUgbGFzdCByZWJhc2UgdXBkYXRlIHRoYXQgaXMgTk9UIHBhcnQgb2YgdGhlIGJhc2Ugc3RhdGUuXG5cbiAgdmFyIGJhc2VRdWV1ZSA9IGN1cnJlbnQuYmFzZVF1ZXVlOyAvLyBUaGUgbGFzdCBwZW5kaW5nIHVwZGF0ZSB0aGF0IGhhc24ndCBiZWVuIHByb2Nlc3NlZCB5ZXQuXG5cbiAgdmFyIHBlbmRpbmdRdWV1ZSA9IHF1ZXVlLnBlbmRpbmc7XG5cbiAgaWYgKHBlbmRpbmdRdWV1ZSAhPT0gbnVsbCkge1xuICAgIC8vIFdlIGhhdmUgbmV3IHVwZGF0ZXMgdGhhdCBoYXZlbid0IGJlZW4gcHJvY2Vzc2VkIHlldC5cbiAgICAvLyBXZSdsbCBhZGQgdGhlbSB0byB0aGUgYmFzZSBxdWV1ZS5cbiAgICBpZiAoYmFzZVF1ZXVlICE9PSBudWxsKSB7XG4gICAgICAvLyBNZXJnZSB0aGUgcGVuZGluZyBxdWV1ZSBhbmQgdGhlIGJhc2UgcXVldWUuXG4gICAgICB2YXIgYmFzZUZpcnN0ID0gYmFzZVF1ZXVlLm5leHQ7XG4gICAgICB2YXIgcGVuZGluZ0ZpcnN0ID0gcGVuZGluZ1F1ZXVlLm5leHQ7XG4gICAgICBiYXNlUXVldWUubmV4dCA9IHBlbmRpbmdGaXJzdDtcbiAgICAgIHBlbmRpbmdRdWV1ZS5uZXh0ID0gYmFzZUZpcnN0O1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmIChjdXJyZW50LmJhc2VRdWV1ZSAhPT0gYmFzZVF1ZXVlKSB7XG4gICAgICAgIC8vIEludGVybmFsIGludmFyaWFudCB0aGF0IHNob3VsZCBuZXZlciBoYXBwZW4sIGJ1dCBmZWFzaWJseSBjb3VsZCBpblxuICAgICAgICAvLyB0aGUgZnV0dXJlIGlmIHdlIGltcGxlbWVudCByZXN1bWluZywgb3Igc29tZSBmb3JtIG9mIHRoYXQuXG4gICAgICAgIGVycm9yKCdJbnRlcm5hbCBlcnJvcjogRXhwZWN0ZWQgd29yay1pbi1wcm9ncmVzcyBxdWV1ZSB0byBiZSBhIGNsb25lLiAnICsgJ1RoaXMgaXMgYSBidWcgaW4gUmVhY3QuJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY3VycmVudC5iYXNlUXVldWUgPSBiYXNlUXVldWUgPSBwZW5kaW5nUXVldWU7XG4gICAgcXVldWUucGVuZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoYmFzZVF1ZXVlICE9PSBudWxsKSB7XG4gICAgLy8gV2UgaGF2ZSBhIHF1ZXVlIHRvIHByb2Nlc3MuXG4gICAgdmFyIGZpcnN0ID0gYmFzZVF1ZXVlLm5leHQ7XG4gICAgdmFyIG5ld1N0YXRlID0gY3VycmVudC5iYXNlU3RhdGU7XG4gICAgdmFyIG5ld0Jhc2VTdGF0ZSA9IG51bGw7XG4gICAgdmFyIG5ld0Jhc2VRdWV1ZUZpcnN0ID0gbnVsbDtcbiAgICB2YXIgbmV3QmFzZVF1ZXVlTGFzdCA9IG51bGw7XG4gICAgdmFyIHVwZGF0ZSA9IGZpcnN0O1xuXG4gICAgZG8ge1xuICAgICAgdmFyIHVwZGF0ZUxhbmUgPSB1cGRhdGUubGFuZTtcblxuICAgICAgaWYgKCFpc1N1YnNldE9mTGFuZXMocmVuZGVyTGFuZXMsIHVwZGF0ZUxhbmUpKSB7XG4gICAgICAgIC8vIFByaW9yaXR5IGlzIGluc3VmZmljaWVudC4gU2tpcCB0aGlzIHVwZGF0ZS4gSWYgdGhpcyBpcyB0aGUgZmlyc3RcbiAgICAgICAgLy8gc2tpcHBlZCB1cGRhdGUsIHRoZSBwcmV2aW91cyB1cGRhdGUvc3RhdGUgaXMgdGhlIG5ldyBiYXNlXG4gICAgICAgIC8vIHVwZGF0ZS9zdGF0ZS5cbiAgICAgICAgdmFyIGNsb25lID0ge1xuICAgICAgICAgIGxhbmU6IHVwZGF0ZUxhbmUsXG4gICAgICAgICAgYWN0aW9uOiB1cGRhdGUuYWN0aW9uLFxuICAgICAgICAgIGhhc0VhZ2VyU3RhdGU6IHVwZGF0ZS5oYXNFYWdlclN0YXRlLFxuICAgICAgICAgIGVhZ2VyU3RhdGU6IHVwZGF0ZS5lYWdlclN0YXRlLFxuICAgICAgICAgIG5leHQ6IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobmV3QmFzZVF1ZXVlTGFzdCA9PT0gbnVsbCkge1xuICAgICAgICAgIG5ld0Jhc2VRdWV1ZUZpcnN0ID0gbmV3QmFzZVF1ZXVlTGFzdCA9IGNsb25lO1xuICAgICAgICAgIG5ld0Jhc2VTdGF0ZSA9IG5ld1N0YXRlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0Jhc2VRdWV1ZUxhc3QgPSBuZXdCYXNlUXVldWVMYXN0Lm5leHQgPSBjbG9uZTtcbiAgICAgICAgfSAvLyBVcGRhdGUgdGhlIHJlbWFpbmluZyBwcmlvcml0eSBpbiB0aGUgcXVldWUuXG4gICAgICAgIC8vIFRPRE86IERvbid0IG5lZWQgdG8gYWNjdW11bGF0ZSB0aGlzLiBJbnN0ZWFkLCB3ZSBjYW4gcmVtb3ZlXG4gICAgICAgIC8vIHJlbmRlckxhbmVzIGZyb20gdGhlIG9yaWdpbmFsIGxhbmVzLlxuXG5cbiAgICAgICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5sYW5lcyA9IG1lcmdlTGFuZXMoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5sYW5lcywgdXBkYXRlTGFuZSk7XG4gICAgICAgIG1hcmtTa2lwcGVkVXBkYXRlTGFuZXModXBkYXRlTGFuZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGlzIHVwZGF0ZSBkb2VzIGhhdmUgc3VmZmljaWVudCBwcmlvcml0eS5cbiAgICAgICAgaWYgKG5ld0Jhc2VRdWV1ZUxhc3QgIT09IG51bGwpIHtcbiAgICAgICAgICB2YXIgX2Nsb25lID0ge1xuICAgICAgICAgICAgLy8gVGhpcyB1cGRhdGUgaXMgZ29pbmcgdG8gYmUgY29tbWl0dGVkIHNvIHdlIG5ldmVyIHdhbnQgdW5jb21taXRcbiAgICAgICAgICAgIC8vIGl0LiBVc2luZyBOb0xhbmUgd29ya3MgYmVjYXVzZSAwIGlzIGEgc3Vic2V0IG9mIGFsbCBiaXRtYXNrcywgc29cbiAgICAgICAgICAgIC8vIHRoaXMgd2lsbCBuZXZlciBiZSBza2lwcGVkIGJ5IHRoZSBjaGVjayBhYm92ZS5cbiAgICAgICAgICAgIGxhbmU6IE5vTGFuZSxcbiAgICAgICAgICAgIGFjdGlvbjogdXBkYXRlLmFjdGlvbixcbiAgICAgICAgICAgIGhhc0VhZ2VyU3RhdGU6IHVwZGF0ZS5oYXNFYWdlclN0YXRlLFxuICAgICAgICAgICAgZWFnZXJTdGF0ZTogdXBkYXRlLmVhZ2VyU3RhdGUsXG4gICAgICAgICAgICBuZXh0OiBudWxsXG4gICAgICAgICAgfTtcbiAgICAgICAgICBuZXdCYXNlUXVldWVMYXN0ID0gbmV3QmFzZVF1ZXVlTGFzdC5uZXh0ID0gX2Nsb25lO1xuICAgICAgICB9IC8vIFByb2Nlc3MgdGhpcyB1cGRhdGUuXG5cblxuICAgICAgICBpZiAodXBkYXRlLmhhc0VhZ2VyU3RhdGUpIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIHVwZGF0ZSBpcyBhIHN0YXRlIHVwZGF0ZSAobm90IGEgcmVkdWNlcikgYW5kIHdhcyBwcm9jZXNzZWQgZWFnZXJseSxcbiAgICAgICAgICAvLyB3ZSBjYW4gdXNlIHRoZSBlYWdlcmx5IGNvbXB1dGVkIHN0YXRlXG4gICAgICAgICAgbmV3U3RhdGUgPSB1cGRhdGUuZWFnZXJTdGF0ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgYWN0aW9uID0gdXBkYXRlLmFjdGlvbjtcbiAgICAgICAgICBuZXdTdGF0ZSA9IHJlZHVjZXIobmV3U3RhdGUsIGFjdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdXBkYXRlID0gdXBkYXRlLm5leHQ7XG4gICAgfSB3aGlsZSAodXBkYXRlICE9PSBudWxsICYmIHVwZGF0ZSAhPT0gZmlyc3QpO1xuXG4gICAgaWYgKG5ld0Jhc2VRdWV1ZUxhc3QgPT09IG51bGwpIHtcbiAgICAgIG5ld0Jhc2VTdGF0ZSA9IG5ld1N0YXRlO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdCYXNlUXVldWVMYXN0Lm5leHQgPSBuZXdCYXNlUXVldWVGaXJzdDtcbiAgICB9IC8vIE1hcmsgdGhhdCB0aGUgZmliZXIgcGVyZm9ybWVkIHdvcmssIGJ1dCBvbmx5IGlmIHRoZSBuZXcgc3RhdGUgaXNcbiAgICAvLyBkaWZmZXJlbnQgZnJvbSB0aGUgY3VycmVudCBzdGF0ZS5cblxuXG4gICAgaWYgKCFvYmplY3RJcyhuZXdTdGF0ZSwgaG9vay5tZW1vaXplZFN0YXRlKSkge1xuICAgICAgbWFya1dvcmtJblByb2dyZXNzUmVjZWl2ZWRVcGRhdGUoKTtcbiAgICB9XG5cbiAgICBob29rLm1lbW9pemVkU3RhdGUgPSBuZXdTdGF0ZTtcbiAgICBob29rLmJhc2VTdGF0ZSA9IG5ld0Jhc2VTdGF0ZTtcbiAgICBob29rLmJhc2VRdWV1ZSA9IG5ld0Jhc2VRdWV1ZUxhc3Q7XG4gICAgcXVldWUubGFzdFJlbmRlcmVkU3RhdGUgPSBuZXdTdGF0ZTtcbiAgfSAvLyBJbnRlcmxlYXZlZCB1cGRhdGVzIGFyZSBzdG9yZWQgb24gYSBzZXBhcmF0ZSBxdWV1ZS4gV2UgYXJlbid0IGdvaW5nIHRvXG4gIC8vIHByb2Nlc3MgdGhlbSBkdXJpbmcgdGhpcyByZW5kZXIsIGJ1dCB3ZSBkbyBuZWVkIHRvIHRyYWNrIHdoaWNoIGxhbmVzXG4gIC8vIGFyZSByZW1haW5pbmcuXG5cblxuICB2YXIgbGFzdEludGVybGVhdmVkID0gcXVldWUuaW50ZXJsZWF2ZWQ7XG5cbiAgaWYgKGxhc3RJbnRlcmxlYXZlZCAhPT0gbnVsbCkge1xuICAgIHZhciBpbnRlcmxlYXZlZCA9IGxhc3RJbnRlcmxlYXZlZDtcblxuICAgIGRvIHtcbiAgICAgIHZhciBpbnRlcmxlYXZlZExhbmUgPSBpbnRlcmxlYXZlZC5sYW5lO1xuICAgICAgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5sYW5lcyA9IG1lcmdlTGFuZXMoY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS5sYW5lcywgaW50ZXJsZWF2ZWRMYW5lKTtcbiAgICAgIG1hcmtTa2lwcGVkVXBkYXRlTGFuZXMoaW50ZXJsZWF2ZWRMYW5lKTtcbiAgICAgIGludGVybGVhdmVkID0gaW50ZXJsZWF2ZWQubmV4dDtcbiAgICB9IHdoaWxlIChpbnRlcmxlYXZlZCAhPT0gbGFzdEludGVybGVhdmVkKTtcbiAgfSBlbHNlIGlmIChiYXNlUXVldWUgPT09IG51bGwpIHtcbiAgICAvLyBgcXVldWUubGFuZXNgIGlzIHVzZWQgZm9yIGVudGFuZ2xpbmcgdHJhbnNpdGlvbnMuIFdlIGNhbiBzZXQgaXQgYmFjayB0b1xuICAgIC8vIHplcm8gb25jZSB0aGUgcXVldWUgaXMgZW1wdHkuXG4gICAgcXVldWUubGFuZXMgPSBOb0xhbmVzO1xuICB9XG5cbiAgdmFyIGRpc3BhdGNoID0gcXVldWUuZGlzcGF0Y2g7XG4gIHJldHVybiBbaG9vay5tZW1vaXplZFN0YXRlLCBkaXNwYXRjaF07XG59XG5cbmZ1bmN0aW9uIHJlcmVuZGVyUmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHZhciBxdWV1ZSA9IGhvb2sucXVldWU7XG5cbiAgaWYgKHF1ZXVlID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTaG91bGQgaGF2ZSBhIHF1ZXVlLiBUaGlzIGlzIGxpa2VseSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gIH1cblxuICBxdWV1ZS5sYXN0UmVuZGVyZWRSZWR1Y2VyID0gcmVkdWNlcjsgLy8gVGhpcyBpcyBhIHJlLXJlbmRlci4gQXBwbHkgdGhlIG5ldyByZW5kZXIgcGhhc2UgdXBkYXRlcyB0byB0aGUgcHJldmlvdXNcbiAgLy8gd29yay1pbi1wcm9ncmVzcyBob29rLlxuXG4gIHZhciBkaXNwYXRjaCA9IHF1ZXVlLmRpc3BhdGNoO1xuICB2YXIgbGFzdFJlbmRlclBoYXNlVXBkYXRlID0gcXVldWUucGVuZGluZztcbiAgdmFyIG5ld1N0YXRlID0gaG9vay5tZW1vaXplZFN0YXRlO1xuXG4gIGlmIChsYXN0UmVuZGVyUGhhc2VVcGRhdGUgIT09IG51bGwpIHtcbiAgICAvLyBUaGUgcXVldWUgZG9lc24ndCBwZXJzaXN0IHBhc3QgdGhpcyByZW5kZXIgcGFzcy5cbiAgICBxdWV1ZS5wZW5kaW5nID0gbnVsbDtcbiAgICB2YXIgZmlyc3RSZW5kZXJQaGFzZVVwZGF0ZSA9IGxhc3RSZW5kZXJQaGFzZVVwZGF0ZS5uZXh0O1xuICAgIHZhciB1cGRhdGUgPSBmaXJzdFJlbmRlclBoYXNlVXBkYXRlO1xuXG4gICAgZG8ge1xuICAgICAgLy8gUHJvY2VzcyB0aGlzIHJlbmRlciBwaGFzZSB1cGRhdGUuIFdlIGRvbid0IGhhdmUgdG8gY2hlY2sgdGhlXG4gICAgICAvLyBwcmlvcml0eSBiZWNhdXNlIGl0IHdpbGwgYWx3YXlzIGJlIHRoZSBzYW1lIGFzIHRoZSBjdXJyZW50XG4gICAgICAvLyByZW5kZXIncy5cbiAgICAgIHZhciBhY3Rpb24gPSB1cGRhdGUuYWN0aW9uO1xuICAgICAgbmV3U3RhdGUgPSByZWR1Y2VyKG5ld1N0YXRlLCBhY3Rpb24pO1xuICAgICAgdXBkYXRlID0gdXBkYXRlLm5leHQ7XG4gICAgfSB3aGlsZSAodXBkYXRlICE9PSBmaXJzdFJlbmRlclBoYXNlVXBkYXRlKTsgLy8gTWFyayB0aGF0IHRoZSBmaWJlciBwZXJmb3JtZWQgd29yaywgYnV0IG9ubHkgaWYgdGhlIG5ldyBzdGF0ZSBpc1xuICAgIC8vIGRpZmZlcmVudCBmcm9tIHRoZSBjdXJyZW50IHN0YXRlLlxuXG5cbiAgICBpZiAoIW9iamVjdElzKG5ld1N0YXRlLCBob29rLm1lbW9pemVkU3RhdGUpKSB7XG4gICAgICBtYXJrV29ya0luUHJvZ3Jlc3NSZWNlaXZlZFVwZGF0ZSgpO1xuICAgIH1cblxuICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlOyAvLyBEb24ndCBwZXJzaXN0IHRoZSBzdGF0ZSBhY2N1bXVsYXRlZCBmcm9tIHRoZSByZW5kZXIgcGhhc2UgdXBkYXRlcyB0b1xuICAgIC8vIHRoZSBiYXNlIHN0YXRlIHVubGVzcyB0aGUgcXVldWUgaXMgZW1wdHkuXG4gICAgLy8gVE9ETzogTm90IHN1cmUgaWYgdGhpcyBpcyB0aGUgZGVzaXJlZCBzZW1hbnRpY3MsIGJ1dCBpdCdzIHdoYXQgd2VcbiAgICAvLyBkbyBmb3IgZ0RTRlAuIEkgY2FuJ3QgcmVtZW1iZXIgd2h5LlxuXG4gICAgaWYgKGhvb2suYmFzZVF1ZXVlID09PSBudWxsKSB7XG4gICAgICBob29rLmJhc2VTdGF0ZSA9IG5ld1N0YXRlO1xuICAgIH1cblxuICAgIHF1ZXVlLmxhc3RSZW5kZXJlZFN0YXRlID0gbmV3U3RhdGU7XG4gIH1cblxuICByZXR1cm4gW25ld1N0YXRlLCBkaXNwYXRjaF07XG59XG5cbmZ1bmN0aW9uIG1vdW50TXV0YWJsZVNvdXJjZShzb3VyY2UsIGdldFNuYXBzaG90LCBzdWJzY3JpYmUpIHtcbiAge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlTXV0YWJsZVNvdXJjZShzb3VyY2UsIGdldFNuYXBzaG90LCBzdWJzY3JpYmUpIHtcbiAge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbW91bnRTeW5jRXh0ZXJuYWxTdG9yZShzdWJzY3JpYmUsIGdldFNuYXBzaG90LCBnZXRTZXJ2ZXJTbmFwc2hvdCkge1xuICB2YXIgZmliZXIgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxO1xuICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHZhciBuZXh0U25hcHNob3Q7XG4gIHZhciBpc0h5ZHJhdGluZyA9IGdldElzSHlkcmF0aW5nKCk7XG5cbiAgaWYgKGlzSHlkcmF0aW5nKSB7XG4gICAgaWYgKGdldFNlcnZlclNuYXBzaG90ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWlzc2luZyBnZXRTZXJ2ZXJTbmFwc2hvdCwgd2hpY2ggaXMgcmVxdWlyZWQgZm9yICcgKyAnc2VydmVyLXJlbmRlcmVkIGNvbnRlbnQuIFdpbGwgcmV2ZXJ0IHRvIGNsaWVudCByZW5kZXJpbmcuJyk7XG4gICAgfVxuXG4gICAgbmV4dFNuYXBzaG90ID0gZ2V0U2VydmVyU25hcHNob3QoKTtcblxuICAgIHtcbiAgICAgIGlmICghZGlkV2FyblVuY2FjaGVkR2V0U25hcHNob3QpIHtcbiAgICAgICAgaWYgKG5leHRTbmFwc2hvdCAhPT0gZ2V0U2VydmVyU25hcHNob3QoKSkge1xuICAgICAgICAgIGVycm9yKCdUaGUgcmVzdWx0IG9mIGdldFNlcnZlclNuYXBzaG90IHNob3VsZCBiZSBjYWNoZWQgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcCcpO1xuXG4gICAgICAgICAgZGlkV2FyblVuY2FjaGVkR2V0U25hcHNob3QgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG5leHRTbmFwc2hvdCA9IGdldFNuYXBzaG90KCk7XG5cbiAgICB7XG4gICAgICBpZiAoIWRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90KSB7XG4gICAgICAgIHZhciBjYWNoZWRTbmFwc2hvdCA9IGdldFNuYXBzaG90KCk7XG5cbiAgICAgICAgaWYgKCFvYmplY3RJcyhuZXh0U25hcHNob3QsIGNhY2hlZFNuYXBzaG90KSkge1xuICAgICAgICAgIGVycm9yKCdUaGUgcmVzdWx0IG9mIGdldFNuYXBzaG90IHNob3VsZCBiZSBjYWNoZWQgdG8gYXZvaWQgYW4gaW5maW5pdGUgbG9vcCcpO1xuXG4gICAgICAgICAgZGlkV2FyblVuY2FjaGVkR2V0U25hcHNob3QgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSAvLyBVbmxlc3Mgd2UncmUgcmVuZGVyaW5nIGEgYmxvY2tpbmcgbGFuZSwgc2NoZWR1bGUgYSBjb25zaXN0ZW5jeSBjaGVjay5cbiAgICAvLyBSaWdodCBiZWZvcmUgY29tbWl0dGluZywgd2Ugd2lsbCB3YWxrIHRoZSB0cmVlIGFuZCBjaGVjayBpZiBhbnkgb2YgdGhlXG4gICAgLy8gc3RvcmVzIHdlcmUgbXV0YXRlZC5cbiAgICAvL1xuICAgIC8vIFdlIHdvbid0IGRvIHRoaXMgaWYgd2UncmUgaHlkcmF0aW5nIHNlcnZlci1yZW5kZXJlZCBjb250ZW50LCBiZWNhdXNlIGlmXG4gICAgLy8gdGhlIGNvbnRlbnQgaXMgc3RhbGUsIGl0J3MgYWxyZWFkeSB2aXNpYmxlIGFueXdheS4gSW5zdGVhZCB3ZSdsbCBwYXRjaFxuICAgIC8vIGl0IHVwIGluIGEgcGFzc2l2ZSBlZmZlY3QuXG5cblxuICAgIHZhciByb290ID0gZ2V0V29ya0luUHJvZ3Jlc3NSb290KCk7XG5cbiAgICBpZiAocm9vdCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhIHdvcmstaW4tcHJvZ3Jlc3Mgcm9vdC4gVGhpcyBpcyBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuXG4gICAgaWYgKCFpbmNsdWRlc0Jsb2NraW5nTGFuZShyb290LCByZW5kZXJMYW5lcykpIHtcbiAgICAgIHB1c2hTdG9yZUNvbnNpc3RlbmN5Q2hlY2soZmliZXIsIGdldFNuYXBzaG90LCBuZXh0U25hcHNob3QpO1xuICAgIH1cbiAgfSAvLyBSZWFkIHRoZSBjdXJyZW50IHNuYXBzaG90IGZyb20gdGhlIHN0b3JlIG9uIGV2ZXJ5IHJlbmRlci4gVGhpcyBicmVha3MgdGhlXG4gIC8vIG5vcm1hbCBydWxlcyBvZiBSZWFjdCwgYW5kIG9ubHkgd29ya3MgYmVjYXVzZSBzdG9yZSB1cGRhdGVzIGFyZVxuICAvLyBhbHdheXMgc3luY2hyb25vdXMuXG5cblxuICBob29rLm1lbW9pemVkU3RhdGUgPSBuZXh0U25hcHNob3Q7XG4gIHZhciBpbnN0ID0ge1xuICAgIHZhbHVlOiBuZXh0U25hcHNob3QsXG4gICAgZ2V0U25hcHNob3Q6IGdldFNuYXBzaG90XG4gIH07XG4gIGhvb2sucXVldWUgPSBpbnN0OyAvLyBTY2hlZHVsZSBhbiBlZmZlY3QgdG8gc3Vic2NyaWJlIHRvIHRoZSBzdG9yZS5cblxuICBtb3VudEVmZmVjdChzdWJzY3JpYmVUb1N0b3JlLmJpbmQobnVsbCwgZmliZXIsIGluc3QsIHN1YnNjcmliZSksIFtzdWJzY3JpYmVdKTsgLy8gU2NoZWR1bGUgYW4gZWZmZWN0IHRvIHVwZGF0ZSB0aGUgbXV0YWJsZSBpbnN0YW5jZSBmaWVsZHMuIFdlIHdpbGwgdXBkYXRlXG4gIC8vIHRoaXMgd2hlbmV2ZXIgc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgb3IgdmFsdWUgY2hhbmdlcy4gQmVjYXVzZSB0aGVyZSdzIG5vXG4gIC8vIGNsZWFuLXVwIGZ1bmN0aW9uLCBhbmQgd2UgdHJhY2sgdGhlIGRlcHMgY29ycmVjdGx5LCB3ZSBjYW4gY2FsbCBwdXNoRWZmZWN0XG4gIC8vIGRpcmVjdGx5LCB3aXRob3V0IHN0b3JpbmcgYW55IGFkZGl0aW9uYWwgc3RhdGUuIEZvciB0aGUgc2FtZSByZWFzb24sIHdlXG4gIC8vIGRvbid0IG5lZWQgdG8gc2V0IGEgc3RhdGljIGZsYWcsIGVpdGhlci5cbiAgLy8gVE9ETzogV2UgY2FuIG1vdmUgdGhpcyB0byB0aGUgcGFzc2l2ZSBwaGFzZSBvbmNlIHdlIGFkZCBhIHByZS1jb21taXRcbiAgLy8gY29uc2lzdGVuY3kgY2hlY2suIFNlZSB0aGUgbmV4dCBjb21tZW50LlxuXG4gIGZpYmVyLmZsYWdzIHw9IFBhc3NpdmU7XG4gIHB1c2hFZmZlY3QoSGFzRWZmZWN0IHwgUGFzc2l2ZSQxLCB1cGRhdGVTdG9yZUluc3RhbmNlLmJpbmQobnVsbCwgZmliZXIsIGluc3QsIG5leHRTbmFwc2hvdCwgZ2V0U25hcHNob3QpLCB1bmRlZmluZWQsIG51bGwpO1xuICByZXR1cm4gbmV4dFNuYXBzaG90O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTeW5jRXh0ZXJuYWxTdG9yZShzdWJzY3JpYmUsIGdldFNuYXBzaG90LCBnZXRTZXJ2ZXJTbmFwc2hvdCkge1xuICB2YXIgZmliZXIgPSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxO1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpOyAvLyBSZWFkIHRoZSBjdXJyZW50IHNuYXBzaG90IGZyb20gdGhlIHN0b3JlIG9uIGV2ZXJ5IHJlbmRlci4gVGhpcyBicmVha3MgdGhlXG4gIC8vIG5vcm1hbCBydWxlcyBvZiBSZWFjdCwgYW5kIG9ubHkgd29ya3MgYmVjYXVzZSBzdG9yZSB1cGRhdGVzIGFyZVxuICAvLyBhbHdheXMgc3luY2hyb25vdXMuXG5cbiAgdmFyIG5leHRTbmFwc2hvdCA9IGdldFNuYXBzaG90KCk7XG5cbiAge1xuICAgIGlmICghZGlkV2FyblVuY2FjaGVkR2V0U25hcHNob3QpIHtcbiAgICAgIHZhciBjYWNoZWRTbmFwc2hvdCA9IGdldFNuYXBzaG90KCk7XG5cbiAgICAgIGlmICghb2JqZWN0SXMobmV4dFNuYXBzaG90LCBjYWNoZWRTbmFwc2hvdCkpIHtcbiAgICAgICAgZXJyb3IoJ1RoZSByZXN1bHQgb2YgZ2V0U25hcHNob3Qgc2hvdWxkIGJlIGNhY2hlZCB0byBhdm9pZCBhbiBpbmZpbml0ZSBsb29wJyk7XG5cbiAgICAgICAgZGlkV2FyblVuY2FjaGVkR2V0U25hcHNob3QgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBwcmV2U25hcHNob3QgPSBob29rLm1lbW9pemVkU3RhdGU7XG4gIHZhciBzbmFwc2hvdENoYW5nZWQgPSAhb2JqZWN0SXMocHJldlNuYXBzaG90LCBuZXh0U25hcHNob3QpO1xuXG4gIGlmIChzbmFwc2hvdENoYW5nZWQpIHtcbiAgICBob29rLm1lbW9pemVkU3RhdGUgPSBuZXh0U25hcHNob3Q7XG4gICAgbWFya1dvcmtJblByb2dyZXNzUmVjZWl2ZWRVcGRhdGUoKTtcbiAgfVxuXG4gIHZhciBpbnN0ID0gaG9vay5xdWV1ZTtcbiAgdXBkYXRlRWZmZWN0KHN1YnNjcmliZVRvU3RvcmUuYmluZChudWxsLCBmaWJlciwgaW5zdCwgc3Vic2NyaWJlKSwgW3N1YnNjcmliZV0pOyAvLyBXaGVuZXZlciBnZXRTbmFwc2hvdCBvciBzdWJzY3JpYmUgY2hhbmdlcywgd2UgbmVlZCB0byBjaGVjayBpbiB0aGVcbiAgLy8gY29tbWl0IHBoYXNlIGlmIHRoZXJlIHdhcyBhbiBpbnRlcmxlYXZlZCBtdXRhdGlvbi4gSW4gY29uY3VycmVudCBtb2RlXG4gIC8vIHRoaXMgY2FuIGhhcHBlbiBhbGwgdGhlIHRpbWUsIGJ1dCBldmVuIGluIHN5bmNocm9ub3VzIG1vZGUsIGFuIGVhcmxpZXJcbiAgLy8gZWZmZWN0IG1heSBoYXZlIG11dGF0ZWQgdGhlIHN0b3JlLlxuXG4gIGlmIChpbnN0LmdldFNuYXBzaG90ICE9PSBnZXRTbmFwc2hvdCB8fCBzbmFwc2hvdENoYW5nZWQgfHwgLy8gQ2hlY2sgaWYgdGhlIHN1c2JjcmliZSBmdW5jdGlvbiBjaGFuZ2VkLiBXZSBjYW4gc2F2ZSBzb21lIG1lbW9yeSBieVxuICAvLyBjaGVja2luZyB3aGV0aGVyIHdlIHNjaGVkdWxlZCBhIHN1YnNjcmlwdGlvbiBlZmZlY3QgYWJvdmUuXG4gIHdvcmtJblByb2dyZXNzSG9vayAhPT0gbnVsbCAmJiB3b3JrSW5Qcm9ncmVzc0hvb2subWVtb2l6ZWRTdGF0ZS50YWcgJiBIYXNFZmZlY3QpIHtcbiAgICBmaWJlci5mbGFncyB8PSBQYXNzaXZlO1xuICAgIHB1c2hFZmZlY3QoSGFzRWZmZWN0IHwgUGFzc2l2ZSQxLCB1cGRhdGVTdG9yZUluc3RhbmNlLmJpbmQobnVsbCwgZmliZXIsIGluc3QsIG5leHRTbmFwc2hvdCwgZ2V0U25hcHNob3QpLCB1bmRlZmluZWQsIG51bGwpOyAvLyBVbmxlc3Mgd2UncmUgcmVuZGVyaW5nIGEgYmxvY2tpbmcgbGFuZSwgc2NoZWR1bGUgYSBjb25zaXN0ZW5jeSBjaGVjay5cbiAgICAvLyBSaWdodCBiZWZvcmUgY29tbWl0dGluZywgd2Ugd2lsbCB3YWxrIHRoZSB0cmVlIGFuZCBjaGVjayBpZiBhbnkgb2YgdGhlXG4gICAgLy8gc3RvcmVzIHdlcmUgbXV0YXRlZC5cblxuICAgIHZhciByb290ID0gZ2V0V29ya0luUHJvZ3Jlc3NSb290KCk7XG5cbiAgICBpZiAocm9vdCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhIHdvcmstaW4tcHJvZ3Jlc3Mgcm9vdC4gVGhpcyBpcyBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuXG4gICAgaWYgKCFpbmNsdWRlc0Jsb2NraW5nTGFuZShyb290LCByZW5kZXJMYW5lcykpIHtcbiAgICAgIHB1c2hTdG9yZUNvbnNpc3RlbmN5Q2hlY2soZmliZXIsIGdldFNuYXBzaG90LCBuZXh0U25hcHNob3QpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXh0U25hcHNob3Q7XG59XG5cbmZ1bmN0aW9uIHB1c2hTdG9yZUNvbnNpc3RlbmN5Q2hlY2soZmliZXIsIGdldFNuYXBzaG90LCByZW5kZXJlZFNuYXBzaG90KSB7XG4gIGZpYmVyLmZsYWdzIHw9IFN0b3JlQ29uc2lzdGVuY3k7XG4gIHZhciBjaGVjayA9IHtcbiAgICBnZXRTbmFwc2hvdDogZ2V0U25hcHNob3QsXG4gICAgdmFsdWU6IHJlbmRlcmVkU25hcHNob3RcbiAgfTtcbiAgdmFyIGNvbXBvbmVudFVwZGF0ZVF1ZXVlID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS51cGRhdGVRdWV1ZTtcblxuICBpZiAoY29tcG9uZW50VXBkYXRlUXVldWUgPT09IG51bGwpIHtcbiAgICBjb21wb25lbnRVcGRhdGVRdWV1ZSA9IGNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUoKTtcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLnVwZGF0ZVF1ZXVlID0gY29tcG9uZW50VXBkYXRlUXVldWU7XG4gICAgY29tcG9uZW50VXBkYXRlUXVldWUuc3RvcmVzID0gW2NoZWNrXTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgc3RvcmVzID0gY29tcG9uZW50VXBkYXRlUXVldWUuc3RvcmVzO1xuXG4gICAgaWYgKHN0b3JlcyA9PT0gbnVsbCkge1xuICAgICAgY29tcG9uZW50VXBkYXRlUXVldWUuc3RvcmVzID0gW2NoZWNrXTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RvcmVzLnB1c2goY2hlY2spO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVTdG9yZUluc3RhbmNlKGZpYmVyLCBpbnN0LCBuZXh0U25hcHNob3QsIGdldFNuYXBzaG90KSB7XG4gIC8vIFRoZXNlIGFyZSB1cGRhdGVkIGluIHRoZSBwYXNzaXZlIHBoYXNlXG4gIGluc3QudmFsdWUgPSBuZXh0U25hcHNob3Q7XG4gIGluc3QuZ2V0U25hcHNob3QgPSBnZXRTbmFwc2hvdDsgLy8gU29tZXRoaW5nIG1heSBoYXZlIGJlZW4gbXV0YXRlZCBpbiBiZXR3ZWVuIHJlbmRlciBhbmQgY29tbWl0LiBUaGlzIGNvdWxkXG4gIC8vIGhhdmUgYmVlbiBpbiBhbiBldmVudCB0aGF0IGZpcmVkIGJlZm9yZSB0aGUgcGFzc2l2ZSBlZmZlY3RzLCBvciBpdCBjb3VsZFxuICAvLyBoYXZlIGJlZW4gaW4gYSBsYXlvdXQgZWZmZWN0LiBJbiB0aGF0IGNhc2UsIHdlIHdvdWxkIGhhdmUgdXNlZCB0aGUgb2xkXG4gIC8vIHNuYXBzaG8gYW5kIGdldFNuYXBzaG90IHZhbHVlcyB0byBiYWlsIG91dC4gV2UgbmVlZCB0byBjaGVjayBvbmUgbW9yZSB0aW1lLlxuXG4gIGlmIChjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpKSB7XG4gICAgLy8gRm9yY2UgYSByZS1yZW5kZXIuXG4gICAgZm9yY2VTdG9yZVJlcmVuZGVyKGZpYmVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmVUb1N0b3JlKGZpYmVyLCBpbnN0LCBzdWJzY3JpYmUpIHtcbiAgdmFyIGhhbmRsZVN0b3JlQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgIC8vIFRoZSBzdG9yZSBjaGFuZ2VkLiBDaGVjayBpZiB0aGUgc25hcHNob3QgY2hhbmdlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHdlXG4gICAgLy8gcmVhZCBmcm9tIHRoZSBzdG9yZS5cbiAgICBpZiAoY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSkge1xuICAgICAgLy8gRm9yY2UgYSByZS1yZW5kZXIuXG4gICAgICBmb3JjZVN0b3JlUmVyZW5kZXIoZmliZXIpO1xuICAgIH1cbiAgfTsgLy8gU3Vic2NyaWJlIHRvIHRoZSBzdG9yZSBhbmQgcmV0dXJuIGEgY2xlYW4tdXAgZnVuY3Rpb24uXG5cblxuICByZXR1cm4gc3Vic2NyaWJlKGhhbmRsZVN0b3JlQ2hhbmdlKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSB7XG4gIHZhciBsYXRlc3RHZXRTbmFwc2hvdCA9IGluc3QuZ2V0U25hcHNob3Q7XG4gIHZhciBwcmV2VmFsdWUgPSBpbnN0LnZhbHVlO1xuXG4gIHRyeSB7XG4gICAgdmFyIG5leHRWYWx1ZSA9IGxhdGVzdEdldFNuYXBzaG90KCk7XG4gICAgcmV0dXJuICFvYmplY3RJcyhwcmV2VmFsdWUsIG5leHRWYWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9yY2VTdG9yZVJlcmVuZGVyKGZpYmVyKSB7XG4gIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCBTeW5jTGFuZSk7XG5cbiAgaWYgKHJvb3QgIT09IG51bGwpIHtcbiAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIFN5bmNMYW5lLCBOb1RpbWVzdGFtcCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbW91bnRTdGF0ZShpbml0aWFsU3RhdGUpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuXG4gIGlmICh0eXBlb2YgaW5pdGlhbFN0YXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgLy8gJEZsb3dGaXhNZTogRmxvdyBkb2Vzbid0IGxpa2UgbWl4ZWQgdHlwZXNcbiAgICBpbml0aWFsU3RhdGUgPSBpbml0aWFsU3RhdGUoKTtcbiAgfVxuXG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IGhvb2suYmFzZVN0YXRlID0gaW5pdGlhbFN0YXRlO1xuICB2YXIgcXVldWUgPSB7XG4gICAgcGVuZGluZzogbnVsbCxcbiAgICBpbnRlcmxlYXZlZDogbnVsbCxcbiAgICBsYW5lczogTm9MYW5lcyxcbiAgICBkaXNwYXRjaDogbnVsbCxcbiAgICBsYXN0UmVuZGVyZWRSZWR1Y2VyOiBiYXNpY1N0YXRlUmVkdWNlcixcbiAgICBsYXN0UmVuZGVyZWRTdGF0ZTogaW5pdGlhbFN0YXRlXG4gIH07XG4gIGhvb2sucXVldWUgPSBxdWV1ZTtcbiAgdmFyIGRpc3BhdGNoID0gcXVldWUuZGlzcGF0Y2ggPSBkaXNwYXRjaFNldFN0YXRlLmJpbmQobnVsbCwgY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSwgcXVldWUpO1xuICByZXR1cm4gW2hvb2subWVtb2l6ZWRTdGF0ZSwgZGlzcGF0Y2hdO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTdGF0ZShpbml0aWFsU3RhdGUpIHtcbiAgcmV0dXJuIHVwZGF0ZVJlZHVjZXIoYmFzaWNTdGF0ZVJlZHVjZXIpO1xufVxuXG5mdW5jdGlvbiByZXJlbmRlclN0YXRlKGluaXRpYWxTdGF0ZSkge1xuICByZXR1cm4gcmVyZW5kZXJSZWR1Y2VyKGJhc2ljU3RhdGVSZWR1Y2VyKTtcbn1cblxuZnVuY3Rpb24gcHVzaEVmZmVjdCh0YWcsIGNyZWF0ZSwgZGVzdHJveSwgZGVwcykge1xuICB2YXIgZWZmZWN0ID0ge1xuICAgIHRhZzogdGFnLFxuICAgIGNyZWF0ZTogY3JlYXRlLFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gICAgZGVwczogZGVwcyxcbiAgICAvLyBDaXJjdWxhclxuICAgIG5leHQ6IG51bGxcbiAgfTtcbiAgdmFyIGNvbXBvbmVudFVwZGF0ZVF1ZXVlID0gY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMS51cGRhdGVRdWV1ZTtcblxuICBpZiAoY29tcG9uZW50VXBkYXRlUXVldWUgPT09IG51bGwpIHtcbiAgICBjb21wb25lbnRVcGRhdGVRdWV1ZSA9IGNyZWF0ZUZ1bmN0aW9uQ29tcG9uZW50VXBkYXRlUXVldWUoKTtcbiAgICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLnVwZGF0ZVF1ZXVlID0gY29tcG9uZW50VXBkYXRlUXVldWU7XG4gICAgY29tcG9uZW50VXBkYXRlUXVldWUubGFzdEVmZmVjdCA9IGVmZmVjdC5uZXh0ID0gZWZmZWN0O1xuICB9IGVsc2Uge1xuICAgIHZhciBsYXN0RWZmZWN0ID0gY29tcG9uZW50VXBkYXRlUXVldWUubGFzdEVmZmVjdDtcblxuICAgIGlmIChsYXN0RWZmZWN0ID09PSBudWxsKSB7XG4gICAgICBjb21wb25lbnRVcGRhdGVRdWV1ZS5sYXN0RWZmZWN0ID0gZWZmZWN0Lm5leHQgPSBlZmZlY3Q7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBmaXJzdEVmZmVjdCA9IGxhc3RFZmZlY3QubmV4dDtcbiAgICAgIGxhc3RFZmZlY3QubmV4dCA9IGVmZmVjdDtcbiAgICAgIGVmZmVjdC5uZXh0ID0gZmlyc3RFZmZlY3Q7XG4gICAgICBjb21wb25lbnRVcGRhdGVRdWV1ZS5sYXN0RWZmZWN0ID0gZWZmZWN0O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlZmZlY3Q7XG59XG5cbmZ1bmN0aW9uIG1vdW50UmVmKGluaXRpYWxWYWx1ZSkge1xuICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG5cbiAge1xuICAgIHZhciBfcmVmMiA9IHtcbiAgICAgIGN1cnJlbnQ6IGluaXRpYWxWYWx1ZVxuICAgIH07XG4gICAgaG9vay5tZW1vaXplZFN0YXRlID0gX3JlZjI7XG4gICAgcmV0dXJuIF9yZWYyO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVJlZihpbml0aWFsVmFsdWUpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgcmV0dXJuIGhvb2subWVtb2l6ZWRTdGF0ZTtcbn1cblxuZnVuY3Rpb24gbW91bnRFZmZlY3RJbXBsKGZpYmVyRmxhZ3MsIGhvb2tGbGFncywgY3JlYXRlLCBkZXBzKSB7XG4gIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgdmFyIG5leHREZXBzID0gZGVwcyA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGRlcHM7XG4gIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEuZmxhZ3MgfD0gZmliZXJGbGFncztcbiAgaG9vay5tZW1vaXplZFN0YXRlID0gcHVzaEVmZmVjdChIYXNFZmZlY3QgfCBob29rRmxhZ3MsIGNyZWF0ZSwgdW5kZWZpbmVkLCBuZXh0RGVwcyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUVmZmVjdEltcGwoZmliZXJGbGFncywgaG9va0ZsYWdzLCBjcmVhdGUsIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgdmFyIG5leHREZXBzID0gZGVwcyA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGRlcHM7XG4gIHZhciBkZXN0cm95ID0gdW5kZWZpbmVkO1xuXG4gIGlmIChjdXJyZW50SG9vayAhPT0gbnVsbCkge1xuICAgIHZhciBwcmV2RWZmZWN0ID0gY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZTtcbiAgICBkZXN0cm95ID0gcHJldkVmZmVjdC5kZXN0cm95O1xuXG4gICAgaWYgKG5leHREZXBzICE9PSBudWxsKSB7XG4gICAgICB2YXIgcHJldkRlcHMgPSBwcmV2RWZmZWN0LmRlcHM7XG5cbiAgICAgIGlmIChhcmVIb29rSW5wdXRzRXF1YWwobmV4dERlcHMsIHByZXZEZXBzKSkge1xuICAgICAgICBob29rLm1lbW9pemVkU3RhdGUgPSBwdXNoRWZmZWN0KGhvb2tGbGFncywgY3JlYXRlLCBkZXN0cm95LCBuZXh0RGVwcyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLmZsYWdzIHw9IGZpYmVyRmxhZ3M7XG4gIGhvb2subWVtb2l6ZWRTdGF0ZSA9IHB1c2hFZmZlY3QoSGFzRWZmZWN0IHwgaG9va0ZsYWdzLCBjcmVhdGUsIGRlc3Ryb3ksIG5leHREZXBzKTtcbn1cblxuZnVuY3Rpb24gbW91bnRFZmZlY3QoY3JlYXRlLCBkZXBzKSB7XG4gIGlmICggKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubW9kZSAmIFN0cmljdEVmZmVjdHNNb2RlKSAhPT0gTm9Nb2RlKSB7XG4gICAgcmV0dXJuIG1vdW50RWZmZWN0SW1wbChNb3VudFBhc3NpdmVEZXYgfCBQYXNzaXZlIHwgUGFzc2l2ZVN0YXRpYywgUGFzc2l2ZSQxLCBjcmVhdGUsIGRlcHMpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBtb3VudEVmZmVjdEltcGwoUGFzc2l2ZSB8IFBhc3NpdmVTdGF0aWMsIFBhc3NpdmUkMSwgY3JlYXRlLCBkZXBzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVFZmZlY3QoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiB1cGRhdGVFZmZlY3RJbXBsKFBhc3NpdmUsIFBhc3NpdmUkMSwgY3JlYXRlLCBkZXBzKTtcbn1cblxuZnVuY3Rpb24gbW91bnRJbnNlcnRpb25FZmZlY3QoY3JlYXRlLCBkZXBzKSB7XG4gIHJldHVybiBtb3VudEVmZmVjdEltcGwoVXBkYXRlLCBJbnNlcnRpb24sIGNyZWF0ZSwgZGVwcyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUluc2VydGlvbkVmZmVjdChjcmVhdGUsIGRlcHMpIHtcbiAgcmV0dXJuIHVwZGF0ZUVmZmVjdEltcGwoVXBkYXRlLCBJbnNlcnRpb24sIGNyZWF0ZSwgZGVwcyk7XG59XG5cbmZ1bmN0aW9uIG1vdW50TGF5b3V0RWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICB2YXIgZmliZXJGbGFncyA9IFVwZGF0ZTtcblxuICB7XG4gICAgZmliZXJGbGFncyB8PSBMYXlvdXRTdGF0aWM7XG4gIH1cblxuICBpZiAoIChjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxLm1vZGUgJiBTdHJpY3RFZmZlY3RzTW9kZSkgIT09IE5vTW9kZSkge1xuICAgIGZpYmVyRmxhZ3MgfD0gTW91bnRMYXlvdXREZXY7XG4gIH1cblxuICByZXR1cm4gbW91bnRFZmZlY3RJbXBsKGZpYmVyRmxhZ3MsIExheW91dCwgY3JlYXRlLCBkZXBzKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlTGF5b3V0RWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICByZXR1cm4gdXBkYXRlRWZmZWN0SW1wbChVcGRhdGUsIExheW91dCwgY3JlYXRlLCBkZXBzKTtcbn1cblxuZnVuY3Rpb24gaW1wZXJhdGl2ZUhhbmRsZUVmZmVjdChjcmVhdGUsIHJlZikge1xuICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciByZWZDYWxsYmFjayA9IHJlZjtcblxuICAgIHZhciBfaW5zdCA9IGNyZWF0ZSgpO1xuXG4gICAgcmVmQ2FsbGJhY2soX2luc3QpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZWZDYWxsYmFjayhudWxsKTtcbiAgICB9O1xuICB9IGVsc2UgaWYgKHJlZiAhPT0gbnVsbCAmJiByZWYgIT09IHVuZGVmaW5lZCkge1xuICAgIHZhciByZWZPYmplY3QgPSByZWY7XG5cbiAgICB7XG4gICAgICBpZiAoIXJlZk9iamVjdC5oYXNPd25Qcm9wZXJ0eSgnY3VycmVudCcpKSB7XG4gICAgICAgIGVycm9yKCdFeHBlY3RlZCB1c2VJbXBlcmF0aXZlSGFuZGxlKCkgZmlyc3QgYXJndW1lbnQgdG8gZWl0aGVyIGJlIGEgJyArICdyZWYgY2FsbGJhY2sgb3IgUmVhY3QuY3JlYXRlUmVmKCkgb2JqZWN0LiBJbnN0ZWFkIHJlY2VpdmVkOiAlcy4nLCAnYW4gb2JqZWN0IHdpdGgga2V5cyB7JyArIE9iamVjdC5rZXlzKHJlZk9iamVjdCkuam9pbignLCAnKSArICd9Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIF9pbnN0MiA9IGNyZWF0ZSgpO1xuXG4gICAgcmVmT2JqZWN0LmN1cnJlbnQgPSBfaW5zdDI7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJlZk9iamVjdC5jdXJyZW50ID0gbnVsbDtcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIG1vdW50SW1wZXJhdGl2ZUhhbmRsZShyZWYsIGNyZWF0ZSwgZGVwcykge1xuICB7XG4gICAgaWYgKHR5cGVvZiBjcmVhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGVycm9yKCdFeHBlY3RlZCB1c2VJbXBlcmF0aXZlSGFuZGxlKCkgc2Vjb25kIGFyZ3VtZW50IHRvIGJlIGEgZnVuY3Rpb24gJyArICd0aGF0IGNyZWF0ZXMgYSBoYW5kbGUuIEluc3RlYWQgcmVjZWl2ZWQ6ICVzLicsIGNyZWF0ZSAhPT0gbnVsbCA/IHR5cGVvZiBjcmVhdGUgOiAnbnVsbCcpO1xuICAgIH1cbiAgfSAvLyBUT0RPOiBJZiBkZXBzIGFyZSBwcm92aWRlZCwgc2hvdWxkIHdlIHNraXAgY29tcGFyaW5nIHRoZSByZWYgaXRzZWxmP1xuXG5cbiAgdmFyIGVmZmVjdERlcHMgPSBkZXBzICE9PSBudWxsICYmIGRlcHMgIT09IHVuZGVmaW5lZCA/IGRlcHMuY29uY2F0KFtyZWZdKSA6IG51bGw7XG4gIHZhciBmaWJlckZsYWdzID0gVXBkYXRlO1xuXG4gIHtcbiAgICBmaWJlckZsYWdzIHw9IExheW91dFN0YXRpYztcbiAgfVxuXG4gIGlmICggKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubW9kZSAmIFN0cmljdEVmZmVjdHNNb2RlKSAhPT0gTm9Nb2RlKSB7XG4gICAgZmliZXJGbGFncyB8PSBNb3VudExheW91dERldjtcbiAgfVxuXG4gIHJldHVybiBtb3VudEVmZmVjdEltcGwoZmliZXJGbGFncywgTGF5b3V0LCBpbXBlcmF0aXZlSGFuZGxlRWZmZWN0LmJpbmQobnVsbCwgY3JlYXRlLCByZWYpLCBlZmZlY3REZXBzKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlSW1wZXJhdGl2ZUhhbmRsZShyZWYsIGNyZWF0ZSwgZGVwcykge1xuICB7XG4gICAgaWYgKHR5cGVvZiBjcmVhdGUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGVycm9yKCdFeHBlY3RlZCB1c2VJbXBlcmF0aXZlSGFuZGxlKCkgc2Vjb25kIGFyZ3VtZW50IHRvIGJlIGEgZnVuY3Rpb24gJyArICd0aGF0IGNyZWF0ZXMgYSBoYW5kbGUuIEluc3RlYWQgcmVjZWl2ZWQ6ICVzLicsIGNyZWF0ZSAhPT0gbnVsbCA/IHR5cGVvZiBjcmVhdGUgOiAnbnVsbCcpO1xuICAgIH1cbiAgfSAvLyBUT0RPOiBJZiBkZXBzIGFyZSBwcm92aWRlZCwgc2hvdWxkIHdlIHNraXAgY29tcGFyaW5nIHRoZSByZWYgaXRzZWxmP1xuXG5cbiAgdmFyIGVmZmVjdERlcHMgPSBkZXBzICE9PSBudWxsICYmIGRlcHMgIT09IHVuZGVmaW5lZCA/IGRlcHMuY29uY2F0KFtyZWZdKSA6IG51bGw7XG4gIHJldHVybiB1cGRhdGVFZmZlY3RJbXBsKFVwZGF0ZSwgTGF5b3V0LCBpbXBlcmF0aXZlSGFuZGxlRWZmZWN0LmJpbmQobnVsbCwgY3JlYXRlLCByZWYpLCBlZmZlY3REZXBzKTtcbn1cblxuZnVuY3Rpb24gbW91bnREZWJ1Z1ZhbHVlKHZhbHVlLCBmb3JtYXR0ZXJGbikgey8vIFRoaXMgaG9vayBpcyBub3JtYWxseSBhIG5vLW9wLlxuICAvLyBUaGUgcmVhY3QtZGVidWctaG9va3MgcGFja2FnZSBpbmplY3RzIGl0cyBvd24gaW1wbGVtZW50YXRpb25cbiAgLy8gc28gdGhhdCBlLmcuIERldlRvb2xzIGNhbiBkaXNwbGF5IGN1c3RvbSBob29rIHZhbHVlcy5cbn1cblxudmFyIHVwZGF0ZURlYnVnVmFsdWUgPSBtb3VudERlYnVnVmFsdWU7XG5cbmZ1bmN0aW9uIG1vdW50Q2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICB2YXIgbmV4dERlcHMgPSBkZXBzID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVwcztcbiAgaG9vay5tZW1vaXplZFN0YXRlID0gW2NhbGxiYWNrLCBuZXh0RGVwc107XG4gIHJldHVybiBjYWxsYmFjaztcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgdmFyIG5leHREZXBzID0gZGVwcyA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGRlcHM7XG4gIHZhciBwcmV2U3RhdGUgPSBob29rLm1lbW9pemVkU3RhdGU7XG5cbiAgaWYgKHByZXZTdGF0ZSAhPT0gbnVsbCkge1xuICAgIGlmIChuZXh0RGVwcyAhPT0gbnVsbCkge1xuICAgICAgdmFyIHByZXZEZXBzID0gcHJldlN0YXRlWzFdO1xuXG4gICAgICBpZiAoYXJlSG9va0lucHV0c0VxdWFsKG5leHREZXBzLCBwcmV2RGVwcykpIHtcbiAgICAgICAgcmV0dXJuIHByZXZTdGF0ZVswXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBob29rLm1lbW9pemVkU3RhdGUgPSBbY2FsbGJhY2ssIG5leHREZXBzXTtcbiAgcmV0dXJuIGNhbGxiYWNrO1xufVxuXG5mdW5jdGlvbiBtb3VudE1lbW8obmV4dENyZWF0ZSwgZGVwcykge1xuICB2YXIgaG9vayA9IG1vdW50V29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHZhciBuZXh0RGVwcyA9IGRlcHMgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBkZXBzO1xuICB2YXIgbmV4dFZhbHVlID0gbmV4dENyZWF0ZSgpO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBbbmV4dFZhbHVlLCBuZXh0RGVwc107XG4gIHJldHVybiBuZXh0VmFsdWU7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU1lbW8obmV4dENyZWF0ZSwgZGVwcykge1xuICB2YXIgaG9vayA9IHVwZGF0ZVdvcmtJblByb2dyZXNzSG9vaygpO1xuICB2YXIgbmV4dERlcHMgPSBkZXBzID09PSB1bmRlZmluZWQgPyBudWxsIDogZGVwcztcbiAgdmFyIHByZXZTdGF0ZSA9IGhvb2subWVtb2l6ZWRTdGF0ZTtcblxuICBpZiAocHJldlN0YXRlICE9PSBudWxsKSB7XG4gICAgLy8gQXNzdW1lIHRoZXNlIGFyZSBkZWZpbmVkLiBJZiB0aGV5J3JlIG5vdCwgYXJlSG9va0lucHV0c0VxdWFsIHdpbGwgd2Fybi5cbiAgICBpZiAobmV4dERlcHMgIT09IG51bGwpIHtcbiAgICAgIHZhciBwcmV2RGVwcyA9IHByZXZTdGF0ZVsxXTtcblxuICAgICAgaWYgKGFyZUhvb2tJbnB1dHNFcXVhbChuZXh0RGVwcywgcHJldkRlcHMpKSB7XG4gICAgICAgIHJldHVybiBwcmV2U3RhdGVbMF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIG5leHRWYWx1ZSA9IG5leHRDcmVhdGUoKTtcbiAgaG9vay5tZW1vaXplZFN0YXRlID0gW25leHRWYWx1ZSwgbmV4dERlcHNdO1xuICByZXR1cm4gbmV4dFZhbHVlO1xufVxuXG5mdW5jdGlvbiBtb3VudERlZmVycmVkVmFsdWUodmFsdWUpIHtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVEZWZlcnJlZFZhbHVlKHZhbHVlKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHZhciByZXNvbHZlZEN1cnJlbnRIb29rID0gY3VycmVudEhvb2s7XG4gIHZhciBwcmV2VmFsdWUgPSByZXNvbHZlZEN1cnJlbnRIb29rLm1lbW9pemVkU3RhdGU7XG4gIHJldHVybiB1cGRhdGVEZWZlcnJlZFZhbHVlSW1wbChob29rLCBwcmV2VmFsdWUsIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gcmVyZW5kZXJEZWZlcnJlZFZhbHVlKHZhbHVlKSB7XG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG5cbiAgaWYgKGN1cnJlbnRIb29rID09PSBudWxsKSB7XG4gICAgLy8gVGhpcyBpcyBhIHJlcmVuZGVyIGR1cmluZyBhIG1vdW50LlxuICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGlzIGlzIGEgcmVyZW5kZXIgZHVyaW5nIGFuIHVwZGF0ZS5cbiAgICB2YXIgcHJldlZhbHVlID0gY3VycmVudEhvb2subWVtb2l6ZWRTdGF0ZTtcbiAgICByZXR1cm4gdXBkYXRlRGVmZXJyZWRWYWx1ZUltcGwoaG9vaywgcHJldlZhbHVlLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlRGVmZXJyZWRWYWx1ZUltcGwoaG9vaywgcHJldlZhbHVlLCB2YWx1ZSkge1xuICB2YXIgc2hvdWxkRGVmZXJWYWx1ZSA9ICFpbmNsdWRlc09ubHlOb25VcmdlbnRMYW5lcyhyZW5kZXJMYW5lcyk7XG5cbiAgaWYgKHNob3VsZERlZmVyVmFsdWUpIHtcbiAgICAvLyBUaGlzIGlzIGFuIHVyZ2VudCB1cGRhdGUuIElmIHRoZSB2YWx1ZSBoYXMgY2hhbmdlZCwga2VlcCB1c2luZyB0aGVcbiAgICAvLyBwcmV2aW91cyB2YWx1ZSBhbmQgc3Bhd24gYSBkZWZlcnJlZCByZW5kZXIgdG8gdXBkYXRlIGl0IGxhdGVyLlxuICAgIGlmICghb2JqZWN0SXModmFsdWUsIHByZXZWYWx1ZSkpIHtcbiAgICAgIC8vIFNjaGVkdWxlIGEgZGVmZXJyZWQgcmVuZGVyXG4gICAgICB2YXIgZGVmZXJyZWRMYW5lID0gY2xhaW1OZXh0VHJhbnNpdGlvbkxhbmUoKTtcbiAgICAgIGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubGFuZXMgPSBtZXJnZUxhbmVzKGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDEubGFuZXMsIGRlZmVycmVkTGFuZSk7XG4gICAgICBtYXJrU2tpcHBlZFVwZGF0ZUxhbmVzKGRlZmVycmVkTGFuZSk7IC8vIFNldCB0aGlzIHRvIHRydWUgdG8gaW5kaWNhdGUgdGhhdCB0aGUgcmVuZGVyZWQgdmFsdWUgaXMgaW5jb25zaXN0ZW50XG4gICAgICAvLyBmcm9tIHRoZSBsYXRlc3QgdmFsdWUuIFRoZSBuYW1lIFwiYmFzZVN0YXRlXCIgZG9lc24ndCByZWFsbHkgbWF0Y2ggaG93IHdlXG4gICAgICAvLyB1c2UgaXQgYmVjYXVzZSB3ZSdyZSByZXVzaW5nIGEgc3RhdGUgaG9vayBmaWVsZCBpbnN0ZWFkIG9mIGNyZWF0aW5nIGFcbiAgICAgIC8vIG5ldyBvbmUuXG5cbiAgICAgIGhvb2suYmFzZVN0YXRlID0gdHJ1ZTtcbiAgICB9IC8vIFJldXNlIHRoZSBwcmV2aW91cyB2YWx1ZVxuXG5cbiAgICByZXR1cm4gcHJldlZhbHVlO1xuICB9IGVsc2Uge1xuICAgIC8vIFRoaXMgaXMgbm90IGFuIHVyZ2VudCB1cGRhdGUsIHNvIHdlIGNhbiB1c2UgdGhlIGxhdGVzdCB2YWx1ZSByZWdhcmRsZXNzXG4gICAgLy8gb2Ygd2hhdCBpdCBpcy4gTm8gbmVlZCB0byBkZWZlciBpdC5cbiAgICAvLyBIb3dldmVyLCBpZiB3ZSdyZSBjdXJyZW50bHkgaW5zaWRlIGEgc3Bhd25lZCByZW5kZXIsIHRoZW4gd2UgbmVlZCB0byBtYXJrXG4gICAgLy8gdGhpcyBhcyBhbiB1cGRhdGUgdG8gcHJldmVudCB0aGUgZmliZXIgZnJvbSBiYWlsaW5nIG91dC5cbiAgICAvL1xuICAgIC8vIGBiYXNlU3RhdGVgIGlzIHRydWUgd2hlbiB0aGUgY3VycmVudCB2YWx1ZSBpcyBkaWZmZXJlbnQgZnJvbSB0aGUgcmVuZGVyZWRcbiAgICAvLyB2YWx1ZS4gVGhlIG5hbWUgZG9lc24ndCByZWFsbHkgbWF0Y2ggaG93IHdlIHVzZSBpdCBiZWNhdXNlIHdlJ3JlIHJldXNpbmdcbiAgICAvLyBhIHN0YXRlIGhvb2sgZmllbGQgaW5zdGVhZCBvZiBjcmVhdGluZyBhIG5ldyBvbmUuXG4gICAgaWYgKGhvb2suYmFzZVN0YXRlKSB7XG4gICAgICAvLyBGbGlwIHRoaXMgYmFjayB0byBmYWxzZS5cbiAgICAgIGhvb2suYmFzZVN0YXRlID0gZmFsc2U7XG4gICAgICBtYXJrV29ya0luUHJvZ3Jlc3NSZWNlaXZlZFVwZGF0ZSgpO1xuICAgIH1cblxuICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IHZhbHVlO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdGFydFRyYW5zaXRpb24oc2V0UGVuZGluZywgY2FsbGJhY2ssIG9wdGlvbnMpIHtcbiAgdmFyIHByZXZpb3VzUHJpb3JpdHkgPSBnZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkoKTtcbiAgc2V0Q3VycmVudFVwZGF0ZVByaW9yaXR5KGhpZ2hlckV2ZW50UHJpb3JpdHkocHJldmlvdXNQcmlvcml0eSwgQ29udGludW91c0V2ZW50UHJpb3JpdHkpKTtcbiAgc2V0UGVuZGluZyh0cnVlKTtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RDdXJyZW50QmF0Y2hDb25maWckMi50cmFuc2l0aW9uO1xuICBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyQyLnRyYW5zaXRpb24gPSB7fTtcbiAgdmFyIGN1cnJlbnRUcmFuc2l0aW9uID0gUmVhY3RDdXJyZW50QmF0Y2hDb25maWckMi50cmFuc2l0aW9uO1xuXG4gIHtcbiAgICBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyQyLnRyYW5zaXRpb24uX3VwZGF0ZWRGaWJlcnMgPSBuZXcgU2V0KCk7XG4gIH1cblxuICB0cnkge1xuICAgIHNldFBlbmRpbmcoZmFsc2UpO1xuICAgIGNhbGxiYWNrKCk7XG4gIH0gZmluYWxseSB7XG4gICAgc2V0Q3VycmVudFVwZGF0ZVByaW9yaXR5KHByZXZpb3VzUHJpb3JpdHkpO1xuICAgIFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnJDIudHJhbnNpdGlvbiA9IHByZXZUcmFuc2l0aW9uO1xuXG4gICAge1xuICAgICAgaWYgKHByZXZUcmFuc2l0aW9uID09PSBudWxsICYmIGN1cnJlbnRUcmFuc2l0aW9uLl91cGRhdGVkRmliZXJzKSB7XG4gICAgICAgIHZhciB1cGRhdGVkRmliZXJzQ291bnQgPSBjdXJyZW50VHJhbnNpdGlvbi5fdXBkYXRlZEZpYmVycy5zaXplO1xuXG4gICAgICAgIGlmICh1cGRhdGVkRmliZXJzQ291bnQgPiAxMCkge1xuICAgICAgICAgIHdhcm4oJ0RldGVjdGVkIGEgbGFyZ2UgbnVtYmVyIG9mIHVwZGF0ZXMgaW5zaWRlIHN0YXJ0VHJhbnNpdGlvbi4gJyArICdJZiB0aGlzIGlzIGR1ZSB0byBhIHN1YnNjcmlwdGlvbiBwbGVhc2UgcmUtd3JpdGUgaXQgdG8gdXNlIFJlYWN0IHByb3ZpZGVkIGhvb2tzLiAnICsgJ090aGVyd2lzZSBjb25jdXJyZW50IG1vZGUgZ3VhcmFudGVlcyBhcmUgb2ZmIHRoZSB0YWJsZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN1cnJlbnRUcmFuc2l0aW9uLl91cGRhdGVkRmliZXJzLmNsZWFyKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG1vdW50VHJhbnNpdGlvbigpIHtcbiAgdmFyIF9tb3VudFN0YXRlID0gbW91bnRTdGF0ZShmYWxzZSksXG4gICAgICBpc1BlbmRpbmcgPSBfbW91bnRTdGF0ZVswXSxcbiAgICAgIHNldFBlbmRpbmcgPSBfbW91bnRTdGF0ZVsxXTsgLy8gVGhlIGBzdGFydGAgbWV0aG9kIG5ldmVyIGNoYW5nZXMuXG5cblxuICB2YXIgc3RhcnQgPSBzdGFydFRyYW5zaXRpb24uYmluZChudWxsLCBzZXRQZW5kaW5nKTtcbiAgdmFyIGhvb2sgPSBtb3VudFdvcmtJblByb2dyZXNzSG9vaygpO1xuICBob29rLm1lbW9pemVkU3RhdGUgPSBzdGFydDtcbiAgcmV0dXJuIFtpc1BlbmRpbmcsIHN0YXJ0XTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlVHJhbnNpdGlvbigpIHtcbiAgdmFyIF91cGRhdGVTdGF0ZSA9IHVwZGF0ZVN0YXRlKCksXG4gICAgICBpc1BlbmRpbmcgPSBfdXBkYXRlU3RhdGVbMF07XG5cbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgdmFyIHN0YXJ0ID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICByZXR1cm4gW2lzUGVuZGluZywgc3RhcnRdO1xufVxuXG5mdW5jdGlvbiByZXJlbmRlclRyYW5zaXRpb24oKSB7XG4gIHZhciBfcmVyZW5kZXJTdGF0ZSA9IHJlcmVuZGVyU3RhdGUoKSxcbiAgICAgIGlzUGVuZGluZyA9IF9yZXJlbmRlclN0YXRlWzBdO1xuXG4gIHZhciBob29rID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NIb29rKCk7XG4gIHZhciBzdGFydCA9IGhvb2subWVtb2l6ZWRTdGF0ZTtcbiAgcmV0dXJuIFtpc1BlbmRpbmcsIHN0YXJ0XTtcbn1cblxudmFyIGlzVXBkYXRpbmdPcGFxdWVWYWx1ZUluUmVuZGVyUGhhc2UgPSBmYWxzZTtcbmZ1bmN0aW9uIGdldElzVXBkYXRpbmdPcGFxdWVWYWx1ZUluUmVuZGVyUGhhc2VJbkRFVigpIHtcbiAge1xuICAgIHJldHVybiBpc1VwZGF0aW5nT3BhcXVlVmFsdWVJblJlbmRlclBoYXNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1vdW50SWQoKSB7XG4gIHZhciBob29rID0gbW91bnRXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgdmFyIHJvb3QgPSBnZXRXb3JrSW5Qcm9ncmVzc1Jvb3QoKTsgLy8gVE9ETzogSW4gRml6eiwgaWQgZ2VuZXJhdGlvbiBpcyBzcGVjaWZpYyB0byBlYWNoIHNlcnZlciBjb25maWcuIE1heWJlIHdlXG4gIC8vIHNob3VsZCBkbyB0aGlzIGluIEZpYmVyLCB0b28/IERlZmVycmluZyB0aGlzIGRlY2lzaW9uIGZvciBub3cgYmVjYXVzZVxuICAvLyB0aGVyZSdzIG5vIG90aGVyIHBsYWNlIHRvIHN0b3JlIHRoZSBwcmVmaXggZXhjZXB0IGZvciBhbiBpbnRlcm5hbCBmaWVsZCBvblxuICAvLyB0aGUgcHVibGljIGNyZWF0ZVJvb3Qgb2JqZWN0LCB3aGljaCB0aGUgZmliZXIgdHJlZSBkb2VzIG5vdCBjdXJyZW50bHkgaGF2ZVxuICAvLyBhIHJlZmVyZW5jZSB0by5cblxuICB2YXIgaWRlbnRpZmllclByZWZpeCA9IHJvb3QuaWRlbnRpZmllclByZWZpeDtcbiAgdmFyIGlkO1xuXG4gIGlmIChnZXRJc0h5ZHJhdGluZygpKSB7XG4gICAgdmFyIHRyZWVJZCA9IGdldFRyZWVJZCgpOyAvLyBVc2UgYSBjYXB0aWFsIFIgcHJlZml4IGZvciBzZXJ2ZXItZ2VuZXJhdGVkIGlkcy5cblxuICAgIGlkID0gJzonICsgaWRlbnRpZmllclByZWZpeCArICdSJyArIHRyZWVJZDsgLy8gVW5sZXNzIHRoaXMgaXMgdGhlIGZpcnN0IGlkIGF0IHRoaXMgbGV2ZWwsIGFwcGVuZCBhIG51bWJlciBhdCB0aGUgZW5kXG4gICAgLy8gdGhhdCByZXByZXNlbnRzIHRoZSBwb3NpdGlvbiBvZiB0aGlzIHVzZUlkIGhvb2sgYW1vbmcgYWxsIHRoZSB1c2VJZFxuICAgIC8vIGhvb2tzIGZvciB0aGlzIGZpYmVyLlxuXG4gICAgdmFyIGxvY2FsSWQgPSBsb2NhbElkQ291bnRlcisrO1xuXG4gICAgaWYgKGxvY2FsSWQgPiAwKSB7XG4gICAgICBpZCArPSAnSCcgKyBsb2NhbElkLnRvU3RyaW5nKDMyKTtcbiAgICB9XG5cbiAgICBpZCArPSAnOic7XG4gIH0gZWxzZSB7XG4gICAgLy8gVXNlIGEgbG93ZXJjYXNlIHIgcHJlZml4IGZvciBjbGllbnQtZ2VuZXJhdGVkIGlkcy5cbiAgICB2YXIgZ2xvYmFsQ2xpZW50SWQgPSBnbG9iYWxDbGllbnRJZENvdW50ZXIrKztcbiAgICBpZCA9ICc6JyArIGlkZW50aWZpZXJQcmVmaXggKyAncicgKyBnbG9iYWxDbGllbnRJZC50b1N0cmluZygzMikgKyAnOic7XG4gIH1cblxuICBob29rLm1lbW9pemVkU3RhdGUgPSBpZDtcbiAgcmV0dXJuIGlkO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVJZCgpIHtcbiAgdmFyIGhvb2sgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc0hvb2soKTtcbiAgdmFyIGlkID0gaG9vay5tZW1vaXplZFN0YXRlO1xuICByZXR1cm4gaWQ7XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoUmVkdWNlckFjdGlvbihmaWJlciwgcXVldWUsIGFjdGlvbikge1xuICB7XG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGVycm9yKFwiU3RhdGUgdXBkYXRlcyBmcm9tIHRoZSB1c2VTdGF0ZSgpIGFuZCB1c2VSZWR1Y2VyKCkgSG9va3MgZG9uJ3Qgc3VwcG9ydCB0aGUgXCIgKyAnc2Vjb25kIGNhbGxiYWNrIGFyZ3VtZW50LiBUbyBleGVjdXRlIGEgc2lkZSBlZmZlY3QgYWZ0ZXIgJyArICdyZW5kZXJpbmcsIGRlY2xhcmUgaXQgaW4gdGhlIGNvbXBvbmVudCBib2R5IHdpdGggdXNlRWZmZWN0KCkuJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZShmaWJlcik7XG4gIHZhciB1cGRhdGUgPSB7XG4gICAgbGFuZTogbGFuZSxcbiAgICBhY3Rpb246IGFjdGlvbixcbiAgICBoYXNFYWdlclN0YXRlOiBmYWxzZSxcbiAgICBlYWdlclN0YXRlOiBudWxsLFxuICAgIG5leHQ6IG51bGxcbiAgfTtcblxuICBpZiAoaXNSZW5kZXJQaGFzZVVwZGF0ZShmaWJlcikpIHtcbiAgICBlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUocXVldWUsIHVwZGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpO1xuXG4gICAgaWYgKHJvb3QgIT09IG51bGwpIHtcbiAgICAgIHZhciBldmVudFRpbWUgPSByZXF1ZXN0RXZlbnRUaW1lKCk7XG4gICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIGxhbmUsIGV2ZW50VGltZSk7XG4gICAgICBlbnRhbmdsZVRyYW5zaXRpb25VcGRhdGUocm9vdCwgcXVldWUsIGxhbmUpO1xuICAgIH1cbiAgfVxuXG4gIG1hcmtVcGRhdGVJbkRldlRvb2xzKGZpYmVyLCBsYW5lKTtcbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hTZXRTdGF0ZShmaWJlciwgcXVldWUsIGFjdGlvbikge1xuICB7XG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGVycm9yKFwiU3RhdGUgdXBkYXRlcyBmcm9tIHRoZSB1c2VTdGF0ZSgpIGFuZCB1c2VSZWR1Y2VyKCkgSG9va3MgZG9uJ3Qgc3VwcG9ydCB0aGUgXCIgKyAnc2Vjb25kIGNhbGxiYWNrIGFyZ3VtZW50LiBUbyBleGVjdXRlIGEgc2lkZSBlZmZlY3QgYWZ0ZXIgJyArICdyZW5kZXJpbmcsIGRlY2xhcmUgaXQgaW4gdGhlIGNvbXBvbmVudCBib2R5IHdpdGggdXNlRWZmZWN0KCkuJyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZShmaWJlcik7XG4gIHZhciB1cGRhdGUgPSB7XG4gICAgbGFuZTogbGFuZSxcbiAgICBhY3Rpb246IGFjdGlvbixcbiAgICBoYXNFYWdlclN0YXRlOiBmYWxzZSxcbiAgICBlYWdlclN0YXRlOiBudWxsLFxuICAgIG5leHQ6IG51bGxcbiAgfTtcblxuICBpZiAoaXNSZW5kZXJQaGFzZVVwZGF0ZShmaWJlcikpIHtcbiAgICBlbnF1ZXVlUmVuZGVyUGhhc2VVcGRhdGUocXVldWUsIHVwZGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcblxuICAgIGlmIChmaWJlci5sYW5lcyA9PT0gTm9MYW5lcyAmJiAoYWx0ZXJuYXRlID09PSBudWxsIHx8IGFsdGVybmF0ZS5sYW5lcyA9PT0gTm9MYW5lcykpIHtcbiAgICAgIC8vIFRoZSBxdWV1ZSBpcyBjdXJyZW50bHkgZW1wdHksIHdoaWNoIG1lYW5zIHdlIGNhbiBlYWdlcmx5IGNvbXB1dGUgdGhlXG4gICAgICAvLyBuZXh0IHN0YXRlIGJlZm9yZSBlbnRlcmluZyB0aGUgcmVuZGVyIHBoYXNlLiBJZiB0aGUgbmV3IHN0YXRlIGlzIHRoZVxuICAgICAgLy8gc2FtZSBhcyB0aGUgY3VycmVudCBzdGF0ZSwgd2UgbWF5IGJlIGFibGUgdG8gYmFpbCBvdXQgZW50aXJlbHkuXG4gICAgICB2YXIgbGFzdFJlbmRlcmVkUmVkdWNlciA9IHF1ZXVlLmxhc3RSZW5kZXJlZFJlZHVjZXI7XG5cbiAgICAgIGlmIChsYXN0UmVuZGVyZWRSZWR1Y2VyICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBwcmV2RGlzcGF0Y2hlcjtcblxuICAgICAgICB7XG4gICAgICAgICAgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZUluREVWO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgY3VycmVudFN0YXRlID0gcXVldWUubGFzdFJlbmRlcmVkU3RhdGU7XG4gICAgICAgICAgdmFyIGVhZ2VyU3RhdGUgPSBsYXN0UmVuZGVyZWRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTsgLy8gU3Rhc2ggdGhlIGVhZ2VybHkgY29tcHV0ZWQgc3RhdGUsIGFuZCB0aGUgcmVkdWNlciB1c2VkIHRvIGNvbXB1dGVcbiAgICAgICAgICAvLyBpdCwgb24gdGhlIHVwZGF0ZSBvYmplY3QuIElmIHRoZSByZWR1Y2VyIGhhc24ndCBjaGFuZ2VkIGJ5IHRoZVxuICAgICAgICAgIC8vIHRpbWUgd2UgZW50ZXIgdGhlIHJlbmRlciBwaGFzZSwgdGhlbiB0aGUgZWFnZXIgc3RhdGUgY2FuIGJlIHVzZWRcbiAgICAgICAgICAvLyB3aXRob3V0IGNhbGxpbmcgdGhlIHJlZHVjZXIgYWdhaW4uXG5cbiAgICAgICAgICB1cGRhdGUuaGFzRWFnZXJTdGF0ZSA9IHRydWU7XG4gICAgICAgICAgdXBkYXRlLmVhZ2VyU3RhdGUgPSBlYWdlclN0YXRlO1xuXG4gICAgICAgICAgaWYgKG9iamVjdElzKGVhZ2VyU3RhdGUsIGN1cnJlbnRTdGF0ZSkpIHtcbiAgICAgICAgICAgIC8vIEZhc3QgcGF0aC4gV2UgY2FuIGJhaWwgb3V0IHdpdGhvdXQgc2NoZWR1bGluZyBSZWFjdCB0byByZS1yZW5kZXIuXG4gICAgICAgICAgICAvLyBJdCdzIHN0aWxsIHBvc3NpYmxlIHRoYXQgd2UnbGwgbmVlZCB0byByZWJhc2UgdGhpcyB1cGRhdGUgbGF0ZXIsXG4gICAgICAgICAgICAvLyBpZiB0aGUgY29tcG9uZW50IHJlLXJlbmRlcnMgZm9yIGEgZGlmZmVyZW50IHJlYXNvbiBhbmQgYnkgdGhhdFxuICAgICAgICAgICAgLy8gdGltZSB0aGUgcmVkdWNlciBoYXMgY2hhbmdlZC5cbiAgICAgICAgICAgIC8vIFRPRE86IERvIHdlIHN0aWxsIG5lZWQgdG8gZW50YW5nbGUgdHJhbnNpdGlvbnMgaW4gdGhpcyBjYXNlP1xuICAgICAgICAgICAgZW5xdWV1ZUNvbmN1cnJlbnRIb29rVXBkYXRlQW5kRWFnZXJseUJhaWxvdXQoZmliZXIsIHF1ZXVlLCB1cGRhdGUsIGxhbmUpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHsvLyBTdXBwcmVzcyB0aGUgZXJyb3IuIEl0IHdpbGwgdGhyb3cgYWdhaW4gaW4gdGhlIHJlbmRlciBwaGFzZS5cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IHByZXZEaXNwYXRjaGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRIb29rVXBkYXRlKGZpYmVyLCBxdWV1ZSwgdXBkYXRlLCBsYW5lKTtcblxuICAgIGlmIChyb290ICE9PSBudWxsKSB7XG4gICAgICB2YXIgZXZlbnRUaW1lID0gcmVxdWVzdEV2ZW50VGltZSgpO1xuICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCBsYW5lLCBldmVudFRpbWUpO1xuICAgICAgZW50YW5nbGVUcmFuc2l0aW9uVXBkYXRlKHJvb3QsIHF1ZXVlLCBsYW5lKTtcbiAgICB9XG4gIH1cblxuICBtYXJrVXBkYXRlSW5EZXZUb29scyhmaWJlciwgbGFuZSk7XG59XG5cbmZ1bmN0aW9uIGlzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpIHtcbiAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcbiAgcmV0dXJuIGZpYmVyID09PSBjdXJyZW50bHlSZW5kZXJpbmdGaWJlciQxIHx8IGFsdGVybmF0ZSAhPT0gbnVsbCAmJiBhbHRlcm5hdGUgPT09IGN1cnJlbnRseVJlbmRlcmluZ0ZpYmVyJDE7XG59XG5cbmZ1bmN0aW9uIGVucXVldWVSZW5kZXJQaGFzZVVwZGF0ZShxdWV1ZSwgdXBkYXRlKSB7XG4gIC8vIFRoaXMgaXMgYSByZW5kZXIgcGhhc2UgdXBkYXRlLiBTdGFzaCBpdCBpbiBhIGxhemlseS1jcmVhdGVkIG1hcCBvZlxuICAvLyBxdWV1ZSAtPiBsaW5rZWQgbGlzdCBvZiB1cGRhdGVzLiBBZnRlciB0aGlzIHJlbmRlciBwYXNzLCB3ZSdsbCByZXN0YXJ0XG4gIC8vIGFuZCBhcHBseSB0aGUgc3Rhc2hlZCB1cGRhdGVzIG9uIHRvcCBvZiB0aGUgd29yay1pbi1wcm9ncmVzcyBob29rLlxuICBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlRHVyaW5nVGhpc1Bhc3MgPSBkaWRTY2hlZHVsZVJlbmRlclBoYXNlVXBkYXRlID0gdHJ1ZTtcbiAgdmFyIHBlbmRpbmcgPSBxdWV1ZS5wZW5kaW5nO1xuXG4gIGlmIChwZW5kaW5nID09PSBudWxsKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgZmlyc3QgdXBkYXRlLiBDcmVhdGUgYSBjaXJjdWxhciBsaXN0LlxuICAgIHVwZGF0ZS5uZXh0ID0gdXBkYXRlO1xuICB9IGVsc2Uge1xuICAgIHVwZGF0ZS5uZXh0ID0gcGVuZGluZy5uZXh0O1xuICAgIHBlbmRpbmcubmV4dCA9IHVwZGF0ZTtcbiAgfVxuXG4gIHF1ZXVlLnBlbmRpbmcgPSB1cGRhdGU7XG59IC8vIFRPRE86IE1vdmUgdG8gUmVhY3RGaWJlckNvbmN1cnJlbnRVcGRhdGVzP1xuXG5cbmZ1bmN0aW9uIGVudGFuZ2xlVHJhbnNpdGlvblVwZGF0ZShyb290LCBxdWV1ZSwgbGFuZSkge1xuICBpZiAoaXNUcmFuc2l0aW9uTGFuZShsYW5lKSkge1xuICAgIHZhciBxdWV1ZUxhbmVzID0gcXVldWUubGFuZXM7IC8vIElmIGFueSBlbnRhbmdsZWQgbGFuZXMgYXJlIG5vIGxvbmdlciBwZW5kaW5nIG9uIHRoZSByb290LCB0aGVuIHRoZXlcbiAgICAvLyBtdXN0IGhhdmUgZmluaXNoZWQuIFdlIGNhbiByZW1vdmUgdGhlbSBmcm9tIHRoZSBzaGFyZWQgcXVldWUsIHdoaWNoXG4gICAgLy8gcmVwcmVzZW50cyBhIHN1cGVyc2V0IG9mIHRoZSBhY3R1YWxseSBwZW5kaW5nIGxhbmVzLiBJbiBzb21lIGNhc2VzIHdlXG4gICAgLy8gbWF5IGVudGFuZ2xlIG1vcmUgdGhhbiB3ZSBuZWVkIHRvLCBidXQgdGhhdCdzIE9LLiBJbiBmYWN0IGl0J3Mgd29yc2UgaWZcbiAgICAvLyB3ZSAqZG9uJ3QqIGVudGFuZ2xlIHdoZW4gd2Ugc2hvdWxkLlxuXG4gICAgcXVldWVMYW5lcyA9IGludGVyc2VjdExhbmVzKHF1ZXVlTGFuZXMsIHJvb3QucGVuZGluZ0xhbmVzKTsgLy8gRW50YW5nbGUgdGhlIG5ldyB0cmFuc2l0aW9uIGxhbmUgd2l0aCB0aGUgb3RoZXIgdHJhbnNpdGlvbiBsYW5lcy5cblxuICAgIHZhciBuZXdRdWV1ZUxhbmVzID0gbWVyZ2VMYW5lcyhxdWV1ZUxhbmVzLCBsYW5lKTtcbiAgICBxdWV1ZS5sYW5lcyA9IG5ld1F1ZXVlTGFuZXM7IC8vIEV2ZW4gaWYgcXVldWUubGFuZXMgYWxyZWFkeSBpbmNsdWRlIGxhbmUsIHdlIGRvbid0IGtub3cgZm9yIGNlcnRhaW4gaWZcbiAgICAvLyB0aGUgbGFuZSBmaW5pc2hlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHdlIGVudGFuZ2xlZCBpdC4gU28gd2UgbmVlZCB0b1xuICAgIC8vIGVudGFuZ2xlIGl0IGFnYWluLCBqdXN0IHRvIGJlIHN1cmUuXG5cbiAgICBtYXJrUm9vdEVudGFuZ2xlZChyb290LCBuZXdRdWV1ZUxhbmVzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXJrVXBkYXRlSW5EZXZUb29scyhmaWJlciwgbGFuZSwgYWN0aW9uKSB7XG5cbiAge1xuICAgIG1hcmtTdGF0ZVVwZGF0ZVNjaGVkdWxlZChmaWJlciwgbGFuZSk7XG4gIH1cbn1cblxudmFyIENvbnRleHRPbmx5RGlzcGF0Y2hlciA9IHtcbiAgcmVhZENvbnRleHQ6IHJlYWRDb250ZXh0LFxuICB1c2VDYWxsYmFjazogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VDb250ZXh0OiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZUVmZmVjdDogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VJbXBlcmF0aXZlSGFuZGxlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZUluc2VydGlvbkVmZmVjdDogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VMYXlvdXRFZmZlY3Q6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlTWVtbzogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VSZWR1Y2VyOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZVJlZjogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VTdGF0ZTogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VEZWJ1Z1ZhbHVlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZURlZmVycmVkVmFsdWU6IHRocm93SW52YWxpZEhvb2tFcnJvcixcbiAgdXNlVHJhbnNpdGlvbjogdGhyb3dJbnZhbGlkSG9va0Vycm9yLFxuICB1c2VNdXRhYmxlU291cmNlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVzZUlkOiB0aHJvd0ludmFsaWRIb29rRXJyb3IsXG4gIHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjogZW5hYmxlTmV3UmVjb25jaWxlclxufTtcblxudmFyIEhvb2tzRGlzcGF0Y2hlck9uTW91bnRJbkRFViA9IG51bGw7XG52YXIgSG9va3NEaXNwYXRjaGVyT25Nb3VudFdpdGhIb29rVHlwZXNJbkRFViA9IG51bGw7XG52YXIgSG9va3NEaXNwYXRjaGVyT25VcGRhdGVJbkRFViA9IG51bGw7XG52YXIgSG9va3NEaXNwYXRjaGVyT25SZXJlbmRlckluREVWID0gbnVsbDtcbnZhciBJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25Nb3VudEluREVWID0gbnVsbDtcbnZhciBJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25VcGRhdGVJbkRFViA9IG51bGw7XG52YXIgSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXJJbkRFViA9IG51bGw7XG5cbntcbiAgdmFyIHdhcm5JbnZhbGlkQ29udGV4dEFjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBlcnJvcignQ29udGV4dCBjYW4gb25seSBiZSByZWFkIHdoaWxlIFJlYWN0IGlzIHJlbmRlcmluZy4gJyArICdJbiBjbGFzc2VzLCB5b3UgY2FuIHJlYWQgaXQgaW4gdGhlIHJlbmRlciBtZXRob2Qgb3IgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLiAnICsgJ0luIGZ1bmN0aW9uIGNvbXBvbmVudHMsIHlvdSBjYW4gcmVhZCBpdCBkaXJlY3RseSBpbiB0aGUgZnVuY3Rpb24gYm9keSwgYnV0IG5vdCAnICsgJ2luc2lkZSBIb29rcyBsaWtlIHVzZVJlZHVjZXIoKSBvciB1c2VNZW1vKCkuJyk7XG4gIH07XG5cbiAgdmFyIHdhcm5JbnZhbGlkSG9va0FjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBlcnJvcignRG8gbm90IGNhbGwgSG9va3MgaW5zaWRlIHVzZUVmZmVjdCguLi4pLCB1c2VNZW1vKC4uLiksIG9yIG90aGVyIGJ1aWx0LWluIEhvb2tzLiAnICsgJ1lvdSBjYW4gb25seSBjYWxsIEhvb2tzIGF0IHRoZSB0b3AgbGV2ZWwgb2YgeW91ciBSZWFjdCBmdW5jdGlvbi4gJyArICdGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlICcgKyAnaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3J1bGVzLW9mLWhvb2tzJyk7XG4gIH07XG5cbiAgSG9va3NEaXNwYXRjaGVyT25Nb3VudEluREVWID0ge1xuICAgIHJlYWRDb250ZXh0OiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgcmV0dXJuIHJlYWRDb250ZXh0KGNvbnRleHQpO1xuICAgIH0sXG4gICAgdXNlQ2FsbGJhY2s6IGZ1bmN0aW9uIChjYWxsYmFjaywgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlQ2FsbGJhY2snO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIGNoZWNrRGVwc0FyZUFycmF5RGV2KGRlcHMpO1xuICAgICAgcmV0dXJuIG1vdW50Q2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUNvbnRleHQnO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiByZWFkQ29udGV4dChjb250ZXh0KTtcbiAgICB9LFxuICAgIHVzZUVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlRWZmZWN0JztcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICBjaGVja0RlcHNBcmVBcnJheURldihkZXBzKTtcbiAgICAgIHJldHVybiBtb3VudEVmZmVjdChjcmVhdGUsIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogZnVuY3Rpb24gKHJlZiwgY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VJbXBlcmF0aXZlSGFuZGxlJztcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICBjaGVja0RlcHNBcmVBcnJheURldihkZXBzKTtcbiAgICAgIHJldHVybiBtb3VudEltcGVyYXRpdmVIYW5kbGUocmVmLCBjcmVhdGUsIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlSW5zZXJ0aW9uRWZmZWN0OiBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VJbnNlcnRpb25FZmZlY3QnO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIGNoZWNrRGVwc0FyZUFycmF5RGV2KGRlcHMpO1xuICAgICAgcmV0dXJuIG1vdW50SW5zZXJ0aW9uRWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VMYXlvdXRFZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUxheW91dEVmZmVjdCc7XG4gICAgICBtb3VudEhvb2tUeXBlc0RldigpO1xuICAgICAgY2hlY2tEZXBzQXJlQXJyYXlEZXYoZGVwcyk7XG4gICAgICByZXR1cm4gbW91bnRMYXlvdXRFZmZlY3QoY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZU1lbW86IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZU1lbW8nO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIGNoZWNrRGVwc0FyZUFycmF5RGV2KGRlcHMpO1xuICAgICAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQ7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPbk1vdW50SW5ERVY7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBtb3VudE1lbW8oY3JlYXRlLCBkZXBzKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gcHJldkRpc3BhdGNoZXI7XG4gICAgICB9XG4gICAgfSxcbiAgICB1c2VSZWR1Y2VyOiBmdW5jdGlvbiAocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlUmVkdWNlcic7XG4gICAgICBtb3VudEhvb2tUeXBlc0RldigpO1xuICAgICAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQ7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPbk1vdW50SW5ERVY7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBtb3VudFJlZHVjZXIocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IHByZXZEaXNwYXRjaGVyO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXNlUmVmOiBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VSZWYnO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudFJlZihpbml0aWFsVmFsdWUpO1xuICAgIH0sXG4gICAgdXNlU3RhdGU6IGZ1bmN0aW9uIChpbml0aWFsU3RhdGUpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZVN0YXRlJztcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uTW91bnRJbkRFVjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG1vdW50U3RhdGUoaW5pdGlhbFN0YXRlKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gcHJldkRpc3BhdGNoZXI7XG4gICAgICB9XG4gICAgfSxcbiAgICB1c2VEZWJ1Z1ZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIGZvcm1hdHRlckZuKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VEZWJ1Z1ZhbHVlJztcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gbW91bnREZWJ1Z1ZhbHVlKCk7XG4gICAgfSxcbiAgICB1c2VEZWZlcnJlZFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZURlZmVycmVkVmFsdWUnO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudERlZmVycmVkVmFsdWUodmFsdWUpO1xuICAgIH0sXG4gICAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlVHJhbnNpdGlvbic7XG4gICAgICBtb3VudEhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50VHJhbnNpdGlvbigpO1xuICAgIH0sXG4gICAgdXNlTXV0YWJsZVNvdXJjZTogZnVuY3Rpb24gKHNvdXJjZSwgZ2V0U25hcHNob3QsIHN1YnNjcmliZSkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlTXV0YWJsZVNvdXJjZSc7XG4gICAgICBtb3VudEhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50TXV0YWJsZVNvdXJjZSgpO1xuICAgIH0sXG4gICAgdXNlU3luY0V4dGVybmFsU3RvcmU6IGZ1bmN0aW9uIChzdWJzY3JpYmUsIGdldFNuYXBzaG90LCBnZXRTZXJ2ZXJTbmFwc2hvdCkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlU3luY0V4dGVybmFsU3RvcmUnO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudFN5bmNFeHRlcm5hbFN0b3JlKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KTtcbiAgICB9LFxuICAgIHVzZUlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VJZCc7XG4gICAgICBtb3VudEhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50SWQoKTtcbiAgICB9LFxuICAgIHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjogZW5hYmxlTmV3UmVjb25jaWxlclxuICB9O1xuXG4gIEhvb2tzRGlzcGF0Y2hlck9uTW91bnRXaXRoSG9va1R5cGVzSW5ERVYgPSB7XG4gICAgcmVhZENvbnRleHQ6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICByZXR1cm4gcmVhZENvbnRleHQoY29udGV4dCk7XG4gICAgfSxcbiAgICB1c2VDYWxsYmFjazogZnVuY3Rpb24gKGNhbGxiYWNrLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VDYWxsYmFjayc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudENhbGxiYWNrKGNhbGxiYWNrLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUNvbnRleHQ6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VDb250ZXh0JztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHJlYWRDb250ZXh0KGNvbnRleHQpO1xuICAgIH0sXG4gICAgdXNlRWZmZWN0OiBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VFZmZlY3QnO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gbW91bnRFZmZlY3QoY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUltcGVyYXRpdmVIYW5kbGU6IGZ1bmN0aW9uIChyZWYsIGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlSW1wZXJhdGl2ZUhhbmRsZSc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudEltcGVyYXRpdmVIYW5kbGUocmVmLCBjcmVhdGUsIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlSW5zZXJ0aW9uRWZmZWN0OiBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VJbnNlcnRpb25FZmZlY3QnO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gbW91bnRJbnNlcnRpb25FZmZlY3QoY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUxheW91dEVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlTGF5b3V0RWZmZWN0JztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50TGF5b3V0RWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VNZW1vOiBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VNZW1vJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQ7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPbk1vdW50SW5ERVY7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBtb3VudE1lbW8oY3JlYXRlLCBkZXBzKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gcHJldkRpc3BhdGNoZXI7XG4gICAgICB9XG4gICAgfSxcbiAgICB1c2VSZWR1Y2VyOiBmdW5jdGlvbiAocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlUmVkdWNlcic7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHZhciBwcmV2RGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50O1xuICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25Nb3VudEluREVWO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gbW91bnRSZWR1Y2VyKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBwcmV2RGlzcGF0Y2hlcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZVJlZjogZnVuY3Rpb24gKGluaXRpYWxWYWx1ZSkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlUmVmJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50UmVmKGluaXRpYWxWYWx1ZSk7XG4gICAgfSxcbiAgICB1c2VTdGF0ZTogZnVuY3Rpb24gKGluaXRpYWxTdGF0ZSkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlU3RhdGUnO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uTW91bnRJbkRFVjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG1vdW50U3RhdGUoaW5pdGlhbFN0YXRlKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gcHJldkRpc3BhdGNoZXI7XG4gICAgICB9XG4gICAgfSxcbiAgICB1c2VEZWJ1Z1ZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIGZvcm1hdHRlckZuKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VEZWJ1Z1ZhbHVlJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50RGVidWdWYWx1ZSgpO1xuICAgIH0sXG4gICAgdXNlRGVmZXJyZWRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VEZWZlcnJlZFZhbHVlJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50RGVmZXJyZWRWYWx1ZSh2YWx1ZSk7XG4gICAgfSxcbiAgICB1c2VUcmFuc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VUcmFuc2l0aW9uJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50VHJhbnNpdGlvbigpO1xuICAgIH0sXG4gICAgdXNlTXV0YWJsZVNvdXJjZTogZnVuY3Rpb24gKHNvdXJjZSwgZ2V0U25hcHNob3QsIHN1YnNjcmliZSkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlTXV0YWJsZVNvdXJjZSc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudE11dGFibGVTb3VyY2UoKTtcbiAgICB9LFxuICAgIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiBmdW5jdGlvbiAoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZVN5bmNFeHRlcm5hbFN0b3JlJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50U3luY0V4dGVybmFsU3RvcmUoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpO1xuICAgIH0sXG4gICAgdXNlSWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUlkJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50SWQoKTtcbiAgICB9LFxuICAgIHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjogZW5hYmxlTmV3UmVjb25jaWxlclxuICB9O1xuXG4gIEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlSW5ERVYgPSB7XG4gICAgcmVhZENvbnRleHQ6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICByZXR1cm4gcmVhZENvbnRleHQoY29udGV4dCk7XG4gICAgfSxcbiAgICB1c2VDYWxsYmFjazogZnVuY3Rpb24gKGNhbGxiYWNrLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VDYWxsYmFjayc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVDYWxsYmFjayhjYWxsYmFjaywgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VDb250ZXh0OiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlQ29udGV4dCc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiByZWFkQ29udGV4dChjb250ZXh0KTtcbiAgICB9LFxuICAgIHVzZUVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlRWZmZWN0JztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZUVmZmVjdChjcmVhdGUsIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlSW1wZXJhdGl2ZUhhbmRsZTogZnVuY3Rpb24gKHJlZiwgY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VJbXBlcmF0aXZlSGFuZGxlJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZUltcGVyYXRpdmVIYW5kbGUocmVmLCBjcmVhdGUsIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlSW5zZXJ0aW9uRWZmZWN0OiBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VJbnNlcnRpb25FZmZlY3QnO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlSW5zZXJ0aW9uRWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VMYXlvdXRFZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUxheW91dEVmZmVjdCc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVMYXlvdXRFZmZlY3QoY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZU1lbW86IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZU1lbW8nO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlSW5ERVY7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB1cGRhdGVNZW1vKGNyZWF0ZSwgZGVwcyk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IHByZXZEaXNwYXRjaGVyO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXNlUmVkdWNlcjogZnVuY3Rpb24gKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZVJlZHVjZXInO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlSW5ERVY7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB1cGRhdGVSZWR1Y2VyKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBwcmV2RGlzcGF0Y2hlcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZVJlZjogZnVuY3Rpb24gKGluaXRpYWxWYWx1ZSkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlUmVmJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZVJlZigpO1xuICAgIH0sXG4gICAgdXNlU3RhdGU6IGZ1bmN0aW9uIChpbml0aWFsU3RhdGUpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZVN0YXRlJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQ7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZUluREVWO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gdXBkYXRlU3RhdGUoaW5pdGlhbFN0YXRlKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gcHJldkRpc3BhdGNoZXI7XG4gICAgICB9XG4gICAgfSxcbiAgICB1c2VEZWJ1Z1ZhbHVlOiBmdW5jdGlvbiAodmFsdWUsIGZvcm1hdHRlckZuKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VEZWJ1Z1ZhbHVlJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZURlYnVnVmFsdWUoKTtcbiAgICB9LFxuICAgIHVzZURlZmVycmVkVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlRGVmZXJyZWRWYWx1ZSc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVEZWZlcnJlZFZhbHVlKHZhbHVlKTtcbiAgICB9LFxuICAgIHVzZVRyYW5zaXRpb246IGZ1bmN0aW9uICgpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZVRyYW5zaXRpb24nO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlVHJhbnNpdGlvbigpO1xuICAgIH0sXG4gICAgdXNlTXV0YWJsZVNvdXJjZTogZnVuY3Rpb24gKHNvdXJjZSwgZ2V0U25hcHNob3QsIHN1YnNjcmliZSkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlTXV0YWJsZVNvdXJjZSc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVNdXRhYmxlU291cmNlKCk7XG4gICAgfSxcbiAgICB1c2VTeW5jRXh0ZXJuYWxTdG9yZTogZnVuY3Rpb24gKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VTeW5jRXh0ZXJuYWxTdG9yZSc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVTeW5jRXh0ZXJuYWxTdG9yZShzdWJzY3JpYmUsIGdldFNuYXBzaG90KTtcbiAgICB9LFxuICAgIHVzZUlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VJZCc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVJZCgpO1xuICAgIH0sXG4gICAgdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiBlbmFibGVOZXdSZWNvbmNpbGVyXG4gIH07XG5cbiAgSG9va3NEaXNwYXRjaGVyT25SZXJlbmRlckluREVWID0ge1xuICAgIHJlYWRDb250ZXh0OiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgcmV0dXJuIHJlYWRDb250ZXh0KGNvbnRleHQpO1xuICAgIH0sXG4gICAgdXNlQ2FsbGJhY2s6IGZ1bmN0aW9uIChjYWxsYmFjaywgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlQ2FsbGJhY2snO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlQ2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUNvbnRleHQnO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gcmVhZENvbnRleHQoY29udGV4dCk7XG4gICAgfSxcbiAgICB1c2VFZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUVmZmVjdCc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVFZmZlY3QoY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUltcGVyYXRpdmVIYW5kbGU6IGZ1bmN0aW9uIChyZWYsIGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlSW1wZXJhdGl2ZUhhbmRsZSc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVJbXBlcmF0aXZlSGFuZGxlKHJlZiwgY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUluc2VydGlvbkVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlSW5zZXJ0aW9uRWZmZWN0JztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZUluc2VydGlvbkVmZmVjdChjcmVhdGUsIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlTGF5b3V0RWZmZWN0OiBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VMYXlvdXRFZmZlY3QnO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlTGF5b3V0RWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VNZW1vOiBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VNZW1vJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQ7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPblJlcmVuZGVySW5ERVY7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB1cGRhdGVNZW1vKGNyZWF0ZSwgZGVwcyk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IHByZXZEaXNwYXRjaGVyO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXNlUmVkdWNlcjogZnVuY3Rpb24gKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZVJlZHVjZXInO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXJJbkRFVjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHJlcmVuZGVyUmVkdWNlcihyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gcHJldkRpc3BhdGNoZXI7XG4gICAgICB9XG4gICAgfSxcbiAgICB1c2VSZWY6IGZ1bmN0aW9uIChpbml0aWFsVmFsdWUpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZVJlZic7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVSZWYoKTtcbiAgICB9LFxuICAgIHVzZVN0YXRlOiBmdW5jdGlvbiAoaW5pdGlhbFN0YXRlKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VTdGF0ZSc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHZhciBwcmV2RGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50O1xuICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25SZXJlbmRlckluREVWO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gcmVyZW5kZXJTdGF0ZShpbml0aWFsU3RhdGUpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBwcmV2RGlzcGF0Y2hlcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZURlYnVnVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgZm9ybWF0dGVyRm4pIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZURlYnVnVmFsdWUnO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlRGVidWdWYWx1ZSgpO1xuICAgIH0sXG4gICAgdXNlRGVmZXJyZWRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VEZWZlcnJlZFZhbHVlJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHJlcmVuZGVyRGVmZXJyZWRWYWx1ZSh2YWx1ZSk7XG4gICAgfSxcbiAgICB1c2VUcmFuc2l0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VUcmFuc2l0aW9uJztcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHJlcmVuZGVyVHJhbnNpdGlvbigpO1xuICAgIH0sXG4gICAgdXNlTXV0YWJsZVNvdXJjZTogZnVuY3Rpb24gKHNvdXJjZSwgZ2V0U25hcHNob3QsIHN1YnNjcmliZSkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlTXV0YWJsZVNvdXJjZSc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVNdXRhYmxlU291cmNlKCk7XG4gICAgfSxcbiAgICB1c2VTeW5jRXh0ZXJuYWxTdG9yZTogZnVuY3Rpb24gKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VTeW5jRXh0ZXJuYWxTdG9yZSc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVTeW5jRXh0ZXJuYWxTdG9yZShzdWJzY3JpYmUsIGdldFNuYXBzaG90KTtcbiAgICB9LFxuICAgIHVzZUlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VJZCc7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVJZCgpO1xuICAgIH0sXG4gICAgdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiBlbmFibGVOZXdSZWNvbmNpbGVyXG4gIH07XG5cbiAgSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uTW91bnRJbkRFViA9IHtcbiAgICByZWFkQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIHdhcm5JbnZhbGlkQ29udGV4dEFjY2VzcygpO1xuICAgICAgcmV0dXJuIHJlYWRDb250ZXh0KGNvbnRleHQpO1xuICAgIH0sXG4gICAgdXNlQ2FsbGJhY2s6IGZ1bmN0aW9uIChjYWxsYmFjaywgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlQ2FsbGJhY2snO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICBtb3VudEhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50Q2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUNvbnRleHQnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICBtb3VudEhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHJlYWRDb250ZXh0KGNvbnRleHQpO1xuICAgIH0sXG4gICAgdXNlRWZmZWN0OiBmdW5jdGlvbiAoY3JlYXRlLCBkZXBzKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VFZmZlY3QnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICBtb3VudEhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50RWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VJbXBlcmF0aXZlSGFuZGxlOiBmdW5jdGlvbiAocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUltcGVyYXRpdmVIYW5kbGUnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICBtb3VudEhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50SW1wZXJhdGl2ZUhhbmRsZShyZWYsIGNyZWF0ZSwgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VJbnNlcnRpb25FZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUluc2VydGlvbkVmZmVjdCc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gbW91bnRJbnNlcnRpb25FZmZlY3QoY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUxheW91dEVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlTGF5b3V0RWZmZWN0JztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudExheW91dEVmZmVjdChjcmVhdGUsIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlTWVtbzogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlTWVtbyc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uTW91bnRJbkRFVjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG1vdW50TWVtbyhjcmVhdGUsIGRlcHMpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBwcmV2RGlzcGF0Y2hlcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZVJlZHVjZXI6IGZ1bmN0aW9uIChyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VSZWR1Y2VyJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHZhciBwcmV2RGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50O1xuICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25Nb3VudEluREVWO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gbW91bnRSZWR1Y2VyKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBwcmV2RGlzcGF0Y2hlcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZVJlZjogZnVuY3Rpb24gKGluaXRpYWxWYWx1ZSkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlUmVmJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudFJlZihpbml0aWFsVmFsdWUpO1xuICAgIH0sXG4gICAgdXNlU3RhdGU6IGZ1bmN0aW9uIChpbml0aWFsU3RhdGUpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZVN0YXRlJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHZhciBwcmV2RGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50O1xuICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25Nb3VudEluREVWO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gbW91bnRTdGF0ZShpbml0aWFsU3RhdGUpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBwcmV2RGlzcGF0Y2hlcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZURlYnVnVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgZm9ybWF0dGVyRm4pIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZURlYnVnVmFsdWUnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICBtb3VudEhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIG1vdW50RGVidWdWYWx1ZSgpO1xuICAgIH0sXG4gICAgdXNlRGVmZXJyZWRWYWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VEZWZlcnJlZFZhbHVlJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudERlZmVycmVkVmFsdWUodmFsdWUpO1xuICAgIH0sXG4gICAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlVHJhbnNpdGlvbic7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gbW91bnRUcmFuc2l0aW9uKCk7XG4gICAgfSxcbiAgICB1c2VNdXRhYmxlU291cmNlOiBmdW5jdGlvbiAoc291cmNlLCBnZXRTbmFwc2hvdCwgc3Vic2NyaWJlKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VNdXRhYmxlU291cmNlJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudE11dGFibGVTb3VyY2UoKTtcbiAgICB9LFxuICAgIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiBmdW5jdGlvbiAoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZVN5bmNFeHRlcm5hbFN0b3JlJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgbW91bnRIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiBtb3VudFN5bmNFeHRlcm5hbFN0b3JlKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KTtcbiAgICB9LFxuICAgIHVzZUlkOiBmdW5jdGlvbiAoKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VJZCc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIG1vdW50SG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gbW91bnRJZCgpO1xuICAgIH0sXG4gICAgdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiBlbmFibGVOZXdSZWNvbmNpbGVyXG4gIH07XG5cbiAgSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlSW5ERVYgPSB7XG4gICAgcmVhZENvbnRleHQ6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICB3YXJuSW52YWxpZENvbnRleHRBY2Nlc3MoKTtcbiAgICAgIHJldHVybiByZWFkQ29udGV4dChjb250ZXh0KTtcbiAgICB9LFxuICAgIHVzZUNhbGxiYWNrOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUNhbGxiYWNrJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlQ2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUNvbnRleHQnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiByZWFkQ29udGV4dChjb250ZXh0KTtcbiAgICB9LFxuICAgIHVzZUVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlRWZmZWN0JztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlRWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VJbXBlcmF0aXZlSGFuZGxlOiBmdW5jdGlvbiAocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUltcGVyYXRpdmVIYW5kbGUnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVJbXBlcmF0aXZlSGFuZGxlKHJlZiwgY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUluc2VydGlvbkVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlSW5zZXJ0aW9uRWZmZWN0JztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlSW5zZXJ0aW9uRWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VMYXlvdXRFZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUxheW91dEVmZmVjdCc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZUxheW91dEVmZmVjdChjcmVhdGUsIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlTWVtbzogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlTWVtbyc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQ7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZUluREVWO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gdXBkYXRlTWVtbyhjcmVhdGUsIGRlcHMpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBwcmV2RGlzcGF0Y2hlcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZVJlZHVjZXI6IGZ1bmN0aW9uIChyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VSZWR1Y2VyJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlSW5ERVY7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiB1cGRhdGVSZWR1Y2VyKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBwcmV2RGlzcGF0Y2hlcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZVJlZjogZnVuY3Rpb24gKGluaXRpYWxWYWx1ZSkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlUmVmJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlUmVmKCk7XG4gICAgfSxcbiAgICB1c2VTdGF0ZTogZnVuY3Rpb24gKGluaXRpYWxTdGF0ZSkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlU3RhdGUnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHZhciBwcmV2RGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50O1xuICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25VcGRhdGVJbkRFVjtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZVN0YXRlKGluaXRpYWxTdGF0ZSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IHByZXZEaXNwYXRjaGVyO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXNlRGVidWdWYWx1ZTogZnVuY3Rpb24gKHZhbHVlLCBmb3JtYXR0ZXJGbikge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlRGVidWdWYWx1ZSc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZURlYnVnVmFsdWUoKTtcbiAgICB9LFxuICAgIHVzZURlZmVycmVkVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlRGVmZXJyZWRWYWx1ZSc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZURlZmVycmVkVmFsdWUodmFsdWUpO1xuICAgIH0sXG4gICAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlVHJhbnNpdGlvbic7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZVRyYW5zaXRpb24oKTtcbiAgICB9LFxuICAgIHVzZU11dGFibGVTb3VyY2U6IGZ1bmN0aW9uIChzb3VyY2UsIGdldFNuYXBzaG90LCBzdWJzY3JpYmUpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZU11dGFibGVTb3VyY2UnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVNdXRhYmxlU291cmNlKCk7XG4gICAgfSxcbiAgICB1c2VTeW5jRXh0ZXJuYWxTdG9yZTogZnVuY3Rpb24gKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VTeW5jRXh0ZXJuYWxTdG9yZSc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZVN5bmNFeHRlcm5hbFN0b3JlKHN1YnNjcmliZSwgZ2V0U25hcHNob3QpO1xuICAgIH0sXG4gICAgdXNlSWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUlkJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlSWQoKTtcbiAgICB9LFxuICAgIHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjogZW5hYmxlTmV3UmVjb25jaWxlclxuICB9O1xuXG4gIEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPblJlcmVuZGVySW5ERVYgPSB7XG4gICAgcmVhZENvbnRleHQ6IGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICB3YXJuSW52YWxpZENvbnRleHRBY2Nlc3MoKTtcbiAgICAgIHJldHVybiByZWFkQ29udGV4dChjb250ZXh0KTtcbiAgICB9LFxuICAgIHVzZUNhbGxiYWNrOiBmdW5jdGlvbiAoY2FsbGJhY2ssIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUNhbGxiYWNrJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlQ2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlQ29udGV4dDogZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUNvbnRleHQnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiByZWFkQ29udGV4dChjb250ZXh0KTtcbiAgICB9LFxuICAgIHVzZUVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlRWZmZWN0JztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlRWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VJbXBlcmF0aXZlSGFuZGxlOiBmdW5jdGlvbiAocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUltcGVyYXRpdmVIYW5kbGUnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVJbXBlcmF0aXZlSGFuZGxlKHJlZiwgY3JlYXRlLCBkZXBzKTtcbiAgICB9LFxuICAgIHVzZUluc2VydGlvbkVmZmVjdDogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlSW5zZXJ0aW9uRWZmZWN0JztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlSW5zZXJ0aW9uRWZmZWN0KGNyZWF0ZSwgZGVwcyk7XG4gICAgfSxcbiAgICB1c2VMYXlvdXRFZmZlY3Q6IGZ1bmN0aW9uIChjcmVhdGUsIGRlcHMpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZUxheW91dEVmZmVjdCc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZUxheW91dEVmZmVjdChjcmVhdGUsIGRlcHMpO1xuICAgIH0sXG4gICAgdXNlTWVtbzogZnVuY3Rpb24gKGNyZWF0ZSwgZGVwcykge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlTWVtbyc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQ7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZUluREVWO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gdXBkYXRlTWVtbyhjcmVhdGUsIGRlcHMpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBwcmV2RGlzcGF0Y2hlcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZVJlZHVjZXI6IGZ1bmN0aW9uIChyZWR1Y2VyLCBpbml0aWFsQXJnLCBpbml0KSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VSZWR1Y2VyJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICB2YXIgcHJldkRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudDtcbiAgICAgIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50ID0gSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uVXBkYXRlSW5ERVY7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiByZXJlbmRlclJlZHVjZXIocmVkdWNlciwgaW5pdGlhbEFyZywgaW5pdCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IHByZXZEaXNwYXRjaGVyO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXNlUmVmOiBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VSZWYnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVSZWYoKTtcbiAgICB9LFxuICAgIHVzZVN0YXRlOiBmdW5jdGlvbiAoaW5pdGlhbFN0YXRlKSB7XG4gICAgICBjdXJyZW50SG9va05hbWVJbkRldiA9ICd1c2VTdGF0ZSc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQ7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IEludmFsaWROZXN0ZWRIb29rc0Rpc3BhdGNoZXJPblVwZGF0ZUluREVWO1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gcmVyZW5kZXJTdGF0ZShpbml0aWFsU3RhdGUpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBwcmV2RGlzcGF0Y2hlcjtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVzZURlYnVnVmFsdWU6IGZ1bmN0aW9uICh2YWx1ZSwgZm9ybWF0dGVyRm4pIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZURlYnVnVmFsdWUnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVEZWJ1Z1ZhbHVlKCk7XG4gICAgfSxcbiAgICB1c2VEZWZlcnJlZFZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZURlZmVycmVkVmFsdWUnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiByZXJlbmRlckRlZmVycmVkVmFsdWUodmFsdWUpO1xuICAgIH0sXG4gICAgdXNlVHJhbnNpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlVHJhbnNpdGlvbic7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHJlcmVuZGVyVHJhbnNpdGlvbigpO1xuICAgIH0sXG4gICAgdXNlTXV0YWJsZVNvdXJjZTogZnVuY3Rpb24gKHNvdXJjZSwgZ2V0U25hcHNob3QsIHN1YnNjcmliZSkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlTXV0YWJsZVNvdXJjZSc7XG4gICAgICB3YXJuSW52YWxpZEhvb2tBY2Nlc3MoKTtcbiAgICAgIHVwZGF0ZUhvb2tUeXBlc0RldigpO1xuICAgICAgcmV0dXJuIHVwZGF0ZU11dGFibGVTb3VyY2UoKTtcbiAgICB9LFxuICAgIHVzZVN5bmNFeHRlcm5hbFN0b3JlOiBmdW5jdGlvbiAoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCwgZ2V0U2VydmVyU25hcHNob3QpIHtcbiAgICAgIGN1cnJlbnRIb29rTmFtZUluRGV2ID0gJ3VzZVN5bmNFeHRlcm5hbFN0b3JlJztcbiAgICAgIHdhcm5JbnZhbGlkSG9va0FjY2VzcygpO1xuICAgICAgdXBkYXRlSG9va1R5cGVzRGV2KCk7XG4gICAgICByZXR1cm4gdXBkYXRlU3luY0V4dGVybmFsU3RvcmUoc3Vic2NyaWJlLCBnZXRTbmFwc2hvdCk7XG4gICAgfSxcbiAgICB1c2VJZDogZnVuY3Rpb24gKCkge1xuICAgICAgY3VycmVudEhvb2tOYW1lSW5EZXYgPSAndXNlSWQnO1xuICAgICAgd2FybkludmFsaWRIb29rQWNjZXNzKCk7XG4gICAgICB1cGRhdGVIb29rVHlwZXNEZXYoKTtcbiAgICAgIHJldHVybiB1cGRhdGVJZCgpO1xuICAgIH0sXG4gICAgdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiBlbmFibGVOZXdSZWNvbmNpbGVyXG4gIH07XG59XG5cbnZhciBub3ckMSA9IFNjaGVkdWxlci51bnN0YWJsZV9ub3c7XG52YXIgY29tbWl0VGltZSA9IDA7XG52YXIgbGF5b3V0RWZmZWN0U3RhcnRUaW1lID0gLTE7XG52YXIgcHJvZmlsZXJTdGFydFRpbWUgPSAtMTtcbnZhciBwYXNzaXZlRWZmZWN0U3RhcnRUaW1lID0gLTE7XG4vKipcbiAqIFRyYWNrcyB3aGV0aGVyIHRoZSBjdXJyZW50IHVwZGF0ZSB3YXMgYSBuZXN0ZWQvY2FzY2FkaW5nIHVwZGF0ZSAoc2NoZWR1bGVkIGZyb20gYSBsYXlvdXQgZWZmZWN0KS5cbiAqXG4gKiBUaGUgb3ZlcmFsbCBzZXF1ZW5jZSBpczpcbiAqICAgMS4gcmVuZGVyXG4gKiAgIDIuIGNvbW1pdCAoYW5kIGNhbGwgYG9uUmVuZGVyYCwgYG9uQ29tbWl0YClcbiAqICAgMy4gY2hlY2sgZm9yIG5lc3RlZCB1cGRhdGVzXG4gKiAgIDQuIGZsdXNoIHBhc3NpdmUgZWZmZWN0cyAoYW5kIGNhbGwgYG9uUG9zdENvbW1pdGApXG4gKlxuICogTmVzdGVkIHVwZGF0ZXMgYXJlIGlkZW50aWZpZWQgaW4gc3RlcCAzIGFib3ZlLFxuICogYnV0IHN0ZXAgNCBzdGlsbCBhcHBsaWVzIHRvIHRoZSB3b3JrIHRoYXQgd2FzIGp1c3QgY29tbWl0dGVkLlxuICogV2UgdXNlIHR3byBmbGFncyB0byB0cmFjayBuZXN0ZWQgdXBkYXRlcyB0aGVuOlxuICogb25lIHRyYWNrcyB3aGV0aGVyIHRoZSB1cGNvbWluZyB1cGRhdGUgaXMgYSBuZXN0ZWQgdXBkYXRlLFxuICogYW5kIHRoZSBvdGhlciB0cmFja3Mgd2hldGhlciB0aGUgY3VycmVudCB1cGRhdGUgd2FzIGEgbmVzdGVkIHVwZGF0ZS5cbiAqIFRoZSBmaXJzdCB2YWx1ZSBnZXRzIHN5bmNlZCB0byB0aGUgc2Vjb25kIGF0IHRoZSBzdGFydCBvZiB0aGUgcmVuZGVyIHBoYXNlLlxuICovXG5cbnZhciBjdXJyZW50VXBkYXRlSXNOZXN0ZWQgPSBmYWxzZTtcbnZhciBuZXN0ZWRVcGRhdGVTY2hlZHVsZWQgPSBmYWxzZTtcblxuZnVuY3Rpb24gaXNDdXJyZW50VXBkYXRlTmVzdGVkKCkge1xuICByZXR1cm4gY3VycmVudFVwZGF0ZUlzTmVzdGVkO1xufVxuXG5mdW5jdGlvbiBtYXJrTmVzdGVkVXBkYXRlU2NoZWR1bGVkKCkge1xuICB7XG4gICAgbmVzdGVkVXBkYXRlU2NoZWR1bGVkID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNldE5lc3RlZFVwZGF0ZUZsYWcoKSB7XG4gIHtcbiAgICBjdXJyZW50VXBkYXRlSXNOZXN0ZWQgPSBmYWxzZTtcbiAgICBuZXN0ZWRVcGRhdGVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzeW5jTmVzdGVkVXBkYXRlRmxhZygpIHtcbiAge1xuICAgIGN1cnJlbnRVcGRhdGVJc05lc3RlZCA9IG5lc3RlZFVwZGF0ZVNjaGVkdWxlZDtcbiAgICBuZXN0ZWRVcGRhdGVTY2hlZHVsZWQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDb21taXRUaW1lKCkge1xuICByZXR1cm4gY29tbWl0VGltZTtcbn1cblxuZnVuY3Rpb24gcmVjb3JkQ29tbWl0VGltZSgpIHtcblxuICBjb21taXRUaW1lID0gbm93JDEoKTtcbn1cblxuZnVuY3Rpb24gc3RhcnRQcm9maWxlclRpbWVyKGZpYmVyKSB7XG5cbiAgcHJvZmlsZXJTdGFydFRpbWUgPSBub3ckMSgpO1xuXG4gIGlmIChmaWJlci5hY3R1YWxTdGFydFRpbWUgPCAwKSB7XG4gICAgZmliZXIuYWN0dWFsU3RhcnRUaW1lID0gbm93JDEoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzdG9wUHJvZmlsZXJUaW1lcklmUnVubmluZyhmaWJlcikge1xuXG4gIHByb2ZpbGVyU3RhcnRUaW1lID0gLTE7XG59XG5cbmZ1bmN0aW9uIHN0b3BQcm9maWxlclRpbWVySWZSdW5uaW5nQW5kUmVjb3JkRGVsdGEoZmliZXIsIG92ZXJyaWRlQmFzZVRpbWUpIHtcblxuICBpZiAocHJvZmlsZXJTdGFydFRpbWUgPj0gMCkge1xuICAgIHZhciBlbGFwc2VkVGltZSA9IG5vdyQxKCkgLSBwcm9maWxlclN0YXJ0VGltZTtcbiAgICBmaWJlci5hY3R1YWxEdXJhdGlvbiArPSBlbGFwc2VkVGltZTtcblxuICAgIGlmIChvdmVycmlkZUJhc2VUaW1lKSB7XG4gICAgICBmaWJlci5zZWxmQmFzZUR1cmF0aW9uID0gZWxhcHNlZFRpbWU7XG4gICAgfVxuXG4gICAgcHJvZmlsZXJTdGFydFRpbWUgPSAtMTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRMYXlvdXRFZmZlY3REdXJhdGlvbihmaWJlcikge1xuXG4gIGlmIChsYXlvdXRFZmZlY3RTdGFydFRpbWUgPj0gMCkge1xuICAgIHZhciBlbGFwc2VkVGltZSA9IG5vdyQxKCkgLSBsYXlvdXRFZmZlY3RTdGFydFRpbWU7XG4gICAgbGF5b3V0RWZmZWN0U3RhcnRUaW1lID0gLTE7IC8vIFN0b3JlIGR1cmF0aW9uIG9uIHRoZSBuZXh0IG5lYXJlc3QgUHJvZmlsZXIgYW5jZXN0b3JcbiAgICAvLyBPciB0aGUgcm9vdCAoZm9yIHRoZSBEZXZUb29scyBQcm9maWxlciB0byByZWFkKVxuXG4gICAgdmFyIHBhcmVudEZpYmVyID0gZmliZXIucmV0dXJuO1xuXG4gICAgd2hpbGUgKHBhcmVudEZpYmVyICE9PSBudWxsKSB7XG4gICAgICBzd2l0Y2ggKHBhcmVudEZpYmVyLnRhZykge1xuICAgICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICAgIHZhciByb290ID0gcGFyZW50RmliZXIuc3RhdGVOb2RlO1xuICAgICAgICAgIHJvb3QuZWZmZWN0RHVyYXRpb24gKz0gZWxhcHNlZFRpbWU7XG4gICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGNhc2UgUHJvZmlsZXI6XG4gICAgICAgICAgdmFyIHBhcmVudFN0YXRlTm9kZSA9IHBhcmVudEZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgICBwYXJlbnRTdGF0ZU5vZGUuZWZmZWN0RHVyYXRpb24gKz0gZWxhcHNlZFRpbWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBwYXJlbnRGaWJlciA9IHBhcmVudEZpYmVyLnJldHVybjtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjb3JkUGFzc2l2ZUVmZmVjdER1cmF0aW9uKGZpYmVyKSB7XG5cbiAgaWYgKHBhc3NpdmVFZmZlY3RTdGFydFRpbWUgPj0gMCkge1xuICAgIHZhciBlbGFwc2VkVGltZSA9IG5vdyQxKCkgLSBwYXNzaXZlRWZmZWN0U3RhcnRUaW1lO1xuICAgIHBhc3NpdmVFZmZlY3RTdGFydFRpbWUgPSAtMTsgLy8gU3RvcmUgZHVyYXRpb24gb24gdGhlIG5leHQgbmVhcmVzdCBQcm9maWxlciBhbmNlc3RvclxuICAgIC8vIE9yIHRoZSByb290IChmb3IgdGhlIERldlRvb2xzIFByb2ZpbGVyIHRvIHJlYWQpXG5cbiAgICB2YXIgcGFyZW50RmliZXIgPSBmaWJlci5yZXR1cm47XG5cbiAgICB3aGlsZSAocGFyZW50RmliZXIgIT09IG51bGwpIHtcbiAgICAgIHN3aXRjaCAocGFyZW50RmliZXIudGFnKSB7XG4gICAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgICAgdmFyIHJvb3QgPSBwYXJlbnRGaWJlci5zdGF0ZU5vZGU7XG5cbiAgICAgICAgICBpZiAocm9vdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgcm9vdC5wYXNzaXZlRWZmZWN0RHVyYXRpb24gKz0gZWxhcHNlZFRpbWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGNhc2UgUHJvZmlsZXI6XG4gICAgICAgICAgdmFyIHBhcmVudFN0YXRlTm9kZSA9IHBhcmVudEZpYmVyLnN0YXRlTm9kZTtcblxuICAgICAgICAgIGlmIChwYXJlbnRTdGF0ZU5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIERldGFjaGVkIGZpYmVycyBoYXZlIHRoZWlyIHN0YXRlIG5vZGUgY2xlYXJlZCBvdXQuXG4gICAgICAgICAgICAvLyBJbiB0aGlzIGNhc2UsIHRoZSByZXR1cm4gcG9pbnRlciBpcyBhbHNvIGNsZWFyZWQgb3V0LFxuICAgICAgICAgICAgLy8gc28gd2Ugd29uJ3QgYmUgYWJsZSB0byByZXBvcnQgdGhlIHRpbWUgc3BlbnQgaW4gdGhpcyBQcm9maWxlcidzIHN1YnRyZWUuXG4gICAgICAgICAgICBwYXJlbnRTdGF0ZU5vZGUucGFzc2l2ZUVmZmVjdER1cmF0aW9uICs9IGVsYXBzZWRUaW1lO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5yZXR1cm47XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0YXJ0TGF5b3V0RWZmZWN0VGltZXIoKSB7XG5cbiAgbGF5b3V0RWZmZWN0U3RhcnRUaW1lID0gbm93JDEoKTtcbn1cblxuZnVuY3Rpb24gc3RhcnRQYXNzaXZlRWZmZWN0VGltZXIoKSB7XG5cbiAgcGFzc2l2ZUVmZmVjdFN0YXJ0VGltZSA9IG5vdyQxKCk7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZmVyQWN0dWFsRHVyYXRpb24oZmliZXIpIHtcbiAgLy8gVHJhbnNmZXIgdGltZSBzcGVudCByZW5kZXJpbmcgdGhlc2UgY2hpbGRyZW4gc28gd2UgZG9uJ3QgbG9zZSBpdFxuICAvLyBhZnRlciB3ZSByZXJlbmRlci4gVGhpcyBpcyB1c2VkIGFzIGEgaGVscGVyIGluIHNwZWNpYWwgY2FzZXNcbiAgLy8gd2hlcmUgd2Ugc2hvdWxkIGNvdW50IHRoZSB3b3JrIG9mIG11bHRpcGxlIHBhc3Nlcy5cbiAgdmFyIGNoaWxkID0gZmliZXIuY2hpbGQ7XG5cbiAgd2hpbGUgKGNoaWxkKSB7XG4gICAgZmliZXIuYWN0dWFsRHVyYXRpb24gKz0gY2hpbGQuYWN0dWFsRHVyYXRpb247XG4gICAgY2hpbGQgPSBjaGlsZC5zaWJsaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVEZWZhdWx0UHJvcHMoQ29tcG9uZW50LCBiYXNlUHJvcHMpIHtcbiAgaWYgKENvbXBvbmVudCAmJiBDb21wb25lbnQuZGVmYXVsdFByb3BzKSB7XG4gICAgLy8gUmVzb2x2ZSBkZWZhdWx0IHByb3BzLiBUYWtlbiBmcm9tIFJlYWN0RWxlbWVudFxuICAgIHZhciBwcm9wcyA9IGFzc2lnbih7fSwgYmFzZVByb3BzKTtcbiAgICB2YXIgZGVmYXVsdFByb3BzID0gQ29tcG9uZW50LmRlZmF1bHRQcm9wcztcblxuICAgIGZvciAodmFyIHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGRlZmF1bHRQcm9wc1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb3BzO1xuICB9XG5cbiAgcmV0dXJuIGJhc2VQcm9wcztcbn1cblxudmFyIGZha2VJbnRlcm5hbEluc3RhbmNlID0ge307XG52YXIgZGlkV2FybkFib3V0U3RhdGVBc3NpZ25tZW50Rm9yQ29tcG9uZW50O1xudmFyIGRpZFdhcm5BYm91dFVuaW5pdGlhbGl6ZWRTdGF0ZTtcbnZhciBkaWRXYXJuQWJvdXRHZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZVdpdGhvdXREaWRVcGRhdGU7XG52YXIgZGlkV2FybkFib3V0TGVnYWN5TGlmZWN5Y2xlc0FuZERlcml2ZWRTdGF0ZTtcbnZhciBkaWRXYXJuQWJvdXRVbmRlZmluZWREZXJpdmVkU3RhdGU7XG52YXIgd2Fybk9uVW5kZWZpbmVkRGVyaXZlZFN0YXRlO1xudmFyIHdhcm5PbkludmFsaWRDYWxsYmFjaztcbnZhciBkaWRXYXJuQWJvdXREaXJlY3RseUFzc2lnbmluZ1Byb3BzVG9TdGF0ZTtcbnZhciBkaWRXYXJuQWJvdXRDb250ZXh0VHlwZUFuZENvbnRleHRUeXBlcztcbnZhciBkaWRXYXJuQWJvdXRJbnZhbGlkYXRlQ29udGV4dFR5cGU7XG52YXIgZGlkV2FybkFib3V0TGVnYWN5Q29udGV4dCQxO1xuXG57XG4gIGRpZFdhcm5BYm91dFN0YXRlQXNzaWdubWVudEZvckNvbXBvbmVudCA9IG5ldyBTZXQoKTtcbiAgZGlkV2FybkFib3V0VW5pbml0aWFsaXplZFN0YXRlID0gbmV3IFNldCgpO1xuICBkaWRXYXJuQWJvdXRHZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZVdpdGhvdXREaWRVcGRhdGUgPSBuZXcgU2V0KCk7XG4gIGRpZFdhcm5BYm91dExlZ2FjeUxpZmVjeWNsZXNBbmREZXJpdmVkU3RhdGUgPSBuZXcgU2V0KCk7XG4gIGRpZFdhcm5BYm91dERpcmVjdGx5QXNzaWduaW5nUHJvcHNUb1N0YXRlID0gbmV3IFNldCgpO1xuICBkaWRXYXJuQWJvdXRVbmRlZmluZWREZXJpdmVkU3RhdGUgPSBuZXcgU2V0KCk7XG4gIGRpZFdhcm5BYm91dENvbnRleHRUeXBlQW5kQ29udGV4dFR5cGVzID0gbmV3IFNldCgpO1xuICBkaWRXYXJuQWJvdXRJbnZhbGlkYXRlQ29udGV4dFR5cGUgPSBuZXcgU2V0KCk7XG4gIGRpZFdhcm5BYm91dExlZ2FjeUNvbnRleHQkMSA9IG5ldyBTZXQoKTtcbiAgdmFyIGRpZFdhcm5PbkludmFsaWRDYWxsYmFjayA9IG5ldyBTZXQoKTtcblxuICB3YXJuT25JbnZhbGlkQ2FsbGJhY2sgPSBmdW5jdGlvbiAoY2FsbGJhY2ssIGNhbGxlck5hbWUpIHtcbiAgICBpZiAoY2FsbGJhY2sgPT09IG51bGwgfHwgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGtleSA9IGNhbGxlck5hbWUgKyAnXycgKyBjYWxsYmFjaztcblxuICAgIGlmICghZGlkV2Fybk9uSW52YWxpZENhbGxiYWNrLmhhcyhrZXkpKSB7XG4gICAgICBkaWRXYXJuT25JbnZhbGlkQ2FsbGJhY2suYWRkKGtleSk7XG5cbiAgICAgIGVycm9yKCclcyguLi4pOiBFeHBlY3RlZCB0aGUgbGFzdCBvcHRpb25hbCBgY2FsbGJhY2tgIGFyZ3VtZW50IHRvIGJlIGEgJyArICdmdW5jdGlvbi4gSW5zdGVhZCByZWNlaXZlZDogJXMuJywgY2FsbGVyTmFtZSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfTtcblxuICB3YXJuT25VbmRlZmluZWREZXJpdmVkU3RhdGUgPSBmdW5jdGlvbiAodHlwZSwgcGFydGlhbFN0YXRlKSB7XG4gICAgaWYgKHBhcnRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlKSB8fCAnQ29tcG9uZW50JztcblxuICAgICAgaWYgKCFkaWRXYXJuQWJvdXRVbmRlZmluZWREZXJpdmVkU3RhdGUuaGFzKGNvbXBvbmVudE5hbWUpKSB7XG4gICAgICAgIGRpZFdhcm5BYm91dFVuZGVmaW5lZERlcml2ZWRTdGF0ZS5hZGQoY29tcG9uZW50TmFtZSk7XG5cbiAgICAgICAgZXJyb3IoJyVzLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcygpOiBBIHZhbGlkIHN0YXRlIG9iamVjdCAob3IgbnVsbCkgbXVzdCBiZSByZXR1cm5lZC4gJyArICdZb3UgaGF2ZSByZXR1cm5lZCB1bmRlZmluZWQuJywgY29tcG9uZW50TmFtZSk7XG4gICAgICB9XG4gICAgfVxuICB9OyAvLyBUaGlzIGlzIHNvIGdyb3NzIGJ1dCBpdCdzIGF0IGxlYXN0IG5vbi1jcml0aWNhbCBhbmQgY2FuIGJlIHJlbW92ZWQgaWZcbiAgLy8gaXQgY2F1c2VzIHByb2JsZW1zLiBUaGlzIGlzIG1lYW50IHRvIGdpdmUgYSBuaWNlciBlcnJvciBtZXNzYWdlIGZvclxuICAvLyBSZWFjdERPTTE1LnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKHJlYWN0RE9NMTZDb21wb25lbnQsXG4gIC8vIC4uLikpIHdoaWNoIG90aGVyd2lzZSB0aHJvd3MgYSBcIl9wcm9jZXNzQ2hpbGRDb250ZXh0IGlzIG5vdCBhIGZ1bmN0aW9uXCJcbiAgLy8gZXhjZXB0aW9uLlxuXG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGZha2VJbnRlcm5hbEluc3RhbmNlLCAnX3Byb2Nlc3NDaGlsZENvbnRleHQnLCB7XG4gICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgdmFsdWU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignX3Byb2Nlc3NDaGlsZENvbnRleHQgaXMgbm90IGF2YWlsYWJsZSBpbiBSZWFjdCAxNisuIFRoaXMgbGlrZWx5ICcgKyAnbWVhbnMgeW91IGhhdmUgbXVsdGlwbGUgY29waWVzIG9mIFJlYWN0IGFuZCBhcmUgYXR0ZW1wdGluZyB0byBuZXN0ICcgKyAnYSBSZWFjdCAxNSB0cmVlIGluc2lkZSBhIFJlYWN0IDE2IHRyZWUgdXNpbmcgJyArIFwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIsIHdoaWNoIGlzbid0IHN1cHBvcnRlZC4gVHJ5IFwiICsgJ3RvIG1ha2Ugc3VyZSB5b3UgaGF2ZSBvbmx5IG9uZSBjb3B5IG9mIFJlYWN0IChhbmQgaWRlYWxseSwgc3dpdGNoICcgKyAndG8gUmVhY3RET00uY3JlYXRlUG9ydGFsKS4nKTtcbiAgICB9XG4gIH0pO1xuICBPYmplY3QuZnJlZXplKGZha2VJbnRlcm5hbEluc3RhbmNlKTtcbn1cblxuZnVuY3Rpb24gYXBwbHlEZXJpdmVkU3RhdGVGcm9tUHJvcHMod29ya0luUHJvZ3Jlc3MsIGN0b3IsIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywgbmV4dFByb3BzKSB7XG4gIHZhciBwcmV2U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICB2YXIgcGFydGlhbFN0YXRlID0gZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKTtcblxuICB7XG4gICAgaWYgKCB3b3JrSW5Qcm9ncmVzcy5tb2RlICYgU3RyaWN0TGVnYWN5TW9kZSkge1xuICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHModHJ1ZSk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEludm9rZSB0aGUgZnVuY3Rpb24gYW4gZXh0cmEgdGltZSB0byBoZWxwIGRldGVjdCBzaWRlLWVmZmVjdHMuXG4gICAgICAgIHBhcnRpYWxTdGF0ZSA9IGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyhuZXh0UHJvcHMsIHByZXZTdGF0ZSk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyhmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgd2Fybk9uVW5kZWZpbmVkRGVyaXZlZFN0YXRlKGN0b3IsIHBhcnRpYWxTdGF0ZSk7XG4gIH0gLy8gTWVyZ2UgdGhlIHBhcnRpYWwgc3RhdGUgYW5kIHRoZSBwcmV2aW91cyBzdGF0ZS5cblxuXG4gIHZhciBtZW1vaXplZFN0YXRlID0gcGFydGlhbFN0YXRlID09PSBudWxsIHx8IHBhcnRpYWxTdGF0ZSA9PT0gdW5kZWZpbmVkID8gcHJldlN0YXRlIDogYXNzaWduKHt9LCBwcmV2U3RhdGUsIHBhcnRpYWxTdGF0ZSk7XG4gIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBtZW1vaXplZFN0YXRlOyAvLyBPbmNlIHRoZSB1cGRhdGUgcXVldWUgaXMgZW1wdHksIHBlcnNpc3QgdGhlIGRlcml2ZWQgc3RhdGUgb250byB0aGVcbiAgLy8gYmFzZSBzdGF0ZS5cblxuICBpZiAod29ya0luUHJvZ3Jlc3MubGFuZXMgPT09IE5vTGFuZXMpIHtcbiAgICAvLyBRdWV1ZSBpcyBhbHdheXMgbm9uLW51bGwgZm9yIGNsYXNzZXNcbiAgICB2YXIgdXBkYXRlUXVldWUgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZTtcbiAgICB1cGRhdGVRdWV1ZS5iYXNlU3RhdGUgPSBtZW1vaXplZFN0YXRlO1xuICB9XG59XG5cbnZhciBjbGFzc0NvbXBvbmVudFVwZGF0ZXIgPSB7XG4gIGlzTW91bnRlZDogaXNNb3VudGVkLFxuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uIChpbnN0LCBwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIHZhciBmaWJlciA9IGdldChpbnN0KTtcbiAgICB2YXIgZXZlbnRUaW1lID0gcmVxdWVzdEV2ZW50VGltZSgpO1xuICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoZmliZXIpO1xuICAgIHZhciB1cGRhdGUgPSBjcmVhdGVVcGRhdGUoZXZlbnRUaW1lLCBsYW5lKTtcbiAgICB1cGRhdGUucGF5bG9hZCA9IHBheWxvYWQ7XG5cbiAgICBpZiAoY2FsbGJhY2sgIT09IHVuZGVmaW5lZCAmJiBjYWxsYmFjayAhPT0gbnVsbCkge1xuICAgICAge1xuICAgICAgICB3YXJuT25JbnZhbGlkQ2FsbGJhY2soY2FsbGJhY2ssICdzZXRTdGF0ZScpO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB2YXIgcm9vdCA9IGVucXVldWVVcGRhdGUoZmliZXIsIHVwZGF0ZSwgbGFuZSk7XG5cbiAgICBpZiAocm9vdCAhPT0gbnVsbCkge1xuICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCBsYW5lLCBldmVudFRpbWUpO1xuICAgICAgZW50YW5nbGVUcmFuc2l0aW9ucyhyb290LCBmaWJlciwgbGFuZSk7XG4gICAgfVxuXG4gICAge1xuICAgICAgbWFya1N0YXRlVXBkYXRlU2NoZWR1bGVkKGZpYmVyLCBsYW5lKTtcbiAgICB9XG4gIH0sXG4gIGVucXVldWVSZXBsYWNlU3RhdGU6IGZ1bmN0aW9uIChpbnN0LCBwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIHZhciBmaWJlciA9IGdldChpbnN0KTtcbiAgICB2YXIgZXZlbnRUaW1lID0gcmVxdWVzdEV2ZW50VGltZSgpO1xuICAgIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoZmliZXIpO1xuICAgIHZhciB1cGRhdGUgPSBjcmVhdGVVcGRhdGUoZXZlbnRUaW1lLCBsYW5lKTtcbiAgICB1cGRhdGUudGFnID0gUmVwbGFjZVN0YXRlO1xuICAgIHVwZGF0ZS5wYXlsb2FkID0gcGF5bG9hZDtcblxuICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkICYmIGNhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICB7XG4gICAgICAgIHdhcm5PbkludmFsaWRDYWxsYmFjayhjYWxsYmFjaywgJ3JlcGxhY2VTdGF0ZScpO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9XG5cbiAgICB2YXIgcm9vdCA9IGVucXVldWVVcGRhdGUoZmliZXIsIHVwZGF0ZSwgbGFuZSk7XG5cbiAgICBpZiAocm9vdCAhPT0gbnVsbCkge1xuICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCBsYW5lLCBldmVudFRpbWUpO1xuICAgICAgZW50YW5nbGVUcmFuc2l0aW9ucyhyb290LCBmaWJlciwgbGFuZSk7XG4gICAgfVxuXG4gICAge1xuICAgICAgbWFya1N0YXRlVXBkYXRlU2NoZWR1bGVkKGZpYmVyLCBsYW5lKTtcbiAgICB9XG4gIH0sXG4gIGVucXVldWVGb3JjZVVwZGF0ZTogZnVuY3Rpb24gKGluc3QsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGZpYmVyID0gZ2V0KGluc3QpO1xuICAgIHZhciBldmVudFRpbWUgPSByZXF1ZXN0RXZlbnRUaW1lKCk7XG4gICAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZShmaWJlcik7XG4gICAgdmFyIHVwZGF0ZSA9IGNyZWF0ZVVwZGF0ZShldmVudFRpbWUsIGxhbmUpO1xuICAgIHVwZGF0ZS50YWcgPSBGb3JjZVVwZGF0ZTtcblxuICAgIGlmIChjYWxsYmFjayAhPT0gdW5kZWZpbmVkICYmIGNhbGxiYWNrICE9PSBudWxsKSB7XG4gICAgICB7XG4gICAgICAgIHdhcm5PbkludmFsaWRDYWxsYmFjayhjYWxsYmFjaywgJ2ZvcmNlVXBkYXRlJyk7XG4gICAgICB9XG5cbiAgICAgIHVwZGF0ZS5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIHZhciByb290ID0gZW5xdWV1ZVVwZGF0ZShmaWJlciwgdXBkYXRlLCBsYW5lKTtcblxuICAgIGlmIChyb290ICE9PSBudWxsKSB7XG4gICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIGxhbmUsIGV2ZW50VGltZSk7XG4gICAgICBlbnRhbmdsZVRyYW5zaXRpb25zKHJvb3QsIGZpYmVyLCBsYW5lKTtcbiAgICB9XG5cbiAgICB7XG4gICAgICBtYXJrRm9yY2VVcGRhdGVTY2hlZHVsZWQoZmliZXIsIGxhbmUpO1xuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gY2hlY2tTaG91bGRDb21wb25lbnRVcGRhdGUod29ya0luUHJvZ3Jlc3MsIGN0b3IsIG9sZFByb3BzLCBuZXdQcm9wcywgb2xkU3RhdGUsIG5ld1N0YXRlLCBuZXh0Q29udGV4dCkge1xuICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG5cbiAgaWYgKHR5cGVvZiBpbnN0YW5jZS5zaG91bGRDb21wb25lbnRVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc2hvdWxkVXBkYXRlID0gaW5zdGFuY2Uuc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5ld1Byb3BzLCBuZXdTdGF0ZSwgbmV4dENvbnRleHQpO1xuXG4gICAge1xuICAgICAgaWYgKCB3b3JrSW5Qcm9ncmVzcy5tb2RlICYgU3RyaWN0TGVnYWN5TW9kZSkge1xuICAgICAgICBzZXRJc1N0cmljdE1vZGVGb3JEZXZ0b29scyh0cnVlKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEludm9rZSB0aGUgZnVuY3Rpb24gYW4gZXh0cmEgdGltZSB0byBoZWxwIGRldGVjdCBzaWRlLWVmZmVjdHMuXG4gICAgICAgICAgc2hvdWxkVXBkYXRlID0gaW5zdGFuY2Uuc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5ld1Byb3BzLCBuZXdTdGF0ZSwgbmV4dENvbnRleHQpO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoc2hvdWxkVXBkYXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZXJyb3IoJyVzLnNob3VsZENvbXBvbmVudFVwZGF0ZSgpOiBSZXR1cm5lZCB1bmRlZmluZWQgaW5zdGVhZCBvZiBhICcgKyAnYm9vbGVhbiB2YWx1ZS4gTWFrZSBzdXJlIHRvIHJldHVybiB0cnVlIG9yIGZhbHNlLicsIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShjdG9yKSB8fCAnQ29tcG9uZW50Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNob3VsZFVwZGF0ZTtcbiAgfVxuXG4gIGlmIChjdG9yLnByb3RvdHlwZSAmJiBjdG9yLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudCkge1xuICAgIHJldHVybiAhc2hhbGxvd0VxdWFsKG9sZFByb3BzLCBuZXdQcm9wcykgfHwgIXNoYWxsb3dFcXVhbChvbGRTdGF0ZSwgbmV3U3RhdGUpO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGNoZWNrQ2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgY3RvciwgbmV3UHJvcHMpIHtcbiAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuXG4gIHtcbiAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShjdG9yKSB8fCAnQ29tcG9uZW50JztcbiAgICB2YXIgcmVuZGVyUHJlc2VudCA9IGluc3RhbmNlLnJlbmRlcjtcblxuICAgIGlmICghcmVuZGVyUHJlc2VudCkge1xuICAgICAgaWYgKGN0b3IucHJvdG90eXBlICYmIHR5cGVvZiBjdG9yLnByb3RvdHlwZS5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZXJyb3IoJyVzKC4uLik6IE5vIGByZW5kZXJgIG1ldGhvZCBmb3VuZCBvbiB0aGUgcmV0dXJuZWQgY29tcG9uZW50ICcgKyAnaW5zdGFuY2U6IGRpZCB5b3UgYWNjaWRlbnRhbGx5IHJldHVybiBhbiBvYmplY3QgZnJvbSB0aGUgY29uc3RydWN0b3I/JywgbmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvcignJXMoLi4uKTogTm8gYHJlbmRlcmAgbWV0aG9kIGZvdW5kIG9uIHRoZSByZXR1cm5lZCBjb21wb25lbnQgJyArICdpbnN0YW5jZTogeW91IG1heSBoYXZlIGZvcmdvdHRlbiB0byBkZWZpbmUgYHJlbmRlcmAuJywgbmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLmdldEluaXRpYWxTdGF0ZSAmJiAhaW5zdGFuY2UuZ2V0SW5pdGlhbFN0YXRlLmlzUmVhY3RDbGFzc0FwcHJvdmVkICYmICFpbnN0YW5jZS5zdGF0ZSkge1xuICAgICAgZXJyb3IoJ2dldEluaXRpYWxTdGF0ZSB3YXMgZGVmaW5lZCBvbiAlcywgYSBwbGFpbiBKYXZhU2NyaXB0IGNsYXNzLiAnICsgJ1RoaXMgaXMgb25seSBzdXBwb3J0ZWQgZm9yIGNsYXNzZXMgY3JlYXRlZCB1c2luZyBSZWFjdC5jcmVhdGVDbGFzcy4gJyArICdEaWQgeW91IG1lYW4gdG8gZGVmaW5lIGEgc3RhdGUgcHJvcGVydHkgaW5zdGVhZD8nLCBuYW1lKTtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UuZ2V0RGVmYXVsdFByb3BzICYmICFpbnN0YW5jZS5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQpIHtcbiAgICAgIGVycm9yKCdnZXREZWZhdWx0UHJvcHMgd2FzIGRlZmluZWQgb24gJXMsIGEgcGxhaW4gSmF2YVNjcmlwdCBjbGFzcy4gJyArICdUaGlzIGlzIG9ubHkgc3VwcG9ydGVkIGZvciBjbGFzc2VzIGNyZWF0ZWQgdXNpbmcgUmVhY3QuY3JlYXRlQ2xhc3MuICcgKyAnVXNlIGEgc3RhdGljIHByb3BlcnR5IHRvIGRlZmluZSBkZWZhdWx0UHJvcHMgaW5zdGVhZC4nLCBuYW1lKTtcbiAgICB9XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcFR5cGVzKSB7XG4gICAgICBlcnJvcigncHJvcFR5cGVzIHdhcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzLiBVc2UgYSBzdGF0aWMgJyArICdwcm9wZXJ0eSB0byBkZWZpbmUgcHJvcFR5cGVzIGluc3RlYWQuJywgbmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLmNvbnRleHRUeXBlKSB7XG4gICAgICBlcnJvcignY29udGV4dFR5cGUgd2FzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgb24gJXMuIFVzZSBhIHN0YXRpYyAnICsgJ3Byb3BlcnR5IHRvIGRlZmluZSBjb250ZXh0VHlwZSBpbnN0ZWFkLicsIG5hbWUpO1xuICAgIH1cblxuICAgIHtcbiAgICAgIGlmIChjdG9yLmNoaWxkQ29udGV4dFR5cGVzICYmICFkaWRXYXJuQWJvdXRMZWdhY3lDb250ZXh0JDEuaGFzKGN0b3IpICYmIC8vIFN0cmljdCBNb2RlIGhhcyBpdHMgb3duIHdhcm5pbmcgZm9yIGxlZ2FjeSBjb250ZXh0LCBzbyB3ZSBjYW4gc2tpcFxuICAgICAgLy8gdGhpcyBvbmUuXG4gICAgICAod29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdExlZ2FjeU1vZGUpID09PSBOb01vZGUpIHtcbiAgICAgICAgZGlkV2FybkFib3V0TGVnYWN5Q29udGV4dCQxLmFkZChjdG9yKTtcblxuICAgICAgICBlcnJvcignJXMgdXNlcyB0aGUgbGVnYWN5IGNoaWxkQ29udGV4dFR5cGVzIEFQSSB3aGljaCBpcyBubyBsb25nZXIgJyArICdzdXBwb3J0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLiBVc2UgJyArICdSZWFjdC5jcmVhdGVDb250ZXh0KCkgaW5zdGVhZFxcblxcbi4nICsgJ0xlYXJuIG1vcmUgYWJvdXQgdGhpcyB3YXJuaW5nIGhlcmU6IGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9sZWdhY3ktY29udGV4dCcsIG5hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY3Rvci5jb250ZXh0VHlwZXMgJiYgIWRpZFdhcm5BYm91dExlZ2FjeUNvbnRleHQkMS5oYXMoY3RvcikgJiYgLy8gU3RyaWN0IE1vZGUgaGFzIGl0cyBvd24gd2FybmluZyBmb3IgbGVnYWN5IGNvbnRleHQsIHNvIHdlIGNhbiBza2lwXG4gICAgICAvLyB0aGlzIG9uZS5cbiAgICAgICh3b3JrSW5Qcm9ncmVzcy5tb2RlICYgU3RyaWN0TGVnYWN5TW9kZSkgPT09IE5vTW9kZSkge1xuICAgICAgICBkaWRXYXJuQWJvdXRMZWdhY3lDb250ZXh0JDEuYWRkKGN0b3IpO1xuXG4gICAgICAgIGVycm9yKCclcyB1c2VzIHRoZSBsZWdhY3kgY29udGV4dFR5cGVzIEFQSSB3aGljaCBpcyBubyBsb25nZXIgc3VwcG9ydGVkICcgKyAnYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLiBVc2UgJyArICdSZWFjdC5jcmVhdGVDb250ZXh0KCkgd2l0aCBzdGF0aWMgY29udGV4dFR5cGUgaW5zdGVhZC5cXG5cXG4nICsgJ0xlYXJuIG1vcmUgYWJvdXQgdGhpcyB3YXJuaW5nIGhlcmU6IGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9sZWdhY3ktY29udGV4dCcsIG5hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaW5zdGFuY2UuY29udGV4dFR5cGVzKSB7XG4gICAgICAgIGVycm9yKCdjb250ZXh0VHlwZXMgd2FzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgcHJvcGVydHkgb24gJXMuIFVzZSBhIHN0YXRpYyAnICsgJ3Byb3BlcnR5IHRvIGRlZmluZSBjb250ZXh0VHlwZXMgaW5zdGVhZC4nLCBuYW1lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN0b3IuY29udGV4dFR5cGUgJiYgY3Rvci5jb250ZXh0VHlwZXMgJiYgIWRpZFdhcm5BYm91dENvbnRleHRUeXBlQW5kQ29udGV4dFR5cGVzLmhhcyhjdG9yKSkge1xuICAgICAgICBkaWRXYXJuQWJvdXRDb250ZXh0VHlwZUFuZENvbnRleHRUeXBlcy5hZGQoY3Rvcik7XG5cbiAgICAgICAgZXJyb3IoJyVzIGRlY2xhcmVzIGJvdGggY29udGV4dFR5cGVzIGFuZCBjb250ZXh0VHlwZSBzdGF0aWMgcHJvcGVydGllcy4gJyArICdUaGUgbGVnYWN5IGNvbnRleHRUeXBlcyBwcm9wZXJ0eSB3aWxsIGJlIGlnbm9yZWQuJywgbmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRTaG91bGRVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGVycm9yKCclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50U2hvdWxkVXBkYXRlKCkuIERpZCB5b3UgbWVhbiBzaG91bGRDb21wb25lbnRVcGRhdGUoKT8gJyArICdUaGUgbmFtZSBpcyBwaHJhc2VkIGFzIGEgcXVlc3Rpb24gYmVjYXVzZSB0aGUgZnVuY3Rpb24gaXMgJyArICdleHBlY3RlZCB0byByZXR1cm4gYSB2YWx1ZS4nLCBuYW1lKTtcbiAgICB9XG5cbiAgICBpZiAoY3Rvci5wcm90b3R5cGUgJiYgY3Rvci5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQgJiYgdHlwZW9mIGluc3RhbmNlLnNob3VsZENvbXBvbmVudFVwZGF0ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVycm9yKCclcyBoYXMgYSBtZXRob2QgY2FsbGVkIHNob3VsZENvbXBvbmVudFVwZGF0ZSgpLiAnICsgJ3Nob3VsZENvbXBvbmVudFVwZGF0ZSBzaG91bGQgbm90IGJlIHVzZWQgd2hlbiBleHRlbmRpbmcgUmVhY3QuUHVyZUNvbXBvbmVudC4gJyArICdQbGVhc2UgZXh0ZW5kIFJlYWN0LkNvbXBvbmVudCBpZiBzaG91bGRDb21wb25lbnRVcGRhdGUgaXMgdXNlZC4nLCBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoY3RvcikgfHwgJ0EgcHVyZSBjb21wb25lbnQnKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZFVubW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGVycm9yKCclcyBoYXMgYSBtZXRob2QgY2FsbGVkICcgKyAnY29tcG9uZW50RGlkVW5tb3VudCgpLiBCdXQgdGhlcmUgaXMgbm8gc3VjaCBsaWZlY3ljbGUgbWV0aG9kLiAnICsgJ0RpZCB5b3UgbWVhbiBjb21wb25lbnRXaWxsVW5tb3VudCgpPycsIG5hbWUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBlcnJvcignJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudERpZFJlY2VpdmVQcm9wcygpLiBCdXQgdGhlcmUgaXMgbm8gc3VjaCBsaWZlY3ljbGUgbWV0aG9kLiAnICsgJ0lmIHlvdSBtZWFudCB0byB1cGRhdGUgdGhlIHN0YXRlIGluIHJlc3BvbnNlIHRvIGNoYW5naW5nIHByb3BzLCAnICsgJ3VzZSBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKCkuIElmIHlvdSBtZWFudCB0byBmZXRjaCBkYXRhIG9yICcgKyAncnVuIHNpZGUtZWZmZWN0cyBvciBtdXRhdGlvbnMgYWZ0ZXIgUmVhY3QgaGFzIHVwZGF0ZWQgdGhlIFVJLCB1c2UgY29tcG9uZW50RGlkVXBkYXRlKCkuJywgbmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBlcnJvcignJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ2NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMoKS4gRGlkIHlvdSBtZWFuIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKT8nLCBuYW1lKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBlcnJvcignJXMgaGFzIGEgbWV0aG9kIGNhbGxlZCAnICsgJ1VOU0FGRV9jb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzKCkuIERpZCB5b3UgbWVhbiBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcygpPycsIG5hbWUpO1xuICAgIH1cblxuICAgIHZhciBoYXNNdXRhdGVkUHJvcHMgPSBpbnN0YW5jZS5wcm9wcyAhPT0gbmV3UHJvcHM7XG5cbiAgICBpZiAoaW5zdGFuY2UucHJvcHMgIT09IHVuZGVmaW5lZCAmJiBoYXNNdXRhdGVkUHJvcHMpIHtcbiAgICAgIGVycm9yKCclcyguLi4pOiBXaGVuIGNhbGxpbmcgc3VwZXIoKSBpbiBgJXNgLCBtYWtlIHN1cmUgdG8gcGFzcyAnICsgXCJ1cCB0aGUgc2FtZSBwcm9wcyB0aGF0IHlvdXIgY29tcG9uZW50J3MgY29uc3RydWN0b3Igd2FzIHBhc3NlZC5cIiwgbmFtZSwgbmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKGluc3RhbmNlLmRlZmF1bHRQcm9wcykge1xuICAgICAgZXJyb3IoJ1NldHRpbmcgZGVmYXVsdFByb3BzIGFzIGFuIGluc3RhbmNlIHByb3BlcnR5IG9uICVzIGlzIG5vdCBzdXBwb3J0ZWQgYW5kIHdpbGwgYmUgaWdub3JlZC4nICsgJyBJbnN0ZWFkLCBkZWZpbmUgZGVmYXVsdFByb3BzIGFzIGEgc3RhdGljIHByb3BlcnR5IG9uICVzLicsIG5hbWUsIG5hbWUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZFVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJyAmJiAhZGlkV2FybkFib3V0R2V0U25hcHNob3RCZWZvcmVVcGRhdGVXaXRob3V0RGlkVXBkYXRlLmhhcyhjdG9yKSkge1xuICAgICAgZGlkV2FybkFib3V0R2V0U25hcHNob3RCZWZvcmVVcGRhdGVXaXRob3V0RGlkVXBkYXRlLmFkZChjdG9yKTtcblxuICAgICAgZXJyb3IoJyVzOiBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIHNob3VsZCBiZSB1c2VkIHdpdGggY29tcG9uZW50RGlkVXBkYXRlKCkuICcgKyAnVGhpcyBjb21wb25lbnQgZGVmaW5lcyBnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpIG9ubHkuJywgZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKGN0b3IpKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZXJyb3IoJyVzOiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoKSBpcyBkZWZpbmVkIGFzIGFuIGluc3RhbmNlIG1ldGhvZCAnICsgJ2FuZCB3aWxsIGJlIGlnbm9yZWQuIEluc3RlYWQsIGRlY2xhcmUgaXQgYXMgYSBzdGF0aWMgbWV0aG9kLicsIG5hbWUpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBlcnJvcignJXM6IGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcigpIGlzIGRlZmluZWQgYXMgYW4gaW5zdGFuY2UgbWV0aG9kICcgKyAnYW5kIHdpbGwgYmUgaWdub3JlZC4gSW5zdGVhZCwgZGVjbGFyZSBpdCBhcyBhIHN0YXRpYyBtZXRob2QuJywgbmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjdG9yLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBlcnJvcignJXM6IGdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCkgaXMgZGVmaW5lZCBhcyBhIHN0YXRpYyBtZXRob2QgJyArICdhbmQgd2lsbCBiZSBpZ25vcmVkLiBJbnN0ZWFkLCBkZWNsYXJlIGl0IGFzIGFuIGluc3RhbmNlIG1ldGhvZC4nLCBuYW1lKTtcbiAgICB9XG5cbiAgICB2YXIgX3N0YXRlID0gaW5zdGFuY2Uuc3RhdGU7XG5cbiAgICBpZiAoX3N0YXRlICYmICh0eXBlb2YgX3N0YXRlICE9PSAnb2JqZWN0JyB8fCBpc0FycmF5KF9zdGF0ZSkpKSB7XG4gICAgICBlcnJvcignJXMuc3RhdGU6IG11c3QgYmUgc2V0IHRvIGFuIG9iamVjdCBvciBudWxsJywgbmFtZSk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5nZXRDaGlsZENvbnRleHQgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGN0b3IuY2hpbGRDb250ZXh0VHlwZXMgIT09ICdvYmplY3QnKSB7XG4gICAgICBlcnJvcignJXMuZ2V0Q2hpbGRDb250ZXh0KCk6IGNoaWxkQ29udGV4dFR5cGVzIG11c3QgYmUgZGVmaW5lZCBpbiBvcmRlciB0byAnICsgJ3VzZSBnZXRDaGlsZENvbnRleHQoKS4nLCBuYW1lKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWRvcHRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSkge1xuICBpbnN0YW5jZS51cGRhdGVyID0gY2xhc3NDb21wb25lbnRVcGRhdGVyO1xuICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBpbnN0YW5jZTsgLy8gVGhlIGluc3RhbmNlIG5lZWRzIGFjY2VzcyB0byB0aGUgZmliZXIgc28gdGhhdCBpdCBjYW4gc2NoZWR1bGUgdXBkYXRlc1xuXG4gIHNldChpbnN0YW5jZSwgd29ya0luUHJvZ3Jlc3MpO1xuXG4gIHtcbiAgICBpbnN0YW5jZS5fcmVhY3RJbnRlcm5hbEluc3RhbmNlID0gZmFrZUludGVybmFsSW5zdGFuY2U7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29uc3RydWN0Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgY3RvciwgcHJvcHMpIHtcbiAgdmFyIGlzTGVnYWN5Q29udGV4dENvbnN1bWVyID0gZmFsc2U7XG4gIHZhciB1bm1hc2tlZENvbnRleHQgPSBlbXB0eUNvbnRleHRPYmplY3Q7XG4gIHZhciBjb250ZXh0ID0gZW1wdHlDb250ZXh0T2JqZWN0O1xuICB2YXIgY29udGV4dFR5cGUgPSBjdG9yLmNvbnRleHRUeXBlO1xuXG4gIHtcbiAgICBpZiAoJ2NvbnRleHRUeXBlJyBpbiBjdG9yKSB7XG4gICAgICB2YXIgaXNWYWxpZCA9IC8vIEFsbG93IG51bGwgZm9yIGNvbmRpdGlvbmFsIGRlY2xhcmF0aW9uXG4gICAgICBjb250ZXh0VHlwZSA9PT0gbnVsbCB8fCBjb250ZXh0VHlwZSAhPT0gdW5kZWZpbmVkICYmIGNvbnRleHRUeXBlLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUgJiYgY29udGV4dFR5cGUuX2NvbnRleHQgPT09IHVuZGVmaW5lZDsgLy8gTm90IGEgPENvbnRleHQuQ29uc3VtZXI+XG5cbiAgICAgIGlmICghaXNWYWxpZCAmJiAhZGlkV2FybkFib3V0SW52YWxpZGF0ZUNvbnRleHRUeXBlLmhhcyhjdG9yKSkge1xuICAgICAgICBkaWRXYXJuQWJvdXRJbnZhbGlkYXRlQ29udGV4dFR5cGUuYWRkKGN0b3IpO1xuICAgICAgICB2YXIgYWRkZW5kdW0gPSAnJztcblxuICAgICAgICBpZiAoY29udGV4dFR5cGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGFkZGVuZHVtID0gJyBIb3dldmVyLCBpdCBpcyBzZXQgdG8gdW5kZWZpbmVkLiAnICsgJ1RoaXMgY2FuIGJlIGNhdXNlZCBieSBhIHR5cG8gb3IgYnkgbWl4aW5nIHVwIG5hbWVkIGFuZCBkZWZhdWx0IGltcG9ydHMuICcgKyAnVGhpcyBjYW4gYWxzbyBoYXBwZW4gZHVlIHRvIGEgY2lyY3VsYXIgZGVwZW5kZW5jeSwgc28gJyArICd0cnkgbW92aW5nIHRoZSBjcmVhdGVDb250ZXh0KCkgY2FsbCB0byBhIHNlcGFyYXRlIGZpbGUuJztcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29udGV4dFR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgYWRkZW5kdW0gPSAnIEhvd2V2ZXIsIGl0IGlzIHNldCB0byBhICcgKyB0eXBlb2YgY29udGV4dFR5cGUgKyAnLic7XG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dFR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX1BST1ZJREVSX1RZUEUpIHtcbiAgICAgICAgICBhZGRlbmR1bSA9ICcgRGlkIHlvdSBhY2NpZGVudGFsbHkgcGFzcyB0aGUgQ29udGV4dC5Qcm92aWRlciBpbnN0ZWFkPyc7XG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dFR5cGUuX2NvbnRleHQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIC8vIDxDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICAgIGFkZGVuZHVtID0gJyBEaWQgeW91IGFjY2lkZW50YWxseSBwYXNzIHRoZSBDb250ZXh0LkNvbnN1bWVyIGluc3RlYWQ/JztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRlbmR1bSA9ICcgSG93ZXZlciwgaXQgaXMgc2V0IHRvIGFuIG9iamVjdCB3aXRoIGtleXMgeycgKyBPYmplY3Qua2V5cyhjb250ZXh0VHlwZSkuam9pbignLCAnKSArICd9Lic7XG4gICAgICAgIH1cblxuICAgICAgICBlcnJvcignJXMgZGVmaW5lcyBhbiBpbnZhbGlkIGNvbnRleHRUeXBlLiAnICsgJ2NvbnRleHRUeXBlIHNob3VsZCBwb2ludCB0byB0aGUgQ29udGV4dCBvYmplY3QgcmV0dXJuZWQgYnkgUmVhY3QuY3JlYXRlQ29udGV4dCgpLiVzJywgZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKGN0b3IpIHx8ICdDb21wb25lbnQnLCBhZGRlbmR1bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiBjb250ZXh0VHlwZSA9PT0gJ29iamVjdCcgJiYgY29udGV4dFR5cGUgIT09IG51bGwpIHtcbiAgICBjb250ZXh0ID0gcmVhZENvbnRleHQoY29udGV4dFR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHVubWFza2VkQ29udGV4dCA9IGdldFVubWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgY3RvciwgdHJ1ZSk7XG4gICAgdmFyIGNvbnRleHRUeXBlcyA9IGN0b3IuY29udGV4dFR5cGVzO1xuICAgIGlzTGVnYWN5Q29udGV4dENvbnN1bWVyID0gY29udGV4dFR5cGVzICE9PSBudWxsICYmIGNvbnRleHRUeXBlcyAhPT0gdW5kZWZpbmVkO1xuICAgIGNvbnRleHQgPSBpc0xlZ2FjeUNvbnRleHRDb25zdW1lciA/IGdldE1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCkgOiBlbXB0eUNvbnRleHRPYmplY3Q7XG4gIH1cblxuICB2YXIgaW5zdGFuY2UgPSBuZXcgY3Rvcihwcm9wcywgY29udGV4dCk7IC8vIEluc3RhbnRpYXRlIHR3aWNlIHRvIGhlbHAgZGV0ZWN0IHNpZGUtZWZmZWN0cy5cblxuICB7XG4gICAgaWYgKCB3b3JrSW5Qcm9ncmVzcy5tb2RlICYgU3RyaWN0TGVnYWN5TW9kZSkge1xuICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHModHJ1ZSk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGluc3RhbmNlID0gbmV3IGN0b3IocHJvcHMsIGNvbnRleHQpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoZmFsc2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBzdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBpbnN0YW5jZS5zdGF0ZSAhPT0gbnVsbCAmJiBpbnN0YW5jZS5zdGF0ZSAhPT0gdW5kZWZpbmVkID8gaW5zdGFuY2Uuc3RhdGUgOiBudWxsO1xuICBhZG9wdENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlKTtcblxuICB7XG4gICAgaWYgKHR5cGVvZiBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyAmJiBzdGF0ZSA9PT0gbnVsbCkge1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoY3RvcikgfHwgJ0NvbXBvbmVudCc7XG5cbiAgICAgIGlmICghZGlkV2FybkFib3V0VW5pbml0aWFsaXplZFN0YXRlLmhhcyhjb21wb25lbnROYW1lKSkge1xuICAgICAgICBkaWRXYXJuQWJvdXRVbmluaXRpYWxpemVkU3RhdGUuYWRkKGNvbXBvbmVudE5hbWUpO1xuXG4gICAgICAgIGVycm9yKCdgJXNgIHVzZXMgYGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc2AgYnV0IGl0cyBpbml0aWFsIHN0YXRlIGlzICcgKyAnJXMuIFRoaXMgaXMgbm90IHJlY29tbWVuZGVkLiBJbnN0ZWFkLCBkZWZpbmUgdGhlIGluaXRpYWwgc3RhdGUgYnkgJyArICdhc3NpZ25pbmcgYW4gb2JqZWN0IHRvIGB0aGlzLnN0YXRlYCBpbiB0aGUgY29uc3RydWN0b3Igb2YgYCVzYC4gJyArICdUaGlzIGVuc3VyZXMgdGhhdCBgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzYCBhcmd1bWVudHMgaGF2ZSBhIGNvbnNpc3RlbnQgc2hhcGUuJywgY29tcG9uZW50TmFtZSwgaW5zdGFuY2Uuc3RhdGUgPT09IG51bGwgPyAnbnVsbCcgOiAndW5kZWZpbmVkJywgY29tcG9uZW50TmFtZSk7XG4gICAgICB9XG4gICAgfSAvLyBJZiBuZXcgY29tcG9uZW50IEFQSXMgYXJlIGRlZmluZWQsIFwidW5zYWZlXCIgbGlmZWN5Y2xlcyB3b24ndCBiZSBjYWxsZWQuXG4gICAgLy8gV2FybiBhYm91dCB0aGVzZSBsaWZlY3ljbGVzIGlmIHRoZXkgYXJlIHByZXNlbnQuXG4gICAgLy8gRG9uJ3Qgd2FybiBhYm91dCByZWFjdC1saWZlY3ljbGVzLWNvbXBhdCBwb2x5ZmlsbGVkIG1ldGhvZHMgdGhvdWdoLlxuXG5cbiAgICBpZiAodHlwZW9mIGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIGZvdW5kV2lsbE1vdW50TmFtZSA9IG51bGw7XG4gICAgICB2YXIgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9IG51bGw7XG4gICAgICB2YXIgZm91bmRXaWxsVXBkYXRlTmFtZSA9IG51bGw7XG5cbiAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nICYmIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudC5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nICE9PSB0cnVlKSB7XG4gICAgICAgIGZvdW5kV2lsbE1vdW50TmFtZSA9ICdjb21wb25lbnRXaWxsTW91bnQnO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmb3VuZFdpbGxNb3VudE5hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCc7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJyAmJiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzLl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmcgIT09IHRydWUpIHtcbiAgICAgICAgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSA9ICdjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJztcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgPSAnVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMnO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicgJiYgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVwZGF0ZS5fX3N1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5nICE9PSB0cnVlKSB7XG4gICAgICAgIGZvdW5kV2lsbFVwZGF0ZU5hbWUgPSAnY29tcG9uZW50V2lsbFVwZGF0ZSc7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmb3VuZFdpbGxVcGRhdGVOYW1lID0gJ1VOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJztcbiAgICAgIH1cblxuICAgICAgaWYgKGZvdW5kV2lsbE1vdW50TmFtZSAhPT0gbnVsbCB8fCBmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lICE9PSBudWxsIHx8IGZvdW5kV2lsbFVwZGF0ZU5hbWUgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIF9jb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKGN0b3IpIHx8ICdDb21wb25lbnQnO1xuXG4gICAgICAgIHZhciBuZXdBcGlOYW1lID0gdHlwZW9mIGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nID8gJ2dldERlcml2ZWRTdGF0ZUZyb21Qcm9wcygpJyA6ICdnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSgpJztcblxuICAgICAgICBpZiAoIWRpZFdhcm5BYm91dExlZ2FjeUxpZmVjeWNsZXNBbmREZXJpdmVkU3RhdGUuaGFzKF9jb21wb25lbnROYW1lKSkge1xuICAgICAgICAgIGRpZFdhcm5BYm91dExlZ2FjeUxpZmVjeWNsZXNBbmREZXJpdmVkU3RhdGUuYWRkKF9jb21wb25lbnROYW1lKTtcblxuICAgICAgICAgIGVycm9yKCdVbnNhZmUgbGVnYWN5IGxpZmVjeWNsZXMgd2lsbCBub3QgYmUgY2FsbGVkIGZvciBjb21wb25lbnRzIHVzaW5nIG5ldyBjb21wb25lbnQgQVBJcy5cXG5cXG4nICsgJyVzIHVzZXMgJXMgYnV0IGFsc28gY29udGFpbnMgdGhlIGZvbGxvd2luZyBsZWdhY3kgbGlmZWN5Y2xlczolcyVzJXNcXG5cXG4nICsgJ1RoZSBhYm92ZSBsaWZlY3ljbGVzIHNob3VsZCBiZSByZW1vdmVkLiBMZWFybiBtb3JlIGFib3V0IHRoaXMgd2FybmluZyBoZXJlOlxcbicgKyAnaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3Vuc2FmZS1jb21wb25lbnQtbGlmZWN5Y2xlcycsIF9jb21wb25lbnROYW1lLCBuZXdBcGlOYW1lLCBmb3VuZFdpbGxNb3VudE5hbWUgIT09IG51bGwgPyBcIlxcbiAgXCIgKyBmb3VuZFdpbGxNb3VudE5hbWUgOiAnJywgZm91bmRXaWxsUmVjZWl2ZVByb3BzTmFtZSAhPT0gbnVsbCA/IFwiXFxuICBcIiArIGZvdW5kV2lsbFJlY2VpdmVQcm9wc05hbWUgOiAnJywgZm91bmRXaWxsVXBkYXRlTmFtZSAhPT0gbnVsbCA/IFwiXFxuICBcIiArIGZvdW5kV2lsbFVwZGF0ZU5hbWUgOiAnJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gQ2FjaGUgdW5tYXNrZWQgY29udGV4dCBzbyB3ZSBjYW4gYXZvaWQgcmVjcmVhdGluZyBtYXNrZWQgY29udGV4dCB1bmxlc3MgbmVjZXNzYXJ5LlxuICAvLyBSZWFjdEZpYmVyQ29udGV4dCB1c3VhbGx5IHVwZGF0ZXMgdGhpcyBjYWNoZSBidXQgY2FuJ3QgZm9yIG5ld2x5LWNyZWF0ZWQgaW5zdGFuY2VzLlxuXG5cbiAgaWYgKGlzTGVnYWN5Q29udGV4dENvbnN1bWVyKSB7XG4gICAgY2FjaGVDb250ZXh0KHdvcmtJblByb2dyZXNzLCB1bm1hc2tlZENvbnRleHQsIGNvbnRleHQpO1xuICB9XG5cbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuXG5mdW5jdGlvbiBjYWxsQ29tcG9uZW50V2lsbE1vdW50KHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSkge1xuICB2YXIgb2xkU3RhdGUgPSBpbnN0YW5jZS5zdGF0ZTtcblxuICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudCgpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpO1xuICB9XG5cbiAgaWYgKG9sZFN0YXRlICE9PSBpbnN0YW5jZS5zdGF0ZSkge1xuICAgIHtcbiAgICAgIGVycm9yKCclcy5jb21wb25lbnRXaWxsTW91bnQoKTogQXNzaWduaW5nIGRpcmVjdGx5IHRvIHRoaXMuc3RhdGUgaXMgJyArIFwiZGVwcmVjYXRlZCAoZXhjZXB0IGluc2lkZSBhIGNvbXBvbmVudCdzIFwiICsgJ2NvbnN0cnVjdG9yKS4gVXNlIHNldFN0YXRlIGluc3RlYWQuJywgZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcih3b3JrSW5Qcm9ncmVzcykgfHwgJ0NvbXBvbmVudCcpO1xuICAgIH1cblxuICAgIGNsYXNzQ29tcG9uZW50VXBkYXRlci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGluc3RhbmNlLCBpbnN0YW5jZS5zdGF0ZSwgbnVsbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlLCBuZXdQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgdmFyIG9sZFN0YXRlID0gaW5zdGFuY2Uuc3RhdGU7XG5cbiAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaW5zdGFuY2UuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXdQcm9wcywgbmV4dENvbnRleHQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5ld1Byb3BzLCBuZXh0Q29udGV4dCk7XG4gIH1cblxuICBpZiAoaW5zdGFuY2Uuc3RhdGUgIT09IG9sZFN0YXRlKSB7XG4gICAge1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKHdvcmtJblByb2dyZXNzKSB8fCAnQ29tcG9uZW50JztcblxuICAgICAgaWYgKCFkaWRXYXJuQWJvdXRTdGF0ZUFzc2lnbm1lbnRGb3JDb21wb25lbnQuaGFzKGNvbXBvbmVudE5hbWUpKSB7XG4gICAgICAgIGRpZFdhcm5BYm91dFN0YXRlQXNzaWdubWVudEZvckNvbXBvbmVudC5hZGQoY29tcG9uZW50TmFtZSk7XG5cbiAgICAgICAgZXJyb3IoJyVzLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoKTogQXNzaWduaW5nIGRpcmVjdGx5IHRvICcgKyBcInRoaXMuc3RhdGUgaXMgZGVwcmVjYXRlZCAoZXhjZXB0IGluc2lkZSBhIGNvbXBvbmVudCdzIFwiICsgJ2NvbnN0cnVjdG9yKS4gVXNlIHNldFN0YXRlIGluc3RlYWQuJywgY29tcG9uZW50TmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY2xhc3NDb21wb25lbnRVcGRhdGVyLmVucXVldWVSZXBsYWNlU3RhdGUoaW5zdGFuY2UsIGluc3RhbmNlLnN0YXRlLCBudWxsKTtcbiAgfVxufSAvLyBJbnZva2VzIHRoZSBtb3VudCBsaWZlLWN5Y2xlcyBvbiBhIHByZXZpb3VzbHkgbmV2ZXIgcmVuZGVyZWQgaW5zdGFuY2UuXG5cblxuZnVuY3Rpb24gbW91bnRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCBjdG9yLCBuZXdQcm9wcywgcmVuZGVyTGFuZXMpIHtcbiAge1xuICAgIGNoZWNrQ2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgY3RvciwgbmV3UHJvcHMpO1xuICB9XG5cbiAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICBpbnN0YW5jZS5wcm9wcyA9IG5ld1Byb3BzO1xuICBpbnN0YW5jZS5zdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIGluc3RhbmNlLnJlZnMgPSB7fTtcbiAgaW5pdGlhbGl6ZVVwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzKTtcbiAgdmFyIGNvbnRleHRUeXBlID0gY3Rvci5jb250ZXh0VHlwZTtcblxuICBpZiAodHlwZW9mIGNvbnRleHRUeXBlID09PSAnb2JqZWN0JyAmJiBjb250ZXh0VHlwZSAhPT0gbnVsbCkge1xuICAgIGluc3RhbmNlLmNvbnRleHQgPSByZWFkQ29udGV4dChjb250ZXh0VHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHVubWFza2VkQ29udGV4dCA9IGdldFVubWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgY3RvciwgdHJ1ZSk7XG4gICAgaW5zdGFuY2UuY29udGV4dCA9IGdldE1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCk7XG4gIH1cblxuICB7XG4gICAgaWYgKGluc3RhbmNlLnN0YXRlID09PSBuZXdQcm9wcykge1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoY3RvcikgfHwgJ0NvbXBvbmVudCc7XG5cbiAgICAgIGlmICghZGlkV2FybkFib3V0RGlyZWN0bHlBc3NpZ25pbmdQcm9wc1RvU3RhdGUuaGFzKGNvbXBvbmVudE5hbWUpKSB7XG4gICAgICAgIGRpZFdhcm5BYm91dERpcmVjdGx5QXNzaWduaW5nUHJvcHNUb1N0YXRlLmFkZChjb21wb25lbnROYW1lKTtcblxuICAgICAgICBlcnJvcignJXM6IEl0IGlzIG5vdCByZWNvbW1lbmRlZCB0byBhc3NpZ24gcHJvcHMgZGlyZWN0bHkgdG8gc3RhdGUgJyArIFwiYmVjYXVzZSB1cGRhdGVzIHRvIHByb3BzIHdvbid0IGJlIHJlZmxlY3RlZCBpbiBzdGF0ZS4gXCIgKyAnSW4gbW9zdCBjYXNlcywgaXQgaXMgYmV0dGVyIHRvIHVzZSBwcm9wcyBkaXJlY3RseS4nLCBjb21wb25lbnROYW1lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAod29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdExlZ2FjeU1vZGUpIHtcbiAgICAgIFJlYWN0U3RyaWN0TW9kZVdhcm5pbmdzLnJlY29yZExlZ2FjeUNvbnRleHRXYXJuaW5nKHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSk7XG4gICAgfVxuXG4gICAge1xuICAgICAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MucmVjb3JkVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3Mod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlKTtcbiAgICB9XG4gIH1cblxuICBpbnN0YW5jZS5zdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIHZhciBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPSBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcblxuICBpZiAodHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKHdvcmtJblByb2dyZXNzLCBjdG9yLCBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsIG5ld1Byb3BzKTtcbiAgICBpbnN0YW5jZS5zdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIH0gLy8gSW4gb3JkZXIgdG8gc3VwcG9ydCByZWFjdC1saWZlY3ljbGVzLWNvbXBhdCBwb2x5ZmlsbGVkIGNvbXBvbmVudHMsXG4gIC8vIFVuc2FmZSBsaWZlY3ljbGVzIHNob3VsZCBub3QgYmUgaW52b2tlZCBmb3IgY29tcG9uZW50cyB1c2luZyB0aGUgbmV3IEFQSXMuXG5cblxuICBpZiAodHlwZW9mIGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzICE9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbnN0YW5jZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSAhPT0gJ2Z1bmN0aW9uJyAmJiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykpIHtcbiAgICBjYWxsQ29tcG9uZW50V2lsbE1vdW50KHdvcmtJblByb2dyZXNzLCBpbnN0YW5jZSk7IC8vIElmIHdlIGhhZCBhZGRpdGlvbmFsIHN0YXRlIHVwZGF0ZXMgZHVyaW5nIHRoaXMgbGlmZS1jeWNsZSwgbGV0J3NcbiAgICAvLyBwcm9jZXNzIHRoZW0gbm93LlxuXG4gICAgcHJvY2Vzc1VwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzLCBuZXdQcm9wcywgaW5zdGFuY2UsIHJlbmRlckxhbmVzKTtcbiAgICBpbnN0YW5jZS5zdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIH1cblxuICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdmFyIGZpYmVyRmxhZ3MgPSBVcGRhdGU7XG5cbiAgICB7XG4gICAgICBmaWJlckZsYWdzIHw9IExheW91dFN0YXRpYztcbiAgICB9XG5cbiAgICBpZiAoICh3b3JrSW5Qcm9ncmVzcy5tb2RlICYgU3RyaWN0RWZmZWN0c01vZGUpICE9PSBOb01vZGUpIHtcbiAgICAgIGZpYmVyRmxhZ3MgfD0gTW91bnRMYXlvdXREZXY7XG4gICAgfVxuXG4gICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gZmliZXJGbGFncztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN1bWVNb3VudENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIGN0b3IsIG5ld1Byb3BzLCByZW5kZXJMYW5lcykge1xuICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG4gIHZhciBvbGRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gIGluc3RhbmNlLnByb3BzID0gb2xkUHJvcHM7XG4gIHZhciBvbGRDb250ZXh0ID0gaW5zdGFuY2UuY29udGV4dDtcbiAgdmFyIGNvbnRleHRUeXBlID0gY3Rvci5jb250ZXh0VHlwZTtcbiAgdmFyIG5leHRDb250ZXh0ID0gZW1wdHlDb250ZXh0T2JqZWN0O1xuXG4gIGlmICh0eXBlb2YgY29udGV4dFR5cGUgPT09ICdvYmplY3QnICYmIGNvbnRleHRUeXBlICE9PSBudWxsKSB7XG4gICAgbmV4dENvbnRleHQgPSByZWFkQ29udGV4dChjb250ZXh0VHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIG5leHRMZWdhY3lVbm1hc2tlZENvbnRleHQgPSBnZXRVbm1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIGN0b3IsIHRydWUpO1xuICAgIG5leHRDb250ZXh0ID0gZ2V0TWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgbmV4dExlZ2FjeVVubWFza2VkQ29udGV4dCk7XG4gIH1cblxuICB2YXIgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID0gY3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XG4gIHZhciBoYXNOZXdMaWZlY3ljbGVzID0gdHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaW5zdGFuY2UuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbic7IC8vIE5vdGU6IER1cmluZyB0aGVzZSBsaWZlLWN5Y2xlcywgaW5zdGFuY2UucHJvcHMvaW5zdGFuY2Uuc3RhdGUgYXJlIHdoYXRcbiAgLy8gZXZlciB0aGUgcHJldmlvdXNseSBhdHRlbXB0ZWQgdG8gcmVuZGVyIC0gbm90IHRoZSBcImN1cnJlbnRcIi4gSG93ZXZlcixcbiAgLy8gZHVyaW5nIGNvbXBvbmVudERpZFVwZGF0ZSB3ZSBwYXNzIHRoZSBcImN1cnJlbnRcIiBwcm9wcy5cbiAgLy8gSW4gb3JkZXIgdG8gc3VwcG9ydCByZWFjdC1saWZlY3ljbGVzLWNvbXBhdCBwb2x5ZmlsbGVkIGNvbXBvbmVudHMsXG4gIC8vIFVuc2FmZSBsaWZlY3ljbGVzIHNob3VsZCBub3QgYmUgaW52b2tlZCBmb3IgY29tcG9uZW50cyB1c2luZyB0aGUgbmV3IEFQSXMuXG5cbiAgaWYgKCFoYXNOZXdMaWZlY3ljbGVzICYmICh0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgaWYgKG9sZFByb3BzICE9PSBuZXdQcm9wcyB8fCBvbGRDb250ZXh0ICE9PSBuZXh0Q29udGV4dCkge1xuICAgICAgY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlLCBuZXdQcm9wcywgbmV4dENvbnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIHJlc2V0SGFzRm9yY2VVcGRhdGVCZWZvcmVQcm9jZXNzaW5nKCk7XG4gIHZhciBvbGRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIHZhciBuZXdTdGF0ZSA9IGluc3RhbmNlLnN0YXRlID0gb2xkU3RhdGU7XG4gIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV3UHJvcHMsIGluc3RhbmNlLCByZW5kZXJMYW5lcyk7XG4gIG5ld1N0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcblxuICBpZiAob2xkUHJvcHMgPT09IG5ld1Byb3BzICYmIG9sZFN0YXRlID09PSBuZXdTdGF0ZSAmJiAhaGFzQ29udGV4dENoYW5nZWQoKSAmJiAhY2hlY2tIYXNGb3JjZVVwZGF0ZUFmdGVyUHJvY2Vzc2luZygpKSB7XG4gICAgLy8gSWYgYW4gdXBkYXRlIHdhcyBhbHJlYWR5IGluIHByb2dyZXNzLCB3ZSBzaG91bGQgc2NoZWR1bGUgYW4gVXBkYXRlXG4gICAgLy8gZWZmZWN0IGV2ZW4gdGhvdWdoIHdlJ3JlIGJhaWxpbmcgb3V0LCBzbyB0aGF0IGNXVS9jRFUgYXJlIGNhbGxlZC5cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgZmliZXJGbGFncyA9IFVwZGF0ZTtcblxuICAgICAge1xuICAgICAgICBmaWJlckZsYWdzIHw9IExheW91dFN0YXRpYztcbiAgICAgIH1cblxuICAgICAgaWYgKCAod29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdEVmZmVjdHNNb2RlKSAhPT0gTm9Nb2RlKSB7XG4gICAgICAgIGZpYmVyRmxhZ3MgfD0gTW91bnRMYXlvdXREZXY7XG4gICAgICB9XG5cbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IGZpYmVyRmxhZ3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICBhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyh3b3JrSW5Qcm9ncmVzcywgY3RvciwgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLCBuZXdQcm9wcyk7XG4gICAgbmV3U3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuICB9XG5cbiAgdmFyIHNob3VsZFVwZGF0ZSA9IGNoZWNrSGFzRm9yY2VVcGRhdGVBZnRlclByb2Nlc3NpbmcoKSB8fCBjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgY3Rvciwgb2xkUHJvcHMsIG5ld1Byb3BzLCBvbGRTdGF0ZSwgbmV3U3RhdGUsIG5leHRDb250ZXh0KTtcblxuICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgLy8gSW4gb3JkZXIgdG8gc3VwcG9ydCByZWFjdC1saWZlY3ljbGVzLWNvbXBhdCBwb2x5ZmlsbGVkIGNvbXBvbmVudHMsXG4gICAgLy8gVW5zYWZlIGxpZmVjeWNsZXMgc2hvdWxkIG5vdCBiZSBpbnZva2VkIGZvciBjb21wb25lbnRzIHVzaW5nIHRoZSBuZXcgQVBJcy5cbiAgICBpZiAoIWhhc05ld0xpZmVjeWNsZXMgJiYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxNb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpbnN0YW5jZS5jb21wb25lbnRXaWxsTW91bnQoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZE1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgX2ZpYmVyRmxhZ3MgPSBVcGRhdGU7XG5cbiAgICAgIHtcbiAgICAgICAgX2ZpYmVyRmxhZ3MgfD0gTGF5b3V0U3RhdGljO1xuICAgICAgfVxuXG4gICAgICBpZiAoICh3b3JrSW5Qcm9ncmVzcy5tb2RlICYgU3RyaWN0RWZmZWN0c01vZGUpICE9PSBOb01vZGUpIHtcbiAgICAgICAgX2ZpYmVyRmxhZ3MgfD0gTW91bnRMYXlvdXREZXY7XG4gICAgICB9XG5cbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IF9maWJlckZsYWdzO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJZiBhbiB1cGRhdGUgd2FzIGFscmVhZHkgaW4gcHJvZ3Jlc3MsIHdlIHNob3VsZCBzY2hlZHVsZSBhbiBVcGRhdGVcbiAgICAvLyBlZmZlY3QgZXZlbiB0aG91Z2ggd2UncmUgYmFpbGluZyBvdXQsIHNvIHRoYXQgY1dVL2NEVSBhcmUgY2FsbGVkLlxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciBfZmliZXJGbGFnczIgPSBVcGRhdGU7XG5cbiAgICAgIHtcbiAgICAgICAgX2ZpYmVyRmxhZ3MyIHw9IExheW91dFN0YXRpYztcbiAgICAgIH1cblxuICAgICAgaWYgKCAod29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdEVmZmVjdHNNb2RlKSAhPT0gTm9Nb2RlKSB7XG4gICAgICAgIF9maWJlckZsYWdzMiB8PSBNb3VudExheW91dERldjtcbiAgICAgIH1cblxuICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gX2ZpYmVyRmxhZ3MyO1xuICAgIH0gLy8gSWYgc2hvdWxkQ29tcG9uZW50VXBkYXRlIHJldHVybmVkIGZhbHNlLCB3ZSBzaG91bGQgc3RpbGwgdXBkYXRlIHRoZVxuICAgIC8vIG1lbW9pemVkIHN0YXRlIHRvIGluZGljYXRlIHRoYXQgdGhpcyB3b3JrIGNhbiBiZSByZXVzZWQuXG5cblxuICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBuZXdQcm9wcztcbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbmV3U3RhdGU7XG4gIH0gLy8gVXBkYXRlIHRoZSBleGlzdGluZyBpbnN0YW5jZSdzIHN0YXRlLCBwcm9wcywgYW5kIGNvbnRleHQgcG9pbnRlcnMgZXZlblxuICAvLyBpZiBzaG91bGRDb21wb25lbnRVcGRhdGUgcmV0dXJucyBmYWxzZS5cblxuXG4gIGluc3RhbmNlLnByb3BzID0gbmV3UHJvcHM7XG4gIGluc3RhbmNlLnN0YXRlID0gbmV3U3RhdGU7XG4gIGluc3RhbmNlLmNvbnRleHQgPSBuZXh0Q29udGV4dDtcbiAgcmV0dXJuIHNob3VsZFVwZGF0ZTtcbn0gLy8gSW52b2tlcyB0aGUgdXBkYXRlIGxpZmUtY3ljbGVzIGFuZCByZXR1cm5zIGZhbHNlIGlmIGl0IHNob3VsZG4ndCByZXJlbmRlci5cblxuXG5mdW5jdGlvbiB1cGRhdGVDbGFzc0luc3RhbmNlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBjdG9yLCBuZXdQcm9wcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICBjbG9uZVVwZGF0ZVF1ZXVlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgdmFyIHVucmVzb2x2ZWRPbGRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gIHZhciBvbGRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnR5cGUgPT09IHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlID8gdW5yZXNvbHZlZE9sZFByb3BzIDogcmVzb2x2ZURlZmF1bHRQcm9wcyh3b3JrSW5Qcm9ncmVzcy50eXBlLCB1bnJlc29sdmVkT2xkUHJvcHMpO1xuICBpbnN0YW5jZS5wcm9wcyA9IG9sZFByb3BzO1xuICB2YXIgdW5yZXNvbHZlZE5ld1Byb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICB2YXIgb2xkQ29udGV4dCA9IGluc3RhbmNlLmNvbnRleHQ7XG4gIHZhciBjb250ZXh0VHlwZSA9IGN0b3IuY29udGV4dFR5cGU7XG4gIHZhciBuZXh0Q29udGV4dCA9IGVtcHR5Q29udGV4dE9iamVjdDtcblxuICBpZiAodHlwZW9mIGNvbnRleHRUeXBlID09PSAnb2JqZWN0JyAmJiBjb250ZXh0VHlwZSAhPT0gbnVsbCkge1xuICAgIG5leHRDb250ZXh0ID0gcmVhZENvbnRleHQoY29udGV4dFR5cGUpO1xuICB9IGVsc2Uge1xuICAgIHZhciBuZXh0VW5tYXNrZWRDb250ZXh0ID0gZ2V0VW5tYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCBjdG9yLCB0cnVlKTtcbiAgICBuZXh0Q29udGV4dCA9IGdldE1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIG5leHRVbm1hc2tlZENvbnRleHQpO1xuICB9XG5cbiAgdmFyIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9IGN0b3IuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1xuICB2YXIgaGFzTmV3TGlmZWN5Y2xlcyA9IHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGluc3RhbmNlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID09PSAnZnVuY3Rpb24nOyAvLyBOb3RlOiBEdXJpbmcgdGhlc2UgbGlmZS1jeWNsZXMsIGluc3RhbmNlLnByb3BzL2luc3RhbmNlLnN0YXRlIGFyZSB3aGF0XG4gIC8vIGV2ZXIgdGhlIHByZXZpb3VzbHkgYXR0ZW1wdGVkIHRvIHJlbmRlciAtIG5vdCB0aGUgXCJjdXJyZW50XCIuIEhvd2V2ZXIsXG4gIC8vIGR1cmluZyBjb21wb25lbnREaWRVcGRhdGUgd2UgcGFzcyB0aGUgXCJjdXJyZW50XCIgcHJvcHMuXG4gIC8vIEluIG9yZGVyIHRvIHN1cHBvcnQgcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQgcG9seWZpbGxlZCBjb21wb25lbnRzLFxuICAvLyBVbnNhZmUgbGlmZWN5Y2xlcyBzaG91bGQgbm90IGJlIGludm9rZWQgZm9yIGNvbXBvbmVudHMgdXNpbmcgdGhlIG5ldyBBUElzLlxuXG4gIGlmICghaGFzTmV3TGlmZWN5Y2xlcyAmJiAodHlwZW9mIGluc3RhbmNlLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID09PSAnZnVuY3Rpb24nKSkge1xuICAgIGlmICh1bnJlc29sdmVkT2xkUHJvcHMgIT09IHVucmVzb2x2ZWROZXdQcm9wcyB8fCBvbGRDb250ZXh0ICE9PSBuZXh0Q29udGV4dCkge1xuICAgICAgY2FsbENvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMod29ya0luUHJvZ3Jlc3MsIGluc3RhbmNlLCBuZXdQcm9wcywgbmV4dENvbnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIHJlc2V0SGFzRm9yY2VVcGRhdGVCZWZvcmVQcm9jZXNzaW5nKCk7XG4gIHZhciBvbGRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIHZhciBuZXdTdGF0ZSA9IGluc3RhbmNlLnN0YXRlID0gb2xkU3RhdGU7XG4gIHByb2Nlc3NVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcywgbmV3UHJvcHMsIGluc3RhbmNlLCByZW5kZXJMYW5lcyk7XG4gIG5ld1N0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcblxuICBpZiAodW5yZXNvbHZlZE9sZFByb3BzID09PSB1bnJlc29sdmVkTmV3UHJvcHMgJiYgb2xkU3RhdGUgPT09IG5ld1N0YXRlICYmICFoYXNDb250ZXh0Q2hhbmdlZCgpICYmICFjaGVja0hhc0ZvcmNlVXBkYXRlQWZ0ZXJQcm9jZXNzaW5nKCkgJiYgIShlbmFibGVMYXp5Q29udGV4dFByb3BhZ2F0aW9uICAgKSkge1xuICAgIC8vIElmIGFuIHVwZGF0ZSB3YXMgYWxyZWFkeSBpbiBwcm9ncmVzcywgd2Ugc2hvdWxkIHNjaGVkdWxlIGFuIFVwZGF0ZVxuICAgIC8vIGVmZmVjdCBldmVuIHRob3VnaCB3ZSdyZSBiYWlsaW5nIG91dCwgc28gdGhhdCBjV1UvY0RVIGFyZSBjYWxsZWQuXG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnREaWRVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmICh1bnJlc29sdmVkT2xkUHJvcHMgIT09IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyB8fCBvbGRTdGF0ZSAhPT0gY3VycmVudC5tZW1vaXplZFN0YXRlKSB7XG4gICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IFVwZGF0ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAodW5yZXNvbHZlZE9sZFByb3BzICE9PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgfHwgb2xkU3RhdGUgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkge1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSBTbmFwc2hvdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodHlwZW9mIGdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGFwcGx5RGVyaXZlZFN0YXRlRnJvbVByb3BzKHdvcmtJblByb2dyZXNzLCBjdG9yLCBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsIG5ld1Byb3BzKTtcbiAgICBuZXdTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIH1cblxuICB2YXIgc2hvdWxkVXBkYXRlID0gY2hlY2tIYXNGb3JjZVVwZGF0ZUFmdGVyUHJvY2Vzc2luZygpIHx8IGNoZWNrU2hvdWxkQ29tcG9uZW50VXBkYXRlKHdvcmtJblByb2dyZXNzLCBjdG9yLCBvbGRQcm9wcywgbmV3UHJvcHMsIG9sZFN0YXRlLCBuZXdTdGF0ZSwgbmV4dENvbnRleHQpIHx8IC8vIFRPRE86IEluIHNvbWUgY2FzZXMsIHdlJ2xsIGVuZCB1cCBjaGVja2luZyBpZiBjb250ZXh0IGhhcyBjaGFuZ2VkIHR3aWNlLFxuICAvLyBib3RoIGJlZm9yZSBhbmQgYWZ0ZXIgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAgaGFzIGJlZW4gY2FsbGVkLiBOb3QgaWRlYWwsXG4gIC8vIGJ1dCBJJ20gbG9hdGggdG8gcmVmYWN0b3IgdGhpcyBmdW5jdGlvbi4gVGhpcyBvbmx5IGhhcHBlbnMgZm9yIG1lbW9pemVkXG4gIC8vIGNvbXBvbmVudHMgc28gaXQncyBub3QgdGhhdCBjb21tb24uXG4gIGVuYWJsZUxhenlDb250ZXh0UHJvcGFnYXRpb24gICA7XG5cbiAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgIC8vIEluIG9yZGVyIHRvIHN1cHBvcnQgcmVhY3QtbGlmZWN5Y2xlcy1jb21wYXQgcG9seWZpbGxlZCBjb21wb25lbnRzLFxuICAgIC8vIFVuc2FmZSBsaWZlY3ljbGVzIHNob3VsZCBub3QgYmUgaW52b2tlZCBmb3IgY29tcG9uZW50cyB1c2luZyB0aGUgbmV3IEFQSXMuXG4gICAgaWYgKCFoYXNOZXdMaWZlY3ljbGVzICYmICh0eXBlb2YgaW5zdGFuY2UuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicpKSB7XG4gICAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVwZGF0ZShuZXdQcm9wcywgbmV3U3RhdGUsIG5leHRDb250ZXh0KTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBpbnN0YW5jZS5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShuZXdQcm9wcywgbmV3U3RhdGUsIG5leHRDb250ZXh0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZFVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gVXBkYXRlO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IFNuYXBzaG90O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJZiBhbiB1cGRhdGUgd2FzIGFscmVhZHkgaW4gcHJvZ3Jlc3MsIHdlIHNob3VsZCBzY2hlZHVsZSBhbiBVcGRhdGVcbiAgICAvLyBlZmZlY3QgZXZlbiB0aG91Z2ggd2UncmUgYmFpbGluZyBvdXQsIHNvIHRoYXQgY1dVL2NEVSBhcmUgY2FsbGVkLlxuICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkVXBkYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAodW5yZXNvbHZlZE9sZFByb3BzICE9PSBjdXJyZW50Lm1lbW9pemVkUHJvcHMgfHwgb2xkU3RhdGUgIT09IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSkge1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSBVcGRhdGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKHVucmVzb2x2ZWRPbGRQcm9wcyAhPT0gY3VycmVudC5tZW1vaXplZFByb3BzIHx8IG9sZFN0YXRlICE9PSBjdXJyZW50Lm1lbW9pemVkU3RhdGUpIHtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gU25hcHNob3Q7XG4gICAgICB9XG4gICAgfSAvLyBJZiBzaG91bGRDb21wb25lbnRVcGRhdGUgcmV0dXJuZWQgZmFsc2UsIHdlIHNob3VsZCBzdGlsbCB1cGRhdGUgdGhlXG4gICAgLy8gbWVtb2l6ZWQgcHJvcHMvc3RhdGUgdG8gaW5kaWNhdGUgdGhhdCB0aGlzIHdvcmsgY2FuIGJlIHJldXNlZC5cblxuXG4gICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IG5ld1Byb3BzO1xuICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBuZXdTdGF0ZTtcbiAgfSAvLyBVcGRhdGUgdGhlIGV4aXN0aW5nIGluc3RhbmNlJ3Mgc3RhdGUsIHByb3BzLCBhbmQgY29udGV4dCBwb2ludGVycyBldmVuXG4gIC8vIGlmIHNob3VsZENvbXBvbmVudFVwZGF0ZSByZXR1cm5zIGZhbHNlLlxuXG5cbiAgaW5zdGFuY2UucHJvcHMgPSBuZXdQcm9wcztcbiAgaW5zdGFuY2Uuc3RhdGUgPSBuZXdTdGF0ZTtcbiAgaW5zdGFuY2UuY29udGV4dCA9IG5leHRDb250ZXh0O1xuICByZXR1cm4gc2hvdWxkVXBkYXRlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih2YWx1ZSwgc291cmNlKSB7XG4gIC8vIElmIHRoZSB2YWx1ZSBpcyBhbiBlcnJvciwgY2FsbCB0aGlzIGZ1bmN0aW9uIGltbWVkaWF0ZWx5IGFmdGVyIGl0IGlzIHRocm93blxuICAvLyBzbyB0aGUgc3RhY2sgaXMgYWNjdXJhdGUuXG4gIHJldHVybiB7XG4gICAgdmFsdWU6IHZhbHVlLFxuICAgIHNvdXJjZTogc291cmNlLFxuICAgIHN0YWNrOiBnZXRTdGFja0J5RmliZXJJbkRldkFuZFByb2Qoc291cmNlKSxcbiAgICBkaWdlc3Q6IG51bGxcbiAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUNhcHR1cmVkVmFsdWUodmFsdWUsIGRpZ2VzdCwgc3RhY2spIHtcbiAgcmV0dXJuIHtcbiAgICB2YWx1ZTogdmFsdWUsXG4gICAgc291cmNlOiBudWxsLFxuICAgIHN0YWNrOiBzdGFjayAhPSBudWxsID8gc3RhY2sgOiBudWxsLFxuICAgIGRpZ2VzdDogZGlnZXN0ICE9IG51bGwgPyBkaWdlc3QgOiBudWxsXG4gIH07XG59XG5cbi8vIFRoaXMgbW9kdWxlIGlzIGZvcmtlZCBpbiBkaWZmZXJlbnQgZW52aXJvbm1lbnRzLlxuLy8gQnkgZGVmYXVsdCwgcmV0dXJuIGB0cnVlYCB0byBsb2cgZXJyb3JzIHRvIHRoZSBjb25zb2xlLlxuLy8gRm9ya3MgY2FuIHJldHVybiBgZmFsc2VgIGlmIHRoaXMgaXNuJ3QgZGVzaXJhYmxlLlxuZnVuY3Rpb24gc2hvd0Vycm9yRGlhbG9nKGJvdW5kYXJ5LCBlcnJvckluZm8pIHtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGxvZ0NhcHR1cmVkRXJyb3IoYm91bmRhcnksIGVycm9ySW5mbykge1xuICB0cnkge1xuICAgIHZhciBsb2dFcnJvciA9IHNob3dFcnJvckRpYWxvZyhib3VuZGFyeSwgZXJyb3JJbmZvKTsgLy8gQWxsb3cgaW5qZWN0ZWQgc2hvd0Vycm9yRGlhbG9nKCkgdG8gcHJldmVudCBkZWZhdWx0IGNvbnNvbGUuZXJyb3IgbG9nZ2luZy5cbiAgICAvLyBUaGlzIGVuYWJsZXMgcmVuZGVyZXJzIGxpa2UgUmVhY3ROYXRpdmUgdG8gYmV0dGVyIG1hbmFnZSByZWRib3ggYmVoYXZpb3IuXG5cbiAgICBpZiAobG9nRXJyb3IgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIGVycm9yID0gZXJyb3JJbmZvLnZhbHVlO1xuXG4gICAgaWYgKHRydWUpIHtcbiAgICAgIHZhciBzb3VyY2UgPSBlcnJvckluZm8uc291cmNlO1xuICAgICAgdmFyIHN0YWNrID0gZXJyb3JJbmZvLnN0YWNrO1xuICAgICAgdmFyIGNvbXBvbmVudFN0YWNrID0gc3RhY2sgIT09IG51bGwgPyBzdGFjayA6ICcnOyAvLyBCcm93c2VycyBzdXBwb3J0IHNpbGVuY2luZyB1bmNhdWdodCBlcnJvcnMgYnkgY2FsbGluZ1xuICAgICAgLy8gYHByZXZlbnREZWZhdWx0KClgIGluIHdpbmRvdyBgZXJyb3JgIGhhbmRsZXIuXG4gICAgICAvLyBXZSByZWNvcmQgdGhpcyBpbmZvcm1hdGlvbiBhcyBhbiBleHBhbmRvIG9uIHRoZSBlcnJvci5cblxuICAgICAgaWYgKGVycm9yICE9IG51bGwgJiYgZXJyb3IuX3N1cHByZXNzTG9nZ2luZykge1xuICAgICAgICBpZiAoYm91bmRhcnkudGFnID09PSBDbGFzc0NvbXBvbmVudCkge1xuICAgICAgICAgIC8vIFRoZSBlcnJvciBpcyByZWNvdmVyYWJsZSBhbmQgd2FzIHNpbGVuY2VkLlxuICAgICAgICAgIC8vIElnbm9yZSBpdCBhbmQgZG9uJ3QgcHJpbnQgdGhlIHN0YWNrIGFkZGVuZHVtLlxuICAgICAgICAgIC8vIFRoaXMgaXMgaGFuZHkgZm9yIHRlc3RpbmcgZXJyb3IgYm91bmRhcmllcyB3aXRob3V0IG5vaXNlLlxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfSAvLyBUaGUgZXJyb3IgaXMgZmF0YWwuIFNpbmNlIHRoZSBzaWxlbmNpbmcgbWlnaHQgaGF2ZVxuICAgICAgICAvLyBiZWVuIGFjY2lkZW50YWwsIHdlJ2xsIHN1cmZhY2UgaXQgYW55d2F5LlxuICAgICAgICAvLyBIb3dldmVyLCB0aGUgYnJvd3NlciB3b3VsZCBoYXZlIHNpbGVuY2VkIHRoZSBvcmlnaW5hbCBlcnJvclxuICAgICAgICAvLyBzbyB3ZSdsbCBwcmludCBpdCBmaXJzdCwgYW5kIHRoZW4gcHJpbnQgdGhlIHN0YWNrIGFkZGVuZHVtLlxuXG5cbiAgICAgICAgY29uc29sZVsnZXJyb3InXShlcnJvcik7IC8vIERvbid0IHRyYW5zZm9ybSB0byBvdXIgd3JhcHBlclxuICAgICAgICAvLyBGb3IgYSBtb3JlIGRldGFpbGVkIGRlc2NyaXB0aW9uIG9mIHRoaXMgYmxvY2ssIHNlZTpcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMTMzODRcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBzb3VyY2UgPyBnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKHNvdXJjZSkgOiBudWxsO1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWVNZXNzYWdlID0gY29tcG9uZW50TmFtZSA/IFwiVGhlIGFib3ZlIGVycm9yIG9jY3VycmVkIGluIHRoZSA8XCIgKyBjb21wb25lbnROYW1lICsgXCI+IGNvbXBvbmVudDpcIiA6ICdUaGUgYWJvdmUgZXJyb3Igb2NjdXJyZWQgaW4gb25lIG9mIHlvdXIgUmVhY3QgY29tcG9uZW50czonO1xuICAgICAgdmFyIGVycm9yQm91bmRhcnlNZXNzYWdlO1xuXG4gICAgICBpZiAoYm91bmRhcnkudGFnID09PSBIb3N0Um9vdCkge1xuICAgICAgICBlcnJvckJvdW5kYXJ5TWVzc2FnZSA9ICdDb25zaWRlciBhZGRpbmcgYW4gZXJyb3IgYm91bmRhcnkgdG8geW91ciB0cmVlIHRvIGN1c3RvbWl6ZSBlcnJvciBoYW5kbGluZyBiZWhhdmlvci5cXG4nICsgJ1Zpc2l0IGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9lcnJvci1ib3VuZGFyaWVzIHRvIGxlYXJuIG1vcmUgYWJvdXQgZXJyb3IgYm91bmRhcmllcy4nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGVycm9yQm91bmRhcnlOYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcihib3VuZGFyeSkgfHwgJ0Fub255bW91cyc7XG4gICAgICAgIGVycm9yQm91bmRhcnlNZXNzYWdlID0gXCJSZWFjdCB3aWxsIHRyeSB0byByZWNyZWF0ZSB0aGlzIGNvbXBvbmVudCB0cmVlIGZyb20gc2NyYXRjaCBcIiArIChcInVzaW5nIHRoZSBlcnJvciBib3VuZGFyeSB5b3UgcHJvdmlkZWQsIFwiICsgZXJyb3JCb3VuZGFyeU5hbWUgKyBcIi5cIik7XG4gICAgICB9XG5cbiAgICAgIHZhciBjb21iaW5lZE1lc3NhZ2UgPSBjb21wb25lbnROYW1lTWVzc2FnZSArIFwiXFxuXCIgKyBjb21wb25lbnRTdGFjayArIFwiXFxuXFxuXCIgKyAoXCJcIiArIGVycm9yQm91bmRhcnlNZXNzYWdlKTsgLy8gSW4gZGV2ZWxvcG1lbnQsIHdlIHByb3ZpZGUgb3VyIG93biBtZXNzYWdlIHdpdGgganVzdCB0aGUgY29tcG9uZW50IHN0YWNrLlxuICAgICAgLy8gV2UgZG9uJ3QgaW5jbHVkZSB0aGUgb3JpZ2luYWwgZXJyb3IgbWVzc2FnZSBhbmQgSlMgc3RhY2sgYmVjYXVzZSB0aGUgYnJvd3NlclxuICAgICAgLy8gaGFzIGFscmVhZHkgcHJpbnRlZCBpdC4gRXZlbiBpZiB0aGUgYXBwbGljYXRpb24gc3dhbGxvd3MgdGhlIGVycm9yLCBpdCBpcyBzdGlsbFxuICAgICAgLy8gZGlzcGxheWVkIGJ5IHRoZSBicm93c2VyIHRoYW5rcyB0byB0aGUgREVWLW9ubHkgZmFrZSBldmVudCB0cmljayBpbiBSZWFjdEVycm9yVXRpbHMuXG5cbiAgICAgIGNvbnNvbGVbJ2Vycm9yJ10oY29tYmluZWRNZXNzYWdlKTsgLy8gRG9uJ3QgdHJhbnNmb3JtIHRvIG91ciB3cmFwcGVyXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEluIHByb2R1Y3Rpb24sIHdlIHByaW50IHRoZSBlcnJvciBkaXJlY3RseS5cbiAgICAgIC8vIFRoaXMgd2lsbCBpbmNsdWRlIHRoZSBtZXNzYWdlLCB0aGUgSlMgc3RhY2ssIGFuZCBhbnl0aGluZyB0aGUgYnJvd3NlciB3YW50cyB0byBzaG93LlxuICAgICAgLy8gV2UgcGFzcyB0aGUgZXJyb3Igb2JqZWN0IGluc3RlYWQgb2YgY3VzdG9tIG1lc3NhZ2Ugc28gdGhhdCB0aGUgYnJvd3NlciBkaXNwbGF5cyB0aGUgZXJyb3IgbmF0aXZlbHkuXG4gICAgICBjb25zb2xlWydlcnJvciddKGVycm9yKTsgLy8gRG9uJ3QgdHJhbnNmb3JtIHRvIG91ciB3cmFwcGVyXG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gVGhpcyBtZXRob2QgbXVzdCBub3QgdGhyb3csIG9yIFJlYWN0IGludGVybmFsIHN0YXRlIHdpbGwgZ2V0IG1lc3NlZCB1cC5cbiAgICAvLyBJZiBjb25zb2xlLmVycm9yIGlzIG92ZXJyaWRkZW4sIG9yIGxvZ0NhcHR1cmVkRXJyb3IoKSBzaG93cyBhIGRpYWxvZyB0aGF0IHRocm93cyxcbiAgICAvLyB3ZSB3YW50IHRvIHJlcG9ydCB0aGlzIGVycm9yIG91dHNpZGUgb2YgdGhlIG5vcm1hbCBzdGFjayBhcyBhIGxhc3QgcmVzb3J0LlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTMxODhcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IGU7XG4gICAgfSk7XG4gIH1cbn1cblxudmFyIFBvc3NpYmx5V2Vha01hcCQxID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgPyBXZWFrTWFwIDogTWFwO1xuXG5mdW5jdGlvbiBjcmVhdGVSb290RXJyb3JVcGRhdGUoZmliZXIsIGVycm9ySW5mbywgbGFuZSkge1xuICB2YXIgdXBkYXRlID0gY3JlYXRlVXBkYXRlKE5vVGltZXN0YW1wLCBsYW5lKTsgLy8gVW5tb3VudCB0aGUgcm9vdCBieSByZW5kZXJpbmcgbnVsbC5cblxuICB1cGRhdGUudGFnID0gQ2FwdHVyZVVwZGF0ZTsgLy8gQ2F1dGlvbjogUmVhY3QgRGV2VG9vbHMgY3VycmVudGx5IGRlcGVuZHMgb24gdGhpcyBwcm9wZXJ0eVxuICAvLyBiZWluZyBjYWxsZWQgXCJlbGVtZW50XCIuXG5cbiAgdXBkYXRlLnBheWxvYWQgPSB7XG4gICAgZWxlbWVudDogbnVsbFxuICB9O1xuICB2YXIgZXJyb3IgPSBlcnJvckluZm8udmFsdWU7XG5cbiAgdXBkYXRlLmNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgIG9uVW5jYXVnaHRFcnJvcihlcnJvcik7XG4gICAgbG9nQ2FwdHVyZWRFcnJvcihmaWJlciwgZXJyb3JJbmZvKTtcbiAgfTtcblxuICByZXR1cm4gdXBkYXRlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDbGFzc0Vycm9yVXBkYXRlKGZpYmVyLCBlcnJvckluZm8sIGxhbmUpIHtcbiAgdmFyIHVwZGF0ZSA9IGNyZWF0ZVVwZGF0ZShOb1RpbWVzdGFtcCwgbGFuZSk7XG4gIHVwZGF0ZS50YWcgPSBDYXB0dXJlVXBkYXRlO1xuICB2YXIgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yID0gZmliZXIudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7XG5cbiAgaWYgKHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgZXJyb3IkMSA9IGVycm9ySW5mby52YWx1ZTtcblxuICAgIHVwZGF0ZS5wYXlsb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcihlcnJvciQxKTtcbiAgICB9O1xuXG4gICAgdXBkYXRlLmNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAge1xuICAgICAgICBtYXJrRmFpbGVkRXJyb3JCb3VuZGFyeUZvckhvdFJlbG9hZGluZyhmaWJlcik7XG4gICAgICB9XG5cbiAgICAgIGxvZ0NhcHR1cmVkRXJyb3IoZmliZXIsIGVycm9ySW5mbyk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBpbnN0ID0gZmliZXIuc3RhdGVOb2RlO1xuXG4gIGlmIChpbnN0ICE9PSBudWxsICYmIHR5cGVvZiBpbnN0LmNvbXBvbmVudERpZENhdGNoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgdXBkYXRlLmNhbGxiYWNrID0gZnVuY3Rpb24gY2FsbGJhY2soKSB7XG4gICAgICB7XG4gICAgICAgIG1hcmtGYWlsZWRFcnJvckJvdW5kYXJ5Rm9ySG90UmVsb2FkaW5nKGZpYmVyKTtcbiAgICAgIH1cblxuICAgICAgbG9nQ2FwdHVyZWRFcnJvcihmaWJlciwgZXJyb3JJbmZvKTtcblxuICAgICAgaWYgKHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gVG8gcHJlc2VydmUgdGhlIHByZWV4aXN0aW5nIHJldHJ5IGJlaGF2aW9yIG9mIGVycm9yIGJvdW5kYXJpZXMsXG4gICAgICAgIC8vIHdlIGtlZXAgdHJhY2sgb2Ygd2hpY2ggb25lcyBhbHJlYWR5IGZhaWxlZCBkdXJpbmcgdGhpcyBiYXRjaC5cbiAgICAgICAgLy8gVGhpcyBnZXRzIHJlc2V0IGJlZm9yZSB3ZSB5aWVsZCBiYWNrIHRvIHRoZSBicm93c2VyLlxuICAgICAgICAvLyBUT0RPOiBXYXJuIGluIHN0cmljdCBtb2RlIGlmIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvciBpc1xuICAgICAgICAvLyBub3QgZGVmaW5lZC5cbiAgICAgICAgbWFya0xlZ2FjeUVycm9yQm91bmRhcnlBc0ZhaWxlZCh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGVycm9yJDEgPSBlcnJvckluZm8udmFsdWU7XG4gICAgICB2YXIgc3RhY2sgPSBlcnJvckluZm8uc3RhY2s7XG4gICAgICB0aGlzLmNvbXBvbmVudERpZENhdGNoKGVycm9yJDEsIHtcbiAgICAgICAgY29tcG9uZW50U3RhY2s6IHN0YWNrICE9PSBudWxsID8gc3RhY2sgOiAnJ1xuICAgICAgfSk7XG5cbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAvLyBJZiBjb21wb25lbnREaWRDYXRjaCBpcyB0aGUgb25seSBlcnJvciBib3VuZGFyeSBtZXRob2QgZGVmaW5lZCxcbiAgICAgICAgICAvLyB0aGVuIGl0IG5lZWRzIHRvIGNhbGwgc2V0U3RhdGUgdG8gcmVjb3ZlciBmcm9tIGVycm9ycy5cbiAgICAgICAgICAvLyBJZiBubyBzdGF0ZSB1cGRhdGUgaXMgc2NoZWR1bGVkIHRoZW4gdGhlIGJvdW5kYXJ5IHdpbGwgc3dhbGxvdyB0aGUgZXJyb3IuXG4gICAgICAgICAgaWYgKCFpbmNsdWRlc1NvbWVMYW5lKGZpYmVyLmxhbmVzLCBTeW5jTGFuZSkpIHtcbiAgICAgICAgICAgIGVycm9yKCclczogRXJyb3IgYm91bmRhcmllcyBzaG91bGQgaW1wbGVtZW50IGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcigpLiAnICsgJ0luIHRoYXQgbWV0aG9kLCByZXR1cm4gYSBzdGF0ZSB1cGRhdGUgdG8gZGlzcGxheSBhbiBlcnJvciBtZXNzYWdlIG9yIGZhbGxiYWNrIFVJLicsIGdldENvbXBvbmVudE5hbWVGcm9tRmliZXIoZmliZXIpIHx8ICdVbmtub3duJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB1cGRhdGU7XG59XG5cbmZ1bmN0aW9uIGF0dGFjaFBpbmdMaXN0ZW5lcihyb290LCB3YWtlYWJsZSwgbGFuZXMpIHtcbiAgLy8gQXR0YWNoIGEgcGluZyBsaXN0ZW5lclxuICAvL1xuICAvLyBUaGUgZGF0YSBtaWdodCByZXNvbHZlIGJlZm9yZSB3ZSBoYXZlIGEgY2hhbmNlIHRvIGNvbW1pdCB0aGUgZmFsbGJhY2suIE9yLFxuICAvLyBpbiB0aGUgY2FzZSBvZiBhIHJlZnJlc2gsIHdlJ2xsIG5ldmVyIGNvbW1pdCBhIGZhbGxiYWNrLiBTbyB3ZSBuZWVkIHRvXG4gIC8vIGF0dGFjaCBhIGxpc3RlbmVyIG5vdy4gV2hlbiBpdCByZXNvbHZlcyAoXCJwaW5nc1wiKSwgd2UgY2FuIGRlY2lkZSB3aGV0aGVyIHRvXG4gIC8vIHRyeSByZW5kZXJpbmcgdGhlIHRyZWUgYWdhaW4uXG4gIC8vXG4gIC8vIE9ubHkgYXR0YWNoIGEgbGlzdGVuZXIgaWYgb25lIGRvZXMgbm90IGFscmVhZHkgZXhpc3QgZm9yIHRoZSBsYW5lc1xuICAvLyB3ZSdyZSBjdXJyZW50bHkgcmVuZGVyaW5nICh3aGljaCBhY3RzIGxpa2UgYSBcInRocmVhZCBJRFwiIGhlcmUpLlxuICAvL1xuICAvLyBXZSBvbmx5IG5lZWQgdG8gZG8gdGhpcyBpbiBjb25jdXJyZW50IG1vZGUuIExlZ2FjeSBTdXNwZW5zZSBhbHdheXNcbiAgLy8gY29tbWl0cyBmYWxsYmFja3Mgc3luY2hyb25vdXNseSwgc28gdGhlcmUgYXJlIG5vIHBpbmdzLlxuICB2YXIgcGluZ0NhY2hlID0gcm9vdC5waW5nQ2FjaGU7XG4gIHZhciB0aHJlYWRJRHM7XG5cbiAgaWYgKHBpbmdDYWNoZSA9PT0gbnVsbCkge1xuICAgIHBpbmdDYWNoZSA9IHJvb3QucGluZ0NhY2hlID0gbmV3IFBvc3NpYmx5V2Vha01hcCQxKCk7XG4gICAgdGhyZWFkSURzID0gbmV3IFNldCgpO1xuICAgIHBpbmdDYWNoZS5zZXQod2FrZWFibGUsIHRocmVhZElEcyk7XG4gIH0gZWxzZSB7XG4gICAgdGhyZWFkSURzID0gcGluZ0NhY2hlLmdldCh3YWtlYWJsZSk7XG5cbiAgICBpZiAodGhyZWFkSURzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocmVhZElEcyA9IG5ldyBTZXQoKTtcbiAgICAgIHBpbmdDYWNoZS5zZXQod2FrZWFibGUsIHRocmVhZElEcyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCF0aHJlYWRJRHMuaGFzKGxhbmVzKSkge1xuICAgIC8vIE1lbW9pemUgdXNpbmcgdGhlIHRocmVhZCBJRCB0byBwcmV2ZW50IHJlZHVuZGFudCBsaXN0ZW5lcnMuXG4gICAgdGhyZWFkSURzLmFkZChsYW5lcyk7XG4gICAgdmFyIHBpbmcgPSBwaW5nU3VzcGVuZGVkUm9vdC5iaW5kKG51bGwsIHJvb3QsIHdha2VhYmxlLCBsYW5lcyk7XG5cbiAgICB7XG4gICAgICBpZiAoaXNEZXZUb29sc1ByZXNlbnQpIHtcbiAgICAgICAgLy8gSWYgd2UgaGF2ZSBwZW5kaW5nIHdvcmsgc3RpbGwsIHJlc3RvcmUgdGhlIG9yaWdpbmFsIHVwZGF0ZXJzXG4gICAgICAgIHJlc3RvcmVQZW5kaW5nVXBkYXRlcnMocm9vdCwgbGFuZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHdha2VhYmxlLnRoZW4ocGluZywgcGluZyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYXR0YWNoUmV0cnlMaXN0ZW5lcihzdXNwZW5zZUJvdW5kYXJ5LCByb290LCB3YWtlYWJsZSwgbGFuZXMpIHtcbiAgLy8gUmV0cnkgbGlzdGVuZXJcbiAgLy9cbiAgLy8gSWYgdGhlIGZhbGxiYWNrIGRvZXMgY29tbWl0LCB3ZSBuZWVkIHRvIGF0dGFjaCBhIGRpZmZlcmVudCB0eXBlIG9mXG4gIC8vIGxpc3RlbmVyLiBUaGlzIG9uZSBzY2hlZHVsZXMgYW4gdXBkYXRlIG9uIHRoZSBTdXNwZW5zZSBib3VuZGFyeSB0byB0dXJuXG4gIC8vIHRoZSBmYWxsYmFjayBzdGF0ZSBvZmYuXG4gIC8vXG4gIC8vIFN0YXNoIHRoZSB3YWtlYWJsZSBvbiB0aGUgYm91bmRhcnkgZmliZXIgc28gd2UgY2FuIGFjY2VzcyBpdCBpbiB0aGVcbiAgLy8gY29tbWl0IHBoYXNlLlxuICAvL1xuICAvLyBXaGVuIHRoZSB3YWtlYWJsZSByZXNvbHZlcywgd2UnbGwgYXR0ZW1wdCB0byByZW5kZXIgdGhlIGJvdW5kYXJ5XG4gIC8vIGFnYWluIChcInJldHJ5XCIpLlxuICB2YXIgd2FrZWFibGVzID0gc3VzcGVuc2VCb3VuZGFyeS51cGRhdGVRdWV1ZTtcblxuICBpZiAod2FrZWFibGVzID09PSBudWxsKSB7XG4gICAgdmFyIHVwZGF0ZVF1ZXVlID0gbmV3IFNldCgpO1xuICAgIHVwZGF0ZVF1ZXVlLmFkZCh3YWtlYWJsZSk7XG4gICAgc3VzcGVuc2VCb3VuZGFyeS51cGRhdGVRdWV1ZSA9IHVwZGF0ZVF1ZXVlO1xuICB9IGVsc2Uge1xuICAgIHdha2VhYmxlcy5hZGQod2FrZWFibGUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlc2V0U3VzcGVuZGVkQ29tcG9uZW50KHNvdXJjZUZpYmVyLCByb290UmVuZGVyTGFuZXMpIHtcbiAgLy8gQSBsZWdhY3kgbW9kZSBTdXNwZW5zZSBxdWlyaywgb25seSByZWxldmFudCB0byBob29rIGNvbXBvbmVudHMuXG5cblxuICB2YXIgdGFnID0gc291cmNlRmliZXIudGFnO1xuXG4gIGlmICgoc291cmNlRmliZXIubW9kZSAmIENvbmN1cnJlbnRNb2RlKSA9PT0gTm9Nb2RlICYmICh0YWcgPT09IEZ1bmN0aW9uQ29tcG9uZW50IHx8IHRhZyA9PT0gRm9yd2FyZFJlZiB8fCB0YWcgPT09IFNpbXBsZU1lbW9Db21wb25lbnQpKSB7XG4gICAgdmFyIGN1cnJlbnRTb3VyY2UgPSBzb3VyY2VGaWJlci5hbHRlcm5hdGU7XG5cbiAgICBpZiAoY3VycmVudFNvdXJjZSkge1xuICAgICAgc291cmNlRmliZXIudXBkYXRlUXVldWUgPSBjdXJyZW50U291cmNlLnVwZGF0ZVF1ZXVlO1xuICAgICAgc291cmNlRmliZXIubWVtb2l6ZWRTdGF0ZSA9IGN1cnJlbnRTb3VyY2UubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIHNvdXJjZUZpYmVyLmxhbmVzID0gY3VycmVudFNvdXJjZS5sYW5lcztcbiAgICB9IGVsc2Uge1xuICAgICAgc291cmNlRmliZXIudXBkYXRlUXVldWUgPSBudWxsO1xuICAgICAgc291cmNlRmliZXIubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldE5lYXJlc3RTdXNwZW5zZUJvdW5kYXJ5VG9DYXB0dXJlKHJldHVybkZpYmVyKSB7XG4gIHZhciBub2RlID0gcmV0dXJuRmliZXI7XG5cbiAgZG8ge1xuICAgIGlmIChub2RlLnRhZyA9PT0gU3VzcGVuc2VDb21wb25lbnQgJiYgc2hvdWxkQ2FwdHVyZVN1c3BlbnNlKG5vZGUpKSB7XG4gICAgICByZXR1cm4gbm9kZTtcbiAgICB9IC8vIFRoaXMgYm91bmRhcnkgYWxyZWFkeSBjYXB0dXJlZCBkdXJpbmcgdGhpcyByZW5kZXIuIENvbnRpbnVlIHRvIHRoZSBuZXh0XG4gICAgLy8gYm91bmRhcnkuXG5cblxuICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgfSB3aGlsZSAobm9kZSAhPT0gbnVsbCk7XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIG1hcmtTdXNwZW5zZUJvdW5kYXJ5U2hvdWxkQ2FwdHVyZShzdXNwZW5zZUJvdW5kYXJ5LCByZXR1cm5GaWJlciwgc291cmNlRmliZXIsIHJvb3QsIHJvb3RSZW5kZXJMYW5lcykge1xuICAvLyBUaGlzIG1hcmtzIGEgU3VzcGVuc2UgYm91bmRhcnkgc28gdGhhdCB3aGVuIHdlJ3JlIHVud2luZGluZyB0aGUgc3RhY2ssXG4gIC8vIGl0IGNhcHR1cmVzIHRoZSBzdXNwZW5kZWQgXCJleGNlcHRpb25cIiBhbmQgZG9lcyBhIHNlY29uZCAoZmFsbGJhY2spIHBhc3MuXG4gIGlmICgoc3VzcGVuc2VCb3VuZGFyeS5tb2RlICYgQ29uY3VycmVudE1vZGUpID09PSBOb01vZGUpIHtcbiAgICAvLyBMZWdhY3kgTW9kZSBTdXNwZW5zZVxuICAgIC8vXG4gICAgLy8gSWYgdGhlIGJvdW5kYXJ5IGlzIGluIGxlZ2FjeSBtb2RlLCB3ZSBzaG91bGQgKm5vdCpcbiAgICAvLyBzdXNwZW5kIHRoZSBjb21taXQuIFByZXRlbmQgYXMgaWYgdGhlIHN1c3BlbmRlZCBjb21wb25lbnQgcmVuZGVyZWRcbiAgICAvLyBudWxsIGFuZCBrZWVwIHJlbmRlcmluZy4gV2hlbiB0aGUgU3VzcGVuc2UgYm91bmRhcnkgY29tcGxldGVzLFxuICAgIC8vIHdlJ2xsIGRvIGEgc2Vjb25kIHBhc3MgdG8gcmVuZGVyIHRoZSBmYWxsYmFjay5cbiAgICBpZiAoc3VzcGVuc2VCb3VuZGFyeSA9PT0gcmV0dXJuRmliZXIpIHtcbiAgICAgIC8vIFNwZWNpYWwgY2FzZSB3aGVyZSB3ZSBzdXNwZW5kZWQgd2hpbGUgcmVjb25jaWxpbmcgdGhlIGNoaWxkcmVuIG9mXG4gICAgICAvLyBhIFN1c3BlbnNlIGJvdW5kYXJ5J3MgaW5uZXIgT2Zmc2NyZWVuIHdyYXBwZXIgZmliZXIuIFRoaXMgaGFwcGVuc1xuICAgICAgLy8gd2hlbiBhIFJlYWN0LmxhenkgY29tcG9uZW50IGlzIGEgZGlyZWN0IGNoaWxkIG9mIGFcbiAgICAgIC8vIFN1c3BlbnNlIGJvdW5kYXJ5LlxuICAgICAgLy9cbiAgICAgIC8vIFN1c3BlbnNlIGJvdW5kYXJpZXMgYXJlIGltcGxlbWVudGVkIGFzIG11bHRpcGxlIGZpYmVycywgYnV0IHRoZXlcbiAgICAgIC8vIGFyZSBhIHNpbmdsZSBjb25jZXB0dWFsIHVuaXQuIFRoZSBsZWdhY3kgbW9kZSBiZWhhdmlvciB3aGVyZSB3ZVxuICAgICAgLy8gcHJldGVuZCB0aGUgc3VzcGVuZGVkIGZpYmVyIGNvbW1pdHRlZCBhcyBgbnVsbGAgd29uJ3Qgd29yayxcbiAgICAgIC8vIGJlY2F1c2UgaW4gdGhpcyBjYXNlIHRoZSBcInN1c3BlbmRlZFwiIGZpYmVyIGlzIHRoZSBpbm5lclxuICAgICAgLy8gT2Zmc2NyZWVuIHdyYXBwZXIuXG4gICAgICAvL1xuICAgICAgLy8gQmVjYXVzZSB0aGUgY29udGVudHMgb2YgdGhlIGJvdW5kYXJ5IGhhdmVuJ3Qgc3RhcnRlZCByZW5kZXJpbmdcbiAgICAgIC8vIHlldCAoaS5lLiBub3RoaW5nIGluIHRoZSB0cmVlIGhhcyBwYXJ0aWFsbHkgcmVuZGVyZWQpIHdlIGNhblxuICAgICAgLy8gc3dpdGNoIHRvIHRoZSByZWd1bGFyLCBjb25jdXJyZW50IG1vZGUgYmVoYXZpb3I6IG1hcmsgdGhlXG4gICAgICAvLyBib3VuZGFyeSB3aXRoIFNob3VsZENhcHR1cmUgYW5kIGVudGVyIHRoZSB1bndpbmQgcGhhc2UuXG4gICAgICBzdXNwZW5zZUJvdW5kYXJ5LmZsYWdzIHw9IFNob3VsZENhcHR1cmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1c3BlbnNlQm91bmRhcnkuZmxhZ3MgfD0gRGlkQ2FwdHVyZTtcbiAgICAgIHNvdXJjZUZpYmVyLmZsYWdzIHw9IEZvcmNlVXBkYXRlRm9yTGVnYWN5U3VzcGVuc2U7IC8vIFdlJ3JlIGdvaW5nIHRvIGNvbW1pdCB0aGlzIGZpYmVyIGV2ZW4gdGhvdWdoIGl0IGRpZG4ndCBjb21wbGV0ZS5cbiAgICAgIC8vIEJ1dCB3ZSBzaG91bGRuJ3QgY2FsbCBhbnkgbGlmZWN5Y2xlIG1ldGhvZHMgb3IgY2FsbGJhY2tzLiBSZW1vdmVcbiAgICAgIC8vIGFsbCBsaWZlY3ljbGUgZWZmZWN0IHRhZ3MuXG5cbiAgICAgIHNvdXJjZUZpYmVyLmZsYWdzICY9IH4oTGlmZWN5Y2xlRWZmZWN0TWFzayB8IEluY29tcGxldGUpO1xuXG4gICAgICBpZiAoc291cmNlRmliZXIudGFnID09PSBDbGFzc0NvbXBvbmVudCkge1xuICAgICAgICB2YXIgY3VycmVudFNvdXJjZUZpYmVyID0gc291cmNlRmliZXIuYWx0ZXJuYXRlO1xuXG4gICAgICAgIGlmIChjdXJyZW50U291cmNlRmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGEgbmV3IG1vdW50LiBDaGFuZ2UgdGhlIHRhZyBzbyBpdCdzIG5vdCBtaXN0YWtlbiBmb3IgYVxuICAgICAgICAgIC8vIGNvbXBsZXRlZCBjbGFzcyBjb21wb25lbnQuIEZvciBleGFtcGxlLCB3ZSBzaG91bGQgbm90IGNhbGxcbiAgICAgICAgICAvLyBjb21wb25lbnRXaWxsVW5tb3VudCBpZiBpdCBpcyBkZWxldGVkLlxuICAgICAgICAgIHNvdXJjZUZpYmVyLnRhZyA9IEluY29tcGxldGVDbGFzc0NvbXBvbmVudDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBXaGVuIHdlIHRyeSByZW5kZXJpbmcgYWdhaW4sIHdlIHNob3VsZCBub3QgcmV1c2UgdGhlIGN1cnJlbnQgZmliZXIsXG4gICAgICAgICAgLy8gc2luY2UgaXQncyBrbm93biB0byBiZSBpbiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUuIFVzZSBhIGZvcmNlIHVwZGF0ZSB0b1xuICAgICAgICAgIC8vIHByZXZlbnQgYSBiYWlsIG91dC5cbiAgICAgICAgICB2YXIgdXBkYXRlID0gY3JlYXRlVXBkYXRlKE5vVGltZXN0YW1wLCBTeW5jTGFuZSk7XG4gICAgICAgICAgdXBkYXRlLnRhZyA9IEZvcmNlVXBkYXRlO1xuICAgICAgICAgIGVucXVldWVVcGRhdGUoc291cmNlRmliZXIsIHVwZGF0ZSwgU3luY0xhbmUpO1xuICAgICAgICB9XG4gICAgICB9IC8vIFRoZSBzb3VyY2UgZmliZXIgZGlkIG5vdCBjb21wbGV0ZS4gTWFyayBpdCB3aXRoIFN5bmMgcHJpb3JpdHkgdG9cbiAgICAgIC8vIGluZGljYXRlIHRoYXQgaXQgc3RpbGwgaGFzIHBlbmRpbmcgd29yay5cblxuXG4gICAgICBzb3VyY2VGaWJlci5sYW5lcyA9IG1lcmdlTGFuZXMoc291cmNlRmliZXIubGFuZXMsIFN5bmNMYW5lKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VzcGVuc2VCb3VuZGFyeTtcbiAgfSAvLyBDb25maXJtZWQgdGhhdCB0aGUgYm91bmRhcnkgaXMgaW4gYSBjb25jdXJyZW50IG1vZGUgdHJlZS4gQ29udGludWVcbiAgLy8gd2l0aCB0aGUgbm9ybWFsIHN1c3BlbmQgcGF0aC5cbiAgLy9cbiAgLy8gQWZ0ZXIgdGhpcyB3ZSdsbCB1c2UgYSBzZXQgb2YgaGV1cmlzdGljcyB0byBkZXRlcm1pbmUgd2hldGhlciB0aGlzXG4gIC8vIHJlbmRlciBwYXNzIHdpbGwgcnVuIHRvIGNvbXBsZXRpb24gb3IgcmVzdGFydCBvciBcInN1c3BlbmRcIiB0aGUgY29tbWl0LlxuICAvLyBUaGUgYWN0dWFsIGxvZ2ljIGZvciB0aGlzIGlzIHNwcmVhZCBvdXQgaW4gZGlmZmVyZW50IHBsYWNlcy5cbiAgLy9cbiAgLy8gVGhpcyBmaXJzdCBwcmluY2lwbGUgaXMgdGhhdCBpZiB3ZSdyZSBnb2luZyB0byBzdXNwZW5kIHdoZW4gd2UgY29tcGxldGVcbiAgLy8gYSByb290LCB0aGVuIHdlIHNob3VsZCBhbHNvIHJlc3RhcnQgaWYgd2UgZ2V0IGFuIHVwZGF0ZSBvciBwaW5nIHRoYXRcbiAgLy8gbWlnaHQgdW5zdXNwZW5kIGl0LCBhbmQgdmljZSB2ZXJzYS4gVGhlIG9ubHkgcmVhc29uIHRvIHN1c3BlbmQgaXNcbiAgLy8gYmVjYXVzZSB5b3UgdGhpbmsgeW91IG1pZ2h0IHdhbnQgdG8gcmVzdGFydCBiZWZvcmUgY29tbWl0dGluZy4gSG93ZXZlcixcbiAgLy8gaXQgZG9lc24ndCBtYWtlIHNlbnNlIHRvIHJlc3RhcnQgb25seSB3aGlsZSBpbiB0aGUgcGVyaW9kIHdlJ3JlIHN1c3BlbmRlZC5cbiAgLy9cbiAgLy8gUmVzdGFydGluZyB0b28gYWdncmVzc2l2ZWx5IGlzIGFsc28gbm90IGdvb2QgYmVjYXVzZSBpdCBzdGFydmVzIG91dCBhbnlcbiAgLy8gaW50ZXJtZWRpYXRlIGxvYWRpbmcgc3RhdGUuIFNvIHdlIHVzZSBoZXVyaXN0aWNzIHRvIGRldGVybWluZSB3aGVuLlxuICAvLyBTdXNwZW5zZSBIZXVyaXN0aWNzXG4gIC8vXG4gIC8vIElmIG5vdGhpbmcgdGhyZXcgYSBQcm9taXNlIG9yIGFsbCB0aGUgc2FtZSBmYWxsYmFja3MgYXJlIGFscmVhZHkgc2hvd2luZyxcbiAgLy8gdGhlbiBkb24ndCBzdXNwZW5kL3Jlc3RhcnQuXG4gIC8vXG4gIC8vIElmIHRoaXMgaXMgYW4gaW5pdGlhbCByZW5kZXIgb2YgYSBuZXcgdHJlZSBvZiBTdXNwZW5zZSBib3VuZGFyaWVzIGFuZFxuICAvLyB0aG9zZSB0cmlnZ2VyIGEgZmFsbGJhY2ssIHRoZW4gZG9uJ3Qgc3VzcGVuZC9yZXN0YXJ0LiBXZSB3YW50IHRvIGVuc3VyZVxuICAvLyB0aGF0IHdlIGNhbiBzaG93IHRoZSBpbml0aWFsIGxvYWRpbmcgc3RhdGUgYXMgcXVpY2tseSBhcyBwb3NzaWJsZS5cbiAgLy9cbiAgLy8gSWYgd2UgaGl0IGEgXCJEZWxheWVkXCIgY2FzZSwgc3VjaCBhcyB3aGVuIHdlJ2Qgc3dpdGNoIGZyb20gY29udGVudCBiYWNrIGludG9cbiAgLy8gYSBmYWxsYmFjaywgdGhlbiB3ZSBzaG91bGQgYWx3YXlzIHN1c3BlbmQvcmVzdGFydC4gVHJhbnNpdGlvbnMgYXBwbHlcbiAgLy8gdG8gdGhpcyBjYXNlLiBJZiBub25lIGlzIGRlZmluZWQsIEpORCBpcyB1c2VkIGluc3RlYWQuXG4gIC8vXG4gIC8vIElmIHdlJ3JlIGFscmVhZHkgc2hvd2luZyBhIGZhbGxiYWNrIGFuZCBpdCBnZXRzIFwicmV0cmllZFwiLCBhbGxvd2luZyB1cyB0byBzaG93XG4gIC8vIGFub3RoZXIgbGV2ZWwsIGJ1dCB0aGVyZSdzIHN0aWxsIGFuIGlubmVyIGJvdW5kYXJ5IHRoYXQgd291bGQgc2hvdyBhIGZhbGxiYWNrLFxuICAvLyB0aGVuIHdlIHN1c3BlbmQvcmVzdGFydCBmb3IgNTAwbXMgc2luY2UgdGhlIGxhc3QgdGltZSB3ZSBzaG93ZWQgYSBmYWxsYmFja1xuICAvLyBhbnl3aGVyZSBpbiB0aGUgdHJlZS4gVGhpcyBlZmZlY3RpdmVseSB0aHJvdHRsZXMgcHJvZ3Jlc3NpdmUgbG9hZGluZyBpbnRvIGFcbiAgLy8gY29uc2lzdGVudCB0cmFpbiBvZiBjb21taXRzLiBUaGlzIGFsc28gZ2l2ZXMgdXMgYW4gb3Bwb3J0dW5pdHkgdG8gcmVzdGFydCB0b1xuICAvLyBnZXQgdG8gdGhlIGNvbXBsZXRlZCBzdGF0ZSBzbGlnaHRseSBlYXJsaWVyLlxuICAvL1xuICAvLyBJZiB0aGVyZSdzIGFtYmlndWl0eSBkdWUgdG8gYmF0Y2hpbmcgaXQncyByZXNvbHZlZCBpbiBwcmVmZXJlbmNlIG9mOlxuICAvLyAxKSBcImRlbGF5ZWRcIiwgMikgXCJpbml0aWFsIHJlbmRlclwiLCAzKSBcInJldHJ5XCIuXG4gIC8vXG4gIC8vIFdlIHdhbnQgdG8gZW5zdXJlIHRoYXQgYSBcImJ1c3lcIiBzdGF0ZSBkb2Vzbid0IGdldCBmb3JjZSBjb21taXR0ZWQuIFdlIHdhbnQgdG9cbiAgLy8gZW5zdXJlIHRoYXQgbmV3IGluaXRpYWwgbG9hZGluZyBzdGF0ZXMgY2FuIGNvbW1pdCBhcyBzb29uIGFzIHBvc3NpYmxlLlxuXG5cbiAgc3VzcGVuc2VCb3VuZGFyeS5mbGFncyB8PSBTaG91bGRDYXB0dXJlOyAvLyBUT0RPOiBJIHRoaW5rIHdlIGNhbiByZW1vdmUgdGhpcywgc2luY2Ugd2Ugbm93IHVzZSBgRGlkQ2FwdHVyZWAgaW5cbiAgLy8gdGhlIGJlZ2luIHBoYXNlIHRvIHByZXZlbnQgYW4gZWFybHkgYmFpbG91dC5cblxuICBzdXNwZW5zZUJvdW5kYXJ5LmxhbmVzID0gcm9vdFJlbmRlckxhbmVzO1xuICByZXR1cm4gc3VzcGVuc2VCb3VuZGFyeTtcbn1cblxuZnVuY3Rpb24gdGhyb3dFeGNlcHRpb24ocm9vdCwgcmV0dXJuRmliZXIsIHNvdXJjZUZpYmVyLCB2YWx1ZSwgcm9vdFJlbmRlckxhbmVzKSB7XG4gIC8vIFRoZSBzb3VyY2UgZmliZXIgZGlkIG5vdCBjb21wbGV0ZS5cbiAgc291cmNlRmliZXIuZmxhZ3MgfD0gSW5jb21wbGV0ZTtcblxuICB7XG4gICAgaWYgKGlzRGV2VG9vbHNQcmVzZW50KSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIHBlbmRpbmcgd29yayBzdGlsbCwgcmVzdG9yZSB0aGUgb3JpZ2luYWwgdXBkYXRlcnNcbiAgICAgIHJlc3RvcmVQZW5kaW5nVXBkYXRlcnMocm9vdCwgcm9vdFJlbmRlckxhbmVzKTtcbiAgICB9XG4gIH1cblxuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIC8vIFRoaXMgaXMgYSB3YWtlYWJsZS4gVGhlIGNvbXBvbmVudCBzdXNwZW5kZWQuXG4gICAgdmFyIHdha2VhYmxlID0gdmFsdWU7XG4gICAgcmVzZXRTdXNwZW5kZWRDb21wb25lbnQoc291cmNlRmliZXIpO1xuXG4gICAge1xuICAgICAgaWYgKGdldElzSHlkcmF0aW5nKCkgJiYgc291cmNlRmliZXIubW9kZSAmIENvbmN1cnJlbnRNb2RlKSB7XG4gICAgICAgIG1hcmtEaWRUaHJvd1doaWxlSHlkcmF0aW5nREVWKCk7XG4gICAgICB9XG4gICAgfVxuXG5cbiAgICB2YXIgc3VzcGVuc2VCb3VuZGFyeSA9IGdldE5lYXJlc3RTdXNwZW5zZUJvdW5kYXJ5VG9DYXB0dXJlKHJldHVybkZpYmVyKTtcblxuICAgIGlmIChzdXNwZW5zZUJvdW5kYXJ5ICE9PSBudWxsKSB7XG4gICAgICBzdXNwZW5zZUJvdW5kYXJ5LmZsYWdzICY9IH5Gb3JjZUNsaWVudFJlbmRlcjtcbiAgICAgIG1hcmtTdXNwZW5zZUJvdW5kYXJ5U2hvdWxkQ2FwdHVyZShzdXNwZW5zZUJvdW5kYXJ5LCByZXR1cm5GaWJlciwgc291cmNlRmliZXIsIHJvb3QsIHJvb3RSZW5kZXJMYW5lcyk7IC8vIFdlIG9ubHkgYXR0YWNoIHBpbmcgbGlzdGVuZXJzIGluIGNvbmN1cnJlbnQgbW9kZS4gTGVnYWN5IFN1c3BlbnNlIGFsd2F5c1xuICAgICAgLy8gY29tbWl0cyBmYWxsYmFja3Mgc3luY2hyb25vdXNseSwgc28gdGhlcmUgYXJlIG5vIHBpbmdzLlxuXG4gICAgICBpZiAoc3VzcGVuc2VCb3VuZGFyeS5tb2RlICYgQ29uY3VycmVudE1vZGUpIHtcbiAgICAgICAgYXR0YWNoUGluZ0xpc3RlbmVyKHJvb3QsIHdha2VhYmxlLCByb290UmVuZGVyTGFuZXMpO1xuICAgICAgfVxuXG4gICAgICBhdHRhY2hSZXRyeUxpc3RlbmVyKHN1c3BlbnNlQm91bmRhcnksIHJvb3QsIHdha2VhYmxlKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gTm8gYm91bmRhcnkgd2FzIGZvdW5kLiBVbmxlc3MgdGhpcyBpcyBhIHN5bmMgdXBkYXRlLCB0aGlzIGlzIE9LLlxuICAgICAgLy8gV2UgY2FuIHN1c3BlbmQgYW5kIHdhaXQgZm9yIG1vcmUgZGF0YSB0byBhcnJpdmUuXG4gICAgICBpZiAoIWluY2x1ZGVzU3luY0xhbmUocm9vdFJlbmRlckxhbmVzKSkge1xuICAgICAgICAvLyBUaGlzIGlzIG5vdCBhIHN5bmMgdXBkYXRlLiBTdXNwZW5kLiBTaW5jZSB3ZSdyZSBub3QgYWN0aXZhdGluZyBhXG4gICAgICAgIC8vIFN1c3BlbnNlIGJvdW5kYXJ5LCB0aGlzIHdpbGwgdW53aW5kIGFsbCB0aGUgd2F5IHRvIHRoZSByb290IHdpdGhvdXRcbiAgICAgICAgLy8gcGVyZm9ybWluZyBhIHNlY29uZCBwYXNzIHRvIHJlbmRlciBhIGZhbGxiYWNrLiAoVGhpcyBpcyBhcmd1YWJseSBob3dcbiAgICAgICAgLy8gcmVmcmVzaCB0cmFuc2l0aW9ucyBzaG91bGQgd29yaywgdG9vLCBzaW5jZSB3ZSdyZSBub3QgZ29pbmcgdG8gY29tbWl0XG4gICAgICAgIC8vIHRoZSBmYWxsYmFja3MgYW55d2F5LilcbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhpcyBjYXNlIGFsc28gYXBwbGllcyB0byBpbml0aWFsIGh5ZHJhdGlvbi5cbiAgICAgICAgYXR0YWNoUGluZ0xpc3RlbmVyKHJvb3QsIHdha2VhYmxlLCByb290UmVuZGVyTGFuZXMpO1xuICAgICAgICByZW5kZXJEaWRTdXNwZW5kRGVsYXlJZlBvc3NpYmxlKCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gLy8gVGhpcyBpcyBhIHN5bmMvZGlzY3JldGUgdXBkYXRlLiBXZSB0cmVhdCB0aGlzIGNhc2UgbGlrZSBhbiBlcnJvclxuICAgICAgLy8gYmVjYXVzZSBkaXNjcmV0ZSByZW5kZXJzIGFyZSBleHBlY3RlZCB0byBwcm9kdWNlIGEgY29tcGxldGUgdHJlZVxuICAgICAgLy8gc3luY2hyb25vdXNseSB0byBtYWludGFpbiBjb25zaXN0ZW5jeSB3aXRoIGV4dGVybmFsIHN0YXRlLlxuXG5cbiAgICAgIHZhciB1bmNhdWdodFN1c3BlbnNlRXJyb3IgPSBuZXcgRXJyb3IoJ0EgY29tcG9uZW50IHN1c3BlbmRlZCB3aGlsZSByZXNwb25kaW5nIHRvIHN5bmNocm9ub3VzIGlucHV0LiBUaGlzICcgKyAnd2lsbCBjYXVzZSB0aGUgVUkgdG8gYmUgcmVwbGFjZWQgd2l0aCBhIGxvYWRpbmcgaW5kaWNhdG9yLiBUbyAnICsgJ2ZpeCwgdXBkYXRlcyB0aGF0IHN1c3BlbmQgc2hvdWxkIGJlIHdyYXBwZWQgJyArICd3aXRoIHN0YXJ0VHJhbnNpdGlvbi4nKTsgLy8gSWYgd2UncmUgb3V0c2lkZSBhIHRyYW5zaXRpb24sIGZhbGwgdGhyb3VnaCB0byB0aGUgcmVndWxhciBlcnJvciBwYXRoLlxuICAgICAgLy8gVGhlIGVycm9yIHdpbGwgYmUgY2F1Z2h0IGJ5IHRoZSBuZWFyZXN0IHN1c3BlbnNlIGJvdW5kYXJ5LlxuXG4gICAgICB2YWx1ZSA9IHVuY2F1Z2h0U3VzcGVuc2VFcnJvcjtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gVGhpcyBpcyBhIHJlZ3VsYXIgZXJyb3IsIG5vdCBhIFN1c3BlbnNlIHdha2VhYmxlLlxuICAgIGlmIChnZXRJc0h5ZHJhdGluZygpICYmIHNvdXJjZUZpYmVyLm1vZGUgJiBDb25jdXJyZW50TW9kZSkge1xuICAgICAgbWFya0RpZFRocm93V2hpbGVIeWRyYXRpbmdERVYoKTtcblxuICAgICAgdmFyIF9zdXNwZW5zZUJvdW5kYXJ5ID0gZ2V0TmVhcmVzdFN1c3BlbnNlQm91bmRhcnlUb0NhcHR1cmUocmV0dXJuRmliZXIpOyAvLyBJZiB0aGUgZXJyb3Igd2FzIHRocm93biBkdXJpbmcgaHlkcmF0aW9uLCB3ZSBtYXkgYmUgYWJsZSB0byByZWNvdmVyIGJ5XG4gICAgICAvLyBkaXNjYXJkaW5nIHRoZSBkZWh5ZHJhdGVkIGNvbnRlbnQgYW5kIHN3aXRjaGluZyB0byBhIGNsaWVudCByZW5kZXIuXG4gICAgICAvLyBJbnN0ZWFkIG9mIHN1cmZhY2luZyB0aGUgZXJyb3IsIGZpbmQgdGhlIG5lYXJlc3QgU3VzcGVuc2UgYm91bmRhcnlcbiAgICAgIC8vIGFuZCByZW5kZXIgaXQgYWdhaW4gd2l0aG91dCBoeWRyYXRpb24uXG5cblxuICAgICAgaWYgKF9zdXNwZW5zZUJvdW5kYXJ5ICE9PSBudWxsKSB7XG4gICAgICAgIGlmICgoX3N1c3BlbnNlQm91bmRhcnkuZmxhZ3MgJiBTaG91bGRDYXB0dXJlKSA9PT0gTm9GbGFncykge1xuICAgICAgICAgIC8vIFNldCBhIGZsYWcgdG8gaW5kaWNhdGUgdGhhdCB3ZSBzaG91bGQgdHJ5IHJlbmRlcmluZyB0aGUgbm9ybWFsXG4gICAgICAgICAgLy8gY2hpbGRyZW4gYWdhaW4sIG5vdCB0aGUgZmFsbGJhY2suXG4gICAgICAgICAgX3N1c3BlbnNlQm91bmRhcnkuZmxhZ3MgfD0gRm9yY2VDbGllbnRSZW5kZXI7XG4gICAgICAgIH1cblxuICAgICAgICBtYXJrU3VzcGVuc2VCb3VuZGFyeVNob3VsZENhcHR1cmUoX3N1c3BlbnNlQm91bmRhcnksIHJldHVybkZpYmVyLCBzb3VyY2VGaWJlciwgcm9vdCwgcm9vdFJlbmRlckxhbmVzKTsgLy8gRXZlbiB0aG91Z2ggdGhlIHVzZXIgbWF5IG5vdCBiZSBhZmZlY3RlZCBieSB0aGlzIGVycm9yLCB3ZSBzaG91bGRcbiAgICAgICAgLy8gc3RpbGwgbG9nIGl0IHNvIGl0IGNhbiBiZSBmaXhlZC5cblxuICAgICAgICBxdWV1ZUh5ZHJhdGlvbkVycm9yKGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKHZhbHVlLCBzb3VyY2VGaWJlcikpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFsdWUgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcih2YWx1ZSwgc291cmNlRmliZXIpO1xuICByZW5kZXJEaWRFcnJvcih2YWx1ZSk7IC8vIFdlIGRpZG4ndCBmaW5kIGEgYm91bmRhcnkgdGhhdCBjb3VsZCBoYW5kbGUgdGhpcyB0eXBlIG9mIGV4Y2VwdGlvbi4gU3RhcnRcbiAgLy8gb3ZlciBhbmQgdHJhdmVyc2UgcGFyZW50IHBhdGggYWdhaW4sIHRoaXMgdGltZSB0cmVhdGluZyB0aGUgZXhjZXB0aW9uXG4gIC8vIGFzIGFuIGVycm9yLlxuXG4gIHZhciB3b3JrSW5Qcm9ncmVzcyA9IHJldHVybkZpYmVyO1xuXG4gIGRvIHtcbiAgICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBfZXJyb3JJbmZvID0gdmFsdWU7XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gU2hvdWxkQ2FwdHVyZTtcbiAgICAgICAgICB2YXIgbGFuZSA9IHBpY2tBcmJpdHJhcnlMYW5lKHJvb3RSZW5kZXJMYW5lcyk7XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSBtZXJnZUxhbmVzKHdvcmtJblByb2dyZXNzLmxhbmVzLCBsYW5lKTtcbiAgICAgICAgICB2YXIgdXBkYXRlID0gY3JlYXRlUm9vdEVycm9yVXBkYXRlKHdvcmtJblByb2dyZXNzLCBfZXJyb3JJbmZvLCBsYW5lKTtcbiAgICAgICAgICBlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUod29ya0luUHJvZ3Jlc3MsIHVwZGF0ZSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgIC8vIENhcHR1cmUgYW5kIHJldHJ5XG4gICAgICAgIHZhciBlcnJvckluZm8gPSB2YWx1ZTtcbiAgICAgICAgdmFyIGN0b3IgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG5cbiAgICAgICAgaWYgKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIERpZENhcHR1cmUpID09PSBOb0ZsYWdzICYmICh0eXBlb2YgY3Rvci5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgPT09ICdmdW5jdGlvbicgfHwgaW5zdGFuY2UgIT09IG51bGwgJiYgdHlwZW9mIGluc3RhbmNlLmNvbXBvbmVudERpZENhdGNoID09PSAnZnVuY3Rpb24nICYmICFpc0FscmVhZHlGYWlsZWRMZWdhY3lFcnJvckJvdW5kYXJ5KGluc3RhbmNlKSkpIHtcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSBTaG91bGRDYXB0dXJlO1xuXG4gICAgICAgICAgdmFyIF9sYW5lID0gcGlja0FyYml0cmFyeUxhbmUocm9vdFJlbmRlckxhbmVzKTtcblxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmxhbmVzID0gbWVyZ2VMYW5lcyh3b3JrSW5Qcm9ncmVzcy5sYW5lcywgX2xhbmUpOyAvLyBTY2hlZHVsZSB0aGUgZXJyb3IgYm91bmRhcnkgdG8gcmUtcmVuZGVyIHVzaW5nIHVwZGF0ZWQgc3RhdGVcblxuICAgICAgICAgIHZhciBfdXBkYXRlID0gY3JlYXRlQ2xhc3NFcnJvclVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgZXJyb3JJbmZvLCBfbGFuZSk7XG5cbiAgICAgICAgICBlbnF1ZXVlQ2FwdHVyZWRVcGRhdGUod29ya0luUHJvZ3Jlc3MsIF91cGRhdGUpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHdvcmtJblByb2dyZXNzID0gd29ya0luUHJvZ3Jlc3MucmV0dXJuO1xuICB9IHdoaWxlICh3b3JrSW5Qcm9ncmVzcyAhPT0gbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGdldFN1c3BlbmRlZENhY2hlKCkge1xuICB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0gLy8gVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbiBhIFN1c3BlbnNlIGJvdW5kYXJ5IHN1c3BlbmRzLiBJdCByZXR1cm5zIHRoZVxufVxuXG52YXIgUmVhY3RDdXJyZW50T3duZXIkMSA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0Q3VycmVudE93bmVyO1xudmFyIGRpZFJlY2VpdmVVcGRhdGUgPSBmYWxzZTtcbnZhciBkaWRXYXJuQWJvdXRCYWRDbGFzcztcbnZhciBkaWRXYXJuQWJvdXRNb2R1bGVQYXR0ZXJuQ29tcG9uZW50O1xudmFyIGRpZFdhcm5BYm91dENvbnRleHRUeXBlT25GdW5jdGlvbkNvbXBvbmVudDtcbnZhciBkaWRXYXJuQWJvdXRHZXREZXJpdmVkU3RhdGVPbkZ1bmN0aW9uQ29tcG9uZW50O1xudmFyIGRpZFdhcm5BYm91dEZ1bmN0aW9uUmVmcztcbnZhciBkaWRXYXJuQWJvdXRSZWFzc2lnbmluZ1Byb3BzO1xudmFyIGRpZFdhcm5BYm91dFJldmVhbE9yZGVyO1xudmFyIGRpZFdhcm5BYm91dFRhaWxPcHRpb25zO1xudmFyIGRpZFdhcm5BYm91dERlZmF1bHRQcm9wc09uRnVuY3Rpb25Db21wb25lbnQ7XG5cbntcbiAgZGlkV2FybkFib3V0QmFkQ2xhc3MgPSB7fTtcbiAgZGlkV2FybkFib3V0TW9kdWxlUGF0dGVybkNvbXBvbmVudCA9IHt9O1xuICBkaWRXYXJuQWJvdXRDb250ZXh0VHlwZU9uRnVuY3Rpb25Db21wb25lbnQgPSB7fTtcbiAgZGlkV2FybkFib3V0R2V0RGVyaXZlZFN0YXRlT25GdW5jdGlvbkNvbXBvbmVudCA9IHt9O1xuICBkaWRXYXJuQWJvdXRGdW5jdGlvblJlZnMgPSB7fTtcbiAgZGlkV2FybkFib3V0UmVhc3NpZ25pbmdQcm9wcyA9IGZhbHNlO1xuICBkaWRXYXJuQWJvdXRSZXZlYWxPcmRlciA9IHt9O1xuICBkaWRXYXJuQWJvdXRUYWlsT3B0aW9ucyA9IHt9O1xuICBkaWRXYXJuQWJvdXREZWZhdWx0UHJvcHNPbkZ1bmN0aW9uQ29tcG9uZW50ID0ge307XG59XG5cbmZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKSB7XG4gIGlmIChjdXJyZW50ID09PSBudWxsKSB7XG4gICAgLy8gSWYgdGhpcyBpcyBhIGZyZXNoIG5ldyBjb21wb25lbnQgdGhhdCBoYXNuJ3QgYmVlbiByZW5kZXJlZCB5ZXQsIHdlXG4gICAgLy8gd29uJ3QgdXBkYXRlIGl0cyBjaGlsZCBzZXQgYnkgYXBwbHlpbmcgbWluaW1hbCBzaWRlLWVmZmVjdHMuIEluc3RlYWQsXG4gICAgLy8gd2Ugd2lsbCBhZGQgdGhlbSBhbGwgdG8gdGhlIGNoaWxkIGJlZm9yZSBpdCBnZXRzIHJlbmRlcmVkLiBUaGF0IG1lYW5zXG4gICAgLy8gd2UgY2FuIG9wdGltaXplIHRoaXMgcmVjb25jaWxpYXRpb24gcGFzcyBieSBub3QgdHJhY2tpbmcgc2lkZS1lZmZlY3RzLlxuICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gbW91bnRDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgbnVsbCwgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdGhlIGN1cnJlbnQgY2hpbGQgaXMgdGhlIHNhbWUgYXMgdGhlIHdvcmsgaW4gcHJvZ3Jlc3MsIGl0IG1lYW5zIHRoYXRcbiAgICAvLyB3ZSBoYXZlbid0IHlldCBzdGFydGVkIGFueSB3b3JrIG9uIHRoZXNlIGNoaWxkcmVuLiBUaGVyZWZvcmUsIHdlIHVzZVxuICAgIC8vIHRoZSBjbG9uZSBhbGdvcml0aG0gdG8gY3JlYXRlIGEgY29weSBvZiBhbGwgdGhlIGN1cnJlbnQgY2hpbGRyZW4uXG4gICAgLy8gSWYgd2UgaGFkIGFueSBwcm9ncmVzc2VkIHdvcmsgYWxyZWFkeSwgdGhhdCBpcyBpbnZhbGlkIGF0IHRoaXMgcG9pbnQgc29cbiAgICAvLyBsZXQncyB0aHJvdyBpdCBvdXQuXG4gICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgY3VycmVudC5jaGlsZCwgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZm9yY2VVbm1vdW50Q3VycmVudEFuZFJlY29uY2lsZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcykge1xuICAvLyBUaGlzIGZ1bmN0aW9uIGlzIGZvcmsgb2YgcmVjb25jaWxlQ2hpbGRyZW4uIEl0J3MgdXNlZCBpbiBjYXNlcyB3aGVyZSB3ZVxuICAvLyB3YW50IHRvIHJlY29uY2lsZSB3aXRob3V0IG1hdGNoaW5nIGFnYWluc3QgdGhlIGV4aXN0aW5nIHNldC4gVGhpcyBoYXMgdGhlXG4gIC8vIGVmZmVjdCBvZiBhbGwgY3VycmVudCBjaGlsZHJlbiBiZWluZyB1bm1vdW50ZWQ7IGV2ZW4gaWYgdGhlIHR5cGUgYW5kIGtleVxuICAvLyBhcmUgdGhlIHNhbWUsIHRoZSBvbGQgY2hpbGQgaXMgdW5tb3VudGVkIGFuZCBhIG5ldyBjaGlsZCBpcyBjcmVhdGVkLlxuICAvL1xuICAvLyBUbyBkbyB0aGlzLCB3ZSdyZSBnb2luZyB0byBnbyB0aHJvdWdoIHRoZSByZWNvbmNpbGUgYWxnb3JpdGhtIHR3aWNlLiBJblxuICAvLyB0aGUgZmlyc3QgcGFzcywgd2Ugc2NoZWR1bGUgYSBkZWxldGlvbiBmb3IgYWxsIHRoZSBjdXJyZW50IGNoaWxkcmVuIGJ5XG4gIC8vIHBhc3NpbmcgbnVsbC5cbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgY3VycmVudC5jaGlsZCwgbnVsbCwgcmVuZGVyTGFuZXMpOyAvLyBJbiB0aGUgc2Vjb25kIHBhc3MsIHdlIG1vdW50IHRoZSBuZXcgY2hpbGRyZW4uIFRoZSB0cmljayBoZXJlIGlzIHRoYXQgd2VcbiAgLy8gcGFzcyBudWxsIGluIHBsYWNlIG9mIHdoZXJlIHdlIHVzdWFsbHkgcGFzcyB0aGUgY3VycmVudCBjaGlsZCBzZXQuIFRoaXMgaGFzXG4gIC8vIHRoZSBlZmZlY3Qgb2YgcmVtb3VudGluZyBhbGwgY2hpbGRyZW4gcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZWlyXG4gIC8vIGlkZW50aXRpZXMgbWF0Y2guXG5cbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVycyh3b3JrSW5Qcm9ncmVzcywgbnVsbCwgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUZvcndhcmRSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgbmV4dFByb3BzLCByZW5kZXJMYW5lcykge1xuICAvLyBUT0RPOiBjdXJyZW50IGNhbiBiZSBub24tbnVsbCBoZXJlIGV2ZW4gaWYgdGhlIGNvbXBvbmVudFxuICAvLyBoYXNuJ3QgeWV0IG1vdW50ZWQuIFRoaXMgaGFwcGVucyBhZnRlciB0aGUgZmlyc3QgcmVuZGVyIHN1c3BlbmRzLlxuICAvLyBXZSdsbCBuZWVkIHRvIGZpZ3VyZSBvdXQgaWYgdGhpcyBpcyBmaW5lIG9yIGNhbiBjYXVzZSBpc3N1ZXMuXG4gIHtcbiAgICBpZiAod29ya0luUHJvZ3Jlc3MudHlwZSAhPT0gd29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUpIHtcbiAgICAgIC8vIExhenkgY29tcG9uZW50IHByb3BzIGNhbid0IGJlIHZhbGlkYXRlZCBpbiBjcmVhdGVFbGVtZW50XG4gICAgICAvLyBiZWNhdXNlIHRoZXkncmUgb25seSBndWFyYW50ZWVkIHRvIGJlIHJlc29sdmVkIGhlcmUuXG4gICAgICB2YXIgaW5uZXJQcm9wVHlwZXMgPSBDb21wb25lbnQucHJvcFR5cGVzO1xuXG4gICAgICBpZiAoaW5uZXJQcm9wVHlwZXMpIHtcbiAgICAgICAgY2hlY2tQcm9wVHlwZXMoaW5uZXJQcm9wVHlwZXMsIG5leHRQcm9wcywgLy8gUmVzb2x2ZWQgcHJvcHNcbiAgICAgICAgJ3Byb3AnLCBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoQ29tcG9uZW50KSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIHJlbmRlciA9IENvbXBvbmVudC5yZW5kZXI7XG4gIHZhciByZWYgPSB3b3JrSW5Qcm9ncmVzcy5yZWY7IC8vIFRoZSByZXN0IGlzIGEgZm9yayBvZiB1cGRhdGVGdW5jdGlvbkNvbXBvbmVudFxuXG4gIHZhciBuZXh0Q2hpbGRyZW47XG4gIHZhciBoYXNJZDtcbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcblxuICB7XG4gICAgbWFya0NvbXBvbmVudFJlbmRlclN0YXJ0ZWQod29ya0luUHJvZ3Jlc3MpO1xuICB9XG5cbiAge1xuICAgIFJlYWN0Q3VycmVudE93bmVyJDEuY3VycmVudCA9IHdvcmtJblByb2dyZXNzO1xuICAgIHNldElzUmVuZGVyaW5nKHRydWUpO1xuICAgIG5leHRDaGlsZHJlbiA9IHJlbmRlcldpdGhIb29rcyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyLCBuZXh0UHJvcHMsIHJlZiwgcmVuZGVyTGFuZXMpO1xuICAgIGhhc0lkID0gY2hlY2tEaWRSZW5kZXJJZEhvb2soKTtcblxuICAgIGlmICggd29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdExlZ2FjeU1vZGUpIHtcbiAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKHRydWUpO1xuXG4gICAgICB0cnkge1xuICAgICAgICBuZXh0Q2hpbGRyZW4gPSByZW5kZXJXaXRoSG9va3MoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlciwgbmV4dFByb3BzLCByZWYsIHJlbmRlckxhbmVzKTtcbiAgICAgICAgaGFzSWQgPSBjaGVja0RpZFJlbmRlcklkSG9vaygpO1xuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoZmFsc2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNldElzUmVuZGVyaW5nKGZhbHNlKTtcbiAgfVxuXG4gIHtcbiAgICBtYXJrQ29tcG9uZW50UmVuZGVyU3RvcHBlZCgpO1xuICB9XG5cbiAgaWYgKGN1cnJlbnQgIT09IG51bGwgJiYgIWRpZFJlY2VpdmVVcGRhdGUpIHtcbiAgICBiYWlsb3V0SG9va3MoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICB9XG5cbiAgaWYgKGdldElzSHlkcmF0aW5nKCkgJiYgaGFzSWQpIHtcbiAgICBwdXNoTWF0ZXJpYWxpemVkVHJlZUlkKHdvcmtJblByb2dyZXNzKTtcbiAgfSAvLyBSZWFjdCBEZXZUb29scyByZWFkcyB0aGlzIGZsYWcuXG5cblxuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSBQZXJmb3JtZWRXb3JrO1xuICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlTWVtb0NvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBuZXh0UHJvcHMsIHJlbmRlckxhbmVzKSB7XG4gIGlmIChjdXJyZW50ID09PSBudWxsKSB7XG4gICAgdmFyIHR5cGUgPSBDb21wb25lbnQudHlwZTtcblxuICAgIGlmIChpc1NpbXBsZUZ1bmN0aW9uQ29tcG9uZW50KHR5cGUpICYmIENvbXBvbmVudC5jb21wYXJlID09PSBudWxsICYmIC8vIFNpbXBsZU1lbW9Db21wb25lbnQgY29kZXBhdGggZG9lc24ndCByZXNvbHZlIG91dGVyIHByb3BzIGVpdGhlci5cbiAgICBDb21wb25lbnQuZGVmYXVsdFByb3BzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciByZXNvbHZlZFR5cGUgPSB0eXBlO1xuXG4gICAgICB7XG4gICAgICAgIHJlc29sdmVkVHlwZSA9IHJlc29sdmVGdW5jdGlvbkZvckhvdFJlbG9hZGluZyh0eXBlKTtcbiAgICAgIH0gLy8gSWYgdGhpcyBpcyBhIHBsYWluIGZ1bmN0aW9uIGNvbXBvbmVudCB3aXRob3V0IGRlZmF1bHQgcHJvcHMsXG4gICAgICAvLyBhbmQgd2l0aCBvbmx5IHRoZSBkZWZhdWx0IHNoYWxsb3cgY29tcGFyaXNvbiwgd2UgdXBncmFkZSBpdFxuICAgICAgLy8gdG8gYSBTaW1wbGVNZW1vQ29tcG9uZW50IHRvIGFsbG93IGZhc3QgcGF0aCB1cGRhdGVzLlxuXG5cbiAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IFNpbXBsZU1lbW9Db21wb25lbnQ7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlID0gcmVzb2x2ZWRUeXBlO1xuXG4gICAgICB7XG4gICAgICAgIHZhbGlkYXRlRnVuY3Rpb25Db21wb25lbnRJbkRldih3b3JrSW5Qcm9ncmVzcywgdHlwZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZXNvbHZlZFR5cGUsIG5leHRQcm9wcywgcmVuZGVyTGFuZXMpO1xuICAgIH1cblxuICAgIHtcbiAgICAgIHZhciBpbm5lclByb3BUeXBlcyA9IHR5cGUucHJvcFR5cGVzO1xuXG4gICAgICBpZiAoaW5uZXJQcm9wVHlwZXMpIHtcbiAgICAgICAgLy8gSW5uZXIgbWVtbyBjb21wb25lbnQgcHJvcHMgYXJlbid0IGN1cnJlbnRseSB2YWxpZGF0ZWQgaW4gY3JlYXRlRWxlbWVudC5cbiAgICAgICAgLy8gV2UgY291bGQgbW92ZSBpdCB0aGVyZSwgYnV0IHdlJ2Qgc3RpbGwgbmVlZCB0aGlzIGZvciBsYXp5IGNvZGUgcGF0aC5cbiAgICAgICAgY2hlY2tQcm9wVHlwZXMoaW5uZXJQcm9wVHlwZXMsIG5leHRQcm9wcywgLy8gUmVzb2x2ZWQgcHJvcHNcbiAgICAgICAgJ3Byb3AnLCBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUodHlwZSkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIENvbXBvbmVudC5kZWZhdWx0UHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlKSB8fCAnVW5rbm93bic7XG5cbiAgICAgICAgaWYgKCFkaWRXYXJuQWJvdXREZWZhdWx0UHJvcHNPbkZ1bmN0aW9uQ29tcG9uZW50W2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgICAgZXJyb3IoJyVzOiBTdXBwb3J0IGZvciBkZWZhdWx0UHJvcHMgd2lsbCBiZSByZW1vdmVkIGZyb20gbWVtbyBjb21wb25lbnRzICcgKyAnaW4gYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gVXNlIEphdmFTY3JpcHQgZGVmYXVsdCBwYXJhbWV0ZXJzIGluc3RlYWQuJywgY29tcG9uZW50TmFtZSk7XG5cbiAgICAgICAgICBkaWRXYXJuQWJvdXREZWZhdWx0UHJvcHNPbkZ1bmN0aW9uQ29tcG9uZW50W2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyhDb21wb25lbnQudHlwZSwgbnVsbCwgbmV4dFByb3BzLCB3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3MubW9kZSwgcmVuZGVyTGFuZXMpO1xuICAgIGNoaWxkLnJlZiA9IHdvcmtJblByb2dyZXNzLnJlZjtcbiAgICBjaGlsZC5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IGNoaWxkO1xuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuXG4gIHtcbiAgICB2YXIgX3R5cGUgPSBDb21wb25lbnQudHlwZTtcbiAgICB2YXIgX2lubmVyUHJvcFR5cGVzID0gX3R5cGUucHJvcFR5cGVzO1xuXG4gICAgaWYgKF9pbm5lclByb3BUeXBlcykge1xuICAgICAgLy8gSW5uZXIgbWVtbyBjb21wb25lbnQgcHJvcHMgYXJlbid0IGN1cnJlbnRseSB2YWxpZGF0ZWQgaW4gY3JlYXRlRWxlbWVudC5cbiAgICAgIC8vIFdlIGNvdWxkIG1vdmUgaXQgdGhlcmUsIGJ1dCB3ZSdkIHN0aWxsIG5lZWQgdGhpcyBmb3IgbGF6eSBjb2RlIHBhdGguXG4gICAgICBjaGVja1Byb3BUeXBlcyhfaW5uZXJQcm9wVHlwZXMsIG5leHRQcm9wcywgLy8gUmVzb2x2ZWQgcHJvcHNcbiAgICAgICdwcm9wJywgZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKF90eXBlKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGN1cnJlbnRDaGlsZCA9IGN1cnJlbnQuY2hpbGQ7IC8vIFRoaXMgaXMgYWx3YXlzIGV4YWN0bHkgb25lIGNoaWxkXG5cbiAgdmFyIGhhc1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dCA9IGNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0KGN1cnJlbnQsIHJlbmRlckxhbmVzKTtcblxuICBpZiAoIWhhc1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dCkge1xuICAgIC8vIFRoaXMgd2lsbCBiZSB0aGUgcHJvcHMgd2l0aCByZXNvbHZlZCBkZWZhdWx0UHJvcHMsXG4gICAgLy8gdW5saWtlIGN1cnJlbnQubWVtb2l6ZWRQcm9wcyB3aGljaCB3aWxsIGJlIHRoZSB1bnJlc29sdmVkIG9uZXMuXG4gICAgdmFyIHByZXZQcm9wcyA9IGN1cnJlbnRDaGlsZC5tZW1vaXplZFByb3BzOyAvLyBEZWZhdWx0IHRvIHNoYWxsb3cgY29tcGFyaXNvblxuXG4gICAgdmFyIGNvbXBhcmUgPSBDb21wb25lbnQuY29tcGFyZTtcbiAgICBjb21wYXJlID0gY29tcGFyZSAhPT0gbnVsbCA/IGNvbXBhcmUgOiBzaGFsbG93RXF1YWw7XG5cbiAgICBpZiAoY29tcGFyZShwcmV2UHJvcHMsIG5leHRQcm9wcykgJiYgY3VycmVudC5yZWYgPT09IHdvcmtJblByb2dyZXNzLnJlZikge1xuICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICB9XG4gIH0gLy8gUmVhY3QgRGV2VG9vbHMgcmVhZHMgdGhpcyBmbGFnLlxuXG5cbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gUGVyZm9ybWVkV29yaztcbiAgdmFyIG5ld0NoaWxkID0gY3JlYXRlV29ya0luUHJvZ3Jlc3MoY3VycmVudENoaWxkLCBuZXh0UHJvcHMpO1xuICBuZXdDaGlsZC5yZWYgPSB3b3JrSW5Qcm9ncmVzcy5yZWY7XG4gIG5ld0NoaWxkLnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG5ld0NoaWxkO1xuICByZXR1cm4gbmV3Q2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNpbXBsZU1lbW9Db21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgbmV4dFByb3BzLCByZW5kZXJMYW5lcykge1xuICAvLyBUT0RPOiBjdXJyZW50IGNhbiBiZSBub24tbnVsbCBoZXJlIGV2ZW4gaWYgdGhlIGNvbXBvbmVudFxuICAvLyBoYXNuJ3QgeWV0IG1vdW50ZWQuIFRoaXMgaGFwcGVucyB3aGVuIHRoZSBpbm5lciByZW5kZXIgc3VzcGVuZHMuXG4gIC8vIFdlJ2xsIG5lZWQgdG8gZmlndXJlIG91dCBpZiB0aGlzIGlzIGZpbmUgb3IgY2FuIGNhdXNlIGlzc3Vlcy5cbiAge1xuICAgIGlmICh3b3JrSW5Qcm9ncmVzcy50eXBlICE9PSB3b3JrSW5Qcm9ncmVzcy5lbGVtZW50VHlwZSkge1xuICAgICAgLy8gTGF6eSBjb21wb25lbnQgcHJvcHMgY2FuJ3QgYmUgdmFsaWRhdGVkIGluIGNyZWF0ZUVsZW1lbnRcbiAgICAgIC8vIGJlY2F1c2UgdGhleSdyZSBvbmx5IGd1YXJhbnRlZWQgdG8gYmUgcmVzb2x2ZWQgaGVyZS5cbiAgICAgIHZhciBvdXRlck1lbW9UeXBlID0gd29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGU7XG5cbiAgICAgIGlmIChvdXRlck1lbW9UeXBlLiQkdHlwZW9mID09PSBSRUFDVF9MQVpZX1RZUEUpIHtcbiAgICAgICAgLy8gV2Ugd2FybiB3aGVuIHlvdSBkZWZpbmUgcHJvcFR5cGVzIG9uIGxhenkoKVxuICAgICAgICAvLyBzbyBsZXQncyBqdXN0IHNraXAgb3ZlciBpdCB0byBmaW5kIG1lbW8oKSBvdXRlciB3cmFwcGVyLlxuICAgICAgICAvLyBJbm5lciBwcm9wcyBmb3IgbWVtbyBhcmUgdmFsaWRhdGVkIGxhdGVyLlxuICAgICAgICB2YXIgbGF6eUNvbXBvbmVudCA9IG91dGVyTWVtb1R5cGU7XG4gICAgICAgIHZhciBwYXlsb2FkID0gbGF6eUNvbXBvbmVudC5fcGF5bG9hZDtcbiAgICAgICAgdmFyIGluaXQgPSBsYXp5Q29tcG9uZW50Ll9pbml0O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgb3V0ZXJNZW1vVHlwZSA9IGluaXQocGF5bG9hZCk7XG4gICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICBvdXRlck1lbW9UeXBlID0gbnVsbDtcbiAgICAgICAgfSAvLyBJbm5lciBwcm9wVHlwZXMgd2lsbCBiZSB2YWxpZGF0ZWQgaW4gdGhlIGZ1bmN0aW9uIGNvbXBvbmVudCBwYXRoLlxuXG5cbiAgICAgICAgdmFyIG91dGVyUHJvcFR5cGVzID0gb3V0ZXJNZW1vVHlwZSAmJiBvdXRlck1lbW9UeXBlLnByb3BUeXBlcztcblxuICAgICAgICBpZiAob3V0ZXJQcm9wVHlwZXMpIHtcbiAgICAgICAgICBjaGVja1Byb3BUeXBlcyhvdXRlclByb3BUeXBlcywgbmV4dFByb3BzLCAvLyBSZXNvbHZlZCAoU2ltcGxlTWVtb0NvbXBvbmVudCBoYXMgbm8gZGVmYXVsdFByb3BzKVxuICAgICAgICAgICdwcm9wJywgZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKG91dGVyTWVtb1R5cGUpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgdmFyIHByZXZQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcztcblxuICAgIGlmIChzaGFsbG93RXF1YWwocHJldlByb3BzLCBuZXh0UHJvcHMpICYmIGN1cnJlbnQucmVmID09PSB3b3JrSW5Qcm9ncmVzcy5yZWYgJiYgKCAvLyBQcmV2ZW50IGJhaWxvdXQgaWYgdGhlIGltcGxlbWVudGF0aW9uIGNoYW5nZWQgZHVlIHRvIGhvdCByZWxvYWQuXG4gICAgIHdvcmtJblByb2dyZXNzLnR5cGUgPT09IGN1cnJlbnQudHlwZSApKSB7XG4gICAgICBkaWRSZWNlaXZlVXBkYXRlID0gZmFsc2U7IC8vIFRoZSBwcm9wcyBhcmUgc2hhbGxvd2x5IGVxdWFsLiBSZXVzZSB0aGUgcHJldmlvdXMgcHJvcHMgb2JqZWN0LCBsaWtlIHdlXG4gICAgICAvLyB3b3VsZCBkdXJpbmcgYSBub3JtYWwgZmliZXIgYmFpbG91dC5cbiAgICAgIC8vXG4gICAgICAvLyBXZSBkb24ndCBoYXZlIHN0cm9uZyBndWFyYW50ZWVzIHRoYXQgdGhlIHByb3BzIG9iamVjdCBpcyByZWZlcmVudGlhbGx5XG4gICAgICAvLyBlcXVhbCBkdXJpbmcgdXBkYXRlcyB3aGVyZSB3ZSBjYW4ndCBiYWlsIG91dCBhbnl3YXkg4oCUIGxpa2UgaWYgdGhlIHByb3BzXG4gICAgICAvLyBhcmUgc2hhbGxvd2x5IGVxdWFsLCBidXQgdGhlcmUncyBhIGxvY2FsIHN0YXRlIG9yIGNvbnRleHQgdXBkYXRlIGluIHRoZVxuICAgICAgLy8gc2FtZSBiYXRjaC5cbiAgICAgIC8vXG4gICAgICAvLyBIb3dldmVyLCBhcyBhIHByaW5jaXBsZSwgd2Ugc2hvdWxkIGFpbSB0byBtYWtlIHRoZSBiZWhhdmlvciBjb25zaXN0ZW50XG4gICAgICAvLyBhY3Jvc3MgZGlmZmVyZW50IHdheXMgb2YgbWVtb2l6aW5nIGEgY29tcG9uZW50LiBGb3IgZXhhbXBsZSwgUmVhY3QubWVtb1xuICAgICAgLy8gaGFzIGEgZGlmZmVyZW50IGludGVybmFsIEZpYmVyIGxheW91dCBpZiB5b3UgcGFzcyBhIG5vcm1hbCBmdW5jdGlvblxuICAgICAgLy8gY29tcG9uZW50IChTaW1wbGVNZW1vQ29tcG9uZW50KSB2ZXJzdXMgaWYgeW91IHBhc3MgYSBkaWZmZXJlbnQgdHlwZVxuICAgICAgLy8gbGlrZSBmb3J3YXJkUmVmIChNZW1vQ29tcG9uZW50KS4gQnV0IHRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLlxuICAgICAgLy8gV3JhcHBpbmcgYSBjb21wb25lbnQgaW4gZm9yd2FyZFJlZiAob3IgUmVhY3QubGF6eSwgZXRjKSBzaG91bGRuJ3RcbiAgICAgIC8vIGFmZmVjdCB3aGV0aGVyIHRoZSBwcm9wcyBvYmplY3QgaXMgcmV1c2VkIGR1cmluZyBhIGJhaWxvdXQuXG5cbiAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyA9IG5leHRQcm9wcyA9IHByZXZQcm9wcztcblxuICAgICAgaWYgKCFjaGVja1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dChjdXJyZW50LCByZW5kZXJMYW5lcykpIHtcbiAgICAgICAgLy8gVGhlIHBlbmRpbmcgbGFuZXMgd2VyZSBjbGVhcmVkIGF0IHRoZSBiZWdpbm5pbmcgb2YgYmVnaW5Xb3JrLiBXZSdyZVxuICAgICAgICAvLyBhYm91dCB0byBiYWlsIG91dCwgYnV0IHRoZXJlIG1pZ2h0IGJlIG90aGVyIGxhbmVzIHRoYXQgd2VyZW4ndFxuICAgICAgICAvLyBpbmNsdWRlZCBpbiB0aGUgY3VycmVudCByZW5kZXIuIFVzdWFsbHksIHRoZSBwcmlvcml0eSBsZXZlbCBvZiB0aGVcbiAgICAgICAgLy8gcmVtYWluaW5nIHVwZGF0ZXMgaXMgYWNjdW11bGF0ZWQgZHVyaW5nIHRoZSBldmFsdWF0aW9uIG9mIHRoZVxuICAgICAgICAvLyBjb21wb25lbnQgKGkuZS4gd2hlbiBwcm9jZXNzaW5nIHRoZSB1cGRhdGUgcXVldWUpLiBCdXQgc2luY2Ugc2luY2VcbiAgICAgICAgLy8gd2UncmUgYmFpbGluZyBvdXQgZWFybHkgKndpdGhvdXQqIGV2YWx1YXRpbmcgdGhlIGNvbXBvbmVudCwgd2UgbmVlZFxuICAgICAgICAvLyB0byBhY2NvdW50IGZvciBpdCBoZXJlLCB0b28uIFJlc2V0IHRvIHRoZSB2YWx1ZSBvZiB0aGUgY3VycmVudCBmaWJlci5cbiAgICAgICAgLy8gTk9URTogVGhpcyBvbmx5IGFwcGxpZXMgdG8gU2ltcGxlTWVtb0NvbXBvbmVudCwgbm90IE1lbW9Db21wb25lbnQsXG4gICAgICAgIC8vIGJlY2F1c2UgYSBNZW1vQ29tcG9uZW50IGZpYmVyIGRvZXMgbm90IGhhdmUgaG9va3Mgb3IgYW4gdXBkYXRlIHF1ZXVlO1xuICAgICAgICAvLyByYXRoZXIsIGl0IHdyYXBzIGFyb3VuZCBhbiBpbm5lciBjb21wb25lbnQsIHdoaWNoIG1heSBvciBtYXkgbm90XG4gICAgICAgIC8vIGNvbnRhaW5zIGhvb2tzLlxuICAgICAgICAvLyBUT0RPOiBNb3ZlIHRoZSByZXNldCBhdCBpbiBiZWdpbldvcmsgb3V0IG9mIHRoZSBjb21tb24gcGF0aCBzbyB0aGF0XG4gICAgICAgIC8vIHRoaXMgaXMgbm8gbG9uZ2VyIG5lY2Vzc2FyeS5cbiAgICAgICAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSBjdXJyZW50LmxhbmVzO1xuICAgICAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgICAgfSBlbHNlIGlmICgoY3VycmVudC5mbGFncyAmIEZvcmNlVXBkYXRlRm9yTGVnYWN5U3VzcGVuc2UpICE9PSBOb0ZsYWdzKSB7XG4gICAgICAgIC8vIFRoaXMgaXMgYSBzcGVjaWFsIGNhc2UgdGhhdCBvbmx5IGV4aXN0cyBmb3IgbGVnYWN5IG1vZGUuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8xOTIxNi5cbiAgICAgICAgZGlkUmVjZWl2ZVVwZGF0ZSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcywgcmVuZGVyTGFuZXMpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVPZmZzY3JlZW5Db21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIHZhciBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIHZhciBuZXh0Q2hpbGRyZW4gPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gIHZhciBwcmV2U3RhdGUgPSBjdXJyZW50ICE9PSBudWxsID8gY3VycmVudC5tZW1vaXplZFN0YXRlIDogbnVsbDtcblxuICBpZiAobmV4dFByb3BzLm1vZGUgPT09ICdoaWRkZW4nIHx8IGVuYWJsZUxlZ2FjeUhpZGRlbiApIHtcbiAgICAvLyBSZW5kZXJpbmcgYSBoaWRkZW4gdHJlZS5cbiAgICBpZiAoKHdvcmtJblByb2dyZXNzLm1vZGUgJiBDb25jdXJyZW50TW9kZSkgPT09IE5vTW9kZSkge1xuICAgICAgLy8gSW4gbGVnYWN5IHN5bmMgbW9kZSwgZG9uJ3QgZGVmZXIgdGhlIHN1YnRyZWUuIFJlbmRlciBpdCBub3cuXG4gICAgICAvLyBUT0RPOiBDb25zaWRlciBob3cgT2Zmc2NyZWVuIHNob3VsZCB3b3JrIHdpdGggdHJhbnNpdGlvbnMgaW4gdGhlIGZ1dHVyZVxuICAgICAgdmFyIG5leHRTdGF0ZSA9IHtcbiAgICAgICAgYmFzZUxhbmVzOiBOb0xhbmVzLFxuICAgICAgICBjYWNoZVBvb2w6IG51bGwsXG4gICAgICAgIHRyYW5zaXRpb25zOiBudWxsXG4gICAgICB9O1xuICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG5leHRTdGF0ZTtcblxuICAgICAgcHVzaFJlbmRlckxhbmVzKHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gICAgfSBlbHNlIGlmICghaW5jbHVkZXNTb21lTGFuZShyZW5kZXJMYW5lcywgT2Zmc2NyZWVuTGFuZSkpIHtcbiAgICAgIHZhciBzcGF3bmVkQ2FjaGVQb29sID0gbnVsbDsgLy8gV2UncmUgaGlkZGVuLCBhbmQgd2UncmUgbm90IHJlbmRlcmluZyBhdCBPZmZzY3JlZW4uIFdlIHdpbGwgYmFpbCBvdXRcbiAgICAgIC8vIGFuZCByZXN1bWUgdGhpcyB0cmVlIGxhdGVyLlxuXG4gICAgICB2YXIgbmV4dEJhc2VMYW5lcztcblxuICAgICAgaWYgKHByZXZTdGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgcHJldkJhc2VMYW5lcyA9IHByZXZTdGF0ZS5iYXNlTGFuZXM7XG4gICAgICAgIG5leHRCYXNlTGFuZXMgPSBtZXJnZUxhbmVzKHByZXZCYXNlTGFuZXMsIHJlbmRlckxhbmVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRCYXNlTGFuZXMgPSByZW5kZXJMYW5lcztcbiAgICAgIH0gLy8gU2NoZWR1bGUgdGhpcyBmaWJlciB0byByZS1yZW5kZXIgYXQgb2Zmc2NyZWVuIHByaW9yaXR5LiBUaGVuIGJhaWxvdXQuXG5cblxuICAgICAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gbGFuZVRvTGFuZXMoT2Zmc2NyZWVuTGFuZSk7XG4gICAgICB2YXIgX25leHRTdGF0ZSA9IHtcbiAgICAgICAgYmFzZUxhbmVzOiBuZXh0QmFzZUxhbmVzLFxuICAgICAgICBjYWNoZVBvb2w6IHNwYXduZWRDYWNoZVBvb2wsXG4gICAgICAgIHRyYW5zaXRpb25zOiBudWxsXG4gICAgICB9O1xuICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IF9uZXh0U3RhdGU7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IG51bGw7XG4gICAgICAvLyB0byBhdm9pZCBhIHB1c2gvcG9wIG1pc2FsaWdubWVudC5cblxuXG4gICAgICBwdXNoUmVuZGVyTGFuZXMod29ya0luUHJvZ3Jlc3MsIG5leHRCYXNlTGFuZXMpO1xuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyBpcyB0aGUgc2Vjb25kIHJlbmRlci4gVGhlIHN1cnJvdW5kaW5nIHZpc2libGUgY29udGVudCBoYXMgYWxyZWFkeVxuICAgICAgLy8gY29tbWl0dGVkLiBOb3cgd2UgcmVzdW1lIHJlbmRlcmluZyB0aGUgaGlkZGVuIHRyZWUuXG4gICAgICAvLyBSZW5kZXJpbmcgYXQgb2Zmc2NyZWVuLCBzbyB3ZSBjYW4gY2xlYXIgdGhlIGJhc2UgbGFuZXMuXG4gICAgICB2YXIgX25leHRTdGF0ZTIgPSB7XG4gICAgICAgIGJhc2VMYW5lczogTm9MYW5lcyxcbiAgICAgICAgY2FjaGVQb29sOiBudWxsLFxuICAgICAgICB0cmFuc2l0aW9uczogbnVsbFxuICAgICAgfTtcbiAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBfbmV4dFN0YXRlMjsgLy8gUHVzaCB0aGUgbGFuZXMgdGhhdCB3ZXJlIHNraXBwZWQgd2hlbiB3ZSBiYWlsZWQgb3V0LlxuXG4gICAgICB2YXIgc3VidHJlZVJlbmRlckxhbmVzID0gcHJldlN0YXRlICE9PSBudWxsID8gcHJldlN0YXRlLmJhc2VMYW5lcyA6IHJlbmRlckxhbmVzO1xuXG4gICAgICBwdXNoUmVuZGVyTGFuZXMod29ya0luUHJvZ3Jlc3MsIHN1YnRyZWVSZW5kZXJMYW5lcyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFJlbmRlcmluZyBhIHZpc2libGUgdHJlZS5cbiAgICB2YXIgX3N1YnRyZWVSZW5kZXJMYW5lcztcblxuICAgIGlmIChwcmV2U3RhdGUgIT09IG51bGwpIHtcbiAgICAgIC8vIFdlJ3JlIGdvaW5nIGZyb20gaGlkZGVuIC0+IHZpc2libGUuXG4gICAgICBfc3VidHJlZVJlbmRlckxhbmVzID0gbWVyZ2VMYW5lcyhwcmV2U3RhdGUuYmFzZUxhbmVzLCByZW5kZXJMYW5lcyk7XG5cbiAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSB3ZXJlbid0IHByZXZpb3VzbHkgaGlkZGVuLCBhbmQgd2Ugc3RpbGwgYXJlbid0LCBzbyB0aGVyZSdzIG5vdGhpbmdcbiAgICAgIC8vIHNwZWNpYWwgdG8gZG8uIE5lZWQgdG8gcHVzaCB0byB0aGUgc3RhY2sgcmVnYXJkbGVzcywgdGhvdWdoLCB0byBhdm9pZFxuICAgICAgLy8gYSBwdXNoL3BvcCBtaXNhbGlnbm1lbnQuXG4gICAgICBfc3VidHJlZVJlbmRlckxhbmVzID0gcmVuZGVyTGFuZXM7XG4gICAgfVxuXG4gICAgcHVzaFJlbmRlckxhbmVzKHdvcmtJblByb2dyZXNzLCBfc3VidHJlZVJlbmRlckxhbmVzKTtcbiAgfVxuXG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufSAvLyBOb3RlOiBUaGVzZSBoYXBwZW4gdG8gaGF2ZSBpZGVudGljYWwgYmVnaW4gcGhhc2VzLCBmb3Igbm93LiBXZSBzaG91bGRuJ3QgaG9sZFxuXG5mdW5jdGlvbiB1cGRhdGVGcmFnbWVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG5leHRDaGlsZHJlbiA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyTGFuZXMpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZU1vZGUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIHZhciBuZXh0Q2hpbGRyZW4gPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMuY2hpbGRyZW47XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVQcm9maWxlcihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAge1xuICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IFVwZGF0ZTtcblxuICAgIHtcbiAgICAgIC8vIFJlc2V0IGVmZmVjdCBkdXJhdGlvbnMgZm9yIHRoZSBuZXh0IGV2ZW50dWFsIGVmZmVjdCBwaGFzZS5cbiAgICAgIC8vIFRoZXNlIGFyZSByZXNldCBkdXJpbmcgcmVuZGVyIHRvIGFsbG93IHRoZSBEZXZUb29scyBjb21taXQgaG9vayBhIGNoYW5jZSB0byByZWFkIHRoZW0sXG4gICAgICB2YXIgc3RhdGVOb2RlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgc3RhdGVOb2RlLmVmZmVjdER1cmF0aW9uID0gMDtcbiAgICAgIHN0YXRlTm9kZS5wYXNzaXZlRWZmZWN0RHVyYXRpb24gPSAwO1xuICAgIH1cbiAgfVxuXG4gIHZhciBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIHZhciBuZXh0Q2hpbGRyZW4gPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuXG5mdW5jdGlvbiBtYXJrUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7XG4gIHZhciByZWYgPSB3b3JrSW5Qcm9ncmVzcy5yZWY7XG5cbiAgaWYgKGN1cnJlbnQgPT09IG51bGwgJiYgcmVmICE9PSBudWxsIHx8IGN1cnJlbnQgIT09IG51bGwgJiYgY3VycmVudC5yZWYgIT09IHJlZikge1xuICAgIC8vIFNjaGVkdWxlIGEgUmVmIGVmZmVjdFxuICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IFJlZjtcblxuICAgIHtcbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IFJlZlN0YXRpYztcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlRnVuY3Rpb25Db21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgbmV4dFByb3BzLCByZW5kZXJMYW5lcykge1xuICB7XG4gICAgaWYgKHdvcmtJblByb2dyZXNzLnR5cGUgIT09IHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlKSB7XG4gICAgICAvLyBMYXp5IGNvbXBvbmVudCBwcm9wcyBjYW4ndCBiZSB2YWxpZGF0ZWQgaW4gY3JlYXRlRWxlbWVudFxuICAgICAgLy8gYmVjYXVzZSB0aGV5J3JlIG9ubHkgZ3VhcmFudGVlZCB0byBiZSByZXNvbHZlZCBoZXJlLlxuICAgICAgdmFyIGlubmVyUHJvcFR5cGVzID0gQ29tcG9uZW50LnByb3BUeXBlcztcblxuICAgICAgaWYgKGlubmVyUHJvcFR5cGVzKSB7XG4gICAgICAgIGNoZWNrUHJvcFR5cGVzKGlubmVyUHJvcFR5cGVzLCBuZXh0UHJvcHMsIC8vIFJlc29sdmVkIHByb3BzXG4gICAgICAgICdwcm9wJywgZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKENvbXBvbmVudCkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBjb250ZXh0O1xuXG4gIHtcbiAgICB2YXIgdW5tYXNrZWRDb250ZXh0ID0gZ2V0VW5tYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHRydWUpO1xuICAgIGNvbnRleHQgPSBnZXRNYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCB1bm1hc2tlZENvbnRleHQpO1xuICB9XG5cbiAgdmFyIG5leHRDaGlsZHJlbjtcbiAgdmFyIGhhc0lkO1xuICBwcmVwYXJlVG9SZWFkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuXG4gIHtcbiAgICBtYXJrQ29tcG9uZW50UmVuZGVyU3RhcnRlZCh3b3JrSW5Qcm9ncmVzcyk7XG4gIH1cblxuICB7XG4gICAgUmVhY3RDdXJyZW50T3duZXIkMS5jdXJyZW50ID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgc2V0SXNSZW5kZXJpbmcodHJ1ZSk7XG4gICAgbmV4dENoaWxkcmVuID0gcmVuZGVyV2l0aEhvb2tzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcywgY29udGV4dCwgcmVuZGVyTGFuZXMpO1xuICAgIGhhc0lkID0gY2hlY2tEaWRSZW5kZXJJZEhvb2soKTtcblxuICAgIGlmICggd29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdExlZ2FjeU1vZGUpIHtcbiAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKHRydWUpO1xuXG4gICAgICB0cnkge1xuICAgICAgICBuZXh0Q2hpbGRyZW4gPSByZW5kZXJXaXRoSG9va3MoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgbmV4dFByb3BzLCBjb250ZXh0LCByZW5kZXJMYW5lcyk7XG4gICAgICAgIGhhc0lkID0gY2hlY2tEaWRSZW5kZXJJZEhvb2soKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRJc1JlbmRlcmluZyhmYWxzZSk7XG4gIH1cblxuICB7XG4gICAgbWFya0NvbXBvbmVudFJlbmRlclN0b3BwZWQoKTtcbiAgfVxuXG4gIGlmIChjdXJyZW50ICE9PSBudWxsICYmICFkaWRSZWNlaXZlVXBkYXRlKSB7XG4gICAgYmFpbG91dEhvb2tzKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgfVxuXG4gIGlmIChnZXRJc0h5ZHJhdGluZygpICYmIGhhc0lkKSB7XG4gICAgcHVzaE1hdGVyaWFsaXplZFRyZWVJZCh3b3JrSW5Qcm9ncmVzcyk7XG4gIH0gLy8gUmVhY3QgRGV2VG9vbHMgcmVhZHMgdGhpcyBmbGFnLlxuXG5cbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gUGVyZm9ybWVkV29yaztcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyTGFuZXMpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNsYXNzQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcywgcmVuZGVyTGFuZXMpIHtcbiAge1xuICAgIC8vIFRoaXMgaXMgdXNlZCBieSBEZXZUb29scyB0byBmb3JjZSBhIGJvdW5kYXJ5IHRvIGVycm9yLlxuICAgIHN3aXRjaCAoc2hvdWxkRXJyb3Iod29ya0luUHJvZ3Jlc3MpKSB7XG4gICAgICBjYXNlIGZhbHNlOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIF9pbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICAgICAgICB2YXIgY3RvciA9IHdvcmtJblByb2dyZXNzLnR5cGU7IC8vIFRPRE8gVGhpcyB3YXkgb2YgcmVzZXR0aW5nIHRoZSBlcnJvciBib3VuZGFyeSBzdGF0ZSBpcyBhIGhhY2suXG4gICAgICAgICAgLy8gSXMgdGhlcmUgYSBiZXR0ZXIgd2F5IHRvIGRvIHRoaXM/XG5cbiAgICAgICAgICB2YXIgdGVtcEluc3RhbmNlID0gbmV3IGN0b3Iod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcywgX2luc3RhbmNlLmNvbnRleHQpO1xuICAgICAgICAgIHZhciBzdGF0ZSA9IHRlbXBJbnN0YW5jZS5zdGF0ZTtcblxuICAgICAgICAgIF9pbnN0YW5jZS51cGRhdGVyLmVucXVldWVTZXRTdGF0ZShfaW5zdGFuY2UsIHN0YXRlLCBudWxsKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgdHJ1ZTpcbiAgICAgICAge1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IERpZENhcHR1cmU7XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gU2hvdWxkQ2FwdHVyZTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL3Byb2QtZXJyb3ItY29kZXNcblxuICAgICAgICAgIHZhciBlcnJvciQxID0gbmV3IEVycm9yKCdTaW11bGF0ZWQgZXJyb3IgY29taW5nIGZyb20gRGV2VG9vbHMnKTtcbiAgICAgICAgICB2YXIgbGFuZSA9IHBpY2tBcmJpdHJhcnlMYW5lKHJlbmRlckxhbmVzKTtcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IG1lcmdlTGFuZXMod29ya0luUHJvZ3Jlc3MubGFuZXMsIGxhbmUpOyAvLyBTY2hlZHVsZSB0aGUgZXJyb3IgYm91bmRhcnkgdG8gcmUtcmVuZGVyIHVzaW5nIHVwZGF0ZWQgc3RhdGVcblxuICAgICAgICAgIHZhciB1cGRhdGUgPSBjcmVhdGVDbGFzc0Vycm9yVXBkYXRlKHdvcmtJblByb2dyZXNzLCBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcihlcnJvciQxLCB3b3JrSW5Qcm9ncmVzcyksIGxhbmUpO1xuICAgICAgICAgIGVucXVldWVDYXB0dXJlZFVwZGF0ZSh3b3JrSW5Qcm9ncmVzcywgdXBkYXRlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh3b3JrSW5Qcm9ncmVzcy50eXBlICE9PSB3b3JrSW5Qcm9ncmVzcy5lbGVtZW50VHlwZSkge1xuICAgICAgLy8gTGF6eSBjb21wb25lbnQgcHJvcHMgY2FuJ3QgYmUgdmFsaWRhdGVkIGluIGNyZWF0ZUVsZW1lbnRcbiAgICAgIC8vIGJlY2F1c2UgdGhleSdyZSBvbmx5IGd1YXJhbnRlZWQgdG8gYmUgcmVzb2x2ZWQgaGVyZS5cbiAgICAgIHZhciBpbm5lclByb3BUeXBlcyA9IENvbXBvbmVudC5wcm9wVHlwZXM7XG5cbiAgICAgIGlmIChpbm5lclByb3BUeXBlcykge1xuICAgICAgICBjaGVja1Byb3BUeXBlcyhpbm5lclByb3BUeXBlcywgbmV4dFByb3BzLCAvLyBSZXNvbHZlZCBwcm9wc1xuICAgICAgICAncHJvcCcsIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShDb21wb25lbnQpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gUHVzaCBjb250ZXh0IHByb3ZpZGVycyBlYXJseSB0byBwcmV2ZW50IGNvbnRleHQgc3RhY2sgbWlzbWF0Y2hlcy5cbiAgLy8gRHVyaW5nIG1vdW50aW5nIHdlIGRvbid0IGtub3cgdGhlIGNoaWxkIGNvbnRleHQgeWV0IGFzIHRoZSBpbnN0YW5jZSBkb2Vzbid0IGV4aXN0LlxuICAvLyBXZSB3aWxsIGludmFsaWRhdGUgdGhlIGNoaWxkIGNvbnRleHQgaW4gZmluaXNoQ2xhc3NDb21wb25lbnQoKSByaWdodCBhZnRlciByZW5kZXJpbmcuXG5cblxuICB2YXIgaGFzQ29udGV4dDtcblxuICBpZiAoaXNDb250ZXh0UHJvdmlkZXIoQ29tcG9uZW50KSkge1xuICAgIGhhc0NvbnRleHQgPSB0cnVlO1xuICAgIHB1c2hDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuICB9IGVsc2Uge1xuICAgIGhhc0NvbnRleHQgPSBmYWxzZTtcbiAgfVxuXG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgdmFyIHNob3VsZFVwZGF0ZTtcblxuICBpZiAoaW5zdGFuY2UgPT09IG51bGwpIHtcbiAgICByZXNldFN1c3BlbmRlZEN1cnJlbnRPbk1vdW50SW5MZWdhY3lNb2RlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTsgLy8gSW4gdGhlIGluaXRpYWwgcGFzcyB3ZSBtaWdodCBuZWVkIHRvIGNvbnN0cnVjdCB0aGUgaW5zdGFuY2UuXG5cbiAgICBjb25zdHJ1Y3RDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcyk7XG4gICAgbW91bnRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcywgcmVuZGVyTGFuZXMpO1xuICAgIHNob3VsZFVwZGF0ZSA9IHRydWU7XG4gIH0gZWxzZSBpZiAoY3VycmVudCA9PT0gbnVsbCkge1xuICAgIC8vIEluIGEgcmVzdW1lLCB3ZSdsbCBhbHJlYWR5IGhhdmUgYW4gaW5zdGFuY2Ugd2UgY2FuIHJldXNlLlxuICAgIHNob3VsZFVwZGF0ZSA9IHJlc3VtZU1vdW50Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBuZXh0UHJvcHMsIHJlbmRlckxhbmVzKTtcbiAgfSBlbHNlIHtcbiAgICBzaG91bGRVcGRhdGUgPSB1cGRhdGVDbGFzc0luc3RhbmNlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcywgcmVuZGVyTGFuZXMpO1xuICB9XG5cbiAgdmFyIG5leHRVbml0T2ZXb3JrID0gZmluaXNoQ2xhc3NDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgc2hvdWxkVXBkYXRlLCBoYXNDb250ZXh0LCByZW5kZXJMYW5lcyk7XG5cbiAge1xuICAgIHZhciBpbnN0ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuXG4gICAgaWYgKHNob3VsZFVwZGF0ZSAmJiBpbnN0LnByb3BzICE9PSBuZXh0UHJvcHMpIHtcbiAgICAgIGlmICghZGlkV2FybkFib3V0UmVhc3NpZ25pbmdQcm9wcykge1xuICAgICAgICBlcnJvcignSXQgbG9va3MgbGlrZSAlcyBpcyByZWFzc2lnbmluZyBpdHMgb3duIGB0aGlzLnByb3BzYCB3aGlsZSByZW5kZXJpbmcuICcgKyAnVGhpcyBpcyBub3Qgc3VwcG9ydGVkIGFuZCBjYW4gbGVhZCB0byBjb25mdXNpbmcgYnVncy4nLCBnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKHdvcmtJblByb2dyZXNzKSB8fCAnYSBjb21wb25lbnQnKTtcbiAgICAgIH1cblxuICAgICAgZGlkV2FybkFib3V0UmVhc3NpZ25pbmdQcm9wcyA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5leHRVbml0T2ZXb3JrO1xufVxuXG5mdW5jdGlvbiBmaW5pc2hDbGFzc0NvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBzaG91bGRVcGRhdGUsIGhhc0NvbnRleHQsIHJlbmRlckxhbmVzKSB7XG4gIC8vIFJlZnMgc2hvdWxkIHVwZGF0ZSBldmVuIGlmIHNob3VsZENvbXBvbmVudFVwZGF0ZSByZXR1cm5zIGZhbHNlXG4gIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICB2YXIgZGlkQ2FwdHVyZUVycm9yID0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgRGlkQ2FwdHVyZSkgIT09IE5vRmxhZ3M7XG5cbiAgaWYgKCFzaG91bGRVcGRhdGUgJiYgIWRpZENhcHR1cmVFcnJvcikge1xuICAgIC8vIENvbnRleHQgcHJvdmlkZXJzIHNob3VsZCBkZWZlciB0byBzQ1UgZm9yIHJlbmRlcmluZ1xuICAgIGlmIChoYXNDb250ZXh0KSB7XG4gICAgICBpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyKHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIGZhbHNlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICB9XG5cbiAgdmFyIGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlOyAvLyBSZXJlbmRlclxuXG4gIFJlYWN0Q3VycmVudE93bmVyJDEuY3VycmVudCA9IHdvcmtJblByb2dyZXNzO1xuICB2YXIgbmV4dENoaWxkcmVuO1xuXG4gIGlmIChkaWRDYXB0dXJlRXJyb3IgJiYgdHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBJZiB3ZSBjYXB0dXJlZCBhbiBlcnJvciwgYnV0IGdldERlcml2ZWRTdGF0ZUZyb21FcnJvciBpcyBub3QgZGVmaW5lZCxcbiAgICAvLyB1bm1vdW50IGFsbCB0aGUgY2hpbGRyZW4uIGNvbXBvbmVudERpZENhdGNoIHdpbGwgc2NoZWR1bGUgYW4gdXBkYXRlIHRvXG4gICAgLy8gcmUtcmVuZGVyIGEgZmFsbGJhY2suIFRoaXMgaXMgdGVtcG9yYXJ5IHVudGlsIHdlIG1pZ3JhdGUgZXZlcnlvbmUgdG9cbiAgICAvLyB0aGUgbmV3IEFQSS5cbiAgICAvLyBUT0RPOiBXYXJuIGluIGEgZnV0dXJlIHJlbGVhc2UuXG4gICAgbmV4dENoaWxkcmVuID0gbnVsbDtcblxuICAgIHtcbiAgICAgIHN0b3BQcm9maWxlclRpbWVySWZSdW5uaW5nKCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHtcbiAgICAgIG1hcmtDb21wb25lbnRSZW5kZXJTdGFydGVkKHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG5cbiAgICB7XG4gICAgICBzZXRJc1JlbmRlcmluZyh0cnVlKTtcbiAgICAgIG5leHRDaGlsZHJlbiA9IGluc3RhbmNlLnJlbmRlcigpO1xuXG4gICAgICBpZiAoIHdvcmtJblByb2dyZXNzLm1vZGUgJiBTdHJpY3RMZWdhY3lNb2RlKSB7XG4gICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKHRydWUpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaW5zdGFuY2UucmVuZGVyKCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHNldElzUmVuZGVyaW5nKGZhbHNlKTtcbiAgICB9XG5cbiAgICB7XG4gICAgICBtYXJrQ29tcG9uZW50UmVuZGVyU3RvcHBlZCgpO1xuICAgIH1cbiAgfSAvLyBSZWFjdCBEZXZUb29scyByZWFkcyB0aGlzIGZsYWcuXG5cblxuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSBQZXJmb3JtZWRXb3JrO1xuXG4gIGlmIChjdXJyZW50ICE9PSBudWxsICYmIGRpZENhcHR1cmVFcnJvcikge1xuICAgIC8vIElmIHdlJ3JlIHJlY292ZXJpbmcgZnJvbSBhbiBlcnJvciwgcmVjb25jaWxlIHdpdGhvdXQgcmV1c2luZyBhbnkgb2ZcbiAgICAvLyB0aGUgZXhpc3RpbmcgY2hpbGRyZW4uIENvbmNlcHR1YWxseSwgdGhlIG5vcm1hbCBjaGlsZHJlbiBhbmQgdGhlIGNoaWxkcmVuXG4gICAgLy8gdGhhdCBhcmUgc2hvd24gb24gZXJyb3IgYXJlIHR3byBkaWZmZXJlbnQgc2V0cywgc28gd2Ugc2hvdWxkbid0IHJldXNlXG4gICAgLy8gbm9ybWFsIGNoaWxkcmVuIGV2ZW4gaWYgdGhlaXIgaWRlbnRpdGllcyBtYXRjaC5cbiAgICBmb3JjZVVubW91bnRDdXJyZW50QW5kUmVjb25jaWxlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKTtcbiAgfSBlbHNlIHtcbiAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIH0gLy8gTWVtb2l6ZSBzdGF0ZSB1c2luZyB0aGUgdmFsdWVzIHdlIGp1c3QgdXNlZCB0byByZW5kZXIuXG4gIC8vIFRPRE86IFJlc3RydWN0dXJlIHNvIHdlIG5ldmVyIHJlYWQgdmFsdWVzIGZyb20gdGhlIGluc3RhbmNlLlxuXG5cbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGluc3RhbmNlLnN0YXRlOyAvLyBUaGUgY29udGV4dCBtaWdodCBoYXZlIGNoYW5nZWQgc28gd2UgbmVlZCB0byByZWNhbGN1bGF0ZSBpdC5cblxuICBpZiAoaGFzQ29udGV4dCkge1xuICAgIGludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgdHJ1ZSk7XG4gIH1cblxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5cbmZ1bmN0aW9uIHB1c2hIb3N0Um9vdENvbnRleHQod29ya0luUHJvZ3Jlc3MpIHtcbiAgdmFyIHJvb3QgPSB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGU7XG5cbiAgaWYgKHJvb3QucGVuZGluZ0NvbnRleHQpIHtcbiAgICBwdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0KHdvcmtJblByb2dyZXNzLCByb290LnBlbmRpbmdDb250ZXh0LCByb290LnBlbmRpbmdDb250ZXh0ICE9PSByb290LmNvbnRleHQpO1xuICB9IGVsc2UgaWYgKHJvb3QuY29udGV4dCkge1xuICAgIC8vIFNob3VsZCBhbHdheXMgYmUgc2V0XG4gICAgcHVzaFRvcExldmVsQ29udGV4dE9iamVjdCh3b3JrSW5Qcm9ncmVzcywgcm9vdC5jb250ZXh0LCBmYWxzZSk7XG4gIH1cblxuICBwdXNoSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcywgcm9vdC5jb250YWluZXJJbmZvKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlSG9zdFJvb3QoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIHB1c2hIb3N0Um9vdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuXG4gIGlmIChjdXJyZW50ID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTaG91bGQgaGF2ZSBhIGN1cnJlbnQgZmliZXIuIFRoaXMgaXMgYSBidWcgaW4gUmVhY3QuJyk7XG4gIH1cblxuICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICB2YXIgcHJldlN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcbiAgdmFyIHByZXZDaGlsZHJlbiA9IHByZXZTdGF0ZS5lbGVtZW50O1xuICBjbG9uZVVwZGF0ZVF1ZXVlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgcHJvY2Vzc1VwZGF0ZVF1ZXVlKHdvcmtJblByb2dyZXNzLCBuZXh0UHJvcHMsIG51bGwsIHJlbmRlckxhbmVzKTtcbiAgdmFyIG5leHRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gIHZhciByb290ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAvLyBiZWluZyBjYWxsZWQgXCJlbGVtZW50XCIuXG5cblxuICB2YXIgbmV4dENoaWxkcmVuID0gbmV4dFN0YXRlLmVsZW1lbnQ7XG5cbiAgaWYgKCBwcmV2U3RhdGUuaXNEZWh5ZHJhdGVkKSB7XG4gICAgLy8gVGhpcyBpcyBhIGh5ZHJhdGlvbiByb290IHdob3NlIHNoZWxsIGhhcyBub3QgeWV0IGh5ZHJhdGVkLiBXZSBzaG91bGRcbiAgICAvLyBhdHRlbXB0IHRvIGh5ZHJhdGUuXG4gICAgLy8gRmxpcCBpc0RlaHlkcmF0ZWQgdG8gZmFsc2UgdG8gaW5kaWNhdGUgdGhhdCB3aGVuIHRoaXMgcmVuZGVyXG4gICAgLy8gZmluaXNoZXMsIHRoZSByb290IHdpbGwgbm8gbG9uZ2VyIGJlIGRlaHlkcmF0ZWQuXG4gICAgdmFyIG92ZXJyaWRlU3RhdGUgPSB7XG4gICAgICBlbGVtZW50OiBuZXh0Q2hpbGRyZW4sXG4gICAgICBpc0RlaHlkcmF0ZWQ6IGZhbHNlLFxuICAgICAgY2FjaGU6IG5leHRTdGF0ZS5jYWNoZSxcbiAgICAgIHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6IG5leHRTdGF0ZS5wZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzLFxuICAgICAgdHJhbnNpdGlvbnM6IG5leHRTdGF0ZS50cmFuc2l0aW9uc1xuICAgIH07XG4gICAgdmFyIHVwZGF0ZVF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7IC8vIGBiYXNlU3RhdGVgIGNhbiBhbHdheXMgYmUgdGhlIGxhc3Qgc3RhdGUgYmVjYXVzZSB0aGUgcm9vdCBkb2Vzbid0XG4gICAgLy8gaGF2ZSByZWR1Y2VyIGZ1bmN0aW9ucyBzbyBpdCBkb2Vzbid0IG5lZWQgcmViYXNpbmcuXG5cbiAgICB1cGRhdGVRdWV1ZS5iYXNlU3RhdGUgPSBvdmVycmlkZVN0YXRlO1xuICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBvdmVycmlkZVN0YXRlO1xuXG4gICAgaWYgKHdvcmtJblByb2dyZXNzLmZsYWdzICYgRm9yY2VDbGllbnRSZW5kZXIpIHtcbiAgICAgIC8vIFNvbWV0aGluZyBlcnJvcmVkIGR1cmluZyBhIHByZXZpb3VzIGF0dGVtcHQgdG8gaHlkcmF0ZSB0aGUgc2hlbGwsIHNvIHdlXG4gICAgICAvLyBmb3JjZWQgYSBjbGllbnQgcmVuZGVyLlxuICAgICAgdmFyIHJlY292ZXJhYmxlRXJyb3IgPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcihuZXcgRXJyb3IoJ1RoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSBoeWRyYXRpbmcuIEJlY2F1c2UgdGhlIGVycm9yIGhhcHBlbmVkIG91dHNpZGUgJyArICdvZiBhIFN1c3BlbnNlIGJvdW5kYXJ5LCB0aGUgZW50aXJlIHJvb3Qgd2lsbCBzd2l0Y2ggdG8gJyArICdjbGllbnQgcmVuZGVyaW5nLicpLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXR1cm4gbW91bnRIb3N0Um9vdFdpdGhvdXRIeWRyYXRpbmcoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyTGFuZXMsIHJlY292ZXJhYmxlRXJyb3IpO1xuICAgIH0gZWxzZSBpZiAobmV4dENoaWxkcmVuICE9PSBwcmV2Q2hpbGRyZW4pIHtcbiAgICAgIHZhciBfcmVjb3ZlcmFibGVFcnJvciA9IGNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyKG5ldyBFcnJvcignVGhpcyByb290IHJlY2VpdmVkIGFuIGVhcmx5IHVwZGF0ZSwgYmVmb3JlIGFueXRoaW5nIHdhcyBhYmxlICcgKyAnaHlkcmF0ZS4gU3dpdGNoZWQgdGhlIGVudGlyZSByb290IHRvIGNsaWVudCByZW5kZXJpbmcuJyksIHdvcmtJblByb2dyZXNzKTtcblxuICAgICAgcmV0dXJuIG1vdW50SG9zdFJvb3RXaXRob3V0SHlkcmF0aW5nKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzLCBfcmVjb3ZlcmFibGVFcnJvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFRoZSBvdXRlcm1vc3Qgc2hlbGwgaGFzIG5vdCBoeWRyYXRlZCB5ZXQuIFN0YXJ0IGh5ZHJhdGluZy5cbiAgICAgIGVudGVySHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpO1xuXG4gICAgICB2YXIgY2hpbGQgPSBtb3VudENoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBudWxsLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKTtcbiAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gY2hpbGQ7XG4gICAgICB2YXIgbm9kZSA9IGNoaWxkO1xuXG4gICAgICB3aGlsZSAobm9kZSkge1xuICAgICAgICAvLyBNYXJrIGVhY2ggY2hpbGQgYXMgaHlkcmF0aW5nLiBUaGlzIGlzIGEgZmFzdCBwYXRoIHRvIGtub3cgd2hldGhlciB0aGlzXG4gICAgICAgIC8vIHRyZWUgaXMgcGFydCBvZiBhIGh5ZHJhdGluZyB0cmVlLiBUaGlzIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIGEgY2hpbGRcbiAgICAgICAgLy8gbm9kZSBoYXMgZnVsbHkgbW91bnRlZCB5ZXQsIGFuZCBmb3Igc2NoZWR1bGluZyBldmVudCByZXBsYXlpbmcuXG4gICAgICAgIC8vIENvbmNlcHR1YWxseSB0aGlzIGlzIHNpbWlsYXIgdG8gUGxhY2VtZW50IGluIHRoYXQgYSBuZXcgc3VidHJlZSBpc1xuICAgICAgICAvLyBpbnNlcnRlZCBpbnRvIHRoZSBSZWFjdCB0cmVlIGhlcmUuIEl0IGp1c3QgaGFwcGVucyB0byBub3QgbmVlZCBET01cbiAgICAgICAgLy8gbXV0YXRpb25zIGJlY2F1c2UgaXQgYWxyZWFkeSBleGlzdHMuXG4gICAgICAgIG5vZGUuZmxhZ3MgPSBub2RlLmZsYWdzICYgflBsYWNlbWVudCB8IEh5ZHJhdGluZztcbiAgICAgICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gUm9vdCBpcyBub3QgZGVoeWRyYXRlZC4gRWl0aGVyIHRoaXMgaXMgYSBjbGllbnQtb25seSByb290LCBvciBpdFxuICAgIC8vIGFscmVhZHkgaHlkcmF0ZWQuXG4gICAgcmVzZXRIeWRyYXRpb25TdGF0ZSgpO1xuXG4gICAgaWYgKG5leHRDaGlsZHJlbiA9PT0gcHJldkNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgIH1cblxuICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKTtcbiAgfVxuXG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cblxuZnVuY3Rpb24gbW91bnRIb3N0Um9vdFdpdGhvdXRIeWRyYXRpbmcoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbiwgcmVuZGVyTGFuZXMsIHJlY292ZXJhYmxlRXJyb3IpIHtcbiAgLy8gUmV2ZXJ0IHRvIGNsaWVudCByZW5kZXJpbmcuXG4gIHJlc2V0SHlkcmF0aW9uU3RhdGUoKTtcbiAgcXVldWVIeWRyYXRpb25FcnJvcihyZWNvdmVyYWJsZUVycm9yKTtcbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gRm9yY2VDbGllbnRSZW5kZXI7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVIb3N0Q29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICBwdXNoSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuXG4gIGlmIChjdXJyZW50ID09PSBudWxsKSB7XG4gICAgdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MpO1xuICB9XG5cbiAgdmFyIHR5cGUgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICB2YXIgcHJldlByb3BzID0gY3VycmVudCAhPT0gbnVsbCA/IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyA6IG51bGw7XG4gIHZhciBuZXh0Q2hpbGRyZW4gPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gIHZhciBpc0RpcmVjdFRleHRDaGlsZCA9IHNob3VsZFNldFRleHRDb250ZW50KHR5cGUsIG5leHRQcm9wcyk7XG5cbiAgaWYgKGlzRGlyZWN0VGV4dENoaWxkKSB7XG4gICAgLy8gV2Ugc3BlY2lhbCBjYXNlIGEgZGlyZWN0IHRleHQgY2hpbGQgb2YgYSBob3N0IG5vZGUuIFRoaXMgaXMgYSBjb21tb25cbiAgICAvLyBjYXNlLiBXZSB3b24ndCBoYW5kbGUgaXQgYXMgYSByZWlmaWVkIGNoaWxkLiBXZSB3aWxsIGluc3RlYWQgaGFuZGxlXG4gICAgLy8gdGhpcyBpbiB0aGUgaG9zdCBlbnZpcm9ubWVudCB0aGF0IGFsc28gaGFzIGFjY2VzcyB0byB0aGlzIHByb3AuIFRoYXRcbiAgICAvLyBhdm9pZHMgYWxsb2NhdGluZyBhbm90aGVyIEhvc3RUZXh0IGZpYmVyIGFuZCB0cmF2ZXJzaW5nIGl0LlxuICAgIG5leHRDaGlsZHJlbiA9IG51bGw7XG4gIH0gZWxzZSBpZiAocHJldlByb3BzICE9PSBudWxsICYmIHNob3VsZFNldFRleHRDb250ZW50KHR5cGUsIHByZXZQcm9wcykpIHtcbiAgICAvLyBJZiB3ZSdyZSBzd2l0Y2hpbmcgZnJvbSBhIGRpcmVjdCB0ZXh0IGNoaWxkIHRvIGEgbm9ybWFsIGNoaWxkLCBvciB0b1xuICAgIC8vIGVtcHR5LCB3ZSBuZWVkIHRvIHNjaGVkdWxlIHRoZSB0ZXh0IGNvbnRlbnQgdG8gYmUgcmVzZXQuXG4gICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gQ29udGVudFJlc2V0O1xuICB9XG5cbiAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKTtcbiAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVIb3N0VGV4dChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICBpZiAoY3VycmVudCA9PT0gbnVsbCkge1xuICAgIHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlKHdvcmtJblByb2dyZXNzKTtcbiAgfSAvLyBOb3RoaW5nIHRvIGRvIGhlcmUuIFRoaXMgaXMgdGVybWluYWwuIFdlJ2xsIGRvIHRoZSBjb21wbGV0aW9uIHN0ZXBcbiAgLy8gaW1tZWRpYXRlbHkgYWZ0ZXIuXG5cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gbW91bnRMYXp5Q29tcG9uZW50KF9jdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgZWxlbWVudFR5cGUsIHJlbmRlckxhbmVzKSB7XG4gIHJlc2V0U3VzcGVuZGVkQ3VycmVudE9uTW91bnRJbkxlZ2FjeU1vZGUoX2N1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgdmFyIHByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICB2YXIgbGF6eUNvbXBvbmVudCA9IGVsZW1lbnRUeXBlO1xuICB2YXIgcGF5bG9hZCA9IGxhenlDb21wb25lbnQuX3BheWxvYWQ7XG4gIHZhciBpbml0ID0gbGF6eUNvbXBvbmVudC5faW5pdDtcbiAgdmFyIENvbXBvbmVudCA9IGluaXQocGF5bG9hZCk7IC8vIFN0b3JlIHRoZSB1bndyYXBwZWQgY29tcG9uZW50IGluIHRoZSB0eXBlLlxuXG4gIHdvcmtJblByb2dyZXNzLnR5cGUgPSBDb21wb25lbnQ7XG4gIHZhciByZXNvbHZlZFRhZyA9IHdvcmtJblByb2dyZXNzLnRhZyA9IHJlc29sdmVMYXp5Q29tcG9uZW50VGFnKENvbXBvbmVudCk7XG4gIHZhciByZXNvbHZlZFByb3BzID0gcmVzb2x2ZURlZmF1bHRQcm9wcyhDb21wb25lbnQsIHByb3BzKTtcbiAgdmFyIGNoaWxkO1xuXG4gIHN3aXRjaCAocmVzb2x2ZWRUYWcpIHtcbiAgICBjYXNlIEZ1bmN0aW9uQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB7XG4gICAgICAgICAgdmFsaWRhdGVGdW5jdGlvbkNvbXBvbmVudEluRGV2KHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQpO1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUgPSBDb21wb25lbnQgPSByZXNvbHZlRnVuY3Rpb25Gb3JIb3RSZWxvYWRpbmcoQ29tcG9uZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkID0gdXBkYXRlRnVuY3Rpb25Db21wb25lbnQobnVsbCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcmVzb2x2ZWRQcm9wcywgcmVuZGVyTGFuZXMpO1xuICAgICAgICByZXR1cm4gY2hpbGQ7XG4gICAgICB9XG5cbiAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB7XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MudHlwZSA9IENvbXBvbmVudCA9IHJlc29sdmVDbGFzc0ZvckhvdFJlbG9hZGluZyhDb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgPSB1cGRhdGVDbGFzc0NvbXBvbmVudChudWxsLCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCByZXNvbHZlZFByb3BzLCByZW5kZXJMYW5lcyk7XG4gICAgICAgIHJldHVybiBjaGlsZDtcbiAgICAgIH1cblxuICAgIGNhc2UgRm9yd2FyZFJlZjpcbiAgICAgIHtcbiAgICAgICAge1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUgPSBDb21wb25lbnQgPSByZXNvbHZlRm9yd2FyZFJlZkZvckhvdFJlbG9hZGluZyhDb21wb25lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2hpbGQgPSB1cGRhdGVGb3J3YXJkUmVmKG51bGwsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlc29sdmVkUHJvcHMsIHJlbmRlckxhbmVzKTtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuXG4gICAgY2FzZSBNZW1vQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB7XG4gICAgICAgICAgaWYgKHdvcmtJblByb2dyZXNzLnR5cGUgIT09IHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlKSB7XG4gICAgICAgICAgICB2YXIgb3V0ZXJQcm9wVHlwZXMgPSBDb21wb25lbnQucHJvcFR5cGVzO1xuXG4gICAgICAgICAgICBpZiAob3V0ZXJQcm9wVHlwZXMpIHtcbiAgICAgICAgICAgICAgY2hlY2tQcm9wVHlwZXMob3V0ZXJQcm9wVHlwZXMsIHJlc29sdmVkUHJvcHMsIC8vIFJlc29sdmVkIGZvciBvdXRlciBvbmx5XG4gICAgICAgICAgICAgICdwcm9wJywgZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKENvbXBvbmVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNoaWxkID0gdXBkYXRlTWVtb0NvbXBvbmVudChudWxsLCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCByZXNvbHZlRGVmYXVsdFByb3BzKENvbXBvbmVudC50eXBlLCByZXNvbHZlZFByb3BzKSwgLy8gVGhlIGlubmVyIHR5cGUgY2FuIGhhdmUgZGVmYXVsdHMgdG9vXG4gICAgICAgIHJlbmRlckxhbmVzKTtcbiAgICAgICAgcmV0dXJuIGNoaWxkO1xuICAgICAgfVxuICB9XG5cbiAgdmFyIGhpbnQgPSAnJztcblxuICB7XG4gICAgaWYgKENvbXBvbmVudCAhPT0gbnVsbCAmJiB0eXBlb2YgQ29tcG9uZW50ID09PSAnb2JqZWN0JyAmJiBDb21wb25lbnQuJCR0eXBlb2YgPT09IFJFQUNUX0xBWllfVFlQRSkge1xuICAgICAgaGludCA9ICcgRGlkIHlvdSB3cmFwIGEgY29tcG9uZW50IGluIFJlYWN0LmxhenkoKSBtb3JlIHRoYW4gb25jZT8nO1xuICAgIH1cbiAgfSAvLyBUaGlzIG1lc3NhZ2UgaW50ZW50aW9uYWxseSBkb2Vzbid0IG1lbnRpb24gRm9yd2FyZFJlZiBvciBNZW1vQ29tcG9uZW50XG4gIC8vIGJlY2F1c2UgdGhlIGZhY3QgdGhhdCBpdCdzIGEgc2VwYXJhdGUgdHlwZSBvZiB3b3JrIGlzIGFuXG4gIC8vIGltcGxlbWVudGF0aW9uIGRldGFpbC5cblxuXG4gIHRocm93IG5ldyBFcnJvcihcIkVsZW1lbnQgdHlwZSBpcyBpbnZhbGlkLiBSZWNlaXZlZCBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0bzogXCIgKyBDb21wb25lbnQgKyBcIi4gXCIgKyAoXCJMYXp5IGVsZW1lbnQgdHlwZSBtdXN0IHJlc29sdmUgdG8gYSBjbGFzcyBvciBmdW5jdGlvbi5cIiArIGhpbnQpKTtcbn1cblxuZnVuY3Rpb24gbW91bnRJbmNvbXBsZXRlQ2xhc3NDb21wb25lbnQoX2N1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIG5leHRQcm9wcywgcmVuZGVyTGFuZXMpIHtcbiAgcmVzZXRTdXNwZW5kZWRDdXJyZW50T25Nb3VudEluTGVnYWN5TW9kZShfY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpOyAvLyBQcm9tb3RlIHRoZSBmaWJlciB0byBhIGNsYXNzIGFuZCB0cnkgcmVuZGVyaW5nIGFnYWluLlxuXG4gIHdvcmtJblByb2dyZXNzLnRhZyA9IENsYXNzQ29tcG9uZW50OyAvLyBUaGUgcmVzdCBvZiB0aGlzIGZ1bmN0aW9uIGlzIGEgZm9yayBvZiBgdXBkYXRlQ2xhc3NDb21wb25lbnRgXG4gIC8vIFB1c2ggY29udGV4dCBwcm92aWRlcnMgZWFybHkgdG8gcHJldmVudCBjb250ZXh0IHN0YWNrIG1pc21hdGNoZXMuXG4gIC8vIER1cmluZyBtb3VudGluZyB3ZSBkb24ndCBrbm93IHRoZSBjaGlsZCBjb250ZXh0IHlldCBhcyB0aGUgaW5zdGFuY2UgZG9lc24ndCBleGlzdC5cbiAgLy8gV2Ugd2lsbCBpbnZhbGlkYXRlIHRoZSBjaGlsZCBjb250ZXh0IGluIGZpbmlzaENsYXNzQ29tcG9uZW50KCkgcmlnaHQgYWZ0ZXIgcmVuZGVyaW5nLlxuXG4gIHZhciBoYXNDb250ZXh0O1xuXG4gIGlmIChpc0NvbnRleHRQcm92aWRlcihDb21wb25lbnQpKSB7XG4gICAgaGFzQ29udGV4dCA9IHRydWU7XG4gICAgcHVzaENvbnRleHRQcm92aWRlcih3b3JrSW5Qcm9ncmVzcyk7XG4gIH0gZWxzZSB7XG4gICAgaGFzQ29udGV4dCA9IGZhbHNlO1xuICB9XG5cbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgY29uc3RydWN0Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCBuZXh0UHJvcHMpO1xuICBtb3VudENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgbmV4dFByb3BzLCByZW5kZXJMYW5lcyk7XG4gIHJldHVybiBmaW5pc2hDbGFzc0NvbXBvbmVudChudWxsLCB3b3JrSW5Qcm9ncmVzcywgQ29tcG9uZW50LCB0cnVlLCBoYXNDb250ZXh0LCByZW5kZXJMYW5lcyk7XG59XG5cbmZ1bmN0aW9uIG1vdW50SW5kZXRlcm1pbmF0ZUNvbXBvbmVudChfY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcmVuZGVyTGFuZXMpIHtcbiAgcmVzZXRTdXNwZW5kZWRDdXJyZW50T25Nb3VudEluTGVnYWN5TW9kZShfY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICB2YXIgcHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gIHZhciBjb250ZXh0O1xuXG4gIHtcbiAgICB2YXIgdW5tYXNrZWRDb250ZXh0ID0gZ2V0VW5tYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIGZhbHNlKTtcbiAgICBjb250ZXh0ID0gZ2V0TWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgdW5tYXNrZWRDb250ZXh0KTtcbiAgfVxuXG4gIHByZXBhcmVUb1JlYWRDb250ZXh0KHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gIHZhciB2YWx1ZTtcbiAgdmFyIGhhc0lkO1xuXG4gIHtcbiAgICBtYXJrQ29tcG9uZW50UmVuZGVyU3RhcnRlZCh3b3JrSW5Qcm9ncmVzcyk7XG4gIH1cblxuICB7XG4gICAgaWYgKENvbXBvbmVudC5wcm90b3R5cGUgJiYgdHlwZW9mIENvbXBvbmVudC5wcm90b3R5cGUucmVuZGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShDb21wb25lbnQpIHx8ICdVbmtub3duJztcblxuICAgICAgaWYgKCFkaWRXYXJuQWJvdXRCYWRDbGFzc1tjb21wb25lbnROYW1lXSkge1xuICAgICAgICBlcnJvcihcIlRoZSA8JXMgLz4gY29tcG9uZW50IGFwcGVhcnMgdG8gaGF2ZSBhIHJlbmRlciBtZXRob2QsIGJ1dCBkb2Vzbid0IGV4dGVuZCBSZWFjdC5Db21wb25lbnQuIFwiICsgJ1RoaXMgaXMgbGlrZWx5IHRvIGNhdXNlIGVycm9ycy4gQ2hhbmdlICVzIHRvIGV4dGVuZCBSZWFjdC5Db21wb25lbnQgaW5zdGVhZC4nLCBjb21wb25lbnROYW1lLCBjb21wb25lbnROYW1lKTtcblxuICAgICAgICBkaWRXYXJuQWJvdXRCYWRDbGFzc1tjb21wb25lbnROYW1lXSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHdvcmtJblByb2dyZXNzLm1vZGUgJiBTdHJpY3RMZWdhY3lNb2RlKSB7XG4gICAgICBSZWFjdFN0cmljdE1vZGVXYXJuaW5ncy5yZWNvcmRMZWdhY3lDb250ZXh0V2FybmluZyh3b3JrSW5Qcm9ncmVzcywgbnVsbCk7XG4gICAgfVxuXG4gICAgc2V0SXNSZW5kZXJpbmcodHJ1ZSk7XG4gICAgUmVhY3RDdXJyZW50T3duZXIkMS5jdXJyZW50ID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgdmFsdWUgPSByZW5kZXJXaXRoSG9va3MobnVsbCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcHJvcHMsIGNvbnRleHQsIHJlbmRlckxhbmVzKTtcbiAgICBoYXNJZCA9IGNoZWNrRGlkUmVuZGVySWRIb29rKCk7XG4gICAgc2V0SXNSZW5kZXJpbmcoZmFsc2UpO1xuICB9XG5cbiAge1xuICAgIG1hcmtDb21wb25lbnRSZW5kZXJTdG9wcGVkKCk7XG4gIH0gLy8gUmVhY3QgRGV2VG9vbHMgcmVhZHMgdGhpcyBmbGFnLlxuXG5cbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gUGVyZm9ybWVkV29yaztcblxuICB7XG4gICAgLy8gU3VwcG9ydCBmb3IgbW9kdWxlIGNvbXBvbmVudHMgaXMgZGVwcmVjYXRlZCBhbmQgaXMgcmVtb3ZlZCBiZWhpbmQgYSBmbGFnLlxuICAgIC8vIFdoZXRoZXIgb3Igbm90IGl0IHdvdWxkIGNyYXNoIGxhdGVyLCB3ZSB3YW50IHRvIHNob3cgYSBnb29kIG1lc3NhZ2UgaW4gREVWIGZpcnN0LlxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZS5yZW5kZXIgPT09ICdmdW5jdGlvbicgJiYgdmFsdWUuJCR0eXBlb2YgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIF9jb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKENvbXBvbmVudCkgfHwgJ1Vua25vd24nO1xuXG4gICAgICBpZiAoIWRpZFdhcm5BYm91dE1vZHVsZVBhdHRlcm5Db21wb25lbnRbX2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgIGVycm9yKCdUaGUgPCVzIC8+IGNvbXBvbmVudCBhcHBlYXJzIHRvIGJlIGEgZnVuY3Rpb24gY29tcG9uZW50IHRoYXQgcmV0dXJucyBhIGNsYXNzIGluc3RhbmNlLiAnICsgJ0NoYW5nZSAlcyB0byBhIGNsYXNzIHRoYXQgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQgaW5zdGVhZC4gJyArIFwiSWYgeW91IGNhbid0IHVzZSBhIGNsYXNzIHRyeSBhc3NpZ25pbmcgdGhlIHByb3RvdHlwZSBvbiB0aGUgZnVuY3Rpb24gYXMgYSB3b3JrYXJvdW5kLiBcIiArIFwiYCVzLnByb3RvdHlwZSA9IFJlYWN0LkNvbXBvbmVudC5wcm90b3R5cGVgLiBEb24ndCB1c2UgYW4gYXJyb3cgZnVuY3Rpb24gc2luY2UgaXQgXCIgKyAnY2Fubm90IGJlIGNhbGxlZCB3aXRoIGBuZXdgIGJ5IFJlYWN0LicsIF9jb21wb25lbnROYW1lLCBfY29tcG9uZW50TmFtZSwgX2NvbXBvbmVudE5hbWUpO1xuXG4gICAgICAgIGRpZFdhcm5BYm91dE1vZHVsZVBhdHRlcm5Db21wb25lbnRbX2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoIC8vIFJ1biB0aGVzZSBjaGVja3MgaW4gcHJvZHVjdGlvbiBvbmx5IGlmIHRoZSBmbGFnIGlzIG9mZi5cbiAgLy8gRXZlbnR1YWxseSB3ZSdsbCBkZWxldGUgdGhpcyBicmFuY2ggYWx0b2dldGhlci5cbiAgIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlLnJlbmRlciA9PT0gJ2Z1bmN0aW9uJyAmJiB2YWx1ZS4kJHR5cGVvZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAge1xuICAgICAgdmFyIF9jb21wb25lbnROYW1lMiA9IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShDb21wb25lbnQpIHx8ICdVbmtub3duJztcblxuICAgICAgaWYgKCFkaWRXYXJuQWJvdXRNb2R1bGVQYXR0ZXJuQ29tcG9uZW50W19jb21wb25lbnROYW1lMl0pIHtcbiAgICAgICAgZXJyb3IoJ1RoZSA8JXMgLz4gY29tcG9uZW50IGFwcGVhcnMgdG8gYmUgYSBmdW5jdGlvbiBjb21wb25lbnQgdGhhdCByZXR1cm5zIGEgY2xhc3MgaW5zdGFuY2UuICcgKyAnQ2hhbmdlICVzIHRvIGEgY2xhc3MgdGhhdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCBpbnN0ZWFkLiAnICsgXCJJZiB5b3UgY2FuJ3QgdXNlIGEgY2xhc3MgdHJ5IGFzc2lnbmluZyB0aGUgcHJvdG90eXBlIG9uIHRoZSBmdW5jdGlvbiBhcyBhIHdvcmthcm91bmQuIFwiICsgXCJgJXMucHJvdG90eXBlID0gUmVhY3QuQ29tcG9uZW50LnByb3RvdHlwZWAuIERvbid0IHVzZSBhbiBhcnJvdyBmdW5jdGlvbiBzaW5jZSBpdCBcIiArICdjYW5ub3QgYmUgY2FsbGVkIHdpdGggYG5ld2AgYnkgUmVhY3QuJywgX2NvbXBvbmVudE5hbWUyLCBfY29tcG9uZW50TmFtZTIsIF9jb21wb25lbnROYW1lMik7XG5cbiAgICAgICAgZGlkV2FybkFib3V0TW9kdWxlUGF0dGVybkNvbXBvbmVudFtfY29tcG9uZW50TmFtZTJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IC8vIFByb2NlZWQgdW5kZXIgdGhlIGFzc3VtcHRpb24gdGhhdCB0aGlzIGlzIGEgY2xhc3MgaW5zdGFuY2VcblxuXG4gICAgd29ya0luUHJvZ3Jlc3MudGFnID0gQ2xhc3NDb21wb25lbnQ7IC8vIFRocm93IG91dCBhbnkgaG9va3MgdGhhdCB3ZXJlIHVzZWQuXG5cbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IG51bGw7IC8vIFB1c2ggY29udGV4dCBwcm92aWRlcnMgZWFybHkgdG8gcHJldmVudCBjb250ZXh0IHN0YWNrIG1pc21hdGNoZXMuXG4gICAgLy8gRHVyaW5nIG1vdW50aW5nIHdlIGRvbid0IGtub3cgdGhlIGNoaWxkIGNvbnRleHQgeWV0IGFzIHRoZSBpbnN0YW5jZSBkb2Vzbid0IGV4aXN0LlxuICAgIC8vIFdlIHdpbGwgaW52YWxpZGF0ZSB0aGUgY2hpbGQgY29udGV4dCBpbiBmaW5pc2hDbGFzc0NvbXBvbmVudCgpIHJpZ2h0IGFmdGVyIHJlbmRlcmluZy5cblxuICAgIHZhciBoYXNDb250ZXh0ID0gZmFsc2U7XG5cbiAgICBpZiAoaXNDb250ZXh0UHJvdmlkZXIoQ29tcG9uZW50KSkge1xuICAgICAgaGFzQ29udGV4dCA9IHRydWU7XG4gICAgICBwdXNoQ29udGV4dFByb3ZpZGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFzQ29udGV4dCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSB2YWx1ZS5zdGF0ZSAhPT0gbnVsbCAmJiB2YWx1ZS5zdGF0ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUuc3RhdGUgOiBudWxsO1xuICAgIGluaXRpYWxpemVVcGRhdGVRdWV1ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgYWRvcHRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCB2YWx1ZSk7XG4gICAgbW91bnRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHByb3BzLCByZW5kZXJMYW5lcyk7XG4gICAgcmV0dXJuIGZpbmlzaENsYXNzQ29tcG9uZW50KG51bGwsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHRydWUsIGhhc0NvbnRleHQsIHJlbmRlckxhbmVzKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBQcm9jZWVkIHVuZGVyIHRoZSBhc3N1bXB0aW9uIHRoYXQgdGhpcyBpcyBhIGZ1bmN0aW9uIGNvbXBvbmVudFxuICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IEZ1bmN0aW9uQ29tcG9uZW50O1xuXG4gICAge1xuXG4gICAgICBpZiAoIHdvcmtJblByb2dyZXNzLm1vZGUgJiBTdHJpY3RMZWdhY3lNb2RlKSB7XG4gICAgICAgIHNldElzU3RyaWN0TW9kZUZvckRldnRvb2xzKHRydWUpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdmFsdWUgPSByZW5kZXJXaXRoSG9va3MobnVsbCwgd29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCwgcHJvcHMsIGNvbnRleHQsIHJlbmRlckxhbmVzKTtcbiAgICAgICAgICBoYXNJZCA9IGNoZWNrRGlkUmVuZGVySWRIb29rKCk7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgc2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMoZmFsc2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGdldElzSHlkcmF0aW5nKCkgJiYgaGFzSWQpIHtcbiAgICAgIHB1c2hNYXRlcmlhbGl6ZWRUcmVlSWQod29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIHJlY29uY2lsZUNoaWxkcmVuKG51bGwsIHdvcmtJblByb2dyZXNzLCB2YWx1ZSwgcmVuZGVyTGFuZXMpO1xuXG4gICAge1xuICAgICAgdmFsaWRhdGVGdW5jdGlvbkNvbXBvbmVudEluRGV2KHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQpO1xuICAgIH1cblxuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUZ1bmN0aW9uQ29tcG9uZW50SW5EZXYod29ya0luUHJvZ3Jlc3MsIENvbXBvbmVudCkge1xuICB7XG4gICAgaWYgKENvbXBvbmVudCkge1xuICAgICAgaWYgKENvbXBvbmVudC5jaGlsZENvbnRleHRUeXBlcykge1xuICAgICAgICBlcnJvcignJXMoLi4uKTogY2hpbGRDb250ZXh0VHlwZXMgY2Fubm90IGJlIGRlZmluZWQgb24gYSBmdW5jdGlvbiBjb21wb25lbnQuJywgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAod29ya0luUHJvZ3Jlc3MucmVmICE9PSBudWxsKSB7XG4gICAgICB2YXIgaW5mbyA9ICcnO1xuICAgICAgdmFyIG93bmVyTmFtZSA9IGdldEN1cnJlbnRGaWJlck93bmVyTmFtZUluRGV2T3JOdWxsKCk7XG5cbiAgICAgIGlmIChvd25lck5hbWUpIHtcbiAgICAgICAgaW5mbyArPSAnXFxuXFxuQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgYCcgKyBvd25lck5hbWUgKyAnYC4nO1xuICAgICAgfVxuXG4gICAgICB2YXIgd2FybmluZ0tleSA9IG93bmVyTmFtZSB8fCAnJztcbiAgICAgIHZhciBkZWJ1Z1NvdXJjZSA9IHdvcmtJblByb2dyZXNzLl9kZWJ1Z1NvdXJjZTtcblxuICAgICAgaWYgKGRlYnVnU291cmNlKSB7XG4gICAgICAgIHdhcm5pbmdLZXkgPSBkZWJ1Z1NvdXJjZS5maWxlTmFtZSArICc6JyArIGRlYnVnU291cmNlLmxpbmVOdW1iZXI7XG4gICAgICB9XG5cbiAgICAgIGlmICghZGlkV2FybkFib3V0RnVuY3Rpb25SZWZzW3dhcm5pbmdLZXldKSB7XG4gICAgICAgIGRpZFdhcm5BYm91dEZ1bmN0aW9uUmVmc1t3YXJuaW5nS2V5XSA9IHRydWU7XG5cbiAgICAgICAgZXJyb3IoJ0Z1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IGJlIGdpdmVuIHJlZnMuICcgKyAnQXR0ZW1wdHMgdG8gYWNjZXNzIHRoaXMgcmVmIHdpbGwgZmFpbC4gJyArICdEaWQgeW91IG1lYW4gdG8gdXNlIFJlYWN0LmZvcndhcmRSZWYoKT8lcycsIGluZm8pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICggQ29tcG9uZW50LmRlZmF1bHRQcm9wcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShDb21wb25lbnQpIHx8ICdVbmtub3duJztcblxuICAgICAgaWYgKCFkaWRXYXJuQWJvdXREZWZhdWx0UHJvcHNPbkZ1bmN0aW9uQ29tcG9uZW50W2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgIGVycm9yKCclczogU3VwcG9ydCBmb3IgZGVmYXVsdFByb3BzIHdpbGwgYmUgcmVtb3ZlZCBmcm9tIGZ1bmN0aW9uIGNvbXBvbmVudHMgJyArICdpbiBhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiBVc2UgSmF2YVNjcmlwdCBkZWZhdWx0IHBhcmFtZXRlcnMgaW5zdGVhZC4nLCBjb21wb25lbnROYW1lKTtcblxuICAgICAgICBkaWRXYXJuQWJvdXREZWZhdWx0UHJvcHNPbkZ1bmN0aW9uQ29tcG9uZW50W2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIENvbXBvbmVudC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciBfY29tcG9uZW50TmFtZTMgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoQ29tcG9uZW50KSB8fCAnVW5rbm93bic7XG5cbiAgICAgIGlmICghZGlkV2FybkFib3V0R2V0RGVyaXZlZFN0YXRlT25GdW5jdGlvbkNvbXBvbmVudFtfY29tcG9uZW50TmFtZTNdKSB7XG4gICAgICAgIGVycm9yKCclczogRnVuY3Rpb24gY29tcG9uZW50cyBkbyBub3Qgc3VwcG9ydCBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuJywgX2NvbXBvbmVudE5hbWUzKTtcblxuICAgICAgICBkaWRXYXJuQWJvdXRHZXREZXJpdmVkU3RhdGVPbkZ1bmN0aW9uQ29tcG9uZW50W19jb21wb25lbnROYW1lM10gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgQ29tcG9uZW50LmNvbnRleHRUeXBlID09PSAnb2JqZWN0JyAmJiBDb21wb25lbnQuY29udGV4dFR5cGUgIT09IG51bGwpIHtcbiAgICAgIHZhciBfY29tcG9uZW50TmFtZTQgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoQ29tcG9uZW50KSB8fCAnVW5rbm93bic7XG5cbiAgICAgIGlmICghZGlkV2FybkFib3V0Q29udGV4dFR5cGVPbkZ1bmN0aW9uQ29tcG9uZW50W19jb21wb25lbnROYW1lNF0pIHtcbiAgICAgICAgZXJyb3IoJyVzOiBGdW5jdGlvbiBjb21wb25lbnRzIGRvIG5vdCBzdXBwb3J0IGNvbnRleHRUeXBlLicsIF9jb21wb25lbnROYW1lNCk7XG5cbiAgICAgICAgZGlkV2FybkFib3V0Q29udGV4dFR5cGVPbkZ1bmN0aW9uQ29tcG9uZW50W19jb21wb25lbnROYW1lNF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgU1VTUEVOREVEX01BUktFUiA9IHtcbiAgZGVoeWRyYXRlZDogbnVsbCxcbiAgdHJlZUNvbnRleHQ6IG51bGwsXG4gIHJldHJ5TGFuZTogTm9MYW5lXG59O1xuXG5mdW5jdGlvbiBtb3VudFN1c3BlbnNlT2Zmc2NyZWVuU3RhdGUocmVuZGVyTGFuZXMpIHtcbiAgcmV0dXJuIHtcbiAgICBiYXNlTGFuZXM6IHJlbmRlckxhbmVzLFxuICAgIGNhY2hlUG9vbDogZ2V0U3VzcGVuZGVkQ2FjaGUoKSxcbiAgICB0cmFuc2l0aW9uczogbnVsbFxuICB9O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHByZXZPZmZzY3JlZW5TdGF0ZSwgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIGNhY2hlUG9vbCA9IG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBiYXNlTGFuZXM6IG1lcmdlTGFuZXMocHJldk9mZnNjcmVlblN0YXRlLmJhc2VMYW5lcywgcmVuZGVyTGFuZXMpLFxuICAgIGNhY2hlUG9vbDogY2FjaGVQb29sLFxuICAgIHRyYW5zaXRpb25zOiBwcmV2T2Zmc2NyZWVuU3RhdGUudHJhbnNpdGlvbnNcbiAgfTtcbn0gLy8gVE9ETzogUHJvYmFibHkgc2hvdWxkIGlubGluZSB0aGlzIGJhY2tcblxuXG5mdW5jdGlvbiBzaG91bGRSZW1haW5PbkZhbGxiYWNrKHN1c3BlbnNlQ29udGV4dCwgY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIC8vIElmIHdlJ3JlIGFscmVhZHkgc2hvd2luZyBhIGZhbGxiYWNrLCB0aGVyZSBhcmUgY2FzZXMgd2hlcmUgd2UgbmVlZCB0b1xuICAvLyByZW1haW4gb24gdGhhdCBmYWxsYmFjayByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlIGNvbnRlbnQgaGFzIHJlc29sdmVkLlxuICAvLyBGb3IgZXhhbXBsZSwgU3VzcGVuc2VMaXN0IGNvb3JkaW5hdGVzIHdoZW4gbmVzdGVkIGNvbnRlbnQgYXBwZWFycy5cbiAgaWYgKGN1cnJlbnQgIT09IG51bGwpIHtcbiAgICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcblxuICAgIGlmIChzdXNwZW5zZVN0YXRlID09PSBudWxsKSB7XG4gICAgICAvLyBDdXJyZW50bHkgc2hvd2luZyBjb250ZW50LiBEb24ndCBoaWRlIGl0LCBldmVuIGlmIEZvcmNlU3VzcGVuc2VGYWxsYmFja1xuICAgICAgLy8gaXMgdHJ1ZS4gTW9yZSBwcmVjaXNlIG5hbWUgbWlnaHQgYmUgXCJGb3JjZVJlbWFpblN1c3BlbnNlRmFsbGJhY2tcIi5cbiAgICAgIC8vIE5vdGU6IFRoaXMgaXMgYSBmYWN0b3Jpbmcgc21lbGwuIENhbid0IHJlbWFpbiBvbiBhIGZhbGxiYWNrIGlmIHRoZXJlJ3NcbiAgICAgIC8vIG5vIGZhbGxiYWNrIHRvIHJlbWFpbiBvbi5cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH0gLy8gTm90IGN1cnJlbnRseSBzaG93aW5nIGNvbnRlbnQuIENvbnN1bHQgdGhlIFN1c3BlbnNlIGNvbnRleHQuXG5cblxuICByZXR1cm4gaGFzU3VzcGVuc2VDb250ZXh0KHN1c3BlbnNlQ29udGV4dCwgRm9yY2VTdXNwZW5zZUZhbGxiYWNrKTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUoY3VycmVudCwgcmVuZGVyTGFuZXMpIHtcbiAgLy8gVE9ETzogU2hvdWxkIG5vdCByZW1vdmUgcmVuZGVyIGxhbmVzIHRoYXQgd2VyZSBwaW5nZWQgZHVyaW5nIHRoaXMgcmVuZGVyXG4gIHJldHVybiByZW1vdmVMYW5lcyhjdXJyZW50LmNoaWxkTGFuZXMsIHJlbmRlckxhbmVzKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU3VzcGVuc2VDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIHZhciBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7IC8vIFRoaXMgaXMgdXNlZCBieSBEZXZUb29scyB0byBmb3JjZSBhIGJvdW5kYXJ5IHRvIHN1c3BlbmQuXG5cbiAge1xuICAgIGlmIChzaG91bGRTdXNwZW5kKHdvcmtJblByb2dyZXNzKSkge1xuICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gRGlkQ2FwdHVyZTtcbiAgICB9XG4gIH1cblxuICB2YXIgc3VzcGVuc2VDb250ZXh0ID0gc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50O1xuICB2YXIgc2hvd0ZhbGxiYWNrID0gZmFsc2U7XG4gIHZhciBkaWRTdXNwZW5kID0gKHdvcmtJblByb2dyZXNzLmZsYWdzICYgRGlkQ2FwdHVyZSkgIT09IE5vRmxhZ3M7XG5cbiAgaWYgKGRpZFN1c3BlbmQgfHwgc2hvdWxkUmVtYWluT25GYWxsYmFjayhzdXNwZW5zZUNvbnRleHQsIGN1cnJlbnQpKSB7XG4gICAgLy8gU29tZXRoaW5nIGluIHRoaXMgYm91bmRhcnkncyBzdWJ0cmVlIGFscmVhZHkgc3VzcGVuZGVkLiBTd2l0Y2ggdG9cbiAgICAvLyByZW5kZXJpbmcgdGhlIGZhbGxiYWNrIGNoaWxkcmVuLlxuICAgIHNob3dGYWxsYmFjayA9IHRydWU7XG4gICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gfkRpZENhcHR1cmU7XG4gIH0gZWxzZSB7XG4gICAgLy8gQXR0ZW1wdGluZyB0aGUgbWFpbiBjb250ZW50XG4gICAgaWYgKGN1cnJlbnQgPT09IG51bGwgfHwgY3VycmVudC5tZW1vaXplZFN0YXRlICE9PSBudWxsKSB7XG4gICAgICAvLyBUaGlzIGlzIGEgbmV3IG1vdW50IG9yIHRoaXMgYm91bmRhcnkgaXMgYWxyZWFkeSBzaG93aW5nIGEgZmFsbGJhY2sgc3RhdGUuXG4gICAgICAvLyBNYXJrIHRoaXMgc3VidHJlZSBjb250ZXh0IGFzIGhhdmluZyBhdCBsZWFzdCBvbmUgaW52aXNpYmxlIHBhcmVudCB0aGF0IGNvdWxkXG4gICAgICAvLyBoYW5kbGUgdGhlIGZhbGxiYWNrIHN0YXRlLlxuICAgICAgLy8gQXZvaWRlZCBib3VuZGFyaWVzIGFyZSBub3QgY29uc2lkZXJlZCBzaW5jZSB0aGV5IGNhbm5vdCBoYW5kbGUgcHJlZmVycmVkIGZhbGxiYWNrIHN0YXRlcy5cbiAgICAgIHtcbiAgICAgICAgc3VzcGVuc2VDb250ZXh0ID0gYWRkU3VidHJlZVN1c3BlbnNlQ29udGV4dChzdXNwZW5zZUNvbnRleHQsIEludmlzaWJsZVBhcmVudFN1c3BlbnNlQ29udGV4dCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc3VzcGVuc2VDb250ZXh0ID0gc2V0RGVmYXVsdFNoYWxsb3dTdXNwZW5zZUNvbnRleHQoc3VzcGVuc2VDb250ZXh0KTtcbiAgcHVzaFN1c3BlbnNlQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgc3VzcGVuc2VDb250ZXh0KTsgLy8gT0ssIHRoZSBuZXh0IHBhcnQgaXMgY29uZnVzaW5nLiBXZSdyZSBhYm91dCB0byByZWNvbmNpbGUgdGhlIFN1c3BlbnNlXG4gIC8vIGJvdW5kYXJ5J3MgY2hpbGRyZW4uIFRoaXMgaW52b2x2ZXMgc29tZSBjdXN0b20gcmVjb25jaWxpYXRpb24gbG9naWMuIFR3b1xuICAvLyBtYWluIHJlYXNvbnMgdGhpcyBpcyBzbyBjb21wbGljYXRlZC5cbiAgLy9cbiAgLy8gRmlyc3QsIExlZ2FjeSBNb2RlIGhhcyBkaWZmZXJlbnQgc2VtYW50aWNzIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eS4gVGhlXG4gIC8vIHByaW1hcnkgdHJlZSB3aWxsIGNvbW1pdCBpbiBhbiBpbmNvbnNpc3RlbnQgc3RhdGUsIHNvIHdoZW4gd2UgZG8gdGhlXG4gIC8vIHNlY29uZCBwYXNzIHRvIHJlbmRlciB0aGUgZmFsbGJhY2ssIHdlIGRvIHNvbWUgZXhjZWVkaW5nbHksIHVoLCBjbGV2ZXJcbiAgLy8gaGFja3MgdG8gbWFrZSB0aGF0IG5vdCB0b3RhbGx5IGJyZWFrLiBMaWtlIHRyYW5zZmVycmluZyBlZmZlY3RzIGFuZFxuICAvLyBkZWxldGlvbnMgZnJvbSBoaWRkZW4gdHJlZS4gSW4gQ29uY3VycmVudCBNb2RlLCBpdCdzIG11Y2ggc2ltcGxlcixcbiAgLy8gYmVjYXVzZSB3ZSBiYWlsb3V0IG9uIHRoZSBwcmltYXJ5IHRyZWUgY29tcGxldGVseSBhbmQgbGVhdmUgaXQgaW4gaXRzIG9sZFxuICAvLyBzdGF0ZSwgbm8gZWZmZWN0cy4gU2FtZSBhcyB3aGF0IHdlIGRvIGZvciBPZmZzY3JlZW4gKGV4Y2VwdCB0aGF0XG4gIC8vIE9mZnNjcmVlbiBkb2Vzbid0IGhhdmUgdGhlIGZpcnN0IHJlbmRlciBwYXNzKS5cbiAgLy9cbiAgLy8gU2Vjb25kIGlzIGh5ZHJhdGlvbi4gRHVyaW5nIGh5ZHJhdGlvbiwgdGhlIFN1c3BlbnNlIGZpYmVyIGhhcyBhIHNsaWdodGx5XG4gIC8vIGRpZmZlcmVudCBsYXlvdXQsIHdoZXJlIHRoZSBjaGlsZCBwb2ludHMgdG8gYSBkZWh5ZHJhdGVkIGZyYWdtZW50LCB3aGljaFxuICAvLyBjb250YWlucyB0aGUgRE9NIHJlbmRlcmVkIGJ5IHRoZSBzZXJ2ZXIuXG4gIC8vXG4gIC8vIFRoaXJkLCBldmVuIGlmIHlvdSBzZXQgYWxsIHRoYXQgYXNpZGUsIFN1c3BlbnNlIGlzIGxpa2UgZXJyb3IgYm91bmRhcmllcyBpblxuICAvLyB0aGF0IHdlIGZpcnN0IHdlIHRyeSB0byByZW5kZXIgb25lIHRyZWUsIGFuZCBpZiB0aGF0IGZhaWxzLCB3ZSByZW5kZXIgYWdhaW5cbiAgLy8gYW5kIHN3aXRjaCB0byBhIGRpZmZlcmVudCB0cmVlLiBMaWtlIGEgdHJ5L2NhdGNoIGJsb2NrLiBTbyB3ZSBoYXZlIHRvIHRyYWNrXG4gIC8vIHdoaWNoIGJyYW5jaCB3ZSdyZSBjdXJyZW50bHkgcmVuZGVyaW5nLiBJZGVhbGx5IHdlIHdvdWxkIG1vZGVsIHRoaXMgdXNpbmdcbiAgLy8gYSBzdGFjay5cblxuICBpZiAoY3VycmVudCA9PT0gbnVsbCkge1xuICAgIC8vIEluaXRpYWwgbW91bnRcbiAgICAvLyBTcGVjaWFsIHBhdGggZm9yIGh5ZHJhdGlvblxuICAgIC8vIElmIHdlJ3JlIGN1cnJlbnRseSBoeWRyYXRpbmcsIHRyeSB0byBoeWRyYXRlIHRoaXMgYm91bmRhcnkuXG4gICAgdHJ5VG9DbGFpbU5leHRIeWRyYXRhYmxlSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MpOyAvLyBUaGlzIGNvdWxkJ3ZlIGJlZW4gYSBkZWh5ZHJhdGVkIHN1c3BlbnNlIGNvbXBvbmVudC5cblxuICAgIHZhciBzdXNwZW5zZVN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcblxuICAgIGlmIChzdXNwZW5zZVN0YXRlICE9PSBudWxsKSB7XG4gICAgICB2YXIgZGVoeWRyYXRlZCA9IHN1c3BlbnNlU3RhdGUuZGVoeWRyYXRlZDtcblxuICAgICAgaWYgKGRlaHlkcmF0ZWQgIT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG1vdW50RGVoeWRyYXRlZFN1c3BlbnNlQ29tcG9uZW50KHdvcmtJblByb2dyZXNzLCBkZWh5ZHJhdGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbmV4dFByaW1hcnlDaGlsZHJlbiA9IG5leHRQcm9wcy5jaGlsZHJlbjtcbiAgICB2YXIgbmV4dEZhbGxiYWNrQ2hpbGRyZW4gPSBuZXh0UHJvcHMuZmFsbGJhY2s7XG5cbiAgICBpZiAoc2hvd0ZhbGxiYWNrKSB7XG4gICAgICB2YXIgZmFsbGJhY2tGcmFnbWVudCA9IG1vdW50U3VzcGVuc2VGYWxsYmFja0NoaWxkcmVuKHdvcmtJblByb2dyZXNzLCBuZXh0UHJpbWFyeUNoaWxkcmVuLCBuZXh0RmFsbGJhY2tDaGlsZHJlbiwgcmVuZGVyTGFuZXMpO1xuICAgICAgdmFyIHByaW1hcnlDaGlsZEZyYWdtZW50ID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICBwcmltYXJ5Q2hpbGRGcmFnbWVudC5tZW1vaXplZFN0YXRlID0gbW91bnRTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHJlbmRlckxhbmVzKTtcbiAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBTVVNQRU5ERURfTUFSS0VSO1xuXG4gICAgICByZXR1cm4gZmFsbGJhY2tGcmFnbWVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1vdW50U3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4od29ya0luUHJvZ3Jlc3MsIG5leHRQcmltYXJ5Q2hpbGRyZW4pO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBUaGlzIGlzIGFuIHVwZGF0ZS5cbiAgICAvLyBTcGVjaWFsIHBhdGggZm9yIGh5ZHJhdGlvblxuICAgIHZhciBwcmV2U3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG5cbiAgICBpZiAocHJldlN0YXRlICE9PSBudWxsKSB7XG4gICAgICB2YXIgX2RlaHlkcmF0ZWQgPSBwcmV2U3RhdGUuZGVoeWRyYXRlZDtcblxuICAgICAgaWYgKF9kZWh5ZHJhdGVkICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB1cGRhdGVEZWh5ZHJhdGVkU3VzcGVuc2VDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIGRpZFN1c3BlbmQsIG5leHRQcm9wcywgX2RlaHlkcmF0ZWQsIHByZXZTdGF0ZSwgcmVuZGVyTGFuZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzaG93RmFsbGJhY2spIHtcbiAgICAgIHZhciBfbmV4dEZhbGxiYWNrQ2hpbGRyZW4gPSBuZXh0UHJvcHMuZmFsbGJhY2s7XG4gICAgICB2YXIgX25leHRQcmltYXJ5Q2hpbGRyZW4gPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gICAgICB2YXIgZmFsbGJhY2tDaGlsZEZyYWdtZW50ID0gdXBkYXRlU3VzcGVuc2VGYWxsYmFja0NoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBfbmV4dFByaW1hcnlDaGlsZHJlbiwgX25leHRGYWxsYmFja0NoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gICAgICB2YXIgX3ByaW1hcnlDaGlsZEZyYWdtZW50MiA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgdmFyIHByZXZPZmZzY3JlZW5TdGF0ZSA9IGN1cnJlbnQuY2hpbGQubWVtb2l6ZWRTdGF0ZTtcbiAgICAgIF9wcmltYXJ5Q2hpbGRGcmFnbWVudDIubWVtb2l6ZWRTdGF0ZSA9IHByZXZPZmZzY3JlZW5TdGF0ZSA9PT0gbnVsbCA/IG1vdW50U3VzcGVuc2VPZmZzY3JlZW5TdGF0ZShyZW5kZXJMYW5lcykgOiB1cGRhdGVTdXNwZW5zZU9mZnNjcmVlblN0YXRlKHByZXZPZmZzY3JlZW5TdGF0ZSwgcmVuZGVyTGFuZXMpO1xuXG4gICAgICBfcHJpbWFyeUNoaWxkRnJhZ21lbnQyLmNoaWxkTGFuZXMgPSBnZXRSZW1haW5pbmdXb3JrSW5QcmltYXJ5VHJlZShjdXJyZW50LCByZW5kZXJMYW5lcyk7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gU1VTUEVOREVEX01BUktFUjtcbiAgICAgIHJldHVybiBmYWxsYmFja0NoaWxkRnJhZ21lbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfbmV4dFByaW1hcnlDaGlsZHJlbjIgPSBuZXh0UHJvcHMuY2hpbGRyZW47XG5cbiAgICAgIHZhciBfcHJpbWFyeUNoaWxkRnJhZ21lbnQzID0gdXBkYXRlU3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIF9uZXh0UHJpbWFyeUNoaWxkcmVuMiwgcmVuZGVyTGFuZXMpO1xuXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBfcHJpbWFyeUNoaWxkRnJhZ21lbnQzO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKHdvcmtJblByb2dyZXNzLCBwcmltYXJ5Q2hpbGRyZW4sIHJlbmRlckxhbmVzKSB7XG4gIHZhciBtb2RlID0gd29ya0luUHJvZ3Jlc3MubW9kZTtcbiAgdmFyIHByaW1hcnlDaGlsZFByb3BzID0ge1xuICAgIG1vZGU6ICd2aXNpYmxlJyxcbiAgICBjaGlsZHJlbjogcHJpbWFyeUNoaWxkcmVuXG4gIH07XG4gIHZhciBwcmltYXJ5Q2hpbGRGcmFnbWVudCA9IG1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlcihwcmltYXJ5Q2hpbGRQcm9wcywgbW9kZSk7XG4gIHByaW1hcnlDaGlsZEZyYWdtZW50LnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHByaW1hcnlDaGlsZEZyYWdtZW50O1xuICByZXR1cm4gcHJpbWFyeUNoaWxkRnJhZ21lbnQ7XG59XG5cbmZ1bmN0aW9uIG1vdW50U3VzcGVuc2VGYWxsYmFja0NoaWxkcmVuKHdvcmtJblByb2dyZXNzLCBwcmltYXJ5Q2hpbGRyZW4sIGZhbGxiYWNrQ2hpbGRyZW4sIHJlbmRlckxhbmVzKSB7XG4gIHZhciBtb2RlID0gd29ya0luUHJvZ3Jlc3MubW9kZTtcbiAgdmFyIHByb2dyZXNzZWRQcmltYXJ5RnJhZ21lbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgdmFyIHByaW1hcnlDaGlsZFByb3BzID0ge1xuICAgIG1vZGU6ICdoaWRkZW4nLFxuICAgIGNoaWxkcmVuOiBwcmltYXJ5Q2hpbGRyZW5cbiAgfTtcbiAgdmFyIHByaW1hcnlDaGlsZEZyYWdtZW50O1xuICB2YXIgZmFsbGJhY2tDaGlsZEZyYWdtZW50O1xuXG4gIGlmICgobW9kZSAmIENvbmN1cnJlbnRNb2RlKSA9PT0gTm9Nb2RlICYmIHByb2dyZXNzZWRQcmltYXJ5RnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAvLyBJbiBsZWdhY3kgbW9kZSwgd2UgY29tbWl0IHRoZSBwcmltYXJ5IHRyZWUgYXMgaWYgaXQgc3VjY2Vzc2Z1bGx5XG4gICAgLy8gY29tcGxldGVkLCBldmVuIHRob3VnaCBpdCdzIGluIGFuIGluY29uc2lzdGVudCBzdGF0ZS5cbiAgICBwcmltYXJ5Q2hpbGRGcmFnbWVudCA9IHByb2dyZXNzZWRQcmltYXJ5RnJhZ21lbnQ7XG4gICAgcHJpbWFyeUNoaWxkRnJhZ21lbnQuY2hpbGRMYW5lcyA9IE5vTGFuZXM7XG4gICAgcHJpbWFyeUNoaWxkRnJhZ21lbnQucGVuZGluZ1Byb3BzID0gcHJpbWFyeUNoaWxkUHJvcHM7XG5cbiAgICBpZiAoIHdvcmtJblByb2dyZXNzLm1vZGUgJiBQcm9maWxlTW9kZSkge1xuICAgICAgLy8gUmVzZXQgdGhlIGR1cmF0aW9ucyBmcm9tIHRoZSBmaXJzdCBwYXNzIHNvIHRoZXkgYXJlbid0IGluY2x1ZGVkIGluIHRoZVxuICAgICAgLy8gZmluYWwgYW1vdW50cy4gVGhpcyBzZWVtcyBjb3VudGVyaW50dWl0aXZlLCBzaW5jZSB3ZSdyZSBpbnRlbnRpb25hbGx5XG4gICAgICAvLyBub3QgbWVhc3VyaW5nIHBhcnQgb2YgdGhlIHJlbmRlciBwaGFzZSwgYnV0IHRoaXMgbWFrZXMgaXQgbWF0Y2ggd2hhdCB3ZVxuICAgICAgLy8gZG8gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgcHJpbWFyeUNoaWxkRnJhZ21lbnQuYWN0dWFsRHVyYXRpb24gPSAwO1xuICAgICAgcHJpbWFyeUNoaWxkRnJhZ21lbnQuYWN0dWFsU3RhcnRUaW1lID0gLTE7XG4gICAgICBwcmltYXJ5Q2hpbGRGcmFnbWVudC5zZWxmQmFzZUR1cmF0aW9uID0gMDtcbiAgICAgIHByaW1hcnlDaGlsZEZyYWdtZW50LnRyZWVCYXNlRHVyYXRpb24gPSAwO1xuICAgIH1cblxuICAgIGZhbGxiYWNrQ2hpbGRGcmFnbWVudCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KGZhbGxiYWNrQ2hpbGRyZW4sIG1vZGUsIHJlbmRlckxhbmVzLCBudWxsKTtcbiAgfSBlbHNlIHtcbiAgICBwcmltYXJ5Q2hpbGRGcmFnbWVudCA9IG1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlcihwcmltYXJ5Q2hpbGRQcm9wcywgbW9kZSk7XG4gICAgZmFsbGJhY2tDaGlsZEZyYWdtZW50ID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoZmFsbGJhY2tDaGlsZHJlbiwgbW9kZSwgcmVuZGVyTGFuZXMsIG51bGwpO1xuICB9XG5cbiAgcHJpbWFyeUNoaWxkRnJhZ21lbnQucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gIGZhbGxiYWNrQ2hpbGRGcmFnbWVudC5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgcHJpbWFyeUNoaWxkRnJhZ21lbnQuc2libGluZyA9IGZhbGxiYWNrQ2hpbGRGcmFnbWVudDtcbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBwcmltYXJ5Q2hpbGRGcmFnbWVudDtcbiAgcmV0dXJuIGZhbGxiYWNrQ2hpbGRGcmFnbWVudDtcbn1cblxuZnVuY3Rpb24gbW91bnRXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKG9mZnNjcmVlblByb3BzLCBtb2RlLCByZW5kZXJMYW5lcykge1xuICAvLyBUaGUgcHJvcHMgYXJndW1lbnQgdG8gYGNyZWF0ZUZpYmVyRnJvbU9mZnNjcmVlbmAgaXMgYGFueWAgdHlwZWQsIHNvIHdlIHVzZVxuICAvLyB0aGlzIHdyYXBwZXIgZnVuY3Rpb24gdG8gY29uc3RyYWluIGl0LlxuICByZXR1cm4gY3JlYXRlRmliZXJGcm9tT2Zmc2NyZWVuKG9mZnNjcmVlblByb3BzLCBtb2RlLCBOb0xhbmVzLCBudWxsKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlV29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlcihjdXJyZW50LCBvZmZzY3JlZW5Qcm9wcykge1xuICAvLyBUaGUgcHJvcHMgYXJndW1lbnQgdG8gYGNyZWF0ZVdvcmtJblByb2dyZXNzYCBpcyBgYW55YCB0eXBlZCwgc28gd2UgdXNlIHRoaXNcbiAgLy8gd3JhcHBlciBmdW5jdGlvbiB0byBjb25zdHJhaW4gaXQuXG4gIHJldHVybiBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhjdXJyZW50LCBvZmZzY3JlZW5Qcm9wcyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBwcmltYXJ5Q2hpbGRyZW4sIHJlbmRlckxhbmVzKSB7XG4gIHZhciBjdXJyZW50UHJpbWFyeUNoaWxkRnJhZ21lbnQgPSBjdXJyZW50LmNoaWxkO1xuICB2YXIgY3VycmVudEZhbGxiYWNrQ2hpbGRGcmFnbWVudCA9IGN1cnJlbnRQcmltYXJ5Q2hpbGRGcmFnbWVudC5zaWJsaW5nO1xuICB2YXIgcHJpbWFyeUNoaWxkRnJhZ21lbnQgPSB1cGRhdGVXb3JrSW5Qcm9ncmVzc09mZnNjcmVlbkZpYmVyKGN1cnJlbnRQcmltYXJ5Q2hpbGRGcmFnbWVudCwge1xuICAgIG1vZGU6ICd2aXNpYmxlJyxcbiAgICBjaGlsZHJlbjogcHJpbWFyeUNoaWxkcmVuXG4gIH0pO1xuXG4gIGlmICgod29ya0luUHJvZ3Jlc3MubW9kZSAmIENvbmN1cnJlbnRNb2RlKSA9PT0gTm9Nb2RlKSB7XG4gICAgcHJpbWFyeUNoaWxkRnJhZ21lbnQubGFuZXMgPSByZW5kZXJMYW5lcztcbiAgfVxuXG4gIHByaW1hcnlDaGlsZEZyYWdtZW50LnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICBwcmltYXJ5Q2hpbGRGcmFnbWVudC5zaWJsaW5nID0gbnVsbDtcblxuICBpZiAoY3VycmVudEZhbGxiYWNrQ2hpbGRGcmFnbWVudCAhPT0gbnVsbCkge1xuICAgIC8vIERlbGV0ZSB0aGUgZmFsbGJhY2sgY2hpbGQgZnJhZ21lbnRcbiAgICB2YXIgZGVsZXRpb25zID0gd29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zO1xuXG4gICAgaWYgKGRlbGV0aW9ucyA9PT0gbnVsbCkge1xuICAgICAgd29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zID0gW2N1cnJlbnRGYWxsYmFja0NoaWxkRnJhZ21lbnRdO1xuICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gQ2hpbGREZWxldGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRpb25zLnB1c2goY3VycmVudEZhbGxiYWNrQ2hpbGRGcmFnbWVudCk7XG4gICAgfVxuICB9XG5cbiAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBwcmltYXJ5Q2hpbGRGcmFnbWVudDtcbiAgcmV0dXJuIHByaW1hcnlDaGlsZEZyYWdtZW50O1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTdXNwZW5zZUZhbGxiYWNrQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHByaW1hcnlDaGlsZHJlbiwgZmFsbGJhY2tDaGlsZHJlbiwgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG1vZGUgPSB3b3JrSW5Qcm9ncmVzcy5tb2RlO1xuICB2YXIgY3VycmVudFByaW1hcnlDaGlsZEZyYWdtZW50ID0gY3VycmVudC5jaGlsZDtcbiAgdmFyIGN1cnJlbnRGYWxsYmFja0NoaWxkRnJhZ21lbnQgPSBjdXJyZW50UHJpbWFyeUNoaWxkRnJhZ21lbnQuc2libGluZztcbiAgdmFyIHByaW1hcnlDaGlsZFByb3BzID0ge1xuICAgIG1vZGU6ICdoaWRkZW4nLFxuICAgIGNoaWxkcmVuOiBwcmltYXJ5Q2hpbGRyZW5cbiAgfTtcbiAgdmFyIHByaW1hcnlDaGlsZEZyYWdtZW50O1xuXG4gIGlmICggLy8gSW4gbGVnYWN5IG1vZGUsIHdlIGNvbW1pdCB0aGUgcHJpbWFyeSB0cmVlIGFzIGlmIGl0IHN1Y2Nlc3NmdWxseVxuICAvLyBjb21wbGV0ZWQsIGV2ZW4gdGhvdWdoIGl0J3MgaW4gYW4gaW5jb25zaXN0ZW50IHN0YXRlLlxuICAobW9kZSAmIENvbmN1cnJlbnRNb2RlKSA9PT0gTm9Nb2RlICYmIC8vIE1ha2Ugc3VyZSB3ZSdyZSBvbiB0aGUgc2Vjb25kIHBhc3MsIGkuZS4gdGhlIHByaW1hcnkgY2hpbGQgZnJhZ21lbnQgd2FzXG4gIC8vIGFscmVhZHkgY2xvbmVkLiBJbiBsZWdhY3kgbW9kZSwgdGhlIG9ubHkgY2FzZSB3aGVyZSB0aGlzIGlzbid0IHRydWUgaXNcbiAgLy8gd2hlbiBEZXZUb29scyBmb3JjZXMgdXMgdG8gZGlzcGxheSBhIGZhbGxiYWNrOyB3ZSBza2lwIHRoZSBmaXJzdCByZW5kZXJcbiAgLy8gcGFzcyBlbnRpcmVseSBhbmQgZ28gc3RyYWlnaHQgdG8gcmVuZGVyaW5nIHRoZSBmYWxsYmFjay4gKEluIENvbmN1cnJlbnRcbiAgLy8gTW9kZSwgU3VzcGVuc2VMaXN0IGNhbiBhbHNvIHRyaWdnZXIgdGhpcyBzY2VuYXJpbywgYnV0IHRoaXMgaXMgYSBsZWdhY3ktXG4gIC8vIG9ubHkgY29kZXBhdGguKVxuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCAhPT0gY3VycmVudFByaW1hcnlDaGlsZEZyYWdtZW50KSB7XG4gICAgdmFyIHByb2dyZXNzZWRQcmltYXJ5RnJhZ21lbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICBwcmltYXJ5Q2hpbGRGcmFnbWVudCA9IHByb2dyZXNzZWRQcmltYXJ5RnJhZ21lbnQ7XG4gICAgcHJpbWFyeUNoaWxkRnJhZ21lbnQuY2hpbGRMYW5lcyA9IE5vTGFuZXM7XG4gICAgcHJpbWFyeUNoaWxkRnJhZ21lbnQucGVuZGluZ1Byb3BzID0gcHJpbWFyeUNoaWxkUHJvcHM7XG5cbiAgICBpZiAoIHdvcmtJblByb2dyZXNzLm1vZGUgJiBQcm9maWxlTW9kZSkge1xuICAgICAgLy8gUmVzZXQgdGhlIGR1cmF0aW9ucyBmcm9tIHRoZSBmaXJzdCBwYXNzIHNvIHRoZXkgYXJlbid0IGluY2x1ZGVkIGluIHRoZVxuICAgICAgLy8gZmluYWwgYW1vdW50cy4gVGhpcyBzZWVtcyBjb3VudGVyaW50dWl0aXZlLCBzaW5jZSB3ZSdyZSBpbnRlbnRpb25hbGx5XG4gICAgICAvLyBub3QgbWVhc3VyaW5nIHBhcnQgb2YgdGhlIHJlbmRlciBwaGFzZSwgYnV0IHRoaXMgbWFrZXMgaXQgbWF0Y2ggd2hhdCB3ZVxuICAgICAgLy8gZG8gaW4gQ29uY3VycmVudCBNb2RlLlxuICAgICAgcHJpbWFyeUNoaWxkRnJhZ21lbnQuYWN0dWFsRHVyYXRpb24gPSAwO1xuICAgICAgcHJpbWFyeUNoaWxkRnJhZ21lbnQuYWN0dWFsU3RhcnRUaW1lID0gLTE7XG4gICAgICBwcmltYXJ5Q2hpbGRGcmFnbWVudC5zZWxmQmFzZUR1cmF0aW9uID0gY3VycmVudFByaW1hcnlDaGlsZEZyYWdtZW50LnNlbGZCYXNlRHVyYXRpb247XG4gICAgICBwcmltYXJ5Q2hpbGRGcmFnbWVudC50cmVlQmFzZUR1cmF0aW9uID0gY3VycmVudFByaW1hcnlDaGlsZEZyYWdtZW50LnRyZWVCYXNlRHVyYXRpb247XG4gICAgfSAvLyBUaGUgZmFsbGJhY2sgZmliZXIgd2FzIGFkZGVkIGFzIGEgZGVsZXRpb24gZHVyaW5nIHRoZSBmaXJzdCBwYXNzLlxuICAgIC8vIEhvd2V2ZXIsIHNpbmNlIHdlJ3JlIGdvaW5nIHRvIHJlbWFpbiBvbiB0aGUgZmFsbGJhY2ssIHdlIG5vIGxvbmdlciB3YW50XG4gICAgLy8gdG8gZGVsZXRlIGl0LlxuXG5cbiAgICB3b3JrSW5Qcm9ncmVzcy5kZWxldGlvbnMgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHByaW1hcnlDaGlsZEZyYWdtZW50ID0gdXBkYXRlV29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlcihjdXJyZW50UHJpbWFyeUNoaWxkRnJhZ21lbnQsIHByaW1hcnlDaGlsZFByb3BzKTsgLy8gU2luY2Ugd2UncmUgcmV1c2luZyBhIGN1cnJlbnQgdHJlZSwgd2UgbmVlZCB0byByZXVzZSB0aGUgZmxhZ3MsIHRvby5cbiAgICAvLyAoV2UgZG9uJ3QgZG8gdGhpcyBpbiBsZWdhY3kgbW9kZSwgYmVjYXVzZSBpbiBsZWdhY3kgbW9kZSB3ZSBkb24ndCByZS11c2VcbiAgICAvLyB0aGUgY3VycmVudCB0cmVlOyBzZWUgcHJldmlvdXMgYnJhbmNoLilcblxuICAgIHByaW1hcnlDaGlsZEZyYWdtZW50LnN1YnRyZWVGbGFncyA9IGN1cnJlbnRQcmltYXJ5Q2hpbGRGcmFnbWVudC5zdWJ0cmVlRmxhZ3MgJiBTdGF0aWNNYXNrO1xuICB9XG5cbiAgdmFyIGZhbGxiYWNrQ2hpbGRGcmFnbWVudDtcblxuICBpZiAoY3VycmVudEZhbGxiYWNrQ2hpbGRGcmFnbWVudCAhPT0gbnVsbCkge1xuICAgIGZhbGxiYWNrQ2hpbGRGcmFnbWVudCA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKGN1cnJlbnRGYWxsYmFja0NoaWxkRnJhZ21lbnQsIGZhbGxiYWNrQ2hpbGRyZW4pO1xuICB9IGVsc2Uge1xuICAgIGZhbGxiYWNrQ2hpbGRGcmFnbWVudCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KGZhbGxiYWNrQ2hpbGRyZW4sIG1vZGUsIHJlbmRlckxhbmVzLCBudWxsKTsgLy8gTmVlZHMgYSBwbGFjZW1lbnQgZWZmZWN0IGJlY2F1c2UgdGhlIHBhcmVudCAodGhlIFN1c3BlbnNlIGJvdW5kYXJ5KSBhbHJlYWR5XG4gICAgLy8gbW91bnRlZCBidXQgdGhpcyBpcyBhIG5ldyBmaWJlci5cblxuICAgIGZhbGxiYWNrQ2hpbGRGcmFnbWVudC5mbGFncyB8PSBQbGFjZW1lbnQ7XG4gIH1cblxuICBmYWxsYmFja0NoaWxkRnJhZ21lbnQucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gIHByaW1hcnlDaGlsZEZyYWdtZW50LnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICBwcmltYXJ5Q2hpbGRGcmFnbWVudC5zaWJsaW5nID0gZmFsbGJhY2tDaGlsZEZyYWdtZW50O1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHByaW1hcnlDaGlsZEZyYWdtZW50O1xuICByZXR1cm4gZmFsbGJhY2tDaGlsZEZyYWdtZW50O1xufVxuXG5mdW5jdGlvbiByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMsIHJlY292ZXJhYmxlRXJyb3IpIHtcbiAgLy8gRmFsbGluZyBiYWNrIHRvIGNsaWVudCByZW5kZXJpbmcuIEJlY2F1c2UgdGhpcyBoYXMgcGVyZm9ybWFuY2VcbiAgLy8gaW1wbGljYXRpb25zLCBpdCdzIGNvbnNpZGVyZWQgYSByZWNvdmVyYWJsZSBlcnJvciwgZXZlbiB0aG91Z2ggdGhlIHVzZXJcbiAgLy8gbGlrZWx5IHdvbid0IG9ic2VydmUgYW55dGhpbmcgd3Jvbmcgd2l0aCB0aGUgVUkuXG4gIC8vXG4gIC8vIFRoZSBlcnJvciBpcyBwYXNzZWQgaW4gYXMgYW4gYXJndW1lbnQgdG8gZW5mb3JjZSB0aGF0IGV2ZXJ5IGNhbGxlciBwcm92aWRlXG4gIC8vIGEgY3VzdG9tIG1lc3NhZ2UsIG9yIGV4cGxpY2l0bHkgb3B0IG91dCAoY3VycmVudGx5IHRoZSBvbmx5IHBhdGggdGhhdCBvcHRzXG4gIC8vIG91dCBpcyBsZWdhY3kgbW9kZTsgZXZlcnkgY29uY3VycmVudCBwYXRoIHByb3ZpZGVzIGFuIGVycm9yKS5cbiAgaWYgKHJlY292ZXJhYmxlRXJyb3IgIT09IG51bGwpIHtcbiAgICBxdWV1ZUh5ZHJhdGlvbkVycm9yKHJlY292ZXJhYmxlRXJyb3IpO1xuICB9IC8vIFRoaXMgd2lsbCBhZGQgdGhlIG9sZCBmaWJlciB0byB0aGUgZGVsZXRpb24gbGlzdFxuXG5cbiAgcmVjb25jaWxlQ2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQuY2hpbGQsIG51bGwsIHJlbmRlckxhbmVzKTsgLy8gV2UncmUgbm93IG5vdCBzdXNwZW5kZWQgbm9yIGRlaHlkcmF0ZWQuXG5cbiAgdmFyIG5leHRQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgdmFyIHByaW1hcnlDaGlsZHJlbiA9IG5leHRQcm9wcy5jaGlsZHJlbjtcbiAgdmFyIHByaW1hcnlDaGlsZEZyYWdtZW50ID0gbW91bnRTdXNwZW5zZVByaW1hcnlDaGlsZHJlbih3b3JrSW5Qcm9ncmVzcywgcHJpbWFyeUNoaWxkcmVuKTsgLy8gTmVlZHMgYSBwbGFjZW1lbnQgZWZmZWN0IGJlY2F1c2UgdGhlIHBhcmVudCAodGhlIFN1c3BlbnNlIGJvdW5kYXJ5KSBhbHJlYWR5XG4gIC8vIG1vdW50ZWQgYnV0IHRoaXMgaXMgYSBuZXcgZmliZXIuXG5cbiAgcHJpbWFyeUNoaWxkRnJhZ21lbnQuZmxhZ3MgfD0gUGxhY2VtZW50O1xuICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgcmV0dXJuIHByaW1hcnlDaGlsZEZyYWdtZW50O1xufVxuXG5mdW5jdGlvbiBtb3VudFN1c3BlbnNlRmFsbGJhY2tBZnRlclJldHJ5V2l0aG91dEh5ZHJhdGluZyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcHJpbWFyeUNoaWxkcmVuLCBmYWxsYmFja0NoaWxkcmVuLCByZW5kZXJMYW5lcykge1xuICB2YXIgZmliZXJNb2RlID0gd29ya0luUHJvZ3Jlc3MubW9kZTtcbiAgdmFyIHByaW1hcnlDaGlsZFByb3BzID0ge1xuICAgIG1vZGU6ICd2aXNpYmxlJyxcbiAgICBjaGlsZHJlbjogcHJpbWFyeUNoaWxkcmVuXG4gIH07XG4gIHZhciBwcmltYXJ5Q2hpbGRGcmFnbWVudCA9IG1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlcihwcmltYXJ5Q2hpbGRQcm9wcywgZmliZXJNb2RlKTtcbiAgdmFyIGZhbGxiYWNrQ2hpbGRGcmFnbWVudCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KGZhbGxiYWNrQ2hpbGRyZW4sIGZpYmVyTW9kZSwgcmVuZGVyTGFuZXMsIG51bGwpOyAvLyBOZWVkcyBhIHBsYWNlbWVudCBlZmZlY3QgYmVjYXVzZSB0aGUgcGFyZW50ICh0aGUgU3VzcGVuc2VcbiAgLy8gYm91bmRhcnkpIGFscmVhZHkgbW91bnRlZCBidXQgdGhpcyBpcyBhIG5ldyBmaWJlci5cblxuICBmYWxsYmFja0NoaWxkRnJhZ21lbnQuZmxhZ3MgfD0gUGxhY2VtZW50O1xuICBwcmltYXJ5Q2hpbGRGcmFnbWVudC5yZXR1cm4gPSB3b3JrSW5Qcm9ncmVzcztcbiAgZmFsbGJhY2tDaGlsZEZyYWdtZW50LnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICBwcmltYXJ5Q2hpbGRGcmFnbWVudC5zaWJsaW5nID0gZmFsbGJhY2tDaGlsZEZyYWdtZW50O1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHByaW1hcnlDaGlsZEZyYWdtZW50O1xuXG4gIGlmICgod29ya0luUHJvZ3Jlc3MubW9kZSAmIENvbmN1cnJlbnRNb2RlKSAhPT0gTm9Nb2RlKSB7XG4gICAgLy8gV2Ugd2lsbCBoYXZlIGRyb3BwZWQgdGhlIGVmZmVjdCBsaXN0IHdoaWNoIGNvbnRhaW5zIHRoZVxuICAgIC8vIGRlbGV0aW9uLiBXZSBuZWVkIHRvIHJlY29uY2lsZSB0byBkZWxldGUgdGhlIGN1cnJlbnQgY2hpbGQuXG4gICAgcmVjb25jaWxlQ2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIGN1cnJlbnQuY2hpbGQsIG51bGwsIHJlbmRlckxhbmVzKTtcbiAgfVxuXG4gIHJldHVybiBmYWxsYmFja0NoaWxkRnJhZ21lbnQ7XG59XG5cbmZ1bmN0aW9uIG1vdW50RGVoeWRyYXRlZFN1c3BlbnNlQ29tcG9uZW50KHdvcmtJblByb2dyZXNzLCBzdXNwZW5zZUluc3RhbmNlLCByZW5kZXJMYW5lcykge1xuICAvLyBEdXJpbmcgdGhlIGZpcnN0IHBhc3MsIHdlJ2xsIGJhaWwgb3V0IGFuZCBub3QgZHJpbGwgaW50byB0aGUgY2hpbGRyZW4uXG4gIC8vIEluc3RlYWQsIHdlJ2xsIGxlYXZlIHRoZSBjb250ZW50IGluIHBsYWNlIGFuZCB0cnkgdG8gaHlkcmF0ZSBpdCBsYXRlci5cbiAgaWYgKCh3b3JrSW5Qcm9ncmVzcy5tb2RlICYgQ29uY3VycmVudE1vZGUpID09PSBOb01vZGUpIHtcbiAgICB7XG4gICAgICBlcnJvcignQ2Fubm90IGh5ZHJhdGUgU3VzcGVuc2UgaW4gbGVnYWN5IG1vZGUuIFN3aXRjaCBmcm9tICcgKyAnUmVhY3RET00uaHlkcmF0ZShlbGVtZW50LCBjb250YWluZXIpIHRvICcgKyAnUmVhY3RET01DbGllbnQuaHlkcmF0ZVJvb3QoY29udGFpbmVyLCA8QXBwIC8+KScgKyAnLnJlbmRlcihlbGVtZW50KSBvciByZW1vdmUgdGhlIFN1c3BlbnNlIGNvbXBvbmVudHMgZnJvbSAnICsgJ3RoZSBzZXJ2ZXIgcmVuZGVyZWQgY29tcG9uZW50cy4nKTtcbiAgICB9XG5cbiAgICB3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IGxhbmVUb0xhbmVzKFN5bmNMYW5lKTtcbiAgfSBlbHNlIGlmIChpc1N1c3BlbnNlSW5zdGFuY2VGYWxsYmFjayhzdXNwZW5zZUluc3RhbmNlKSkge1xuICAgIC8vIFRoaXMgaXMgYSBjbGllbnQtb25seSBib3VuZGFyeS4gU2luY2Ugd2Ugd29uJ3QgZ2V0IGFueSBjb250ZW50IGZyb20gdGhlIHNlcnZlclxuICAgIC8vIGZvciB0aGlzLCB3ZSBuZWVkIHRvIHNjaGVkdWxlIHRoYXQgYXQgYSBoaWdoZXIgcHJpb3JpdHkgYmFzZWQgb24gd2hlbiBpdCB3b3VsZFxuICAgIC8vIGhhdmUgdGltZWQgb3V0LiBJbiB0aGVvcnkgd2UgY291bGQgcmVuZGVyIGl0IGluIHRoaXMgcGFzcyBidXQgaXQgd291bGQgaGF2ZSB0aGVcbiAgICAvLyB3cm9uZyBwcmlvcml0eSBhc3NvY2lhdGVkIHdpdGggaXQgYW5kIHdpbGwgcHJldmVudCBoeWRyYXRpb24gb2YgcGFyZW50IHBhdGguXG4gICAgLy8gSW5zdGVhZCwgd2UnbGwgbGVhdmUgd29yayBsZWZ0IG9uIGl0IHRvIHJlbmRlciBpdCBpbiBhIHNlcGFyYXRlIGNvbW1pdC5cbiAgICAvLyBUT0RPIFRoaXMgdGltZSBzaG91bGQgYmUgdGhlIHRpbWUgYXQgd2hpY2ggdGhlIHNlcnZlciByZW5kZXJlZCByZXNwb25zZSB0aGF0IGlzXG4gICAgLy8gYSBwYXJlbnQgdG8gdGhpcyBib3VuZGFyeSB3YXMgZGlzcGxheWVkLiBIb3dldmVyLCBzaW5jZSB3ZSBjdXJyZW50bHkgZG9uJ3QgaGF2ZVxuICAgIC8vIGEgcHJvdG9jb2wgdG8gdHJhbnNmZXIgdGhhdCB0aW1lLCB3ZSdsbCBqdXN0IGVzdGltYXRlIGl0IGJ5IHVzaW5nIHRoZSBjdXJyZW50XG4gICAgLy8gdGltZS4gVGhpcyB3aWxsIG1lYW4gdGhhdCBTdXNwZW5zZSB0aW1lb3V0cyBhcmUgc2xpZ2h0bHkgc2hpZnRlZCB0byBsYXRlciB0aGFuXG4gICAgLy8gdGhleSBzaG91bGQgYmUuXG4gICAgLy8gU2NoZWR1bGUgYSBub3JtYWwgcHJpIHVwZGF0ZSB0byByZW5kZXIgdGhpcyBjb250ZW50LlxuICAgIHdvcmtJblByb2dyZXNzLmxhbmVzID0gbGFuZVRvTGFuZXMoRGVmYXVsdEh5ZHJhdGlvbkxhbmUpO1xuICB9IGVsc2Uge1xuICAgIC8vIFdlJ2xsIGNvbnRpbnVlIGh5ZHJhdGluZyB0aGUgcmVzdCBhdCBvZmZzY3JlZW4gcHJpb3JpdHkgc2luY2Ugd2UnbGwgYWxyZWFkeVxuICAgIC8vIGJlIHNob3dpbmcgdGhlIHJpZ2h0IGNvbnRlbnQgY29taW5nIGZyb20gdGhlIHNlcnZlciwgaXQgaXMgbm8gcnVzaC5cbiAgICB3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IGxhbmVUb0xhbmVzKE9mZnNjcmVlbkxhbmUpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZURlaHlkcmF0ZWRTdXNwZW5zZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgZGlkU3VzcGVuZCwgbmV4dFByb3BzLCBzdXNwZW5zZUluc3RhbmNlLCBzdXNwZW5zZVN0YXRlLCByZW5kZXJMYW5lcykge1xuICBpZiAoIWRpZFN1c3BlbmQpIHtcbiAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCByZW5kZXIgcGFzcy4gQXR0ZW1wdCB0byBoeWRyYXRlLlxuICAgIC8vIFdlIHNob3VsZCBuZXZlciBiZSBoeWRyYXRpbmcgYXQgdGhpcyBwb2ludCBiZWNhdXNlIGl0IGlzIHRoZSBmaXJzdCBwYXNzLFxuICAgIC8vIGJ1dCBhZnRlciB3ZSd2ZSBhbHJlYWR5IGNvbW1pdHRlZCBvbmNlLlxuICAgIHdhcm5JZkh5ZHJhdGluZygpO1xuXG4gICAgaWYgKCh3b3JrSW5Qcm9ncmVzcy5tb2RlICYgQ29uY3VycmVudE1vZGUpID09PSBOb01vZGUpIHtcbiAgICAgIHJldHVybiByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMsIC8vIFRPRE86IFdoZW4gd2UgZGVsZXRlIGxlZ2FjeSBtb2RlLCB3ZSBzaG91bGQgbWFrZSB0aGlzIGVycm9yIGFyZ3VtZW50XG4gICAgICAvLyByZXF1aXJlZCDigJQgZXZlcnkgY29uY3VycmVudCBtb2RlIHBhdGggdGhhdCBjYXVzZXMgaHlkcmF0aW9uIHRvXG4gICAgICAvLyBkZS1vcHQgdG8gY2xpZW50IHJlbmRlcmluZyBzaG91bGQgaGF2ZSBhbiBlcnJvciBtZXNzYWdlLlxuICAgICAgbnVsbCk7XG4gICAgfVxuXG4gICAgaWYgKGlzU3VzcGVuc2VJbnN0YW5jZUZhbGxiYWNrKHN1c3BlbnNlSW5zdGFuY2UpKSB7XG4gICAgICAvLyBUaGlzIGJvdW5kYXJ5IGlzIGluIGEgcGVybWFuZW50IGZhbGxiYWNrIHN0YXRlLiBJbiB0aGlzIGNhc2UsIHdlJ2xsIG5ldmVyXG4gICAgICAvLyBnZXQgYW4gdXBkYXRlIGFuZCB3ZSdsbCBuZXZlciBiZSBhYmxlIHRvIGh5ZHJhdGUgdGhlIGZpbmFsIGNvbnRlbnQuIExldCdzIGp1c3QgdHJ5IHRoZVxuICAgICAgLy8gY2xpZW50IHNpZGUgcmVuZGVyIGluc3RlYWQuXG4gICAgICB2YXIgZGlnZXN0LCBtZXNzYWdlLCBzdGFjaztcblxuICAgICAge1xuICAgICAgICB2YXIgX2dldFN1c3BlbnNlSW5zdGFuY2VGID0gZ2V0U3VzcGVuc2VJbnN0YW5jZUZhbGxiYWNrRXJyb3JEZXRhaWxzKHN1c3BlbnNlSW5zdGFuY2UpO1xuXG4gICAgICAgIGRpZ2VzdCA9IF9nZXRTdXNwZW5zZUluc3RhbmNlRi5kaWdlc3Q7XG4gICAgICAgIG1lc3NhZ2UgPSBfZ2V0U3VzcGVuc2VJbnN0YW5jZUYubWVzc2FnZTtcbiAgICAgICAgc3RhY2sgPSBfZ2V0U3VzcGVuc2VJbnN0YW5jZUYuc3RhY2s7XG4gICAgICB9XG5cbiAgICAgIHZhciBlcnJvcjtcblxuICAgICAgaWYgKG1lc3NhZ2UpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL3Byb2QtZXJyb3ItY29kZXNcbiAgICAgICAgZXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvciA9IG5ldyBFcnJvcignVGhlIHNlcnZlciBjb3VsZCBub3QgZmluaXNoIHRoaXMgU3VzcGVuc2UgYm91bmRhcnksIGxpa2VseSAnICsgJ2R1ZSB0byBhbiBlcnJvciBkdXJpbmcgc2VydmVyIHJlbmRlcmluZy4gU3dpdGNoZWQgdG8gJyArICdjbGllbnQgcmVuZGVyaW5nLicpO1xuICAgICAgfVxuXG4gICAgICB2YXIgY2FwdHVyZWRWYWx1ZSA9IGNyZWF0ZUNhcHR1cmVkVmFsdWUoZXJyb3IsIGRpZ2VzdCwgc3RhY2spO1xuICAgICAgcmV0dXJuIHJldHJ5U3VzcGVuc2VDb21wb25lbnRXaXRob3V0SHlkcmF0aW5nKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcywgY2FwdHVyZWRWYWx1ZSk7XG4gICAgfVxuICAgIC8vIGFueSBjb250ZXh0IGhhcyBjaGFuZ2VkLCB3ZSBuZWVkIHRvIHRyZWF0IGlzIGFzIGlmIHRoZSBpbnB1dCBtaWdodCBoYXZlIGNoYW5nZWQuXG5cblxuICAgIHZhciBoYXNDb250ZXh0Q2hhbmdlZCA9IGluY2x1ZGVzU29tZUxhbmUocmVuZGVyTGFuZXMsIGN1cnJlbnQuY2hpbGRMYW5lcyk7XG5cbiAgICBpZiAoZGlkUmVjZWl2ZVVwZGF0ZSB8fCBoYXNDb250ZXh0Q2hhbmdlZCkge1xuICAgICAgLy8gVGhpcyBib3VuZGFyeSBoYXMgY2hhbmdlZCBzaW5jZSB0aGUgZmlyc3QgcmVuZGVyLiBUaGlzIG1lYW5zIHRoYXQgd2UgYXJlIG5vdyB1bmFibGUgdG9cbiAgICAgIC8vIGh5ZHJhdGUgaXQuIFdlIG1pZ2h0IHN0aWxsIGJlIGFibGUgdG8gaHlkcmF0ZSBpdCB1c2luZyBhIGhpZ2hlciBwcmlvcml0eSBsYW5lLlxuICAgICAgdmFyIHJvb3QgPSBnZXRXb3JrSW5Qcm9ncmVzc1Jvb3QoKTtcblxuICAgICAgaWYgKHJvb3QgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIGF0dGVtcHRIeWRyYXRpb25BdExhbmUgPSBnZXRCdW1wZWRMYW5lRm9ySHlkcmF0aW9uKHJvb3QsIHJlbmRlckxhbmVzKTtcblxuICAgICAgICBpZiAoYXR0ZW1wdEh5ZHJhdGlvbkF0TGFuZSAhPT0gTm9MYW5lICYmIGF0dGVtcHRIeWRyYXRpb25BdExhbmUgIT09IHN1c3BlbnNlU3RhdGUucmV0cnlMYW5lKSB7XG4gICAgICAgICAgLy8gSW50ZW50aW9uYWxseSBtdXRhdGluZyBzaW5jZSB0aGlzIHJlbmRlciB3aWxsIGdldCBpbnRlcnJ1cHRlZC4gVGhpc1xuICAgICAgICAgIC8vIGlzIG9uZSBvZiB0aGUgdmVyeSByYXJlIHRpbWVzIHdoZXJlIHdlIG11dGF0ZSB0aGUgY3VycmVudCB0cmVlXG4gICAgICAgICAgLy8gZHVyaW5nIHRoZSByZW5kZXIgcGhhc2UuXG4gICAgICAgICAgc3VzcGVuc2VTdGF0ZS5yZXRyeUxhbmUgPSBhdHRlbXB0SHlkcmF0aW9uQXRMYW5lOyAvLyBUT0RPOiBJZGVhbGx5IHRoaXMgd291bGQgaW5oZXJpdCB0aGUgZXZlbnQgdGltZSBvZiB0aGUgY3VycmVudCByZW5kZXJcblxuICAgICAgICAgIHZhciBldmVudFRpbWUgPSBOb1RpbWVzdGFtcDtcbiAgICAgICAgICBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoY3VycmVudCwgYXR0ZW1wdEh5ZHJhdGlvbkF0TGFuZSk7XG4gICAgICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGN1cnJlbnQsIGF0dGVtcHRIeWRyYXRpb25BdExhbmUsIGV2ZW50VGltZSk7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gSWYgd2UgaGF2ZSBzY2hlZHVsZWQgaGlnaGVyIHByaSB3b3JrIGFib3ZlLCB0aGlzIHdpbGwgcHJvYmFibHkganVzdCBhYm9ydCB0aGUgcmVuZGVyXG4gICAgICAvLyBzaW5jZSB3ZSBub3cgaGF2ZSBoaWdoZXIgcHJpb3JpdHkgd29yaywgYnV0IGluIGNhc2UgaXQgZG9lc24ndCwgd2UgbmVlZCB0byBwcmVwYXJlIHRvXG4gICAgICAvLyByZW5kZXIgc29tZXRoaW5nLCBpZiB3ZSB0aW1lIG91dC4gRXZlbiBpZiB0aGF0IHJlcXVpcmVzIHVzIHRvIGRlbGV0ZSBldmVyeXRoaW5nIGFuZFxuICAgICAgLy8gc2tpcCBoeWRyYXRpb24uXG4gICAgICAvLyBEZWxheSBoYXZpbmcgdG8gZG8gdGhpcyBhcyBsb25nIGFzIHRoZSBzdXNwZW5zZSB0aW1lb3V0IGFsbG93cyB1cy5cblxuXG4gICAgICByZW5kZXJEaWRTdXNwZW5kRGVsYXlJZlBvc3NpYmxlKCk7XG5cbiAgICAgIHZhciBfY2FwdHVyZWRWYWx1ZSA9IGNyZWF0ZUNhcHR1cmVkVmFsdWUobmV3IEVycm9yKCdUaGlzIFN1c3BlbnNlIGJvdW5kYXJ5IHJlY2VpdmVkIGFuIHVwZGF0ZSBiZWZvcmUgaXQgZmluaXNoZWQgJyArICdoeWRyYXRpbmcuIFRoaXMgY2F1c2VkIHRoZSBib3VuZGFyeSB0byBzd2l0Y2ggdG8gY2xpZW50IHJlbmRlcmluZy4gJyArICdUaGUgdXN1YWwgd2F5IHRvIGZpeCB0aGlzIGlzIHRvIHdyYXAgdGhlIG9yaWdpbmFsIHVwZGF0ZSAnICsgJ2luIHN0YXJ0VHJhbnNpdGlvbi4nKSk7XG5cbiAgICAgIHJldHVybiByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMsIF9jYXB0dXJlZFZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGlzU3VzcGVuc2VJbnN0YW5jZVBlbmRpbmcoc3VzcGVuc2VJbnN0YW5jZSkpIHtcbiAgICAgIC8vIFRoaXMgY29tcG9uZW50IGlzIHN0aWxsIHBlbmRpbmcgbW9yZSBkYXRhIGZyb20gdGhlIHNlcnZlciwgc28gd2UgY2FuJ3QgaHlkcmF0ZSBpdHNcbiAgICAgIC8vIGNvbnRlbnQuIFdlIHRyZWF0IGl0IGFzIGlmIHRoaXMgY29tcG9uZW50IHN1c3BlbmRlZCBpdHNlbGYuIEl0IG1pZ2h0IHNlZW0gYXMgaWZcbiAgICAgIC8vIHdlIGNvdWxkIGp1c3QgdHJ5IHRvIHJlbmRlciBpdCBjbGllbnQtc2lkZSBpbnN0ZWFkLiBIb3dldmVyLCB0aGlzIHdpbGwgcGVyZm9ybSBhXG4gICAgICAvLyBsb3Qgb2YgdW5uZWNlc3Nhcnkgd29yayBhbmQgaXMgdW5saWtlbHkgdG8gY29tcGxldGUgc2luY2UgaXQgb2Z0ZW4gd2lsbCBzdXNwZW5kXG4gICAgICAvLyBvbiBtaXNzaW5nIGRhdGEgYW55d2F5LiBBZGRpdGlvbmFsbHksIHRoZSBzZXJ2ZXIgbWlnaHQgYmUgYWJsZSB0byByZW5kZXIgbW9yZVxuICAgICAgLy8gdGhhbiB3ZSBjYW4gb24gdGhlIGNsaWVudCB5ZXQuIEluIHRoYXQgY2FzZSB3ZSdkIGVuZCB1cCB3aXRoIG1vcmUgZmFsbGJhY2sgc3RhdGVzXG4gICAgICAvLyBvbiB0aGUgY2xpZW50IHRoYW4gaWYgd2UganVzdCBsZWF2ZSBpdCBhbG9uZS4gSWYgdGhlIHNlcnZlciB0aW1lcyBvdXQgb3IgZXJyb3JzXG4gICAgICAvLyB0aGVzZSBzaG91bGQgdXBkYXRlIHRoaXMgYm91bmRhcnkgdG8gdGhlIHBlcm1hbmVudCBGYWxsYmFjayBzdGF0ZSBpbnN0ZWFkLlxuICAgICAgLy8gTWFyayBpdCBhcyBoYXZpbmcgY2FwdHVyZWQgKGkuZS4gc3VzcGVuZGVkKS5cbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IERpZENhcHR1cmU7IC8vIExlYXZlIHRoZSBjaGlsZCBpbiBwbGFjZS4gSS5lLiB0aGUgZGVoeWRyYXRlZCBmcmFnbWVudC5cblxuICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50LmNoaWxkOyAvLyBSZWdpc3RlciBhIGNhbGxiYWNrIHRvIHJldHJ5IHRoaXMgYm91bmRhcnkgb25jZSB0aGUgc2VydmVyIGhhcyBzZW50IHRoZSByZXN1bHQuXG5cbiAgICAgIHZhciByZXRyeSA9IHJldHJ5RGVoeWRyYXRlZFN1c3BlbnNlQm91bmRhcnkuYmluZChudWxsLCBjdXJyZW50KTtcbiAgICAgIHJlZ2lzdGVyU3VzcGVuc2VJbnN0YW5jZVJldHJ5KHN1c3BlbnNlSW5zdGFuY2UsIHJldHJ5KTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGlzIGlzIHRoZSBmaXJzdCBhdHRlbXB0LlxuICAgICAgcmVlbnRlckh5ZHJhdGlvblN0YXRlRnJvbURlaHlkcmF0ZWRTdXNwZW5zZUluc3RhbmNlKHdvcmtJblByb2dyZXNzLCBzdXNwZW5zZUluc3RhbmNlLCBzdXNwZW5zZVN0YXRlLnRyZWVDb250ZXh0KTtcbiAgICAgIHZhciBwcmltYXJ5Q2hpbGRyZW4gPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gICAgICB2YXIgcHJpbWFyeUNoaWxkRnJhZ21lbnQgPSBtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuKHdvcmtJblByb2dyZXNzLCBwcmltYXJ5Q2hpbGRyZW4pOyAvLyBNYXJrIHRoZSBjaGlsZHJlbiBhcyBoeWRyYXRpbmcuIFRoaXMgaXMgYSBmYXN0IHBhdGggdG8ga25vdyB3aGV0aGVyIHRoaXNcbiAgICAgIC8vIHRyZWUgaXMgcGFydCBvZiBhIGh5ZHJhdGluZyB0cmVlLiBUaGlzIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIGEgY2hpbGRcbiAgICAgIC8vIG5vZGUgaGFzIGZ1bGx5IG1vdW50ZWQgeWV0LCBhbmQgZm9yIHNjaGVkdWxpbmcgZXZlbnQgcmVwbGF5aW5nLlxuICAgICAgLy8gQ29uY2VwdHVhbGx5IHRoaXMgaXMgc2ltaWxhciB0byBQbGFjZW1lbnQgaW4gdGhhdCBhIG5ldyBzdWJ0cmVlIGlzXG4gICAgICAvLyBpbnNlcnRlZCBpbnRvIHRoZSBSZWFjdCB0cmVlIGhlcmUuIEl0IGp1c3QgaGFwcGVucyB0byBub3QgbmVlZCBET01cbiAgICAgIC8vIG11dGF0aW9ucyBiZWNhdXNlIGl0IGFscmVhZHkgZXhpc3RzLlxuXG4gICAgICBwcmltYXJ5Q2hpbGRGcmFnbWVudC5mbGFncyB8PSBIeWRyYXRpbmc7XG4gICAgICByZXR1cm4gcHJpbWFyeUNoaWxkRnJhZ21lbnQ7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFRoaXMgaXMgdGhlIHNlY29uZCByZW5kZXIgcGFzcy4gV2UgYWxyZWFkeSBhdHRlbXB0ZWQgdG8gaHlkcmF0ZWQsIGJ1dFxuICAgIC8vIHNvbWV0aGluZyBlaXRoZXIgc3VzcGVuZGVkIG9yIGVycm9yZWQuXG4gICAgaWYgKHdvcmtJblByb2dyZXNzLmZsYWdzICYgRm9yY2VDbGllbnRSZW5kZXIpIHtcbiAgICAgIC8vIFNvbWV0aGluZyBlcnJvcmVkIGR1cmluZyBoeWRyYXRpb24uIFRyeSBhZ2FpbiB3aXRob3V0IGh5ZHJhdGluZy5cbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzICY9IH5Gb3JjZUNsaWVudFJlbmRlcjtcblxuICAgICAgdmFyIF9jYXB0dXJlZFZhbHVlMiA9IGNyZWF0ZUNhcHR1cmVkVmFsdWUobmV3IEVycm9yKCdUaGVyZSB3YXMgYW4gZXJyb3Igd2hpbGUgaHlkcmF0aW5nIHRoaXMgU3VzcGVuc2UgYm91bmRhcnkuICcgKyAnU3dpdGNoZWQgdG8gY2xpZW50IHJlbmRlcmluZy4nKSk7XG5cbiAgICAgIHJldHVybiByZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMsIF9jYXB0dXJlZFZhbHVlMik7XG4gICAgfSBlbHNlIGlmICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlICE9PSBudWxsKSB7XG4gICAgICAvLyBTb21ldGhpbmcgc3VzcGVuZGVkIGFuZCB3ZSBzaG91bGQgc3RpbGwgYmUgaW4gZGVoeWRyYXRlZCBtb2RlLlxuICAgICAgLy8gTGVhdmUgdGhlIGV4aXN0aW5nIGNoaWxkIGluIHBsYWNlLlxuICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50LmNoaWxkOyAvLyBUaGUgZGVoeWRyYXRlZCBjb21wbGV0aW9uIHBhc3MgZXhwZWN0cyB0aGlzIGZsYWcgdG8gYmUgdGhlcmVcbiAgICAgIC8vIGJ1dCB0aGUgbm9ybWFsIHN1c3BlbnNlIHBhc3MgZG9lc24ndC5cblxuICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gRGlkQ2FwdHVyZTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBTdXNwZW5kZWQgYnV0IHdlIHNob3VsZCBubyBsb25nZXIgYmUgaW4gZGVoeWRyYXRlZCBtb2RlLlxuICAgICAgLy8gVGhlcmVmb3JlIHdlIG5vdyBoYXZlIHRvIHJlbmRlciB0aGUgZmFsbGJhY2suXG4gICAgICB2YXIgbmV4dFByaW1hcnlDaGlsZHJlbiA9IG5leHRQcm9wcy5jaGlsZHJlbjtcbiAgICAgIHZhciBuZXh0RmFsbGJhY2tDaGlsZHJlbiA9IG5leHRQcm9wcy5mYWxsYmFjaztcbiAgICAgIHZhciBmYWxsYmFja0NoaWxkRnJhZ21lbnQgPSBtb3VudFN1c3BlbnNlRmFsbGJhY2tBZnRlclJldHJ5V2l0aG91dEh5ZHJhdGluZyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dFByaW1hcnlDaGlsZHJlbiwgbmV4dEZhbGxiYWNrQ2hpbGRyZW4sIHJlbmRlckxhbmVzKTtcbiAgICAgIHZhciBfcHJpbWFyeUNoaWxkRnJhZ21lbnQ0ID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICBfcHJpbWFyeUNoaWxkRnJhZ21lbnQ0Lm1lbW9pemVkU3RhdGUgPSBtb3VudFN1c3BlbnNlT2Zmc2NyZWVuU3RhdGUocmVuZGVyTGFuZXMpO1xuICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IFNVU1BFTkRFRF9NQVJLRVI7XG4gICAgICByZXR1cm4gZmFsbGJhY2tDaGlsZEZyYWdtZW50O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzY2hlZHVsZVN1c3BlbnNlV29ya09uRmliZXIoZmliZXIsIHJlbmRlckxhbmVzLCBwcm9wYWdhdGlvblJvb3QpIHtcbiAgZmliZXIubGFuZXMgPSBtZXJnZUxhbmVzKGZpYmVyLmxhbmVzLCByZW5kZXJMYW5lcyk7XG4gIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG5cbiAgaWYgKGFsdGVybmF0ZSAhPT0gbnVsbCkge1xuICAgIGFsdGVybmF0ZS5sYW5lcyA9IG1lcmdlTGFuZXMoYWx0ZXJuYXRlLmxhbmVzLCByZW5kZXJMYW5lcyk7XG4gIH1cblxuICBzY2hlZHVsZUNvbnRleHRXb3JrT25QYXJlbnRQYXRoKGZpYmVyLnJldHVybiwgcmVuZGVyTGFuZXMsIHByb3BhZ2F0aW9uUm9vdCk7XG59XG5cbmZ1bmN0aW9uIHByb3BhZ2F0ZVN1c3BlbnNlQ29udGV4dENoYW5nZSh3b3JrSW5Qcm9ncmVzcywgZmlyc3RDaGlsZCwgcmVuZGVyTGFuZXMpIHtcbiAgLy8gTWFyayBhbnkgU3VzcGVuc2UgYm91bmRhcmllcyB3aXRoIGZhbGxiYWNrcyBhcyBoYXZpbmcgd29yayB0byBkby5cbiAgLy8gSWYgdGhleSB3ZXJlIHByZXZpb3VzbHkgZm9yY2VkIGludG8gZmFsbGJhY2tzLCB0aGV5IG1heSBub3cgYmUgYWJsZVxuICAvLyB0byB1bmJsb2NrLlxuICB2YXIgbm9kZSA9IGZpcnN0Q2hpbGQ7XG5cbiAgd2hpbGUgKG5vZGUgIT09IG51bGwpIHtcbiAgICBpZiAobm9kZS50YWcgPT09IFN1c3BlbnNlQ29tcG9uZW50KSB7XG4gICAgICB2YXIgc3RhdGUgPSBub2RlLm1lbW9pemVkU3RhdGU7XG5cbiAgICAgIGlmIChzdGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICBzY2hlZHVsZVN1c3BlbnNlV29ya09uRmliZXIobm9kZSwgcmVuZGVyTGFuZXMsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5vZGUudGFnID09PSBTdXNwZW5zZUxpc3RDb21wb25lbnQpIHtcbiAgICAgIC8vIElmIHRoZSB0YWlsIGlzIGhpZGRlbiB0aGVyZSBtaWdodCBub3QgYmUgYW4gU3VzcGVuc2UgYm91bmRhcmllc1xuICAgICAgLy8gdG8gc2NoZWR1bGUgd29yayBvbi4gSW4gdGhpcyBjYXNlIHdlIGhhdmUgdG8gc2NoZWR1bGUgaXQgb24gdGhlXG4gICAgICAvLyBsaXN0IGl0c2VsZi5cbiAgICAgIC8vIFdlIGRvbid0IGhhdmUgdG8gdHJhdmVyc2UgdG8gdGhlIGNoaWxkcmVuIG9mIHRoZSBsaXN0IHNpbmNlXG4gICAgICAvLyB0aGUgbGlzdCB3aWxsIHByb3BhZ2F0ZSB0aGUgY2hhbmdlIHdoZW4gaXQgcmVyZW5kZXJzLlxuICAgICAgc2NoZWR1bGVTdXNwZW5zZVdvcmtPbkZpYmVyKG5vZGUsIHJlbmRlckxhbmVzLCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfSBlbHNlIGlmIChub2RlLmNoaWxkICE9PSBudWxsKSB7XG4gICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGU7XG4gICAgICBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGlmIChub2RlID09PSB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdoaWxlIChub2RlLnNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgIGlmIChub2RlLnJldHVybiA9PT0gbnVsbCB8fCBub2RlLnJldHVybiA9PT0gd29ya0luUHJvZ3Jlc3MpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgfVxuXG4gICAgbm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuO1xuICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZExhc3RDb250ZW50Um93KGZpcnN0Q2hpbGQpIHtcbiAgLy8gVGhpcyBpcyBnb2luZyB0byBmaW5kIHRoZSBsYXN0IHJvdyBhbW9uZyB0aGVzZSBjaGlsZHJlbiB0aGF0IGlzIGFscmVhZHlcbiAgLy8gc2hvd2luZyBjb250ZW50IG9uIHRoZSBzY3JlZW4sIGFzIG9wcG9zZWQgdG8gYmVpbmcgaW4gZmFsbGJhY2sgc3RhdGUgb3JcbiAgLy8gbmV3LiBJZiBhIHJvdyBoYXMgbXVsdGlwbGUgU3VzcGVuc2UgYm91bmRhcmllcywgYW55IG9mIHRoZW0gYmVpbmcgaW4gdGhlXG4gIC8vIGZhbGxiYWNrIHN0YXRlLCBjb3VudHMgYXMgdGhlIHdob2xlIHJvdyBiZWluZyBpbiBhIGZhbGxiYWNrIHN0YXRlLlxuICAvLyBOb3RlIHRoYXQgdGhlIFwicm93c1wiIHdpbGwgYmUgd29ya0luUHJvZ3Jlc3MsIGJ1dCBhbnkgbmVzdGVkIGNoaWxkcmVuXG4gIC8vIHdpbGwgc3RpbGwgYmUgY3VycmVudCBzaW5jZSB3ZSBoYXZlbid0IHJlbmRlcmVkIHRoZW0geWV0LiBUaGUgbW91bnRlZFxuICAvLyBvcmRlciBtYXkgbm90IGJlIHRoZSBzYW1lIGFzIHRoZSBuZXcgb3JkZXIuIFdlIHVzZSB0aGUgbmV3IG9yZGVyLlxuICB2YXIgcm93ID0gZmlyc3RDaGlsZDtcbiAgdmFyIGxhc3RDb250ZW50Um93ID0gbnVsbDtcblxuICB3aGlsZSAocm93ICE9PSBudWxsKSB7XG4gICAgdmFyIGN1cnJlbnRSb3cgPSByb3cuYWx0ZXJuYXRlOyAvLyBOZXcgcm93cyBjYW4ndCBiZSBjb250ZW50IHJvd3MuXG5cbiAgICBpZiAoY3VycmVudFJvdyAhPT0gbnVsbCAmJiBmaW5kRmlyc3RTdXNwZW5kZWQoY3VycmVudFJvdykgPT09IG51bGwpIHtcbiAgICAgIGxhc3RDb250ZW50Um93ID0gcm93O1xuICAgIH1cblxuICAgIHJvdyA9IHJvdy5zaWJsaW5nO1xuICB9XG5cbiAgcmV0dXJuIGxhc3RDb250ZW50Um93O1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVJldmVhbE9yZGVyKHJldmVhbE9yZGVyKSB7XG4gIHtcbiAgICBpZiAocmV2ZWFsT3JkZXIgIT09IHVuZGVmaW5lZCAmJiByZXZlYWxPcmRlciAhPT0gJ2ZvcndhcmRzJyAmJiByZXZlYWxPcmRlciAhPT0gJ2JhY2t3YXJkcycgJiYgcmV2ZWFsT3JkZXIgIT09ICd0b2dldGhlcicgJiYgIWRpZFdhcm5BYm91dFJldmVhbE9yZGVyW3JldmVhbE9yZGVyXSkge1xuICAgICAgZGlkV2FybkFib3V0UmV2ZWFsT3JkZXJbcmV2ZWFsT3JkZXJdID0gdHJ1ZTtcblxuICAgICAgaWYgKHR5cGVvZiByZXZlYWxPcmRlciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgc3dpdGNoIChyZXZlYWxPcmRlci50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgICAgY2FzZSAndG9nZXRoZXInOlxuICAgICAgICAgIGNhc2UgJ2ZvcndhcmRzJzpcbiAgICAgICAgICBjYXNlICdiYWNrd2FyZHMnOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBlcnJvcignXCIlc1wiIGlzIG5vdCBhIHZhbGlkIHZhbHVlIGZvciByZXZlYWxPcmRlciBvbiA8U3VzcGVuc2VMaXN0IC8+LiAnICsgJ1VzZSBsb3dlcmNhc2UgXCIlc1wiIGluc3RlYWQuJywgcmV2ZWFsT3JkZXIsIHJldmVhbE9yZGVyLnRvTG93ZXJDYXNlKCkpO1xuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgY2FzZSAnZm9yd2FyZCc6XG4gICAgICAgICAgY2FzZSAnYmFja3dhcmQnOlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBlcnJvcignXCIlc1wiIGlzIG5vdCBhIHZhbGlkIHZhbHVlIGZvciByZXZlYWxPcmRlciBvbiA8U3VzcGVuc2VMaXN0IC8+LiAnICsgJ1JlYWN0IHVzZXMgdGhlIC1zIHN1ZmZpeCBpbiB0aGUgc3BlbGxpbmcuIFVzZSBcIiVzc1wiIGluc3RlYWQuJywgcmV2ZWFsT3JkZXIsIHJldmVhbE9yZGVyLnRvTG93ZXJDYXNlKCkpO1xuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGVycm9yKCdcIiVzXCIgaXMgbm90IGEgc3VwcG9ydGVkIHJldmVhbE9yZGVyIG9uIDxTdXNwZW5zZUxpc3QgLz4uICcgKyAnRGlkIHlvdSBtZWFuIFwidG9nZXRoZXJcIiwgXCJmb3J3YXJkc1wiIG9yIFwiYmFja3dhcmRzXCI/JywgcmV2ZWFsT3JkZXIpO1xuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3IoJyVzIGlzIG5vdCBhIHN1cHBvcnRlZCB2YWx1ZSBmb3IgcmV2ZWFsT3JkZXIgb24gPFN1c3BlbnNlTGlzdCAvPi4gJyArICdEaWQgeW91IG1lYW4gXCJ0b2dldGhlclwiLCBcImZvcndhcmRzXCIgb3IgXCJiYWNrd2FyZHNcIj8nLCByZXZlYWxPcmRlcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlVGFpbE9wdGlvbnModGFpbE1vZGUsIHJldmVhbE9yZGVyKSB7XG4gIHtcbiAgICBpZiAodGFpbE1vZGUgIT09IHVuZGVmaW5lZCAmJiAhZGlkV2FybkFib3V0VGFpbE9wdGlvbnNbdGFpbE1vZGVdKSB7XG4gICAgICBpZiAodGFpbE1vZGUgIT09ICdjb2xsYXBzZWQnICYmIHRhaWxNb2RlICE9PSAnaGlkZGVuJykge1xuICAgICAgICBkaWRXYXJuQWJvdXRUYWlsT3B0aW9uc1t0YWlsTW9kZV0gPSB0cnVlO1xuXG4gICAgICAgIGVycm9yKCdcIiVzXCIgaXMgbm90IGEgc3VwcG9ydGVkIHZhbHVlIGZvciB0YWlsIG9uIDxTdXNwZW5zZUxpc3QgLz4uICcgKyAnRGlkIHlvdSBtZWFuIFwiY29sbGFwc2VkXCIgb3IgXCJoaWRkZW5cIj8nLCB0YWlsTW9kZSk7XG4gICAgICB9IGVsc2UgaWYgKHJldmVhbE9yZGVyICE9PSAnZm9yd2FyZHMnICYmIHJldmVhbE9yZGVyICE9PSAnYmFja3dhcmRzJykge1xuICAgICAgICBkaWRXYXJuQWJvdXRUYWlsT3B0aW9uc1t0YWlsTW9kZV0gPSB0cnVlO1xuXG4gICAgICAgIGVycm9yKCc8U3VzcGVuc2VMaXN0IHRhaWw9XCIlc1wiIC8+IGlzIG9ubHkgdmFsaWQgaWYgcmV2ZWFsT3JkZXIgaXMgJyArICdcImZvcndhcmRzXCIgb3IgXCJiYWNrd2FyZHNcIi4gJyArICdEaWQgeW91IG1lYW4gdG8gc3BlY2lmeSByZXZlYWxPcmRlcj1cImZvcndhcmRzXCI/JywgdGFpbE1vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZVN1c3BlbnNlTGlzdE5lc3RlZENoaWxkKGNoaWxkU2xvdCwgaW5kZXgpIHtcbiAge1xuICAgIHZhciBpc0FuQXJyYXkgPSBpc0FycmF5KGNoaWxkU2xvdCk7XG4gICAgdmFyIGlzSXRlcmFibGUgPSAhaXNBbkFycmF5ICYmIHR5cGVvZiBnZXRJdGVyYXRvckZuKGNoaWxkU2xvdCkgPT09ICdmdW5jdGlvbic7XG5cbiAgICBpZiAoaXNBbkFycmF5IHx8IGlzSXRlcmFibGUpIHtcbiAgICAgIHZhciB0eXBlID0gaXNBbkFycmF5ID8gJ2FycmF5JyA6ICdpdGVyYWJsZSc7XG5cbiAgICAgIGVycm9yKCdBIG5lc3RlZCAlcyB3YXMgcGFzc2VkIHRvIHJvdyAjJXMgaW4gPFN1c3BlbnNlTGlzdCAvPi4gV3JhcCBpdCBpbiAnICsgJ2FuIGFkZGl0aW9uYWwgU3VzcGVuc2VMaXN0IHRvIGNvbmZpZ3VyZSBpdHMgcmV2ZWFsT3JkZXI6ICcgKyAnPFN1c3BlbnNlTGlzdCByZXZlYWxPcmRlcj0uLi4+IC4uLiAnICsgJzxTdXNwZW5zZUxpc3QgcmV2ZWFsT3JkZXI9Li4uPnslc308L1N1c3BlbnNlTGlzdD4gLi4uICcgKyAnPC9TdXNwZW5zZUxpc3Q+JywgdHlwZSwgaW5kZXgsIHR5cGUpO1xuXG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlU3VzcGVuc2VMaXN0Q2hpbGRyZW4oY2hpbGRyZW4sIHJldmVhbE9yZGVyKSB7XG4gIHtcbiAgICBpZiAoKHJldmVhbE9yZGVyID09PSAnZm9yd2FyZHMnIHx8IHJldmVhbE9yZGVyID09PSAnYmFja3dhcmRzJykgJiYgY2hpbGRyZW4gIT09IHVuZGVmaW5lZCAmJiBjaGlsZHJlbiAhPT0gbnVsbCAmJiBjaGlsZHJlbiAhPT0gZmFsc2UpIHtcbiAgICAgIGlmIChpc0FycmF5KGNoaWxkcmVuKSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKCF2YWxpZGF0ZVN1c3BlbnNlTGlzdE5lc3RlZENoaWxkKGNoaWxkcmVuW2ldLCBpKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKGNoaWxkcmVuKTtcblxuICAgICAgICBpZiAodHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB2YXIgY2hpbGRyZW5JdGVyYXRvciA9IGl0ZXJhdG9yRm4uY2FsbChjaGlsZHJlbik7XG5cbiAgICAgICAgICBpZiAoY2hpbGRyZW5JdGVyYXRvcikge1xuICAgICAgICAgICAgdmFyIHN0ZXAgPSBjaGlsZHJlbkl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIHZhciBfaSA9IDA7XG5cbiAgICAgICAgICAgIGZvciAoOyAhc3RlcC5kb25lOyBzdGVwID0gY2hpbGRyZW5JdGVyYXRvci5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgaWYgKCF2YWxpZGF0ZVN1c3BlbnNlTGlzdE5lc3RlZENoaWxkKHN0ZXAudmFsdWUsIF9pKSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIF9pKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVycm9yKCdBIHNpbmdsZSByb3cgd2FzIHBhc3NlZCB0byBhIDxTdXNwZW5zZUxpc3QgcmV2ZWFsT3JkZXI9XCIlc1wiIC8+LiAnICsgJ1RoaXMgaXMgbm90IHVzZWZ1bCBzaW5jZSBpdCBuZWVkcyBtdWx0aXBsZSByb3dzLiAnICsgJ0RpZCB5b3UgbWVhbiB0byBwYXNzIG11bHRpcGxlIGNoaWxkcmVuIG9yIGFuIGFycmF5PycsIHJldmVhbE9yZGVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0U3VzcGVuc2VMaXN0UmVuZGVyU3RhdGUod29ya0luUHJvZ3Jlc3MsIGlzQmFja3dhcmRzLCB0YWlsLCBsYXN0Q29udGVudFJvdywgdGFpbE1vZGUpIHtcbiAgdmFyIHJlbmRlclN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcblxuICBpZiAocmVuZGVyU3RhdGUgPT09IG51bGwpIHtcbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0ge1xuICAgICAgaXNCYWNrd2FyZHM6IGlzQmFja3dhcmRzLFxuICAgICAgcmVuZGVyaW5nOiBudWxsLFxuICAgICAgcmVuZGVyaW5nU3RhcnRUaW1lOiAwLFxuICAgICAgbGFzdDogbGFzdENvbnRlbnRSb3csXG4gICAgICB0YWlsOiB0YWlsLFxuICAgICAgdGFpbE1vZGU6IHRhaWxNb2RlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBXZSBjYW4gcmV1c2UgdGhlIGV4aXN0aW5nIG9iamVjdCBmcm9tIHByZXZpb3VzIHJlbmRlcnMuXG4gICAgcmVuZGVyU3RhdGUuaXNCYWNrd2FyZHMgPSBpc0JhY2t3YXJkcztcbiAgICByZW5kZXJTdGF0ZS5yZW5kZXJpbmcgPSBudWxsO1xuICAgIHJlbmRlclN0YXRlLnJlbmRlcmluZ1N0YXJ0VGltZSA9IDA7XG4gICAgcmVuZGVyU3RhdGUubGFzdCA9IGxhc3RDb250ZW50Um93O1xuICAgIHJlbmRlclN0YXRlLnRhaWwgPSB0YWlsO1xuICAgIHJlbmRlclN0YXRlLnRhaWxNb2RlID0gdGFpbE1vZGU7XG4gIH1cbn0gLy8gVGhpcyBjYW4gZW5kIHVwIHJlbmRlcmluZyB0aGlzIGNvbXBvbmVudCBtdWx0aXBsZSBwYXNzZXMuXG4vLyBUaGUgZmlyc3QgcGFzcyBzcGxpdHMgdGhlIGNoaWxkcmVuIGZpYmVycyBpbnRvIHR3byBzZXRzLiBBIGhlYWQgYW5kIHRhaWwuXG4vLyBXZSBmaXJzdCByZW5kZXIgdGhlIGhlYWQuIElmIGFueXRoaW5nIGlzIGluIGZhbGxiYWNrIHN0YXRlLCB3ZSBkbyBhbm90aGVyXG4vLyBwYXNzIHRocm91Z2ggYmVnaW5Xb3JrIHRvIHJlcmVuZGVyIGFsbCBjaGlsZHJlbiAoaW5jbHVkaW5nIHRoZSB0YWlsKSB3aXRoXG4vLyB0aGUgZm9yY2Ugc3VzcGVuZCBjb250ZXh0LiBJZiB0aGUgZmlyc3QgcmVuZGVyIGRpZG4ndCBoYXZlIGFueXRoaW5nIGluXG4vLyBpbiBmYWxsYmFjayBzdGF0ZS4gVGhlbiB3ZSByZW5kZXIgZWFjaCByb3cgaW4gdGhlIHRhaWwgb25lLWJ5LW9uZS5cbi8vIFRoYXQgaGFwcGVucyBpbiB0aGUgY29tcGxldGVXb3JrIHBoYXNlIHdpdGhvdXQgZ29pbmcgYmFjayB0byBiZWdpbldvcmsuXG5cblxuZnVuY3Rpb24gdXBkYXRlU3VzcGVuc2VMaXN0Q29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB2YXIgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICB2YXIgcmV2ZWFsT3JkZXIgPSBuZXh0UHJvcHMucmV2ZWFsT3JkZXI7XG4gIHZhciB0YWlsTW9kZSA9IG5leHRQcm9wcy50YWlsO1xuICB2YXIgbmV3Q2hpbGRyZW4gPSBuZXh0UHJvcHMuY2hpbGRyZW47XG4gIHZhbGlkYXRlUmV2ZWFsT3JkZXIocmV2ZWFsT3JkZXIpO1xuICB2YWxpZGF0ZVRhaWxPcHRpb25zKHRhaWxNb2RlLCByZXZlYWxPcmRlcik7XG4gIHZhbGlkYXRlU3VzcGVuc2VMaXN0Q2hpbGRyZW4obmV3Q2hpbGRyZW4sIHJldmVhbE9yZGVyKTtcbiAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5ld0NoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIHZhciBzdXNwZW5zZUNvbnRleHQgPSBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG4gIHZhciBzaG91bGRGb3JjZUZhbGxiYWNrID0gaGFzU3VzcGVuc2VDb250ZXh0KHN1c3BlbnNlQ29udGV4dCwgRm9yY2VTdXNwZW5zZUZhbGxiYWNrKTtcblxuICBpZiAoc2hvdWxkRm9yY2VGYWxsYmFjaykge1xuICAgIHN1c3BlbnNlQ29udGV4dCA9IHNldFNoYWxsb3dTdXNwZW5zZUNvbnRleHQoc3VzcGVuc2VDb250ZXh0LCBGb3JjZVN1c3BlbnNlRmFsbGJhY2spO1xuICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IERpZENhcHR1cmU7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGRpZFN1c3BlbmRCZWZvcmUgPSBjdXJyZW50ICE9PSBudWxsICYmIChjdXJyZW50LmZsYWdzICYgRGlkQ2FwdHVyZSkgIT09IE5vRmxhZ3M7XG5cbiAgICBpZiAoZGlkU3VzcGVuZEJlZm9yZSkge1xuICAgICAgLy8gSWYgd2UgcHJldmlvdXNseSBmb3JjZWQgYSBmYWxsYmFjaywgd2UgbmVlZCB0byBzY2hlZHVsZSB3b3JrXG4gICAgICAvLyBvbiBhbnkgbmVzdGVkIGJvdW5kYXJpZXMgdG8gbGV0IHRoZW0ga25vdyB0byB0cnkgdG8gcmVuZGVyXG4gICAgICAvLyBhZ2Fpbi4gVGhpcyBpcyB0aGUgc2FtZSBhcyBjb250ZXh0IHVwZGF0aW5nLlxuICAgICAgcHJvcGFnYXRlU3VzcGVuc2VDb250ZXh0Q2hhbmdlKHdvcmtJblByb2dyZXNzLCB3b3JrSW5Qcm9ncmVzcy5jaGlsZCwgcmVuZGVyTGFuZXMpO1xuICAgIH1cblxuICAgIHN1c3BlbnNlQ29udGV4dCA9IHNldERlZmF1bHRTaGFsbG93U3VzcGVuc2VDb250ZXh0KHN1c3BlbnNlQ29udGV4dCk7XG4gIH1cblxuICBwdXNoU3VzcGVuc2VDb250ZXh0KHdvcmtJblByb2dyZXNzLCBzdXNwZW5zZUNvbnRleHQpO1xuXG4gIGlmICgod29ya0luUHJvZ3Jlc3MubW9kZSAmIENvbmN1cnJlbnRNb2RlKSA9PT0gTm9Nb2RlKSB7XG4gICAgLy8gSW4gbGVnYWN5IG1vZGUsIFN1c3BlbnNlTGlzdCBkb2Vzbid0IHdvcmsgc28gd2UganVzdFxuICAgIC8vIHVzZSBtYWtlIGl0IGEgbm9vcCBieSB0cmVhdGluZyBpdCBhcyB0aGUgZGVmYXVsdCByZXZlYWxPcmRlci5cbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBzd2l0Y2ggKHJldmVhbE9yZGVyKSB7XG4gICAgICBjYXNlICdmb3J3YXJkcyc6XG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgbGFzdENvbnRlbnRSb3cgPSBmaW5kTGFzdENvbnRlbnRSb3cod29ya0luUHJvZ3Jlc3MuY2hpbGQpO1xuICAgICAgICAgIHZhciB0YWlsO1xuXG4gICAgICAgICAgaWYgKGxhc3RDb250ZW50Um93ID09PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBUaGUgd2hvbGUgbGlzdCBpcyBwYXJ0IG9mIHRoZSB0YWlsLlxuICAgICAgICAgICAgLy8gVE9ETzogV2UgY291bGQgZmFzdCBwYXRoIGJ5IGp1c3QgcmVuZGVyaW5nIHRoZSB0YWlsIG5vdy5cbiAgICAgICAgICAgIHRhaWwgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gbnVsbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gRGlzY29ubmVjdCB0aGUgdGFpbCByb3dzIGFmdGVyIHRoZSBjb250ZW50IHJvdy5cbiAgICAgICAgICAgIC8vIFdlJ3JlIGdvaW5nIHRvIHJlbmRlciB0aGVtIHNlcGFyYXRlbHkgbGF0ZXIuXG4gICAgICAgICAgICB0YWlsID0gbGFzdENvbnRlbnRSb3cuc2libGluZztcbiAgICAgICAgICAgIGxhc3RDb250ZW50Um93LnNpYmxpbmcgPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZSh3b3JrSW5Qcm9ncmVzcywgZmFsc2UsIC8vIGlzQmFja3dhcmRzXG4gICAgICAgICAgdGFpbCwgbGFzdENvbnRlbnRSb3csIHRhaWxNb2RlKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlICdiYWNrd2FyZHMnOlxuICAgICAgICB7XG4gICAgICAgICAgLy8gV2UncmUgZ29pbmcgdG8gZmluZCB0aGUgZmlyc3Qgcm93IHRoYXQgaGFzIGV4aXN0aW5nIGNvbnRlbnQuXG4gICAgICAgICAgLy8gQXQgdGhlIHNhbWUgdGltZSB3ZSdyZSBnb2luZyB0byByZXZlcnNlIHRoZSBsaXN0IG9mIGV2ZXJ5dGhpbmdcbiAgICAgICAgICAvLyB3ZSBwYXNzIGluIHRoZSBtZWFudGltZS4gVGhhdCdzIGdvaW5nIHRvIGJlIG91ciB0YWlsIGluIHJldmVyc2VcbiAgICAgICAgICAvLyBvcmRlci5cbiAgICAgICAgICB2YXIgX3RhaWwgPSBudWxsO1xuICAgICAgICAgIHZhciByb3cgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG51bGw7XG5cbiAgICAgICAgICB3aGlsZSAocm93ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgY3VycmVudFJvdyA9IHJvdy5hbHRlcm5hdGU7IC8vIE5ldyByb3dzIGNhbid0IGJlIGNvbnRlbnQgcm93cy5cblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRSb3cgIT09IG51bGwgJiYgZmluZEZpcnN0U3VzcGVuZGVkKGN1cnJlbnRSb3cpID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGJlZ2lubmluZyBvZiB0aGUgbWFpbiBjb250ZW50LlxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJvdztcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBuZXh0Um93ID0gcm93LnNpYmxpbmc7XG4gICAgICAgICAgICByb3cuc2libGluZyA9IF90YWlsO1xuICAgICAgICAgICAgX3RhaWwgPSByb3c7XG4gICAgICAgICAgICByb3cgPSBuZXh0Um93O1xuICAgICAgICAgIH0gLy8gVE9ETzogSWYgd29ya0luUHJvZ3Jlc3MuY2hpbGQgaXMgbnVsbCwgd2UgY2FuIGNvbnRpbnVlIG9uIHRoZSB0YWlsIGltbWVkaWF0ZWx5LlxuXG5cbiAgICAgICAgICBpbml0U3VzcGVuc2VMaXN0UmVuZGVyU3RhdGUod29ya0luUHJvZ3Jlc3MsIHRydWUsIC8vIGlzQmFja3dhcmRzXG4gICAgICAgICAgX3RhaWwsIG51bGwsIC8vIGxhc3RcbiAgICAgICAgICB0YWlsTW9kZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAndG9nZXRoZXInOlxuICAgICAgICB7XG4gICAgICAgICAgaW5pdFN1c3BlbnNlTGlzdFJlbmRlclN0YXRlKHdvcmtJblByb2dyZXNzLCBmYWxzZSwgLy8gaXNCYWNrd2FyZHNcbiAgICAgICAgICBudWxsLCAvLyB0YWlsXG4gICAgICAgICAgbnVsbCwgLy8gbGFzdFxuICAgICAgICAgIHVuZGVmaW5lZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIC8vIFRoZSBkZWZhdWx0IHJldmVhbCBvcmRlciBpcyB0aGUgc2FtZSBhcyBub3QgaGF2aW5nXG4gICAgICAgICAgLy8gYSBib3VuZGFyeS5cbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cblxuZnVuY3Rpb24gdXBkYXRlUG9ydGFsQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICBwdXNoSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO1xuICB2YXIgbmV4dENoaWxkcmVuID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuXG4gIGlmIChjdXJyZW50ID09PSBudWxsKSB7XG4gICAgLy8gUG9ydGFscyBhcmUgc3BlY2lhbCBiZWNhdXNlIHdlIGRvbid0IGFwcGVuZCB0aGUgY2hpbGRyZW4gZHVyaW5nIG1vdW50XG4gICAgLy8gYnV0IGF0IGNvbW1pdC4gVGhlcmVmb3JlIHdlIG5lZWQgdG8gdHJhY2sgaW5zZXJ0aW9ucyB3aGljaCB0aGUgbm9ybWFsXG4gICAgLy8gZmxvdyBkb2Vzbid0IGRvIGR1cmluZyBtb3VudC4gVGhpcyBkb2Vzbid0IGhhcHBlbiBhdCB0aGUgcm9vdCBiZWNhdXNlXG4gICAgLy8gdGhlIHJvb3QgYWx3YXlzIHN0YXJ0cyB3aXRoIGEgXCJjdXJyZW50XCIgd2l0aCBhIG51bGwgY2hpbGQuXG4gICAgLy8gVE9ETzogQ29uc2lkZXIgdW5pZnlpbmcgdGhpcyB3aXRoIGhvdyB0aGUgcm9vdCB3b3Jrcy5cbiAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKHdvcmtJblByb2dyZXNzLCBudWxsLCBuZXh0Q2hpbGRyZW4sIHJlbmRlckxhbmVzKTtcbiAgfSBlbHNlIHtcbiAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuLCByZW5kZXJMYW5lcyk7XG4gIH1cblxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5cbnZhciBoYXNXYXJuZWRBYm91dFVzaW5nTm9WYWx1ZVByb3BPbkNvbnRleHRQcm92aWRlciA9IGZhbHNlO1xuXG5mdW5jdGlvbiB1cGRhdGVDb250ZXh0UHJvdmlkZXIoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIHZhciBwcm92aWRlclR5cGUgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICB2YXIgY29udGV4dCA9IHByb3ZpZGVyVHlwZS5fY29udGV4dDtcbiAgdmFyIG5ld1Byb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICB2YXIgb2xkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzO1xuICB2YXIgbmV3VmFsdWUgPSBuZXdQcm9wcy52YWx1ZTtcblxuICB7XG4gICAgaWYgKCEoJ3ZhbHVlJyBpbiBuZXdQcm9wcykpIHtcbiAgICAgIGlmICghaGFzV2FybmVkQWJvdXRVc2luZ05vVmFsdWVQcm9wT25Db250ZXh0UHJvdmlkZXIpIHtcbiAgICAgICAgaGFzV2FybmVkQWJvdXRVc2luZ05vVmFsdWVQcm9wT25Db250ZXh0UHJvdmlkZXIgPSB0cnVlO1xuXG4gICAgICAgIGVycm9yKCdUaGUgYHZhbHVlYCBwcm9wIGlzIHJlcXVpcmVkIGZvciB0aGUgYDxDb250ZXh0LlByb3ZpZGVyPmAuIERpZCB5b3UgbWlzc3BlbGwgaXQgb3IgZm9yZ2V0IHRvIHBhc3MgaXQ/Jyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByb3ZpZGVyUHJvcFR5cGVzID0gd29ya0luUHJvZ3Jlc3MudHlwZS5wcm9wVHlwZXM7XG5cbiAgICBpZiAocHJvdmlkZXJQcm9wVHlwZXMpIHtcbiAgICAgIGNoZWNrUHJvcFR5cGVzKHByb3ZpZGVyUHJvcFR5cGVzLCBuZXdQcm9wcywgJ3Byb3AnLCAnQ29udGV4dC5Qcm92aWRlcicpO1xuICAgIH1cbiAgfVxuXG4gIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgY29udGV4dCwgbmV3VmFsdWUpO1xuXG4gIHtcbiAgICBpZiAob2xkUHJvcHMgIT09IG51bGwpIHtcbiAgICAgIHZhciBvbGRWYWx1ZSA9IG9sZFByb3BzLnZhbHVlO1xuXG4gICAgICBpZiAob2JqZWN0SXMob2xkVmFsdWUsIG5ld1ZhbHVlKSkge1xuICAgICAgICAvLyBObyBjaGFuZ2UuIEJhaWxvdXQgZWFybHkgaWYgY2hpbGRyZW4gYXJlIHRoZSBzYW1lLlxuICAgICAgICBpZiAob2xkUHJvcHMuY2hpbGRyZW4gPT09IG5ld1Byb3BzLmNoaWxkcmVuICYmICFoYXNDb250ZXh0Q2hhbmdlZCgpKSB7XG4gICAgICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gVGhlIGNvbnRleHQgdmFsdWUgY2hhbmdlZC4gU2VhcmNoIGZvciBtYXRjaGluZyBjb25zdW1lcnMgYW5kIHNjaGVkdWxlXG4gICAgICAgIC8vIHRoZW0gdG8gdXBkYXRlLlxuICAgICAgICBwcm9wYWdhdGVDb250ZXh0Q2hhbmdlKHdvcmtJblByb2dyZXNzLCBjb250ZXh0LCByZW5kZXJMYW5lcyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIG5ld0NoaWxkcmVuID0gbmV3UHJvcHMuY2hpbGRyZW47XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXdDaGlsZHJlbiwgcmVuZGVyTGFuZXMpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5cbnZhciBoYXNXYXJuZWRBYm91dFVzaW5nQ29udGV4dEFzQ29uc3VtZXIgPSBmYWxzZTtcblxuZnVuY3Rpb24gdXBkYXRlQ29udGV4dENvbnN1bWVyKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICB2YXIgY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnR5cGU7IC8vIFRoZSBsb2dpYyBiZWxvdyBmb3IgQ29udGV4dCBkaWZmZXJzIGRlcGVuZGluZyBvbiBQUk9EIG9yIERFViBtb2RlLiBJblxuICAvLyBERVYgbW9kZSwgd2UgY3JlYXRlIGEgc2VwYXJhdGUgb2JqZWN0IGZvciBDb250ZXh0LkNvbnN1bWVyIHRoYXQgYWN0c1xuICAvLyBsaWtlIGEgcHJveHkgdG8gQ29udGV4dC4gVGhpcyBwcm94eSBvYmplY3QgYWRkcyB1bm5lY2Vzc2FyeSBjb2RlIGluIFBST0RcbiAgLy8gc28gd2UgdXNlIHRoZSBvbGQgYmVoYXZpb3VyIChDb250ZXh0LkNvbnN1bWVyIHJlZmVyZW5jZXMgQ29udGV4dCkgdG9cbiAgLy8gcmVkdWNlIHNpemUgYW5kIG92ZXJoZWFkLiBUaGUgc2VwYXJhdGUgb2JqZWN0IHJlZmVyZW5jZXMgY29udGV4dCB2aWFcbiAgLy8gYSBwcm9wZXJ0eSBjYWxsZWQgXCJfY29udGV4dFwiLCB3aGljaCBhbHNvIGdpdmVzIHVzIHRoZSBhYmlsaXR5IHRvIGNoZWNrXG4gIC8vIGluIERFViBtb2RlIGlmIHRoaXMgcHJvcGVydHkgZXhpc3RzIG9yIG5vdCBhbmQgd2FybiBpZiBpdCBkb2VzIG5vdC5cblxuICB7XG4gICAgaWYgKGNvbnRleHQuX2NvbnRleHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gVGhpcyBtYXkgYmUgYmVjYXVzZSBpdCdzIGEgQ29udGV4dCAocmF0aGVyIHRoYW4gYSBDb25zdW1lcikuXG4gICAgICAvLyBPciBpdCBtYXkgYmUgYmVjYXVzZSBpdCdzIG9sZGVyIFJlYWN0IHdoZXJlIHRoZXkncmUgdGhlIHNhbWUgdGhpbmcuXG4gICAgICAvLyBXZSBvbmx5IHdhbnQgdG8gd2FybiBpZiB3ZSdyZSBzdXJlIGl0J3MgYSBuZXcgUmVhY3QuXG4gICAgICBpZiAoY29udGV4dCAhPT0gY29udGV4dC5Db25zdW1lcikge1xuICAgICAgICBpZiAoIWhhc1dhcm5lZEFib3V0VXNpbmdDb250ZXh0QXNDb25zdW1lcikge1xuICAgICAgICAgIGhhc1dhcm5lZEFib3V0VXNpbmdDb250ZXh0QXNDb25zdW1lciA9IHRydWU7XG5cbiAgICAgICAgICBlcnJvcignUmVuZGVyaW5nIDxDb250ZXh0PiBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gJyArICdhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiBEaWQgeW91IG1lYW4gdG8gcmVuZGVyIDxDb250ZXh0LkNvbnN1bWVyPiBpbnN0ZWFkPycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRleHQgPSBjb250ZXh0Ll9jb250ZXh0O1xuICAgIH1cbiAgfVxuXG4gIHZhciBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgdmFyIHJlbmRlciA9IG5ld1Byb3BzLmNoaWxkcmVuO1xuXG4gIHtcbiAgICBpZiAodHlwZW9mIHJlbmRlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZXJyb3IoJ0EgY29udGV4dCBjb25zdW1lciB3YXMgcmVuZGVyZWQgd2l0aCBtdWx0aXBsZSBjaGlsZHJlbiwgb3IgYSBjaGlsZCAnICsgXCJ0aGF0IGlzbid0IGEgZnVuY3Rpb24uIEEgY29udGV4dCBjb25zdW1lciBleHBlY3RzIGEgc2luZ2xlIGNoaWxkIFwiICsgJ3RoYXQgaXMgYSBmdW5jdGlvbi4gSWYgeW91IGRpZCBwYXNzIGEgZnVuY3Rpb24sIG1ha2Ugc3VyZSB0aGVyZSAnICsgJ2lzIG5vIHRyYWlsaW5nIG9yIGxlYWRpbmcgd2hpdGVzcGFjZSBhcm91bmQgaXQuJyk7XG4gICAgfVxuICB9XG5cbiAgcHJlcGFyZVRvUmVhZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgdmFyIG5ld1ZhbHVlID0gcmVhZENvbnRleHQoY29udGV4dCk7XG5cbiAge1xuICAgIG1hcmtDb21wb25lbnRSZW5kZXJTdGFydGVkKHdvcmtJblByb2dyZXNzKTtcbiAgfVxuXG4gIHZhciBuZXdDaGlsZHJlbjtcblxuICB7XG4gICAgUmVhY3RDdXJyZW50T3duZXIkMS5jdXJyZW50ID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgc2V0SXNSZW5kZXJpbmcodHJ1ZSk7XG4gICAgbmV3Q2hpbGRyZW4gPSByZW5kZXIobmV3VmFsdWUpO1xuICAgIHNldElzUmVuZGVyaW5nKGZhbHNlKTtcbiAgfVxuXG4gIHtcbiAgICBtYXJrQ29tcG9uZW50UmVuZGVyU3RvcHBlZCgpO1xuICB9IC8vIFJlYWN0IERldlRvb2xzIHJlYWRzIHRoaXMgZmxhZy5cblxuXG4gIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IFBlcmZvcm1lZFdvcms7XG4gIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXdDaGlsZHJlbiwgcmVuZGVyTGFuZXMpO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG59XG5cbmZ1bmN0aW9uIG1hcmtXb3JrSW5Qcm9ncmVzc1JlY2VpdmVkVXBkYXRlKCkge1xuICBkaWRSZWNlaXZlVXBkYXRlID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmVzZXRTdXNwZW5kZWRDdXJyZW50T25Nb3VudEluTGVnYWN5TW9kZShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICBpZiAoKHdvcmtJblByb2dyZXNzLm1vZGUgJiBDb25jdXJyZW50TW9kZSkgPT09IE5vTW9kZSkge1xuICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAvLyBBIGxhenkgY29tcG9uZW50IG9ubHkgbW91bnRzIGlmIGl0IHN1c3BlbmRlZCBpbnNpZGUgYSBub24tXG4gICAgICAvLyBjb25jdXJyZW50IHRyZWUsIGluIGFuIGluY29uc2lzdGVudCBzdGF0ZS4gV2Ugd2FudCB0byB0cmVhdCBpdCBsaWtlXG4gICAgICAvLyBhIG5ldyBtb3VudCwgZXZlbiB0aG91Z2ggYW4gZW1wdHkgdmVyc2lvbiBvZiBpdCBhbHJlYWR5IGNvbW1pdHRlZC5cbiAgICAgIC8vIERpc2Nvbm5lY3QgdGhlIGFsdGVybmF0ZSBwb2ludGVycy5cbiAgICAgIGN1cnJlbnQuYWx0ZXJuYXRlID0gbnVsbDtcbiAgICAgIHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSA9IG51bGw7IC8vIFNpbmNlIHRoaXMgaXMgY29uY2VwdHVhbGx5IGEgbmV3IGZpYmVyLCBzY2hlZHVsZSBhIFBsYWNlbWVudCBlZmZlY3RcblxuICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gUGxhY2VtZW50O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICBpZiAoY3VycmVudCAhPT0gbnVsbCkge1xuICAgIC8vIFJldXNlIHByZXZpb3VzIGRlcGVuZGVuY2llc1xuICAgIHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcyA9IGN1cnJlbnQuZGVwZW5kZW5jaWVzO1xuICB9XG5cbiAge1xuICAgIC8vIERvbid0IHVwZGF0ZSBcImJhc2VcIiByZW5kZXIgdGltZXMgZm9yIGJhaWxvdXRzLlxuICAgIHN0b3BQcm9maWxlclRpbWVySWZSdW5uaW5nKCk7XG4gIH1cblxuICBtYXJrU2tpcHBlZFVwZGF0ZUxhbmVzKHdvcmtJblByb2dyZXNzLmxhbmVzKTsgLy8gQ2hlY2sgaWYgdGhlIGNoaWxkcmVuIGhhdmUgYW55IHBlbmRpbmcgd29yay5cblxuICBpZiAoIWluY2x1ZGVzU29tZUxhbmUocmVuZGVyTGFuZXMsIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpKSB7XG4gICAgLy8gVGhlIGNoaWxkcmVuIGRvbid0IGhhdmUgYW55IHdvcmsgZWl0aGVyLiBXZSBjYW4gc2tpcCB0aGVtLlxuICAgIC8vIFRPRE86IE9uY2Ugd2UgYWRkIGJhY2sgcmVzdW1pbmcsIHdlIHNob3VsZCBjaGVjayBpZiB0aGUgY2hpbGRyZW4gYXJlXG4gICAgLy8gYSB3b3JrLWluLXByb2dyZXNzIHNldC4gSWYgc28sIHdlIG5lZWQgdG8gdHJhbnNmZXIgdGhlaXIgZWZmZWN0cy5cbiAgICB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH0gLy8gVGhpcyBmaWJlciBkb2Vzbid0IGhhdmUgd29yaywgYnV0IGl0cyBzdWJ0cmVlIGRvZXMuIENsb25lIHRoZSBjaGlsZFxuICAvLyBmaWJlcnMgYW5kIGNvbnRpbnVlLlxuXG5cbiAgY2xvbmVDaGlsZEZpYmVycyhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbn1cblxuZnVuY3Rpb24gcmVtb3VudEZpYmVyKGN1cnJlbnQsIG9sZFdvcmtJblByb2dyZXNzLCBuZXdXb3JrSW5Qcm9ncmVzcykge1xuICB7XG4gICAgdmFyIHJldHVybkZpYmVyID0gb2xkV29ya0luUHJvZ3Jlc3MucmV0dXJuO1xuXG4gICAgaWYgKHJldHVybkZpYmVyID09PSBudWxsKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvcHJvZC1lcnJvci1jb2Rlc1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc3dhcCB0aGUgcm9vdCBmaWJlci4nKTtcbiAgICB9IC8vIERpc2Nvbm5lY3QgZnJvbSB0aGUgb2xkIGN1cnJlbnQuXG4gICAgLy8gSXQgd2lsbCBnZXQgZGVsZXRlZC5cblxuXG4gICAgY3VycmVudC5hbHRlcm5hdGUgPSBudWxsO1xuICAgIG9sZFdvcmtJblByb2dyZXNzLmFsdGVybmF0ZSA9IG51bGw7IC8vIENvbm5lY3QgdG8gdGhlIG5ldyB0cmVlLlxuXG4gICAgbmV3V29ya0luUHJvZ3Jlc3MuaW5kZXggPSBvbGRXb3JrSW5Qcm9ncmVzcy5pbmRleDtcbiAgICBuZXdXb3JrSW5Qcm9ncmVzcy5zaWJsaW5nID0gb2xkV29ya0luUHJvZ3Jlc3Muc2libGluZztcbiAgICBuZXdXb3JrSW5Qcm9ncmVzcy5yZXR1cm4gPSBvbGRXb3JrSW5Qcm9ncmVzcy5yZXR1cm47XG4gICAgbmV3V29ya0luUHJvZ3Jlc3MucmVmID0gb2xkV29ya0luUHJvZ3Jlc3MucmVmOyAvLyBSZXBsYWNlIHRoZSBjaGlsZC9zaWJsaW5nIHBvaW50ZXJzIGFib3ZlIGl0LlxuXG4gICAgaWYgKG9sZFdvcmtJblByb2dyZXNzID09PSByZXR1cm5GaWJlci5jaGlsZCkge1xuICAgICAgcmV0dXJuRmliZXIuY2hpbGQgPSBuZXdXb3JrSW5Qcm9ncmVzcztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZXZTaWJsaW5nID0gcmV0dXJuRmliZXIuY2hpbGQ7XG5cbiAgICAgIGlmIChwcmV2U2libGluZyA9PT0gbnVsbCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvcHJvZC1lcnJvci1jb2Rlc1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHBhcmVudCB0byBoYXZlIGEgY2hpbGQuJyk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChwcmV2U2libGluZy5zaWJsaW5nICE9PSBvbGRXb3JrSW5Qcm9ncmVzcykge1xuICAgICAgICBwcmV2U2libGluZyA9IHByZXZTaWJsaW5nLnNpYmxpbmc7XG5cbiAgICAgICAgaWYgKHByZXZTaWJsaW5nID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL3Byb2QtZXJyb3ItY29kZXNcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRvIGZpbmQgdGhlIHByZXZpb3VzIHNpYmxpbmcuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcHJldlNpYmxpbmcuc2libGluZyA9IG5ld1dvcmtJblByb2dyZXNzO1xuICAgIH0gLy8gRGVsZXRlIHRoZSBvbGQgZmliZXIgYW5kIHBsYWNlIHRoZSBuZXcgb25lLlxuICAgIC8vIFNpbmNlIHRoZSBvbGQgZmliZXIgaXMgZGlzY29ubmVjdGVkLCB3ZSBoYXZlIHRvIHNjaGVkdWxlIGl0IG1hbnVhbGx5LlxuXG5cbiAgICB2YXIgZGVsZXRpb25zID0gcmV0dXJuRmliZXIuZGVsZXRpb25zO1xuXG4gICAgaWYgKGRlbGV0aW9ucyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuRmliZXIuZGVsZXRpb25zID0gW2N1cnJlbnRdO1xuICAgICAgcmV0dXJuRmliZXIuZmxhZ3MgfD0gQ2hpbGREZWxldGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRpb25zLnB1c2goY3VycmVudCk7XG4gICAgfVxuXG4gICAgbmV3V29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gUGxhY2VtZW50OyAvLyBSZXN0YXJ0IHdvcmsgZnJvbSB0aGUgbmV3IGZpYmVyLlxuXG4gICAgcmV0dXJuIG5ld1dvcmtJblByb2dyZXNzO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0KGN1cnJlbnQsIHJlbmRlckxhbmVzKSB7XG4gIC8vIEJlZm9yZSBwZXJmb3JtaW5nIGFuIGVhcmx5IGJhaWxvdXQsIHdlIG11c3QgY2hlY2sgaWYgdGhlcmUgYXJlIHBlbmRpbmdcbiAgLy8gdXBkYXRlcyBvciBjb250ZXh0LlxuICB2YXIgdXBkYXRlTGFuZXMgPSBjdXJyZW50LmxhbmVzO1xuXG4gIGlmIChpbmNsdWRlc1NvbWVMYW5lKHVwZGF0ZUxhbmVzLCByZW5kZXJMYW5lcykpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBObyBwZW5kaW5nIHVwZGF0ZSwgYnV0IGJlY2F1c2UgY29udGV4dCBpcyBwcm9wYWdhdGVkIGxhemlseSwgd2UgbmVlZFxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gYXR0ZW1wdEVhcmx5QmFpbG91dElmTm9TY2hlZHVsZWRVcGRhdGUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIC8vIFRoaXMgZmliZXIgZG9lcyBub3QgaGF2ZSBhbnkgcGVuZGluZyB3b3JrLiBCYWlsb3V0IHdpdGhvdXQgZW50ZXJpbmdcbiAgLy8gdGhlIGJlZ2luIHBoYXNlLiBUaGVyZSdzIHN0aWxsIHNvbWUgYm9va2tlZXBpbmcgd2UgdGhhdCBuZWVkcyB0byBiZSBkb25lXG4gIC8vIGluIHRoaXMgb3B0aW1pemVkIHBhdGgsIG1vc3RseSBwdXNoaW5nIHN0dWZmIG9udG8gdGhlIHN0YWNrLlxuICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICBwdXNoSG9zdFJvb3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHZhciByb290ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuXG4gICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgIHB1c2hIb3N0Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHZhciBDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuXG4gICAgICAgIGlmIChpc0NvbnRleHRQcm92aWRlcihDb21wb25lbnQpKSB7XG4gICAgICAgICAgcHVzaENvbnRleHRQcm92aWRlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICAgIHB1c2hIb3N0Q29udGFpbmVyKHdvcmtJblByb2dyZXNzLCB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgQ29udGV4dFByb3ZpZGVyOlxuICAgICAge1xuICAgICAgICB2YXIgbmV3VmFsdWUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnR5cGUuX2NvbnRleHQ7XG4gICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcywgY29udGV4dCwgbmV3VmFsdWUpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgUHJvZmlsZXI6XG4gICAgICB7XG4gICAgICAgIC8vIFByb2ZpbGVyIHNob3VsZCBvbmx5IGNhbGwgb25SZW5kZXIgd2hlbiBvbmUgb2YgaXRzIGRlc2NlbmRhbnRzIGFjdHVhbGx5IHJlbmRlcmVkLlxuICAgICAgICB2YXIgaGFzQ2hpbGRXb3JrID0gaW5jbHVkZXNTb21lTGFuZShyZW5kZXJMYW5lcywgd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyk7XG5cbiAgICAgICAgaWYgKGhhc0NoaWxkV29yaykge1xuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IFVwZGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBSZXNldCBlZmZlY3QgZHVyYXRpb25zIGZvciB0aGUgbmV4dCBldmVudHVhbCBlZmZlY3QgcGhhc2UuXG4gICAgICAgICAgLy8gVGhlc2UgYXJlIHJlc2V0IGR1cmluZyByZW5kZXIgdG8gYWxsb3cgdGhlIERldlRvb2xzIGNvbW1pdCBob29rIGEgY2hhbmNlIHRvIHJlYWQgdGhlbSxcbiAgICAgICAgICB2YXIgc3RhdGVOb2RlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgICAgIHN0YXRlTm9kZS5lZmZlY3REdXJhdGlvbiA9IDA7XG4gICAgICAgICAgc3RhdGVOb2RlLnBhc3NpdmVFZmZlY3REdXJhdGlvbiA9IDA7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFN1c3BlbnNlQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgc3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuXG4gICAgICAgIGlmIChzdGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGlmIChzdGF0ZS5kZWh5ZHJhdGVkICE9PSBudWxsKSB7XG4gICAgICAgICAgICBwdXNoU3VzcGVuc2VDb250ZXh0KHdvcmtJblByb2dyZXNzLCBzZXREZWZhdWx0U2hhbGxvd1N1c3BlbnNlQ29udGV4dChzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpKTsgLy8gV2Uga25vdyB0aGF0IHRoaXMgY29tcG9uZW50IHdpbGwgc3VzcGVuZCBhZ2FpbiBiZWNhdXNlIGlmIGl0IGhhc1xuICAgICAgICAgICAgLy8gYmVlbiB1bnN1c3BlbmRlZCBpdCBoYXMgY29tbWl0dGVkIGFzIGEgcmVzb2x2ZWQgU3VzcGVuc2UgY29tcG9uZW50LlxuICAgICAgICAgICAgLy8gSWYgaXQgbmVlZHMgdG8gYmUgcmV0cmllZCwgaXQgc2hvdWxkIGhhdmUgd29yayBzY2hlZHVsZWQgb24gaXQuXG5cbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IERpZENhcHR1cmU7IC8vIFdlIHNob3VsZCBuZXZlciByZW5kZXIgdGhlIGNoaWxkcmVuIG9mIGEgZGVoeWRyYXRlZCBib3VuZGFyeSB1bnRpbCB3ZVxuICAgICAgICAgICAgLy8gdXBncmFkZSBpdC4gV2UgcmV0dXJuIG51bGwgaW5zdGVhZCBvZiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrLlxuXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9IC8vIElmIHRoaXMgYm91bmRhcnkgaXMgY3VycmVudGx5IHRpbWVkIG91dCwgd2UgbmVlZCB0byBkZWNpZGVcbiAgICAgICAgICAvLyB3aGV0aGVyIHRvIHJldHJ5IHRoZSBwcmltYXJ5IGNoaWxkcmVuLCBvciB0byBza2lwIG92ZXIgaXQgYW5kXG4gICAgICAgICAgLy8gZ28gc3RyYWlnaHQgdG8gdGhlIGZhbGxiYWNrLiBDaGVjayB0aGUgcHJpb3JpdHkgb2YgdGhlIHByaW1hcnlcbiAgICAgICAgICAvLyBjaGlsZCBmcmFnbWVudC5cblxuXG4gICAgICAgICAgdmFyIHByaW1hcnlDaGlsZEZyYWdtZW50ID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICAgICAgdmFyIHByaW1hcnlDaGlsZExhbmVzID0gcHJpbWFyeUNoaWxkRnJhZ21lbnQuY2hpbGRMYW5lcztcblxuICAgICAgICAgIGlmIChpbmNsdWRlc1NvbWVMYW5lKHJlbmRlckxhbmVzLCBwcmltYXJ5Q2hpbGRMYW5lcykpIHtcbiAgICAgICAgICAgIC8vIFRoZSBwcmltYXJ5IGNoaWxkcmVuIGhhdmUgcGVuZGluZyB3b3JrLiBVc2UgdGhlIG5vcm1hbCBwYXRoXG4gICAgICAgICAgICAvLyB0byBhdHRlbXB0IHRvIHJlbmRlciB0aGUgcHJpbWFyeSBjaGlsZHJlbiBhZ2Fpbi5cbiAgICAgICAgICAgIHJldHVybiB1cGRhdGVTdXNwZW5zZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGUgcHJpbWFyeSBjaGlsZCBmcmFnbWVudCBkb2VzIG5vdCBoYXZlIHBlbmRpbmcgd29yayBtYXJrZWRcbiAgICAgICAgICAgIC8vIG9uIGl0XG4gICAgICAgICAgICBwdXNoU3VzcGVuc2VDb250ZXh0KHdvcmtJblByb2dyZXNzLCBzZXREZWZhdWx0U2hhbGxvd1N1c3BlbnNlQ29udGV4dChzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpKTsgLy8gVGhlIHByaW1hcnkgY2hpbGRyZW4gZG8gbm90IGhhdmUgcGVuZGluZyB3b3JrIHdpdGggc3VmZmljaWVudFxuICAgICAgICAgICAgLy8gcHJpb3JpdHkuIEJhaWxvdXQuXG5cbiAgICAgICAgICAgIHZhciBjaGlsZCA9IGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcblxuICAgICAgICAgICAgaWYgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIC8vIFRoZSBmYWxsYmFjayBjaGlsZHJlbiBoYXZlIHBlbmRpbmcgd29yay4gU2tpcCBvdmVyIHRoZVxuICAgICAgICAgICAgICAvLyBwcmltYXJ5IGNoaWxkcmVuIGFuZCB3b3JrIG9uIHRoZSBmYWxsYmFjay5cbiAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkLnNpYmxpbmc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBOb3RlOiBXZSBjYW4gcmV0dXJuIGBudWxsYCBoZXJlIGJlY2F1c2Ugd2UgYWxyZWFkeSBjaGVja2VkXG4gICAgICAgICAgICAgIC8vIHdoZXRoZXIgdGhlcmUgd2VyZSBuZXN0ZWQgY29udGV4dCBjb25zdW1lcnMsIHZpYSB0aGUgY2FsbCB0b1xuICAgICAgICAgICAgICAvLyBgYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29ya2AgYWJvdmUuXG4gICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwdXNoU3VzcGVuc2VDb250ZXh0KHdvcmtJblByb2dyZXNzLCBzZXREZWZhdWx0U2hhbGxvd1N1c3BlbnNlQ29udGV4dChzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSBTdXNwZW5zZUxpc3RDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHZhciBkaWRTdXNwZW5kQmVmb3JlID0gKGN1cnJlbnQuZmxhZ3MgJiBEaWRDYXB0dXJlKSAhPT0gTm9GbGFncztcblxuICAgICAgICB2YXIgX2hhc0NoaWxkV29yayA9IGluY2x1ZGVzU29tZUxhbmUocmVuZGVyTGFuZXMsIHdvcmtJblByb2dyZXNzLmNoaWxkTGFuZXMpO1xuXG4gICAgICAgIGlmIChkaWRTdXNwZW5kQmVmb3JlKSB7XG4gICAgICAgICAgaWYgKF9oYXNDaGlsZFdvcmspIHtcbiAgICAgICAgICAgIC8vIElmIHNvbWV0aGluZyB3YXMgaW4gZmFsbGJhY2sgc3RhdGUgbGFzdCB0aW1lLCBhbmQgd2UgaGF2ZSBhbGwgdGhlXG4gICAgICAgICAgICAvLyBzYW1lIGNoaWxkcmVuIHRoZW4gd2UncmUgc3RpbGwgaW4gcHJvZ3Jlc3NpdmUgbG9hZGluZyBzdGF0ZS5cbiAgICAgICAgICAgIC8vIFNvbWV0aGluZyBtaWdodCBnZXQgdW5ibG9ja2VkIGJ5IHN0YXRlIHVwZGF0ZXMgb3IgcmV0cmllcyBpbiB0aGVcbiAgICAgICAgICAgIC8vIHRyZWUgd2hpY2ggd2lsbCBhZmZlY3QgdGhlIHRhaWwuIFNvIHdlIG5lZWQgdG8gdXNlIHRoZSBub3JtYWxcbiAgICAgICAgICAgIC8vIHBhdGggdG8gY29tcHV0ZSB0aGUgY29ycmVjdCB0YWlsLlxuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgICAgICAgIH0gLy8gSWYgbm9uZSBvZiB0aGUgY2hpbGRyZW4gaGFkIGFueSB3b3JrLCB0aGF0IG1lYW5zIHRoYXQgbm9uZSBvZlxuICAgICAgICAgIC8vIHRoZW0gZ290IHJldHJpZWQgc28gdGhleSdsbCBzdGlsbCBiZSBibG9ja2VkIGluIHRoZSBzYW1lIHdheVxuICAgICAgICAgIC8vIGFzIGJlZm9yZS4gV2UgY2FuIGZhc3QgYmFpbCBvdXQuXG5cblxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IERpZENhcHR1cmU7XG4gICAgICAgIH0gLy8gSWYgbm90aGluZyBzdXNwZW5kZWQgYmVmb3JlIGFuZCB3ZSdyZSByZW5kZXJpbmcgdGhlIHNhbWUgY2hpbGRyZW4sXG4gICAgICAgIC8vIHRoZW4gdGhlIHRhaWwgZG9lc24ndCBtYXR0ZXIuIEFueXRoaW5nIG5ldyB0aGF0IHN1c3BlbmRzIHdpbGwgd29ya1xuICAgICAgICAvLyBpbiB0aGUgXCJ0b2dldGhlclwiIG1vZGUsIHNvIHdlIGNhbiBjb250aW51ZSBmcm9tIHRoZSBzdGF0ZSB3ZSBoYWQuXG5cblxuICAgICAgICB2YXIgcmVuZGVyU3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuXG4gICAgICAgIGlmIChyZW5kZXJTdGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIFJlc2V0IHRvIHRoZSBcInRvZ2V0aGVyXCIgbW9kZSBpbiBjYXNlIHdlJ3ZlIHN0YXJ0ZWQgYSBkaWZmZXJlbnRcbiAgICAgICAgICAvLyB1cGRhdGUgaW4gdGhlIHBhc3QgYnV0IGRpZG4ndCBjb21wbGV0ZSBpdC5cbiAgICAgICAgICByZW5kZXJTdGF0ZS5yZW5kZXJpbmcgPSBudWxsO1xuICAgICAgICAgIHJlbmRlclN0YXRlLnRhaWwgPSBudWxsO1xuICAgICAgICAgIHJlbmRlclN0YXRlLmxhc3RFZmZlY3QgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcHVzaFN1c3BlbnNlQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgc3VzcGVuc2VTdGFja0N1cnNvci5jdXJyZW50KTtcblxuICAgICAgICBpZiAoX2hhc0NoaWxkV29yaykge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElmIG5vbmUgb2YgdGhlIGNoaWxkcmVuIGhhZCBhbnkgd29yaywgdGhhdCBtZWFucyB0aGF0IG5vbmUgb2ZcbiAgICAgICAgICAvLyB0aGVtIGdvdCByZXRyaWVkIHNvIHRoZXknbGwgc3RpbGwgYmUgYmxvY2tlZCBpbiB0aGUgc2FtZSB3YXlcbiAgICAgICAgICAvLyBhcyBiZWZvcmUuIFdlIGNhbiBmYXN0IGJhaWwgb3V0LlxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICBjYXNlIE9mZnNjcmVlbkNvbXBvbmVudDpcbiAgICBjYXNlIExlZ2FjeUhpZGRlbkNvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgLy8gTmVlZCB0byBjaGVjayBpZiB0aGUgdHJlZSBzdGlsbCBuZWVkcyB0byBiZSBkZWZlcnJlZC4gVGhpcyBpc1xuICAgICAgICAvLyBhbG1vc3QgaWRlbnRpY2FsIHRvIHRoZSBsb2dpYyB1c2VkIGluIHRoZSBub3JtYWwgdXBkYXRlIHBhdGgsXG4gICAgICAgIC8vIHNvIHdlJ2xsIGp1c3QgZW50ZXIgdGhhdC4gVGhlIG9ubHkgZGlmZmVyZW5jZSBpcyB3ZSdsbCBiYWlsIG91dFxuICAgICAgICAvLyBhdCB0aGUgbmV4dCBsZXZlbCBpbnN0ZWFkIG9mIHRoaXMgb25lLCBiZWNhdXNlIHRoZSBjaGlsZCBwcm9wc1xuICAgICAgICAvLyBoYXZlIG5vdCBjaGFuZ2VkLiBXaGljaCBpcyBmaW5lLlxuICAgICAgICAvLyBUT0RPOiBQcm9iYWJseSBzaG91bGQgcmVmYWN0b3IgYGJlZ2luV29ya2AgdG8gc3BsaXQgdGhlIGJhaWxvdXRcbiAgICAgICAgLy8gcGF0aCBmcm9tIHRoZSBub3JtYWwgcGF0aC4gSSdtIHRlbXB0ZWQgdG8gZG8gYSBsYWJlbGVkIGJyZWFrIGhlcmVcbiAgICAgICAgLy8gYnV0IEkgd29uJ3QgOilcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSBOb0xhbmVzO1xuICAgICAgICByZXR1cm4gdXBkYXRlT2Zmc2NyZWVuQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG4gICAgICB9XG4gIH1cblxuICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xufVxuXG5mdW5jdGlvbiBiZWdpbldvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKSB7XG4gIHtcbiAgICBpZiAod29ya0luUHJvZ3Jlc3MuX2RlYnVnTmVlZHNSZW1vdW50ICYmIGN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgIC8vIFRoaXMgd2lsbCByZXN0YXJ0IHRoZSBiZWdpbiBwaGFzZSB3aXRoIGEgbmV3IGZpYmVyLlxuICAgICAgcmV0dXJuIHJlbW91bnRGaWJlcihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzKHdvcmtJblByb2dyZXNzLnR5cGUsIHdvcmtJblByb2dyZXNzLmtleSwgd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLCB3b3JrSW5Qcm9ncmVzcy5fZGVidWdPd25lciB8fCBudWxsLCB3b3JrSW5Qcm9ncmVzcy5tb2RlLCB3b3JrSW5Qcm9ncmVzcy5sYW5lcykpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgdmFyIG9sZFByb3BzID0gY3VycmVudC5tZW1vaXplZFByb3BzO1xuICAgIHZhciBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcblxuICAgIGlmIChvbGRQcm9wcyAhPT0gbmV3UHJvcHMgfHwgaGFzQ29udGV4dENoYW5nZWQoKSB8fCAoIC8vIEZvcmNlIGEgcmUtcmVuZGVyIGlmIHRoZSBpbXBsZW1lbnRhdGlvbiBjaGFuZ2VkIGR1ZSB0byBob3QgcmVsb2FkOlxuICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlICE9PSBjdXJyZW50LnR5cGUgKSkge1xuICAgICAgLy8gSWYgcHJvcHMgb3IgY29udGV4dCBjaGFuZ2VkLCBtYXJrIHRoZSBmaWJlciBhcyBoYXZpbmcgcGVyZm9ybWVkIHdvcmsuXG4gICAgICAvLyBUaGlzIG1heSBiZSB1bnNldCBpZiB0aGUgcHJvcHMgYXJlIGRldGVybWluZWQgdG8gYmUgZXF1YWwgbGF0ZXIgKG1lbW8pLlxuICAgICAgZGlkUmVjZWl2ZVVwZGF0ZSA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE5laXRoZXIgcHJvcHMgbm9yIGxlZ2FjeSBjb250ZXh0IGNoYW5nZXMuIENoZWNrIGlmIHRoZXJlJ3MgYSBwZW5kaW5nXG4gICAgICAvLyB1cGRhdGUgb3IgY29udGV4dCBjaGFuZ2UuXG4gICAgICB2YXIgaGFzU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0ID0gY2hlY2tTY2hlZHVsZWRVcGRhdGVPckNvbnRleHQoY3VycmVudCwgcmVuZGVyTGFuZXMpO1xuXG4gICAgICBpZiAoIWhhc1NjaGVkdWxlZFVwZGF0ZU9yQ29udGV4dCAmJiAvLyBJZiB0aGlzIGlzIHRoZSBzZWNvbmQgcGFzcyBvZiBhbiBlcnJvciBvciBzdXNwZW5zZSBib3VuZGFyeSwgdGhlcmVcbiAgICAgIC8vIG1heSBub3QgYmUgd29yayBzY2hlZHVsZWQgb24gYGN1cnJlbnRgLCBzbyB3ZSBjaGVjayBmb3IgdGhpcyBmbGFnLlxuICAgICAgKHdvcmtJblByb2dyZXNzLmZsYWdzICYgRGlkQ2FwdHVyZSkgPT09IE5vRmxhZ3MpIHtcbiAgICAgICAgLy8gTm8gcGVuZGluZyB1cGRhdGVzIG9yIGNvbnRleHQuIEJhaWwgb3V0IG5vdy5cbiAgICAgICAgZGlkUmVjZWl2ZVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gYXR0ZW1wdEVhcmx5QmFpbG91dElmTm9TY2hlZHVsZWRVcGRhdGUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKChjdXJyZW50LmZsYWdzICYgRm9yY2VVcGRhdGVGb3JMZWdhY3lTdXNwZW5zZSkgIT09IE5vRmxhZ3MpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhIHNwZWNpYWwgY2FzZSB0aGF0IG9ubHkgZXhpc3RzIGZvciBsZWdhY3kgbW9kZS5cbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzE5MjE2LlxuICAgICAgICBkaWRSZWNlaXZlVXBkYXRlID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEFuIHVwZGF0ZSB3YXMgc2NoZWR1bGVkIG9uIHRoaXMgZmliZXIsIGJ1dCB0aGVyZSBhcmUgbm8gbmV3IHByb3BzXG4gICAgICAgIC8vIG5vciBsZWdhY3kgY29udGV4dC4gU2V0IHRoaXMgdG8gZmFsc2UuIElmIGFuIHVwZGF0ZSBxdWV1ZSBvciBjb250ZXh0XG4gICAgICAgIC8vIGNvbnN1bWVyIHByb2R1Y2VzIGEgY2hhbmdlZCB2YWx1ZSwgaXQgd2lsbCBzZXQgdGhpcyB0byB0cnVlLiBPdGhlcndpc2UsXG4gICAgICAgIC8vIHRoZSBjb21wb25lbnQgd2lsbCBhc3N1bWUgdGhlIGNoaWxkcmVuIGhhdmUgbm90IGNoYW5nZWQgYW5kIGJhaWwgb3V0LlxuICAgICAgICBkaWRSZWNlaXZlVXBkYXRlID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGRpZFJlY2VpdmVVcGRhdGUgPSBmYWxzZTtcblxuICAgIGlmIChnZXRJc0h5ZHJhdGluZygpICYmIGlzRm9ya2VkQ2hpbGQod29ya0luUHJvZ3Jlc3MpKSB7XG4gICAgICAvLyBDaGVjayBpZiB0aGlzIGNoaWxkIGJlbG9uZ3MgdG8gYSBsaXN0IG9mIG11bGlwbGUgY2hpbGRyZW4gaW5cbiAgICAgIC8vIGl0cyBwYXJlbnQuXG4gICAgICAvL1xuICAgICAgLy8gSW4gYSB0cnVlIG11bHRpLXRocmVhZGVkIGltcGxlbWVudGF0aW9uLCB3ZSB3b3VsZCByZW5kZXIgY2hpbGRyZW4gb25cbiAgICAgIC8vIHBhcmFsbGVsIHRocmVhZHMuIFRoaXMgd291bGQgcmVwcmVzZW50IHRoZSBiZWdpbm5pbmcgb2YgYSBuZXcgcmVuZGVyXG4gICAgICAvLyB0aHJlYWQgZm9yIHRoaXMgc3VidHJlZS5cbiAgICAgIC8vXG4gICAgICAvLyBXZSBvbmx5IHVzZSB0aGlzIGZvciBpZCBnZW5lcmF0aW9uIGR1cmluZyBoeWRyYXRpb24sIHdoaWNoIGlzIHdoeSB0aGVcbiAgICAgIC8vIGxvZ2ljIGlzIGxvY2F0ZWQgaW4gdGhpcyBzcGVjaWFsIGJyYW5jaC5cbiAgICAgIHZhciBzbG90SW5kZXggPSB3b3JrSW5Qcm9ncmVzcy5pbmRleDtcbiAgICAgIHZhciBudW1iZXJPZkZvcmtzID0gZ2V0Rm9ya3NBdExldmVsKCk7XG4gICAgICBwdXNoVHJlZUlkKHdvcmtJblByb2dyZXNzLCBudW1iZXJPZkZvcmtzLCBzbG90SW5kZXgpO1xuICAgIH1cbiAgfSAvLyBCZWZvcmUgZW50ZXJpbmcgdGhlIGJlZ2luIHBoYXNlLCBjbGVhciBwZW5kaW5nIHVwZGF0ZSBwcmlvcml0eS5cbiAgLy8gVE9ETzogVGhpcyBhc3N1bWVzIHRoYXQgd2UncmUgYWJvdXQgdG8gZXZhbHVhdGUgdGhlIGNvbXBvbmVudCBhbmQgcHJvY2Vzc1xuICAvLyB0aGUgdXBkYXRlIHF1ZXVlLiBIb3dldmVyLCB0aGVyZSdzIGFuIGV4Y2VwdGlvbjogU2ltcGxlTWVtb0NvbXBvbmVudFxuICAvLyBzb21ldGltZXMgYmFpbHMgb3V0IGxhdGVyIGluIHRoZSBiZWdpbiBwaGFzZS4gVGhpcyBpbmRpY2F0ZXMgdGhhdCB3ZSBzaG91bGRcbiAgLy8gbW92ZSB0aGlzIGFzc2lnbm1lbnQgb3V0IG9mIHRoZSBjb21tb24gcGF0aCBhbmQgaW50byBlYWNoIGJyYW5jaC5cblxuXG4gIHdvcmtJblByb2dyZXNzLmxhbmVzID0gTm9MYW5lcztcblxuICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgIGNhc2UgSW5kZXRlcm1pbmF0ZUNvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIG1vdW50SW5kZXRlcm1pbmF0ZUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgd29ya0luUHJvZ3Jlc3MudHlwZSwgcmVuZGVyTGFuZXMpO1xuICAgICAgfVxuXG4gICAgY2FzZSBMYXp5Q29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgZWxlbWVudFR5cGUgPSB3b3JrSW5Qcm9ncmVzcy5lbGVtZW50VHlwZTtcbiAgICAgICAgcmV0dXJuIG1vdW50TGF6eUNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgZWxlbWVudFR5cGUsIHJlbmRlckxhbmVzKTtcbiAgICAgIH1cblxuICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHZhciBDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgICB2YXIgdW5yZXNvbHZlZFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgICAgICB2YXIgcmVzb2x2ZWRQcm9wcyA9IHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlID09PSBDb21wb25lbnQgPyB1bnJlc29sdmVkUHJvcHMgOiByZXNvbHZlRGVmYXVsdFByb3BzKENvbXBvbmVudCwgdW5yZXNvbHZlZFByb3BzKTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUZ1bmN0aW9uQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBDb21wb25lbnQsIHJlc29sdmVkUHJvcHMsIHJlbmRlckxhbmVzKTtcbiAgICAgIH1cblxuICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHZhciBfQ29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgdmFyIF91bnJlc29sdmVkUHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG5cbiAgICAgICAgdmFyIF9yZXNvbHZlZFByb3BzID0gd29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUgPT09IF9Db21wb25lbnQgPyBfdW5yZXNvbHZlZFByb3BzIDogcmVzb2x2ZURlZmF1bHRQcm9wcyhfQ29tcG9uZW50LCBfdW5yZXNvbHZlZFByb3BzKTtcblxuICAgICAgICByZXR1cm4gdXBkYXRlQ2xhc3NDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIF9Db21wb25lbnQsIF9yZXNvbHZlZFByb3BzLCByZW5kZXJMYW5lcyk7XG4gICAgICB9XG5cbiAgICBjYXNlIEhvc3RSb290OlxuICAgICAgcmV0dXJuIHVwZGF0ZUhvc3RSb290KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG5cbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICByZXR1cm4gdXBkYXRlSG9zdENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuXG4gICAgY2FzZSBIb3N0VGV4dDpcbiAgICAgIHJldHVybiB1cGRhdGVIb3N0VGV4dChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG5cbiAgICBjYXNlIFN1c3BlbnNlQ29tcG9uZW50OlxuICAgICAgcmV0dXJuIHVwZGF0ZVN1c3BlbnNlQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG5cbiAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICByZXR1cm4gdXBkYXRlUG9ydGFsQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG5cbiAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICB7XG4gICAgICAgIHZhciB0eXBlID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICAgICAgdmFyIF91bnJlc29sdmVkUHJvcHMyID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuXG4gICAgICAgIHZhciBfcmVzb2x2ZWRQcm9wczIgPSB3b3JrSW5Qcm9ncmVzcy5lbGVtZW50VHlwZSA9PT0gdHlwZSA/IF91bnJlc29sdmVkUHJvcHMyIDogcmVzb2x2ZURlZmF1bHRQcm9wcyh0eXBlLCBfdW5yZXNvbHZlZFByb3BzMik7XG5cbiAgICAgICAgcmV0dXJuIHVwZGF0ZUZvcndhcmRSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHR5cGUsIF9yZXNvbHZlZFByb3BzMiwgcmVuZGVyTGFuZXMpO1xuICAgICAgfVxuXG4gICAgY2FzZSBGcmFnbWVudDpcbiAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuXG4gICAgY2FzZSBNb2RlOlxuICAgICAgcmV0dXJuIHVwZGF0ZU1vZGUoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcblxuICAgIGNhc2UgUHJvZmlsZXI6XG4gICAgICByZXR1cm4gdXBkYXRlUHJvZmlsZXIoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcblxuICAgIGNhc2UgQ29udGV4dFByb3ZpZGVyOlxuICAgICAgcmV0dXJuIHVwZGF0ZUNvbnRleHRQcm92aWRlcihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuXG4gICAgY2FzZSBDb250ZXh0Q29uc3VtZXI6XG4gICAgICByZXR1cm4gdXBkYXRlQ29udGV4dENvbnN1bWVyKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcyk7XG5cbiAgICBjYXNlIE1lbW9Db21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHZhciBfdHlwZTIgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgICB2YXIgX3VucmVzb2x2ZWRQcm9wczMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7IC8vIFJlc29sdmUgb3V0ZXIgcHJvcHMgZmlyc3QsIHRoZW4gcmVzb2x2ZSBpbm5lciBwcm9wcy5cblxuICAgICAgICB2YXIgX3Jlc29sdmVkUHJvcHMzID0gcmVzb2x2ZURlZmF1bHRQcm9wcyhfdHlwZTIsIF91bnJlc29sdmVkUHJvcHMzKTtcblxuICAgICAgICB7XG4gICAgICAgICAgaWYgKHdvcmtJblByb2dyZXNzLnR5cGUgIT09IHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlKSB7XG4gICAgICAgICAgICB2YXIgb3V0ZXJQcm9wVHlwZXMgPSBfdHlwZTIucHJvcFR5cGVzO1xuXG4gICAgICAgICAgICBpZiAob3V0ZXJQcm9wVHlwZXMpIHtcbiAgICAgICAgICAgICAgY2hlY2tQcm9wVHlwZXMob3V0ZXJQcm9wVHlwZXMsIF9yZXNvbHZlZFByb3BzMywgLy8gUmVzb2x2ZWQgZm9yIG91dGVyIG9ubHlcbiAgICAgICAgICAgICAgJ3Byb3AnLCBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoX3R5cGUyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgX3Jlc29sdmVkUHJvcHMzID0gcmVzb2x2ZURlZmF1bHRQcm9wcyhfdHlwZTIudHlwZSwgX3Jlc29sdmVkUHJvcHMzKTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZU1lbW9Db21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIF90eXBlMiwgX3Jlc29sdmVkUHJvcHMzLCByZW5kZXJMYW5lcyk7XG4gICAgICB9XG5cbiAgICBjYXNlIFNpbXBsZU1lbW9Db21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHJldHVybiB1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCB3b3JrSW5Qcm9ncmVzcy50eXBlLCB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHMsIHJlbmRlckxhbmVzKTtcbiAgICAgIH1cblxuICAgIGNhc2UgSW5jb21wbGV0ZUNsYXNzQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgX0NvbXBvbmVudDIgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgICAgICB2YXIgX3VucmVzb2x2ZWRQcm9wczQgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG5cbiAgICAgICAgdmFyIF9yZXNvbHZlZFByb3BzNCA9IHdvcmtJblByb2dyZXNzLmVsZW1lbnRUeXBlID09PSBfQ29tcG9uZW50MiA/IF91bnJlc29sdmVkUHJvcHM0IDogcmVzb2x2ZURlZmF1bHRQcm9wcyhfQ29tcG9uZW50MiwgX3VucmVzb2x2ZWRQcm9wczQpO1xuXG4gICAgICAgIHJldHVybiBtb3VudEluY29tcGxldGVDbGFzc0NvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgX0NvbXBvbmVudDIsIF9yZXNvbHZlZFByb3BzNCwgcmVuZGVyTGFuZXMpO1xuICAgICAgfVxuXG4gICAgY2FzZSBTdXNwZW5zZUxpc3RDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHJldHVybiB1cGRhdGVTdXNwZW5zZUxpc3RDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTtcbiAgICAgIH1cblxuICAgIGNhc2UgU2NvcGVDb21wb25lbnQ6XG4gICAgICB7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlIE9mZnNjcmVlbkNvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZU9mZnNjcmVlbkNvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpO1xuICAgICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biB1bml0IG9mIHdvcmsgdGFnIChcIiArIHdvcmtJblByb2dyZXNzLnRhZyArIFwiKS4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFwiICsgJ1JlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbn1cblxuZnVuY3Rpb24gbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcykge1xuICAvLyBUYWcgdGhlIGZpYmVyIHdpdGggYW4gdXBkYXRlIGVmZmVjdC4gVGhpcyB0dXJucyBhIFBsYWNlbWVudCBpbnRvXG4gIC8vIGEgUGxhY2VtZW50QW5kVXBkYXRlLlxuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSBVcGRhdGU7XG59XG5cbmZ1bmN0aW9uIG1hcmtSZWYkMSh3b3JrSW5Qcm9ncmVzcykge1xuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSBSZWY7XG5cbiAge1xuICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IFJlZlN0YXRpYztcbiAgfVxufVxuXG52YXIgYXBwZW5kQWxsQ2hpbGRyZW47XG52YXIgdXBkYXRlSG9zdENvbnRhaW5lcjtcbnZhciB1cGRhdGVIb3N0Q29tcG9uZW50JDE7XG52YXIgdXBkYXRlSG9zdFRleHQkMTtcblxue1xuICAvLyBNdXRhdGlvbiBtb2RlXG4gIGFwcGVuZEFsbENoaWxkcmVuID0gZnVuY3Rpb24gKHBhcmVudCwgd29ya0luUHJvZ3Jlc3MsIG5lZWRzVmlzaWJpbGl0eVRvZ2dsZSwgaXNIaWRkZW4pIHtcbiAgICAvLyBXZSBvbmx5IGhhdmUgdGhlIHRvcCBGaWJlciB0aGF0IHdhcyBjcmVhdGVkIGJ1dCB3ZSBuZWVkIHJlY3Vyc2UgZG93biBpdHNcbiAgICAvLyBjaGlsZHJlbiB0byBmaW5kIGFsbCB0aGUgdGVybWluYWwgbm9kZXMuXG4gICAgdmFyIG5vZGUgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcblxuICAgIHdoaWxlIChub2RlICE9PSBudWxsKSB7XG4gICAgICBpZiAobm9kZS50YWcgPT09IEhvc3RDb21wb25lbnQgfHwgbm9kZS50YWcgPT09IEhvc3RUZXh0KSB7XG4gICAgICAgIGFwcGVuZEluaXRpYWxDaGlsZChwYXJlbnQsIG5vZGUuc3RhdGVOb2RlKTtcbiAgICAgIH0gZWxzZSBpZiAobm9kZS50YWcgPT09IEhvc3RQb3J0YWwpIDsgZWxzZSBpZiAobm9kZS5jaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGU7XG4gICAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5vZGUgPT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKG5vZGUuc2libGluZyA9PT0gbnVsbCkge1xuICAgICAgICBpZiAobm9kZS5yZXR1cm4gPT09IG51bGwgfHwgbm9kZS5yZXR1cm4gPT09IHdvcmtJblByb2dyZXNzKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZSA9IG5vZGUucmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm47XG4gICAgICBub2RlID0gbm9kZS5zaWJsaW5nO1xuICAgIH1cbiAgfTtcblxuICB1cGRhdGVIb3N0Q29udGFpbmVyID0gZnVuY3Rpb24gKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7Ly8gTm9vcFxuICB9O1xuXG4gIHVwZGF0ZUhvc3RDb21wb25lbnQkMSA9IGZ1bmN0aW9uIChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgdHlwZSwgbmV3UHJvcHMsIHJvb3RDb250YWluZXJJbnN0YW5jZSkge1xuICAgIC8vIElmIHdlIGhhdmUgYW4gYWx0ZXJuYXRlLCB0aGF0IG1lYW5zIHRoaXMgaXMgYW4gdXBkYXRlIGFuZCB3ZSBuZWVkIHRvXG4gICAgLy8gc2NoZWR1bGUgYSBzaWRlLWVmZmVjdCB0byBkbyB0aGUgdXBkYXRlcy5cbiAgICB2YXIgb2xkUHJvcHMgPSBjdXJyZW50Lm1lbW9pemVkUHJvcHM7XG5cbiAgICBpZiAob2xkUHJvcHMgPT09IG5ld1Byb3BzKSB7XG4gICAgICAvLyBJbiBtdXRhdGlvbiBtb2RlLCB0aGlzIGlzIHN1ZmZpY2llbnQgZm9yIGEgYmFpbG91dCBiZWNhdXNlXG4gICAgICAvLyB3ZSB3b24ndCB0b3VjaCB0aGlzIG5vZGUgZXZlbiBpZiBjaGlsZHJlbiBjaGFuZ2VkLlxuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gSWYgd2UgZ2V0IHVwZGF0ZWQgYmVjYXVzZSBvbmUgb2Ygb3VyIGNoaWxkcmVuIHVwZGF0ZWQsIHdlIGRvbid0XG4gICAgLy8gaGF2ZSBuZXdQcm9wcyBzbyB3ZSdsbCBoYXZlIHRvIHJldXNlIHRoZW0uXG4gICAgLy8gVE9ETzogU3BsaXQgdGhlIHVwZGF0ZSBBUEkgYXMgc2VwYXJhdGUgZm9yIHRoZSBwcm9wcyB2cy4gY2hpbGRyZW4uXG4gICAgLy8gRXZlbiBiZXR0ZXIgd291bGQgYmUgaWYgY2hpbGRyZW4gd2VyZW4ndCBzcGVjaWFsIGNhc2VkIGF0IGFsbCB0aG8uXG5cblxuICAgIHZhciBpbnN0YW5jZSA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICB2YXIgY3VycmVudEhvc3RDb250ZXh0ID0gZ2V0SG9zdENvbnRleHQoKTsgLy8gVE9ETzogRXhwZXJpZW5jaW5nIGFuIGVycm9yIHdoZXJlIG9sZFByb3BzIGlzIG51bGwuIFN1Z2dlc3RzIGEgaG9zdFxuICAgIC8vIGNvbXBvbmVudCBpcyBoaXR0aW5nIHRoZSByZXN1bWUgcGF0aC4gRmlndXJlIG91dCB3aHkuIFBvc3NpYmx5XG4gICAgLy8gcmVsYXRlZCB0byBgaGlkZGVuYC5cblxuICAgIHZhciB1cGRhdGVQYXlsb2FkID0gcHJlcGFyZVVwZGF0ZShpbnN0YW5jZSwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGN1cnJlbnRIb3N0Q29udGV4dCk7IC8vIFRPRE86IFR5cGUgdGhpcyBzcGVjaWZpYyB0byB0aGlzIHR5cGUgb2YgY29tcG9uZW50LlxuXG4gICAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSB1cGRhdGVQYXlsb2FkOyAvLyBJZiB0aGUgdXBkYXRlIHBheWxvYWQgaW5kaWNhdGVzIHRoYXQgdGhlcmUgaXMgYSBjaGFuZ2Ugb3IgaWYgdGhlcmVcbiAgICAvLyBpcyBhIG5ldyByZWYgd2UgbWFyayB0aGlzIGFzIGFuIHVwZGF0ZS4gQWxsIHRoZSB3b3JrIGlzIGRvbmUgaW4gY29tbWl0V29yay5cblxuICAgIGlmICh1cGRhdGVQYXlsb2FkKSB7XG4gICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG4gIH07XG5cbiAgdXBkYXRlSG9zdFRleHQkMSA9IGZ1bmN0aW9uIChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgb2xkVGV4dCwgbmV3VGV4dCkge1xuICAgIC8vIElmIHRoZSB0ZXh0IGRpZmZlcnMsIG1hcmsgaXQgYXMgYW4gdXBkYXRlLiBBbGwgdGhlIHdvcmsgaW4gZG9uZSBpbiBjb21taXRXb3JrLlxuICAgIGlmIChvbGRUZXh0ICE9PSBuZXdUZXh0KSB7XG4gICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGN1dE9mZlRhaWxJZk5lZWRlZChyZW5kZXJTdGF0ZSwgaGFzUmVuZGVyZWRBVGFpbEZhbGxiYWNrKSB7XG4gIGlmIChnZXRJc0h5ZHJhdGluZygpKSB7XG4gICAgLy8gSWYgd2UncmUgaHlkcmF0aW5nLCB3ZSBzaG91bGQgY29uc3VtZSBhcyBtYW55IGl0ZW1zIGFzIHdlIGNhblxuICAgIC8vIHNvIHdlIGRvbid0IGxlYXZlIGFueSBiZWhpbmQuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3dpdGNoIChyZW5kZXJTdGF0ZS50YWlsTW9kZSkge1xuICAgIGNhc2UgJ2hpZGRlbic6XG4gICAgICB7XG4gICAgICAgIC8vIEFueSBpbnNlcnRpb25zIGF0IHRoZSBlbmQgb2YgdGhlIHRhaWwgbGlzdCBhZnRlciB0aGlzIHBvaW50XG4gICAgICAgIC8vIHNob3VsZCBiZSBpbnZpc2libGUuIElmIHRoZXJlIGFyZSBhbHJlYWR5IG1vdW50ZWQgYm91bmRhcmllc1xuICAgICAgICAvLyBhbnl0aGluZyBiZWZvcmUgdGhlbSBhcmUgbm90IGNvbnNpZGVyZWQgZm9yIGNvbGxhcHNpbmcuXG4gICAgICAgIC8vIFRoZXJlZm9yZSB3ZSBuZWVkIHRvIGdvIHRocm91Z2ggdGhlIHdob2xlIHRhaWwgdG8gZmluZCBpZlxuICAgICAgICAvLyB0aGVyZSBhcmUgYW55LlxuICAgICAgICB2YXIgdGFpbE5vZGUgPSByZW5kZXJTdGF0ZS50YWlsO1xuICAgICAgICB2YXIgbGFzdFRhaWxOb2RlID0gbnVsbDtcblxuICAgICAgICB3aGlsZSAodGFpbE5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAodGFpbE5vZGUuYWx0ZXJuYXRlICE9PSBudWxsKSB7XG4gICAgICAgICAgICBsYXN0VGFpbE5vZGUgPSB0YWlsTm9kZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0YWlsTm9kZSA9IHRhaWxOb2RlLnNpYmxpbmc7XG4gICAgICAgIH0gLy8gTmV4dCB3ZSdyZSBzaW1wbHkgZ29pbmcgdG8gZGVsZXRlIGFsbCBpbnNlcnRpb25zIGFmdGVyIHRoZVxuICAgICAgICAvLyBsYXN0IHJlbmRlcmVkIGl0ZW0uXG5cblxuICAgICAgICBpZiAobGFzdFRhaWxOb2RlID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gQWxsIHJlbWFpbmluZyBpdGVtcyBpbiB0aGUgdGFpbCBhcmUgaW5zZXJ0aW9ucy5cbiAgICAgICAgICByZW5kZXJTdGF0ZS50YWlsID0gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBEZXRhY2ggdGhlIGluc2VydGlvbiBhZnRlciB0aGUgbGFzdCBub2RlIHRoYXQgd2FzIGFscmVhZHlcbiAgICAgICAgICAvLyBpbnNlcnRlZC5cbiAgICAgICAgICBsYXN0VGFpbE5vZGUuc2libGluZyA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgJ2NvbGxhcHNlZCc6XG4gICAgICB7XG4gICAgICAgIC8vIEFueSBpbnNlcnRpb25zIGF0IHRoZSBlbmQgb2YgdGhlIHRhaWwgbGlzdCBhZnRlciB0aGlzIHBvaW50XG4gICAgICAgIC8vIHNob3VsZCBiZSBpbnZpc2libGUuIElmIHRoZXJlIGFyZSBhbHJlYWR5IG1vdW50ZWQgYm91bmRhcmllc1xuICAgICAgICAvLyBhbnl0aGluZyBiZWZvcmUgdGhlbSBhcmUgbm90IGNvbnNpZGVyZWQgZm9yIGNvbGxhcHNpbmcuXG4gICAgICAgIC8vIFRoZXJlZm9yZSB3ZSBuZWVkIHRvIGdvIHRocm91Z2ggdGhlIHdob2xlIHRhaWwgdG8gZmluZCBpZlxuICAgICAgICAvLyB0aGVyZSBhcmUgYW55LlxuICAgICAgICB2YXIgX3RhaWxOb2RlID0gcmVuZGVyU3RhdGUudGFpbDtcbiAgICAgICAgdmFyIF9sYXN0VGFpbE5vZGUgPSBudWxsO1xuXG4gICAgICAgIHdoaWxlIChfdGFpbE5vZGUgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAoX3RhaWxOb2RlLmFsdGVybmF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgX2xhc3RUYWlsTm9kZSA9IF90YWlsTm9kZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBfdGFpbE5vZGUgPSBfdGFpbE5vZGUuc2libGluZztcbiAgICAgICAgfSAvLyBOZXh0IHdlJ3JlIHNpbXBseSBnb2luZyB0byBkZWxldGUgYWxsIGluc2VydGlvbnMgYWZ0ZXIgdGhlXG4gICAgICAgIC8vIGxhc3QgcmVuZGVyZWQgaXRlbS5cblxuXG4gICAgICAgIGlmIChfbGFzdFRhaWxOb2RlID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gQWxsIHJlbWFpbmluZyBpdGVtcyBpbiB0aGUgdGFpbCBhcmUgaW5zZXJ0aW9ucy5cbiAgICAgICAgICBpZiAoIWhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayAmJiByZW5kZXJTdGF0ZS50YWlsICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBXZSBzdXNwZW5kZWQgZHVyaW5nIHRoZSBoZWFkLiBXZSB3YW50IHRvIHNob3cgYXQgbGVhc3Qgb25lXG4gICAgICAgICAgICAvLyByb3cgYXQgdGhlIHRhaWwuIFNvIHdlJ2xsIGtlZXAgb24gYW5kIGN1dCBvZmYgdGhlIHJlc3QuXG4gICAgICAgICAgICByZW5kZXJTdGF0ZS50YWlsLnNpYmxpbmcgPSBudWxsO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZW5kZXJTdGF0ZS50YWlsID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gRGV0YWNoIHRoZSBpbnNlcnRpb24gYWZ0ZXIgdGhlIGxhc3Qgbm9kZSB0aGF0IHdhcyBhbHJlYWR5XG4gICAgICAgICAgLy8gaW5zZXJ0ZWQuXG4gICAgICAgICAgX2xhc3RUYWlsTm9kZS5zaWJsaW5nID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGJ1YmJsZVByb3BlcnRpZXMoY29tcGxldGVkV29yaykge1xuICB2YXIgZGlkQmFpbG91dCA9IGNvbXBsZXRlZFdvcmsuYWx0ZXJuYXRlICE9PSBudWxsICYmIGNvbXBsZXRlZFdvcmsuYWx0ZXJuYXRlLmNoaWxkID09PSBjb21wbGV0ZWRXb3JrLmNoaWxkO1xuICB2YXIgbmV3Q2hpbGRMYW5lcyA9IE5vTGFuZXM7XG4gIHZhciBzdWJ0cmVlRmxhZ3MgPSBOb0ZsYWdzO1xuXG4gIGlmICghZGlkQmFpbG91dCkge1xuICAgIC8vIEJ1YmJsZSB1cCB0aGUgZWFybGllc3QgZXhwaXJhdGlvbiB0aW1lLlxuICAgIGlmICggKGNvbXBsZXRlZFdvcmsubW9kZSAmIFByb2ZpbGVNb2RlKSAhPT0gTm9Nb2RlKSB7XG4gICAgICAvLyBJbiBwcm9maWxpbmcgbW9kZSwgcmVzZXRDaGlsZEV4cGlyYXRpb25UaW1lIGlzIGFsc28gdXNlZCB0byByZXNldFxuICAgICAgLy8gcHJvZmlsZXIgZHVyYXRpb25zLlxuICAgICAgdmFyIGFjdHVhbER1cmF0aW9uID0gY29tcGxldGVkV29yay5hY3R1YWxEdXJhdGlvbjtcbiAgICAgIHZhciB0cmVlQmFzZUR1cmF0aW9uID0gY29tcGxldGVkV29yay5zZWxmQmFzZUR1cmF0aW9uO1xuICAgICAgdmFyIGNoaWxkID0gY29tcGxldGVkV29yay5jaGlsZDtcblxuICAgICAgd2hpbGUgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgICAgIG5ld0NoaWxkTGFuZXMgPSBtZXJnZUxhbmVzKG5ld0NoaWxkTGFuZXMsIG1lcmdlTGFuZXMoY2hpbGQubGFuZXMsIGNoaWxkLmNoaWxkTGFuZXMpKTtcbiAgICAgICAgc3VidHJlZUZsYWdzIHw9IGNoaWxkLnN1YnRyZWVGbGFncztcbiAgICAgICAgc3VidHJlZUZsYWdzIHw9IGNoaWxkLmZsYWdzOyAvLyBXaGVuIGEgZmliZXIgaXMgY2xvbmVkLCBpdHMgYWN0dWFsRHVyYXRpb24gaXMgcmVzZXQgdG8gMC4gVGhpcyB2YWx1ZSB3aWxsXG4gICAgICAgIC8vIG9ubHkgYmUgdXBkYXRlZCBpZiB3b3JrIGlzIGRvbmUgb24gdGhlIGZpYmVyIChpLmUuIGl0IGRvZXNuJ3QgYmFpbG91dCkuXG4gICAgICAgIC8vIFdoZW4gd29yayBpcyBkb25lLCBpdCBzaG91bGQgYnViYmxlIHRvIHRoZSBwYXJlbnQncyBhY3R1YWxEdXJhdGlvbi4gSWZcbiAgICAgICAgLy8gdGhlIGZpYmVyIGhhcyBub3QgYmVlbiBjbG9uZWQgdGhvdWdoLCAobWVhbmluZyBubyB3b3JrIHdhcyBkb25lKSwgdGhlblxuICAgICAgICAvLyB0aGlzIHZhbHVlIHdpbGwgcmVmbGVjdCB0aGUgYW1vdW50IG9mIHRpbWUgc3BlbnQgd29ya2luZyBvbiBhIHByZXZpb3VzXG4gICAgICAgIC8vIHJlbmRlci4gSW4gdGhhdCBjYXNlIGl0IHNob3VsZCBub3QgYnViYmxlLiBXZSBkZXRlcm1pbmUgd2hldGhlciBpdCB3YXNcbiAgICAgICAgLy8gY2xvbmVkIGJ5IGNvbXBhcmluZyB0aGUgY2hpbGQgcG9pbnRlci5cblxuICAgICAgICBhY3R1YWxEdXJhdGlvbiArPSBjaGlsZC5hY3R1YWxEdXJhdGlvbjtcbiAgICAgICAgdHJlZUJhc2VEdXJhdGlvbiArPSBjaGlsZC50cmVlQmFzZUR1cmF0aW9uO1xuICAgICAgICBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XG4gICAgICB9XG5cbiAgICAgIGNvbXBsZXRlZFdvcmsuYWN0dWFsRHVyYXRpb24gPSBhY3R1YWxEdXJhdGlvbjtcbiAgICAgIGNvbXBsZXRlZFdvcmsudHJlZUJhc2VEdXJhdGlvbiA9IHRyZWVCYXNlRHVyYXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBfY2hpbGQgPSBjb21wbGV0ZWRXb3JrLmNoaWxkO1xuXG4gICAgICB3aGlsZSAoX2NoaWxkICE9PSBudWxsKSB7XG4gICAgICAgIG5ld0NoaWxkTGFuZXMgPSBtZXJnZUxhbmVzKG5ld0NoaWxkTGFuZXMsIG1lcmdlTGFuZXMoX2NoaWxkLmxhbmVzLCBfY2hpbGQuY2hpbGRMYW5lcykpO1xuICAgICAgICBzdWJ0cmVlRmxhZ3MgfD0gX2NoaWxkLnN1YnRyZWVGbGFncztcbiAgICAgICAgc3VidHJlZUZsYWdzIHw9IF9jaGlsZC5mbGFnczsgLy8gVXBkYXRlIHRoZSByZXR1cm4gcG9pbnRlciBzbyB0aGUgdHJlZSBpcyBjb25zaXN0ZW50LiBUaGlzIGlzIGEgY29kZVxuICAgICAgICAvLyBzbWVsbCBiZWNhdXNlIGl0IGFzc3VtZXMgdGhlIGNvbW1pdCBwaGFzZSBpcyBuZXZlciBjb25jdXJyZW50IHdpdGhcbiAgICAgICAgLy8gdGhlIHJlbmRlciBwaGFzZS4gV2lsbCBhZGRyZXNzIGR1cmluZyByZWZhY3RvciB0byBhbHRlcm5hdGUgbW9kZWwuXG5cbiAgICAgICAgX2NoaWxkLnJldHVybiA9IGNvbXBsZXRlZFdvcms7XG4gICAgICAgIF9jaGlsZCA9IF9jaGlsZC5zaWJsaW5nO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbXBsZXRlZFdvcmsuc3VidHJlZUZsYWdzIHw9IHN1YnRyZWVGbGFncztcbiAgfSBlbHNlIHtcbiAgICAvLyBCdWJibGUgdXAgdGhlIGVhcmxpZXN0IGV4cGlyYXRpb24gdGltZS5cbiAgICBpZiAoIChjb21wbGV0ZWRXb3JrLm1vZGUgJiBQcm9maWxlTW9kZSkgIT09IE5vTW9kZSkge1xuICAgICAgLy8gSW4gcHJvZmlsaW5nIG1vZGUsIHJlc2V0Q2hpbGRFeHBpcmF0aW9uVGltZSBpcyBhbHNvIHVzZWQgdG8gcmVzZXRcbiAgICAgIC8vIHByb2ZpbGVyIGR1cmF0aW9ucy5cbiAgICAgIHZhciBfdHJlZUJhc2VEdXJhdGlvbiA9IGNvbXBsZXRlZFdvcmsuc2VsZkJhc2VEdXJhdGlvbjtcbiAgICAgIHZhciBfY2hpbGQyID0gY29tcGxldGVkV29yay5jaGlsZDtcblxuICAgICAgd2hpbGUgKF9jaGlsZDIgIT09IG51bGwpIHtcbiAgICAgICAgbmV3Q2hpbGRMYW5lcyA9IG1lcmdlTGFuZXMobmV3Q2hpbGRMYW5lcywgbWVyZ2VMYW5lcyhfY2hpbGQyLmxhbmVzLCBfY2hpbGQyLmNoaWxkTGFuZXMpKTsgLy8gXCJTdGF0aWNcIiBmbGFncyBzaGFyZSB0aGUgbGlmZXRpbWUgb2YgdGhlIGZpYmVyL2hvb2sgdGhleSBiZWxvbmcgdG8sXG4gICAgICAgIC8vIHNvIHdlIHNob3VsZCBidWJibGUgdGhvc2UgdXAgZXZlbiBkdXJpbmcgYSBiYWlsb3V0LiBBbGwgdGhlIG90aGVyXG4gICAgICAgIC8vIGZsYWdzIGhhdmUgYSBsaWZldGltZSBvbmx5IG9mIGEgc2luZ2xlIHJlbmRlciArIGNvbW1pdCwgc28gd2Ugc2hvdWxkXG4gICAgICAgIC8vIGlnbm9yZSB0aGVtLlxuXG4gICAgICAgIHN1YnRyZWVGbGFncyB8PSBfY2hpbGQyLnN1YnRyZWVGbGFncyAmIFN0YXRpY01hc2s7XG4gICAgICAgIHN1YnRyZWVGbGFncyB8PSBfY2hpbGQyLmZsYWdzICYgU3RhdGljTWFzaztcbiAgICAgICAgX3RyZWVCYXNlRHVyYXRpb24gKz0gX2NoaWxkMi50cmVlQmFzZUR1cmF0aW9uO1xuICAgICAgICBfY2hpbGQyID0gX2NoaWxkMi5zaWJsaW5nO1xuICAgICAgfVxuXG4gICAgICBjb21wbGV0ZWRXb3JrLnRyZWVCYXNlRHVyYXRpb24gPSBfdHJlZUJhc2VEdXJhdGlvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIF9jaGlsZDMgPSBjb21wbGV0ZWRXb3JrLmNoaWxkO1xuXG4gICAgICB3aGlsZSAoX2NoaWxkMyAhPT0gbnVsbCkge1xuICAgICAgICBuZXdDaGlsZExhbmVzID0gbWVyZ2VMYW5lcyhuZXdDaGlsZExhbmVzLCBtZXJnZUxhbmVzKF9jaGlsZDMubGFuZXMsIF9jaGlsZDMuY2hpbGRMYW5lcykpOyAvLyBcIlN0YXRpY1wiIGZsYWdzIHNoYXJlIHRoZSBsaWZldGltZSBvZiB0aGUgZmliZXIvaG9vayB0aGV5IGJlbG9uZyB0byxcbiAgICAgICAgLy8gc28gd2Ugc2hvdWxkIGJ1YmJsZSB0aG9zZSB1cCBldmVuIGR1cmluZyBhIGJhaWxvdXQuIEFsbCB0aGUgb3RoZXJcbiAgICAgICAgLy8gZmxhZ3MgaGF2ZSBhIGxpZmV0aW1lIG9ubHkgb2YgYSBzaW5nbGUgcmVuZGVyICsgY29tbWl0LCBzbyB3ZSBzaG91bGRcbiAgICAgICAgLy8gaWdub3JlIHRoZW0uXG5cbiAgICAgICAgc3VidHJlZUZsYWdzIHw9IF9jaGlsZDMuc3VidHJlZUZsYWdzICYgU3RhdGljTWFzaztcbiAgICAgICAgc3VidHJlZUZsYWdzIHw9IF9jaGlsZDMuZmxhZ3MgJiBTdGF0aWNNYXNrOyAvLyBVcGRhdGUgdGhlIHJldHVybiBwb2ludGVyIHNvIHRoZSB0cmVlIGlzIGNvbnNpc3RlbnQuIFRoaXMgaXMgYSBjb2RlXG4gICAgICAgIC8vIHNtZWxsIGJlY2F1c2UgaXQgYXNzdW1lcyB0aGUgY29tbWl0IHBoYXNlIGlzIG5ldmVyIGNvbmN1cnJlbnQgd2l0aFxuICAgICAgICAvLyB0aGUgcmVuZGVyIHBoYXNlLiBXaWxsIGFkZHJlc3MgZHVyaW5nIHJlZmFjdG9yIHRvIGFsdGVybmF0ZSBtb2RlbC5cblxuICAgICAgICBfY2hpbGQzLnJldHVybiA9IGNvbXBsZXRlZFdvcms7XG4gICAgICAgIF9jaGlsZDMgPSBfY2hpbGQzLnNpYmxpbmc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29tcGxldGVkV29yay5zdWJ0cmVlRmxhZ3MgfD0gc3VidHJlZUZsYWdzO1xuICB9XG5cbiAgY29tcGxldGVkV29yay5jaGlsZExhbmVzID0gbmV3Q2hpbGRMYW5lcztcbiAgcmV0dXJuIGRpZEJhaWxvdXQ7XG59XG5cbmZ1bmN0aW9uIGNvbXBsZXRlRGVoeWRyYXRlZFN1c3BlbnNlQm91bmRhcnkoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRTdGF0ZSkge1xuICBpZiAoaGFzVW5oeWRyYXRlZFRhaWxOb2RlcygpICYmICh3b3JrSW5Qcm9ncmVzcy5tb2RlICYgQ29uY3VycmVudE1vZGUpICE9PSBOb01vZGUgJiYgKHdvcmtJblByb2dyZXNzLmZsYWdzICYgRGlkQ2FwdHVyZSkgPT09IE5vRmxhZ3MpIHtcbiAgICB3YXJuSWZVbmh5ZHJhdGVkVGFpbE5vZGVzKHdvcmtJblByb2dyZXNzKTtcbiAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gRm9yY2VDbGllbnRSZW5kZXIgfCBJbmNvbXBsZXRlIHwgU2hvdWxkQ2FwdHVyZTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgd2FzSHlkcmF0ZWQgPSBwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG5cbiAgaWYgKG5leHRTdGF0ZSAhPT0gbnVsbCAmJiBuZXh0U3RhdGUuZGVoeWRyYXRlZCAhPT0gbnVsbCkge1xuICAgIC8vIFdlIG1pZ2h0IGJlIGluc2lkZSBhIGh5ZHJhdGlvbiBzdGF0ZSB0aGUgZmlyc3QgdGltZSB3ZSdyZSBwaWNraW5nIHVwIHRoaXNcbiAgICAvLyBTdXNwZW5zZSBib3VuZGFyeSwgYW5kIGFsc28gYWZ0ZXIgd2UndmUgcmVlbnRlcmVkIGl0IGZvciBmdXJ0aGVyIGh5ZHJhdGlvbi5cbiAgICBpZiAoY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgaWYgKCF3YXNIeWRyYXRlZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0EgZGVoeWRyYXRlZCBzdXNwZW5zZSBjb21wb25lbnQgd2FzIGNvbXBsZXRlZCB3aXRob3V0IGEgaHlkcmF0ZWQgbm9kZS4gJyArICdUaGlzIGlzIHByb2JhYmx5IGEgYnVnIGluIFJlYWN0LicpO1xuICAgICAgfVxuXG4gICAgICBwcmVwYXJlVG9IeWRyYXRlSG9zdFN1c3BlbnNlSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG5cbiAgICAgIHtcbiAgICAgICAgaWYgKCh3b3JrSW5Qcm9ncmVzcy5tb2RlICYgUHJvZmlsZU1vZGUpICE9PSBOb01vZGUpIHtcbiAgICAgICAgICB2YXIgaXNUaW1lZE91dFN1c3BlbnNlID0gbmV4dFN0YXRlICE9PSBudWxsO1xuXG4gICAgICAgICAgaWYgKGlzVGltZWRPdXRTdXNwZW5zZSkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgY291bnQgdGltZSBzcGVudCBpbiBhIHRpbWVkIG91dCBTdXNwZW5zZSBzdWJ0cmVlIGFzIHBhcnQgb2YgdGhlIGJhc2UgZHVyYXRpb24uXG4gICAgICAgICAgICB2YXIgcHJpbWFyeUNoaWxkRnJhZ21lbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcblxuICAgICAgICAgICAgaWYgKHByaW1hcnlDaGlsZEZyYWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIC8vICRGbG93Rml4TWUgRmxvdyBkb2Vzbid0IHN1cHBvcnQgdHlwZSBjYXN0aW5nIGluIGNvbWJpbmF0aW9uIHdpdGggdGhlIC09IG9wZXJhdG9yXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnRyZWVCYXNlRHVyYXRpb24gLT0gcHJpbWFyeUNoaWxkRnJhZ21lbnQudHJlZUJhc2VEdXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBXZSBtaWdodCBoYXZlIHJlZW50ZXJlZCB0aGlzIGJvdW5kYXJ5IHRvIGh5ZHJhdGUgaXQuIElmIHNvLCB3ZSBuZWVkIHRvIHJlc2V0IHRoZSBoeWRyYXRpb25cbiAgICAgIC8vIHN0YXRlIHNpbmNlIHdlJ3JlIG5vdyBleGl0aW5nIG91dCBvZiBpdC4gcG9wSHlkcmF0aW9uU3RhdGUgZG9lc24ndCBkbyB0aGF0IGZvciB1cy5cbiAgICAgIHJlc2V0SHlkcmF0aW9uU3RhdGUoKTtcblxuICAgICAgaWYgKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIERpZENhcHR1cmUpID09PSBOb0ZsYWdzKSB7XG4gICAgICAgIC8vIFRoaXMgYm91bmRhcnkgZGlkIG5vdCBzdXNwZW5kIHNvIGl0J3Mgbm93IGh5ZHJhdGVkIGFuZCB1bnN1c3BlbmRlZC5cbiAgICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gICAgICB9IC8vIElmIG5vdGhpbmcgc3VzcGVuZGVkLCB3ZSBuZWVkIHRvIHNjaGVkdWxlIGFuIGVmZmVjdCB0byBtYXJrIHRoaXMgYm91bmRhcnlcbiAgICAgIC8vIGFzIGhhdmluZyBoeWRyYXRlZCBzbyBldmVudHMga25vdyB0aGF0IHRoZXkncmUgZnJlZSB0byBiZSBpbnZva2VkLlxuICAgICAgLy8gSXQncyBhbHNvIGEgc2lnbmFsIHRvIHJlcGxheSBldmVudHMgYW5kIHRoZSBzdXNwZW5zZSBjYWxsYmFjay5cbiAgICAgIC8vIElmIHNvbWV0aGluZyBzdXNwZW5kZWQsIHNjaGVkdWxlIGFuIGVmZmVjdCB0byBhdHRhY2ggcmV0cnkgbGlzdGVuZXJzLlxuICAgICAgLy8gU28gd2UgbWlnaHQgYXMgd2VsbCBhbHdheXMgbWFyayB0aGlzLlxuXG5cbiAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IFVwZGF0ZTtcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuXG4gICAgICB7XG4gICAgICAgIGlmICgod29ya0luUHJvZ3Jlc3MubW9kZSAmIFByb2ZpbGVNb2RlKSAhPT0gTm9Nb2RlKSB7XG4gICAgICAgICAgdmFyIF9pc1RpbWVkT3V0U3VzcGVuc2UgPSBuZXh0U3RhdGUgIT09IG51bGw7XG5cbiAgICAgICAgICBpZiAoX2lzVGltZWRPdXRTdXNwZW5zZSkge1xuICAgICAgICAgICAgLy8gRG9uJ3QgY291bnQgdGltZSBzcGVudCBpbiBhIHRpbWVkIG91dCBTdXNwZW5zZSBzdWJ0cmVlIGFzIHBhcnQgb2YgdGhlIGJhc2UgZHVyYXRpb24uXG4gICAgICAgICAgICB2YXIgX3ByaW1hcnlDaGlsZEZyYWdtZW50ID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG5cbiAgICAgICAgICAgIGlmIChfcHJpbWFyeUNoaWxkRnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgLy8gJEZsb3dGaXhNZSBGbG93IGRvZXNuJ3Qgc3VwcG9ydCB0eXBlIGNhc3RpbmcgaW4gY29tYmluYXRpb24gd2l0aCB0aGUgLT0gb3BlcmF0b3JcbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MudHJlZUJhc2VEdXJhdGlvbiAtPSBfcHJpbWFyeUNoaWxkRnJhZ21lbnQudHJlZUJhc2VEdXJhdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTdWNjZXNzZnVsbHkgY29tcGxldGVkIHRoaXMgdHJlZS4gSWYgdGhpcyB3YXMgYSBmb3JjZWQgY2xpZW50IHJlbmRlcixcbiAgICAvLyB0aGVyZSBtYXkgaGF2ZSBiZWVuIHJlY292ZXJhYmxlIGVycm9ycyBkdXJpbmcgZmlyc3QgaHlkcmF0aW9uXG4gICAgLy8gYXR0ZW1wdC4gSWYgc28sIGFkZCB0aGVtIHRvIGEgcXVldWUgc28gd2UgY2FuIGxvZyB0aGVtIGluIHRoZVxuICAgIC8vIGNvbW1pdCBwaGFzZS5cbiAgICB1cGdyYWRlSHlkcmF0aW9uRXJyb3JzVG9SZWNvdmVyYWJsZSgpOyAvLyBGYWxsIHRocm91Z2ggdG8gbm9ybWFsIFN1c3BlbnNlIHBhdGhcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbXBsZXRlV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgdmFyIG5ld1Byb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzOyAvLyBOb3RlOiBUaGlzIGludGVudGlvbmFsbHkgZG9lc24ndCBjaGVjayBpZiB3ZSdyZSBoeWRyYXRpbmcgYmVjYXVzZSBjb21wYXJpbmdcbiAgLy8gdG8gdGhlIGN1cnJlbnQgdHJlZSBwcm92aWRlciBmaWJlciBpcyBqdXN0IGFzIGZhc3QgYW5kIGxlc3MgZXJyb3ItcHJvbmUuXG4gIC8vIElkZWFsbHkgd2Ugd291bGQgaGF2ZSBhIHNwZWNpYWwgdmVyc2lvbiBvZiB0aGUgd29yayBsb29wIG9ubHlcbiAgLy8gZm9yIGh5ZHJhdGlvbi5cblxuICBwb3BUcmVlQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG5cbiAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICBjYXNlIEluZGV0ZXJtaW5hdGVDb21wb25lbnQ6XG4gICAgY2FzZSBMYXp5Q29tcG9uZW50OlxuICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudDpcbiAgICBjYXNlIEZ1bmN0aW9uQ29tcG9uZW50OlxuICAgIGNhc2UgRm9yd2FyZFJlZjpcbiAgICBjYXNlIEZyYWdtZW50OlxuICAgIGNhc2UgTW9kZTpcbiAgICBjYXNlIFByb2ZpbGVyOlxuICAgIGNhc2UgQ29udGV4dENvbnN1bWVyOlxuICAgIGNhc2UgTWVtb0NvbXBvbmVudDpcbiAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgQ29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcblxuICAgICAgICBpZiAoaXNDb250ZXh0UHJvdmlkZXIoQ29tcG9uZW50KSkge1xuICAgICAgICAgIHBvcENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgIHtcbiAgICAgICAgdmFyIGZpYmVyUm9vdCA9IHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTtcbiAgICAgICAgcG9wSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHBvcFRvcExldmVsQ29udGV4dE9iamVjdCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHJlc2V0V29ya0luUHJvZ3Jlc3NWZXJzaW9ucygpO1xuXG4gICAgICAgIGlmIChmaWJlclJvb3QucGVuZGluZ0NvbnRleHQpIHtcbiAgICAgICAgICBmaWJlclJvb3QuY29udGV4dCA9IGZpYmVyUm9vdC5wZW5kaW5nQ29udGV4dDtcbiAgICAgICAgICBmaWJlclJvb3QucGVuZGluZ0NvbnRleHQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGN1cnJlbnQgPT09IG51bGwgfHwgY3VycmVudC5jaGlsZCA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIElmIHdlIGh5ZHJhdGVkLCBwb3Agc28gdGhhdCB3ZSBjYW4gZGVsZXRlIGFueSByZW1haW5pbmcgY2hpbGRyZW5cbiAgICAgICAgICAvLyB0aGF0IHdlcmVuJ3QgaHlkcmF0ZWQuXG4gICAgICAgICAgdmFyIHdhc0h5ZHJhdGVkID0gcG9wSHlkcmF0aW9uU3RhdGUod29ya0luUHJvZ3Jlc3MpO1xuXG4gICAgICAgICAgaWYgKHdhc0h5ZHJhdGVkKSB7XG4gICAgICAgICAgICAvLyBJZiB3ZSBoeWRyYXRlZCwgdGhlbiB3ZSdsbCBuZWVkIHRvIHNjaGVkdWxlIGFuIHVwZGF0ZSBmb3JcbiAgICAgICAgICAgIC8vIHRoZSBjb21taXQgc2lkZS1lZmZlY3RzIG9uIHRoZSByb290LlxuICAgICAgICAgICAgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHZhciBwcmV2U3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG5cbiAgICAgICAgICAgICAgaWYgKCAvLyBDaGVjayBpZiB0aGlzIGlzIGEgY2xpZW50IHJvb3RcbiAgICAgICAgICAgICAgIXByZXZTdGF0ZS5pc0RlaHlkcmF0ZWQgfHwgLy8gQ2hlY2sgaWYgd2UgcmV2ZXJ0ZWQgdG8gY2xpZW50IHJlbmRlcmluZyAoZS5nLiBkdWUgdG8gYW4gZXJyb3IpXG4gICAgICAgICAgICAgICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIEZvcmNlQ2xpZW50UmVuZGVyKSAhPT0gTm9GbGFncykge1xuICAgICAgICAgICAgICAgIC8vIFNjaGVkdWxlIGFuIGVmZmVjdCB0byBjbGVhciB0aGlzIGNvbnRhaW5lciBhdCB0aGUgc3RhcnQgb2YgdGhlXG4gICAgICAgICAgICAgICAgLy8gbmV4dCBjb21taXQuIFRoaXMgaGFuZGxlcyB0aGUgY2FzZSBvZiBSZWFjdCByZW5kZXJpbmcgaW50byBhXG4gICAgICAgICAgICAgICAgLy8gY29udGFpbmVyIHdpdGggcHJldmlvdXMgY2hpbGRyZW4uIEl0J3MgYWxzbyBzYWZlIHRvIGRvIGZvclxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZXMgdG9vLCBiZWNhdXNlIGN1cnJlbnQuY2hpbGQgd291bGQgb25seSBiZSBudWxsIGlmIHRoZVxuICAgICAgICAgICAgICAgIC8vIHByZXZpb3VzIHJlbmRlciB3YXMgbnVsbCAoc28gdGhlIGNvbnRhaW5lciB3b3VsZCBhbHJlYWR5XG4gICAgICAgICAgICAgICAgLy8gYmUgZW1wdHkpLlxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IFNuYXBzaG90OyAvLyBJZiB0aGlzIHdhcyBhIGZvcmNlZCBjbGllbnQgcmVuZGVyLCB0aGVyZSBtYXkgaGF2ZSBiZWVuXG4gICAgICAgICAgICAgICAgLy8gcmVjb3ZlcmFibGUgZXJyb3JzIGR1cmluZyBmaXJzdCBoeWRyYXRpb24gYXR0ZW1wdC4gSWYgc28sIGFkZFxuICAgICAgICAgICAgICAgIC8vIHRoZW0gdG8gYSBxdWV1ZSBzbyB3ZSBjYW4gbG9nIHRoZW0gaW4gdGhlIGNvbW1pdCBwaGFzZS5cblxuICAgICAgICAgICAgICAgIHVwZ3JhZGVIeWRyYXRpb25FcnJvcnNUb1JlY292ZXJhYmxlKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB1cGRhdGVIb3N0Q29udGFpbmVyKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHBvcEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgdmFyIHJvb3RDb250YWluZXJJbnN0YW5jZSA9IGdldFJvb3RIb3N0Q29udGFpbmVyKCk7XG4gICAgICAgIHZhciB0eXBlID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPT0gbnVsbCAmJiB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgIHVwZGF0ZUhvc3RDb21wb25lbnQkMShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgdHlwZSwgbmV3UHJvcHMsIHJvb3RDb250YWluZXJJbnN0YW5jZSk7XG5cbiAgICAgICAgICBpZiAoY3VycmVudC5yZWYgIT09IHdvcmtJblByb2dyZXNzLnJlZikge1xuICAgICAgICAgICAgbWFya1JlZiQxKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFuZXdQcm9wcykge1xuICAgICAgICAgICAgaWYgKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dlIG11c3QgaGF2ZSBuZXcgcHJvcHMgZm9yIG5ldyBtb3VudHMuIFRoaXMgZXJyb3IgaXMgbGlrZWx5ICcgKyAnY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICAgICAgICAgIH0gLy8gVGhpcyBjYW4gaGFwcGVuIHdoZW4gd2UgYWJvcnQgd29yay5cblxuXG4gICAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBjdXJyZW50SG9zdENvbnRleHQgPSBnZXRIb3N0Q29udGV4dCgpOyAvLyBUT0RPOiBNb3ZlIGNyZWF0ZUluc3RhbmNlIHRvIGJlZ2luV29yayBhbmQga2VlcCBpdCBvbiBhIGNvbnRleHRcbiAgICAgICAgICAvLyBcInN0YWNrXCIgYXMgdGhlIHBhcmVudC4gVGhlbiBhcHBlbmQgY2hpbGRyZW4gYXMgd2UgZ28gaW4gYmVnaW5Xb3JrXG4gICAgICAgICAgLy8gb3IgY29tcGxldGVXb3JrIGRlcGVuZGluZyBvbiB3aGV0aGVyIHdlIHdhbnQgdG8gYWRkIHRoZW0gdG9wLT5kb3duIG9yXG4gICAgICAgICAgLy8gYm90dG9tLT51cC4gVG9wLT5kb3duIGlzIGZhc3RlciBpbiBJRTExLlxuXG4gICAgICAgICAgdmFyIF93YXNIeWRyYXRlZCA9IHBvcEh5ZHJhdGlvblN0YXRlKHdvcmtJblByb2dyZXNzKTtcblxuICAgICAgICAgIGlmIChfd2FzSHlkcmF0ZWQpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyBhbmQgY3JlYXRlSW5zdGFuY2Ugc3RlcCBpbnRvIHRoZSBiZWdpblBoYXNlXG4gICAgICAgICAgICAvLyB0byBjb25zb2xpZGF0ZS5cbiAgICAgICAgICAgIGlmIChwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlKHdvcmtJblByb2dyZXNzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGN1cnJlbnRIb3N0Q29udGV4dCkpIHtcbiAgICAgICAgICAgICAgLy8gSWYgY2hhbmdlcyB0byB0aGUgaHlkcmF0ZWQgbm9kZSBuZWVkIHRvIGJlIGFwcGxpZWQgYXQgdGhlXG4gICAgICAgICAgICAgIC8vIGNvbW1pdC1waGFzZSB3ZSBtYXJrIHRoaXMgYXMgc3VjaC5cbiAgICAgICAgICAgICAgbWFya1VwZGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGNyZWF0ZUluc3RhbmNlKHR5cGUsIG5ld1Byb3BzLCByb290Q29udGFpbmVySW5zdGFuY2UsIGN1cnJlbnRIb3N0Q29udGV4dCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgYXBwZW5kQWxsQ2hpbGRyZW4oaW5zdGFuY2UsIHdvcmtJblByb2dyZXNzLCBmYWxzZSwgZmFsc2UpO1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gaW5zdGFuY2U7IC8vIENlcnRhaW4gcmVuZGVyZXJzIHJlcXVpcmUgY29tbWl0LXRpbWUgZWZmZWN0cyBmb3IgaW5pdGlhbCBtb3VudC5cbiAgICAgICAgICAgIC8vIChlZyBET00gcmVuZGVyZXIgc3VwcG9ydHMgYXV0by1mb2N1cyBmb3IgY2VydGFpbiBlbGVtZW50cykuXG4gICAgICAgICAgICAvLyBNYWtlIHN1cmUgc3VjaCByZW5kZXJlcnMgZ2V0IHNjaGVkdWxlZCBmb3IgbGF0ZXIgd29yay5cblxuICAgICAgICAgICAgaWYgKGZpbmFsaXplSW5pdGlhbENoaWxkcmVuKGluc3RhbmNlLCB0eXBlLCBuZXdQcm9wcywgcm9vdENvbnRhaW5lckluc3RhbmNlKSkge1xuICAgICAgICAgICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAod29ya0luUHJvZ3Jlc3MucmVmICE9PSBudWxsKSB7XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIHJlZiBvbiBhIGhvc3Qgbm9kZSB3ZSBuZWVkIHRvIHNjaGVkdWxlIGEgY2FsbGJhY2tcbiAgICAgICAgICAgIG1hcmtSZWYkMSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgY2FzZSBIb3N0VGV4dDpcbiAgICAgIHtcbiAgICAgICAgdmFyIG5ld1RleHQgPSBuZXdQcm9wcztcblxuICAgICAgICBpZiAoY3VycmVudCAmJiB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgIT0gbnVsbCkge1xuICAgICAgICAgIHZhciBvbGRUZXh0ID0gY3VycmVudC5tZW1vaXplZFByb3BzOyAvLyBJZiB3ZSBoYXZlIGFuIGFsdGVybmF0ZSwgdGhhdCBtZWFucyB0aGlzIGlzIGFuIHVwZGF0ZSBhbmQgd2UgbmVlZFxuICAgICAgICAgIC8vIHRvIHNjaGVkdWxlIGEgc2lkZS1lZmZlY3QgdG8gZG8gdGhlIHVwZGF0ZXMuXG5cbiAgICAgICAgICB1cGRhdGVIb3N0VGV4dCQxKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBvbGRUZXh0LCBuZXdUZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG5ld1RleHQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZiAod29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2UgbXVzdCBoYXZlIG5ldyBwcm9wcyBmb3IgbmV3IG1vdW50cy4gVGhpcyBlcnJvciBpcyBsaWtlbHkgJyArICdjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgICAgICAgICAgfSAvLyBUaGlzIGNhbiBoYXBwZW4gd2hlbiB3ZSBhYm9ydCB3b3JrLlxuXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9yb290Q29udGFpbmVySW5zdGFuY2UgPSBnZXRSb290SG9zdENvbnRhaW5lcigpO1xuXG4gICAgICAgICAgdmFyIF9jdXJyZW50SG9zdENvbnRleHQgPSBnZXRIb3N0Q29udGV4dCgpO1xuXG4gICAgICAgICAgdmFyIF93YXNIeWRyYXRlZDIgPSBwb3BIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcyk7XG5cbiAgICAgICAgICBpZiAoX3dhc0h5ZHJhdGVkMikge1xuICAgICAgICAgICAgaWYgKHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlKHdvcmtJblByb2dyZXNzKSkge1xuICAgICAgICAgICAgICBtYXJrVXBkYXRlKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3JlYXRlVGV4dEluc3RhbmNlKG5ld1RleHQsIF9yb290Q29udGFpbmVySW5zdGFuY2UsIF9jdXJyZW50SG9zdENvbnRleHQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICBjYXNlIFN1c3BlbnNlQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICBwb3BTdXNwZW5zZUNvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB2YXIgbmV4dFN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTsgLy8gU3BlY2lhbCBwYXRoIGZvciBkZWh5ZHJhdGVkIGJvdW5kYXJpZXMuIFdlIG1heSBldmVudHVhbGx5IG1vdmUgdGhpc1xuICAgICAgICAvLyB0byBpdHMgb3duIGZpYmVyIHR5cGUgc28gdGhhdCB3ZSBjYW4gYWRkIG90aGVyIGtpbmRzIG9mIGh5ZHJhdGlvblxuICAgICAgICAvLyBib3VuZGFyaWVzIHRoYXQgYXJlbid0IGFzc29jaWF0ZWQgd2l0aCBhIFN1c3BlbnNlIHRyZWUuIEluIGFudGljaXBhdGlvblxuICAgICAgICAvLyBvZiBzdWNoIGEgcmVmYWN0b3IsIGFsbCB0aGUgaHlkcmF0aW9uIGxvZ2ljIGlzIGNvbnRhaW5lZCBpblxuICAgICAgICAvLyB0aGlzIGJyYW5jaC5cblxuICAgICAgICBpZiAoY3VycmVudCA9PT0gbnVsbCB8fCBjdXJyZW50Lm1lbW9pemVkU3RhdGUgIT09IG51bGwgJiYgY3VycmVudC5tZW1vaXplZFN0YXRlLmRlaHlkcmF0ZWQgIT09IG51bGwpIHtcbiAgICAgICAgICB2YXIgZmFsbHRocm91Z2hUb05vcm1hbFN1c3BlbnNlUGF0aCA9IGNvbXBsZXRlRGVoeWRyYXRlZFN1c3BlbnNlQm91bmRhcnkoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRTdGF0ZSk7XG5cbiAgICAgICAgICBpZiAoIWZhbGx0aHJvdWdoVG9Ob3JtYWxTdXNwZW5zZVBhdGgpIHtcbiAgICAgICAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIFNob3VsZENhcHR1cmUpIHtcbiAgICAgICAgICAgICAgLy8gU3BlY2lhbCBjYXNlLiBUaGVyZSB3ZXJlIHJlbWFpbmluZyB1bmh5ZHJhdGVkIG5vZGVzLiBXZSB0cmVhdFxuICAgICAgICAgICAgICAvLyB0aGlzIGFzIGEgbWlzbWF0Y2guIFJldmVydCB0byBjbGllbnQgcmVuZGVyaW5nLlxuICAgICAgICAgICAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBEaWQgbm90IGZpbmlzaCBoeWRyYXRpbmcsIGVpdGhlciBiZWNhdXNlIHRoaXMgaXMgdGhlIGluaXRpYWxcbiAgICAgICAgICAgICAgLy8gcmVuZGVyIG9yIGJlY2F1c2Ugc29tZXRoaW5nIHN1c3BlbmRlZC5cbiAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSAvLyBDb250aW51ZSB3aXRoIHRoZSBub3JtYWwgU3VzcGVuc2UgcGF0aC5cblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIERpZENhcHR1cmUpICE9PSBOb0ZsYWdzKSB7XG4gICAgICAgICAgLy8gU29tZXRoaW5nIHN1c3BlbmRlZC4gUmUtcmVuZGVyIHdpdGggdGhlIGZhbGxiYWNrIGNoaWxkcmVuLlxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmxhbmVzID0gcmVuZGVyTGFuZXM7IC8vIERvIG5vdCByZXNldCB0aGUgZWZmZWN0IGxpc3QuXG5cbiAgICAgICAgICBpZiAoICh3b3JrSW5Qcm9ncmVzcy5tb2RlICYgUHJvZmlsZU1vZGUpICE9PSBOb01vZGUpIHtcbiAgICAgICAgICAgIHRyYW5zZmVyQWN0dWFsRHVyYXRpb24od29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgIH0gLy8gRG9uJ3QgYnViYmxlIHByb3BlcnRpZXMgaW4gdGhpcyBjYXNlLlxuXG5cbiAgICAgICAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmV4dERpZFRpbWVvdXQgPSBuZXh0U3RhdGUgIT09IG51bGw7XG4gICAgICAgIHZhciBwcmV2RGlkVGltZW91dCA9IGN1cnJlbnQgIT09IG51bGwgJiYgY3VycmVudC5tZW1vaXplZFN0YXRlICE9PSBudWxsO1xuICAgICAgICAvLyBhIHBhc3NpdmUgZWZmZWN0LCB3aGljaCBpcyB3aGVuIHdlIHByb2Nlc3MgdGhlIHRyYW5zaXRpb25zXG5cblxuICAgICAgICBpZiAobmV4dERpZFRpbWVvdXQgIT09IHByZXZEaWRUaW1lb3V0KSB7XG4gICAgICAgICAgLy8gYW4gZWZmZWN0IHRvIHRvZ2dsZSB0aGUgc3VidHJlZSdzIHZpc2liaWxpdHkuIFdoZW4gd2Ugc3dpdGNoIGZyb21cbiAgICAgICAgICAvLyBmYWxsYmFjayAtPiBwcmltYXJ5LCB0aGUgaW5uZXIgT2Zmc2NyZWVuIGZpYmVyIHNjaGVkdWxlcyB0aGlzIGVmZmVjdFxuICAgICAgICAgIC8vIGFzIHBhcnQgb2YgaXRzIG5vcm1hbCBjb21wbGV0ZSBwaGFzZS4gQnV0IHdoZW4gd2Ugc3dpdGNoIGZyb21cbiAgICAgICAgICAvLyBwcmltYXJ5IC0+IGZhbGxiYWNrLCB0aGUgaW5uZXIgT2Zmc2NyZWVuIGZpYmVyIGRvZXMgbm90IGhhdmUgYSBjb21wbGV0ZVxuICAgICAgICAgIC8vIHBoYXNlLiBTbyB3ZSBuZWVkIHRvIHNjaGVkdWxlIGl0cyBlZmZlY3QgaGVyZS5cbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFdlIGFsc28gdXNlIHRoaXMgZmxhZyB0byBjb25uZWN0L2Rpc2Nvbm5lY3QgdGhlIGVmZmVjdHMsIGJ1dCB0aGUgc2FtZVxuICAgICAgICAgIC8vIGxvZ2ljIGFwcGxpZXM6IHdoZW4gcmUtY29ubmVjdGluZywgdGhlIE9mZnNjcmVlbiBmaWJlcidzIGNvbXBsZXRlXG4gICAgICAgICAgLy8gcGhhc2Ugd2lsbCBoYW5kbGUgc2NoZWR1bGluZyB0aGUgZWZmZWN0LiBJdCdzIG9ubHkgd2hlbiB0aGUgZmFsbGJhY2tcbiAgICAgICAgICAvLyBpcyBhY3RpdmUgdGhhdCB3ZSBoYXZlIHRvIGRvIGFueXRoaW5nIHNwZWNpYWwuXG5cblxuICAgICAgICAgIGlmIChuZXh0RGlkVGltZW91dCkge1xuICAgICAgICAgICAgdmFyIF9vZmZzY3JlZW5GaWJlcjIgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICAgICAgICAgIF9vZmZzY3JlZW5GaWJlcjIuZmxhZ3MgfD0gVmlzaWJpbGl0eTsgLy8gVE9ETzogVGhpcyB3aWxsIHN0aWxsIHN1c3BlbmQgYSBzeW5jaHJvbm91cyB0cmVlIGlmIGFueXRoaW5nXG4gICAgICAgICAgICAvLyBpbiB0aGUgY29uY3VycmVudCB0cmVlIGFscmVhZHkgc3VzcGVuZGVkIGR1cmluZyB0aGlzIHJlbmRlci5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBrbm93biBidWcuXG5cbiAgICAgICAgICAgIGlmICgod29ya0luUHJvZ3Jlc3MubW9kZSAmIENvbmN1cnJlbnRNb2RlKSAhPT0gTm9Nb2RlKSB7XG4gICAgICAgICAgICAgIC8vIFRPRE86IE1vdmUgdGhpcyBiYWNrIHRvIHRocm93RXhjZXB0aW9uIGJlY2F1c2UgdGhpcyBpcyB0b28gbGF0ZVxuICAgICAgICAgICAgICAvLyBpZiB0aGlzIGlzIGEgbGFyZ2UgdHJlZSB3aGljaCBpcyBjb21tb24gZm9yIGluaXRpYWwgbG9hZHMuIFdlXG4gICAgICAgICAgICAgIC8vIGRvbid0IGtub3cgaWYgd2Ugc2hvdWxkIHJlc3RhcnQgYSByZW5kZXIgb3Igbm90IHVudGlsIHdlIGdldFxuICAgICAgICAgICAgICAvLyB0aGlzIG1hcmtlciwgYW5kIHRoaXMgaXMgdG9vIGxhdGUuXG4gICAgICAgICAgICAgIC8vIElmIHRoaXMgcmVuZGVyIGFscmVhZHkgaGFkIGEgcGluZyBvciBsb3dlciBwcmkgdXBkYXRlcyxcbiAgICAgICAgICAgICAgLy8gYW5kIHRoaXMgaXMgdGhlIGZpcnN0IHRpbWUgd2Uga25vdyB3ZSdyZSBnb2luZyB0byBzdXNwZW5kIHdlXG4gICAgICAgICAgICAgIC8vIHNob3VsZCBiZSBhYmxlIHRvIGltbWVkaWF0ZWx5IHJlc3RhcnQgZnJvbSB3aXRoaW4gdGhyb3dFeGNlcHRpb24uXG4gICAgICAgICAgICAgIHZhciBoYXNJbnZpc2libGVDaGlsZENvbnRleHQgPSBjdXJyZW50ID09PSBudWxsICYmICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrICE9PSB0cnVlIHx8ICFlbmFibGVTdXNwZW5zZUF2b2lkVGhpc0ZhbGxiYWNrKTtcblxuICAgICAgICAgICAgICBpZiAoaGFzSW52aXNpYmxlQ2hpbGRDb250ZXh0IHx8IGhhc1N1c3BlbnNlQ29udGV4dChzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQsIEludmlzaWJsZVBhcmVudFN1c3BlbnNlQ29udGV4dCkpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIHdhcyBpbiBhbiBpbnZpc2libGUgdHJlZSBvciBhIG5ldyByZW5kZXIsIHRoZW4gc2hvd2luZ1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgYm91bmRhcnkgaXMgb2suXG4gICAgICAgICAgICAgICAgcmVuZGVyRGlkU3VzcGVuZCgpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE90aGVyd2lzZSwgd2UncmUgZ29pbmcgdG8gaGF2ZSB0byBoaWRlIGNvbnRlbnQgc28gd2Ugc2hvdWxkXG4gICAgICAgICAgICAgICAgLy8gc3VzcGVuZCBmb3IgbG9uZ2VyIGlmIHBvc3NpYmxlLlxuICAgICAgICAgICAgICAgIHJlbmRlckRpZFN1c3BlbmREZWxheUlmUG9zc2libGUoKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB3YWtlYWJsZXMgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZTtcblxuICAgICAgICBpZiAod2FrZWFibGVzICE9PSBudWxsKSB7XG4gICAgICAgICAgLy8gU2NoZWR1bGUgYW4gZWZmZWN0IHRvIGF0dGFjaCBhIHJldHJ5IGxpc3RlbmVyIHRvIHRoZSBwcm9taXNlLlxuICAgICAgICAgIC8vIFRPRE86IE1vdmUgdG8gcGFzc2l2ZSBwaGFzZVxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IFVwZGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuXG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoKHdvcmtJblByb2dyZXNzLm1vZGUgJiBQcm9maWxlTW9kZSkgIT09IE5vTW9kZSkge1xuICAgICAgICAgICAgaWYgKG5leHREaWRUaW1lb3V0KSB7XG4gICAgICAgICAgICAgIC8vIERvbid0IGNvdW50IHRpbWUgc3BlbnQgaW4gYSB0aW1lZCBvdXQgU3VzcGVuc2Ugc3VidHJlZSBhcyBwYXJ0IG9mIHRoZSBiYXNlIGR1cmF0aW9uLlxuICAgICAgICAgICAgICB2YXIgcHJpbWFyeUNoaWxkRnJhZ21lbnQgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcblxuICAgICAgICAgICAgICBpZiAocHJpbWFyeUNoaWxkRnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyAkRmxvd0ZpeE1lIEZsb3cgZG9lc24ndCBzdXBwb3J0IHR5cGUgY2FzdGluZyBpbiBjb21iaW5hdGlvbiB3aXRoIHRoZSAtPSBvcGVyYXRvclxuICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLnRyZWVCYXNlRHVyYXRpb24gLT0gcHJpbWFyeUNoaWxkRnJhZ21lbnQudHJlZUJhc2VEdXJhdGlvbjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuXG4gICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAgcG9wSG9zdENvbnRhaW5lcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICB1cGRhdGVIb3N0Q29udGFpbmVyKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcblxuICAgICAgaWYgKGN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgcHJlcGFyZVBvcnRhbE1vdW50KHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtcbiAgICAgIH1cblxuICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXR1cm4gbnVsbDtcblxuICAgIGNhc2UgQ29udGV4dFByb3ZpZGVyOlxuICAgICAgLy8gUG9wIHByb3ZpZGVyIGZpYmVyXG4gICAgICB2YXIgY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnR5cGUuX2NvbnRleHQ7XG4gICAgICBwb3BQcm92aWRlcihjb250ZXh0LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgY2FzZSBJbmNvbXBsZXRlQ2xhc3NDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIC8vIFNhbWUgYXMgY2xhc3MgY29tcG9uZW50IGNhc2UuIEkgcHV0IGl0IGRvd24gaGVyZSBzbyB0aGF0IHRoZSB0YWdzIGFyZVxuICAgICAgICAvLyBzZXF1ZW50aWFsIHRvIGVuc3VyZSB0aGlzIHN3aXRjaCBpcyBjb21waWxlZCB0byBhIGp1bXAgdGFibGUuXG4gICAgICAgIHZhciBfQ29tcG9uZW50ID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcblxuICAgICAgICBpZiAoaXNDb250ZXh0UHJvdmlkZXIoX0NvbXBvbmVudCkpIHtcbiAgICAgICAgICBwb3BDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgIGNhc2UgU3VzcGVuc2VMaXN0Q29tcG9uZW50OlxuICAgICAge1xuICAgICAgICBwb3BTdXNwZW5zZUNvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB2YXIgcmVuZGVyU3RhdGUgPSB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlO1xuXG4gICAgICAgIGlmIChyZW5kZXJTdGF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIFdlJ3JlIHJ1bm5pbmcgaW4gdGhlIGRlZmF1bHQsIFwiaW5kZXBlbmRlbnRcIiBtb2RlLlxuICAgICAgICAgIC8vIFdlIGRvbid0IGRvIGFueXRoaW5nIGluIHRoaXMgbW9kZS5cbiAgICAgICAgICBidWJibGVQcm9wZXJ0aWVzKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkaWRTdXNwZW5kQWxyZWFkeSA9ICh3b3JrSW5Qcm9ncmVzcy5mbGFncyAmIERpZENhcHR1cmUpICE9PSBOb0ZsYWdzO1xuICAgICAgICB2YXIgcmVuZGVyZWRUYWlsID0gcmVuZGVyU3RhdGUucmVuZGVyaW5nO1xuXG4gICAgICAgIGlmIChyZW5kZXJlZFRhaWwgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBXZSBqdXN0IHJlbmRlcmVkIHRoZSBoZWFkLlxuICAgICAgICAgIGlmICghZGlkU3VzcGVuZEFscmVhZHkpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIGZpcnN0IHBhc3MuIFdlIG5lZWQgdG8gZmlndXJlIG91dCBpZiBhbnl0aGluZyBpcyBzdGlsbFxuICAgICAgICAgICAgLy8gc3VzcGVuZGVkIGluIHRoZSByZW5kZXJlZCBzZXQuXG4gICAgICAgICAgICAvLyBJZiBuZXcgY29udGVudCB1bnN1c3BlbmRlZCwgYnV0IHRoZXJlJ3Mgc3RpbGwgc29tZSBjb250ZW50IHRoYXRcbiAgICAgICAgICAgIC8vIGRpZG4ndC4gVGhlbiB3ZSBuZWVkIHRvIGRvIGEgc2Vjb25kIHBhc3MgdGhhdCBmb3JjZXMgZXZlcnl0aGluZ1xuICAgICAgICAgICAgLy8gdG8ga2VlcCBzaG93aW5nIHRoZWlyIGZhbGxiYWNrcy5cbiAgICAgICAgICAgIC8vIFdlIG1pZ2h0IGJlIHN1c3BlbmRlZCBpZiBzb21ldGhpbmcgaW4gdGhpcyByZW5kZXIgcGFzcyBzdXNwZW5kZWQsIG9yXG4gICAgICAgICAgICAvLyBzb21ldGhpbmcgaW4gdGhlIHByZXZpb3VzIGNvbW1pdHRlZCBwYXNzIHN1c3BlbmRlZC4gT3RoZXJ3aXNlLFxuICAgICAgICAgICAgLy8gdGhlcmUncyBubyBjaGFuY2Ugc28gd2UgY2FuIHNraXAgdGhlIGV4cGVuc2l2ZSBjYWxsIHRvXG4gICAgICAgICAgICAvLyBmaW5kRmlyc3RTdXNwZW5kZWQuXG4gICAgICAgICAgICB2YXIgY2Fubm90QmVTdXNwZW5kZWQgPSByZW5kZXJIYXNOb3RTdXNwZW5kZWRZZXQoKSAmJiAoY3VycmVudCA9PT0gbnVsbCB8fCAoY3VycmVudC5mbGFncyAmIERpZENhcHR1cmUpID09PSBOb0ZsYWdzKTtcblxuICAgICAgICAgICAgaWYgKCFjYW5ub3RCZVN1c3BlbmRlZCkge1xuICAgICAgICAgICAgICB2YXIgcm93ID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG5cbiAgICAgICAgICAgICAgd2hpbGUgKHJvdyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHZhciBzdXNwZW5kZWQgPSBmaW5kRmlyc3RTdXNwZW5kZWQocm93KTtcblxuICAgICAgICAgICAgICAgIGlmIChzdXNwZW5kZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIGRpZFN1c3BlbmRBbHJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IERpZENhcHR1cmU7XG4gICAgICAgICAgICAgICAgICBjdXRPZmZUYWlsSWZOZWVkZWQocmVuZGVyU3RhdGUsIGZhbHNlKTsgLy8gSWYgdGhpcyBpcyBhIG5ld2x5IHN1c3BlbmRlZCB0cmVlLCBpdCBtaWdodCBub3QgZ2V0IGNvbW1pdHRlZCBhc1xuICAgICAgICAgICAgICAgICAgLy8gcGFydCBvZiB0aGUgc2Vjb25kIHBhc3MuIEluIHRoYXQgY2FzZSBub3RoaW5nIHdpbGwgc3Vic2NyaWJlIHRvXG4gICAgICAgICAgICAgICAgICAvLyBpdHMgdGhlbmFibGVzLiBJbnN0ZWFkLCB3ZSdsbCB0cmFuc2ZlciBpdHMgdGhlbmFibGVzIHRvIHRoZVxuICAgICAgICAgICAgICAgICAgLy8gU3VzcGVuc2VMaXN0IHNvIHRoYXQgaXQgY2FuIHJldHJ5IGlmIHRoZXkgcmVzb2x2ZS5cbiAgICAgICAgICAgICAgICAgIC8vIFRoZXJlIG1pZ2h0IGJlIG11bHRpcGxlIG9mIHRoZXNlIGluIHRoZSBsaXN0IGJ1dCBzaW5jZSB3ZSdyZVxuICAgICAgICAgICAgICAgICAgLy8gZ29pbmcgdG8gd2FpdCBmb3IgYWxsIG9mIHRoZW0gYW55d2F5LCBpdCBkb2Vzbid0IHJlYWxseSBtYXR0ZXJcbiAgICAgICAgICAgICAgICAgIC8vIHdoaWNoIG9uZXMgZ2V0cyB0byBwaW5nLiBJbiB0aGVvcnkgd2UgY291bGQgZ2V0IGNsZXZlciBhbmQga2VlcFxuICAgICAgICAgICAgICAgICAgLy8gdHJhY2sgb2YgaG93IG1hbnkgZGVwZW5kZW5jaWVzIHJlbWFpbiBidXQgaXQgZ2V0cyB0cmlja3kgYmVjYXVzZVxuICAgICAgICAgICAgICAgICAgLy8gaW4gdGhlIG1lYW50aW1lLCB3ZSBjYW4gYWRkL3JlbW92ZS9jaGFuZ2UgaXRlbXMgYW5kIGRlcGVuZGVuY2llcy5cbiAgICAgICAgICAgICAgICAgIC8vIFdlIG1pZ2h0IGJhaWwgb3V0IG9mIHRoZSBsb29wIGJlZm9yZSBmaW5kaW5nIGFueSBidXQgdGhhdFxuICAgICAgICAgICAgICAgICAgLy8gZG9lc24ndCBtYXR0ZXIgc2luY2UgdGhhdCBtZWFucyB0aGF0IHRoZSBvdGhlciBib3VuZGFyaWVzIHRoYXRcbiAgICAgICAgICAgICAgICAgIC8vIHdlIGRpZCBmaW5kIGFscmVhZHkgaGFzIHRoZWlyIGxpc3RlbmVycyBhdHRhY2hlZC5cblxuICAgICAgICAgICAgICAgICAgdmFyIG5ld1RoZW5hYmxlcyA9IHN1c3BlbmRlZC51cGRhdGVRdWV1ZTtcblxuICAgICAgICAgICAgICAgICAgaWYgKG5ld1RoZW5hYmxlcyAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IG5ld1RoZW5hYmxlcztcbiAgICAgICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gVXBkYXRlO1xuICAgICAgICAgICAgICAgICAgfSAvLyBSZXJlbmRlciB0aGUgd2hvbGUgbGlzdCwgYnV0IHRoaXMgdGltZSwgd2UnbGwgZm9yY2UgZmFsbGJhY2tzXG4gICAgICAgICAgICAgICAgICAvLyB0byBzdGF5IGluIHBsYWNlLlxuICAgICAgICAgICAgICAgICAgLy8gUmVzZXQgdGhlIGVmZmVjdCBmbGFncyBiZWZvcmUgZG9pbmcgdGhlIHNlY29uZCBwYXNzIHNpbmNlIHRoYXQncyBub3cgaW52YWxpZC5cbiAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IHRoZSBjaGlsZCBmaWJlcnMgdG8gdGhlaXIgb3JpZ2luYWwgc3RhdGUuXG5cblxuICAgICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gTm9GbGFncztcbiAgICAgICAgICAgICAgICAgIHJlc2V0Q2hpbGRGaWJlcnMod29ya0luUHJvZ3Jlc3MsIHJlbmRlckxhbmVzKTsgLy8gU2V0IHVwIHRoZSBTdXNwZW5zZSBDb250ZXh0IHRvIGZvcmNlIHN1c3BlbnNlIGFuZCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICAgICAgLy8gcmVyZW5kZXIgdGhlIGNoaWxkcmVuLlxuXG4gICAgICAgICAgICAgICAgICBwdXNoU3VzcGVuc2VDb250ZXh0KHdvcmtJblByb2dyZXNzLCBzZXRTaGFsbG93U3VzcGVuc2VDb250ZXh0KHN1c3BlbnNlU3RhY2tDdXJzb3IuY3VycmVudCwgRm9yY2VTdXNwZW5zZUZhbGxiYWNrKSk7IC8vIERvbid0IGJ1YmJsZSBwcm9wZXJ0aWVzIGluIHRoaXMgY2FzZS5cblxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJvdyA9IHJvdy5zaWJsaW5nO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXJTdGF0ZS50YWlsICE9PSBudWxsICYmIG5vdygpID4gZ2V0UmVuZGVyVGFyZ2V0VGltZSgpKSB7XG4gICAgICAgICAgICAgIC8vIFdlIGhhdmUgYWxyZWFkeSBwYXNzZWQgb3VyIENQVSBkZWFkbGluZSBidXQgd2Ugc3RpbGwgaGF2ZSByb3dzXG4gICAgICAgICAgICAgIC8vIGxlZnQgaW4gdGhlIHRhaWwuIFdlJ2xsIGp1c3QgZ2l2ZSB1cCBmdXJ0aGVyIGF0dGVtcHRzIHRvIHJlbmRlclxuICAgICAgICAgICAgICAvLyB0aGUgbWFpbiBjb250ZW50IGFuZCBvbmx5IHJlbmRlciBmYWxsYmFja3MuXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmZsYWdzIHw9IERpZENhcHR1cmU7XG4gICAgICAgICAgICAgIGRpZFN1c3BlbmRBbHJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgY3V0T2ZmVGFpbElmTmVlZGVkKHJlbmRlclN0YXRlLCBmYWxzZSk7IC8vIFNpbmNlIG5vdGhpbmcgYWN0dWFsbHkgc3VzcGVuZGVkLCB0aGVyZSB3aWxsIG5vdGhpbmcgdG8gcGluZyB0aGlzXG4gICAgICAgICAgICAgIC8vIHRvIGdldCBpdCBzdGFydGVkIGJhY2sgdXAgdG8gYXR0ZW1wdCB0aGUgbmV4dCBpdGVtLiBXaGlsZSBpbiB0ZXJtc1xuICAgICAgICAgICAgICAvLyBvZiBwcmlvcml0eSB0aGlzIHdvcmsgaGFzIHRoZSBzYW1lIHByaW9yaXR5IGFzIHRoaXMgY3VycmVudCByZW5kZXIsXG4gICAgICAgICAgICAgIC8vIGl0J3Mgbm90IHBhcnQgb2YgdGhlIHNhbWUgdHJhbnNpdGlvbiBvbmNlIHRoZSB0cmFuc2l0aW9uIGhhc1xuICAgICAgICAgICAgICAvLyBjb21taXR0ZWQuIElmIGl0J3Mgc3luYywgd2Ugc3RpbGwgd2FudCB0byB5aWVsZCBzbyB0aGF0IGl0IGNhbiBiZVxuICAgICAgICAgICAgICAvLyBwYWludGVkLiBDb25jZXB0dWFsbHksIHRoaXMgaXMgcmVhbGx5IHRoZSBzYW1lIGFzIHBpbmdpbmcuXG4gICAgICAgICAgICAgIC8vIFdlIGNhbiB1c2UgYW55IFJldHJ5TGFuZSBldmVuIGlmIGl0J3MgdGhlIG9uZSBjdXJyZW50bHkgcmVuZGVyaW5nXG4gICAgICAgICAgICAgIC8vIHNpbmNlIHdlJ3JlIGxlYXZpbmcgaXQgYmVoaW5kIG9uIHRoaXMgbm9kZS5cblxuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IFNvbWVSZXRyeUxhbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1dE9mZlRhaWxJZk5lZWRlZChyZW5kZXJTdGF0ZSwgZmFsc2UpO1xuICAgICAgICAgIH0gLy8gTmV4dCB3ZSdyZSBnb2luZyB0byByZW5kZXIgdGhlIHRhaWwuXG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBBcHBlbmQgdGhlIHJlbmRlcmVkIHJvdyB0byB0aGUgY2hpbGQgbGlzdC5cbiAgICAgICAgICBpZiAoIWRpZFN1c3BlbmRBbHJlYWR5KSB7XG4gICAgICAgICAgICB2YXIgX3N1c3BlbmRlZCA9IGZpbmRGaXJzdFN1c3BlbmRlZChyZW5kZXJlZFRhaWwpO1xuXG4gICAgICAgICAgICBpZiAoX3N1c3BlbmRlZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyB8PSBEaWRDYXB0dXJlO1xuICAgICAgICAgICAgICBkaWRTdXNwZW5kQWxyZWFkeSA9IHRydWU7IC8vIEVuc3VyZSB3ZSB0cmFuc2ZlciB0aGUgdXBkYXRlIHF1ZXVlIHRvIHRoZSBwYXJlbnQgc28gdGhhdCBpdCBkb2Vzbid0XG4gICAgICAgICAgICAgIC8vIGdldCBsb3N0IGlmIHRoaXMgcm93IGVuZHMgdXAgZHJvcHBlZCBkdXJpbmcgYSBzZWNvbmQgcGFzcy5cblxuICAgICAgICAgICAgICB2YXIgX25ld1RoZW5hYmxlcyA9IF9zdXNwZW5kZWQudXBkYXRlUXVldWU7XG5cbiAgICAgICAgICAgICAgaWYgKF9uZXdUaGVuYWJsZXMgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IF9uZXdUaGVuYWJsZXM7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gVXBkYXRlO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY3V0T2ZmVGFpbElmTmVlZGVkKHJlbmRlclN0YXRlLCB0cnVlKTsgLy8gVGhpcyBtaWdodCBoYXZlIGJlZW4gbW9kaWZpZWQuXG5cbiAgICAgICAgICAgICAgaWYgKHJlbmRlclN0YXRlLnRhaWwgPT09IG51bGwgJiYgcmVuZGVyU3RhdGUudGFpbE1vZGUgPT09ICdoaWRkZW4nICYmICFyZW5kZXJlZFRhaWwuYWx0ZXJuYXRlICYmICFnZXRJc0h5ZHJhdGluZygpIC8vIFdlIGRvbid0IGN1dCBpdCBpZiB3ZSdyZSBoeWRyYXRpbmcuXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgLy8gV2UncmUgZG9uZS5cbiAgICAgICAgICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICggLy8gVGhlIHRpbWUgaXQgdG9vayB0byByZW5kZXIgbGFzdCByb3cgaXMgZ3JlYXRlciB0aGFuIHRoZSByZW1haW5pbmdcbiAgICAgICAgICAgIC8vIHRpbWUgd2UgaGF2ZSB0byByZW5kZXIuIFNvIHJlbmRlcmluZyBvbmUgbW9yZSByb3cgd291bGQgbGlrZWx5XG4gICAgICAgICAgICAvLyBleGNlZWQgaXQuXG4gICAgICAgICAgICBub3coKSAqIDIgLSByZW5kZXJTdGF0ZS5yZW5kZXJpbmdTdGFydFRpbWUgPiBnZXRSZW5kZXJUYXJnZXRUaW1lKCkgJiYgcmVuZGVyTGFuZXMgIT09IE9mZnNjcmVlbkxhbmUpIHtcbiAgICAgICAgICAgICAgLy8gV2UgaGF2ZSBub3cgcGFzc2VkIG91ciBDUFUgZGVhZGxpbmUgYW5kIHdlJ2xsIGp1c3QgZ2l2ZSB1cCBmdXJ0aGVyXG4gICAgICAgICAgICAgIC8vIGF0dGVtcHRzIHRvIHJlbmRlciB0aGUgbWFpbiBjb250ZW50IGFuZCBvbmx5IHJlbmRlciBmYWxsYmFja3MuXG4gICAgICAgICAgICAgIC8vIFRoZSBhc3N1bXB0aW9uIGlzIHRoYXQgdGhpcyBpcyB1c3VhbGx5IGZhc3Rlci5cbiAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gRGlkQ2FwdHVyZTtcbiAgICAgICAgICAgICAgZGlkU3VzcGVuZEFscmVhZHkgPSB0cnVlO1xuICAgICAgICAgICAgICBjdXRPZmZUYWlsSWZOZWVkZWQocmVuZGVyU3RhdGUsIGZhbHNlKTsgLy8gU2luY2Ugbm90aGluZyBhY3R1YWxseSBzdXNwZW5kZWQsIHRoZXJlIHdpbGwgbm90aGluZyB0byBwaW5nIHRoaXNcbiAgICAgICAgICAgICAgLy8gdG8gZ2V0IGl0IHN0YXJ0ZWQgYmFjayB1cCB0byBhdHRlbXB0IHRoZSBuZXh0IGl0ZW0uIFdoaWxlIGluIHRlcm1zXG4gICAgICAgICAgICAgIC8vIG9mIHByaW9yaXR5IHRoaXMgd29yayBoYXMgdGhlIHNhbWUgcHJpb3JpdHkgYXMgdGhpcyBjdXJyZW50IHJlbmRlcixcbiAgICAgICAgICAgICAgLy8gaXQncyBub3QgcGFydCBvZiB0aGUgc2FtZSB0cmFuc2l0aW9uIG9uY2UgdGhlIHRyYW5zaXRpb24gaGFzXG4gICAgICAgICAgICAgIC8vIGNvbW1pdHRlZC4gSWYgaXQncyBzeW5jLCB3ZSBzdGlsbCB3YW50IHRvIHlpZWxkIHNvIHRoYXQgaXQgY2FuIGJlXG4gICAgICAgICAgICAgIC8vIHBhaW50ZWQuIENvbmNlcHR1YWxseSwgdGhpcyBpcyByZWFsbHkgdGhlIHNhbWUgYXMgcGluZ2luZy5cbiAgICAgICAgICAgICAgLy8gV2UgY2FuIHVzZSBhbnkgUmV0cnlMYW5lIGV2ZW4gaWYgaXQncyB0aGUgb25lIGN1cnJlbnRseSByZW5kZXJpbmdcbiAgICAgICAgICAgICAgLy8gc2luY2Ugd2UncmUgbGVhdmluZyBpdCBiZWhpbmQgb24gdGhpcyBub2RlLlxuXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLmxhbmVzID0gU29tZVJldHJ5TGFuZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAocmVuZGVyU3RhdGUuaXNCYWNrd2FyZHMpIHtcbiAgICAgICAgICAgIC8vIFRoZSBlZmZlY3QgbGlzdCBvZiB0aGUgYmFja3dhcmRzIHRhaWwgd2lsbCBoYXZlIGJlZW4gYWRkZWRcbiAgICAgICAgICAgIC8vIHRvIHRoZSBlbmQuIFRoaXMgYnJlYWtzIHRoZSBndWFyYW50ZWUgdGhhdCBsaWZlLWN5Y2xlcyBmaXJlIGluXG4gICAgICAgICAgICAvLyBzaWJsaW5nIG9yZGVyIGJ1dCB0aGF0IGlzbid0IGEgc3Ryb25nIGd1YXJhbnRlZSBwcm9taXNlZCBieSBSZWFjdC5cbiAgICAgICAgICAgIC8vIEVzcGVjaWFsbHkgc2luY2UgdGhlc2UgbWlnaHQgYWxzbyBqdXN0IHBvcCBpbiBkdXJpbmcgZnV0dXJlIGNvbW1pdHMuXG4gICAgICAgICAgICAvLyBBcHBlbmQgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGUgbGlzdC5cbiAgICAgICAgICAgIHJlbmRlcmVkVGFpbC5zaWJsaW5nID0gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlbmRlcmVkVGFpbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHByZXZpb3VzU2libGluZyA9IHJlbmRlclN0YXRlLmxhc3Q7XG5cbiAgICAgICAgICAgIGlmIChwcmV2aW91c1NpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgcHJldmlvdXNTaWJsaW5nLnNpYmxpbmcgPSByZW5kZXJlZFRhaWw7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlbmRlcmVkVGFpbDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVuZGVyU3RhdGUubGFzdCA9IHJlbmRlcmVkVGFpbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVuZGVyU3RhdGUudGFpbCAhPT0gbnVsbCkge1xuICAgICAgICAgIC8vIFdlIHN0aWxsIGhhdmUgdGFpbCByb3dzIHRvIHJlbmRlci5cbiAgICAgICAgICAvLyBQb3AgYSByb3cuXG4gICAgICAgICAgdmFyIG5leHQgPSByZW5kZXJTdGF0ZS50YWlsO1xuICAgICAgICAgIHJlbmRlclN0YXRlLnJlbmRlcmluZyA9IG5leHQ7XG4gICAgICAgICAgcmVuZGVyU3RhdGUudGFpbCA9IG5leHQuc2libGluZztcbiAgICAgICAgICByZW5kZXJTdGF0ZS5yZW5kZXJpbmdTdGFydFRpbWUgPSBub3coKTtcbiAgICAgICAgICBuZXh0LnNpYmxpbmcgPSBudWxsOyAvLyBSZXN0b3JlIHRoZSBjb250ZXh0LlxuICAgICAgICAgIC8vIFRPRE86IFdlIGNhbiBwcm9iYWJseSBqdXN0IGF2b2lkIHBvcHBpbmcgaXQgaW5zdGVhZCBhbmQgb25seVxuICAgICAgICAgIC8vIHNldHRpbmcgaXQgdGhlIGZpcnN0IHRpbWUgd2UgZ28gZnJvbSBub3Qgc3VzcGVuZGVkIHRvIHN1c3BlbmRlZC5cblxuICAgICAgICAgIHZhciBzdXNwZW5zZUNvbnRleHQgPSBzdXNwZW5zZVN0YWNrQ3Vyc29yLmN1cnJlbnQ7XG5cbiAgICAgICAgICBpZiAoZGlkU3VzcGVuZEFscmVhZHkpIHtcbiAgICAgICAgICAgIHN1c3BlbnNlQ29udGV4dCA9IHNldFNoYWxsb3dTdXNwZW5zZUNvbnRleHQoc3VzcGVuc2VDb250ZXh0LCBGb3JjZVN1c3BlbnNlRmFsbGJhY2spO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXNwZW5zZUNvbnRleHQgPSBzZXREZWZhdWx0U2hhbGxvd1N1c3BlbnNlQ29udGV4dChzdXNwZW5zZUNvbnRleHQpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHB1c2hTdXNwZW5zZUNvbnRleHQod29ya0luUHJvZ3Jlc3MsIHN1c3BlbnNlQ29udGV4dCk7IC8vIERvIGEgcGFzcyBvdmVyIHRoZSBuZXh0IHJvdy5cbiAgICAgICAgICAvLyBEb24ndCBidWJibGUgcHJvcGVydGllcyBpbiB0aGlzIGNhc2UuXG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgIGNhc2UgU2NvcGVDb21wb25lbnQ6XG4gICAgICB7XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlIE9mZnNjcmVlbkNvbXBvbmVudDpcbiAgICBjYXNlIExlZ2FjeUhpZGRlbkNvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgcG9wUmVuZGVyTGFuZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB2YXIgX25leHRTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICAgIHZhciBuZXh0SXNIaWRkZW4gPSBfbmV4dFN0YXRlICE9PSBudWxsO1xuXG4gICAgICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIF9wcmV2U3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gICAgICAgICAgdmFyIHByZXZJc0hpZGRlbiA9IF9wcmV2U3RhdGUgIT09IG51bGw7XG5cbiAgICAgICAgICBpZiAocHJldklzSGlkZGVuICE9PSBuZXh0SXNIaWRkZW4gJiYgKCAvLyBMZWdhY3lIaWRkZW4gZG9lc24ndCBkbyBhbnkgaGlkaW5nIOKAlCBpdCBvbmx5IHByZS1yZW5kZXJzLlxuICAgICAgICAgICFlbmFibGVMZWdhY3lIaWRkZW4gKSkge1xuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gVmlzaWJpbGl0eTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW5leHRJc0hpZGRlbiB8fCAod29ya0luUHJvZ3Jlc3MubW9kZSAmIENvbmN1cnJlbnRNb2RlKSA9PT0gTm9Nb2RlKSB7XG4gICAgICAgICAgYnViYmxlUHJvcGVydGllcyh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gRG9uJ3QgYnViYmxlIHByb3BlcnRpZXMgZm9yIGhpZGRlbiBjaGlsZHJlbiB1bmxlc3Mgd2UncmUgcmVuZGVyaW5nXG4gICAgICAgICAgLy8gYXQgb2Zmc2NyZWVuIHByaW9yaXR5LlxuICAgICAgICAgIGlmIChpbmNsdWRlc1NvbWVMYW5lKHN1YnRyZWVSZW5kZXJMYW5lcywgT2Zmc2NyZWVuTGFuZSkpIHtcbiAgICAgICAgICAgIGJ1YmJsZVByb3BlcnRpZXMod29ya0luUHJvZ3Jlc3MpO1xuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoZXJlIHdhcyBhbiBpbnNlcnRpb24gb3IgdXBkYXRlIGluIHRoZSBoaWRkZW4gc3VidHJlZS5cbiAgICAgICAgICAgICAgLy8gSWYgc28sIHdlIG5lZWQgdG8gaGlkZSB0aG9zZSBub2RlcyBpbiB0aGUgY29tbWl0IHBoYXNlLCBzb1xuICAgICAgICAgICAgICAvLyBzY2hlZHVsZSBhIHZpc2liaWxpdHkgZWZmZWN0LlxuICAgICAgICAgICAgICBpZiAoIHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyAmIChQbGFjZW1lbnQgfCBVcGRhdGUpKSB7XG4gICAgICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgfD0gVmlzaWJpbGl0eTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgIGNhc2UgQ2FjaGVDb21wb25lbnQ6XG4gICAgICB7XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICBjYXNlIFRyYWNpbmdNYXJrZXJDb21wb25lbnQ6XG4gICAgICB7XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHVuaXQgb2Ygd29yayB0YWcgKFwiICsgd29ya0luUHJvZ3Jlc3MudGFnICsgXCIpLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSBidWcgaW4gXCIgKyAnUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xufVxuXG5mdW5jdGlvbiB1bndpbmRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJMYW5lcykge1xuICAvLyBOb3RlOiBUaGlzIGludGVudGlvbmFsbHkgZG9lc24ndCBjaGVjayBpZiB3ZSdyZSBoeWRyYXRpbmcgYmVjYXVzZSBjb21wYXJpbmdcbiAgLy8gdG8gdGhlIGN1cnJlbnQgdHJlZSBwcm92aWRlciBmaWJlciBpcyBqdXN0IGFzIGZhc3QgYW5kIGxlc3MgZXJyb3ItcHJvbmUuXG4gIC8vIElkZWFsbHkgd2Ugd291bGQgaGF2ZSBhIHNwZWNpYWwgdmVyc2lvbiBvZiB0aGUgd29yayBsb29wIG9ubHlcbiAgLy8gZm9yIGh5ZHJhdGlvbi5cbiAgcG9wVHJlZUNvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuXG4gIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgdmFyIENvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG5cbiAgICAgICAgaWYgKGlzQ29udGV4dFByb3ZpZGVyKENvbXBvbmVudCkpIHtcbiAgICAgICAgICBwb3BDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBmbGFncyA9IHdvcmtJblByb2dyZXNzLmZsYWdzO1xuXG4gICAgICAgIGlmIChmbGFncyAmIFNob3VsZENhcHR1cmUpIHtcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IGZsYWdzICYgflNob3VsZENhcHR1cmUgfCBEaWRDYXB0dXJlO1xuXG4gICAgICAgICAgaWYgKCAod29ya0luUHJvZ3Jlc3MubW9kZSAmIFByb2ZpbGVNb2RlKSAhPT0gTm9Nb2RlKSB7XG4gICAgICAgICAgICB0cmFuc2ZlckFjdHVhbER1cmF0aW9uKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICB7XG4gICAgICAgIHZhciByb290ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgICBwb3BIb3N0Q29udGFpbmVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgcG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0KHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgcmVzZXRXb3JrSW5Qcm9ncmVzc1ZlcnNpb25zKCk7XG4gICAgICAgIHZhciBfZmxhZ3MgPSB3b3JrSW5Qcm9ncmVzcy5mbGFncztcblxuICAgICAgICBpZiAoKF9mbGFncyAmIFNob3VsZENhcHR1cmUpICE9PSBOb0ZsYWdzICYmIChfZmxhZ3MgJiBEaWRDYXB0dXJlKSA9PT0gTm9GbGFncykge1xuICAgICAgICAgIC8vIFRoZXJlIHdhcyBhbiBlcnJvciBkdXJpbmcgcmVuZGVyIHRoYXQgd2Fzbid0IGNhcHR1cmVkIGJ5IGEgc3VzcGVuc2VcbiAgICAgICAgICAvLyBib3VuZGFyeS4gRG8gYSBzZWNvbmQgcGFzcyBvbiB0aGUgcm9vdCB0byB1bm1vdW50IHRoZSBjaGlsZHJlbi5cbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IF9mbGFncyAmIH5TaG91bGRDYXB0dXJlIHwgRGlkQ2FwdHVyZTtcbiAgICAgICAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG4gICAgICAgIH0gLy8gV2UgdW53b3VuZCB0byB0aGUgcm9vdCB3aXRob3V0IGNvbXBsZXRpbmcgaXQuIEV4aXQuXG5cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgLy8gVE9ETzogcG9wSHlkcmF0aW9uU3RhdGVcbiAgICAgICAgcG9wSG9zdENvbnRleHQod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cblxuICAgIGNhc2UgU3VzcGVuc2VDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHBvcFN1c3BlbnNlQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIHZhciBzdXNwZW5zZVN0YXRlID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZTtcblxuICAgICAgICBpZiAoc3VzcGVuc2VTdGF0ZSAhPT0gbnVsbCAmJiBzdXNwZW5zZVN0YXRlLmRlaHlkcmF0ZWQgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAod29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RocmV3IGluIG5ld2x5IG1vdW50ZWQgZGVoeWRyYXRlZCBjb21wb25lbnQuIFRoaXMgaXMgbGlrZWx5IGEgYnVnIGluICcgKyAnUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJlc2V0SHlkcmF0aW9uU3RhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfZmxhZ3MyID0gd29ya0luUHJvZ3Jlc3MuZmxhZ3M7XG5cbiAgICAgICAgaWYgKF9mbGFnczIgJiBTaG91bGRDYXB0dXJlKSB7XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgPSBfZmxhZ3MyICYgflNob3VsZENhcHR1cmUgfCBEaWRDYXB0dXJlOyAvLyBDYXB0dXJlZCBhIHN1c3BlbnNlIGVmZmVjdC4gUmUtcmVuZGVyIHRoZSBib3VuZGFyeS5cblxuICAgICAgICAgIGlmICggKHdvcmtJblByb2dyZXNzLm1vZGUgJiBQcm9maWxlTW9kZSkgIT09IE5vTW9kZSkge1xuICAgICAgICAgICAgdHJhbnNmZXJBY3R1YWxEdXJhdGlvbih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICBjYXNlIFN1c3BlbnNlTGlzdENvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgcG9wU3VzcGVuc2VDb250ZXh0KHdvcmtJblByb2dyZXNzKTsgLy8gU3VzcGVuc2VMaXN0IGRvZXNuJ3QgYWN0dWFsbHkgY2F0Y2ggYW55dGhpbmcuIEl0IHNob3VsZCd2ZSBiZWVuXG4gICAgICAgIC8vIGNhdWdodCBieSBhIG5lc3RlZCBib3VuZGFyeS4gSWYgbm90LCBpdCBzaG91bGQgYnViYmxlIHRocm91Z2guXG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICBwb3BIb3N0Q29udGFpbmVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgY2FzZSBDb250ZXh0UHJvdmlkZXI6XG4gICAgICB2YXIgY29udGV4dCA9IHdvcmtJblByb2dyZXNzLnR5cGUuX2NvbnRleHQ7XG4gICAgICBwb3BQcm92aWRlcihjb250ZXh0LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICByZXR1cm4gbnVsbDtcblxuICAgIGNhc2UgT2Zmc2NyZWVuQ29tcG9uZW50OlxuICAgIGNhc2UgTGVnYWN5SGlkZGVuQ29tcG9uZW50OlxuICAgICAgcG9wUmVuZGVyTGFuZXMod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICBjYXNlIENhY2hlQ29tcG9uZW50OlxuXG4gICAgICByZXR1cm4gbnVsbDtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbnVsbDtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bndpbmRJbnRlcnJ1cHRlZFdvcmsoY3VycmVudCwgaW50ZXJydXB0ZWRXb3JrLCByZW5kZXJMYW5lcykge1xuICAvLyBOb3RlOiBUaGlzIGludGVudGlvbmFsbHkgZG9lc24ndCBjaGVjayBpZiB3ZSdyZSBoeWRyYXRpbmcgYmVjYXVzZSBjb21wYXJpbmdcbiAgLy8gdG8gdGhlIGN1cnJlbnQgdHJlZSBwcm92aWRlciBmaWJlciBpcyBqdXN0IGFzIGZhc3QgYW5kIGxlc3MgZXJyb3ItcHJvbmUuXG4gIC8vIElkZWFsbHkgd2Ugd291bGQgaGF2ZSBhIHNwZWNpYWwgdmVyc2lvbiBvZiB0aGUgd29yayBsb29wIG9ubHlcbiAgLy8gZm9yIGh5ZHJhdGlvbi5cbiAgcG9wVHJlZUNvbnRleHQoaW50ZXJydXB0ZWRXb3JrKTtcblxuICBzd2l0Y2ggKGludGVycnVwdGVkV29yay50YWcpIHtcbiAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgY2hpbGRDb250ZXh0VHlwZXMgPSBpbnRlcnJ1cHRlZFdvcmsudHlwZS5jaGlsZENvbnRleHRUeXBlcztcblxuICAgICAgICBpZiAoY2hpbGRDb250ZXh0VHlwZXMgIT09IG51bGwgJiYgY2hpbGRDb250ZXh0VHlwZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHBvcENvbnRleHQoaW50ZXJydXB0ZWRXb3JrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgIHtcbiAgICAgICAgdmFyIHJvb3QgPSBpbnRlcnJ1cHRlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICBwb3BIb3N0Q29udGFpbmVyKGludGVycnVwdGVkV29yayk7XG4gICAgICAgIHBvcFRvcExldmVsQ29udGV4dE9iamVjdChpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgICByZXNldFdvcmtJblByb2dyZXNzVmVyc2lvbnMoKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHBvcEhvc3RDb250ZXh0KGludGVycnVwdGVkV29yayk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAgcG9wSG9zdENvbnRhaW5lcihpbnRlcnJ1cHRlZFdvcmspO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIFN1c3BlbnNlQ29tcG9uZW50OlxuICAgICAgcG9wU3VzcGVuc2VDb250ZXh0KGludGVycnVwdGVkV29yayk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgU3VzcGVuc2VMaXN0Q29tcG9uZW50OlxuICAgICAgcG9wU3VzcGVuc2VDb250ZXh0KGludGVycnVwdGVkV29yayk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgQ29udGV4dFByb3ZpZGVyOlxuICAgICAgdmFyIGNvbnRleHQgPSBpbnRlcnJ1cHRlZFdvcmsudHlwZS5fY29udGV4dDtcbiAgICAgIHBvcFByb3ZpZGVyKGNvbnRleHQsIGludGVycnVwdGVkV29yayk7XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgT2Zmc2NyZWVuQ29tcG9uZW50OlxuICAgIGNhc2UgTGVnYWN5SGlkZGVuQ29tcG9uZW50OlxuICAgICAgcG9wUmVuZGVyTGFuZXMoaW50ZXJydXB0ZWRXb3JrKTtcbiAgICAgIGJyZWFrO1xuICB9XG59XG5cbnZhciBkaWRXYXJuQWJvdXRVbmRlZmluZWRTbmFwc2hvdEJlZm9yZVVwZGF0ZSA9IG51bGw7XG5cbntcbiAgZGlkV2FybkFib3V0VW5kZWZpbmVkU25hcHNob3RCZWZvcmVVcGRhdGUgPSBuZXcgU2V0KCk7XG59IC8vIFVzZWQgZHVyaW5nIHRoZSBjb21taXQgcGhhc2UgdG8gdHJhY2sgdGhlIHN0YXRlIG9mIHRoZSBPZmZzY3JlZW4gY29tcG9uZW50IHN0YWNrLlxuLy8gQWxsb3dzIHVzIHRvIGF2b2lkIHRyYXZlcnNpbmcgdGhlIHJldHVybiBwYXRoIHRvIGZpbmQgdGhlIG5lYXJlc3QgT2Zmc2NyZWVuIGFuY2VzdG9yLlxuLy8gT25seSB1c2VkIHdoZW4gZW5hYmxlU3VzcGVuc2VMYXlvdXRFZmZlY3RTZW1hbnRpY3MgaXMgZW5hYmxlZC5cblxuXG52YXIgb2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuID0gZmFsc2U7XG52YXIgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IGZhbHNlO1xudmFyIFBvc3NpYmx5V2Vha1NldCA9IHR5cGVvZiBXZWFrU2V0ID09PSAnZnVuY3Rpb24nID8gV2Vha1NldCA6IFNldDtcbnZhciBuZXh0RWZmZWN0ID0gbnVsbDsgLy8gVXNlZCBmb3IgUHJvZmlsaW5nIGJ1aWxkcyB0byB0cmFjayB1cGRhdGVycy5cblxudmFyIGluUHJvZ3Jlc3NMYW5lcyA9IG51bGw7XG52YXIgaW5Qcm9ncmVzc1Jvb3QgPSBudWxsO1xuZnVuY3Rpb24gcmVwb3J0VW5jYXVnaHRFcnJvckluREVWKGVycm9yKSB7XG4gIC8vIFdyYXBwaW5nIGVhY2ggc21hbGwgcGFydCBvZiB0aGUgY29tbWl0IHBoYXNlIGludG8gYSBndWFyZGVkXG4gIC8vIGNhbGxiYWNrIGlzIGEgYml0IHRvbyBzbG93IChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8yMTY2NikuXG4gIC8vIEJ1dCB3ZSByZWx5IG9uIGl0IHRvIHN1cmZhY2UgZXJyb3JzIHRvIERFViB0b29scyBsaWtlIG92ZXJsYXlzXG4gIC8vIChodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzIxNzEyKS5cbiAgLy8gQXMgYSBjb21wcm9taXNlLCByZXRocm93IG9ubHkgY2F1Z2h0IGVycm9ycyBpbiBhIGd1YXJkLlxuICB7XG4gICAgaW52b2tlR3VhcmRlZENhbGxiYWNrKG51bGwsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0pO1xuICAgIGNsZWFyQ2F1Z2h0RXJyb3IoKTtcbiAgfVxufVxuXG52YXIgY2FsbENvbXBvbmVudFdpbGxVbm1vdW50V2l0aFRpbWVyID0gZnVuY3Rpb24gKGN1cnJlbnQsIGluc3RhbmNlKSB7XG4gIGluc3RhbmNlLnByb3BzID0gY3VycmVudC5tZW1vaXplZFByb3BzO1xuICBpbnN0YW5jZS5zdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcblxuICBpZiAoIGN1cnJlbnQubW9kZSAmIFByb2ZpbGVNb2RlKSB7XG4gICAgdHJ5IHtcbiAgICAgIHN0YXJ0TGF5b3V0RWZmZWN0VGltZXIoKTtcbiAgICAgIGluc3RhbmNlLmNvbXBvbmVudFdpbGxVbm1vdW50KCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHJlY29yZExheW91dEVmZmVjdER1cmF0aW9uKGN1cnJlbnQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpbnN0YW5jZS5jb21wb25lbnRXaWxsVW5tb3VudCgpO1xuICB9XG59OyAvLyBDYXB0dXJlIGVycm9ycyBzbyB0aGV5IGRvbid0IGludGVycnVwdCBtb3VudGluZy5cblxuXG5mdW5jdGlvbiBzYWZlbHlDYWxsQ29tbWl0SG9va0xheW91dEVmZmVjdExpc3RNb3VudChjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKSB7XG4gIHRyeSB7XG4gICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudChMYXlvdXQsIGN1cnJlbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yKTtcbiAgfVxufSAvLyBDYXB0dXJlIGVycm9ycyBzbyB0aGV5IGRvbid0IGludGVycnVwdCB1bm1vdW50aW5nLlxuXG5cbmZ1bmN0aW9uIHNhZmVseUNhbGxDb21wb25lbnRXaWxsVW5tb3VudChjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBpbnN0YW5jZSkge1xuICB0cnkge1xuICAgIGNhbGxDb21wb25lbnRXaWxsVW5tb3VudFdpdGhUaW1lcihjdXJyZW50LCBpbnN0YW5jZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IpO1xuICB9XG59IC8vIENhcHR1cmUgZXJyb3JzIHNvIHRoZXkgZG9uJ3QgaW50ZXJydXB0IG1vdW50aW5nLlxuXG5cbmZ1bmN0aW9uIHNhZmVseUNhbGxDb21wb25lbnREaWRNb3VudChjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBpbnN0YW5jZSkge1xuICB0cnkge1xuICAgIGluc3RhbmNlLmNvbXBvbmVudERpZE1vdW50KCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IpO1xuICB9XG59IC8vIENhcHR1cmUgZXJyb3JzIHNvIHRoZXkgZG9uJ3QgaW50ZXJydXB0IG1vdW50aW5nLlxuXG5cbmZ1bmN0aW9uIHNhZmVseUF0dGFjaFJlZihjdXJyZW50LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKSB7XG4gIHRyeSB7XG4gICAgY29tbWl0QXR0YWNoUmVmKGN1cnJlbnQpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGVycm9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcikge1xuICB2YXIgcmVmID0gY3VycmVudC5yZWY7XG5cbiAgaWYgKHJlZiAhPT0gbnVsbCkge1xuICAgIGlmICh0eXBlb2YgcmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgcmV0VmFsO1xuXG4gICAgICB0cnkge1xuICAgICAgICBpZiAoZW5hYmxlUHJvZmlsZXJUaW1lciAmJiBlbmFibGVQcm9maWxlckNvbW1pdEhvb2tzICYmIGN1cnJlbnQubW9kZSAmIFByb2ZpbGVNb2RlKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN0YXJ0TGF5b3V0RWZmZWN0VGltZXIoKTtcbiAgICAgICAgICAgIHJldFZhbCA9IHJlZihudWxsKTtcbiAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgcmVjb3JkTGF5b3V0RWZmZWN0RHVyYXRpb24oY3VycmVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldFZhbCA9IHJlZihudWxsKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IpO1xuICAgICAgfVxuXG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgcmV0VmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZXJyb3IoJ1VuZXhwZWN0ZWQgcmV0dXJuIHZhbHVlIGZyb20gYSBjYWxsYmFjayByZWYgaW4gJXMuICcgKyAnQSBjYWxsYmFjayByZWYgc2hvdWxkIG5vdCByZXR1cm4gYSBmdW5jdGlvbi4nLCBnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKGN1cnJlbnQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZWYuY3VycmVudCA9IG51bGw7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNhZmVseUNhbGxEZXN0cm95KGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGRlc3Ryb3kpIHtcbiAgdHJ5IHtcbiAgICBkZXN0cm95KCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IpO1xuICB9XG59XG5cbnZhciBmb2N1c2VkSW5zdGFuY2VIYW5kbGUgPSBudWxsO1xudmFyIHNob3VsZEZpcmVBZnRlckFjdGl2ZUluc3RhbmNlQmx1ciA9IGZhbHNlO1xuZnVuY3Rpb24gY29tbWl0QmVmb3JlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpcnN0Q2hpbGQpIHtcbiAgZm9jdXNlZEluc3RhbmNlSGFuZGxlID0gcHJlcGFyZUZvckNvbW1pdChyb290LmNvbnRhaW5lckluZm8pO1xuICBuZXh0RWZmZWN0ID0gZmlyc3RDaGlsZDtcbiAgY29tbWl0QmVmb3JlTXV0YXRpb25FZmZlY3RzX2JlZ2luKCk7IC8vIFdlIG5vIGxvbmdlciBuZWVkIHRvIHRyYWNrIHRoZSBhY3RpdmUgaW5zdGFuY2UgZmliZXJcblxuICB2YXIgc2hvdWxkRmlyZSA9IHNob3VsZEZpcmVBZnRlckFjdGl2ZUluc3RhbmNlQmx1cjtcbiAgc2hvdWxkRmlyZUFmdGVyQWN0aXZlSW5zdGFuY2VCbHVyID0gZmFsc2U7XG4gIGZvY3VzZWRJbnN0YW5jZUhhbmRsZSA9IG51bGw7XG4gIHJldHVybiBzaG91bGRGaXJlO1xufVxuXG5mdW5jdGlvbiBjb21taXRCZWZvcmVNdXRhdGlvbkVmZmVjdHNfYmVnaW4oKSB7XG4gIHdoaWxlIChuZXh0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgdmFyIGZpYmVyID0gbmV4dEVmZmVjdDsgLy8gVGhpcyBwaGFzZSBpcyBvbmx5IHVzZWQgZm9yIGJlZm9yZUFjdGl2ZUluc3RhbmNlQmx1ci5cblxuICAgIHZhciBjaGlsZCA9IGZpYmVyLmNoaWxkO1xuXG4gICAgaWYgKChmaWJlci5zdWJ0cmVlRmxhZ3MgJiBCZWZvcmVNdXRhdGlvbk1hc2spICE9PSBOb0ZsYWdzICYmIGNoaWxkICE9PSBudWxsKSB7XG4gICAgICBjaGlsZC5yZXR1cm4gPSBmaWJlcjtcbiAgICAgIG5leHRFZmZlY3QgPSBjaGlsZDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tbWl0QmVmb3JlTXV0YXRpb25FZmZlY3RzX2NvbXBsZXRlKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbW1pdEJlZm9yZU11dGF0aW9uRWZmZWN0c19jb21wbGV0ZSgpIHtcbiAgd2hpbGUgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICB2YXIgZmliZXIgPSBuZXh0RWZmZWN0O1xuICAgIHNldEN1cnJlbnRGaWJlcihmaWJlcik7XG5cbiAgICB0cnkge1xuICAgICAgY29tbWl0QmVmb3JlTXV0YXRpb25FZmZlY3RzT25GaWJlcihmaWJlcik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpYmVyLCBmaWJlci5yZXR1cm4sIGVycm9yKTtcbiAgICB9XG5cbiAgICByZXNldEN1cnJlbnRGaWJlcigpO1xuICAgIHZhciBzaWJsaW5nID0gZmliZXIuc2libGluZztcblxuICAgIGlmIChzaWJsaW5nICE9PSBudWxsKSB7XG4gICAgICBzaWJsaW5nLnJldHVybiA9IGZpYmVyLnJldHVybjtcbiAgICAgIG5leHRFZmZlY3QgPSBzaWJsaW5nO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5leHRFZmZlY3QgPSBmaWJlci5yZXR1cm47XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0QmVmb3JlTXV0YXRpb25FZmZlY3RzT25GaWJlcihmaW5pc2hlZFdvcmspIHtcbiAgdmFyIGN1cnJlbnQgPSBmaW5pc2hlZFdvcmsuYWx0ZXJuYXRlO1xuICB2YXIgZmxhZ3MgPSBmaW5pc2hlZFdvcmsuZmxhZ3M7XG5cbiAgaWYgKChmbGFncyAmIFNuYXBzaG90KSAhPT0gTm9GbGFncykge1xuICAgIHNldEN1cnJlbnRGaWJlcihmaW5pc2hlZFdvcmspO1xuXG4gICAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgICBjYXNlIEZ1bmN0aW9uQ29tcG9uZW50OlxuICAgICAgY2FzZSBGb3J3YXJkUmVmOlxuICAgICAgY2FzZSBTaW1wbGVNZW1vQ29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgICAge1xuICAgICAgICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgcHJldlByb3BzID0gY3VycmVudC5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgdmFyIHByZXZTdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7IC8vIFdlIGNvdWxkIHVwZGF0ZSBpbnN0YW5jZSBwcm9wcyBhbmQgc3RhdGUgaGVyZSxcbiAgICAgICAgICAgIC8vIGJ1dCBpbnN0ZWFkIHdlIHJlbHkgb24gdGhlbSBiZWluZyBzZXQgZHVyaW5nIGxhc3QgcmVuZGVyLlxuICAgICAgICAgICAgLy8gVE9ETzogcmV2aXNpdCB0aGlzIHdoZW4gd2UgaW1wbGVtZW50IHJlc3VtaW5nLlxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlmIChmaW5pc2hlZFdvcmsudHlwZSA9PT0gZmluaXNoZWRXb3JrLmVsZW1lbnRUeXBlICYmICFkaWRXYXJuQWJvdXRSZWFzc2lnbmluZ1Byb3BzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLnByb3BzICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcykge1xuICAgICAgICAgICAgICAgICAgZXJyb3IoJ0V4cGVjdGVkICVzIHByb3BzIHRvIG1hdGNoIG1lbW9pemVkIHByb3BzIGJlZm9yZSAnICsgJ2dldFNuYXBzaG90QmVmb3JlVXBkYXRlLiAnICsgJ1RoaXMgbWlnaHQgZWl0aGVyIGJlIGJlY2F1c2Ugb2YgYSBidWcgaW4gUmVhY3QsIG9yIGJlY2F1c2UgJyArICdhIGNvbXBvbmVudCByZWFzc2lnbnMgaXRzIG93biBgdGhpcy5wcm9wc2AuICcgKyAnUGxlYXNlIGZpbGUgYW4gaXNzdWUuJywgZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcihmaW5pc2hlZFdvcmspIHx8ICdpbnN0YW5jZScpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5zdGF0ZSAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkU3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgIGVycm9yKCdFeHBlY3RlZCAlcyBzdGF0ZSB0byBtYXRjaCBtZW1vaXplZCBzdGF0ZSBiZWZvcmUgJyArICdnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZS4gJyArICdUaGlzIG1pZ2h0IGVpdGhlciBiZSBiZWNhdXNlIG9mIGEgYnVnIGluIFJlYWN0LCBvciBiZWNhdXNlICcgKyAnYSBjb21wb25lbnQgcmVhc3NpZ25zIGl0cyBvd24gYHRoaXMuc3RhdGVgLiAnICsgJ1BsZWFzZSBmaWxlIGFuIGlzc3VlLicsIGdldENvbXBvbmVudE5hbWVGcm9tRmliZXIoZmluaXNoZWRXb3JrKSB8fCAnaW5zdGFuY2UnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHNuYXBzaG90ID0gaW5zdGFuY2UuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoZmluaXNoZWRXb3JrLmVsZW1lbnRUeXBlID09PSBmaW5pc2hlZFdvcmsudHlwZSA/IHByZXZQcm9wcyA6IHJlc29sdmVEZWZhdWx0UHJvcHMoZmluaXNoZWRXb3JrLnR5cGUsIHByZXZQcm9wcyksIHByZXZTdGF0ZSk7XG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdmFyIGRpZFdhcm5TZXQgPSBkaWRXYXJuQWJvdXRVbmRlZmluZWRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtcblxuICAgICAgICAgICAgICBpZiAoc25hcHNob3QgPT09IHVuZGVmaW5lZCAmJiAhZGlkV2FyblNldC5oYXMoZmluaXNoZWRXb3JrLnR5cGUpKSB7XG4gICAgICAgICAgICAgICAgZGlkV2FyblNldC5hZGQoZmluaXNoZWRXb3JrLnR5cGUpO1xuXG4gICAgICAgICAgICAgICAgZXJyb3IoJyVzLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKCk6IEEgc25hcHNob3QgdmFsdWUgKG9yIG51bGwpICcgKyAnbXVzdCBiZSByZXR1cm5lZC4gWW91IGhhdmUgcmV0dXJuZWQgdW5kZWZpbmVkLicsIGdldENvbXBvbmVudE5hbWVGcm9tRmliZXIoZmluaXNoZWRXb3JrKSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaW5zdGFuY2UuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUgPSBzbmFwc2hvdDtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICB7XG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFyIHJvb3QgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICAgICAgY2xlYXJDb250YWluZXIocm9vdC5jb250YWluZXJJbmZvKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICBjYXNlIEhvc3RUZXh0OlxuICAgICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAgY2FzZSBJbmNvbXBsZXRlQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgIC8vIE5vdGhpbmcgdG8gZG8gZm9yIHRoZXNlIGNvbXBvbmVudCB0eXBlc1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyB1bml0IG9mIHdvcmsgdGFnIHNob3VsZCBub3QgaGF2ZSBzaWRlLWVmZmVjdHMuIFRoaXMgZXJyb3IgaXMgJyArICdsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlc2V0Q3VycmVudEZpYmVyKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KGZsYWdzLCBmaW5pc2hlZFdvcmssIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpIHtcbiAgdmFyIHVwZGF0ZVF1ZXVlID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlO1xuICB2YXIgbGFzdEVmZmVjdCA9IHVwZGF0ZVF1ZXVlICE9PSBudWxsID8gdXBkYXRlUXVldWUubGFzdEVmZmVjdCA6IG51bGw7XG5cbiAgaWYgKGxhc3RFZmZlY3QgIT09IG51bGwpIHtcbiAgICB2YXIgZmlyc3RFZmZlY3QgPSBsYXN0RWZmZWN0Lm5leHQ7XG4gICAgdmFyIGVmZmVjdCA9IGZpcnN0RWZmZWN0O1xuXG4gICAgZG8ge1xuICAgICAgaWYgKChlZmZlY3QudGFnICYgZmxhZ3MpID09PSBmbGFncykge1xuICAgICAgICAvLyBVbm1vdW50XG4gICAgICAgIHZhciBkZXN0cm95ID0gZWZmZWN0LmRlc3Ryb3k7XG4gICAgICAgIGVmZmVjdC5kZXN0cm95ID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGlmIChkZXN0cm95ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAoKGZsYWdzICYgUGFzc2l2ZSQxKSAhPT0gTm9GbGFncyQxKSB7XG4gICAgICAgICAgICAgIG1hcmtDb21wb25lbnRQYXNzaXZlRWZmZWN0VW5tb3VudFN0YXJ0ZWQoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKGZsYWdzICYgTGF5b3V0KSAhPT0gTm9GbGFncyQxKSB7XG4gICAgICAgICAgICAgIG1hcmtDb21wb25lbnRMYXlvdXRFZmZlY3RVbm1vdW50U3RhcnRlZChmaW5pc2hlZFdvcmspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmICgoZmxhZ3MgJiBJbnNlcnRpb24pICE9PSBOb0ZsYWdzJDEpIHtcbiAgICAgICAgICAgICAgc2V0SXNSdW5uaW5nSW5zZXJ0aW9uRWZmZWN0KHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNhZmVseUNhbGxEZXN0cm95KGZpbmlzaGVkV29yaywgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZGVzdHJveSk7XG5cbiAgICAgICAgICB7XG4gICAgICAgICAgICBpZiAoKGZsYWdzICYgSW5zZXJ0aW9uKSAhPT0gTm9GbGFncyQxKSB7XG4gICAgICAgICAgICAgIHNldElzUnVubmluZ0luc2VydGlvbkVmZmVjdChmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKChmbGFncyAmIFBhc3NpdmUkMSkgIT09IE5vRmxhZ3MkMSkge1xuICAgICAgICAgICAgICBtYXJrQ29tcG9uZW50UGFzc2l2ZUVmZmVjdFVubW91bnRTdG9wcGVkKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKChmbGFncyAmIExheW91dCkgIT09IE5vRmxhZ3MkMSkge1xuICAgICAgICAgICAgICBtYXJrQ29tcG9uZW50TGF5b3V0RWZmZWN0VW5tb3VudFN0b3BwZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZWZmZWN0ID0gZWZmZWN0Lm5leHQ7XG4gICAgfSB3aGlsZSAoZWZmZWN0ICE9PSBmaXJzdEVmZmVjdCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0SG9va0VmZmVjdExpc3RNb3VudChmbGFncywgZmluaXNoZWRXb3JrKSB7XG4gIHZhciB1cGRhdGVRdWV1ZSA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZTtcbiAgdmFyIGxhc3RFZmZlY3QgPSB1cGRhdGVRdWV1ZSAhPT0gbnVsbCA/IHVwZGF0ZVF1ZXVlLmxhc3RFZmZlY3QgOiBudWxsO1xuXG4gIGlmIChsYXN0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgdmFyIGZpcnN0RWZmZWN0ID0gbGFzdEVmZmVjdC5uZXh0O1xuICAgIHZhciBlZmZlY3QgPSBmaXJzdEVmZmVjdDtcblxuICAgIGRvIHtcbiAgICAgIGlmICgoZWZmZWN0LnRhZyAmIGZsYWdzKSA9PT0gZmxhZ3MpIHtcbiAgICAgICAge1xuICAgICAgICAgIGlmICgoZmxhZ3MgJiBQYXNzaXZlJDEpICE9PSBOb0ZsYWdzJDEpIHtcbiAgICAgICAgICAgIG1hcmtDb21wb25lbnRQYXNzaXZlRWZmZWN0TW91bnRTdGFydGVkKGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgfSBlbHNlIGlmICgoZmxhZ3MgJiBMYXlvdXQpICE9PSBOb0ZsYWdzJDEpIHtcbiAgICAgICAgICAgIG1hcmtDb21wb25lbnRMYXlvdXRFZmZlY3RNb3VudFN0YXJ0ZWQoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gLy8gTW91bnRcblxuXG4gICAgICAgIHZhciBjcmVhdGUgPSBlZmZlY3QuY3JlYXRlO1xuXG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoKGZsYWdzICYgSW5zZXJ0aW9uKSAhPT0gTm9GbGFncyQxKSB7XG4gICAgICAgICAgICBzZXRJc1J1bm5pbmdJbnNlcnRpb25FZmZlY3QodHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZWZmZWN0LmRlc3Ryb3kgPSBjcmVhdGUoKTtcblxuICAgICAgICB7XG4gICAgICAgICAgaWYgKChmbGFncyAmIEluc2VydGlvbikgIT09IE5vRmxhZ3MkMSkge1xuICAgICAgICAgICAgc2V0SXNSdW5uaW5nSW5zZXJ0aW9uRWZmZWN0KGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB7XG4gICAgICAgICAgaWYgKChmbGFncyAmIFBhc3NpdmUkMSkgIT09IE5vRmxhZ3MkMSkge1xuICAgICAgICAgICAgbWFya0NvbXBvbmVudFBhc3NpdmVFZmZlY3RNb3VudFN0b3BwZWQoKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKChmbGFncyAmIExheW91dCkgIT09IE5vRmxhZ3MkMSkge1xuICAgICAgICAgICAgbWFya0NvbXBvbmVudExheW91dEVmZmVjdE1vdW50U3RvcHBlZCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHtcbiAgICAgICAgICB2YXIgZGVzdHJveSA9IGVmZmVjdC5kZXN0cm95O1xuXG4gICAgICAgICAgaWYgKGRlc3Ryb3kgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZGVzdHJveSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFyIGhvb2tOYW1lID0gdm9pZCAwO1xuXG4gICAgICAgICAgICBpZiAoKGVmZmVjdC50YWcgJiBMYXlvdXQpICE9PSBOb0ZsYWdzKSB7XG4gICAgICAgICAgICAgIGhvb2tOYW1lID0gJ3VzZUxheW91dEVmZmVjdCc7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKChlZmZlY3QudGFnICYgSW5zZXJ0aW9uKSAhPT0gTm9GbGFncykge1xuICAgICAgICAgICAgICBob29rTmFtZSA9ICd1c2VJbnNlcnRpb25FZmZlY3QnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaG9va05hbWUgPSAndXNlRWZmZWN0JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGFkZGVuZHVtID0gdm9pZCAwO1xuXG4gICAgICAgICAgICBpZiAoZGVzdHJveSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICBhZGRlbmR1bSA9ICcgWW91IHJldHVybmVkIG51bGwuIElmIHlvdXIgZWZmZWN0IGRvZXMgbm90IHJlcXVpcmUgY2xlYW4gJyArICd1cCwgcmV0dXJuIHVuZGVmaW5lZCAob3Igbm90aGluZykuJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlc3Ryb3kudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBhZGRlbmR1bSA9ICdcXG5cXG5JdCBsb29rcyBsaWtlIHlvdSB3cm90ZSAnICsgaG9va05hbWUgKyAnKGFzeW5jICgpID0+IC4uLikgb3IgcmV0dXJuZWQgYSBQcm9taXNlLiAnICsgJ0luc3RlYWQsIHdyaXRlIHRoZSBhc3luYyBmdW5jdGlvbiBpbnNpZGUgeW91ciBlZmZlY3QgJyArICdhbmQgY2FsbCBpdCBpbW1lZGlhdGVseTpcXG5cXG4nICsgaG9va05hbWUgKyAnKCgpID0+IHtcXG4nICsgJyAgYXN5bmMgZnVuY3Rpb24gZmV0Y2hEYXRhKCkge1xcbicgKyAnICAgIC8vIFlvdSBjYW4gYXdhaXQgaGVyZVxcbicgKyAnICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgTXlBUEkuZ2V0RGF0YShzb21lSWQpO1xcbicgKyAnICAgIC8vIC4uLlxcbicgKyAnICB9XFxuJyArICcgIGZldGNoRGF0YSgpO1xcbicgKyBcIn0sIFtzb21lSWRdKTsgLy8gT3IgW10gaWYgZWZmZWN0IGRvZXNuJ3QgbmVlZCBwcm9wcyBvciBzdGF0ZVxcblxcblwiICsgJ0xlYXJuIG1vcmUgYWJvdXQgZGF0YSBmZXRjaGluZyB3aXRoIEhvb2tzOiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvaG9va3MtZGF0YS1mZXRjaGluZyc7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBhZGRlbmR1bSA9ICcgWW91IHJldHVybmVkOiAnICsgZGVzdHJveTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXJyb3IoJyVzIG11c3Qgbm90IHJldHVybiBhbnl0aGluZyBiZXNpZGVzIGEgZnVuY3Rpb24sICcgKyAnd2hpY2ggaXMgdXNlZCBmb3IgY2xlYW4tdXAuJXMnLCBob29rTmFtZSwgYWRkZW5kdW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBlZmZlY3QgPSBlZmZlY3QubmV4dDtcbiAgICB9IHdoaWxlIChlZmZlY3QgIT09IGZpcnN0RWZmZWN0KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXRQYXNzaXZlRWZmZWN0RHVyYXRpb25zKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrKSB7XG4gIHtcbiAgICAvLyBPbmx5IFByb2ZpbGVycyB3aXRoIHdvcmsgaW4gdGhlaXIgc3VidHJlZSB3aWxsIGhhdmUgYW4gVXBkYXRlIGVmZmVjdCBzY2hlZHVsZWQuXG4gICAgaWYgKChmaW5pc2hlZFdvcmsuZmxhZ3MgJiBVcGRhdGUpICE9PSBOb0ZsYWdzKSB7XG4gICAgICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICAgICAgY2FzZSBQcm9maWxlcjpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgcGFzc2l2ZUVmZmVjdER1cmF0aW9uID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZS5wYXNzaXZlRWZmZWN0RHVyYXRpb247XG4gICAgICAgICAgICB2YXIgX2ZpbmlzaGVkV29yayRtZW1vaXplID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMsXG4gICAgICAgICAgICAgICAgaWQgPSBfZmluaXNoZWRXb3JrJG1lbW9pemUuaWQsXG4gICAgICAgICAgICAgICAgb25Qb3N0Q29tbWl0ID0gX2ZpbmlzaGVkV29yayRtZW1vaXplLm9uUG9zdENvbW1pdDsgLy8gVGhpcyB2YWx1ZSB3aWxsIHN0aWxsIHJlZmxlY3QgdGhlIHByZXZpb3VzIGNvbW1pdCBwaGFzZS5cbiAgICAgICAgICAgIC8vIEl0IGRvZXMgbm90IGdldCByZXNldCB1bnRpbCB0aGUgc3RhcnQgb2YgdGhlIG5leHQgY29tbWl0IHBoYXNlLlxuXG4gICAgICAgICAgICB2YXIgY29tbWl0VGltZSA9IGdldENvbW1pdFRpbWUoKTtcbiAgICAgICAgICAgIHZhciBwaGFzZSA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGUgPT09IG51bGwgPyAnbW91bnQnIDogJ3VwZGF0ZSc7XG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWYgKGlzQ3VycmVudFVwZGF0ZU5lc3RlZCgpKSB7XG4gICAgICAgICAgICAgICAgcGhhc2UgPSAnbmVzdGVkLXVwZGF0ZSc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvblBvc3RDb21taXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgb25Qb3N0Q29tbWl0KGlkLCBwaGFzZSwgcGFzc2l2ZUVmZmVjdER1cmF0aW9uLCBjb21taXRUaW1lKTtcbiAgICAgICAgICAgIH0gLy8gQnViYmxlIHRpbWVzIHRvIHRoZSBuZXh0IG5lYXJlc3QgYW5jZXN0b3IgUHJvZmlsZXIuXG4gICAgICAgICAgICAvLyBBZnRlciB3ZSBwcm9jZXNzIHRoYXQgUHJvZmlsZXIsIHdlJ2xsIGJ1YmJsZSBmdXJ0aGVyIHVwLlxuXG5cbiAgICAgICAgICAgIHZhciBwYXJlbnRGaWJlciA9IGZpbmlzaGVkV29yay5yZXR1cm47XG5cbiAgICAgICAgICAgIG91dGVyOiB3aGlsZSAocGFyZW50RmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChwYXJlbnRGaWJlci50YWcpIHtcbiAgICAgICAgICAgICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICAgICAgICAgICAgdmFyIHJvb3QgPSBwYXJlbnRGaWJlci5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgICAgICByb290LnBhc3NpdmVFZmZlY3REdXJhdGlvbiArPSBwYXNzaXZlRWZmZWN0RHVyYXRpb247XG4gICAgICAgICAgICAgICAgICBicmVhayBvdXRlcjtcblxuICAgICAgICAgICAgICAgIGNhc2UgUHJvZmlsZXI6XG4gICAgICAgICAgICAgICAgICB2YXIgcGFyZW50U3RhdGVOb2RlID0gcGFyZW50RmliZXIuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICAgICAgcGFyZW50U3RhdGVOb2RlLnBhc3NpdmVFZmZlY3REdXJhdGlvbiArPSBwYXNzaXZlRWZmZWN0RHVyYXRpb247XG4gICAgICAgICAgICAgICAgICBicmVhayBvdXRlcjtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHBhcmVudEZpYmVyID0gcGFyZW50RmliZXIucmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbW1pdExheW91dEVmZmVjdE9uRmliZXIoZmluaXNoZWRSb290LCBjdXJyZW50LCBmaW5pc2hlZFdvcmssIGNvbW1pdHRlZExhbmVzKSB7XG4gIGlmICgoZmluaXNoZWRXb3JrLmZsYWdzICYgTGF5b3V0TWFzaykgIT09IE5vRmxhZ3MpIHtcbiAgICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICBjYXNlIFNpbXBsZU1lbW9Db21wb25lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoICFvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuKSB7XG4gICAgICAgICAgICAvLyBBdCB0aGlzIHBvaW50IGxheW91dCBlZmZlY3RzIGhhdmUgYWxyZWFkeSBiZWVuIGRlc3Ryb3llZCAoZHVyaW5nIG11dGF0aW9uIHBoYXNlKS5cbiAgICAgICAgICAgIC8vIFRoaXMgaXMgZG9uZSB0byBwcmV2ZW50IHNpYmxpbmcgY29tcG9uZW50IGVmZmVjdHMgZnJvbSBpbnRlcmZlcmluZyB3aXRoIGVhY2ggb3RoZXIsXG4gICAgICAgICAgICAvLyBlLmcuIGEgZGVzdHJveSBmdW5jdGlvbiBpbiBvbmUgY29tcG9uZW50IHNob3VsZCBuZXZlciBvdmVycmlkZSBhIHJlZiBzZXRcbiAgICAgICAgICAgIC8vIGJ5IGEgY3JlYXRlIGZ1bmN0aW9uIGluIGFub3RoZXIgY29tcG9uZW50IGR1cmluZyB0aGUgc2FtZSBjb21taXQuXG4gICAgICAgICAgICBpZiAoIGZpbmlzaGVkV29yay5tb2RlICYgUHJvZmlsZU1vZGUpIHtcbiAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBzdGFydExheW91dEVmZmVjdFRpbWVyKCk7XG4gICAgICAgICAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudChMYXlvdXQgfCBIYXNFZmZlY3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgcmVjb3JkTGF5b3V0RWZmZWN0RHVyYXRpb24oZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudChMYXlvdXQgfCBIYXNFZmZlY3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGU7XG5cbiAgICAgICAgICBpZiAoZmluaXNoZWRXb3JrLmZsYWdzICYgVXBkYXRlKSB7XG4gICAgICAgICAgICBpZiAoIW9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4pIHtcbiAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSBjb3VsZCB1cGRhdGUgaW5zdGFuY2UgcHJvcHMgYW5kIHN0YXRlIGhlcmUsXG4gICAgICAgICAgICAgICAgLy8gYnV0IGluc3RlYWQgd2UgcmVseSBvbiB0aGVtIGJlaW5nIHNldCBkdXJpbmcgbGFzdCByZW5kZXIuXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogcmV2aXNpdCB0aGlzIHdoZW4gd2UgaW1wbGVtZW50IHJlc3VtaW5nLlxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGlmIChmaW5pc2hlZFdvcmsudHlwZSA9PT0gZmluaXNoZWRXb3JrLmVsZW1lbnRUeXBlICYmICFkaWRXYXJuQWJvdXRSZWFzc2lnbmluZ1Byb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5wcm9wcyAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICBlcnJvcignRXhwZWN0ZWQgJXMgcHJvcHMgdG8gbWF0Y2ggbWVtb2l6ZWQgcHJvcHMgYmVmb3JlICcgKyAnY29tcG9uZW50RGlkTW91bnQuICcgKyAnVGhpcyBtaWdodCBlaXRoZXIgYmUgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBSZWFjdCwgb3IgYmVjYXVzZSAnICsgJ2EgY29tcG9uZW50IHJlYXNzaWducyBpdHMgb3duIGB0aGlzLnByb3BzYC4gJyArICdQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nLCBnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKGZpbmlzaGVkV29yaykgfHwgJ2luc3RhbmNlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2Uuc3RhdGUgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgZXJyb3IoJ0V4cGVjdGVkICVzIHN0YXRlIHRvIG1hdGNoIG1lbW9pemVkIHN0YXRlIGJlZm9yZSAnICsgJ2NvbXBvbmVudERpZE1vdW50LiAnICsgJ1RoaXMgbWlnaHQgZWl0aGVyIGJlIGJlY2F1c2Ugb2YgYSBidWcgaW4gUmVhY3QsIG9yIGJlY2F1c2UgJyArICdhIGNvbXBvbmVudCByZWFzc2lnbnMgaXRzIG93biBgdGhpcy5zdGF0ZWAuICcgKyAnUGxlYXNlIGZpbGUgYW4gaXNzdWUuJywgZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcihmaW5pc2hlZFdvcmspIHx8ICdpbnN0YW5jZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCBmaW5pc2hlZFdvcmsubW9kZSAmIFByb2ZpbGVNb2RlKSB7XG4gICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBzdGFydExheW91dEVmZmVjdFRpbWVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLmNvbXBvbmVudERpZE1vdW50KCk7XG4gICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICByZWNvcmRMYXlvdXRFZmZlY3REdXJhdGlvbihmaW5pc2hlZFdvcmspO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpbnN0YW5jZS5jb21wb25lbnREaWRNb3VudCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJldlByb3BzID0gZmluaXNoZWRXb3JrLmVsZW1lbnRUeXBlID09PSBmaW5pc2hlZFdvcmsudHlwZSA/IGN1cnJlbnQubWVtb2l6ZWRQcm9wcyA6IHJlc29sdmVEZWZhdWx0UHJvcHMoZmluaXNoZWRXb3JrLnR5cGUsIGN1cnJlbnQubWVtb2l6ZWRQcm9wcyk7XG4gICAgICAgICAgICAgICAgdmFyIHByZXZTdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTsgLy8gV2UgY291bGQgdXBkYXRlIGluc3RhbmNlIHByb3BzIGFuZCBzdGF0ZSBoZXJlLFxuICAgICAgICAgICAgICAgIC8vIGJ1dCBpbnN0ZWFkIHdlIHJlbHkgb24gdGhlbSBiZWluZyBzZXQgZHVyaW5nIGxhc3QgcmVuZGVyLlxuICAgICAgICAgICAgICAgIC8vIFRPRE86IHJldmlzaXQgdGhpcyB3aGVuIHdlIGltcGxlbWVudCByZXN1bWluZy5cblxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIGlmIChmaW5pc2hlZFdvcmsudHlwZSA9PT0gZmluaXNoZWRXb3JrLmVsZW1lbnRUeXBlICYmICFkaWRXYXJuQWJvdXRSZWFzc2lnbmluZ1Byb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbnN0YW5jZS5wcm9wcyAhPT0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICBlcnJvcignRXhwZWN0ZWQgJXMgcHJvcHMgdG8gbWF0Y2ggbWVtb2l6ZWQgcHJvcHMgYmVmb3JlICcgKyAnY29tcG9uZW50RGlkVXBkYXRlLiAnICsgJ1RoaXMgbWlnaHQgZWl0aGVyIGJlIGJlY2F1c2Ugb2YgYSBidWcgaW4gUmVhY3QsIG9yIGJlY2F1c2UgJyArICdhIGNvbXBvbmVudCByZWFzc2lnbnMgaXRzIG93biBgdGhpcy5wcm9wc2AuICcgKyAnUGxlYXNlIGZpbGUgYW4gaXNzdWUuJywgZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcihmaW5pc2hlZFdvcmspIHx8ICdpbnN0YW5jZScpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLnN0YXRlICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgIGVycm9yKCdFeHBlY3RlZCAlcyBzdGF0ZSB0byBtYXRjaCBtZW1vaXplZCBzdGF0ZSBiZWZvcmUgJyArICdjb21wb25lbnREaWRVcGRhdGUuICcgKyAnVGhpcyBtaWdodCBlaXRoZXIgYmUgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBSZWFjdCwgb3IgYmVjYXVzZSAnICsgJ2EgY29tcG9uZW50IHJlYXNzaWducyBpdHMgb3duIGB0aGlzLnN0YXRlYC4gJyArICdQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nLCBnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKGZpbmlzaGVkV29yaykgfHwgJ2luc3RhbmNlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIGZpbmlzaGVkV29yay5tb2RlICYgUHJvZmlsZU1vZGUpIHtcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0TGF5b3V0RWZmZWN0VGltZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2UuY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wcywgcHJldlN0YXRlLCBpbnN0YW5jZS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSk7XG4gICAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICByZWNvcmRMYXlvdXRFZmZlY3REdXJhdGlvbihmaW5pc2hlZFdvcmspO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBpbnN0YW5jZS5jb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzLCBwcmV2U3RhdGUsIGluc3RhbmNlLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IC8vIFRPRE86IEkgdGhpbmsgdGhpcyBpcyBub3cgYWx3YXlzIG5vbi1udWxsIGJ5IHRoZSB0aW1lIGl0IHJlYWNoZXMgdGhlXG4gICAgICAgICAgLy8gY29tbWl0IHBoYXNlLiBDb25zaWRlciByZW1vdmluZyB0aGUgdHlwZSBjaGVjay5cblxuXG4gICAgICAgICAgdmFyIHVwZGF0ZVF1ZXVlID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlO1xuXG4gICAgICAgICAgaWYgKHVwZGF0ZVF1ZXVlICE9PSBudWxsKSB7XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlmIChmaW5pc2hlZFdvcmsudHlwZSA9PT0gZmluaXNoZWRXb3JrLmVsZW1lbnRUeXBlICYmICFkaWRXYXJuQWJvdXRSZWFzc2lnbmluZ1Byb3BzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGluc3RhbmNlLnByb3BzICE9PSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcykge1xuICAgICAgICAgICAgICAgICAgZXJyb3IoJ0V4cGVjdGVkICVzIHByb3BzIHRvIG1hdGNoIG1lbW9pemVkIHByb3BzIGJlZm9yZSAnICsgJ3Byb2Nlc3NpbmcgdGhlIHVwZGF0ZSBxdWV1ZS4gJyArICdUaGlzIG1pZ2h0IGVpdGhlciBiZSBiZWNhdXNlIG9mIGEgYnVnIGluIFJlYWN0LCBvciBiZWNhdXNlICcgKyAnYSBjb21wb25lbnQgcmVhc3NpZ25zIGl0cyBvd24gYHRoaXMucHJvcHNgLiAnICsgJ1BsZWFzZSBmaWxlIGFuIGlzc3VlLicsIGdldENvbXBvbmVudE5hbWVGcm9tRmliZXIoZmluaXNoZWRXb3JrKSB8fCAnaW5zdGFuY2UnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaW5zdGFuY2Uuc3RhdGUgIT09IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICBlcnJvcignRXhwZWN0ZWQgJXMgc3RhdGUgdG8gbWF0Y2ggbWVtb2l6ZWQgc3RhdGUgYmVmb3JlICcgKyAncHJvY2Vzc2luZyB0aGUgdXBkYXRlIHF1ZXVlLiAnICsgJ1RoaXMgbWlnaHQgZWl0aGVyIGJlIGJlY2F1c2Ugb2YgYSBidWcgaW4gUmVhY3QsIG9yIGJlY2F1c2UgJyArICdhIGNvbXBvbmVudCByZWFzc2lnbnMgaXRzIG93biBgdGhpcy5zdGF0ZWAuICcgKyAnUGxlYXNlIGZpbGUgYW4gaXNzdWUuJywgZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcihmaW5pc2hlZFdvcmspIHx8ICdpbnN0YW5jZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSAvLyBXZSBjb3VsZCB1cGRhdGUgaW5zdGFuY2UgcHJvcHMgYW5kIHN0YXRlIGhlcmUsXG4gICAgICAgICAgICAvLyBidXQgaW5zdGVhZCB3ZSByZWx5IG9uIHRoZW0gYmVpbmcgc2V0IGR1cmluZyBsYXN0IHJlbmRlci5cbiAgICAgICAgICAgIC8vIFRPRE86IHJldmlzaXQgdGhpcyB3aGVuIHdlIGltcGxlbWVudCByZXN1bWluZy5cblxuXG4gICAgICAgICAgICBjb21taXRVcGRhdGVRdWV1ZShmaW5pc2hlZFdvcmssIHVwZGF0ZVF1ZXVlLCBpbnN0YW5jZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgICAge1xuICAgICAgICAgIC8vIFRPRE86IEkgdGhpbmsgdGhpcyBpcyBub3cgYWx3YXlzIG5vbi1udWxsIGJ5IHRoZSB0aW1lIGl0IHJlYWNoZXMgdGhlXG4gICAgICAgICAgLy8gY29tbWl0IHBoYXNlLiBDb25zaWRlciByZW1vdmluZyB0aGUgdHlwZSBjaGVjay5cbiAgICAgICAgICB2YXIgX3VwZGF0ZVF1ZXVlID0gZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlO1xuXG4gICAgICAgICAgaWYgKF91cGRhdGVRdWV1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIF9pbnN0YW5jZSA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChmaW5pc2hlZFdvcmsuY2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgc3dpdGNoIChmaW5pc2hlZFdvcmsuY2hpbGQudGFnKSB7XG4gICAgICAgICAgICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICAgICAgICAgICAgX2luc3RhbmNlID0gZ2V0UHVibGljSW5zdGFuY2UoZmluaXNoZWRXb3JrLmNoaWxkLnN0YXRlTm9kZSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgICAgICAgICAgICBfaW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuY2hpbGQuc3RhdGVOb2RlO1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29tbWl0VXBkYXRlUXVldWUoZmluaXNoZWRXb3JrLCBfdXBkYXRlUXVldWUsIF9pbnN0YW5jZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIF9pbnN0YW5jZTIgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlOyAvLyBSZW5kZXJlcnMgbWF5IHNjaGVkdWxlIHdvcmsgdG8gYmUgZG9uZSBhZnRlciBob3N0IGNvbXBvbmVudHMgYXJlIG1vdW50ZWRcbiAgICAgICAgICAvLyAoZWcgRE9NIHJlbmRlcmVyIG1heSBzY2hlZHVsZSBhdXRvLWZvY3VzIGZvciBpbnB1dHMgYW5kIGZvcm0gY29udHJvbHMpLlxuICAgICAgICAgIC8vIFRoZXNlIGVmZmVjdHMgc2hvdWxkIG9ubHkgYmUgY29tbWl0dGVkIHdoZW4gY29tcG9uZW50cyBhcmUgZmlyc3QgbW91bnRlZCxcbiAgICAgICAgICAvLyBha2Egd2hlbiB0aGVyZSBpcyBubyBjdXJyZW50L2FsdGVybmF0ZS5cblxuICAgICAgICAgIGlmIChjdXJyZW50ID09PSBudWxsICYmIGZpbmlzaGVkV29yay5mbGFncyAmIFVwZGF0ZSkge1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBmaW5pc2hlZFdvcmsudHlwZTtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IGZpbmlzaGVkV29yay5tZW1vaXplZFByb3BzO1xuICAgICAgICAgICAgY29tbWl0TW91bnQoX2luc3RhbmNlMiwgdHlwZSwgcHJvcHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgSG9zdFRleHQ6XG4gICAgICAgIHtcbiAgICAgICAgICAvLyBXZSBoYXZlIG5vIGxpZmUtY3ljbGVzIGFzc29jaWF0ZWQgd2l0aCB0ZXh0LlxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgSG9zdFBvcnRhbDpcbiAgICAgICAge1xuICAgICAgICAgIC8vIFdlIGhhdmUgbm8gbGlmZS1jeWNsZXMgYXNzb2NpYXRlZCB3aXRoIHBvcnRhbHMuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBQcm9maWxlcjpcbiAgICAgICAge1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhciBfZmluaXNoZWRXb3JrJG1lbW9pemUyID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHMsXG4gICAgICAgICAgICAgICAgb25Db21taXQgPSBfZmluaXNoZWRXb3JrJG1lbW9pemUyLm9uQ29tbWl0LFxuICAgICAgICAgICAgICAgIG9uUmVuZGVyID0gX2ZpbmlzaGVkV29yayRtZW1vaXplMi5vblJlbmRlcjtcbiAgICAgICAgICAgIHZhciBlZmZlY3REdXJhdGlvbiA9IGZpbmlzaGVkV29yay5zdGF0ZU5vZGUuZWZmZWN0RHVyYXRpb247XG4gICAgICAgICAgICB2YXIgY29tbWl0VGltZSA9IGdldENvbW1pdFRpbWUoKTtcbiAgICAgICAgICAgIHZhciBwaGFzZSA9IGN1cnJlbnQgPT09IG51bGwgPyAnbW91bnQnIDogJ3VwZGF0ZSc7XG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWYgKGlzQ3VycmVudFVwZGF0ZU5lc3RlZCgpKSB7XG4gICAgICAgICAgICAgICAgcGhhc2UgPSAnbmVzdGVkLXVwZGF0ZSc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvblJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICBvblJlbmRlcihmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcy5pZCwgcGhhc2UsIGZpbmlzaGVkV29yay5hY3R1YWxEdXJhdGlvbiwgZmluaXNoZWRXb3JrLnRyZWVCYXNlRHVyYXRpb24sIGZpbmlzaGVkV29yay5hY3R1YWxTdGFydFRpbWUsIGNvbW1pdFRpbWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygb25Db21taXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBvbkNvbW1pdChmaW5pc2hlZFdvcmsubWVtb2l6ZWRQcm9wcy5pZCwgcGhhc2UsIGVmZmVjdER1cmF0aW9uLCBjb21taXRUaW1lKTtcbiAgICAgICAgICAgICAgfSAvLyBTY2hlZHVsZSBhIHBhc3NpdmUgZWZmZWN0IGZvciB0aGlzIFByb2ZpbGVyIHRvIGNhbGwgb25Qb3N0Q29tbWl0IGhvb2tzLlxuICAgICAgICAgICAgICAvLyBUaGlzIGVmZmVjdCBzaG91bGQgYmUgc2NoZWR1bGVkIGV2ZW4gaWYgdGhlcmUgaXMgbm8gb25Qb3N0Q29tbWl0IGNhbGxiYWNrIGZvciB0aGlzIFByb2ZpbGVyLFxuICAgICAgICAgICAgICAvLyBiZWNhdXNlIHRoZSBlZmZlY3QgaXMgYWxzbyB3aGVyZSB0aW1lcyBidWJibGUgdG8gcGFyZW50IFByb2ZpbGVycy5cblxuXG4gICAgICAgICAgICAgIGVucXVldWVQZW5kaW5nUGFzc2l2ZVByb2ZpbGVyRWZmZWN0KGZpbmlzaGVkV29yayk7IC8vIFByb3BhZ2F0ZSBsYXlvdXQgZWZmZWN0IGR1cmF0aW9ucyB0byB0aGUgbmV4dCBuZWFyZXN0IFByb2ZpbGVyIGFuY2VzdG9yLlxuICAgICAgICAgICAgICAvLyBEbyBub3QgcmVzZXQgdGhlc2UgdmFsdWVzIHVudGlsIHRoZSBuZXh0IHJlbmRlciBzbyBEZXZUb29scyBoYXMgYSBjaGFuY2UgdG8gcmVhZCB0aGVtIGZpcnN0LlxuXG4gICAgICAgICAgICAgIHZhciBwYXJlbnRGaWJlciA9IGZpbmlzaGVkV29yay5yZXR1cm47XG5cbiAgICAgICAgICAgICAgb3V0ZXI6IHdoaWxlIChwYXJlbnRGaWJlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAocGFyZW50RmliZXIudGFnKSB7XG4gICAgICAgICAgICAgICAgICBjYXNlIEhvc3RSb290OlxuICAgICAgICAgICAgICAgICAgICB2YXIgcm9vdCA9IHBhcmVudEZpYmVyLnN0YXRlTm9kZTtcbiAgICAgICAgICAgICAgICAgICAgcm9vdC5lZmZlY3REdXJhdGlvbiArPSBlZmZlY3REdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG5cbiAgICAgICAgICAgICAgICAgIGNhc2UgUHJvZmlsZXI6XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRTdGF0ZU5vZGUgPSBwYXJlbnRGaWJlci5zdGF0ZU5vZGU7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudFN0YXRlTm9kZS5lZmZlY3REdXJhdGlvbiArPSBlZmZlY3REdXJhdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWsgb3V0ZXI7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcGFyZW50RmliZXIgPSBwYXJlbnRGaWJlci5yZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIFN1c3BlbnNlQ29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgY29tbWl0U3VzcGVuc2VIeWRyYXRpb25DYWxsYmFja3MoZmluaXNoZWRSb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgU3VzcGVuc2VMaXN0Q29tcG9uZW50OlxuICAgICAgY2FzZSBJbmNvbXBsZXRlQ2xhc3NDb21wb25lbnQ6XG4gICAgICBjYXNlIFNjb3BlQ29tcG9uZW50OlxuICAgICAgY2FzZSBPZmZzY3JlZW5Db21wb25lbnQ6XG4gICAgICBjYXNlIExlZ2FjeUhpZGRlbkNvbXBvbmVudDpcbiAgICAgIGNhc2UgVHJhY2luZ01hcmtlckNvbXBvbmVudDpcbiAgICAgICAge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyB1bml0IG9mIHdvcmsgdGFnIHNob3VsZCBub3QgaGF2ZSBzaWRlLWVmZmVjdHMuIFRoaXMgZXJyb3IgaXMgJyArICdsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICB9XG4gIH1cblxuICBpZiAoICFvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuKSB7XG4gICAge1xuICAgICAgaWYgKGZpbmlzaGVkV29yay5mbGFncyAmIFJlZikge1xuICAgICAgICBjb21taXRBdHRhY2hSZWYoZmluaXNoZWRXb3JrKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVhcHBlYXJMYXlvdXRFZmZlY3RzT25GaWJlcihub2RlKSB7XG4gIC8vIFR1cm4gb24gbGF5b3V0IGVmZmVjdHMgaW4gYSB0cmVlIHRoYXQgcHJldmlvdXNseSBkaXNhcHBlYXJlZC5cbiAgLy8gVE9ETyAoT2Zmc2NyZWVuKSBDaGVjazogZmxhZ3MgJiBMYXlvdXRTdGF0aWNcbiAgc3dpdGNoIChub2RlLnRhZykge1xuICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgY2FzZSBGb3J3YXJkUmVmOlxuICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgaWYgKCBub2RlLm1vZGUgJiBQcm9maWxlTW9kZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdGFydExheW91dEVmZmVjdFRpbWVyKCk7XG4gICAgICAgICAgICBzYWZlbHlDYWxsQ29tbWl0SG9va0xheW91dEVmZmVjdExpc3RNb3VudChub2RlLCBub2RlLnJldHVybik7XG4gICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHJlY29yZExheW91dEVmZmVjdER1cmF0aW9uKG5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzYWZlbHlDYWxsQ29tbWl0SG9va0xheW91dEVmZmVjdExpc3RNb3VudChub2RlLCBub2RlLnJldHVybik7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IG5vZGUuc3RhdGVOb2RlO1xuXG4gICAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkTW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBzYWZlbHlDYWxsQ29tcG9uZW50RGlkTW91bnQobm9kZSwgbm9kZS5yZXR1cm4sIGluc3RhbmNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHNhZmVseUF0dGFjaFJlZihub2RlLCBub2RlLnJldHVybik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAge1xuICAgICAgICBzYWZlbHlBdHRhY2hSZWYobm9kZSwgbm9kZS5yZXR1cm4pO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBoaWRlT3JVbmhpZGVBbGxDaGlsZHJlbihmaW5pc2hlZFdvcmssIGlzSGlkZGVuKSB7XG4gIC8vIE9ubHkgaGlkZSBvciB1bmhpZGUgdGhlIHRvcC1tb3N0IGhvc3Qgbm9kZXMuXG4gIHZhciBob3N0U3VidHJlZVJvb3QgPSBudWxsO1xuXG4gIHtcbiAgICAvLyBXZSBvbmx5IGhhdmUgdGhlIHRvcCBGaWJlciB0aGF0IHdhcyBpbnNlcnRlZCBidXQgd2UgbmVlZCB0byByZWN1cnNlIGRvd24gaXRzXG4gICAgLy8gY2hpbGRyZW4gdG8gZmluZCBhbGwgdGhlIHRlcm1pbmFsIG5vZGVzLlxuICAgIHZhciBub2RlID0gZmluaXNoZWRXb3JrO1xuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGlmIChub2RlLnRhZyA9PT0gSG9zdENvbXBvbmVudCkge1xuICAgICAgICBpZiAoaG9zdFN1YnRyZWVSb290ID09PSBudWxsKSB7XG4gICAgICAgICAgaG9zdFN1YnRyZWVSb290ID0gbm9kZTtcblxuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBub2RlLnN0YXRlTm9kZTtcblxuICAgICAgICAgICAgaWYgKGlzSGlkZGVuKSB7XG4gICAgICAgICAgICAgIGhpZGVJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB1bmhpZGVJbnN0YW5jZShub2RlLnN0YXRlTm9kZSwgbm9kZS5tZW1vaXplZFByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG5vZGUudGFnID09PSBIb3N0VGV4dCkge1xuICAgICAgICBpZiAoaG9zdFN1YnRyZWVSb290ID09PSBudWxsKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciBfaW5zdGFuY2UzID0gbm9kZS5zdGF0ZU5vZGU7XG5cbiAgICAgICAgICAgIGlmIChpc0hpZGRlbikge1xuICAgICAgICAgICAgICBoaWRlVGV4dEluc3RhbmNlKF9pbnN0YW5jZTMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdW5oaWRlVGV4dEluc3RhbmNlKF9pbnN0YW5jZTMsIG5vZGUubWVtb2l6ZWRQcm9wcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICgobm9kZS50YWcgPT09IE9mZnNjcmVlbkNvbXBvbmVudCB8fCBub2RlLnRhZyA9PT0gTGVnYWN5SGlkZGVuQ29tcG9uZW50KSAmJiBub2RlLm1lbW9pemVkU3RhdGUgIT09IG51bGwgJiYgbm9kZSAhPT0gZmluaXNoZWRXb3JrKSA7IGVsc2UgaWYgKG5vZGUuY2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgbm9kZS5jaGlsZC5yZXR1cm4gPSBub2RlO1xuICAgICAgICBub2RlID0gbm9kZS5jaGlsZDtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChub2RlID09PSBmaW5pc2hlZFdvcmspIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAobm9kZS5zaWJsaW5nID09PSBudWxsKSB7XG4gICAgICAgIGlmIChub2RlLnJldHVybiA9PT0gbnVsbCB8fCBub2RlLnJldHVybiA9PT0gZmluaXNoZWRXb3JrKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhvc3RTdWJ0cmVlUm9vdCA9PT0gbm9kZSkge1xuICAgICAgICAgIGhvc3RTdWJ0cmVlUm9vdCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChob3N0U3VidHJlZVJvb3QgPT09IG5vZGUpIHtcbiAgICAgICAgaG9zdFN1YnRyZWVSb290ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgbm9kZS5zaWJsaW5nLnJldHVybiA9IG5vZGUucmV0dXJuO1xuICAgICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0QXR0YWNoUmVmKGZpbmlzaGVkV29yaykge1xuICB2YXIgcmVmID0gZmluaXNoZWRXb3JrLnJlZjtcblxuICBpZiAocmVmICE9PSBudWxsKSB7XG4gICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICB2YXIgaW5zdGFuY2VUb1VzZTtcblxuICAgIHN3aXRjaCAoZmluaXNoZWRXb3JrLnRhZykge1xuICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICBpbnN0YW5jZVRvVXNlID0gZ2V0UHVibGljSW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaW5zdGFuY2VUb1VzZSA9IGluc3RhbmNlO1xuICAgIH0gLy8gTW92ZWQgb3V0c2lkZSB0byBlbnN1cmUgRENFIHdvcmtzIHdpdGggdGhpcyBmbGFnXG5cbiAgICBpZiAodHlwZW9mIHJlZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIHJldFZhbDtcblxuICAgICAgaWYgKCBmaW5pc2hlZFdvcmsubW9kZSAmIFByb2ZpbGVNb2RlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc3RhcnRMYXlvdXRFZmZlY3RUaW1lcigpO1xuICAgICAgICAgIHJldFZhbCA9IHJlZihpbnN0YW5jZVRvVXNlKTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICByZWNvcmRMYXlvdXRFZmZlY3REdXJhdGlvbihmaW5pc2hlZFdvcmspO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXRWYWwgPSByZWYoaW5zdGFuY2VUb1VzZSk7XG4gICAgICB9XG5cbiAgICAgIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXRWYWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBlcnJvcignVW5leHBlY3RlZCByZXR1cm4gdmFsdWUgZnJvbSBhIGNhbGxiYWNrIHJlZiBpbiAlcy4gJyArICdBIGNhbGxiYWNrIHJlZiBzaG91bGQgbm90IHJldHVybiBhIGZ1bmN0aW9uLicsIGdldENvbXBvbmVudE5hbWVGcm9tRmliZXIoZmluaXNoZWRXb3JrKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAge1xuICAgICAgICBpZiAoIXJlZi5oYXNPd25Qcm9wZXJ0eSgnY3VycmVudCcpKSB7XG4gICAgICAgICAgZXJyb3IoJ1VuZXhwZWN0ZWQgcmVmIG9iamVjdCBwcm92aWRlZCBmb3IgJXMuICcgKyAnVXNlIGVpdGhlciBhIHJlZi1zZXR0ZXIgZnVuY3Rpb24gb3IgUmVhY3QuY3JlYXRlUmVmKCkuJywgZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcihmaW5pc2hlZFdvcmspKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZWYuY3VycmVudCA9IGluc3RhbmNlVG9Vc2U7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRldGFjaEZpYmVyTXV0YXRpb24oZmliZXIpIHtcbiAgLy8gQ3V0IG9mZiB0aGUgcmV0dXJuIHBvaW50ZXIgdG8gZGlzY29ubmVjdCBpdCBmcm9tIHRoZSB0cmVlLlxuICAvLyBUaGlzIGVuYWJsZXMgdXMgdG8gZGV0ZWN0IGFuZCB3YXJuIGFnYWluc3Qgc3RhdGUgdXBkYXRlcyBvbiBhbiB1bm1vdW50ZWQgY29tcG9uZW50LlxuICAvLyBJdCBhbHNvIHByZXZlbnRzIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIGZyb20gd2l0aGluIGRpc2Nvbm5lY3RlZCBjb21wb25lbnRzLlxuICAvL1xuICAvLyBJZGVhbGx5LCB3ZSBzaG91bGQgYWxzbyBjbGVhciB0aGUgY2hpbGQgcG9pbnRlciBvZiB0aGUgcGFyZW50IGFsdGVybmF0ZSB0byBsZXQgdGhpc1xuICAvLyBnZXQgR0M6ZWQgYnV0IHdlIGRvbid0IGtub3cgd2hpY2ggZm9yIHN1cmUgd2hpY2ggcGFyZW50IGlzIHRoZSBjdXJyZW50XG4gIC8vIG9uZSBzbyB3ZSdsbCBzZXR0bGUgZm9yIEdDOmluZyB0aGUgc3VidHJlZSBvZiB0aGlzIGNoaWxkLlxuICAvLyBUaGlzIGNoaWxkIGl0c2VsZiB3aWxsIGJlIEdDOmVkIHdoZW4gdGhlIHBhcmVudCB1cGRhdGVzIHRoZSBuZXh0IHRpbWUuXG4gIC8vXG4gIC8vIE5vdGUgdGhhdCB3ZSBjYW4ndCBjbGVhciBjaGlsZCBvciBzaWJsaW5nIHBvaW50ZXJzIHlldC5cbiAgLy8gVGhleSdyZSBuZWVkZWQgZm9yIHBhc3NpdmUgZWZmZWN0cyBhbmQgZm9yIGZpbmRET01Ob2RlLlxuICAvLyBXZSBkZWZlciB0aG9zZSBmaWVsZHMsIGFuZCBhbGwgb3RoZXIgY2xlYW51cCwgdG8gdGhlIHBhc3NpdmUgcGhhc2UgKHNlZSBkZXRhY2hGaWJlckFmdGVyRWZmZWN0cykuXG4gIC8vXG4gIC8vIERvbid0IHJlc2V0IHRoZSBhbHRlcm5hdGUgeWV0LCBlaXRoZXIuIFdlIG5lZWQgdGhhdCBzbyB3ZSBjYW4gZGV0YWNoIHRoZVxuICAvLyBhbHRlcm5hdGUncyBmaWVsZHMgaW4gdGhlIHBhc3NpdmUgcGhhc2UuIENsZWFyaW5nIHRoZSByZXR1cm4gcG9pbnRlciBpc1xuICAvLyBzdWZmaWNpZW50IGZvciBmaW5kRE9NTm9kZSBzZW1hbnRpY3MuXG4gIHZhciBhbHRlcm5hdGUgPSBmaWJlci5hbHRlcm5hdGU7XG5cbiAgaWYgKGFsdGVybmF0ZSAhPT0gbnVsbCkge1xuICAgIGFsdGVybmF0ZS5yZXR1cm4gPSBudWxsO1xuICB9XG5cbiAgZmliZXIucmV0dXJuID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gZGV0YWNoRmliZXJBZnRlckVmZmVjdHMoZmliZXIpIHtcbiAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcblxuICBpZiAoYWx0ZXJuYXRlICE9PSBudWxsKSB7XG4gICAgZmliZXIuYWx0ZXJuYXRlID0gbnVsbDtcbiAgICBkZXRhY2hGaWJlckFmdGVyRWZmZWN0cyhhbHRlcm5hdGUpO1xuICB9IC8vIE5vdGU6IERlZmVuc2l2ZWx5IHVzaW5nIG5lZ2F0aW9uIGluc3RlYWQgb2YgPCBpbiBjYXNlXG4gIC8vIGBkZWxldGVkVHJlZUNsZWFuVXBMZXZlbGAgaXMgdW5kZWZpbmVkLlxuXG5cbiAge1xuICAgIC8vIENsZWFyIGN5Y2xpY2FsIEZpYmVyIGZpZWxkcy4gVGhpcyBsZXZlbCBhbG9uZSBpcyBkZXNpZ25lZCB0byByb3VnaGx5XG4gICAgLy8gYXBwcm94aW1hdGUgdGhlIHBsYW5uZWQgRmliZXIgcmVmYWN0b3IuIEluIHRoYXQgd29ybGQsIGBzZXRTdGF0ZWAgd2lsbCBiZVxuICAgIC8vIGJvdW5kIHRvIGEgc3BlY2lhbCBcImluc3RhbmNlXCIgb2JqZWN0IGluc3RlYWQgb2YgYSBGaWJlci4gVGhlIEluc3RhbmNlXG4gICAgLy8gb2JqZWN0IHdpbGwgbm90IGhhdmUgYW55IG9mIHRoZXNlIGZpZWxkcy4gSXQgd2lsbCBvbmx5IGJlIGNvbm5lY3RlZCB0b1xuICAgIC8vIHRoZSBmaWJlciB0cmVlIHZpYSBhIHNpbmdsZSBsaW5rIGF0IHRoZSByb290LiBTbyBpZiB0aGlzIGxldmVsIGFsb25lIGlzXG4gICAgLy8gc3VmZmljaWVudCB0byBmaXggbWVtb3J5IGlzc3VlcywgdGhhdCBib2RlcyB3ZWxsIGZvciBvdXIgcGxhbnMuXG4gICAgZmliZXIuY2hpbGQgPSBudWxsO1xuICAgIGZpYmVyLmRlbGV0aW9ucyA9IG51bGw7XG4gICAgZmliZXIuc2libGluZyA9IG51bGw7IC8vIFRoZSBgc3RhdGVOb2RlYCBpcyBjeWNsaWNhbCBiZWNhdXNlIG9uIGhvc3Qgbm9kZXMgaXQgcG9pbnRzIHRvIHRoZSBob3N0XG4gICAgLy8gdHJlZSwgd2hpY2ggaGFzIGl0cyBvd24gcG9pbnRlcnMgdG8gY2hpbGRyZW4sIHBhcmVudHMsIGFuZCBzaWJsaW5ncy5cbiAgICAvLyBUaGUgb3RoZXIgaG9zdCBub2RlcyBhbHNvIHBvaW50IGJhY2sgdG8gZmliZXJzLCBzbyB3ZSBzaG91bGQgZGV0YWNoIHRoYXRcbiAgICAvLyBvbmUsIHRvby5cblxuICAgIGlmIChmaWJlci50YWcgPT09IEhvc3RDb21wb25lbnQpIHtcbiAgICAgIHZhciBob3N0SW5zdGFuY2UgPSBmaWJlci5zdGF0ZU5vZGU7XG5cbiAgICAgIGlmIChob3N0SW5zdGFuY2UgIT09IG51bGwpIHtcbiAgICAgICAgZGV0YWNoRGVsZXRlZEluc3RhbmNlKGhvc3RJbnN0YW5jZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmliZXIuc3RhdGVOb2RlID0gbnVsbDsgLy8gSSdtIGludGVudGlvbmFsbHkgbm90IGNsZWFyaW5nIHRoZSBgcmV0dXJuYCBmaWVsZCBpbiB0aGlzIGxldmVsLiBXZVxuICAgIC8vIGFscmVhZHkgZGlzY29ubmVjdCB0aGUgYHJldHVybmAgcG9pbnRlciBhdCB0aGUgcm9vdCBvZiB0aGUgZGVsZXRlZFxuICAgIC8vIHN1YnRyZWUgKGluIGBkZXRhY2hGaWJlck11dGF0aW9uYCkuIEJlc2lkZXMsIGByZXR1cm5gIGJ5IGl0c2VsZiBpcyBub3RcbiAgICAvLyBjeWNsaWNhbCDigJQgaXQncyBvbmx5IGN5Y2xpY2FsIHdoZW4gY29tYmluZWQgd2l0aCBgY2hpbGRgLCBgc2libGluZ2AsIGFuZFxuICAgIC8vIGBhbHRlcm5hdGVgLiBCdXQgd2UnbGwgY2xlYXIgaXQgaW4gdGhlIG5leHQgbGV2ZWwgYW55d2F5LCBqdXN0IGluIGNhc2UuXG5cbiAgICB7XG4gICAgICBmaWJlci5fZGVidWdPd25lciA9IG51bGw7XG4gICAgfVxuXG4gICAge1xuICAgICAgLy8gVGhlb3JldGljYWxseSwgbm90aGluZyBpbiBoZXJlIHNob3VsZCBiZSBuZWNlc3NhcnksIGJlY2F1c2Ugd2UgYWxyZWFkeVxuICAgICAgLy8gZGlzY29ubmVjdGVkIHRoZSBmaWJlciBmcm9tIHRoZSB0cmVlLiBTbyBldmVuIGlmIHNvbWV0aGluZyBsZWFrcyB0aGlzXG4gICAgICAvLyBwYXJ0aWN1bGFyIGZpYmVyLCBpdCB3b24ndCBsZWFrIGFueXRoaW5nIGVsc2VcbiAgICAgIC8vXG4gICAgICAvLyBUaGUgcHVycG9zZSBvZiB0aGlzIGJyYW5jaCBpcyB0byBiZSBzdXBlciBhZ2dyZXNzaXZlIHNvIHdlIGNhbiBtZWFzdXJlXG4gICAgICAvLyBpZiB0aGVyZSdzIGFueSBkaWZmZXJlbmNlIGluIG1lbW9yeSBpbXBhY3QuIElmIHRoZXJlIGlzLCB0aGF0IGNvdWxkXG4gICAgICAvLyBpbmRpY2F0ZSBhIFJlYWN0IGxlYWsgd2UgZG9uJ3Qga25vdyBhYm91dC5cbiAgICAgIGZpYmVyLnJldHVybiA9IG51bGw7XG4gICAgICBmaWJlci5kZXBlbmRlbmNpZXMgPSBudWxsO1xuICAgICAgZmliZXIubWVtb2l6ZWRQcm9wcyA9IG51bGw7XG4gICAgICBmaWJlci5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgICAgIGZpYmVyLnBlbmRpbmdQcm9wcyA9IG51bGw7XG4gICAgICBmaWJlci5zdGF0ZU5vZGUgPSBudWxsOyAvLyBUT0RPOiBNb3ZlIHRvIGBjb21taXRQYXNzaXZlVW5tb3VudEluc2lkZURlbGV0ZWRUcmVlT25GaWJlcmAgaW5zdGVhZC5cblxuICAgICAgZmliZXIudXBkYXRlUXVldWUgPSBudWxsO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRIb3N0UGFyZW50RmliZXIoZmliZXIpIHtcbiAgdmFyIHBhcmVudCA9IGZpYmVyLnJldHVybjtcblxuICB3aGlsZSAocGFyZW50ICE9PSBudWxsKSB7XG4gICAgaWYgKGlzSG9zdFBhcmVudChwYXJlbnQpKSB7XG4gICAgICByZXR1cm4gcGFyZW50O1xuICAgIH1cblxuICAgIHBhcmVudCA9IHBhcmVudC5yZXR1cm47XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRvIGZpbmQgYSBob3N0IHBhcmVudC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnICcgKyAnaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xufVxuXG5mdW5jdGlvbiBpc0hvc3RQYXJlbnQoZmliZXIpIHtcbiAgcmV0dXJuIGZpYmVyLnRhZyA9PT0gSG9zdENvbXBvbmVudCB8fCBmaWJlci50YWcgPT09IEhvc3RSb290IHx8IGZpYmVyLnRhZyA9PT0gSG9zdFBvcnRhbDtcbn1cblxuZnVuY3Rpb24gZ2V0SG9zdFNpYmxpbmcoZmliZXIpIHtcbiAgLy8gV2UncmUgZ29pbmcgdG8gc2VhcmNoIGZvcndhcmQgaW50byB0aGUgdHJlZSB1bnRpbCB3ZSBmaW5kIGEgc2libGluZyBob3N0XG4gIC8vIG5vZGUuIFVuZm9ydHVuYXRlbHksIGlmIG11bHRpcGxlIGluc2VydGlvbnMgYXJlIGRvbmUgaW4gYSByb3cgd2UgaGF2ZSB0b1xuICAvLyBzZWFyY2ggcGFzdCB0aGVtLiBUaGlzIGxlYWRzIHRvIGV4cG9uZW50aWFsIHNlYXJjaCBmb3IgdGhlIG5leHQgc2libGluZy5cbiAgLy8gVE9ETzogRmluZCBhIG1vcmUgZWZmaWNpZW50IHdheSB0byBkbyB0aGlzLlxuICB2YXIgbm9kZSA9IGZpYmVyO1xuXG4gIHNpYmxpbmdzOiB3aGlsZSAodHJ1ZSkge1xuICAgIC8vIElmIHdlIGRpZG4ndCBmaW5kIGFueXRoaW5nLCBsZXQncyB0cnkgdGhlIG5leHQgc2libGluZy5cbiAgICB3aGlsZSAobm9kZS5zaWJsaW5nID09PSBudWxsKSB7XG4gICAgICBpZiAobm9kZS5yZXR1cm4gPT09IG51bGwgfHwgaXNIb3N0UGFyZW50KG5vZGUucmV0dXJuKSkge1xuICAgICAgICAvLyBJZiB3ZSBwb3Agb3V0IG9mIHRoZSByb290IG9yIGhpdCB0aGUgcGFyZW50IHRoZSBmaWJlciB3ZSBhcmUgdGhlXG4gICAgICAgIC8vIGxhc3Qgc2libGluZy5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG5cbiAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICB9XG5cbiAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm47XG4gICAgbm9kZSA9IG5vZGUuc2libGluZztcblxuICAgIHdoaWxlIChub2RlLnRhZyAhPT0gSG9zdENvbXBvbmVudCAmJiBub2RlLnRhZyAhPT0gSG9zdFRleHQgJiYgbm9kZS50YWcgIT09IERlaHlkcmF0ZWRGcmFnbWVudCkge1xuICAgICAgLy8gSWYgaXQgaXMgbm90IGhvc3Qgbm9kZSBhbmQsIHdlIG1pZ2h0IGhhdmUgYSBob3N0IG5vZGUgaW5zaWRlIGl0LlxuICAgICAgLy8gVHJ5IHRvIHNlYXJjaCBkb3duIHVudGlsIHdlIGZpbmQgb25lLlxuICAgICAgaWYgKG5vZGUuZmxhZ3MgJiBQbGFjZW1lbnQpIHtcbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIGNoaWxkLCB0cnkgdGhlIHNpYmxpbmdzIGluc3RlYWQuXG4gICAgICAgIGNvbnRpbnVlIHNpYmxpbmdzO1xuICAgICAgfSAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgY2hpbGQsIHRyeSB0aGUgc2libGluZ3MgaW5zdGVhZC5cbiAgICAgIC8vIFdlIGFsc28gc2tpcCBwb3J0YWxzIGJlY2F1c2UgdGhleSBhcmUgbm90IHBhcnQgb2YgdGhpcyBob3N0IHRyZWUuXG5cblxuICAgICAgaWYgKG5vZGUuY2hpbGQgPT09IG51bGwgfHwgbm9kZS50YWcgPT09IEhvc3RQb3J0YWwpIHtcbiAgICAgICAgY29udGludWUgc2libGluZ3M7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGU7XG4gICAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgfVxuICAgIH0gLy8gQ2hlY2sgaWYgdGhpcyBob3N0IG5vZGUgaXMgc3RhYmxlIG9yIGFib3V0IHRvIGJlIHBsYWNlZC5cblxuXG4gICAgaWYgKCEobm9kZS5mbGFncyAmIFBsYWNlbWVudCkpIHtcbiAgICAgIC8vIEZvdW5kIGl0IVxuICAgICAgcmV0dXJuIG5vZGUuc3RhdGVOb2RlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXRQbGFjZW1lbnQoZmluaXNoZWRXb3JrKSB7XG5cblxuICB2YXIgcGFyZW50RmliZXIgPSBnZXRIb3N0UGFyZW50RmliZXIoZmluaXNoZWRXb3JrKTsgLy8gTm90ZTogdGhlc2UgdHdvIHZhcmlhYmxlcyAqbXVzdCogYWx3YXlzIGJlIHVwZGF0ZWQgdG9nZXRoZXIuXG5cbiAgc3dpdGNoIChwYXJlbnRGaWJlci50YWcpIHtcbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBwYXJlbnRGaWJlci5zdGF0ZU5vZGU7XG5cbiAgICAgICAgaWYgKHBhcmVudEZpYmVyLmZsYWdzICYgQ29udGVudFJlc2V0KSB7XG4gICAgICAgICAgLy8gUmVzZXQgdGhlIHRleHQgY29udGVudCBvZiB0aGUgcGFyZW50IGJlZm9yZSBkb2luZyBhbnkgaW5zZXJ0aW9uc1xuICAgICAgICAgIHJlc2V0VGV4dENvbnRlbnQocGFyZW50KTsgLy8gQ2xlYXIgQ29udGVudFJlc2V0IGZyb20gdGhlIGVmZmVjdCB0YWdcblxuICAgICAgICAgIHBhcmVudEZpYmVyLmZsYWdzICY9IH5Db250ZW50UmVzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYmVmb3JlID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKTsgLy8gV2Ugb25seSBoYXZlIHRoZSB0b3AgRmliZXIgdGhhdCB3YXMgaW5zZXJ0ZWQgYnV0IHdlIG5lZWQgdG8gcmVjdXJzZSBkb3duIGl0c1xuICAgICAgICAvLyBjaGlsZHJlbiB0byBmaW5kIGFsbCB0aGUgdGVybWluYWwgbm9kZXMuXG5cbiAgICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlKGZpbmlzaGVkV29yaywgYmVmb3JlLCBwYXJlbnQpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAge1xuICAgICAgICB2YXIgX3BhcmVudCA9IHBhcmVudEZpYmVyLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1xuXG4gICAgICAgIHZhciBfYmVmb3JlID0gZ2V0SG9zdFNpYmxpbmcoZmluaXNoZWRXb3JrKTtcblxuICAgICAgICBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGVJbnRvQ29udGFpbmVyKGZpbmlzaGVkV29yaywgX2JlZm9yZSwgX3BhcmVudCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZS1uby1mYWxsdGhyb3VnaFxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBob3N0IHBhcmVudCBmaWJlci4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnICcgKyAnaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZUludG9Db250YWluZXIobm9kZSwgYmVmb3JlLCBwYXJlbnQpIHtcbiAgdmFyIHRhZyA9IG5vZGUudGFnO1xuICB2YXIgaXNIb3N0ID0gdGFnID09PSBIb3N0Q29tcG9uZW50IHx8IHRhZyA9PT0gSG9zdFRleHQ7XG5cbiAgaWYgKGlzSG9zdCkge1xuICAgIHZhciBzdGF0ZU5vZGUgPSBub2RlLnN0YXRlTm9kZTtcblxuICAgIGlmIChiZWZvcmUpIHtcbiAgICAgIGluc2VydEluQ29udGFpbmVyQmVmb3JlKHBhcmVudCwgc3RhdGVOb2RlLCBiZWZvcmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcHBlbmRDaGlsZFRvQ29udGFpbmVyKHBhcmVudCwgc3RhdGVOb2RlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodGFnID09PSBIb3N0UG9ydGFsKSA7IGVsc2Uge1xuICAgIHZhciBjaGlsZCA9IG5vZGUuY2hpbGQ7XG5cbiAgICBpZiAoY2hpbGQgIT09IG51bGwpIHtcbiAgICAgIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZUludG9Db250YWluZXIoY2hpbGQsIGJlZm9yZSwgcGFyZW50KTtcbiAgICAgIHZhciBzaWJsaW5nID0gY2hpbGQuc2libGluZztcblxuICAgICAgd2hpbGUgKHNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlSW50b0NvbnRhaW5lcihzaWJsaW5nLCBiZWZvcmUsIHBhcmVudCk7XG4gICAgICAgIHNpYmxpbmcgPSBzaWJsaW5nLnNpYmxpbmc7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGluc2VydE9yQXBwZW5kUGxhY2VtZW50Tm9kZShub2RlLCBiZWZvcmUsIHBhcmVudCkge1xuICB2YXIgdGFnID0gbm9kZS50YWc7XG4gIHZhciBpc0hvc3QgPSB0YWcgPT09IEhvc3RDb21wb25lbnQgfHwgdGFnID09PSBIb3N0VGV4dDtcblxuICBpZiAoaXNIb3N0KSB7XG4gICAgdmFyIHN0YXRlTm9kZSA9IG5vZGUuc3RhdGVOb2RlO1xuXG4gICAgaWYgKGJlZm9yZSkge1xuICAgICAgaW5zZXJ0QmVmb3JlKHBhcmVudCwgc3RhdGVOb2RlLCBiZWZvcmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcHBlbmRDaGlsZChwYXJlbnQsIHN0YXRlTm9kZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKHRhZyA9PT0gSG9zdFBvcnRhbCkgOyBlbHNlIHtcbiAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkO1xuXG4gICAgaWYgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgICBpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGUoY2hpbGQsIGJlZm9yZSwgcGFyZW50KTtcbiAgICAgIHZhciBzaWJsaW5nID0gY2hpbGQuc2libGluZztcblxuICAgICAgd2hpbGUgKHNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgICAgaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlKHNpYmxpbmcsIGJlZm9yZSwgcGFyZW50KTtcbiAgICAgICAgc2libGluZyA9IHNpYmxpbmcuc2libGluZztcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0gLy8gVGhlc2UgYXJlIHRyYWNrZWQgb24gdGhlIHN0YWNrIGFzIHdlIHJlY3Vyc2l2ZWx5IHRyYXZlcnNlIGFcbi8vIGRlbGV0ZWQgc3VidHJlZS5cbi8vIFRPRE86IFVwZGF0ZSB0aGVzZSBkdXJpbmcgdGhlIHdob2xlIG11dGF0aW9uIHBoYXNlLCBub3QganVzdCBkdXJpbmdcbi8vIGEgZGVsZXRpb24uXG5cblxudmFyIGhvc3RQYXJlbnQgPSBudWxsO1xudmFyIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IGZhbHNlO1xuXG5mdW5jdGlvbiBjb21taXREZWxldGlvbkVmZmVjdHMocm9vdCwgcmV0dXJuRmliZXIsIGRlbGV0ZWRGaWJlcikge1xuICB7XG4gICAgLy8gV2Ugb25seSBoYXZlIHRoZSB0b3AgRmliZXIgdGhhdCB3YXMgZGVsZXRlZCBidXQgd2UgbmVlZCB0byByZWN1cnNlIGRvd24gaXRzXG4gICAgLy8gY2hpbGRyZW4gdG8gZmluZCBhbGwgdGhlIHRlcm1pbmFsIG5vZGVzLlxuICAgIC8vIFJlY3Vyc2l2ZWx5IGRlbGV0ZSBhbGwgaG9zdCBub2RlcyBmcm9tIHRoZSBwYXJlbnQsIGRldGFjaCByZWZzLCBjbGVhblxuICAgIC8vIHVwIG1vdW50ZWQgbGF5b3V0IGVmZmVjdHMsIGFuZCBjYWxsIGNvbXBvbmVudFdpbGxVbm1vdW50LlxuICAgIC8vIFdlIG9ubHkgbmVlZCB0byByZW1vdmUgdGhlIHRvcG1vc3QgaG9zdCBjaGlsZCBpbiBlYWNoIGJyYW5jaC4gQnV0IHRoZW4gd2VcbiAgICAvLyBzdGlsbCBuZWVkIHRvIGtlZXAgdHJhdmVyc2luZyB0byB1bm1vdW50IGVmZmVjdHMsIHJlZnMsIGFuZCBjV1UuIFRPRE86IFdlXG4gICAgLy8gY291bGQgc3BsaXQgdGhpcyBpbnRvIHR3byBzZXBhcmF0ZSB0cmF2ZXJzYWxzIGZ1bmN0aW9ucywgd2hlcmUgdGhlIHNlY29uZFxuICAgIC8vIG9uZSBkb2Vzbid0IGluY2x1ZGUgYW55IHJlbW92ZUNoaWxkIGxvZ2ljLiBUaGlzIGlzIG1heWJlIHRoZSBzYW1lXG4gICAgLy8gZnVuY3Rpb24gYXMgXCJkaXNhcHBlYXJMYXlvdXRFZmZlY3RzXCIgKG9yIHdoYXRldmVyIHRoYXQgdHVybnMgaW50byBhZnRlclxuICAgIC8vIHRoZSBsYXlvdXQgcGhhc2UgaXMgcmVmYWN0b3JlZCB0byB1c2UgcmVjdXJzaW9uKS5cbiAgICAvLyBCZWZvcmUgc3RhcnRpbmcsIGZpbmQgdGhlIG5lYXJlc3QgaG9zdCBwYXJlbnQgb24gdGhlIHN0YWNrIHNvIHdlIGtub3dcbiAgICAvLyB3aGljaCBpbnN0YW5jZS9jb250YWluZXIgdG8gcmVtb3ZlIHRoZSBjaGlsZHJlbiBmcm9tLlxuICAgIC8vIFRPRE86IEluc3RlYWQgb2Ygc2VhcmNoaW5nIHVwIHRoZSBmaWJlciByZXR1cm4gcGF0aCBvbiBldmVyeSBkZWxldGlvbiwgd2VcbiAgICAvLyBjYW4gdHJhY2sgdGhlIG5lYXJlc3QgaG9zdCBjb21wb25lbnQgb24gdGhlIEpTIHN0YWNrIGFzIHdlIHRyYXZlcnNlIHRoZVxuICAgIC8vIHRyZWUgZHVyaW5nIHRoZSBjb21taXQgcGhhc2UuIFRoaXMgd291bGQgbWFrZSBpbnNlcnRpb25zIGZhc3RlciwgdG9vLlxuICAgIHZhciBwYXJlbnQgPSByZXR1cm5GaWJlcjtcblxuICAgIGZpbmRQYXJlbnQ6IHdoaWxlIChwYXJlbnQgIT09IG51bGwpIHtcbiAgICAgIHN3aXRjaCAocGFyZW50LnRhZykge1xuICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgaG9zdFBhcmVudCA9IHBhcmVudC5zdGF0ZU5vZGU7XG4gICAgICAgICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIGJyZWFrIGZpbmRQYXJlbnQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgICAge1xuICAgICAgICAgICAgaG9zdFBhcmVudCA9IHBhcmVudC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IHRydWU7XG4gICAgICAgICAgICBicmVhayBmaW5kUGFyZW50O1xuICAgICAgICAgIH1cblxuICAgICAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICAgICAge1xuICAgICAgICAgICAgaG9zdFBhcmVudCA9IHBhcmVudC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IHRydWU7XG4gICAgICAgICAgICBicmVhayBmaW5kUGFyZW50O1xuICAgICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcGFyZW50ID0gcGFyZW50LnJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaG9zdFBhcmVudCA9PT0gbnVsbCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0byBmaW5kIGEgaG9zdCBwYXJlbnQuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSAnICsgJ2EgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICB9XG5cbiAgICBjb21taXREZWxldGlvbkVmZmVjdHNPbkZpYmVyKHJvb3QsIHJldHVybkZpYmVyLCBkZWxldGVkRmliZXIpO1xuICAgIGhvc3RQYXJlbnQgPSBudWxsO1xuICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IGZhbHNlO1xuICB9XG5cbiAgZGV0YWNoRmliZXJNdXRhdGlvbihkZWxldGVkRmliZXIpO1xufVxuXG5mdW5jdGlvbiByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKGZpbmlzaGVkUm9vdCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgcGFyZW50KSB7XG4gIC8vIFRPRE86IFVzZSBhIHN0YXRpYyBmbGFnIHRvIHNraXAgdHJlZXMgdGhhdCBkb24ndCBoYXZlIHVubW91bnQgZWZmZWN0c1xuICB2YXIgY2hpbGQgPSBwYXJlbnQuY2hpbGQ7XG5cbiAgd2hpbGUgKGNoaWxkICE9PSBudWxsKSB7XG4gICAgY29tbWl0RGVsZXRpb25FZmZlY3RzT25GaWJlcihmaW5pc2hlZFJvb3QsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGNoaWxkKTtcbiAgICBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0RGVsZXRpb25FZmZlY3RzT25GaWJlcihmaW5pc2hlZFJvb3QsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGRlbGV0ZWRGaWJlcikge1xuICBvbkNvbW1pdFVubW91bnQoZGVsZXRlZEZpYmVyKTsgLy8gVGhlIGNhc2VzIGluIHRoaXMgb3V0ZXIgc3dpdGNoIG1vZGlmeSB0aGUgc3RhY2sgYmVmb3JlIHRoZXkgdHJhdmVyc2VcbiAgLy8gaW50byB0aGVpciBzdWJ0cmVlLiBUaGVyZSBhcmUgc2ltcGxlciBjYXNlcyBpbiB0aGUgaW5uZXIgc3dpdGNoXG4gIC8vIHRoYXQgZG9uJ3QgbW9kaWZ5IHRoZSBzdGFjay5cblxuICBzd2l0Y2ggKGRlbGV0ZWRGaWJlci50YWcpIHtcbiAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIGlmICghb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbikge1xuICAgICAgICAgIHNhZmVseURldGFjaFJlZihkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgICB9IC8vIEludGVudGlvbmFsIGZhbGx0aHJvdWdoIHRvIG5leHQgYnJhbmNoXG5cbiAgICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUtbm8tZmFsbHRocm91Z2hcblxuICAgIGNhc2UgSG9zdFRleHQ6XG4gICAgICB7XG4gICAgICAgIC8vIFdlIG9ubHkgbmVlZCB0byByZW1vdmUgdGhlIG5lYXJlc3QgaG9zdCBjaGlsZC4gU2V0IHRoZSBob3N0IHBhcmVudFxuICAgICAgICAvLyB0byBgbnVsbGAgb24gdGhlIHN0YWNrIHRvIGluZGljYXRlIHRoYXQgbmVzdGVkIGNoaWxkcmVuIGRvbid0XG4gICAgICAgIC8vIG5lZWQgdG8gYmUgcmVtb3ZlZC5cbiAgICAgICAge1xuICAgICAgICAgIHZhciBwcmV2SG9zdFBhcmVudCA9IGhvc3RQYXJlbnQ7XG4gICAgICAgICAgdmFyIHByZXZIb3N0UGFyZW50SXNDb250YWluZXIgPSBob3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICAgICAgaG9zdFBhcmVudCA9IG51bGw7XG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhmaW5pc2hlZFJvb3QsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGRlbGV0ZWRGaWJlcik7XG4gICAgICAgICAgaG9zdFBhcmVudCA9IHByZXZIb3N0UGFyZW50O1xuICAgICAgICAgIGhvc3RQYXJlbnRJc0NvbnRhaW5lciA9IHByZXZIb3N0UGFyZW50SXNDb250YWluZXI7XG5cbiAgICAgICAgICBpZiAoaG9zdFBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gTm93IHRoYXQgYWxsIHRoZSBjaGlsZCBlZmZlY3RzIGhhdmUgdW5tb3VudGVkLCB3ZSBjYW4gcmVtb3ZlIHRoZVxuICAgICAgICAgICAgLy8gbm9kZSBmcm9tIHRoZSB0cmVlLlxuICAgICAgICAgICAgaWYgKGhvc3RQYXJlbnRJc0NvbnRhaW5lcikge1xuICAgICAgICAgICAgICByZW1vdmVDaGlsZEZyb21Db250YWluZXIoaG9zdFBhcmVudCwgZGVsZXRlZEZpYmVyLnN0YXRlTm9kZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZW1vdmVDaGlsZChob3N0UGFyZW50LCBkZWxldGVkRmliZXIuc3RhdGVOb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICBjYXNlIERlaHlkcmF0ZWRGcmFnbWVudDpcbiAgICAgIHtcbiAgICAgICAgLy8gRGVsZXRlIHRoZSBkZWh5ZHJhdGVkIHN1c3BlbnNlIGJvdW5kYXJ5IGFuZCBhbGwgb2YgaXRzIGNvbnRlbnQuXG5cblxuICAgICAgICB7XG4gICAgICAgICAgaWYgKGhvc3RQYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChob3N0UGFyZW50SXNDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgY2xlYXJTdXNwZW5zZUJvdW5kYXJ5RnJvbUNvbnRhaW5lcihob3N0UGFyZW50LCBkZWxldGVkRmliZXIuc3RhdGVOb2RlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNsZWFyU3VzcGVuc2VCb3VuZGFyeShob3N0UGFyZW50LCBkZWxldGVkRmliZXIuc3RhdGVOb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICB7XG4gICAgICAgIHtcbiAgICAgICAgICAvLyBXaGVuIHdlIGdvIGludG8gYSBwb3J0YWwsIGl0IGJlY29tZXMgdGhlIHBhcmVudCB0byByZW1vdmUgZnJvbS5cbiAgICAgICAgICB2YXIgX3ByZXZIb3N0UGFyZW50ID0gaG9zdFBhcmVudDtcbiAgICAgICAgICB2YXIgX3ByZXZIb3N0UGFyZW50SXNDb250YWluZXIgPSBob3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICAgICAgaG9zdFBhcmVudCA9IGRlbGV0ZWRGaWJlci5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztcbiAgICAgICAgICBob3N0UGFyZW50SXNDb250YWluZXIgPSB0cnVlO1xuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoZmluaXNoZWRSb290LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBkZWxldGVkRmliZXIpO1xuICAgICAgICAgIGhvc3RQYXJlbnQgPSBfcHJldkhvc3RQYXJlbnQ7XG4gICAgICAgICAgaG9zdFBhcmVudElzQ29udGFpbmVyID0gX3ByZXZIb3N0UGFyZW50SXNDb250YWluZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICBjYXNlIEZ1bmN0aW9uQ29tcG9uZW50OlxuICAgIGNhc2UgRm9yd2FyZFJlZjpcbiAgICBjYXNlIE1lbW9Db21wb25lbnQ6XG4gICAgY2FzZSBTaW1wbGVNZW1vQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICBpZiAoIW9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4pIHtcbiAgICAgICAgICB2YXIgdXBkYXRlUXVldWUgPSBkZWxldGVkRmliZXIudXBkYXRlUXVldWU7XG5cbiAgICAgICAgICBpZiAodXBkYXRlUXVldWUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsYXN0RWZmZWN0ID0gdXBkYXRlUXVldWUubGFzdEVmZmVjdDtcblxuICAgICAgICAgICAgaWYgKGxhc3RFZmZlY3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgdmFyIGZpcnN0RWZmZWN0ID0gbGFzdEVmZmVjdC5uZXh0O1xuICAgICAgICAgICAgICB2YXIgZWZmZWN0ID0gZmlyc3RFZmZlY3Q7XG5cbiAgICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIHZhciBfZWZmZWN0ID0gZWZmZWN0LFxuICAgICAgICAgICAgICAgICAgICBkZXN0cm95ID0gX2VmZmVjdC5kZXN0cm95LFxuICAgICAgICAgICAgICAgICAgICB0YWcgPSBfZWZmZWN0LnRhZztcblxuICAgICAgICAgICAgICAgIGlmIChkZXN0cm95ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgIGlmICgodGFnICYgSW5zZXJ0aW9uKSAhPT0gTm9GbGFncyQxKSB7XG4gICAgICAgICAgICAgICAgICAgIHNhZmVseUNhbGxEZXN0cm95KGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZGVzdHJveSk7XG4gICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCh0YWcgJiBMYXlvdXQpICE9PSBOb0ZsYWdzJDEpIHtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmtDb21wb25lbnRMYXlvdXRFZmZlY3RVbm1vdW50U3RhcnRlZChkZWxldGVkRmliZXIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBkZWxldGVkRmliZXIubW9kZSAmIFByb2ZpbGVNb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgc3RhcnRMYXlvdXRFZmZlY3RUaW1lcigpO1xuICAgICAgICAgICAgICAgICAgICAgIHNhZmVseUNhbGxEZXN0cm95KGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZGVzdHJveSk7XG4gICAgICAgICAgICAgICAgICAgICAgcmVjb3JkTGF5b3V0RWZmZWN0RHVyYXRpb24oZGVsZXRlZEZpYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBzYWZlbHlDYWxsRGVzdHJveShkZWxldGVkRmliZXIsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGRlc3Ryb3kpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgIG1hcmtDb21wb25lbnRMYXlvdXRFZmZlY3RVbm1vdW50U3RvcHBlZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZWZmZWN0ID0gZWZmZWN0Lm5leHQ7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKGVmZmVjdCAhPT0gZmlyc3RFZmZlY3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoZmluaXNoZWRSb290LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBkZWxldGVkRmliZXIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICBpZiAoIW9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4pIHtcbiAgICAgICAgICBzYWZlbHlEZXRhY2hSZWYoZGVsZXRlZEZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICAgICAgICB2YXIgaW5zdGFuY2UgPSBkZWxldGVkRmliZXIuc3RhdGVOb2RlO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsVW5tb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KGRlbGV0ZWRGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgaW5zdGFuY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoZmluaXNoZWRSb290LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBkZWxldGVkRmliZXIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICBjYXNlIFNjb3BlQ29tcG9uZW50OlxuICAgICAge1xuXG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoZmluaXNoZWRSb290LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBkZWxldGVkRmliZXIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICBjYXNlIE9mZnNjcmVlbkNvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgaWYgKCAvLyBUT0RPOiBSZW1vdmUgdGhpcyBkZWFkIGZsYWdcbiAgICAgICAgIGRlbGV0ZWRGaWJlci5tb2RlICYgQ29uY3VycmVudE1vZGUpIHtcbiAgICAgICAgICAvLyBJZiB0aGlzIG9mZnNjcmVlbiBjb21wb25lbnQgaXMgaGlkZGVuLCB3ZSBhbHJlYWR5IHVubW91bnRlZCBpdC4gQmVmb3JlXG4gICAgICAgICAgLy8gZGVsZXRpbmcgdGhlIGNoaWxkcmVuLCB0cmFjayB0aGF0IGl0J3MgYWxyZWFkeSB1bm1vdW50ZWQgc28gdGhhdCB3ZVxuICAgICAgICAgIC8vIGRvbid0IGF0dGVtcHQgdG8gdW5tb3VudCB0aGUgZWZmZWN0cyBhZ2Fpbi5cbiAgICAgICAgICAvLyBUT0RPOiBJZiB0aGUgdHJlZSBpcyBoaWRkZW4sIGluIG1vc3QgY2FzZXMgd2Ugc2hvdWxkIGJlIGFibGUgdG8gc2tpcFxuICAgICAgICAgIC8vIG92ZXIgdGhlIG5lc3RlZCBjaGlsZHJlbiBlbnRpcmVseS4gQW4gZXhjZXB0aW9uIGlzIHdlIGhhdmVuJ3QgeWV0IGZvdW5kXG4gICAgICAgICAgLy8gdGhlIHRvcG1vc3QgaG9zdCBub2RlIHRvIGRlbGV0ZSwgd2hpY2ggd2UgYWxyZWFkeSB0cmFjayBvbiB0aGUgc3RhY2suXG4gICAgICAgICAgLy8gQnV0IHRoZSBvdGhlciBjYXNlIGlzIHBvcnRhbHMsIHdoaWNoIG5lZWQgdG8gYmUgZGV0YWNoZWQgbm8gbWF0dGVyIGhvd1xuICAgICAgICAgIC8vIGRlZXBseSB0aGV5IGFyZSBuZXN0ZWQuIFdlIHNob3VsZCB1c2UgYSBzdWJ0cmVlIGZsYWcgdG8gdHJhY2sgd2hldGhlciBhXG4gICAgICAgICAgLy8gc3VidHJlZSBpbmNsdWRlcyBhIG5lc3RlZCBwb3J0YWwuXG4gICAgICAgICAgdmFyIHByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbjtcbiAgICAgICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gcHJldk9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gfHwgZGVsZXRlZEZpYmVyLm1lbW9pemVkU3RhdGUgIT09IG51bGw7XG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyhmaW5pc2hlZFJvb3QsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IsIGRlbGV0ZWRGaWJlcik7XG4gICAgICAgICAgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IHByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VEZWxldGlvbkVmZmVjdHMoZmluaXNoZWRSb290LCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yLCBkZWxldGVkRmliZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAge1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlRGVsZXRpb25FZmZlY3RzKGZpbmlzaGVkUm9vdCwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZGVsZXRlZEZpYmVyKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbW1pdFN1c3BlbnNlQ2FsbGJhY2soZmluaXNoZWRXb3JrKSB7XG4gIC8vIFRPRE86IE1vdmUgdGhpcyB0byBwYXNzaXZlIHBoYXNlXG4gIHZhciBuZXdTdGF0ZSA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlO1xufVxuXG5mdW5jdGlvbiBjb21taXRTdXNwZW5zZUh5ZHJhdGlvbkNhbGxiYWNrcyhmaW5pc2hlZFJvb3QsIGZpbmlzaGVkV29yaykge1xuXG4gIHZhciBuZXdTdGF0ZSA9IGZpbmlzaGVkV29yay5tZW1vaXplZFN0YXRlO1xuXG4gIGlmIChuZXdTdGF0ZSA9PT0gbnVsbCkge1xuICAgIHZhciBjdXJyZW50ID0gZmluaXNoZWRXb3JrLmFsdGVybmF0ZTtcblxuICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICB2YXIgcHJldlN0YXRlID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuXG4gICAgICBpZiAocHJldlN0YXRlICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBzdXNwZW5zZUluc3RhbmNlID0gcHJldlN0YXRlLmRlaHlkcmF0ZWQ7XG5cbiAgICAgICAgaWYgKHN1c3BlbnNlSW5zdGFuY2UgIT09IG51bGwpIHtcbiAgICAgICAgICBjb21taXRIeWRyYXRlZFN1c3BlbnNlSW5zdGFuY2Uoc3VzcGVuc2VJbnN0YW5jZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYXR0YWNoU3VzcGVuc2VSZXRyeUxpc3RlbmVycyhmaW5pc2hlZFdvcmspIHtcbiAgLy8gSWYgdGhpcyBib3VuZGFyeSBqdXN0IHRpbWVkIG91dCwgdGhlbiBpdCB3aWxsIGhhdmUgYSBzZXQgb2Ygd2FrZWFibGVzLlxuICAvLyBGb3IgZWFjaCB3YWtlYWJsZSwgYXR0YWNoIGEgbGlzdGVuZXIgc28gdGhhdCB3aGVuIGl0IHJlc29sdmVzLCBSZWFjdFxuICAvLyBhdHRlbXB0cyB0byByZS1yZW5kZXIgdGhlIGJvdW5kYXJ5IGluIHRoZSBwcmltYXJ5IChwcmUtdGltZW91dCkgc3RhdGUuXG4gIHZhciB3YWtlYWJsZXMgPSBmaW5pc2hlZFdvcmsudXBkYXRlUXVldWU7XG5cbiAgaWYgKHdha2VhYmxlcyAhPT0gbnVsbCkge1xuICAgIGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZSA9IG51bGw7XG4gICAgdmFyIHJldHJ5Q2FjaGUgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuXG4gICAgaWYgKHJldHJ5Q2FjaGUgPT09IG51bGwpIHtcbiAgICAgIHJldHJ5Q2FjaGUgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlID0gbmV3IFBvc3NpYmx5V2Vha1NldCgpO1xuICAgIH1cblxuICAgIHdha2VhYmxlcy5mb3JFYWNoKGZ1bmN0aW9uICh3YWtlYWJsZSkge1xuICAgICAgLy8gTWVtb2l6ZSB1c2luZyB0aGUgYm91bmRhcnkgZmliZXIgdG8gcHJldmVudCByZWR1bmRhbnQgbGlzdGVuZXJzLlxuICAgICAgdmFyIHJldHJ5ID0gcmVzb2x2ZVJldHJ5V2FrZWFibGUuYmluZChudWxsLCBmaW5pc2hlZFdvcmssIHdha2VhYmxlKTtcblxuICAgICAgaWYgKCFyZXRyeUNhY2hlLmhhcyh3YWtlYWJsZSkpIHtcbiAgICAgICAgcmV0cnlDYWNoZS5hZGQod2FrZWFibGUpO1xuXG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoaXNEZXZUb29sc1ByZXNlbnQpIHtcbiAgICAgICAgICAgIGlmIChpblByb2dyZXNzTGFuZXMgIT09IG51bGwgJiYgaW5Qcm9ncmVzc1Jvb3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBwZW5kaW5nIHdvcmsgc3RpbGwsIGFzc29jaWF0ZSB0aGUgb3JpZ2luYWwgdXBkYXRlcnMgd2l0aCBpdC5cbiAgICAgICAgICAgICAgcmVzdG9yZVBlbmRpbmdVcGRhdGVycyhpblByb2dyZXNzUm9vdCwgaW5Qcm9ncmVzc0xhbmVzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IEVycm9yKCdFeHBlY3RlZCBmaW5pc2hlZCByb290IGFuZCBsYW5lcyB0byBiZSBzZXQuIFRoaXMgaXMgYSBidWcgaW4gUmVhY3QuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgd2FrZWFibGUudGhlbihyZXRyeSwgcmV0cnkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59IC8vIFRoaXMgZnVuY3Rpb24gZGV0ZWN0cyB3aGVuIGEgU3VzcGVuc2UgYm91bmRhcnkgZ29lcyBmcm9tIHZpc2libGUgdG8gaGlkZGVuLlxuZnVuY3Rpb24gY29tbWl0TXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yaywgY29tbWl0dGVkTGFuZXMpIHtcbiAgaW5Qcm9ncmVzc0xhbmVzID0gY29tbWl0dGVkTGFuZXM7XG4gIGluUHJvZ3Jlc3NSb290ID0gcm9vdDtcbiAgc2V0Q3VycmVudEZpYmVyKGZpbmlzaGVkV29yayk7XG4gIGNvbW1pdE11dGF0aW9uRWZmZWN0c09uRmliZXIoZmluaXNoZWRXb3JrLCByb290KTtcbiAgc2V0Q3VycmVudEZpYmVyKGZpbmlzaGVkV29yayk7XG4gIGluUHJvZ3Jlc3NMYW5lcyA9IG51bGw7XG4gIGluUHJvZ3Jlc3NSb290ID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBwYXJlbnRGaWJlciwgbGFuZXMpIHtcbiAgLy8gRGVsZXRpb25zIGVmZmVjdHMgY2FuIGJlIHNjaGVkdWxlZCBvbiBhbnkgZmliZXIgdHlwZS4gVGhleSBuZWVkIHRvIGhhcHBlblxuICAvLyBiZWZvcmUgdGhlIGNoaWxkcmVuIGVmZmVjdHMgaGFlIGZpcmVkLlxuICB2YXIgZGVsZXRpb25zID0gcGFyZW50RmliZXIuZGVsZXRpb25zO1xuXG4gIGlmIChkZWxldGlvbnMgIT09IG51bGwpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRlbGV0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGNoaWxkVG9EZWxldGUgPSBkZWxldGlvbnNbaV07XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbW1pdERlbGV0aW9uRWZmZWN0cyhyb290LCBwYXJlbnRGaWJlciwgY2hpbGRUb0RlbGV0ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihjaGlsZFRvRGVsZXRlLCBwYXJlbnRGaWJlciwgZXJyb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBwcmV2RGVidWdGaWJlciA9IGdldEN1cnJlbnRGaWJlcigpO1xuXG4gIGlmIChwYXJlbnRGaWJlci5zdWJ0cmVlRmxhZ3MgJiBNdXRhdGlvbk1hc2spIHtcbiAgICB2YXIgY2hpbGQgPSBwYXJlbnRGaWJlci5jaGlsZDtcblxuICAgIHdoaWxlIChjaGlsZCAhPT0gbnVsbCkge1xuICAgICAgc2V0Q3VycmVudEZpYmVyKGNoaWxkKTtcbiAgICAgIGNvbW1pdE11dGF0aW9uRWZmZWN0c09uRmliZXIoY2hpbGQsIHJvb3QpO1xuICAgICAgY2hpbGQgPSBjaGlsZC5zaWJsaW5nO1xuICAgIH1cbiAgfVxuXG4gIHNldEN1cnJlbnRGaWJlcihwcmV2RGVidWdGaWJlcik7XG59XG5cbmZ1bmN0aW9uIGNvbW1pdE11dGF0aW9uRWZmZWN0c09uRmliZXIoZmluaXNoZWRXb3JrLCByb290LCBsYW5lcykge1xuICB2YXIgY3VycmVudCA9IGZpbmlzaGVkV29yay5hbHRlcm5hdGU7XG4gIHZhciBmbGFncyA9IGZpbmlzaGVkV29yay5mbGFnczsgLy8gVGhlIGVmZmVjdCBmbGFnIHNob3VsZCBiZSBjaGVja2VkICphZnRlciogd2UgcmVmaW5lIHRoZSB0eXBlIG9mIGZpYmVyLFxuICAvLyBiZWNhdXNlIHRoZSBmaWJlciB0YWcgaXMgbW9yZSBzcGVjaWZpYy4gQW4gZXhjZXB0aW9uIGlzIGFueSBmbGFnIHJlbGF0ZWRcbiAgLy8gdG8gcmVjb25jaWxhdGlvbiwgYmVjYXVzZSB0aG9zZSBjYW4gYmUgc2V0IG9uIGFsbCBmaWJlciB0eXBlcy5cblxuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIEZ1bmN0aW9uQ29tcG9uZW50OlxuICAgIGNhc2UgRm9yd2FyZFJlZjpcbiAgICBjYXNlIE1lbW9Db21wb25lbnQ6XG4gICAgY2FzZSBTaW1wbGVNZW1vQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuXG4gICAgICAgIGlmIChmbGFncyAmIFVwZGF0ZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoSW5zZXJ0aW9uIHwgSGFzRWZmZWN0LCBmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudChJbnNlcnRpb24gfCBIYXNFZmZlY3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgIH0gLy8gTGF5b3V0IGVmZmVjdHMgYXJlIGRlc3Ryb3llZCBkdXJpbmcgdGhlIG11dGF0aW9uIHBoYXNlIHNvIHRoYXQgYWxsXG4gICAgICAgICAgLy8gZGVzdHJveSBmdW5jdGlvbnMgZm9yIGFsbCBmaWJlcnMgYXJlIGNhbGxlZCBiZWZvcmUgYW55IGNyZWF0ZSBmdW5jdGlvbnMuXG4gICAgICAgICAgLy8gVGhpcyBwcmV2ZW50cyBzaWJsaW5nIGNvbXBvbmVudCBlZmZlY3RzIGZyb20gaW50ZXJmZXJpbmcgd2l0aCBlYWNoIG90aGVyLFxuICAgICAgICAgIC8vIGUuZy4gYSBkZXN0cm95IGZ1bmN0aW9uIGluIG9uZSBjb21wb25lbnQgc2hvdWxkIG5ldmVyIG92ZXJyaWRlIGEgcmVmIHNldFxuICAgICAgICAgIC8vIGJ5IGEgY3JlYXRlIGZ1bmN0aW9uIGluIGFub3RoZXIgY29tcG9uZW50IGR1cmluZyB0aGUgc2FtZSBjb21taXQuXG5cblxuICAgICAgICAgIGlmICggZmluaXNoZWRXb3JrLm1vZGUgJiBQcm9maWxlTW9kZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgc3RhcnRMYXlvdXRFZmZlY3RUaW1lcigpO1xuICAgICAgICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoTGF5b3V0IHwgSGFzRWZmZWN0LCBmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuLCBlcnJvcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlY29yZExheW91dEVmZmVjdER1cmF0aW9uKGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudChMYXlvdXQgfCBIYXNFZmZlY3QsIGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybik7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuXG4gICAgICAgIGlmIChmbGFncyAmIFJlZikge1xuICAgICAgICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICBzYWZlbHlEZXRhY2hSZWYoY3VycmVudCwgY3VycmVudC5yZXR1cm4pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcblxuICAgICAgICBpZiAoZmxhZ3MgJiBSZWYpIHtcbiAgICAgICAgICBpZiAoY3VycmVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGN1cnJlbnQsIGN1cnJlbnQucmV0dXJuKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB7XG4gICAgICAgICAgLy8gVE9ETzogQ29udGVudFJlc2V0IGdldHMgY2xlYXJlZCBieSB0aGUgY2hpbGRyZW4gZHVyaW5nIHRoZSBjb21taXRcbiAgICAgICAgICAvLyBwaGFzZS4gVGhpcyBpcyBhIHJlZmFjdG9yIGhhemFyZCBiZWNhdXNlIGl0IG1lYW5zIHdlIG11c3QgcmVhZFxuICAgICAgICAgIC8vIGZsYWdzIHRoZSBmbGFncyBhZnRlciBgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzYCBoYXMgYWxyZWFkeSBydW47XG4gICAgICAgICAgLy8gdGhlIG9yZGVyIG1hdHRlcnMuIFdlIHNob3VsZCByZWZhY3RvciBzbyB0aGF0IENvbnRlbnRSZXNldCBkb2VzIG5vdFxuICAgICAgICAgIC8vIHJlbHkgb24gbXV0YXRpbmcgdGhlIGZsYWcgZHVyaW5nIGNvbW1pdC4gTGlrZSBieSBzZXR0aW5nIGEgZmxhZ1xuICAgICAgICAgIC8vIGR1cmluZyB0aGUgcmVuZGVyIHBoYXNlIGluc3RlYWQuXG4gICAgICAgICAgaWYgKGZpbmlzaGVkV29yay5mbGFncyAmIENvbnRlbnRSZXNldCkge1xuICAgICAgICAgICAgdmFyIGluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgcmVzZXRUZXh0Q29udGVudChpbnN0YW5jZSk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoZmxhZ3MgJiBVcGRhdGUpIHtcbiAgICAgICAgICAgIHZhciBfaW5zdGFuY2U0ID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcblxuICAgICAgICAgICAgaWYgKF9pbnN0YW5jZTQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAvLyBDb21taXQgdGhlIHdvcmsgcHJlcGFyZWQgZWFybGllci5cbiAgICAgICAgICAgICAgdmFyIG5ld1Byb3BzID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHM7IC8vIEZvciBoeWRyYXRpb24gd2UgcmV1c2UgdGhlIHVwZGF0ZSBwYXRoIGJ1dCB3ZSB0cmVhdCB0aGUgb2xkUHJvcHNcbiAgICAgICAgICAgICAgLy8gYXMgdGhlIG5ld1Byb3BzLiBUaGUgdXBkYXRlUGF5bG9hZCB3aWxsIGNvbnRhaW4gdGhlIHJlYWwgY2hhbmdlIGluXG4gICAgICAgICAgICAgIC8vIHRoaXMgY2FzZS5cblxuICAgICAgICAgICAgICB2YXIgb2xkUHJvcHMgPSBjdXJyZW50ICE9PSBudWxsID8gY3VycmVudC5tZW1vaXplZFByb3BzIDogbmV3UHJvcHM7XG4gICAgICAgICAgICAgIHZhciB0eXBlID0gZmluaXNoZWRXb3JrLnR5cGU7IC8vIFRPRE86IFR5cGUgdGhlIHVwZGF0ZVF1ZXVlIHRvIGJlIHNwZWNpZmljIHRvIGhvc3QgY29tcG9uZW50cy5cblxuICAgICAgICAgICAgICB2YXIgdXBkYXRlUGF5bG9hZCA9IGZpbmlzaGVkV29yay51cGRhdGVRdWV1ZTtcbiAgICAgICAgICAgICAgZmluaXNoZWRXb3JrLnVwZGF0ZVF1ZXVlID0gbnVsbDtcblxuICAgICAgICAgICAgICBpZiAodXBkYXRlUGF5bG9hZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBjb21taXRVcGRhdGUoX2luc3RhbmNlNCwgdXBkYXRlUGF5bG9hZCwgdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzLCBmaW5pc2hlZFdvcmspO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICBjYXNlIEhvc3RUZXh0OlxuICAgICAge1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuXG4gICAgICAgIGlmIChmbGFncyAmIFVwZGF0ZSkge1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmIChmaW5pc2hlZFdvcmsuc3RhdGVOb2RlID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBzaG91bGQgaGF2ZSBhIHRleHQgbm9kZSBpbml0aWFsaXplZC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgJyArICdjYXVzZWQgYnkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgdGV4dEluc3RhbmNlID0gZmluaXNoZWRXb3JrLnN0YXRlTm9kZTtcbiAgICAgICAgICAgIHZhciBuZXdUZXh0ID0gZmluaXNoZWRXb3JrLm1lbW9pemVkUHJvcHM7IC8vIEZvciBoeWRyYXRpb24gd2UgcmV1c2UgdGhlIHVwZGF0ZSBwYXRoIGJ1dCB3ZSB0cmVhdCB0aGUgb2xkUHJvcHNcbiAgICAgICAgICAgIC8vIGFzIHRoZSBuZXdQcm9wcy4gVGhlIHVwZGF0ZVBheWxvYWQgd2lsbCBjb250YWluIHRoZSByZWFsIGNoYW5nZSBpblxuICAgICAgICAgICAgLy8gdGhpcyBjYXNlLlxuXG4gICAgICAgICAgICB2YXIgb2xkVGV4dCA9IGN1cnJlbnQgIT09IG51bGwgPyBjdXJyZW50Lm1lbW9pemVkUHJvcHMgOiBuZXdUZXh0O1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb21taXRUZXh0VXBkYXRlKHRleHRJbnN0YW5jZSwgb2xkVGV4dCwgbmV3VGV4dCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICBjYXNlIEhvc3RSb290OlxuICAgICAge1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuXG4gICAgICAgIGlmIChmbGFncyAmIFVwZGF0ZSkge1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgIHZhciBwcmV2Um9vdFN0YXRlID0gY3VycmVudC5tZW1vaXplZFN0YXRlO1xuXG4gICAgICAgICAgICAgIGlmIChwcmV2Um9vdFN0YXRlLmlzRGVoeWRyYXRlZCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICBjb21taXRIeWRyYXRlZENvbnRhaW5lcihyb290LmNvbnRhaW5lckluZm8pO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICB7XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgY2FzZSBTdXNwZW5zZUNvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICBjb21taXRSZWNvbmNpbGlhdGlvbkVmZmVjdHMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgdmFyIG9mZnNjcmVlbkZpYmVyID0gZmluaXNoZWRXb3JrLmNoaWxkO1xuXG4gICAgICAgIGlmIChvZmZzY3JlZW5GaWJlci5mbGFncyAmIFZpc2liaWxpdHkpIHtcbiAgICAgICAgICB2YXIgb2Zmc2NyZWVuSW5zdGFuY2UgPSBvZmZzY3JlZW5GaWJlci5zdGF0ZU5vZGU7XG4gICAgICAgICAgdmFyIG5ld1N0YXRlID0gb2Zmc2NyZWVuRmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgICAgICAgICB2YXIgaXNIaWRkZW4gPSBuZXdTdGF0ZSAhPT0gbnVsbDsgLy8gVHJhY2sgdGhlIGN1cnJlbnQgc3RhdGUgb24gdGhlIE9mZnNjcmVlbiBpbnN0YW5jZSBzbyB3ZSBjYW5cbiAgICAgICAgICAvLyByZWFkIGl0IGR1cmluZyBhbiBldmVudFxuXG4gICAgICAgICAgb2Zmc2NyZWVuSW5zdGFuY2UuaXNIaWRkZW4gPSBpc0hpZGRlbjtcblxuICAgICAgICAgIGlmIChpc0hpZGRlbikge1xuICAgICAgICAgICAgdmFyIHdhc0hpZGRlbiA9IG9mZnNjcmVlbkZpYmVyLmFsdGVybmF0ZSAhPT0gbnVsbCAmJiBvZmZzY3JlZW5GaWJlci5hbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZSAhPT0gbnVsbDtcblxuICAgICAgICAgICAgaWYgKCF3YXNIaWRkZW4pIHtcbiAgICAgICAgICAgICAgLy8gVE9ETzogTW92ZSB0byBwYXNzaXZlIHBoYXNlXG4gICAgICAgICAgICAgIG1hcmtDb21taXRUaW1lT2ZGYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmbGFncyAmIFVwZGF0ZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb21taXRTdXNwZW5zZUNhbGxiYWNrKGZpbmlzaGVkV29yayk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpbmlzaGVkV29yaywgZmluaXNoZWRXb3JrLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMoZmluaXNoZWRXb3JrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgIGNhc2UgT2Zmc2NyZWVuQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICB2YXIgX3dhc0hpZGRlbiA9IGN1cnJlbnQgIT09IG51bGwgJiYgY3VycmVudC5tZW1vaXplZFN0YXRlICE9PSBudWxsO1xuXG4gICAgICAgIGlmICggLy8gVE9ETzogUmVtb3ZlIHRoaXMgZGVhZCBmbGFnXG4gICAgICAgICBmaW5pc2hlZFdvcmsubW9kZSAmIENvbmN1cnJlbnRNb2RlKSB7XG4gICAgICAgICAgLy8gQmVmb3JlIGNvbW1pdHRpbmcgdGhlIGNoaWxkcmVuLCB0cmFjayBvbiB0aGUgc3RhY2sgd2hldGhlciB0aGlzXG4gICAgICAgICAgLy8gb2Zmc2NyZWVuIHN1YnRyZWUgd2FzIGFscmVhZHkgaGlkZGVuLCBzbyB0aGF0IHdlIGRvbid0IHVubW91bnQgdGhlXG4gICAgICAgICAgLy8gZWZmZWN0cyBhZ2Fpbi5cbiAgICAgICAgICB2YXIgcHJldk9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuICAgICAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiB8fCBfd2FzSGlkZGVuO1xuICAgICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICBvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuID0gcHJldk9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyhyb290LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICB9XG5cbiAgICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG5cbiAgICAgICAgaWYgKGZsYWdzICYgVmlzaWJpbGl0eSkge1xuICAgICAgICAgIHZhciBfb2Zmc2NyZWVuSW5zdGFuY2UgPSBmaW5pc2hlZFdvcmsuc3RhdGVOb2RlO1xuICAgICAgICAgIHZhciBfbmV3U3RhdGUgPSBmaW5pc2hlZFdvcmsubWVtb2l6ZWRTdGF0ZTtcblxuICAgICAgICAgIHZhciBfaXNIaWRkZW4gPSBfbmV3U3RhdGUgIT09IG51bGw7XG5cbiAgICAgICAgICB2YXIgb2Zmc2NyZWVuQm91bmRhcnkgPSBmaW5pc2hlZFdvcms7IC8vIFRyYWNrIHRoZSBjdXJyZW50IHN0YXRlIG9uIHRoZSBPZmZzY3JlZW4gaW5zdGFuY2Ugc28gd2UgY2FuXG4gICAgICAgICAgLy8gcmVhZCBpdCBkdXJpbmcgYW4gZXZlbnRcblxuICAgICAgICAgIF9vZmZzY3JlZW5JbnN0YW5jZS5pc0hpZGRlbiA9IF9pc0hpZGRlbjtcblxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmIChfaXNIaWRkZW4pIHtcbiAgICAgICAgICAgICAgaWYgKCFfd2FzSGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgaWYgKChvZmZzY3JlZW5Cb3VuZGFyeS5tb2RlICYgQ29uY3VycmVudE1vZGUpICE9PSBOb01vZGUpIHtcbiAgICAgICAgICAgICAgICAgIG5leHRFZmZlY3QgPSBvZmZzY3JlZW5Cb3VuZGFyeTtcbiAgICAgICAgICAgICAgICAgIHZhciBvZmZzY3JlZW5DaGlsZCA9IG9mZnNjcmVlbkJvdW5kYXJ5LmNoaWxkO1xuXG4gICAgICAgICAgICAgICAgICB3aGlsZSAob2Zmc2NyZWVuQ2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dEVmZmVjdCA9IG9mZnNjcmVlbkNoaWxkO1xuICAgICAgICAgICAgICAgICAgICBkaXNhcHBlYXJMYXlvdXRFZmZlY3RzX2JlZ2luKG9mZnNjcmVlbkNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2NyZWVuQ2hpbGQgPSBvZmZzY3JlZW5DaGlsZC5zaWJsaW5nO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC8vIFRPRE86IFRoaXMgbmVlZHMgdG8gcnVuIHdoZW5ldmVyIHRoZXJlJ3MgYW4gaW5zZXJ0aW9uIG9yIHVwZGF0ZVxuICAgICAgICAgICAgLy8gaW5zaWRlIGEgaGlkZGVuIE9mZnNjcmVlbiB0cmVlLlxuICAgICAgICAgICAgaGlkZU9yVW5oaWRlQWxsQ2hpbGRyZW4ob2Zmc2NyZWVuQm91bmRhcnksIF9pc0hpZGRlbik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgY2FzZSBTdXNwZW5zZUxpc3RDb21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIHJlY3Vyc2l2ZWx5VHJhdmVyc2VNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcbiAgICAgICAgY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yayk7XG5cbiAgICAgICAgaWYgKGZsYWdzICYgVXBkYXRlKSB7XG4gICAgICAgICAgYXR0YWNoU3VzcGVuc2VSZXRyeUxpc3RlbmVycyhmaW5pc2hlZFdvcmspO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgY2FzZSBTY29wZUNvbXBvbmVudDpcbiAgICAgIHtcblxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICBkZWZhdWx0OlxuICAgICAge1xuICAgICAgICByZWN1cnNpdmVseVRyYXZlcnNlTXV0YXRpb25FZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIGNvbW1pdFJlY29uY2lsaWF0aW9uRWZmZWN0cyhmaW5pc2hlZFdvcmspO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzKGZpbmlzaGVkV29yaykge1xuICAvLyBQbGFjZW1lbnQgZWZmZWN0cyAoaW5zZXJ0aW9ucywgcmVvcmRlcnMpIGNhbiBiZSBzY2hlZHVsZWQgb24gYW55IGZpYmVyXG4gIC8vIHR5cGUuIFRoZXkgbmVlZHMgdG8gaGFwcGVuIGFmdGVyIHRoZSBjaGlsZHJlbiBlZmZlY3RzIGhhdmUgZmlyZWQsIGJ1dFxuICAvLyBiZWZvcmUgdGhlIGVmZmVjdHMgb24gdGhpcyBmaWJlciBoYXZlIGZpcmVkLlxuICB2YXIgZmxhZ3MgPSBmaW5pc2hlZFdvcmsuZmxhZ3M7XG5cbiAgaWYgKGZsYWdzICYgUGxhY2VtZW50KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbW1pdFBsYWNlbWVudChmaW5pc2hlZFdvcmspO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4sIGVycm9yKTtcbiAgICB9IC8vIENsZWFyIHRoZSBcInBsYWNlbWVudFwiIGZyb20gZWZmZWN0IHRhZyBzbyB0aGF0IHdlIGtub3cgdGhhdCB0aGlzIGlzXG4gICAgLy8gaW5zZXJ0ZWQsIGJlZm9yZSBhbnkgbGlmZS1jeWNsZXMgbGlrZSBjb21wb25lbnREaWRNb3VudCBnZXRzIGNhbGxlZC5cbiAgICAvLyBUT0RPOiBmaW5kRE9NTm9kZSBkb2Vzbid0IHJlbHkgb24gdGhpcyBhbnkgbW9yZSBidXQgaXNNb3VudGVkIGRvZXNcbiAgICAvLyBhbmQgaXNNb3VudGVkIGlzIGRlcHJlY2F0ZWQgYW55d2F5IHNvIHdlIHNob3VsZCBiZSBhYmxlIHRvIGtpbGwgdGhpcy5cblxuXG4gICAgZmluaXNoZWRXb3JrLmZsYWdzICY9IH5QbGFjZW1lbnQ7XG4gIH1cblxuICBpZiAoZmxhZ3MgJiBIeWRyYXRpbmcpIHtcbiAgICBmaW5pc2hlZFdvcmsuZmxhZ3MgJj0gfkh5ZHJhdGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXRMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yaywgcm9vdCwgY29tbWl0dGVkTGFuZXMpIHtcbiAgaW5Qcm9ncmVzc0xhbmVzID0gY29tbWl0dGVkTGFuZXM7XG4gIGluUHJvZ3Jlc3NSb290ID0gcm9vdDtcbiAgbmV4dEVmZmVjdCA9IGZpbmlzaGVkV29yaztcbiAgY29tbWl0TGF5b3V0RWZmZWN0c19iZWdpbihmaW5pc2hlZFdvcmssIHJvb3QsIGNvbW1pdHRlZExhbmVzKTtcbiAgaW5Qcm9ncmVzc0xhbmVzID0gbnVsbDtcbiAgaW5Qcm9ncmVzc1Jvb3QgPSBudWxsO1xufVxuXG5mdW5jdGlvbiBjb21taXRMYXlvdXRFZmZlY3RzX2JlZ2luKHN1YnRyZWVSb290LCByb290LCBjb21taXR0ZWRMYW5lcykge1xuICAvLyBTdXNwZW5zZSBsYXlvdXQgZWZmZWN0cyBzZW1hbnRpY3MgZG9uJ3QgY2hhbmdlIGZvciBsZWdhY3kgcm9vdHMuXG4gIHZhciBpc01vZGVyblJvb3QgPSAoc3VidHJlZVJvb3QubW9kZSAmIENvbmN1cnJlbnRNb2RlKSAhPT0gTm9Nb2RlO1xuXG4gIHdoaWxlIChuZXh0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgdmFyIGZpYmVyID0gbmV4dEVmZmVjdDtcbiAgICB2YXIgZmlyc3RDaGlsZCA9IGZpYmVyLmNoaWxkO1xuXG4gICAgaWYgKCBmaWJlci50YWcgPT09IE9mZnNjcmVlbkNvbXBvbmVudCAmJiBpc01vZGVyblJvb3QpIHtcbiAgICAgIC8vIEtlZXAgdHJhY2sgb2YgdGhlIGN1cnJlbnQgT2Zmc2NyZWVuIHN0YWNrJ3Mgc3RhdGUuXG4gICAgICB2YXIgaXNIaWRkZW4gPSBmaWJlci5tZW1vaXplZFN0YXRlICE9PSBudWxsO1xuICAgICAgdmFyIG5ld09mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IGlzSGlkZGVuIHx8IG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbjtcblxuICAgICAgaWYgKG5ld09mZnNjcmVlblN1YnRyZWVJc0hpZGRlbikge1xuICAgICAgICAvLyBUaGUgT2Zmc2NyZWVuIHRyZWUgaXMgaGlkZGVuLiBTa2lwIG92ZXIgaXRzIGxheW91dCBlZmZlY3RzLlxuICAgICAgICBjb21taXRMYXlvdXRNb3VudEVmZmVjdHNfY29tcGxldGUoc3VidHJlZVJvb3QsIHJvb3QsIGNvbW1pdHRlZExhbmVzKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUT0RPIChPZmZzY3JlZW4pIEFsc28gY2hlY2s6IHN1YnRyZWVGbGFncyAmIExheW91dE1hc2tcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBmaWJlci5hbHRlcm5hdGU7XG4gICAgICAgIHZhciB3YXNIaWRkZW4gPSBjdXJyZW50ICE9PSBudWxsICYmIGN1cnJlbnQubWVtb2l6ZWRTdGF0ZSAhPT0gbnVsbDtcbiAgICAgICAgdmFyIG5ld09mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSB3YXNIaWRkZW4gfHwgb2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbjtcbiAgICAgICAgdmFyIHByZXZPZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gPSBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW47XG4gICAgICAgIHZhciBwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiA9IG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW47IC8vIFRyYXZlcnNlIHRoZSBPZmZzY3JlZW4gc3VidHJlZSB3aXRoIHRoZSBjdXJyZW50IE9mZnNjcmVlbiBhcyB0aGUgcm9vdC5cblxuICAgICAgICBvZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4gPSBuZXdPZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW47XG4gICAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBuZXdPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuO1xuXG4gICAgICAgIGlmIChvZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuICYmICFwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbikge1xuICAgICAgICAgIC8vIFRoaXMgaXMgdGhlIHJvb3Qgb2YgYSByZWFwcGVhcmluZyBib3VuZGFyeS4gVHVybiBpdHMgbGF5b3V0IGVmZmVjdHNcbiAgICAgICAgICAvLyBiYWNrIG9uLlxuICAgICAgICAgIG5leHRFZmZlY3QgPSBmaWJlcjtcbiAgICAgICAgICByZWFwcGVhckxheW91dEVmZmVjdHNfYmVnaW4oZmliZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNoaWxkID0gZmlyc3RDaGlsZDtcblxuICAgICAgICB3aGlsZSAoY2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgICBuZXh0RWZmZWN0ID0gY2hpbGQ7XG4gICAgICAgICAgY29tbWl0TGF5b3V0RWZmZWN0c19iZWdpbihjaGlsZCwgLy8gTmV3IHJvb3Q7IGJ1YmJsZSBiYWNrIHVwIHRvIGhlcmUgYW5kIHN0b3AuXG4gICAgICAgICAgcm9vdCwgY29tbWl0dGVkTGFuZXMpO1xuICAgICAgICAgIGNoaWxkID0gY2hpbGQuc2libGluZztcbiAgICAgICAgfSAvLyBSZXN0b3JlIE9mZnNjcmVlbiBzdGF0ZSBhbmQgcmVzdW1lIGluIG91ci1wcm9ncmVzcyB0cmF2ZXJzYWwuXG5cblxuICAgICAgICBuZXh0RWZmZWN0ID0gZmliZXI7XG4gICAgICAgIG9mZnNjcmVlblN1YnRyZWVJc0hpZGRlbiA9IHByZXZPZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW47XG4gICAgICAgIG9mZnNjcmVlblN1YnRyZWVXYXNIaWRkZW4gPSBwcmV2T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbjtcbiAgICAgICAgY29tbWl0TGF5b3V0TW91bnRFZmZlY3RzX2NvbXBsZXRlKHN1YnRyZWVSb290LCByb290LCBjb21taXR0ZWRMYW5lcyk7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICgoZmliZXIuc3VidHJlZUZsYWdzICYgTGF5b3V0TWFzaykgIT09IE5vRmxhZ3MgJiYgZmlyc3RDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgZmlyc3RDaGlsZC5yZXR1cm4gPSBmaWJlcjtcbiAgICAgIG5leHRFZmZlY3QgPSBmaXJzdENoaWxkO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21taXRMYXlvdXRNb3VudEVmZmVjdHNfY29tcGxldGUoc3VidHJlZVJvb3QsIHJvb3QsIGNvbW1pdHRlZExhbmVzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0TGF5b3V0TW91bnRFZmZlY3RzX2NvbXBsZXRlKHN1YnRyZWVSb290LCByb290LCBjb21taXR0ZWRMYW5lcykge1xuICB3aGlsZSAobmV4dEVmZmVjdCAhPT0gbnVsbCkge1xuICAgIHZhciBmaWJlciA9IG5leHRFZmZlY3Q7XG5cbiAgICBpZiAoKGZpYmVyLmZsYWdzICYgTGF5b3V0TWFzaykgIT09IE5vRmxhZ3MpIHtcbiAgICAgIHZhciBjdXJyZW50ID0gZmliZXIuYWx0ZXJuYXRlO1xuICAgICAgc2V0Q3VycmVudEZpYmVyKGZpYmVyKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgY29tbWl0TGF5b3V0RWZmZWN0T25GaWJlcihyb290LCBjdXJyZW50LCBmaWJlciwgY29tbWl0dGVkTGFuZXMpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmliZXIsIGZpYmVyLnJldHVybiwgZXJyb3IpO1xuICAgICAgfVxuXG4gICAgICByZXNldEN1cnJlbnRGaWJlcigpO1xuICAgIH1cblxuICAgIGlmIChmaWJlciA9PT0gc3VidHJlZVJvb3QpIHtcbiAgICAgIG5leHRFZmZlY3QgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzaWJsaW5nID0gZmliZXIuc2libGluZztcblxuICAgIGlmIChzaWJsaW5nICE9PSBudWxsKSB7XG4gICAgICBzaWJsaW5nLnJldHVybiA9IGZpYmVyLnJldHVybjtcbiAgICAgIG5leHRFZmZlY3QgPSBzaWJsaW5nO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5leHRFZmZlY3QgPSBmaWJlci5yZXR1cm47XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlzYXBwZWFyTGF5b3V0RWZmZWN0c19iZWdpbihzdWJ0cmVlUm9vdCkge1xuICB3aGlsZSAobmV4dEVmZmVjdCAhPT0gbnVsbCkge1xuICAgIHZhciBmaWJlciA9IG5leHRFZmZlY3Q7XG4gICAgdmFyIGZpcnN0Q2hpbGQgPSBmaWJlci5jaGlsZDsgLy8gVE9ETyAoT2Zmc2NyZWVuKSBDaGVjazogZmxhZ3MgJiAoUmVmU3RhdGljIHwgTGF5b3V0U3RhdGljKVxuXG4gICAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICBjYXNlIE1lbW9Db21wb25lbnQ6XG4gICAgICBjYXNlIFNpbXBsZU1lbW9Db21wb25lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoIGZpYmVyLm1vZGUgJiBQcm9maWxlTW9kZSkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgc3RhcnRMYXlvdXRFZmZlY3RUaW1lcigpO1xuICAgICAgICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoTGF5b3V0LCBmaWJlciwgZmliZXIucmV0dXJuKTtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgIHJlY29yZExheW91dEVmZmVjdER1cmF0aW9uKGZpYmVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KExheW91dCwgZmliZXIsIGZpYmVyLnJldHVybik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgICAge1xuICAgICAgICAgIC8vIFRPRE8gKE9mZnNjcmVlbikgQ2hlY2s6IGZsYWdzICYgUmVmU3RhdGljXG4gICAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGZpYmVyLCBmaWJlci5yZXR1cm4pO1xuICAgICAgICAgIHZhciBpbnN0YW5jZSA9IGZpYmVyLnN0YXRlTm9kZTtcblxuICAgICAgICAgIGlmICh0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50V2lsbFVubW91bnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHNhZmVseUNhbGxDb21wb25lbnRXaWxsVW5tb3VudChmaWJlciwgZmliZXIucmV0dXJuLCBpbnN0YW5jZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgc2FmZWx5RGV0YWNoUmVmKGZpYmVyLCBmaWJlci5yZXR1cm4pO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgT2Zmc2NyZWVuQ29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhXG4gICAgICAgICAgdmFyIGlzSGlkZGVuID0gZmliZXIubWVtb2l6ZWRTdGF0ZSAhPT0gbnVsbDtcblxuICAgICAgICAgIGlmIChpc0hpZGRlbikge1xuICAgICAgICAgICAgLy8gTmVzdGVkIE9mZnNjcmVlbiB0cmVlIGlzIGFscmVhZHkgaGlkZGVuLiBEb24ndCBkaXNhcHBlYXJcbiAgICAgICAgICAgIC8vIGl0cyBlZmZlY3RzLlxuICAgICAgICAgICAgZGlzYXBwZWFyTGF5b3V0RWZmZWN0c19jb21wbGV0ZShzdWJ0cmVlUm9vdCk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH0gLy8gVE9ETyAoT2Zmc2NyZWVuKSBDaGVjazogc3VidHJlZUZsYWdzICYgTGF5b3V0U3RhdGljXG5cblxuICAgIGlmIChmaXJzdENoaWxkICE9PSBudWxsKSB7XG4gICAgICBmaXJzdENoaWxkLnJldHVybiA9IGZpYmVyO1xuICAgICAgbmV4dEVmZmVjdCA9IGZpcnN0Q2hpbGQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpc2FwcGVhckxheW91dEVmZmVjdHNfY29tcGxldGUoc3VidHJlZVJvb3QpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBkaXNhcHBlYXJMYXlvdXRFZmZlY3RzX2NvbXBsZXRlKHN1YnRyZWVSb290KSB7XG4gIHdoaWxlIChuZXh0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgdmFyIGZpYmVyID0gbmV4dEVmZmVjdDtcblxuICAgIGlmIChmaWJlciA9PT0gc3VidHJlZVJvb3QpIHtcbiAgICAgIG5leHRFZmZlY3QgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzaWJsaW5nID0gZmliZXIuc2libGluZztcblxuICAgIGlmIChzaWJsaW5nICE9PSBudWxsKSB7XG4gICAgICBzaWJsaW5nLnJldHVybiA9IGZpYmVyLnJldHVybjtcbiAgICAgIG5leHRFZmZlY3QgPSBzaWJsaW5nO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5leHRFZmZlY3QgPSBmaWJlci5yZXR1cm47XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVhcHBlYXJMYXlvdXRFZmZlY3RzX2JlZ2luKHN1YnRyZWVSb290KSB7XG4gIHdoaWxlIChuZXh0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgdmFyIGZpYmVyID0gbmV4dEVmZmVjdDtcbiAgICB2YXIgZmlyc3RDaGlsZCA9IGZpYmVyLmNoaWxkO1xuXG4gICAgaWYgKGZpYmVyLnRhZyA9PT0gT2Zmc2NyZWVuQ29tcG9uZW50KSB7XG4gICAgICB2YXIgaXNIaWRkZW4gPSBmaWJlci5tZW1vaXplZFN0YXRlICE9PSBudWxsO1xuXG4gICAgICBpZiAoaXNIaWRkZW4pIHtcbiAgICAgICAgLy8gTmVzdGVkIE9mZnNjcmVlbiB0cmVlIGlzIHN0aWxsIGhpZGRlbi4gRG9uJ3QgcmUtYXBwZWFyIGl0cyBlZmZlY3RzLlxuICAgICAgICByZWFwcGVhckxheW91dEVmZmVjdHNfY29tcGxldGUoc3VidHJlZVJvb3QpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICB9IC8vIFRPRE8gKE9mZnNjcmVlbikgQ2hlY2s6IHN1YnRyZWVGbGFncyAmIExheW91dFN0YXRpY1xuXG5cbiAgICBpZiAoZmlyc3RDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgLy8gVGhpcyBub2RlIG1heSBoYXZlIGJlZW4gcmV1c2VkIGZyb20gYSBwcmV2aW91cyByZW5kZXIsIHNvIHdlIGNhbid0XG4gICAgICAvLyBhc3N1bWUgaXRzIHJldHVybiBwb2ludGVyIGlzIGNvcnJlY3QuXG4gICAgICBmaXJzdENoaWxkLnJldHVybiA9IGZpYmVyO1xuICAgICAgbmV4dEVmZmVjdCA9IGZpcnN0Q2hpbGQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlYXBwZWFyTGF5b3V0RWZmZWN0c19jb21wbGV0ZShzdWJ0cmVlUm9vdCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlYXBwZWFyTGF5b3V0RWZmZWN0c19jb21wbGV0ZShzdWJ0cmVlUm9vdCkge1xuICB3aGlsZSAobmV4dEVmZmVjdCAhPT0gbnVsbCkge1xuICAgIHZhciBmaWJlciA9IG5leHRFZmZlY3Q7IC8vIFRPRE8gKE9mZnNjcmVlbikgQ2hlY2s6IGZsYWdzICYgTGF5b3V0U3RhdGljXG5cbiAgICBzZXRDdXJyZW50RmliZXIoZmliZXIpO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJlYXBwZWFyTGF5b3V0RWZmZWN0c09uRmliZXIoZmliZXIpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaWJlciwgZmliZXIucmV0dXJuLCBlcnJvcik7XG4gICAgfVxuXG4gICAgcmVzZXRDdXJyZW50RmliZXIoKTtcblxuICAgIGlmIChmaWJlciA9PT0gc3VidHJlZVJvb3QpIHtcbiAgICAgIG5leHRFZmZlY3QgPSBudWxsO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzaWJsaW5nID0gZmliZXIuc2libGluZztcblxuICAgIGlmIChzaWJsaW5nICE9PSBudWxsKSB7XG4gICAgICAvLyBUaGlzIG5vZGUgbWF5IGhhdmUgYmVlbiByZXVzZWQgZnJvbSBhIHByZXZpb3VzIHJlbmRlciwgc28gd2UgY2FuJ3RcbiAgICAgIC8vIGFzc3VtZSBpdHMgcmV0dXJuIHBvaW50ZXIgaXMgY29ycmVjdC5cbiAgICAgIHNpYmxpbmcucmV0dXJuID0gZmliZXIucmV0dXJuO1xuICAgICAgbmV4dEVmZmVjdCA9IHNpYmxpbmc7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbmV4dEVmZmVjdCA9IGZpYmVyLnJldHVybjtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXRQYXNzaXZlTW91bnRFZmZlY3RzKHJvb3QsIGZpbmlzaGVkV29yaywgY29tbWl0dGVkTGFuZXMsIGNvbW1pdHRlZFRyYW5zaXRpb25zKSB7XG4gIG5leHRFZmZlY3QgPSBmaW5pc2hlZFdvcms7XG4gIGNvbW1pdFBhc3NpdmVNb3VudEVmZmVjdHNfYmVnaW4oZmluaXNoZWRXb3JrLCByb290LCBjb21taXR0ZWRMYW5lcywgY29tbWl0dGVkVHJhbnNpdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBjb21taXRQYXNzaXZlTW91bnRFZmZlY3RzX2JlZ2luKHN1YnRyZWVSb290LCByb290LCBjb21taXR0ZWRMYW5lcywgY29tbWl0dGVkVHJhbnNpdGlvbnMpIHtcbiAgd2hpbGUgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICB2YXIgZmliZXIgPSBuZXh0RWZmZWN0O1xuICAgIHZhciBmaXJzdENoaWxkID0gZmliZXIuY2hpbGQ7XG5cbiAgICBpZiAoKGZpYmVyLnN1YnRyZWVGbGFncyAmIFBhc3NpdmVNYXNrKSAhPT0gTm9GbGFncyAmJiBmaXJzdENoaWxkICE9PSBudWxsKSB7XG4gICAgICBmaXJzdENoaWxkLnJldHVybiA9IGZpYmVyO1xuICAgICAgbmV4dEVmZmVjdCA9IGZpcnN0Q2hpbGQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbW1pdFBhc3NpdmVNb3VudEVmZmVjdHNfY29tcGxldGUoc3VidHJlZVJvb3QsIHJvb3QsIGNvbW1pdHRlZExhbmVzLCBjb21taXR0ZWRUcmFuc2l0aW9ucyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNvbW1pdFBhc3NpdmVNb3VudEVmZmVjdHNfY29tcGxldGUoc3VidHJlZVJvb3QsIHJvb3QsIGNvbW1pdHRlZExhbmVzLCBjb21taXR0ZWRUcmFuc2l0aW9ucykge1xuICB3aGlsZSAobmV4dEVmZmVjdCAhPT0gbnVsbCkge1xuICAgIHZhciBmaWJlciA9IG5leHRFZmZlY3Q7XG5cbiAgICBpZiAoKGZpYmVyLmZsYWdzICYgUGFzc2l2ZSkgIT09IE5vRmxhZ3MpIHtcbiAgICAgIHNldEN1cnJlbnRGaWJlcihmaWJlcik7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbW1pdFBhc3NpdmVNb3VudE9uRmliZXIocm9vdCwgZmliZXIsIGNvbW1pdHRlZExhbmVzLCBjb21taXR0ZWRUcmFuc2l0aW9ucyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihmaWJlciwgZmliZXIucmV0dXJuLCBlcnJvcik7XG4gICAgICB9XG5cbiAgICAgIHJlc2V0Q3VycmVudEZpYmVyKCk7XG4gICAgfVxuXG4gICAgaWYgKGZpYmVyID09PSBzdWJ0cmVlUm9vdCkge1xuICAgICAgbmV4dEVmZmVjdCA9IG51bGw7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHNpYmxpbmcgPSBmaWJlci5zaWJsaW5nO1xuXG4gICAgaWYgKHNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgIHNpYmxpbmcucmV0dXJuID0gZmliZXIucmV0dXJuO1xuICAgICAgbmV4dEVmZmVjdCA9IHNpYmxpbmc7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbmV4dEVmZmVjdCA9IGZpYmVyLnJldHVybjtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXRQYXNzaXZlTW91bnRPbkZpYmVyKGZpbmlzaGVkUm9vdCwgZmluaXNoZWRXb3JrLCBjb21taXR0ZWRMYW5lcywgY29tbWl0dGVkVHJhbnNpdGlvbnMpIHtcbiAgc3dpdGNoIChmaW5pc2hlZFdvcmsudGFnKSB7XG4gICAgY2FzZSBGdW5jdGlvbkNvbXBvbmVudDpcbiAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgY2FzZSBTaW1wbGVNZW1vQ29tcG9uZW50OlxuICAgICAge1xuICAgICAgICBpZiAoIGZpbmlzaGVkV29yay5tb2RlICYgUHJvZmlsZU1vZGUpIHtcbiAgICAgICAgICBzdGFydFBhc3NpdmVFZmZlY3RUaW1lcigpO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoUGFzc2l2ZSQxIHwgSGFzRWZmZWN0LCBmaW5pc2hlZFdvcmspO1xuICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICByZWNvcmRQYXNzaXZlRWZmZWN0RHVyYXRpb24oZmluaXNoZWRXb3JrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudChQYXNzaXZlJDEgfCBIYXNFZmZlY3QsIGZpbmlzaGVkV29yayk7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHMoZmlyc3RDaGlsZCkge1xuICBuZXh0RWZmZWN0ID0gZmlyc3RDaGlsZDtcbiAgY29tbWl0UGFzc2l2ZVVubW91bnRFZmZlY3RzX2JlZ2luKCk7XG59XG5cbmZ1bmN0aW9uIGNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c19iZWdpbigpIHtcbiAgd2hpbGUgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICB2YXIgZmliZXIgPSBuZXh0RWZmZWN0O1xuICAgIHZhciBjaGlsZCA9IGZpYmVyLmNoaWxkO1xuXG4gICAgaWYgKChuZXh0RWZmZWN0LmZsYWdzICYgQ2hpbGREZWxldGlvbikgIT09IE5vRmxhZ3MpIHtcbiAgICAgIHZhciBkZWxldGlvbnMgPSBmaWJlci5kZWxldGlvbnM7XG5cbiAgICAgIGlmIChkZWxldGlvbnMgIT09IG51bGwpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkZWxldGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB2YXIgZmliZXJUb0RlbGV0ZSA9IGRlbGV0aW9uc1tpXTtcbiAgICAgICAgICBuZXh0RWZmZWN0ID0gZmliZXJUb0RlbGV0ZTtcbiAgICAgICAgICBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHNJbnNpZGVPZkRlbGV0ZWRUcmVlX2JlZ2luKGZpYmVyVG9EZWxldGUsIGZpYmVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHtcbiAgICAgICAgICAvLyBBIGZpYmVyIHdhcyBkZWxldGVkIGZyb20gdGhpcyBwYXJlbnQgZmliZXIsIGJ1dCBpdCdzIHN0aWxsIHBhcnQgb2ZcbiAgICAgICAgICAvLyB0aGUgcHJldmlvdXMgKGFsdGVybmF0ZSkgcGFyZW50IGZpYmVyJ3MgbGlzdCBvZiBjaGlsZHJlbi4gQmVjYXVzZVxuICAgICAgICAgIC8vIGNoaWxkcmVuIGFyZSBhIGxpbmtlZCBsaXN0LCBhbiBlYXJsaWVyIHNpYmxpbmcgdGhhdCdzIHN0aWxsIGFsaXZlXG4gICAgICAgICAgLy8gd2lsbCBiZSBjb25uZWN0ZWQgdG8gdGhlIGRlbGV0ZWQgZmliZXIgdmlhIGl0cyBgYWx0ZXJuYXRlYDpcbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vICAgbGl2ZSBmaWJlclxuICAgICAgICAgIC8vICAgLS1hbHRlcm5hdGUtLT4gcHJldmlvdXMgbGl2ZSBmaWJlclxuICAgICAgICAgIC8vICAgLS1zaWJsaW5nLS0+IGRlbGV0ZWQgZmliZXJcbiAgICAgICAgICAvL1xuICAgICAgICAgIC8vIFdlIGNhbid0IGRpc2Nvbm5lY3QgYGFsdGVybmF0ZWAgb24gbm9kZXMgdGhhdCBoYXZlbid0IGJlZW4gZGVsZXRlZFxuICAgICAgICAgIC8vIHlldCwgYnV0IHdlIGNhbiBkaXNjb25uZWN0IHRoZSBgc2libGluZ2AgYW5kIGBjaGlsZGAgcG9pbnRlcnMuXG4gICAgICAgICAgdmFyIHByZXZpb3VzRmliZXIgPSBmaWJlci5hbHRlcm5hdGU7XG5cbiAgICAgICAgICBpZiAocHJldmlvdXNGaWJlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGRldGFjaGVkQ2hpbGQgPSBwcmV2aW91c0ZpYmVyLmNoaWxkO1xuXG4gICAgICAgICAgICBpZiAoZGV0YWNoZWRDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBwcmV2aW91c0ZpYmVyLmNoaWxkID0gbnVsbDtcblxuICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgdmFyIGRldGFjaGVkU2libGluZyA9IGRldGFjaGVkQ2hpbGQuc2libGluZztcbiAgICAgICAgICAgICAgICBkZXRhY2hlZENoaWxkLnNpYmxpbmcgPSBudWxsO1xuICAgICAgICAgICAgICAgIGRldGFjaGVkQ2hpbGQgPSBkZXRhY2hlZFNpYmxpbmc7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKGRldGFjaGVkQ2hpbGQgIT09IG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIG5leHRFZmZlY3QgPSBmaWJlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoKGZpYmVyLnN1YnRyZWVGbGFncyAmIFBhc3NpdmVNYXNrKSAhPT0gTm9GbGFncyAmJiBjaGlsZCAhPT0gbnVsbCkge1xuICAgICAgY2hpbGQucmV0dXJuID0gZmliZXI7XG4gICAgICBuZXh0RWZmZWN0ID0gY2hpbGQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c19jb21wbGV0ZSgpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHNfY29tcGxldGUoKSB7XG4gIHdoaWxlIChuZXh0RWZmZWN0ICE9PSBudWxsKSB7XG4gICAgdmFyIGZpYmVyID0gbmV4dEVmZmVjdDtcblxuICAgIGlmICgoZmliZXIuZmxhZ3MgJiBQYXNzaXZlKSAhPT0gTm9GbGFncykge1xuICAgICAgc2V0Q3VycmVudEZpYmVyKGZpYmVyKTtcbiAgICAgIGNvbW1pdFBhc3NpdmVVbm1vdW50T25GaWJlcihmaWJlcik7XG4gICAgICByZXNldEN1cnJlbnRGaWJlcigpO1xuICAgIH1cblxuICAgIHZhciBzaWJsaW5nID0gZmliZXIuc2libGluZztcblxuICAgIGlmIChzaWJsaW5nICE9PSBudWxsKSB7XG4gICAgICBzaWJsaW5nLnJldHVybiA9IGZpYmVyLnJldHVybjtcbiAgICAgIG5leHRFZmZlY3QgPSBzaWJsaW5nO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG5leHRFZmZlY3QgPSBmaWJlci5yZXR1cm47XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0UGFzc2l2ZVVubW91bnRPbkZpYmVyKGZpbmlzaGVkV29yaykge1xuICBzd2l0Y2ggKGZpbmlzaGVkV29yay50YWcpIHtcbiAgICBjYXNlIEZ1bmN0aW9uQ29tcG9uZW50OlxuICAgIGNhc2UgRm9yd2FyZFJlZjpcbiAgICBjYXNlIFNpbXBsZU1lbW9Db21wb25lbnQ6XG4gICAgICB7XG4gICAgICAgIGlmICggZmluaXNoZWRXb3JrLm1vZGUgJiBQcm9maWxlTW9kZSkge1xuICAgICAgICAgIHN0YXJ0UGFzc2l2ZUVmZmVjdFRpbWVyKCk7XG4gICAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KFBhc3NpdmUkMSB8IEhhc0VmZmVjdCwgZmluaXNoZWRXb3JrLCBmaW5pc2hlZFdvcmsucmV0dXJuKTtcbiAgICAgICAgICByZWNvcmRQYXNzaXZlRWZmZWN0RHVyYXRpb24oZmluaXNoZWRXb3JrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoUGFzc2l2ZSQxIHwgSGFzRWZmZWN0LCBmaW5pc2hlZFdvcmssIGZpbmlzaGVkV29yay5yZXR1cm4pO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0UGFzc2l2ZVVubW91bnRFZmZlY3RzSW5zaWRlT2ZEZWxldGVkVHJlZV9iZWdpbihkZWxldGVkU3VidHJlZVJvb3QsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpIHtcbiAgd2hpbGUgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICB2YXIgZmliZXIgPSBuZXh0RWZmZWN0OyAvLyBEZWxldGlvbiBlZmZlY3RzIGZpcmUgaW4gcGFyZW50IC0+IGNoaWxkIG9yZGVyXG4gICAgLy8gVE9ETzogQ2hlY2sgaWYgZmliZXIgaGFzIGEgUGFzc2l2ZVN0YXRpYyBmbGFnXG5cbiAgICBzZXRDdXJyZW50RmliZXIoZmliZXIpO1xuICAgIGNvbW1pdFBhc3NpdmVVbm1vdW50SW5zaWRlRGVsZXRlZFRyZWVPbkZpYmVyKGZpYmVyLCBuZWFyZXN0TW91bnRlZEFuY2VzdG9yKTtcbiAgICByZXNldEN1cnJlbnRGaWJlcigpO1xuICAgIHZhciBjaGlsZCA9IGZpYmVyLmNoaWxkOyAvLyBUT0RPOiBPbmx5IHRyYXZlcnNlIHN1YnRyZWUgaWYgaXQgaGFzIGEgUGFzc2l2ZVN0YXRpYyBmbGFnLiAoQnV0LCBpZiB3ZVxuICAgIC8vIGRvIHRoaXMsIHN0aWxsIG5lZWQgdG8gaGFuZGxlIGBkZWxldGVkVHJlZUNsZWFuVXBMZXZlbGAgY29ycmVjdGx5LilcblxuICAgIGlmIChjaGlsZCAhPT0gbnVsbCkge1xuICAgICAgY2hpbGQucmV0dXJuID0gZmliZXI7XG4gICAgICBuZXh0RWZmZWN0ID0gY2hpbGQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c0luc2lkZU9mRGVsZXRlZFRyZWVfY29tcGxldGUoZGVsZXRlZFN1YnRyZWVSb290KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0UGFzc2l2ZVVubW91bnRFZmZlY3RzSW5zaWRlT2ZEZWxldGVkVHJlZV9jb21wbGV0ZShkZWxldGVkU3VidHJlZVJvb3QpIHtcbiAgd2hpbGUgKG5leHRFZmZlY3QgIT09IG51bGwpIHtcbiAgICB2YXIgZmliZXIgPSBuZXh0RWZmZWN0O1xuICAgIHZhciBzaWJsaW5nID0gZmliZXIuc2libGluZztcbiAgICB2YXIgcmV0dXJuRmliZXIgPSBmaWJlci5yZXR1cm47XG5cbiAgICB7XG4gICAgICAvLyBSZWN1cnNpdmVseSB0cmF2ZXJzZSB0aGUgZW50aXJlIGRlbGV0ZWQgdHJlZSBhbmQgY2xlYW4gdXAgZmliZXIgZmllbGRzLlxuICAgICAgLy8gVGhpcyBpcyBtb3JlIGFnZ3Jlc3NpdmUgdGhhbiBpZGVhbCwgYW5kIHRoZSBsb25nIHRlcm0gZ29hbCBpcyB0byBvbmx5XG4gICAgICAvLyBoYXZlIHRvIGRldGFjaCB0aGUgZGVsZXRlZCB0cmVlIGF0IHRoZSByb290LlxuICAgICAgZGV0YWNoRmliZXJBZnRlckVmZmVjdHMoZmliZXIpO1xuXG4gICAgICBpZiAoZmliZXIgPT09IGRlbGV0ZWRTdWJ0cmVlUm9vdCkge1xuICAgICAgICBuZXh0RWZmZWN0ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzaWJsaW5nICE9PSBudWxsKSB7XG4gICAgICBzaWJsaW5nLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgbmV4dEVmZmVjdCA9IHNpYmxpbmc7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbmV4dEVmZmVjdCA9IHJldHVybkZpYmVyO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbW1pdFBhc3NpdmVVbm1vdW50SW5zaWRlRGVsZXRlZFRyZWVPbkZpYmVyKGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpIHtcbiAgc3dpdGNoIChjdXJyZW50LnRhZykge1xuICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgY2FzZSBGb3J3YXJkUmVmOlxuICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgaWYgKCBjdXJyZW50Lm1vZGUgJiBQcm9maWxlTW9kZSkge1xuICAgICAgICAgIHN0YXJ0UGFzc2l2ZUVmZmVjdFRpbWVyKCk7XG4gICAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KFBhc3NpdmUkMSwgY3VycmVudCwgbmVhcmVzdE1vdW50ZWRBbmNlc3Rvcik7XG4gICAgICAgICAgcmVjb3JkUGFzc2l2ZUVmZmVjdER1cmF0aW9uKGN1cnJlbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudChQYXNzaXZlJDEsIGN1cnJlbnQsIG5lYXJlc3RNb3VudGVkQW5jZXN0b3IpO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gIH1cbn0gLy8gVE9ETzogUmV1c2UgcmVhcHBlYXJMYXlvdXRFZmZlY3RzIHRyYXZlcnNhbCBoZXJlP1xuXG5cbmZ1bmN0aW9uIGludm9rZUxheW91dEVmZmVjdE1vdW50SW5ERVYoZmliZXIpIHtcbiAge1xuICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gcmUtY2hlY2sgU3RyaWN0RWZmZWN0c01vZGUgaGVyZS5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkIGlmIHRoYXQgY2hlY2sgaGFzIGFscmVhZHkgcGFzc2VkLlxuICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICBjYXNlIEZ1bmN0aW9uQ29tcG9uZW50OlxuICAgICAgY2FzZSBGb3J3YXJkUmVmOlxuICAgICAgY2FzZSBTaW1wbGVNZW1vQ29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQoTGF5b3V0IHwgSGFzRWZmZWN0LCBmaWJlcik7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpYmVyLCBmaWJlci5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIGluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGluc3RhbmNlLmNvbXBvbmVudERpZE1vdW50KCk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpYmVyLCBmaWJlci5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VQYXNzaXZlRWZmZWN0TW91bnRJbkRFVihmaWJlcikge1xuICB7XG4gICAgLy8gV2UgZG9uJ3QgbmVlZCB0byByZS1jaGVjayBTdHJpY3RFZmZlY3RzTW9kZSBoZXJlLlxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWQgaWYgdGhhdCBjaGVjayBoYXMgYWxyZWFkeSBwYXNzZWQuXG4gICAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICBjYXNlIFNpbXBsZU1lbW9Db21wb25lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RNb3VudChQYXNzaXZlJDEgfCBIYXNFZmZlY3QsIGZpYmVyKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmliZXIsIGZpYmVyLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGludm9rZUxheW91dEVmZmVjdFVubW91bnRJbkRFVihmaWJlcikge1xuICB7XG4gICAgLy8gV2UgZG9uJ3QgbmVlZCB0byByZS1jaGVjayBTdHJpY3RFZmZlY3RzTW9kZSBoZXJlLlxuICAgIC8vIFRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWQgaWYgdGhhdCBjaGVjayBoYXMgYWxyZWFkeSBwYXNzZWQuXG4gICAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICBjYXNlIFNpbXBsZU1lbW9Db21wb25lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29tbWl0SG9va0VmZmVjdExpc3RVbm1vdW50KExheW91dCB8IEhhc0VmZmVjdCwgZmliZXIsIGZpYmVyLnJldHVybik7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNhcHR1cmVDb21taXRQaGFzZUVycm9yKGZpYmVyLCBmaWJlci5yZXR1cm4sIGVycm9yKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIGluc3RhbmNlID0gZmliZXIuc3RhdGVOb2RlO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBpbnN0YW5jZS5jb21wb25lbnRXaWxsVW5tb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc2FmZWx5Q2FsbENvbXBvbmVudFdpbGxVbm1vdW50KGZpYmVyLCBmaWJlci5yZXR1cm4sIGluc3RhbmNlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VQYXNzaXZlRWZmZWN0VW5tb3VudEluREVWKGZpYmVyKSB7XG4gIHtcbiAgICAvLyBXZSBkb24ndCBuZWVkIHRvIHJlLWNoZWNrIFN0cmljdEVmZmVjdHNNb2RlIGhlcmUuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZCBpZiB0aGF0IGNoZWNrIGhhcyBhbHJlYWR5IHBhc3NlZC5cbiAgICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgICAgY2FzZSBGdW5jdGlvbkNvbXBvbmVudDpcbiAgICAgIGNhc2UgRm9yd2FyZFJlZjpcbiAgICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudDpcbiAgICAgICAge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb21taXRIb29rRWZmZWN0TGlzdFVubW91bnQoUGFzc2l2ZSQxIHwgSGFzRWZmZWN0LCBmaWJlciwgZmliZXIucmV0dXJuKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3IoZmliZXIsIGZpYmVyLnJldHVybiwgZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgQ09NUE9ORU5UX1RZUEUgPSAwO1xudmFyIEhBU19QU0VVRE9fQ0xBU1NfVFlQRSA9IDE7XG52YXIgUk9MRV9UWVBFID0gMjtcbnZhciBURVNUX05BTUVfVFlQRSA9IDM7XG52YXIgVEVYVF9UWVBFID0gNDtcblxuaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcikge1xuICB2YXIgc3ltYm9sRm9yID0gU3ltYm9sLmZvcjtcbiAgQ09NUE9ORU5UX1RZUEUgPSBzeW1ib2xGb3IoJ3NlbGVjdG9yLmNvbXBvbmVudCcpO1xuICBIQVNfUFNFVURPX0NMQVNTX1RZUEUgPSBzeW1ib2xGb3IoJ3NlbGVjdG9yLmhhc19wc2V1ZG9fY2xhc3MnKTtcbiAgUk9MRV9UWVBFID0gc3ltYm9sRm9yKCdzZWxlY3Rvci5yb2xlJyk7XG4gIFRFU1RfTkFNRV9UWVBFID0gc3ltYm9sRm9yKCdzZWxlY3Rvci50ZXN0X2lkJyk7XG4gIFRFWFRfVFlQRSA9IHN5bWJvbEZvcignc2VsZWN0b3IudGV4dCcpO1xufVxudmFyIGNvbW1pdEhvb2tzID0gW107XG5mdW5jdGlvbiBvbkNvbW1pdFJvb3QkMSgpIHtcbiAge1xuICAgIGNvbW1pdEhvb2tzLmZvckVhY2goZnVuY3Rpb24gKGNvbW1pdEhvb2spIHtcbiAgICAgIHJldHVybiBjb21taXRIb29rKCk7XG4gICAgfSk7XG4gIH1cbn1cblxudmFyIFJlYWN0Q3VycmVudEFjdFF1ZXVlID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50QWN0UXVldWU7XG5mdW5jdGlvbiBpc0xlZ2FjeUFjdEVudmlyb25tZW50KGZpYmVyKSB7XG4gIHtcbiAgICAvLyBMZWdhY3kgbW9kZS4gV2UgcHJlc2VydmUgdGhlIGJlaGF2aW9yIG9mIFJlYWN0IDE3J3MgYWN0LiBJdCBhc3N1bWVzIGFuXG4gICAgLy8gYWN0IGVudmlyb25tZW50IHdoZW5ldmVyIGBqZXN0YCBpcyBkZWZpbmVkLCBidXQgeW91IGNhbiBzdGlsbCB0dXJuIG9mZlxuICAgIC8vIHNwdXJpb3VzIHdhcm5pbmdzIGJ5IHNldHRpbmcgSVNfUkVBQ1RfQUNUX0VOVklST05NRU5UIGV4cGxpY2l0bHlcbiAgICAvLyB0byBmYWxzZS5cbiAgICB2YXIgaXNSZWFjdEFjdEVudmlyb25tZW50R2xvYmFsID0gLy8gJEZsb3dFeHBlY3RlZEVycm9yIOKAkyBGbG93IGRvZXNuJ3Qga25vdyBhYm91dCBJU19SRUFDVF9BQ1RfRU5WSVJPTk1FTlQgZ2xvYmFsXG4gICAgdHlwZW9mIElTX1JFQUNUX0FDVF9FTlZJUk9OTUVOVCAhPT0gJ3VuZGVmaW5lZCcgPyBJU19SRUFDVF9BQ1RfRU5WSVJPTk1FTlQgOiB1bmRlZmluZWQ7IC8vICRGbG93RXhwZWN0ZWRFcnJvciAtIEZsb3cgZG9lc24ndCBrbm93IGFib3V0IGplc3RcblxuICAgIHZhciBqZXN0SXNEZWZpbmVkID0gdHlwZW9mIGplc3QgIT09ICd1bmRlZmluZWQnO1xuICAgIHJldHVybiAgamVzdElzRGVmaW5lZCAmJiBpc1JlYWN0QWN0RW52aXJvbm1lbnRHbG9iYWwgIT09IGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBpc0NvbmN1cnJlbnRBY3RFbnZpcm9ubWVudCgpIHtcbiAge1xuICAgIHZhciBpc1JlYWN0QWN0RW52aXJvbm1lbnRHbG9iYWwgPSAvLyAkRmxvd0V4cGVjdGVkRXJyb3Ig4oCTIEZsb3cgZG9lc24ndCBrbm93IGFib3V0IElTX1JFQUNUX0FDVF9FTlZJUk9OTUVOVCBnbG9iYWxcbiAgICB0eXBlb2YgSVNfUkVBQ1RfQUNUX0VOVklST05NRU5UICE9PSAndW5kZWZpbmVkJyA/IElTX1JFQUNUX0FDVF9FTlZJUk9OTUVOVCA6IHVuZGVmaW5lZDtcblxuICAgIGlmICghaXNSZWFjdEFjdEVudmlyb25tZW50R2xvYmFsICYmIFJlYWN0Q3VycmVudEFjdFF1ZXVlLmN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgIC8vIFRPRE86IEluY2x1ZGUgbGluayB0byByZWxldmFudCBkb2N1bWVudGF0aW9uIHBhZ2UuXG4gICAgICBlcnJvcignVGhlIGN1cnJlbnQgdGVzdGluZyBlbnZpcm9ubWVudCBpcyBub3QgY29uZmlndXJlZCB0byBzdXBwb3J0ICcgKyAnYWN0KC4uLiknKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNSZWFjdEFjdEVudmlyb25tZW50R2xvYmFsO1xuICB9XG59XG5cbnZhciBjZWlsID0gTWF0aC5jZWlsO1xudmFyIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsXG4gICAgUmVhY3RDdXJyZW50T3duZXIkMiA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0Q3VycmVudE93bmVyLFxuICAgIFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnJDMgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxcbiAgICBSZWFjdEN1cnJlbnRBY3RRdWV1ZSQxID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50QWN0UXVldWU7XG52YXIgTm9Db250ZXh0ID1cbi8qICAgICAgICAgICAgICovXG4wO1xudmFyIEJhdGNoZWRDb250ZXh0ID1cbi8qICAgICAgICAgICAgICAgKi9cbjE7XG52YXIgUmVuZGVyQ29udGV4dCA9XG4vKiAgICAgICAgICAgICAgICAqL1xuMjtcbnZhciBDb21taXRDb250ZXh0ID1cbi8qICAgICAgICAgICAgICAgICovXG40O1xudmFyIFJvb3RJblByb2dyZXNzID0gMDtcbnZhciBSb290RmF0YWxFcnJvcmVkID0gMTtcbnZhciBSb290RXJyb3JlZCA9IDI7XG52YXIgUm9vdFN1c3BlbmRlZCA9IDM7XG52YXIgUm9vdFN1c3BlbmRlZFdpdGhEZWxheSA9IDQ7XG52YXIgUm9vdENvbXBsZXRlZCA9IDU7XG52YXIgUm9vdERpZE5vdENvbXBsZXRlID0gNjsgLy8gRGVzY3JpYmVzIHdoZXJlIHdlIGFyZSBpbiB0aGUgUmVhY3QgZXhlY3V0aW9uIHN0YWNrXG5cbnZhciBleGVjdXRpb25Db250ZXh0ID0gTm9Db250ZXh0OyAvLyBUaGUgcm9vdCB3ZSdyZSB3b3JraW5nIG9uXG5cbnZhciB3b3JrSW5Qcm9ncmVzc1Jvb3QgPSBudWxsOyAvLyBUaGUgZmliZXIgd2UncmUgd29ya2luZyBvblxuXG52YXIgd29ya0luUHJvZ3Jlc3MgPSBudWxsOyAvLyBUaGUgbGFuZXMgd2UncmUgcmVuZGVyaW5nXG5cbnZhciB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyA9IE5vTGFuZXM7IC8vIFN0YWNrIHRoYXQgYWxsb3dzIGNvbXBvbmVudHMgdG8gY2hhbmdlIHRoZSByZW5kZXIgbGFuZXMgZm9yIGl0cyBzdWJ0cmVlXG4vLyBUaGlzIGlzIGEgc3VwZXJzZXQgb2YgdGhlIGxhbmVzIHdlIHN0YXJ0ZWQgd29ya2luZyBvbiBhdCB0aGUgcm9vdC4gVGhlIG9ubHlcbi8vIGNhc2Ugd2hlcmUgaXQncyBkaWZmZXJlbnQgZnJvbSBgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXNgIGlzIHdoZW4gd2Vcbi8vIGVudGVyIGEgc3VidHJlZSB0aGF0IGlzIGhpZGRlbiBhbmQgbmVlZHMgdG8gYmUgdW5oaWRkZW46IFN1c3BlbnNlIGFuZFxuLy8gT2Zmc2NyZWVuIGNvbXBvbmVudC5cbi8vXG4vLyBNb3N0IHRoaW5ncyBpbiB0aGUgd29yayBsb29wIHNob3VsZCBkZWFsIHdpdGggd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMuXG4vLyBNb3N0IHRoaW5ncyBpbiBiZWdpbi9jb21wbGV0ZSBwaGFzZXMgc2hvdWxkIGRlYWwgd2l0aCBzdWJ0cmVlUmVuZGVyTGFuZXMuXG5cbnZhciBzdWJ0cmVlUmVuZGVyTGFuZXMgPSBOb0xhbmVzO1xudmFyIHN1YnRyZWVSZW5kZXJMYW5lc0N1cnNvciA9IGNyZWF0ZUN1cnNvcihOb0xhbmVzKTsgLy8gV2hldGhlciB0byByb290IGNvbXBsZXRlZCwgZXJyb3JlZCwgc3VzcGVuZGVkLCBldGMuXG5cbnZhciB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gUm9vdEluUHJvZ3Jlc3M7IC8vIEEgZmF0YWwgZXJyb3IsIGlmIG9uZSBpcyB0aHJvd25cblxudmFyIHdvcmtJblByb2dyZXNzUm9vdEZhdGFsRXJyb3IgPSBudWxsOyAvLyBcIkluY2x1ZGVkXCIgbGFuZXMgcmVmZXIgdG8gbGFuZXMgdGhhdCB3ZXJlIHdvcmtlZCBvbiBkdXJpbmcgdGhpcyByZW5kZXIuIEl0J3Ncbi8vIHNsaWdodGx5IGRpZmZlcmVudCB0aGFuIGByZW5kZXJMYW5lc2AgYmVjYXVzZSBgcmVuZGVyTGFuZXNgIGNhbiBjaGFuZ2UgYXMgeW91XG4vLyBlbnRlciBhbmQgZXhpdCBhbiBPZmZzY3JlZW4gdHJlZS4gVGhpcyB2YWx1ZSBpcyB0aGUgY29tYmluYXRpb24gb2YgYWxsIHJlbmRlclxuLy8gbGFuZXMgZm9yIHRoZSBlbnRpcmUgcmVuZGVyIHBoYXNlLlxuXG52YXIgd29ya0luUHJvZ3Jlc3NSb290SW5jbHVkZWRMYW5lcyA9IE5vTGFuZXM7IC8vIFRoZSB3b3JrIGxlZnQgb3ZlciBieSBjb21wb25lbnRzIHRoYXQgd2VyZSB2aXNpdGVkIGR1cmluZyB0aGlzIHJlbmRlci4gT25seVxuLy8gaW5jbHVkZXMgdW5wcm9jZXNzZWQgdXBkYXRlcywgbm90IHdvcmsgaW4gYmFpbGVkIG91dCBjaGlsZHJlbi5cblxudmFyIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyA9IE5vTGFuZXM7IC8vIExhbmVzIHRoYXQgd2VyZSB1cGRhdGVkIChpbiBhbiBpbnRlcmxlYXZlZCBldmVudCkgZHVyaW5nIHRoaXMgcmVuZGVyLlxuXG52YXIgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgPSBOb0xhbmVzOyAvLyBMYW5lcyB0aGF0IHdlcmUgdXBkYXRlZCBkdXJpbmcgdGhlIHJlbmRlciBwaGFzZSAoKm5vdCogYW4gaW50ZXJsZWF2ZWQgZXZlbnQpLlxuXG52YXIgd29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMgPSBOb0xhbmVzOyAvLyBFcnJvcnMgdGhhdCBhcmUgdGhyb3duIGR1cmluZyB0aGUgcmVuZGVyIHBoYXNlLlxuXG52YXIgd29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycyA9IG51bGw7IC8vIFRoZXNlIGFyZSBlcnJvcnMgdGhhdCB3ZSByZWNvdmVyZWQgZnJvbSB3aXRob3V0IHN1cmZhY2luZyB0aGVtIHRvIHRoZSBVSS5cbi8vIFdlIHdpbGwgbG9nIHRoZW0gb25jZSB0aGUgdHJlZSBjb21taXRzLlxuXG52YXIgd29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMgPSBudWxsOyAvLyBUaGUgbW9zdCByZWNlbnQgdGltZSB3ZSBjb21taXR0ZWQgYSBmYWxsYmFjay4gVGhpcyBsZXRzIHVzIGVuc3VyZSBhIHRyYWluXG4vLyBtb2RlbCB3aGVyZSB3ZSBkb24ndCBjb21taXQgbmV3IGxvYWRpbmcgc3RhdGVzIGluIHRvbyBxdWljayBzdWNjZXNzaW9uLlxuXG52YXIgZ2xvYmFsTW9zdFJlY2VudEZhbGxiYWNrVGltZSA9IDA7XG52YXIgRkFMTEJBQ0tfVEhST1RUTEVfTVMgPSA1MDA7IC8vIFRoZSBhYnNvbHV0ZSB0aW1lIGZvciB3aGVuIHdlIHNob3VsZCBzdGFydCBnaXZpbmcgdXAgb24gcmVuZGVyaW5nXG4vLyBtb3JlIGFuZCBwcmVmZXIgQ1BVIHN1c3BlbnNlIGhldXJpc3RpY3MgaW5zdGVhZC5cblxudmFyIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgPSBJbmZpbml0eTsgLy8gSG93IGxvbmcgYSByZW5kZXIgaXMgc3VwcG9zZWQgdG8gdGFrZSBiZWZvcmUgd2Ugc3RhcnQgZm9sbG93aW5nIENQVVxuLy8gc3VzcGVuc2UgaGV1cmlzdGljcyBhbmQgb3B0IG91dCBvZiByZW5kZXJpbmcgbW9yZSBjb250ZW50LlxuXG52YXIgUkVOREVSX1RJTUVPVVRfTVMgPSA1MDA7XG52YXIgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyA9IG51bGw7XG5cbmZ1bmN0aW9uIHJlc2V0UmVuZGVyVGltZXIoKSB7XG4gIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlclRhcmdldFRpbWUgPSBub3coKSArIFJFTkRFUl9USU1FT1VUX01TO1xufVxuXG5mdW5jdGlvbiBnZXRSZW5kZXJUYXJnZXRUaW1lKCkge1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyVGFyZ2V0VGltZTtcbn1cbnZhciBoYXNVbmNhdWdodEVycm9yID0gZmFsc2U7XG52YXIgZmlyc3RVbmNhdWdodEVycm9yID0gbnVsbDtcbnZhciBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCA9IG51bGw7IC8vIE9ubHkgdXNlZCB3aGVuIGVuYWJsZVByb2ZpbGVyTmVzdGVkVXBkYXRlU2NoZWR1bGVkSG9vayBpcyB0cnVlO1xudmFyIHJvb3REb2VzSGF2ZVBhc3NpdmVFZmZlY3RzID0gZmFsc2U7XG52YXIgcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMgPSBudWxsO1xudmFyIHBlbmRpbmdQYXNzaXZlRWZmZWN0c0xhbmVzID0gTm9MYW5lcztcbnZhciBwZW5kaW5nUGFzc2l2ZVByb2ZpbGVyRWZmZWN0cyA9IFtdO1xudmFyIHBlbmRpbmdQYXNzaXZlVHJhbnNpdGlvbnMgPSBudWxsOyAvLyBVc2UgdGhlc2UgdG8gcHJldmVudCBhbiBpbmZpbml0ZSBsb29wIG9mIG5lc3RlZCB1cGRhdGVzXG5cbnZhciBORVNURURfVVBEQVRFX0xJTUlUID0gNTA7XG52YXIgbmVzdGVkVXBkYXRlQ291bnQgPSAwO1xudmFyIHJvb3RXaXRoTmVzdGVkVXBkYXRlcyA9IG51bGw7XG52YXIgaXNGbHVzaGluZ1Bhc3NpdmVFZmZlY3RzID0gZmFsc2U7XG52YXIgZGlkU2NoZWR1bGVVcGRhdGVEdXJpbmdQYXNzaXZlRWZmZWN0cyA9IGZhbHNlO1xudmFyIE5FU1RFRF9QQVNTSVZFX1VQREFURV9MSU1JVCA9IDUwO1xudmFyIG5lc3RlZFBhc3NpdmVVcGRhdGVDb3VudCA9IDA7XG52YXIgcm9vdFdpdGhQYXNzaXZlTmVzdGVkVXBkYXRlcyA9IG51bGw7IC8vIElmIHR3byB1cGRhdGVzIGFyZSBzY2hlZHVsZWQgd2l0aGluIHRoZSBzYW1lIGV2ZW50LCB3ZSBzaG91bGQgdHJlYXQgdGhlaXJcbi8vIGV2ZW50IHRpbWVzIGFzIHNpbXVsdGFuZW91cywgZXZlbiBpZiB0aGUgYWN0dWFsIGNsb2NrIHRpbWUgaGFzIGFkdmFuY2VkXG4vLyBiZXR3ZWVuIHRoZSBmaXJzdCBhbmQgc2Vjb25kIGNhbGwuXG5cbnZhciBjdXJyZW50RXZlbnRUaW1lID0gTm9UaW1lc3RhbXA7XG52YXIgY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgPSBOb0xhbmVzO1xudmFyIGlzUnVubmluZ0luc2VydGlvbkVmZmVjdCA9IGZhbHNlO1xuZnVuY3Rpb24gZ2V0V29ya0luUHJvZ3Jlc3NSb290KCkge1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3NSb290O1xufVxuZnVuY3Rpb24gcmVxdWVzdEV2ZW50VGltZSgpIHtcbiAgaWYgKChleGVjdXRpb25Db250ZXh0ICYgKFJlbmRlckNvbnRleHQgfCBDb21taXRDb250ZXh0KSkgIT09IE5vQ29udGV4dCkge1xuICAgIC8vIFdlJ3JlIGluc2lkZSBSZWFjdCwgc28gaXQncyBmaW5lIHRvIHJlYWQgdGhlIGFjdHVhbCB0aW1lLlxuICAgIHJldHVybiBub3coKTtcbiAgfSAvLyBXZSdyZSBub3QgaW5zaWRlIFJlYWN0LCBzbyB3ZSBtYXkgYmUgaW4gdGhlIG1pZGRsZSBvZiBhIGJyb3dzZXIgZXZlbnQuXG5cblxuICBpZiAoY3VycmVudEV2ZW50VGltZSAhPT0gTm9UaW1lc3RhbXApIHtcbiAgICAvLyBVc2UgdGhlIHNhbWUgc3RhcnQgdGltZSBmb3IgYWxsIHVwZGF0ZXMgdW50aWwgd2UgZW50ZXIgUmVhY3QgYWdhaW4uXG4gICAgcmV0dXJuIGN1cnJlbnRFdmVudFRpbWU7XG4gIH0gLy8gVGhpcyBpcyB0aGUgZmlyc3QgdXBkYXRlIHNpbmNlIFJlYWN0IHlpZWxkZWQuIENvbXB1dGUgYSBuZXcgc3RhcnQgdGltZS5cblxuXG4gIGN1cnJlbnRFdmVudFRpbWUgPSBub3coKTtcbiAgcmV0dXJuIGN1cnJlbnRFdmVudFRpbWU7XG59XG5mdW5jdGlvbiByZXF1ZXN0VXBkYXRlTGFuZShmaWJlcikge1xuICAvLyBTcGVjaWFsIGNhc2VzXG4gIHZhciBtb2RlID0gZmliZXIubW9kZTtcblxuICBpZiAoKG1vZGUgJiBDb25jdXJyZW50TW9kZSkgPT09IE5vTW9kZSkge1xuICAgIHJldHVybiBTeW5jTGFuZTtcbiAgfSBlbHNlIGlmICggKGV4ZWN1dGlvbkNvbnRleHQgJiBSZW5kZXJDb250ZXh0KSAhPT0gTm9Db250ZXh0ICYmIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICE9PSBOb0xhbmVzKSB7XG4gICAgLy8gVGhpcyBpcyBhIHJlbmRlciBwaGFzZSB1cGRhdGUuIFRoZXNlIGFyZSBub3Qgb2ZmaWNpYWxseSBzdXBwb3J0ZWQuIFRoZVxuICAgIC8vIG9sZCBiZWhhdmlvciBpcyB0byBnaXZlIHRoaXMgdGhlIHNhbWUgXCJ0aHJlYWRcIiAobGFuZXMpIGFzXG4gICAgLy8gd2hhdGV2ZXIgaXMgY3VycmVudGx5IHJlbmRlcmluZy4gU28gaWYgeW91IGNhbGwgYHNldFN0YXRlYCBvbiBhIGNvbXBvbmVudFxuICAgIC8vIHRoYXQgaGFwcGVucyBsYXRlciBpbiB0aGUgc2FtZSByZW5kZXIsIGl0IHdpbGwgZmx1c2guIElkZWFsbHksIHdlIHdhbnQgdG9cbiAgICAvLyByZW1vdmUgdGhlIHNwZWNpYWwgY2FzZSBhbmQgdHJlYXQgdGhlbSBhcyBpZiB0aGV5IGNhbWUgZnJvbSBhblxuICAgIC8vIGludGVybGVhdmVkIGV2ZW50LiBSZWdhcmRsZXNzLCB0aGlzIHBhdHRlcm4gaXMgbm90IG9mZmljaWFsbHkgc3VwcG9ydGVkLlxuICAgIC8vIFRoaXMgYmVoYXZpb3IgaXMgb25seSBhIGZhbGxiYWNrLiBUaGUgZmxhZyBvbmx5IGV4aXN0cyB1bnRpbCB3ZSBjYW4gcm9sbFxuICAgIC8vIG91dCB0aGUgc2V0U3RhdGUgd2FybmluZywgc2luY2UgZXhpc3RpbmcgY29kZSBtaWdodCBhY2NpZGVudGFsbHkgcmVseSBvblxuICAgIC8vIHRoZSBjdXJyZW50IGJlaGF2aW9yLlxuICAgIHJldHVybiBwaWNrQXJiaXRyYXJ5TGFuZSh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyk7XG4gIH1cblxuICB2YXIgaXNUcmFuc2l0aW9uID0gcmVxdWVzdEN1cnJlbnRUcmFuc2l0aW9uKCkgIT09IE5vVHJhbnNpdGlvbjtcblxuICBpZiAoaXNUcmFuc2l0aW9uKSB7XG4gICAgaWYgKCBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyQzLnRyYW5zaXRpb24gIT09IG51bGwpIHtcbiAgICAgIHZhciB0cmFuc2l0aW9uID0gUmVhY3RDdXJyZW50QmF0Y2hDb25maWckMy50cmFuc2l0aW9uO1xuXG4gICAgICBpZiAoIXRyYW5zaXRpb24uX3VwZGF0ZWRGaWJlcnMpIHtcbiAgICAgICAgdHJhbnNpdGlvbi5fdXBkYXRlZEZpYmVycyA9IG5ldyBTZXQoKTtcbiAgICAgIH1cblxuICAgICAgdHJhbnNpdGlvbi5fdXBkYXRlZEZpYmVycy5hZGQoZmliZXIpO1xuICAgIH0gLy8gVGhlIGFsZ29yaXRobSBmb3IgYXNzaWduaW5nIGFuIHVwZGF0ZSB0byBhIGxhbmUgc2hvdWxkIGJlIHN0YWJsZSBmb3IgYWxsXG4gICAgLy8gdXBkYXRlcyBhdCB0aGUgc2FtZSBwcmlvcml0eSB3aXRoaW4gdGhlIHNhbWUgZXZlbnQuIFRvIGRvIHRoaXMsIHRoZVxuICAgIC8vIGlucHV0cyB0byB0aGUgYWxnb3JpdGhtIG11c3QgYmUgdGhlIHNhbWUuXG4gICAgLy9cbiAgICAvLyBUaGUgdHJpY2sgd2UgdXNlIGlzIHRvIGNhY2hlIHRoZSBmaXJzdCBvZiBlYWNoIG9mIHRoZXNlIGlucHV0cyB3aXRoaW4gYW5cbiAgICAvLyBldmVudC4gVGhlbiByZXNldCB0aGUgY2FjaGVkIHZhbHVlcyBvbmNlIHdlIGNhbiBiZSBzdXJlIHRoZSBldmVudCBpc1xuICAgIC8vIG92ZXIuIE91ciBoZXVyaXN0aWMgZm9yIHRoYXQgaXMgd2hlbmV2ZXIgd2UgZW50ZXIgYSBjb25jdXJyZW50IHdvcmsgbG9vcC5cblxuXG4gICAgaWYgKGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lID09PSBOb0xhbmUpIHtcbiAgICAgIC8vIEFsbCB0cmFuc2l0aW9ucyB3aXRoaW4gdGhlIHNhbWUgZXZlbnQgYXJlIGFzc2lnbmVkIHRoZSBzYW1lIGxhbmUuXG4gICAgICBjdXJyZW50RXZlbnRUcmFuc2l0aW9uTGFuZSA9IGNsYWltTmV4dFRyYW5zaXRpb25MYW5lKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGN1cnJlbnRFdmVudFRyYW5zaXRpb25MYW5lO1xuICB9IC8vIFVwZGF0ZXMgb3JpZ2luYXRpbmcgaW5zaWRlIGNlcnRhaW4gUmVhY3QgbWV0aG9kcywgbGlrZSBmbHVzaFN5bmMsIGhhdmVcbiAgLy8gdGhlaXIgcHJpb3JpdHkgc2V0IGJ5IHRyYWNraW5nIGl0IHdpdGggYSBjb250ZXh0IHZhcmlhYmxlLlxuICAvL1xuICAvLyBUaGUgb3BhcXVlIHR5cGUgcmV0dXJuZWQgYnkgdGhlIGhvc3QgY29uZmlnIGlzIGludGVybmFsbHkgYSBsYW5lLCBzbyB3ZSBjYW5cbiAgLy8gdXNlIHRoYXQgZGlyZWN0bHkuXG4gIC8vIFRPRE86IE1vdmUgdGhpcyB0eXBlIGNvbnZlcnNpb24gdG8gdGhlIGV2ZW50IHByaW9yaXR5IG1vZHVsZS5cblxuXG4gIHZhciB1cGRhdGVMYW5lID0gZ2V0Q3VycmVudFVwZGF0ZVByaW9yaXR5KCk7XG5cbiAgaWYgKHVwZGF0ZUxhbmUgIT09IE5vTGFuZSkge1xuICAgIHJldHVybiB1cGRhdGVMYW5lO1xuICB9IC8vIFRoaXMgdXBkYXRlIG9yaWdpbmF0ZWQgb3V0c2lkZSBSZWFjdC4gQXNrIHRoZSBob3N0IGVudmlyb25tZW50IGZvciBhblxuICAvLyBhcHByb3ByaWF0ZSBwcmlvcml0eSwgYmFzZWQgb24gdGhlIHR5cGUgb2YgZXZlbnQuXG4gIC8vXG4gIC8vIFRoZSBvcGFxdWUgdHlwZSByZXR1cm5lZCBieSB0aGUgaG9zdCBjb25maWcgaXMgaW50ZXJuYWxseSBhIGxhbmUsIHNvIHdlIGNhblxuICAvLyB1c2UgdGhhdCBkaXJlY3RseS5cbiAgLy8gVE9ETzogTW92ZSB0aGlzIHR5cGUgY29udmVyc2lvbiB0byB0aGUgZXZlbnQgcHJpb3JpdHkgbW9kdWxlLlxuXG5cbiAgdmFyIGV2ZW50TGFuZSA9IGdldEN1cnJlbnRFdmVudFByaW9yaXR5KCk7XG4gIHJldHVybiBldmVudExhbmU7XG59XG5cbmZ1bmN0aW9uIHJlcXVlc3RSZXRyeUxhbmUoZmliZXIpIHtcbiAgLy8gVGhpcyBpcyBhIGZvcmsgb2YgYHJlcXVlc3RVcGRhdGVMYW5lYCBkZXNpZ25lZCBzcGVjaWZpY2FsbHkgZm9yIFN1c3BlbnNlXG4gIC8vIFwicmV0cmllc1wiIOKAlCBhIHNwZWNpYWwgdXBkYXRlIHRoYXQgYXR0ZW1wdHMgdG8gZmxpcCBhIFN1c3BlbnNlIGJvdW5kYXJ5XG4gIC8vIGZyb20gaXRzIHBsYWNlaG9sZGVyIHN0YXRlIHRvIGl0cyBwcmltYXJ5L3Jlc29sdmVkIHN0YXRlLlxuICAvLyBTcGVjaWFsIGNhc2VzXG4gIHZhciBtb2RlID0gZmliZXIubW9kZTtcblxuICBpZiAoKG1vZGUgJiBDb25jdXJyZW50TW9kZSkgPT09IE5vTW9kZSkge1xuICAgIHJldHVybiBTeW5jTGFuZTtcbiAgfVxuXG4gIHJldHVybiBjbGFpbU5leHRSZXRyeUxhbmUoKTtcbn1cblxuZnVuY3Rpb24gc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCBsYW5lLCBldmVudFRpbWUpIHtcbiAgY2hlY2tGb3JOZXN0ZWRVcGRhdGVzKCk7XG5cbiAge1xuICAgIGlmIChpc1J1bm5pbmdJbnNlcnRpb25FZmZlY3QpIHtcbiAgICAgIGVycm9yKCd1c2VJbnNlcnRpb25FZmZlY3QgbXVzdCBub3Qgc2NoZWR1bGUgdXBkYXRlcy4nKTtcbiAgICB9XG4gIH1cblxuICB7XG4gICAgaWYgKGlzRmx1c2hpbmdQYXNzaXZlRWZmZWN0cykge1xuICAgICAgZGlkU2NoZWR1bGVVcGRhdGVEdXJpbmdQYXNzaXZlRWZmZWN0cyA9IHRydWU7XG4gICAgfVxuICB9IC8vIE1hcmsgdGhhdCB0aGUgcm9vdCBoYXMgYSBwZW5kaW5nIHVwZGF0ZS5cblxuXG4gIG1hcmtSb290VXBkYXRlZChyb290LCBsYW5lLCBldmVudFRpbWUpO1xuXG4gIGlmICgoZXhlY3V0aW9uQ29udGV4dCAmIFJlbmRlckNvbnRleHQpICE9PSBOb0xhbmVzICYmIHJvb3QgPT09IHdvcmtJblByb2dyZXNzUm9vdCkge1xuICAgIC8vIFRoaXMgdXBkYXRlIHdhcyBkaXNwYXRjaGVkIGR1cmluZyB0aGUgcmVuZGVyIHBoYXNlLiBUaGlzIGlzIGEgbWlzdGFrZVxuICAgIC8vIGlmIHRoZSB1cGRhdGUgb3JpZ2luYXRlcyBmcm9tIHVzZXIgc3BhY2UgKHdpdGggdGhlIGV4Y2VwdGlvbiBvZiBsb2NhbFxuICAgIC8vIGhvb2sgdXBkYXRlcywgd2hpY2ggYXJlIGhhbmRsZWQgZGlmZmVyZW50bHkgYW5kIGRvbid0IHJlYWNoIHRoaXNcbiAgICAvLyBmdW5jdGlvbiksIGJ1dCB0aGVyZSBhcmUgc29tZSBpbnRlcm5hbCBSZWFjdCBmZWF0dXJlcyB0aGF0IHVzZSB0aGlzIGFzXG4gICAgLy8gYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsLCBsaWtlIHNlbGVjdGl2ZSBoeWRyYXRpb24uXG4gICAgd2FybkFib3V0UmVuZGVyUGhhc2VVcGRhdGVzSW5ERVYoZmliZXIpOyAvLyBUcmFjayBsYW5lcyB0aGF0IHdlcmUgdXBkYXRlZCBkdXJpbmcgdGhlIHJlbmRlciBwaGFzZVxuICB9IGVsc2Uge1xuICAgIC8vIFRoaXMgaXMgYSBub3JtYWwgdXBkYXRlLCBzY2hlZHVsZWQgZnJvbSBvdXRzaWRlIHRoZSByZW5kZXIgcGhhc2UuIEZvclxuICAgIC8vIGV4YW1wbGUsIGR1cmluZyBhbiBpbnB1dCBldmVudC5cbiAgICB7XG4gICAgICBpZiAoaXNEZXZUb29sc1ByZXNlbnQpIHtcbiAgICAgICAgYWRkRmliZXJUb0xhbmVzTWFwKHJvb3QsIGZpYmVyLCBsYW5lKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3YXJuSWZVcGRhdGVzTm90V3JhcHBlZFdpdGhBY3RERVYoZmliZXIpO1xuXG4gICAgaWYgKHJvb3QgPT09IHdvcmtJblByb2dyZXNzUm9vdCkge1xuICAgICAgLy8gUmVjZWl2ZWQgYW4gdXBkYXRlIHRvIGEgdHJlZSB0aGF0J3MgaW4gdGhlIG1pZGRsZSBvZiByZW5kZXJpbmcuIE1hcmtcbiAgICAgIC8vIHRoYXQgdGhlcmUgd2FzIGFuIGludGVybGVhdmVkIHVwZGF0ZSB3b3JrIG9uIHRoaXMgcm9vdC4gVW5sZXNzIHRoZVxuICAgICAgLy8gYGRlZmVyUmVuZGVyUGhhc2VVcGRhdGVUb05leHRCYXRjaGAgZmxhZyBpcyBvZmYgYW5kIHRoaXMgaXMgYSByZW5kZXJcbiAgICAgIC8vIHBoYXNlIHVwZGF0ZS4gSW4gdGhhdCBjYXNlLCB3ZSBkb24ndCB0cmVhdCByZW5kZXIgcGhhc2UgdXBkYXRlcyBhcyBpZlxuICAgICAgLy8gdGhleSB3ZXJlIGludGVybGVhdmVkLCBmb3IgYmFja3dhcmRzIGNvbXBhdCByZWFzb25zLlxuICAgICAgaWYgKCAoZXhlY3V0aW9uQ29udGV4dCAmIFJlbmRlckNvbnRleHQpID09PSBOb0NvbnRleHQpIHtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgPSBtZXJnZUxhbmVzKHdvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzLCBsYW5lKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPT09IFJvb3RTdXNwZW5kZWRXaXRoRGVsYXkpIHtcbiAgICAgICAgLy8gVGhlIHJvb3QgYWxyZWFkeSBzdXNwZW5kZWQgd2l0aCBhIGRlbGF5LCB3aGljaCBtZWFucyB0aGlzIHJlbmRlclxuICAgICAgICAvLyBkZWZpbml0ZWx5IHdvbid0IGZpbmlzaC4gU2luY2Ugd2UgaGF2ZSBhIG5ldyB1cGRhdGUsIGxldCdzIG1hcmsgaXQgYXNcbiAgICAgICAgLy8gc3VzcGVuZGVkIG5vdywgcmlnaHQgYmVmb3JlIG1hcmtpbmcgdGhlIGluY29taW5nIHVwZGF0ZS4gVGhpcyBoYXMgdGhlXG4gICAgICAgIC8vIGVmZmVjdCBvZiBpbnRlcnJ1cHRpbmcgdGhlIGN1cnJlbnQgcmVuZGVyIGFuZCBzd2l0Y2hpbmcgdG8gdGhlIHVwZGF0ZS5cbiAgICAgICAgLy8gVE9ETzogTWFrZSBzdXJlIHRoaXMgZG9lc24ndCBvdmVycmlkZSBwaW5ncyB0aGF0IGhhcHBlbiB3aGlsZSB3ZSd2ZVxuICAgICAgICAvLyBhbHJlYWR5IHN0YXJ0ZWQgcmVuZGVyaW5nLlxuICAgICAgICBtYXJrUm9vdFN1c3BlbmRlZCQxKHJvb3QsIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCwgZXZlbnRUaW1lKTtcblxuICAgIGlmIChsYW5lID09PSBTeW5jTGFuZSAmJiBleGVjdXRpb25Db250ZXh0ID09PSBOb0NvbnRleHQgJiYgKGZpYmVyLm1vZGUgJiBDb25jdXJyZW50TW9kZSkgPT09IE5vTW9kZSAmJiAvLyBUcmVhdCBgYWN0YCBhcyBpZiBpdCdzIGluc2lkZSBgYmF0Y2hlZFVwZGF0ZXNgLCBldmVuIGluIGxlZ2FjeSBtb2RlLlxuICAgICEoIFJlYWN0Q3VycmVudEFjdFF1ZXVlJDEuaXNCYXRjaGluZ0xlZ2FjeSkpIHtcbiAgICAgIC8vIEZsdXNoIHRoZSBzeW5jaHJvbm91cyB3b3JrIG5vdywgdW5sZXNzIHdlJ3JlIGFscmVhZHkgd29ya2luZyBvciBpbnNpZGVcbiAgICAgIC8vIGEgYmF0Y2guIFRoaXMgaXMgaW50ZW50aW9uYWxseSBpbnNpZGUgc2NoZWR1bGVVcGRhdGVPbkZpYmVyIGluc3RlYWQgb2ZcbiAgICAgIC8vIHNjaGVkdWxlQ2FsbGJhY2tGb3JGaWJlciB0byBwcmVzZXJ2ZSB0aGUgYWJpbGl0eSB0byBzY2hlZHVsZSBhIGNhbGxiYWNrXG4gICAgICAvLyB3aXRob3V0IGltbWVkaWF0ZWx5IGZsdXNoaW5nIGl0LiBXZSBvbmx5IGRvIHRoaXMgZm9yIHVzZXItaW5pdGlhdGVkXG4gICAgICAvLyB1cGRhdGVzLCB0byBwcmVzZXJ2ZSBoaXN0b3JpY2FsIGJlaGF2aW9yIG9mIGxlZ2FjeSBtb2RlLlxuICAgICAgcmVzZXRSZW5kZXJUaW1lcigpO1xuICAgICAgZmx1c2hTeW5jQ2FsbGJhY2tzT25seUluTGVnYWN5TW9kZSgpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc2NoZWR1bGVJbml0aWFsSHlkcmF0aW9uT25Sb290KHJvb3QsIGxhbmUsIGV2ZW50VGltZSkge1xuICAvLyBUaGlzIGlzIGEgc3BlY2lhbCBmb3JrIG9mIHNjaGVkdWxlVXBkYXRlT25GaWJlciB0aGF0IGlzIG9ubHkgdXNlZCB0b1xuICAvLyBzY2hlZHVsZSB0aGUgaW5pdGlhbCBoeWRyYXRpb24gb2YgYSByb290IHRoYXQgaGFzIGp1c3QgYmVlbiBjcmVhdGVkLiBNb3N0XG4gIC8vIG9mIHRoZSBzdHVmZiBpbiBzY2hlZHVsZVVwZGF0ZU9uRmliZXIgY2FuIGJlIHNraXBwZWQuXG4gIC8vXG4gIC8vIFRoZSBtYWluIHJlYXNvbiBmb3IgdGhpcyBzZXBhcmF0ZSBwYXRoLCB0aG91Z2gsIGlzIHRvIGRpc3Rpbmd1aXNoIHRoZVxuICAvLyBpbml0aWFsIGNoaWxkcmVuIGZyb20gc3Vic2VxdWVudCB1cGRhdGVzLiBJbiBmdWxseSBjbGllbnQtcmVuZGVyZWQgcm9vdHNcbiAgLy8gKGNyZWF0ZVJvb3QgaW5zdGVhZCBvZiBoeWRyYXRlUm9vdCksIGFsbCB0b3AtbGV2ZWwgcmVuZGVycyBhcmUgbW9kZWxlZCBhc1xuICAvLyB1cGRhdGVzLCBidXQgaHlkcmF0aW9uIHJvb3RzIGFyZSBzcGVjaWFsIGJlY2F1c2UgdGhlIGluaXRpYWwgcmVuZGVyIG11c3RcbiAgLy8gbWF0Y2ggd2hhdCB3YXMgcmVuZGVyZWQgb24gdGhlIHNlcnZlci5cbiAgdmFyIGN1cnJlbnQgPSByb290LmN1cnJlbnQ7XG4gIGN1cnJlbnQubGFuZXMgPSBsYW5lO1xuICBtYXJrUm9vdFVwZGF0ZWQocm9vdCwgbGFuZSwgZXZlbnRUaW1lKTtcbiAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QsIGV2ZW50VGltZSk7XG59XG5mdW5jdGlvbiBpc1Vuc2FmZUNsYXNzUmVuZGVyUGhhc2VVcGRhdGUoZmliZXIpIHtcbiAgLy8gQ2hlY2sgaWYgdGhpcyBpcyBhIHJlbmRlciBwaGFzZSB1cGRhdGUuIE9ubHkgY2FsbGVkIGJ5IGNsYXNzIGNvbXBvbmVudHMsXG4gIC8vIHdoaWNoIHNwZWNpYWwgKGRlcHJlY2F0ZWQpIGJlaGF2aW9yIGZvciBVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmUgcHJvcHMuXG4gIHJldHVybiAoLy8gVE9ETzogUmVtb3ZlIG91dGRhdGVkIGRlZmVyUmVuZGVyUGhhc2VVcGRhdGVUb05leHRCYXRjaCBleHBlcmltZW50LiBXZVxuICAgIC8vIGRlY2lkZWQgbm90IHRvIGVuYWJsZSBpdC5cbiAgICAgKGV4ZWN1dGlvbkNvbnRleHQgJiBSZW5kZXJDb250ZXh0KSAhPT0gTm9Db250ZXh0XG4gICk7XG59IC8vIFVzZSB0aGlzIGZ1bmN0aW9uIHRvIHNjaGVkdWxlIGEgdGFzayBmb3IgYSByb290LiBUaGVyZSdzIG9ubHkgb25lIHRhc2sgcGVyXG4vLyByb290OyBpZiBhIHRhc2sgd2FzIGFscmVhZHkgc2NoZWR1bGVkLCB3ZSdsbCBjaGVjayB0byBtYWtlIHN1cmUgdGhlIHByaW9yaXR5XG4vLyBvZiB0aGUgZXhpc3RpbmcgdGFzayBpcyB0aGUgc2FtZSBhcyB0aGUgcHJpb3JpdHkgb2YgdGhlIG5leHQgbGV2ZWwgdGhhdCB0aGVcbi8vIHJvb3QgaGFzIHdvcmsgb24uIFRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGV2ZXJ5IHVwZGF0ZSwgYW5kIHJpZ2h0IGJlZm9yZVxuLy8gZXhpdGluZyBhIHRhc2suXG5cbmZ1bmN0aW9uIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290LCBjdXJyZW50VGltZSkge1xuICB2YXIgZXhpc3RpbmdDYWxsYmFja05vZGUgPSByb290LmNhbGxiYWNrTm9kZTsgLy8gQ2hlY2sgaWYgYW55IGxhbmVzIGFyZSBiZWluZyBzdGFydmVkIGJ5IG90aGVyIHdvcmsuIElmIHNvLCBtYXJrIHRoZW0gYXNcbiAgLy8gZXhwaXJlZCBzbyB3ZSBrbm93IHRvIHdvcmsgb24gdGhvc2UgbmV4dC5cblxuICBtYXJrU3RhcnZlZExhbmVzQXNFeHBpcmVkKHJvb3QsIGN1cnJlbnRUaW1lKTsgLy8gRGV0ZXJtaW5lIHRoZSBuZXh0IGxhbmVzIHRvIHdvcmsgb24sIGFuZCB0aGVpciBwcmlvcml0eS5cblxuICB2YXIgbmV4dExhbmVzID0gZ2V0TmV4dExhbmVzKHJvb3QsIHJvb3QgPT09IHdvcmtJblByb2dyZXNzUm9vdCA/IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzIDogTm9MYW5lcyk7XG5cbiAgaWYgKG5leHRMYW5lcyA9PT0gTm9MYW5lcykge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogVGhlcmUncyBub3RoaW5nIHRvIHdvcmsgb24uXG4gICAgaWYgKGV4aXN0aW5nQ2FsbGJhY2tOb2RlICE9PSBudWxsKSB7XG4gICAgICBjYW5jZWxDYWxsYmFjayQxKGV4aXN0aW5nQ2FsbGJhY2tOb2RlKTtcbiAgICB9XG5cbiAgICByb290LmNhbGxiYWNrTm9kZSA9IG51bGw7XG4gICAgcm9vdC5jYWxsYmFja1ByaW9yaXR5ID0gTm9MYW5lO1xuICAgIHJldHVybjtcbiAgfSAvLyBXZSB1c2UgdGhlIGhpZ2hlc3QgcHJpb3JpdHkgbGFuZSB0byByZXByZXNlbnQgdGhlIHByaW9yaXR5IG9mIHRoZSBjYWxsYmFjay5cblxuXG4gIHZhciBuZXdDYWxsYmFja1ByaW9yaXR5ID0gZ2V0SGlnaGVzdFByaW9yaXR5TGFuZShuZXh0TGFuZXMpOyAvLyBDaGVjayBpZiB0aGVyZSdzIGFuIGV4aXN0aW5nIHRhc2suIFdlIG1heSBiZSBhYmxlIHRvIHJldXNlIGl0LlxuXG4gIHZhciBleGlzdGluZ0NhbGxiYWNrUHJpb3JpdHkgPSByb290LmNhbGxiYWNrUHJpb3JpdHk7XG5cbiAgaWYgKGV4aXN0aW5nQ2FsbGJhY2tQcmlvcml0eSA9PT0gbmV3Q2FsbGJhY2tQcmlvcml0eSAmJiAvLyBTcGVjaWFsIGNhc2UgcmVsYXRlZCB0byBgYWN0YC4gSWYgdGhlIGN1cnJlbnRseSBzY2hlZHVsZWQgdGFzayBpcyBhXG4gIC8vIFNjaGVkdWxlciB0YXNrLCByYXRoZXIgdGhhbiBhbiBgYWN0YCB0YXNrLCBjYW5jZWwgaXQgYW5kIHJlLXNjaGVkdWxlZFxuICAvLyBvbiB0aGUgYGFjdGAgcXVldWUuXG4gICEoIFJlYWN0Q3VycmVudEFjdFF1ZXVlJDEuY3VycmVudCAhPT0gbnVsbCAmJiBleGlzdGluZ0NhbGxiYWNrTm9kZSAhPT0gZmFrZUFjdENhbGxiYWNrTm9kZSkpIHtcbiAgICB7XG4gICAgICAvLyBJZiB3ZSdyZSBnb2luZyB0byByZS11c2UgYW4gZXhpc3RpbmcgdGFzaywgaXQgbmVlZHMgdG8gZXhpc3QuXG4gICAgICAvLyBBc3N1bWUgdGhhdCBkaXNjcmV0ZSB1cGRhdGUgbWljcm90YXNrcyBhcmUgbm9uLWNhbmNlbGxhYmxlIGFuZCBudWxsLlxuICAgICAgLy8gVE9ETzogVGVtcG9yYXJ5IHVudGlsIHdlIGNvbmZpcm0gdGhpcyB3YXJuaW5nIGlzIG5vdCBmaXJlZC5cbiAgICAgIGlmIChleGlzdGluZ0NhbGxiYWNrTm9kZSA9PSBudWxsICYmIGV4aXN0aW5nQ2FsbGJhY2tQcmlvcml0eSAhPT0gU3luY0xhbmUpIHtcbiAgICAgICAgZXJyb3IoJ0V4cGVjdGVkIHNjaGVkdWxlZCBjYWxsYmFjayB0byBleGlzdC4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgICAgIH1cbiAgICB9IC8vIFRoZSBwcmlvcml0eSBoYXNuJ3QgY2hhbmdlZC4gV2UgY2FuIHJldXNlIHRoZSBleGlzdGluZyB0YXNrLiBFeGl0LlxuXG5cbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZXhpc3RpbmdDYWxsYmFja05vZGUgIT0gbnVsbCkge1xuICAgIC8vIENhbmNlbCB0aGUgZXhpc3RpbmcgY2FsbGJhY2suIFdlJ2xsIHNjaGVkdWxlIGEgbmV3IG9uZSBiZWxvdy5cbiAgICBjYW5jZWxDYWxsYmFjayQxKGV4aXN0aW5nQ2FsbGJhY2tOb2RlKTtcbiAgfSAvLyBTY2hlZHVsZSBhIG5ldyBjYWxsYmFjay5cblxuXG4gIHZhciBuZXdDYWxsYmFja05vZGU7XG5cbiAgaWYgKG5ld0NhbGxiYWNrUHJpb3JpdHkgPT09IFN5bmNMYW5lKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBTeW5jIFJlYWN0IGNhbGxiYWNrcyBhcmUgc2NoZWR1bGVkIG9uIGEgc3BlY2lhbFxuICAgIC8vIGludGVybmFsIHF1ZXVlXG4gICAgaWYgKHJvb3QudGFnID09PSBMZWdhY3lSb290KSB7XG4gICAgICBpZiAoIFJlYWN0Q3VycmVudEFjdFF1ZXVlJDEuaXNCYXRjaGluZ0xlZ2FjeSAhPT0gbnVsbCkge1xuICAgICAgICBSZWFjdEN1cnJlbnRBY3RRdWV1ZSQxLmRpZFNjaGVkdWxlTGVnYWN5VXBkYXRlID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgc2NoZWR1bGVMZWdhY3lTeW5jQ2FsbGJhY2socGVyZm9ybVN5bmNXb3JrT25Sb290LmJpbmQobnVsbCwgcm9vdCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzY2hlZHVsZVN5bmNDYWxsYmFjayhwZXJmb3JtU3luY1dvcmtPblJvb3QuYmluZChudWxsLCByb290KSk7XG4gICAgfVxuXG4gICAge1xuICAgICAgLy8gRmx1c2ggdGhlIHF1ZXVlIGluIGEgbWljcm90YXNrLlxuICAgICAgaWYgKCBSZWFjdEN1cnJlbnRBY3RRdWV1ZSQxLmN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgLy8gSW5zaWRlIGBhY3RgLCB1c2Ugb3VyIGludGVybmFsIGBhY3RgIHF1ZXVlIHNvIHRoYXQgdGhlc2UgZ2V0IGZsdXNoZWRcbiAgICAgICAgLy8gYXQgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBzY29wZSBldmVuIHdoZW4gdXNpbmcgdGhlIHN5bmMgdmVyc2lvblxuICAgICAgICAvLyBvZiBgYWN0YC5cbiAgICAgICAgUmVhY3RDdXJyZW50QWN0UXVldWUkMS5jdXJyZW50LnB1c2goZmx1c2hTeW5jQ2FsbGJhY2tzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNjaGVkdWxlTWljcm90YXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBJbiBTYWZhcmksIGFwcGVuZGluZyBhbiBpZnJhbWUgZm9yY2VzIG1pY3JvdGFza3MgdG8gcnVuLlxuICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMjI0NTlcbiAgICAgICAgICAvLyBXZSBkb24ndCBzdXBwb3J0IHJ1bm5pbmcgY2FsbGJhY2tzIGluIHRoZSBtaWRkbGUgb2YgcmVuZGVyXG4gICAgICAgICAgLy8gb3IgY29tbWl0IHNvIHdlIG5lZWQgdG8gY2hlY2sgYWdhaW5zdCB0aGF0LlxuICAgICAgICAgIGlmICgoZXhlY3V0aW9uQ29udGV4dCAmIChSZW5kZXJDb250ZXh0IHwgQ29tbWl0Q29udGV4dCkpID09PSBOb0NvbnRleHQpIHtcbiAgICAgICAgICAgIC8vIE5vdGUgdGhhdCB0aGlzIHdvdWxkIHN0aWxsIHByZW1hdHVyZWx5IGZsdXNoIHRoZSBjYWxsYmFja3NcbiAgICAgICAgICAgIC8vIGlmIHRoaXMgaGFwcGVucyBvdXRzaWRlIHJlbmRlciBvciBjb21taXQgcGhhc2UgKGUuZy4gaW4gYW4gZXZlbnQpLlxuICAgICAgICAgICAgZmx1c2hTeW5jQ2FsbGJhY2tzKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBuZXdDYWxsYmFja05vZGUgPSBudWxsO1xuICB9IGVsc2Uge1xuICAgIHZhciBzY2hlZHVsZXJQcmlvcml0eUxldmVsO1xuXG4gICAgc3dpdGNoIChsYW5lc1RvRXZlbnRQcmlvcml0eShuZXh0TGFuZXMpKSB7XG4gICAgICBjYXNlIERpc2NyZXRlRXZlbnRQcmlvcml0eTpcbiAgICAgICAgc2NoZWR1bGVyUHJpb3JpdHlMZXZlbCA9IEltbWVkaWF0ZVByaW9yaXR5O1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBDb250aW51b3VzRXZlbnRQcmlvcml0eTpcbiAgICAgICAgc2NoZWR1bGVyUHJpb3JpdHlMZXZlbCA9IFVzZXJCbG9ja2luZ1ByaW9yaXR5O1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBEZWZhdWx0RXZlbnRQcmlvcml0eTpcbiAgICAgICAgc2NoZWR1bGVyUHJpb3JpdHlMZXZlbCA9IE5vcm1hbFByaW9yaXR5O1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBJZGxlRXZlbnRQcmlvcml0eTpcbiAgICAgICAgc2NoZWR1bGVyUHJpb3JpdHlMZXZlbCA9IElkbGVQcmlvcml0eTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHNjaGVkdWxlclByaW9yaXR5TGV2ZWwgPSBOb3JtYWxQcmlvcml0eTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgbmV3Q2FsbGJhY2tOb2RlID0gc2NoZWR1bGVDYWxsYmFjayQxKHNjaGVkdWxlclByaW9yaXR5TGV2ZWwsIHBlcmZvcm1Db25jdXJyZW50V29ya09uUm9vdC5iaW5kKG51bGwsIHJvb3QpKTtcbiAgfVxuXG4gIHJvb3QuY2FsbGJhY2tQcmlvcml0eSA9IG5ld0NhbGxiYWNrUHJpb3JpdHk7XG4gIHJvb3QuY2FsbGJhY2tOb2RlID0gbmV3Q2FsbGJhY2tOb2RlO1xufSAvLyBUaGlzIGlzIHRoZSBlbnRyeSBwb2ludCBmb3IgZXZlcnkgY29uY3VycmVudCB0YXNrLCBpLmUuIGFueXRoaW5nIHRoYXRcbi8vIGdvZXMgdGhyb3VnaCBTY2hlZHVsZXIuXG5cblxuZnVuY3Rpb24gcGVyZm9ybUNvbmN1cnJlbnRXb3JrT25Sb290KHJvb3QsIGRpZFRpbWVvdXQpIHtcbiAge1xuICAgIHJlc2V0TmVzdGVkVXBkYXRlRmxhZygpO1xuICB9IC8vIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gYSBSZWFjdCBldmVudCwgd2UgY2FuIGNsZWFyIHRoZSBjdXJyZW50XG4gIC8vIGV2ZW50IHRpbWUuIFRoZSBuZXh0IHVwZGF0ZSB3aWxsIGNvbXB1dGUgYSBuZXcgZXZlbnQgdGltZS5cblxuXG4gIGN1cnJlbnRFdmVudFRpbWUgPSBOb1RpbWVzdGFtcDtcbiAgY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUgPSBOb0xhbmVzO1xuXG4gIGlmICgoZXhlY3V0aW9uQ29udGV4dCAmIChSZW5kZXJDb250ZXh0IHwgQ29tbWl0Q29udGV4dCkpICE9PSBOb0NvbnRleHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Nob3VsZCBub3QgYWxyZWFkeSBiZSB3b3JraW5nLicpO1xuICB9IC8vIEZsdXNoIGFueSBwZW5kaW5nIHBhc3NpdmUgZWZmZWN0cyBiZWZvcmUgZGVjaWRpbmcgd2hpY2ggbGFuZXMgdG8gd29yayBvbixcbiAgLy8gaW4gY2FzZSB0aGV5IHNjaGVkdWxlIGFkZGl0aW9uYWwgd29yay5cblxuXG4gIHZhciBvcmlnaW5hbENhbGxiYWNrTm9kZSA9IHJvb3QuY2FsbGJhY2tOb2RlO1xuICB2YXIgZGlkRmx1c2hQYXNzaXZlRWZmZWN0cyA9IGZsdXNoUGFzc2l2ZUVmZmVjdHMoKTtcblxuICBpZiAoZGlkRmx1c2hQYXNzaXZlRWZmZWN0cykge1xuICAgIC8vIFNvbWV0aGluZyBpbiB0aGUgcGFzc2l2ZSBlZmZlY3QgcGhhc2UgbWF5IGhhdmUgY2FuY2VsZWQgdGhlIGN1cnJlbnQgdGFzay5cbiAgICAvLyBDaGVjayBpZiB0aGUgdGFzayBub2RlIGZvciB0aGlzIHJvb3Qgd2FzIGNoYW5nZWQuXG4gICAgaWYgKHJvb3QuY2FsbGJhY2tOb2RlICE9PSBvcmlnaW5hbENhbGxiYWNrTm9kZSkge1xuICAgICAgLy8gVGhlIGN1cnJlbnQgdGFzayB3YXMgY2FuY2VsZWQuIEV4aXQuIFdlIGRvbid0IG5lZWQgdG8gY2FsbFxuICAgICAgLy8gYGVuc3VyZVJvb3RJc1NjaGVkdWxlZGAgYmVjYXVzZSB0aGUgY2hlY2sgYWJvdmUgaW1wbGllcyBlaXRoZXIgdGhhdFxuICAgICAgLy8gdGhlcmUncyBhIG5ldyB0YXNrLCBvciB0aGF0IHRoZXJlJ3Mgbm8gcmVtYWluaW5nIHdvcmsgb24gdGhpcyByb290LlxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9IC8vIERldGVybWluZSB0aGUgbmV4dCBsYW5lcyB0byB3b3JrIG9uLCB1c2luZyB0aGUgZmllbGRzIHN0b3JlZFxuICAvLyBvbiB0aGUgcm9vdC5cblxuXG4gIHZhciBsYW5lcyA9IGdldE5leHRMYW5lcyhyb290LCByb290ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QgPyB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyA6IE5vTGFuZXMpO1xuXG4gIGlmIChsYW5lcyA9PT0gTm9MYW5lcykge1xuICAgIC8vIERlZmVuc2l2ZSBjb2RpbmcuIFRoaXMgaXMgbmV2ZXIgZXhwZWN0ZWQgdG8gaGFwcGVuLlxuICAgIHJldHVybiBudWxsO1xuICB9IC8vIFdlIGRpc2FibGUgdGltZS1zbGljaW5nIGluIHNvbWUgY2FzZXM6IGlmIHRoZSB3b3JrIGhhcyBiZWVuIENQVS1ib3VuZFxuICAvLyBmb3IgdG9vIGxvbmcgKFwiZXhwaXJlZFwiIHdvcmssIHRvIHByZXZlbnQgc3RhcnZhdGlvbiksIG9yIHdlJ3JlIGluXG4gIC8vIHN5bmMtdXBkYXRlcy1ieS1kZWZhdWx0IG1vZGUuXG4gIC8vIFRPRE86IFdlIG9ubHkgY2hlY2sgYGRpZFRpbWVvdXRgIGRlZmVuc2l2ZWx5LCB0byBhY2NvdW50IGZvciBhIFNjaGVkdWxlclxuICAvLyBidWcgd2UncmUgc3RpbGwgaW52ZXN0aWdhdGluZy4gT25jZSB0aGUgYnVnIGluIFNjaGVkdWxlciBpcyBmaXhlZCxcbiAgLy8gd2UgY2FuIHJlbW92ZSB0aGlzLCBzaW5jZSB3ZSB0cmFjayBleHBpcmF0aW9uIG91cnNlbHZlcy5cblxuXG4gIHZhciBzaG91bGRUaW1lU2xpY2UgPSAhaW5jbHVkZXNCbG9ja2luZ0xhbmUocm9vdCwgbGFuZXMpICYmICFpbmNsdWRlc0V4cGlyZWRMYW5lKHJvb3QsIGxhbmVzKSAmJiAoICFkaWRUaW1lb3V0KTtcbiAgdmFyIGV4aXRTdGF0dXMgPSBzaG91bGRUaW1lU2xpY2UgPyByZW5kZXJSb290Q29uY3VycmVudChyb290LCBsYW5lcykgOiByZW5kZXJSb290U3luYyhyb290LCBsYW5lcyk7XG5cbiAgaWYgKGV4aXRTdGF0dXMgIT09IFJvb3RJblByb2dyZXNzKSB7XG4gICAgaWYgKGV4aXRTdGF0dXMgPT09IFJvb3RFcnJvcmVkKSB7XG4gICAgICAvLyBJZiBzb21ldGhpbmcgdGhyZXcgYW4gZXJyb3IsIHRyeSByZW5kZXJpbmcgb25lIG1vcmUgdGltZS4gV2UnbGxcbiAgICAgIC8vIHJlbmRlciBzeW5jaHJvbm91c2x5IHRvIGJsb2NrIGNvbmN1cnJlbnQgZGF0YSBtdXRhdGlvbnMsIGFuZCB3ZSdsbFxuICAgICAgLy8gaW5jbHVkZXMgYWxsIHBlbmRpbmcgdXBkYXRlcyBhcmUgaW5jbHVkZWQuIElmIGl0IHN0aWxsIGZhaWxzIGFmdGVyXG4gICAgICAvLyB0aGUgc2Vjb25kIGF0dGVtcHQsIHdlJ2xsIGdpdmUgdXAgYW5kIGNvbW1pdCB0aGUgcmVzdWx0aW5nIHRyZWUuXG4gICAgICB2YXIgZXJyb3JSZXRyeUxhbmVzID0gZ2V0TGFuZXNUb1JldHJ5U3luY2hyb25vdXNseU9uRXJyb3Iocm9vdCk7XG5cbiAgICAgIGlmIChlcnJvclJldHJ5TGFuZXMgIT09IE5vTGFuZXMpIHtcbiAgICAgICAgbGFuZXMgPSBlcnJvclJldHJ5TGFuZXM7XG4gICAgICAgIGV4aXRTdGF0dXMgPSByZWNvdmVyRnJvbUNvbmN1cnJlbnRFcnJvcihyb290LCBlcnJvclJldHJ5TGFuZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleGl0U3RhdHVzID09PSBSb290RmF0YWxFcnJvcmVkKSB7XG4gICAgICB2YXIgZmF0YWxFcnJvciA9IHdvcmtJblByb2dyZXNzUm9vdEZhdGFsRXJyb3I7XG4gICAgICBwcmVwYXJlRnJlc2hTdGFjayhyb290LCBOb0xhbmVzKTtcbiAgICAgIG1hcmtSb290U3VzcGVuZGVkJDEocm9vdCwgbGFuZXMpO1xuICAgICAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QsIG5vdygpKTtcbiAgICAgIHRocm93IGZhdGFsRXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKGV4aXRTdGF0dXMgPT09IFJvb3REaWROb3RDb21wbGV0ZSkge1xuICAgICAgLy8gVGhlIHJlbmRlciB1bndvdW5kIHdpdGhvdXQgY29tcGxldGluZyB0aGUgdHJlZS4gVGhpcyBoYXBwZW5zIGluIHNwZWNpYWxcbiAgICAgIC8vIGNhc2VzIHdoZXJlIG5lZWQgdG8gZXhpdCB0aGUgY3VycmVudCByZW5kZXIgd2l0aG91dCBwcm9kdWNpbmcgYVxuICAgICAgLy8gY29uc2lzdGVudCB0cmVlIG9yIGNvbW1pdHRpbmcuXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBzaG91bGQgb25seSBoYXBwZW4gZHVyaW5nIGEgY29uY3VycmVudCByZW5kZXIsIG5vdCBhIGRpc2NyZXRlIG9yXG4gICAgICAvLyBzeW5jaHJvbm91cyB1cGRhdGUuIFdlIHNob3VsZCBoYXZlIGFscmVhZHkgY2hlY2tlZCBmb3IgdGhpcyB3aGVuIHdlXG4gICAgICAvLyB1bndvdW5kIHRoZSBzdGFjay5cbiAgICAgIG1hcmtSb290U3VzcGVuZGVkJDEocm9vdCwgbGFuZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGUgcmVuZGVyIGNvbXBsZXRlZC5cbiAgICAgIC8vIENoZWNrIGlmIHRoaXMgcmVuZGVyIG1heSBoYXZlIHlpZWxkZWQgdG8gYSBjb25jdXJyZW50IGV2ZW50LCBhbmQgaWYgc28sXG4gICAgICAvLyBjb25maXJtIHRoYXQgYW55IG5ld2x5IHJlbmRlcmVkIHN0b3JlcyBhcmUgY29uc2lzdGVudC5cbiAgICAgIC8vIFRPRE86IEl0J3MgcG9zc2libGUgdGhhdCBldmVuIGEgY29uY3VycmVudCByZW5kZXIgbWF5IG5ldmVyIGhhdmUgeWllbGRlZFxuICAgICAgLy8gdG8gdGhlIG1haW4gdGhyZWFkLCBpZiBpdCB3YXMgZmFzdCBlbm91Z2gsIG9yIGlmIGl0IGV4cGlyZWQuIFdlIGNvdWxkXG4gICAgICAvLyBza2lwIHRoZSBjb25zaXN0ZW5jeSBjaGVjayBpbiB0aGF0IGNhc2UsIHRvby5cbiAgICAgIHZhciByZW5kZXJXYXNDb25jdXJyZW50ID0gIWluY2x1ZGVzQmxvY2tpbmdMYW5lKHJvb3QsIGxhbmVzKTtcbiAgICAgIHZhciBmaW5pc2hlZFdvcmsgPSByb290LmN1cnJlbnQuYWx0ZXJuYXRlO1xuXG4gICAgICBpZiAocmVuZGVyV2FzQ29uY3VycmVudCAmJiAhaXNSZW5kZXJDb25zaXN0ZW50V2l0aEV4dGVybmFsU3RvcmVzKGZpbmlzaGVkV29yaykpIHtcbiAgICAgICAgLy8gQSBzdG9yZSB3YXMgbXV0YXRlZCBpbiBhbiBpbnRlcmxlYXZlZCBldmVudC4gUmVuZGVyIGFnYWluLFxuICAgICAgICAvLyBzeW5jaHJvbm91c2x5LCB0byBibG9jayBmdXJ0aGVyIG11dGF0aW9ucy5cbiAgICAgICAgZXhpdFN0YXR1cyA9IHJlbmRlclJvb3RTeW5jKHJvb3QsIGxhbmVzKTsgLy8gV2UgbmVlZCB0byBjaGVjayBhZ2FpbiBpZiBzb21ldGhpbmcgdGhyZXdcblxuICAgICAgICBpZiAoZXhpdFN0YXR1cyA9PT0gUm9vdEVycm9yZWQpIHtcbiAgICAgICAgICB2YXIgX2Vycm9yUmV0cnlMYW5lcyA9IGdldExhbmVzVG9SZXRyeVN5bmNocm9ub3VzbHlPbkVycm9yKHJvb3QpO1xuXG4gICAgICAgICAgaWYgKF9lcnJvclJldHJ5TGFuZXMgIT09IE5vTGFuZXMpIHtcbiAgICAgICAgICAgIGxhbmVzID0gX2Vycm9yUmV0cnlMYW5lcztcbiAgICAgICAgICAgIGV4aXRTdGF0dXMgPSByZWNvdmVyRnJvbUNvbmN1cnJlbnRFcnJvcihyb290LCBfZXJyb3JSZXRyeUxhbmVzKTsgLy8gV2UgYXNzdW1lIHRoZSB0cmVlIGlzIG5vdyBjb25zaXN0ZW50IGJlY2F1c2Ugd2UgZGlkbid0IHlpZWxkIHRvIGFueVxuICAgICAgICAgICAgLy8gY29uY3VycmVudCBldmVudHMuXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV4aXRTdGF0dXMgPT09IFJvb3RGYXRhbEVycm9yZWQpIHtcbiAgICAgICAgICB2YXIgX2ZhdGFsRXJyb3IgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RGYXRhbEVycm9yO1xuICAgICAgICAgIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIE5vTGFuZXMpO1xuICAgICAgICAgIG1hcmtSb290U3VzcGVuZGVkJDEocm9vdCwgbGFuZXMpO1xuICAgICAgICAgIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290LCBub3coKSk7XG4gICAgICAgICAgdGhyb3cgX2ZhdGFsRXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH0gLy8gV2Ugbm93IGhhdmUgYSBjb25zaXN0ZW50IHRyZWUuIFRoZSBuZXh0IHN0ZXAgaXMgZWl0aGVyIHRvIGNvbW1pdCBpdCxcbiAgICAgIC8vIG9yLCBpZiBzb21ldGhpbmcgc3VzcGVuZGVkLCB3YWl0IHRvIGNvbW1pdCBpdCBhZnRlciBhIHRpbWVvdXQuXG5cblxuICAgICAgcm9vdC5maW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcms7XG4gICAgICByb290LmZpbmlzaGVkTGFuZXMgPSBsYW5lcztcbiAgICAgIGZpbmlzaENvbmN1cnJlbnRSZW5kZXIocm9vdCwgZXhpdFN0YXR1cywgbGFuZXMpO1xuICAgIH1cbiAgfVxuXG4gIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290LCBub3coKSk7XG5cbiAgaWYgKHJvb3QuY2FsbGJhY2tOb2RlID09PSBvcmlnaW5hbENhbGxiYWNrTm9kZSkge1xuICAgIC8vIFRoZSB0YXNrIG5vZGUgc2NoZWR1bGVkIGZvciB0aGlzIHJvb3QgaXMgdGhlIHNhbWUgb25lIHRoYXQnc1xuICAgIC8vIGN1cnJlbnRseSBleGVjdXRlZC4gTmVlZCB0byByZXR1cm4gYSBjb250aW51YXRpb24uXG4gICAgcmV0dXJuIHBlcmZvcm1Db25jdXJyZW50V29ya09uUm9vdC5iaW5kKG51bGwsIHJvb3QpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHJlY292ZXJGcm9tQ29uY3VycmVudEVycm9yKHJvb3QsIGVycm9yUmV0cnlMYW5lcykge1xuICAvLyBJZiBhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgaHlkcmF0aW9uLCBkaXNjYXJkIHNlcnZlciByZXNwb25zZSBhbmQgZmFsbFxuICAvLyBiYWNrIHRvIGNsaWVudCBzaWRlIHJlbmRlci5cbiAgLy8gQmVmb3JlIHJlbmRlcmluZyBhZ2Fpbiwgc2F2ZSB0aGUgZXJyb3JzIGZyb20gdGhlIHByZXZpb3VzIGF0dGVtcHQuXG4gIHZhciBlcnJvcnNGcm9tRmlyc3RBdHRlbXB0ID0gd29ya0luUHJvZ3Jlc3NSb290Q29uY3VycmVudEVycm9ycztcblxuICBpZiAoaXNSb290RGVoeWRyYXRlZChyb290KSkge1xuICAgIC8vIFRoZSBzaGVsbCBmYWlsZWQgdG8gaHlkcmF0ZS4gU2V0IGEgZmxhZyB0byBmb3JjZSBhIGNsaWVudCByZW5kZXJpbmdcbiAgICAvLyBkdXJpbmcgdGhlIG5leHQgYXR0ZW1wdC4gVG8gZG8gdGhpcywgd2UgY2FsbCBwcmVwYXJlRnJlc2hTdGFjayBub3dcbiAgICAvLyB0byBjcmVhdGUgdGhlIHJvb3Qgd29yay1pbi1wcm9ncmVzcyBmaWJlci4gVGhpcyBpcyBhIGJpdCB3ZWlyZCBpbiB0ZXJtc1xuICAgIC8vIG9mIGZhY3RvcmluZywgYmVjYXVzZSBpdCByZWxpZXMgb24gcmVuZGVyUm9vdFN5bmMgbm90IGNhbGxpbmdcbiAgICAvLyBwcmVwYXJlRnJlc2hTdGFjayBhZ2FpbiBpbiB0aGUgY2FsbCBiZWxvdywgd2hpY2ggaGFwcGVucyBiZWNhdXNlIHRoZVxuICAgIC8vIHJvb3QgYW5kIGxhbmVzIGhhdmVuJ3QgY2hhbmdlZC5cbiAgICAvL1xuICAgIC8vIFRPRE86IEkgdGhpbmsgd2hhdCB3ZSBzaG91bGQgZG8gaXMgc2V0IEZvcmNlQ2xpZW50UmVuZGVyIGluc2lkZVxuICAgIC8vIHRocm93RXhjZXB0aW9uLCBsaWtlIHdlIGRvIGZvciBuZXN0ZWQgU3VzcGVuc2UgYm91bmRhcmllcy4gVGhlIHJlYXNvblxuICAgIC8vIGl0J3MgaGVyZSBpbnN0ZWFkIGlzIHNvIHdlIGNhbiBzd2l0Y2ggdG8gdGhlIHN5bmNocm9ub3VzIHdvcmsgbG9vcCwgdG9vLlxuICAgIC8vIFNvbWV0aGluZyB0byBjb25zaWRlciBmb3IgYSBmdXR1cmUgcmVmYWN0b3IuXG4gICAgdmFyIHJvb3RXb3JrSW5Qcm9ncmVzcyA9IHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIGVycm9yUmV0cnlMYW5lcyk7XG4gICAgcm9vdFdvcmtJblByb2dyZXNzLmZsYWdzIHw9IEZvcmNlQ2xpZW50UmVuZGVyO1xuXG4gICAge1xuICAgICAgZXJyb3JIeWRyYXRpbmdDb250YWluZXIocm9vdC5jb250YWluZXJJbmZvKTtcbiAgICB9XG4gIH1cblxuICB2YXIgZXhpdFN0YXR1cyA9IHJlbmRlclJvb3RTeW5jKHJvb3QsIGVycm9yUmV0cnlMYW5lcyk7XG5cbiAgaWYgKGV4aXRTdGF0dXMgIT09IFJvb3RFcnJvcmVkKSB7XG4gICAgLy8gU3VjY2Vzc2Z1bGx5IGZpbmlzaGVkIHJlbmRlcmluZyBvbiByZXRyeVxuICAgIC8vIFRoZSBlcnJvcnMgZnJvbSB0aGUgZmFpbGVkIGZpcnN0IGF0dGVtcHQgaGF2ZSBiZWVuIHJlY292ZXJlZC4gQWRkXG4gICAgLy8gdGhlbSB0byB0aGUgY29sbGVjdGlvbiBvZiByZWNvdmVyYWJsZSBlcnJvcnMuIFdlJ2xsIGxvZyB0aGVtIGluIHRoZVxuICAgIC8vIGNvbW1pdCBwaGFzZS5cbiAgICB2YXIgZXJyb3JzRnJvbVNlY29uZEF0dGVtcHQgPSB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycztcbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IGVycm9yc0Zyb21GaXJzdEF0dGVtcHQ7IC8vIFRoZSBlcnJvcnMgZnJvbSB0aGUgc2Vjb25kIGF0dGVtcHQgc2hvdWxkIGJlIHF1ZXVlZCBhZnRlciB0aGUgZXJyb3JzXG4gICAgLy8gZnJvbSB0aGUgZmlyc3QgYXR0ZW1wdCwgdG8gcHJlc2VydmUgdGhlIGNhdXNhbCBzZXF1ZW5jZS5cblxuICAgIGlmIChlcnJvcnNGcm9tU2Vjb25kQXR0ZW1wdCAhPT0gbnVsbCkge1xuICAgICAgcXVldWVSZWNvdmVyYWJsZUVycm9ycyhlcnJvcnNGcm9tU2Vjb25kQXR0ZW1wdCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV4aXRTdGF0dXM7XG59XG5cbmZ1bmN0aW9uIHF1ZXVlUmVjb3ZlcmFibGVFcnJvcnMoZXJyb3JzKSB7XG4gIGlmICh3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9PT0gbnVsbCkge1xuICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzID0gZXJyb3JzO1xuICB9IGVsc2Uge1xuICAgIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLnB1c2guYXBwbHkod29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMsIGVycm9ycyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluaXNoQ29uY3VycmVudFJlbmRlcihyb290LCBleGl0U3RhdHVzLCBsYW5lcykge1xuICBzd2l0Y2ggKGV4aXRTdGF0dXMpIHtcbiAgICBjYXNlIFJvb3RJblByb2dyZXNzOlxuICAgIGNhc2UgUm9vdEZhdGFsRXJyb3JlZDpcbiAgICAgIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdSb290IGRpZCBub3QgY29tcGxldGUuIFRoaXMgaXMgYSBidWcgaW4gUmVhY3QuJyk7XG4gICAgICB9XG4gICAgLy8gRmxvdyBrbm93cyBhYm91dCBpbnZhcmlhbnQsIHNvIGl0IGNvbXBsYWlucyBpZiBJIGFkZCBhIGJyZWFrXG4gICAgLy8gc3RhdGVtZW50LCBidXQgZXNsaW50IGRvZXNuJ3Qga25vdyBhYm91dCBpbnZhcmlhbnQsIHNvIGl0IGNvbXBsYWluc1xuICAgIC8vIGlmIEkgZG8uIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1mYWxsdGhyb3VnaFxuXG4gICAgY2FzZSBSb290RXJyb3JlZDpcbiAgICAgIHtcbiAgICAgICAgLy8gV2Ugc2hvdWxkIGhhdmUgYWxyZWFkeSBhdHRlbXB0ZWQgdG8gcmV0cnkgdGhpcyB0cmVlLiBJZiB3ZSByZWFjaGVkXG4gICAgICAgIC8vIHRoaXMgcG9pbnQsIGl0IGVycm9yZWQgYWdhaW4uIENvbW1pdCBpdC5cbiAgICAgICAgY29tbWl0Um9vdChyb290LCB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycywgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSBSb290U3VzcGVuZGVkOlxuICAgICAge1xuICAgICAgICBtYXJrUm9vdFN1c3BlbmRlZCQxKHJvb3QsIGxhbmVzKTsgLy8gV2UgaGF2ZSBhbiBhY2NlcHRhYmxlIGxvYWRpbmcgc3RhdGUuIFdlIG5lZWQgdG8gZmlndXJlIG91dCBpZiB3ZVxuICAgICAgICAvLyBzaG91bGQgaW1tZWRpYXRlbHkgY29tbWl0IGl0IG9yIHdhaXQgYSBiaXQuXG5cbiAgICAgICAgaWYgKGluY2x1ZGVzT25seVJldHJpZXMobGFuZXMpICYmIC8vIGRvIG5vdCBkZWxheSBpZiB3ZSdyZSBpbnNpZGUgYW4gYWN0KCkgc2NvcGVcbiAgICAgICAgIXNob3VsZEZvcmNlRmx1c2hGYWxsYmFja3NJbkRFVigpKSB7XG4gICAgICAgICAgLy8gVGhpcyByZW5kZXIgb25seSBpbmNsdWRlZCByZXRyaWVzLCBubyB1cGRhdGVzLiBUaHJvdHRsZSBjb21taXR0aW5nXG4gICAgICAgICAgLy8gcmV0cmllcyBzbyB0aGF0IHdlIGRvbid0IHNob3cgdG9vIG1hbnkgbG9hZGluZyBzdGF0ZXMgdG9vIHF1aWNrbHkuXG4gICAgICAgICAgdmFyIG1zVW50aWxUaW1lb3V0ID0gZ2xvYmFsTW9zdFJlY2VudEZhbGxiYWNrVGltZSArIEZBTExCQUNLX1RIUk9UVExFX01TIC0gbm93KCk7IC8vIERvbid0IGJvdGhlciB3aXRoIGEgdmVyeSBzaG9ydCBzdXNwZW5zZSB0aW1lLlxuXG4gICAgICAgICAgaWYgKG1zVW50aWxUaW1lb3V0ID4gMTApIHtcbiAgICAgICAgICAgIHZhciBuZXh0TGFuZXMgPSBnZXROZXh0TGFuZXMocm9vdCwgTm9MYW5lcyk7XG5cbiAgICAgICAgICAgIGlmIChuZXh0TGFuZXMgIT09IE5vTGFuZXMpIHtcbiAgICAgICAgICAgICAgLy8gVGhlcmUncyBhZGRpdGlvbmFsIHdvcmsgb24gdGhpcyByb290LlxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHN1c3BlbmRlZExhbmVzID0gcm9vdC5zdXNwZW5kZWRMYW5lcztcblxuICAgICAgICAgICAgaWYgKCFpc1N1YnNldE9mTGFuZXMoc3VzcGVuZGVkTGFuZXMsIGxhbmVzKSkge1xuICAgICAgICAgICAgICAvLyBXZSBzaG91bGQgcHJlZmVyIHRvIHJlbmRlciB0aGUgZmFsbGJhY2sgb2YgYXQgdGhlIGxhc3RcbiAgICAgICAgICAgICAgLy8gc3VzcGVuZGVkIGxldmVsLiBQaW5nIHRoZSBsYXN0IHN1c3BlbmRlZCBsZXZlbCB0byB0cnlcbiAgICAgICAgICAgICAgLy8gcmVuZGVyaW5nIGl0IGFnYWluLlxuICAgICAgICAgICAgICAvLyBGSVhNRTogV2hhdCBpZiB0aGUgc3VzcGVuZGVkIGxhbmVzIGFyZSBJZGxlPyBTaG91bGQgbm90IHJlc3RhcnQuXG4gICAgICAgICAgICAgIHZhciBldmVudFRpbWUgPSByZXF1ZXN0RXZlbnRUaW1lKCk7XG4gICAgICAgICAgICAgIG1hcmtSb290UGluZ2VkKHJvb3QsIHN1c3BlbmRlZExhbmVzKTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IC8vIFRoZSByZW5kZXIgaXMgc3VzcGVuZGVkLCBpdCBoYXNuJ3QgdGltZWQgb3V0LCBhbmQgdGhlcmUncyBub1xuICAgICAgICAgICAgLy8gbG93ZXIgcHJpb3JpdHkgd29yayB0byBkby4gSW5zdGVhZCBvZiBjb21taXR0aW5nIHRoZSBmYWxsYmFja1xuICAgICAgICAgICAgLy8gaW1tZWRpYXRlbHksIHdhaXQgZm9yIG1vcmUgZGF0YSB0byBhcnJpdmUuXG5cblxuICAgICAgICAgICAgcm9vdC50aW1lb3V0SGFuZGxlID0gc2NoZWR1bGVUaW1lb3V0KGNvbW1pdFJvb3QuYmluZChudWxsLCByb290LCB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycywgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyksIG1zVW50aWxUaW1lb3V0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBUaGUgd29yayBleHBpcmVkLiBDb21taXQgaW1tZWRpYXRlbHkuXG5cblxuICAgICAgICBjb21taXRSb290KHJvb3QsIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLCB3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICBjYXNlIFJvb3RTdXNwZW5kZWRXaXRoRGVsYXk6XG4gICAgICB7XG4gICAgICAgIG1hcmtSb290U3VzcGVuZGVkJDEocm9vdCwgbGFuZXMpO1xuXG4gICAgICAgIGlmIChpbmNsdWRlc09ubHlUcmFuc2l0aW9ucyhsYW5lcykpIHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGEgdHJhbnNpdGlvbiwgc28gd2Ugc2hvdWxkIGV4aXQgd2l0aG91dCBjb21taXR0aW5nIGFcbiAgICAgICAgICAvLyBwbGFjZWhvbGRlciBhbmQgd2l0aG91dCBzY2hlZHVsaW5nIGEgdGltZW91dC4gRGVsYXkgaW5kZWZpbml0ZWx5XG4gICAgICAgICAgLy8gdW50aWwgd2UgcmVjZWl2ZSBtb3JlIGRhdGEuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXNob3VsZEZvcmNlRmx1c2hGYWxsYmFja3NJbkRFVigpKSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBub3QgYSB0cmFuc2l0aW9uLCBidXQgd2UgZGlkIHRyaWdnZXIgYW4gYXZvaWRlZCBzdGF0ZS5cbiAgICAgICAgICAvLyBTY2hlZHVsZSBhIHBsYWNlaG9sZGVyIHRvIGRpc3BsYXkgYWZ0ZXIgYSBzaG9ydCBkZWxheSwgdXNpbmcgdGhlIEp1c3RcbiAgICAgICAgICAvLyBOb3RpY2VhYmxlIERpZmZlcmVuY2UuXG4gICAgICAgICAgLy8gVE9ETzogSXMgdGhlIEpORCBvcHRpbWl6YXRpb24gd29ydGggdGhlIGFkZGVkIGNvbXBsZXhpdHk/IElmIHRoaXMgaXNcbiAgICAgICAgICAvLyB0aGUgb25seSByZWFzb24gd2UgdHJhY2sgdGhlIGV2ZW50IHRpbWUsIHRoZW4gcHJvYmFibHkgbm90LlxuICAgICAgICAgIC8vIENvbnNpZGVyIHJlbW92aW5nLlxuICAgICAgICAgIHZhciBtb3N0UmVjZW50RXZlbnRUaW1lID0gZ2V0TW9zdFJlY2VudEV2ZW50VGltZShyb290LCBsYW5lcyk7XG4gICAgICAgICAgdmFyIGV2ZW50VGltZU1zID0gbW9zdFJlY2VudEV2ZW50VGltZTtcbiAgICAgICAgICB2YXIgdGltZUVsYXBzZWRNcyA9IG5vdygpIC0gZXZlbnRUaW1lTXM7XG5cbiAgICAgICAgICB2YXIgX21zVW50aWxUaW1lb3V0ID0gam5kKHRpbWVFbGFwc2VkTXMpIC0gdGltZUVsYXBzZWRNczsgLy8gRG9uJ3QgYm90aGVyIHdpdGggYSB2ZXJ5IHNob3J0IHN1c3BlbnNlIHRpbWUuXG5cblxuICAgICAgICAgIGlmIChfbXNVbnRpbFRpbWVvdXQgPiAxMCkge1xuICAgICAgICAgICAgLy8gSW5zdGVhZCBvZiBjb21taXR0aW5nIHRoZSBmYWxsYmFjayBpbW1lZGlhdGVseSwgd2FpdCBmb3IgbW9yZSBkYXRhXG4gICAgICAgICAgICAvLyB0byBhcnJpdmUuXG4gICAgICAgICAgICByb290LnRpbWVvdXRIYW5kbGUgPSBzY2hlZHVsZVRpbWVvdXQoY29tbWl0Um9vdC5iaW5kKG51bGwsIHJvb3QsIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLCB3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zKSwgX21zVW50aWxUaW1lb3V0KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfSAvLyBDb21taXQgdGhlIHBsYWNlaG9sZGVyLlxuXG5cbiAgICAgICAgY29tbWl0Um9vdChyb290LCB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycywgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSBSb290Q29tcGxldGVkOlxuICAgICAge1xuICAgICAgICAvLyBUaGUgd29yayBjb21wbGV0ZWQuIFJlYWR5IHRvIGNvbW1pdC5cbiAgICAgICAgY29tbWl0Um9vdChyb290LCB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycywgd29ya0luUHJvZ3Jlc3NUcmFuc2l0aW9ucyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgZGVmYXVsdDpcbiAgICAgIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHJvb3QgZXhpdCBzdGF0dXMuJyk7XG4gICAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaXNSZW5kZXJDb25zaXN0ZW50V2l0aEV4dGVybmFsU3RvcmVzKGZpbmlzaGVkV29yaykge1xuICAvLyBTZWFyY2ggdGhlIHJlbmRlcmVkIHRyZWUgZm9yIGV4dGVybmFsIHN0b3JlIHJlYWRzLCBhbmQgY2hlY2sgd2hldGhlciB0aGVcbiAgLy8gc3RvcmVzIHdlcmUgbXV0YXRlZCBpbiBhIGNvbmN1cnJlbnQgZXZlbnQuIEludGVudGlvbmFsbHkgdXNpbmcgYW4gaXRlcmF0aXZlXG4gIC8vIGxvb3AgaW5zdGVhZCBvZiByZWN1cnNpb24gc28gd2UgY2FuIGV4aXQgZWFybHkuXG4gIHZhciBub2RlID0gZmluaXNoZWRXb3JrO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKG5vZGUuZmxhZ3MgJiBTdG9yZUNvbnNpc3RlbmN5KSB7XG4gICAgICB2YXIgdXBkYXRlUXVldWUgPSBub2RlLnVwZGF0ZVF1ZXVlO1xuXG4gICAgICBpZiAodXBkYXRlUXVldWUgIT09IG51bGwpIHtcbiAgICAgICAgdmFyIGNoZWNrcyA9IHVwZGF0ZVF1ZXVlLnN0b3JlcztcblxuICAgICAgICBpZiAoY2hlY2tzICE9PSBudWxsKSB7XG4gICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGVja3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjaGVjayA9IGNoZWNrc1tpXTtcbiAgICAgICAgICAgIHZhciBnZXRTbmFwc2hvdCA9IGNoZWNrLmdldFNuYXBzaG90O1xuICAgICAgICAgICAgdmFyIHJlbmRlcmVkVmFsdWUgPSBjaGVjay52YWx1ZTtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgaWYgKCFvYmplY3RJcyhnZXRTbmFwc2hvdCgpLCByZW5kZXJlZFZhbHVlKSkge1xuICAgICAgICAgICAgICAgIC8vIEZvdW5kIGFuIGluY29uc2lzdGVudCBzdG9yZS5cbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIC8vIElmIGBnZXRTbmFwc2hvdGAgdGhyb3dzLCByZXR1cm4gYGZhbHNlYC4gVGhpcyB3aWxsIHNjaGVkdWxlXG4gICAgICAgICAgICAgIC8vIGEgcmUtcmVuZGVyLCBhbmQgdGhlIGVycm9yIHdpbGwgYmUgcmV0aHJvd24gZHVyaW5nIHJlbmRlci5cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBjaGlsZCA9IG5vZGUuY2hpbGQ7XG5cbiAgICBpZiAobm9kZS5zdWJ0cmVlRmxhZ3MgJiBTdG9yZUNvbnNpc3RlbmN5ICYmIGNoaWxkICE9PSBudWxsKSB7XG4gICAgICBjaGlsZC5yZXR1cm4gPSBub2RlO1xuICAgICAgbm9kZSA9IGNoaWxkO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUgPT09IGZpbmlzaGVkV29yaykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgd2hpbGUgKG5vZGUuc2libGluZyA9PT0gbnVsbCkge1xuICAgICAgaWYgKG5vZGUucmV0dXJuID09PSBudWxsIHx8IG5vZGUucmV0dXJuID09PSBmaW5pc2hlZFdvcmspIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgICB9XG5cbiAgICBub2RlLnNpYmxpbmcucmV0dXJuID0gbm9kZS5yZXR1cm47XG4gICAgbm9kZSA9IG5vZGUuc2libGluZztcbiAgfSAvLyBGbG93IGRvZXNuJ3Qga25vdyB0aGlzIGlzIHVucmVhY2hhYmxlLCBidXQgZXNsaW50IGRvZXNcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVucmVhY2hhYmxlXG5cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWFya1Jvb3RTdXNwZW5kZWQkMShyb290LCBzdXNwZW5kZWRMYW5lcykge1xuICAvLyBXaGVuIHN1c3BlbmRpbmcsIHdlIHNob3VsZCBhbHdheXMgZXhjbHVkZSBsYW5lcyB0aGF0IHdlcmUgcGluZ2VkIG9yIChtb3JlXG4gIC8vIHJhcmVseSwgc2luY2Ugd2UgdHJ5IHRvIGF2b2lkIGl0KSB1cGRhdGVkIGR1cmluZyB0aGUgcmVuZGVyIHBoYXNlLlxuICAvLyBUT0RPOiBMb2wgbWF5YmUgdGhlcmUncyBhIGJldHRlciB3YXkgdG8gZmFjdG9yIHRoaXMgYmVzaWRlcyB0aGlzXG4gIC8vIG9ibm94aW91c2x5IG5hbWVkIGZ1bmN0aW9uIDopXG4gIHN1c3BlbmRlZExhbmVzID0gcmVtb3ZlTGFuZXMoc3VzcGVuZGVkTGFuZXMsIHdvcmtJblByb2dyZXNzUm9vdFBpbmdlZExhbmVzKTtcbiAgc3VzcGVuZGVkTGFuZXMgPSByZW1vdmVMYW5lcyhzdXNwZW5kZWRMYW5lcywgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMpO1xuICBtYXJrUm9vdFN1c3BlbmRlZChyb290LCBzdXNwZW5kZWRMYW5lcyk7XG59IC8vIFRoaXMgaXMgdGhlIGVudHJ5IHBvaW50IGZvciBzeW5jaHJvbm91cyB0YXNrcyB0aGF0IGRvbid0IGdvXG4vLyB0aHJvdWdoIFNjaGVkdWxlclxuXG5cbmZ1bmN0aW9uIHBlcmZvcm1TeW5jV29ya09uUm9vdChyb290KSB7XG4gIHtcbiAgICBzeW5jTmVzdGVkVXBkYXRlRmxhZygpO1xuICB9XG5cbiAgaWYgKChleGVjdXRpb25Db250ZXh0ICYgKFJlbmRlckNvbnRleHQgfCBDb21taXRDb250ZXh0KSkgIT09IE5vQ29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2hvdWxkIG5vdCBhbHJlYWR5IGJlIHdvcmtpbmcuJyk7XG4gIH1cblxuICBmbHVzaFBhc3NpdmVFZmZlY3RzKCk7XG4gIHZhciBsYW5lcyA9IGdldE5leHRMYW5lcyhyb290LCBOb0xhbmVzKTtcblxuICBpZiAoIWluY2x1ZGVzU29tZUxhbmUobGFuZXMsIFN5bmNMYW5lKSkge1xuICAgIC8vIFRoZXJlJ3Mgbm8gcmVtYWluaW5nIHN5bmMgd29yayBsZWZ0LlxuICAgIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290LCBub3coKSk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgZXhpdFN0YXR1cyA9IHJlbmRlclJvb3RTeW5jKHJvb3QsIGxhbmVzKTtcblxuICBpZiAocm9vdC50YWcgIT09IExlZ2FjeVJvb3QgJiYgZXhpdFN0YXR1cyA9PT0gUm9vdEVycm9yZWQpIHtcbiAgICAvLyBJZiBzb21ldGhpbmcgdGhyZXcgYW4gZXJyb3IsIHRyeSByZW5kZXJpbmcgb25lIG1vcmUgdGltZS4gV2UnbGwgcmVuZGVyXG4gICAgLy8gc3luY2hyb25vdXNseSB0byBibG9jayBjb25jdXJyZW50IGRhdGEgbXV0YXRpb25zLCBhbmQgd2UnbGwgaW5jbHVkZXNcbiAgICAvLyBhbGwgcGVuZGluZyB1cGRhdGVzIGFyZSBpbmNsdWRlZC4gSWYgaXQgc3RpbGwgZmFpbHMgYWZ0ZXIgdGhlIHNlY29uZFxuICAgIC8vIGF0dGVtcHQsIHdlJ2xsIGdpdmUgdXAgYW5kIGNvbW1pdCB0aGUgcmVzdWx0aW5nIHRyZWUuXG4gICAgdmFyIGVycm9yUmV0cnlMYW5lcyA9IGdldExhbmVzVG9SZXRyeVN5bmNocm9ub3VzbHlPbkVycm9yKHJvb3QpO1xuXG4gICAgaWYgKGVycm9yUmV0cnlMYW5lcyAhPT0gTm9MYW5lcykge1xuICAgICAgbGFuZXMgPSBlcnJvclJldHJ5TGFuZXM7XG4gICAgICBleGl0U3RhdHVzID0gcmVjb3ZlckZyb21Db25jdXJyZW50RXJyb3Iocm9vdCwgZXJyb3JSZXRyeUxhbmVzKTtcbiAgICB9XG4gIH1cblxuICBpZiAoZXhpdFN0YXR1cyA9PT0gUm9vdEZhdGFsRXJyb3JlZCkge1xuICAgIHZhciBmYXRhbEVycm9yID0gd29ya0luUHJvZ3Jlc3NSb290RmF0YWxFcnJvcjtcbiAgICBwcmVwYXJlRnJlc2hTdGFjayhyb290LCBOb0xhbmVzKTtcbiAgICBtYXJrUm9vdFN1c3BlbmRlZCQxKHJvb3QsIGxhbmVzKTtcbiAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCwgbm93KCkpO1xuICAgIHRocm93IGZhdGFsRXJyb3I7XG4gIH1cblxuICBpZiAoZXhpdFN0YXR1cyA9PT0gUm9vdERpZE5vdENvbXBsZXRlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdSb290IGRpZCBub3QgY29tcGxldGUuIFRoaXMgaXMgYSBidWcgaW4gUmVhY3QuJyk7XG4gIH0gLy8gV2Ugbm93IGhhdmUgYSBjb25zaXN0ZW50IHRyZWUuIEJlY2F1c2UgdGhpcyBpcyBhIHN5bmMgcmVuZGVyLCB3ZVxuICAvLyB3aWxsIGNvbW1pdCBpdCBldmVuIGlmIHNvbWV0aGluZyBzdXNwZW5kZWQuXG5cblxuICB2YXIgZmluaXNoZWRXb3JrID0gcm9vdC5jdXJyZW50LmFsdGVybmF0ZTtcbiAgcm9vdC5maW5pc2hlZFdvcmsgPSBmaW5pc2hlZFdvcms7XG4gIHJvb3QuZmluaXNoZWRMYW5lcyA9IGxhbmVzO1xuICBjb21taXRSb290KHJvb3QsIHdvcmtJblByb2dyZXNzUm9vdFJlY292ZXJhYmxlRXJyb3JzLCB3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zKTsgLy8gQmVmb3JlIGV4aXRpbmcsIG1ha2Ugc3VyZSB0aGVyZSdzIGEgY2FsbGJhY2sgc2NoZWR1bGVkIGZvciB0aGUgbmV4dFxuICAvLyBwZW5kaW5nIGxldmVsLlxuXG4gIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290LCBub3coKSk7XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBmbHVzaFJvb3Qocm9vdCwgbGFuZXMpIHtcbiAgaWYgKGxhbmVzICE9PSBOb0xhbmVzKSB7XG4gICAgbWFya1Jvb3RFbnRhbmdsZWQocm9vdCwgbWVyZ2VMYW5lcyhsYW5lcywgU3luY0xhbmUpKTtcbiAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCwgbm93KCkpO1xuXG4gICAgaWYgKChleGVjdXRpb25Db250ZXh0ICYgKFJlbmRlckNvbnRleHQgfCBDb21taXRDb250ZXh0KSkgPT09IE5vQ29udGV4dCkge1xuICAgICAgcmVzZXRSZW5kZXJUaW1lcigpO1xuICAgICAgZmx1c2hTeW5jQ2FsbGJhY2tzKCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBiYXRjaGVkVXBkYXRlcyQxKGZuLCBhKSB7XG4gIHZhciBwcmV2RXhlY3V0aW9uQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gIGV4ZWN1dGlvbkNvbnRleHQgfD0gQmF0Y2hlZENvbnRleHQ7XG5cbiAgdHJ5IHtcbiAgICByZXR1cm4gZm4oYSk7XG4gIH0gZmluYWxseSB7XG4gICAgZXhlY3V0aW9uQ29udGV4dCA9IHByZXZFeGVjdXRpb25Db250ZXh0OyAvLyBJZiB0aGVyZSB3ZXJlIGxlZ2FjeSBzeW5jIHVwZGF0ZXMsIGZsdXNoIHRoZW0gYXQgdGhlIGVuZCBvZiB0aGUgb3V0ZXJcbiAgICAvLyBtb3N0IGJhdGNoZWRVcGRhdGVzLWxpa2UgbWV0aG9kLlxuXG4gICAgaWYgKGV4ZWN1dGlvbkNvbnRleHQgPT09IE5vQ29udGV4dCAmJiAvLyBUcmVhdCBgYWN0YCBhcyBpZiBpdCdzIGluc2lkZSBgYmF0Y2hlZFVwZGF0ZXNgLCBldmVuIGluIGxlZ2FjeSBtb2RlLlxuICAgICEoIFJlYWN0Q3VycmVudEFjdFF1ZXVlJDEuaXNCYXRjaGluZ0xlZ2FjeSkpIHtcbiAgICAgIHJlc2V0UmVuZGVyVGltZXIoKTtcbiAgICAgIGZsdXNoU3luY0NhbGxiYWNrc09ubHlJbkxlZ2FjeU1vZGUoKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGRpc2NyZXRlVXBkYXRlcyhmbiwgYSwgYiwgYywgZCkge1xuICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IGdldEN1cnJlbnRVcGRhdGVQcmlvcml0eSgpO1xuICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyQzLnRyYW5zaXRpb247XG5cbiAgdHJ5IHtcbiAgICBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyQzLnRyYW5zaXRpb24gPSBudWxsO1xuICAgIHNldEN1cnJlbnRVcGRhdGVQcmlvcml0eShEaXNjcmV0ZUV2ZW50UHJpb3JpdHkpO1xuICAgIHJldHVybiBmbihhLCBiLCBjLCBkKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBzZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkocHJldmlvdXNQcmlvcml0eSk7XG4gICAgUmVhY3RDdXJyZW50QmF0Y2hDb25maWckMy50cmFuc2l0aW9uID0gcHJldlRyYW5zaXRpb247XG5cbiAgICBpZiAoZXhlY3V0aW9uQ29udGV4dCA9PT0gTm9Db250ZXh0KSB7XG4gICAgICByZXNldFJlbmRlclRpbWVyKCk7XG4gICAgfVxuICB9XG59IC8vIE92ZXJsb2FkIHRoZSBkZWZpbml0aW9uIHRvIHRoZSB0d28gdmFsaWQgc2lnbmF0dXJlcy5cbi8vIFdhcm5pbmcsIHRoaXMgb3B0cy1vdXQgb2YgY2hlY2tpbmcgdGhlIGZ1bmN0aW9uIGJvZHkuXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcbmZ1bmN0aW9uIGZsdXNoU3luYyhmbikge1xuICAvLyBJbiBsZWdhY3kgbW9kZSwgd2UgZmx1c2ggcGVuZGluZyBwYXNzaXZlIGVmZmVjdHMgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGVcbiAgLy8gbmV4dCBldmVudCwgbm90IGF0IHRoZSBlbmQgb2YgdGhlIHByZXZpb3VzIG9uZS5cbiAgaWYgKHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzICE9PSBudWxsICYmIHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzLnRhZyA9PT0gTGVnYWN5Um9vdCAmJiAoZXhlY3V0aW9uQ29udGV4dCAmIChSZW5kZXJDb250ZXh0IHwgQ29tbWl0Q29udGV4dCkpID09PSBOb0NvbnRleHQpIHtcbiAgICBmbHVzaFBhc3NpdmVFZmZlY3RzKCk7XG4gIH1cblxuICB2YXIgcHJldkV4ZWN1dGlvbkNvbnRleHQgPSBleGVjdXRpb25Db250ZXh0O1xuICBleGVjdXRpb25Db250ZXh0IHw9IEJhdGNoZWRDb250ZXh0O1xuICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyQzLnRyYW5zaXRpb247XG4gIHZhciBwcmV2aW91c1ByaW9yaXR5ID0gZ2V0Q3VycmVudFVwZGF0ZVByaW9yaXR5KCk7XG5cbiAgdHJ5IHtcbiAgICBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyQzLnRyYW5zaXRpb24gPSBudWxsO1xuICAgIHNldEN1cnJlbnRVcGRhdGVQcmlvcml0eShEaXNjcmV0ZUV2ZW50UHJpb3JpdHkpO1xuXG4gICAgaWYgKGZuKSB7XG4gICAgICByZXR1cm4gZm4oKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgc2V0Q3VycmVudFVwZGF0ZVByaW9yaXR5KHByZXZpb3VzUHJpb3JpdHkpO1xuICAgIFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnJDMudHJhbnNpdGlvbiA9IHByZXZUcmFuc2l0aW9uO1xuICAgIGV4ZWN1dGlvbkNvbnRleHQgPSBwcmV2RXhlY3V0aW9uQ29udGV4dDsgLy8gRmx1c2ggdGhlIGltbWVkaWF0ZSBjYWxsYmFja3MgdGhhdCB3ZXJlIHNjaGVkdWxlZCBkdXJpbmcgdGhpcyBiYXRjaC5cbiAgICAvLyBOb3RlIHRoYXQgdGhpcyB3aWxsIGhhcHBlbiBldmVuIGlmIGJhdGNoZWRVcGRhdGVzIGlzIGhpZ2hlciB1cFxuICAgIC8vIHRoZSBzdGFjay5cblxuICAgIGlmICgoZXhlY3V0aW9uQ29udGV4dCAmIChSZW5kZXJDb250ZXh0IHwgQ29tbWl0Q29udGV4dCkpID09PSBOb0NvbnRleHQpIHtcbiAgICAgIGZsdXNoU3luY0NhbGxiYWNrcygpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gaXNBbHJlYWR5UmVuZGVyaW5nKCkge1xuICAvLyBVc2VkIGJ5IHRoZSByZW5kZXJlciB0byBwcmludCBhIHdhcm5pbmcgaWYgY2VydGFpbiBBUElzIGFyZSBjYWxsZWQgZnJvbVxuICAvLyB0aGUgd3JvbmcgY29udGV4dC5cbiAgcmV0dXJuICAoZXhlY3V0aW9uQ29udGV4dCAmIChSZW5kZXJDb250ZXh0IHwgQ29tbWl0Q29udGV4dCkpICE9PSBOb0NvbnRleHQ7XG59XG5mdW5jdGlvbiBwdXNoUmVuZGVyTGFuZXMoZmliZXIsIGxhbmVzKSB7XG4gIHB1c2goc3VidHJlZVJlbmRlckxhbmVzQ3Vyc29yLCBzdWJ0cmVlUmVuZGVyTGFuZXMsIGZpYmVyKTtcbiAgc3VidHJlZVJlbmRlckxhbmVzID0gbWVyZ2VMYW5lcyhzdWJ0cmVlUmVuZGVyTGFuZXMsIGxhbmVzKTtcbiAgd29ya0luUHJvZ3Jlc3NSb290SW5jbHVkZWRMYW5lcyA9IG1lcmdlTGFuZXMod29ya0luUHJvZ3Jlc3NSb290SW5jbHVkZWRMYW5lcywgbGFuZXMpO1xufVxuZnVuY3Rpb24gcG9wUmVuZGVyTGFuZXMoZmliZXIpIHtcbiAgc3VidHJlZVJlbmRlckxhbmVzID0gc3VidHJlZVJlbmRlckxhbmVzQ3Vyc29yLmN1cnJlbnQ7XG4gIHBvcChzdWJ0cmVlUmVuZGVyTGFuZXNDdXJzb3IsIGZpYmVyKTtcbn1cblxuZnVuY3Rpb24gcHJlcGFyZUZyZXNoU3RhY2socm9vdCwgbGFuZXMpIHtcbiAgcm9vdC5maW5pc2hlZFdvcmsgPSBudWxsO1xuICByb290LmZpbmlzaGVkTGFuZXMgPSBOb0xhbmVzO1xuICB2YXIgdGltZW91dEhhbmRsZSA9IHJvb3QudGltZW91dEhhbmRsZTtcblxuICBpZiAodGltZW91dEhhbmRsZSAhPT0gbm9UaW1lb3V0KSB7XG4gICAgLy8gVGhlIHJvb3QgcHJldmlvdXMgc3VzcGVuZGVkIGFuZCBzY2hlZHVsZWQgYSB0aW1lb3V0IHRvIGNvbW1pdCBhIGZhbGxiYWNrXG4gICAgLy8gc3RhdGUuIE5vdyB0aGF0IHdlIGhhdmUgYWRkaXRpb25hbCB3b3JrLCBjYW5jZWwgdGhlIHRpbWVvdXQuXG4gICAgcm9vdC50aW1lb3V0SGFuZGxlID0gbm9UaW1lb3V0OyAvLyAkRmxvd0ZpeE1lIENvbXBsYWlucyBub1RpbWVvdXQgaXMgbm90IGEgVGltZW91dElELCBkZXNwaXRlIHRoZSBjaGVjayBhYm92ZVxuXG4gICAgY2FuY2VsVGltZW91dCh0aW1lb3V0SGFuZGxlKTtcbiAgfVxuXG4gIGlmICh3b3JrSW5Qcm9ncmVzcyAhPT0gbnVsbCkge1xuICAgIHZhciBpbnRlcnJ1cHRlZFdvcmsgPSB3b3JrSW5Qcm9ncmVzcy5yZXR1cm47XG5cbiAgICB3aGlsZSAoaW50ZXJydXB0ZWRXb3JrICE9PSBudWxsKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGludGVycnVwdGVkV29yay5hbHRlcm5hdGU7XG4gICAgICB1bndpbmRJbnRlcnJ1cHRlZFdvcmsoY3VycmVudCwgaW50ZXJydXB0ZWRXb3JrKTtcbiAgICAgIGludGVycnVwdGVkV29yayA9IGludGVycnVwdGVkV29yay5yZXR1cm47XG4gICAgfVxuICB9XG5cbiAgd29ya0luUHJvZ3Jlc3NSb290ID0gcm9vdDtcbiAgdmFyIHJvb3RXb3JrSW5Qcm9ncmVzcyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKHJvb3QuY3VycmVudCwgbnVsbCk7XG4gIHdvcmtJblByb2dyZXNzID0gcm9vdFdvcmtJblByb2dyZXNzO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyA9IHN1YnRyZWVSZW5kZXJMYW5lcyA9IHdvcmtJblByb2dyZXNzUm9vdEluY2x1ZGVkTGFuZXMgPSBsYW5lcztcbiAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IFJvb3RJblByb2dyZXNzO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RGYXRhbEVycm9yID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3NSb290U2tpcHBlZExhbmVzID0gTm9MYW5lcztcbiAgd29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMgPSBOb0xhbmVzO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RQaW5nZWRMYW5lcyA9IE5vTGFuZXM7XG4gIHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMgPSBudWxsO1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZWNvdmVyYWJsZUVycm9ycyA9IG51bGw7XG4gIGZpbmlzaFF1ZXVlaW5nQ29uY3VycmVudFVwZGF0ZXMoKTtcblxuICB7XG4gICAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MuZGlzY2FyZFBlbmRpbmdXYXJuaW5ncygpO1xuICB9XG5cbiAgcmV0dXJuIHJvb3RXb3JrSW5Qcm9ncmVzcztcbn1cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3Iocm9vdCwgdGhyb3duVmFsdWUpIHtcbiAgZG8ge1xuICAgIHZhciBlcnJvcmVkV29yayA9IHdvcmtJblByb2dyZXNzO1xuXG4gICAgdHJ5IHtcbiAgICAgIC8vIFJlc2V0IG1vZHVsZS1sZXZlbCBzdGF0ZSB0aGF0IHdhcyBzZXQgZHVyaW5nIHRoZSByZW5kZXIgcGhhc2UuXG4gICAgICByZXNldENvbnRleHREZXBlbmRlbmNpZXMoKTtcbiAgICAgIHJlc2V0SG9va3NBZnRlclRocm93KCk7XG4gICAgICByZXNldEN1cnJlbnRGaWJlcigpOyAvLyBUT0RPOiBJIGZvdW5kIGFuZCBhZGRlZCB0aGlzIG1pc3NpbmcgbGluZSB3aGlsZSBpbnZlc3RpZ2F0aW5nIGFcbiAgICAgIC8vIHNlcGFyYXRlIGlzc3VlLiBXcml0ZSBhIHJlZ3Jlc3Npb24gdGVzdCB1c2luZyBzdHJpbmcgcmVmcy5cblxuICAgICAgUmVhY3RDdXJyZW50T3duZXIkMi5jdXJyZW50ID0gbnVsbDtcblxuICAgICAgaWYgKGVycm9yZWRXb3JrID09PSBudWxsIHx8IGVycm9yZWRXb3JrLnJldHVybiA9PT0gbnVsbCkge1xuICAgICAgICAvLyBFeHBlY3RlZCB0byBiZSB3b3JraW5nIG9uIGEgbm9uLXJvb3QgZmliZXIuIFRoaXMgaXMgYSBmYXRhbCBlcnJvclxuICAgICAgICAvLyBiZWNhdXNlIHRoZXJlJ3Mgbm8gYW5jZXN0b3IgdGhhdCBjYW4gaGFuZGxlIGl0OyB0aGUgcm9vdCBpc1xuICAgICAgICAvLyBzdXBwb3NlZCB0byBjYXB0dXJlIGFsbCBlcnJvcnMgdGhhdCB3ZXJlbid0IGNhdWdodCBieSBhbiBlcnJvclxuICAgICAgICAvLyBib3VuZGFyeS5cbiAgICAgICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IFJvb3RGYXRhbEVycm9yZWQ7XG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdEZhdGFsRXJyb3IgPSB0aHJvd25WYWx1ZTsgLy8gU2V0IGB3b3JrSW5Qcm9ncmVzc2AgdG8gbnVsbC4gVGhpcyByZXByZXNlbnRzIGFkdmFuY2luZyB0byB0aGUgbmV4dFxuICAgICAgICAvLyBzaWJsaW5nLCBvciB0aGUgcGFyZW50IGlmIHRoZXJlIGFyZSBubyBzaWJsaW5ncy4gQnV0IHNpbmNlIHRoZSByb290XG4gICAgICAgIC8vIGhhcyBubyBzaWJsaW5ncyBub3IgYSBwYXJlbnQsIHdlIHNldCBpdCB0byBudWxsLiBVc3VhbGx5IHRoaXMgaXNcbiAgICAgICAgLy8gaGFuZGxlZCBieSBgY29tcGxldGVVbml0T2ZXb3JrYCBvciBgdW53aW5kV29ya2AsIGJ1dCBzaW5jZSB3ZSdyZVxuICAgICAgICAvLyBpbnRlbnRpb25hbGx5IG5vdCBjYWxsaW5nIHRob3NlLCB3ZSBuZWVkIHNldCBpdCBoZXJlLlxuICAgICAgICAvLyBUT0RPOiBDb25zaWRlciBjYWxsaW5nIGB1bndpbmRXb3JrYCB0byBwb3AgdGhlIGNvbnRleHRzLlxuXG4gICAgICAgIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZW5hYmxlUHJvZmlsZXJUaW1lciAmJiBlcnJvcmVkV29yay5tb2RlICYgUHJvZmlsZU1vZGUpIHtcbiAgICAgICAgLy8gUmVjb3JkIHRoZSB0aW1lIHNwZW50IHJlbmRlcmluZyBiZWZvcmUgYW4gZXJyb3Igd2FzIHRocm93bi4gVGhpc1xuICAgICAgICAvLyBhdm9pZHMgaW5hY2N1cmF0ZSBQcm9maWxlciBkdXJhdGlvbnMgaW4gdGhlIGNhc2Ugb2YgYVxuICAgICAgICAvLyBzdXNwZW5kZWQgcmVuZGVyLlxuICAgICAgICBzdG9wUHJvZmlsZXJUaW1lcklmUnVubmluZ0FuZFJlY29yZERlbHRhKGVycm9yZWRXb3JrLCB0cnVlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGVuYWJsZVNjaGVkdWxpbmdQcm9maWxlcikge1xuICAgICAgICBtYXJrQ29tcG9uZW50UmVuZGVyU3RvcHBlZCgpO1xuXG4gICAgICAgIGlmICh0aHJvd25WYWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdGhyb3duVmFsdWUgPT09ICdvYmplY3QnICYmIHR5cGVvZiB0aHJvd25WYWx1ZS50aGVuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIHdha2VhYmxlID0gdGhyb3duVmFsdWU7XG4gICAgICAgICAgbWFya0NvbXBvbmVudFN1c3BlbmRlZChlcnJvcmVkV29yaywgd2FrZWFibGUsIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYXJrQ29tcG9uZW50RXJyb3JlZChlcnJvcmVkV29yaywgdGhyb3duVmFsdWUsIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aHJvd0V4Y2VwdGlvbihyb290LCBlcnJvcmVkV29yay5yZXR1cm4sIGVycm9yZWRXb3JrLCB0aHJvd25WYWx1ZSwgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMpO1xuICAgICAgY29tcGxldGVVbml0T2ZXb3JrKGVycm9yZWRXb3JrKTtcbiAgICB9IGNhdGNoICh5ZXRBbm90aGVyVGhyb3duVmFsdWUpIHtcbiAgICAgIC8vIFNvbWV0aGluZyBpbiB0aGUgcmV0dXJuIHBhdGggYWxzbyB0aHJldy5cbiAgICAgIHRocm93blZhbHVlID0geWV0QW5vdGhlclRocm93blZhbHVlO1xuXG4gICAgICBpZiAod29ya0luUHJvZ3Jlc3MgPT09IGVycm9yZWRXb3JrICYmIGVycm9yZWRXb3JrICE9PSBudWxsKSB7XG4gICAgICAgIC8vIElmIHRoaXMgYm91bmRhcnkgaGFzIGFscmVhZHkgZXJyb3JlZCwgdGhlbiB3ZSBoYWQgdHJvdWJsZSBwcm9jZXNzaW5nXG4gICAgICAgIC8vIHRoZSBlcnJvci4gQnViYmxlIGl0IHRvIHRoZSBuZXh0IGJvdW5kYXJ5LlxuICAgICAgICBlcnJvcmVkV29yayA9IGVycm9yZWRXb3JrLnJldHVybjtcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MgPSBlcnJvcmVkV29yaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVycm9yZWRXb3JrID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgICB9XG5cbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gLy8gUmV0dXJuIHRvIHRoZSBub3JtYWwgd29yayBsb29wLlxuXG5cbiAgICByZXR1cm47XG4gIH0gd2hpbGUgKHRydWUpO1xufVxuXG5mdW5jdGlvbiBwdXNoRGlzcGF0Y2hlcigpIHtcbiAgdmFyIHByZXZEaXNwYXRjaGVyID0gUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQyLmN1cnJlbnQ7XG4gIFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMi5jdXJyZW50ID0gQ29udGV4dE9ubHlEaXNwYXRjaGVyO1xuXG4gIGlmIChwcmV2RGlzcGF0Y2hlciA9PT0gbnVsbCkge1xuICAgIC8vIFRoZSBSZWFjdCBpc29tb3JwaGljIHBhY2thZ2UgZG9lcyBub3QgaW5jbHVkZSBhIGRlZmF1bHQgZGlzcGF0Y2hlci5cbiAgICAvLyBJbnN0ZWFkIHRoZSBmaXJzdCByZW5kZXJlciB3aWxsIGxhemlseSBhdHRhY2ggb25lLCBpbiBvcmRlciB0byBnaXZlXG4gICAgLy8gbmljZXIgZXJyb3IgbWVzc2FnZXMuXG4gICAgcmV0dXJuIENvbnRleHRPbmx5RGlzcGF0Y2hlcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJldkRpc3BhdGNoZXI7XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9wRGlzcGF0Y2hlcihwcmV2RGlzcGF0Y2hlcikge1xuICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDIuY3VycmVudCA9IHByZXZEaXNwYXRjaGVyO1xufVxuXG5mdW5jdGlvbiBtYXJrQ29tbWl0VGltZU9mRmFsbGJhY2soKSB7XG4gIGdsb2JhbE1vc3RSZWNlbnRGYWxsYmFja1RpbWUgPSBub3coKTtcbn1cbmZ1bmN0aW9uIG1hcmtTa2lwcGVkVXBkYXRlTGFuZXMobGFuZSkge1xuICB3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMgPSBtZXJnZUxhbmVzKGxhbmUsIHdvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyk7XG59XG5mdW5jdGlvbiByZW5kZXJEaWRTdXNwZW5kKCkge1xuICBpZiAod29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9PT0gUm9vdEluUHJvZ3Jlc3MpIHtcbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gUm9vdFN1c3BlbmRlZDtcbiAgfVxufVxuZnVuY3Rpb24gcmVuZGVyRGlkU3VzcGVuZERlbGF5SWZQb3NzaWJsZSgpIHtcbiAgaWYgKHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPT09IFJvb3RJblByb2dyZXNzIHx8IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPT09IFJvb3RTdXNwZW5kZWQgfHwgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9PT0gUm9vdEVycm9yZWQpIHtcbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID0gUm9vdFN1c3BlbmRlZFdpdGhEZWxheTtcbiAgfSAvLyBDaGVjayBpZiB0aGVyZSBhcmUgdXBkYXRlcyB0aGF0IHdlIHNraXBwZWQgdHJlZSB0aGF0IG1pZ2h0IGhhdmUgdW5ibG9ja2VkXG4gIC8vIHRoaXMgcmVuZGVyLlxuXG5cbiAgaWYgKHdvcmtJblByb2dyZXNzUm9vdCAhPT0gbnVsbCAmJiAoaW5jbHVkZXNOb25JZGxlV29yayh3b3JrSW5Qcm9ncmVzc1Jvb3RTa2lwcGVkTGFuZXMpIHx8IGluY2x1ZGVzTm9uSWRsZVdvcmsod29ya0luUHJvZ3Jlc3NSb290SW50ZXJsZWF2ZWRVcGRhdGVkTGFuZXMpKSkge1xuICAgIC8vIE1hcmsgdGhlIGN1cnJlbnQgcmVuZGVyIGFzIHN1c3BlbmRlZCBzbyB0aGF0IHdlIHN3aXRjaCB0byB3b3JraW5nIG9uXG4gICAgLy8gdGhlIHVwZGF0ZXMgdGhhdCB3ZXJlIHNraXBwZWQuIFVzdWFsbHkgd2Ugb25seSBzdXNwZW5kIGF0IHRoZSBlbmQgb2ZcbiAgICAvLyB0aGUgcmVuZGVyIHBoYXNlLlxuICAgIC8vIFRPRE86IFdlIHNob3VsZCBwcm9iYWJseSBhbHdheXMgbWFyayB0aGUgcm9vdCBhcyBzdXNwZW5kZWQgaW1tZWRpYXRlbHlcbiAgICAvLyAoaW5zaWRlIHRoaXMgZnVuY3Rpb24pLCBzaW5jZSBieSBzdXNwZW5kaW5nIGF0IHRoZSBlbmQgb2YgdGhlIHJlbmRlclxuICAgIC8vIHBoYXNlIGludHJvZHVjZXMgYSBwb3RlbnRpYWwgbWlzdGFrZSB3aGVyZSB3ZSBzdXNwZW5kIGxhbmVzIHRoYXQgd2VyZVxuICAgIC8vIHBpbmdlZCBvciB1cGRhdGVkIHdoaWxlIHdlIHdlcmUgcmVuZGVyaW5nLlxuICAgIG1hcmtSb290U3VzcGVuZGVkJDEod29ya0luUHJvZ3Jlc3NSb290LCB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyk7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlbmRlckRpZEVycm9yKGVycm9yKSB7XG4gIGlmICh3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzICE9PSBSb290U3VzcGVuZGVkV2l0aERlbGF5KSB7XG4gICAgd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cyA9IFJvb3RFcnJvcmVkO1xuICB9XG5cbiAgaWYgKHdvcmtJblByb2dyZXNzUm9vdENvbmN1cnJlbnRFcnJvcnMgPT09IG51bGwpIHtcbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzID0gW2Vycm9yXTtcbiAgfSBlbHNlIHtcbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzLnB1c2goZXJyb3IpO1xuICB9XG59IC8vIENhbGxlZCBkdXJpbmcgcmVuZGVyIHRvIGRldGVybWluZSBpZiBhbnl0aGluZyBoYXMgc3VzcGVuZGVkLlxuLy8gUmV0dXJucyBmYWxzZSBpZiB3ZSdyZSBub3Qgc3VyZS5cblxuZnVuY3Rpb24gcmVuZGVySGFzTm90U3VzcGVuZGVkWWV0KCkge1xuICAvLyBJZiBzb21ldGhpbmcgZXJyb3JlZCBvciBjb21wbGV0ZWQsIHdlIGNhbid0IHJlYWxseSBiZSBzdXJlLFxuICAvLyBzbyB0aG9zZSBhcmUgZmFsc2UuXG4gIHJldHVybiB3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID09PSBSb290SW5Qcm9ncmVzcztcbn1cblxuZnVuY3Rpb24gcmVuZGVyUm9vdFN5bmMocm9vdCwgbGFuZXMpIHtcbiAgdmFyIHByZXZFeGVjdXRpb25Db250ZXh0ID0gZXhlY3V0aW9uQ29udGV4dDtcbiAgZXhlY3V0aW9uQ29udGV4dCB8PSBSZW5kZXJDb250ZXh0O1xuICB2YXIgcHJldkRpc3BhdGNoZXIgPSBwdXNoRGlzcGF0Y2hlcigpOyAvLyBJZiB0aGUgcm9vdCBvciBsYW5lcyBoYXZlIGNoYW5nZWQsIHRocm93IG91dCB0aGUgZXhpc3Rpbmcgc3RhY2tcbiAgLy8gYW5kIHByZXBhcmUgYSBmcmVzaCBvbmUuIE90aGVyd2lzZSB3ZSdsbCBjb250aW51ZSB3aGVyZSB3ZSBsZWZ0IG9mZi5cblxuICBpZiAod29ya0luUHJvZ3Jlc3NSb290ICE9PSByb290IHx8IHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzICE9PSBsYW5lcykge1xuICAgIHtcbiAgICAgIGlmIChpc0RldlRvb2xzUHJlc2VudCkge1xuICAgICAgICB2YXIgbWVtb2l6ZWRVcGRhdGVycyA9IHJvb3QubWVtb2l6ZWRVcGRhdGVycztcblxuICAgICAgICBpZiAobWVtb2l6ZWRVcGRhdGVycy5zaXplID4gMCkge1xuICAgICAgICAgIHJlc3RvcmVQZW5kaW5nVXBkYXRlcnMocm9vdCwgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMpO1xuICAgICAgICAgIG1lbW9pemVkVXBkYXRlcnMuY2xlYXIoKTtcbiAgICAgICAgfSAvLyBBdCB0aGlzIHBvaW50LCBtb3ZlIEZpYmVycyB0aGF0IHNjaGVkdWxlZCB0aGUgdXBjb21pbmcgd29yayBmcm9tIHRoZSBNYXAgdG8gdGhlIFNldC5cbiAgICAgICAgLy8gSWYgd2UgYmFpbG91dCBvbiB0aGlzIHdvcmssIHdlJ2xsIG1vdmUgdGhlbSBiYWNrIChsaWtlIGFib3ZlKS5cbiAgICAgICAgLy8gSXQncyBpbXBvcnRhbnQgdG8gbW92ZSB0aGVtIG5vdyBpbiBjYXNlIHRoZSB3b3JrIHNwYXducyBtb3JlIHdvcmsgYXQgdGhlIHNhbWUgcHJpb3JpdHkgd2l0aCBkaWZmZXJlbnQgdXBkYXRlcnMuXG4gICAgICAgIC8vIFRoYXQgd2F5IHdlIGNhbiBrZWVwIHRoZSBjdXJyZW50IHVwZGF0ZSBhbmQgZnV0dXJlIHVwZGF0ZXMgc2VwYXJhdGUuXG5cblxuICAgICAgICBtb3ZlUGVuZGluZ0ZpYmVyc1RvTWVtb2l6ZWQocm9vdCwgbGFuZXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHdvcmtJblByb2dyZXNzVHJhbnNpdGlvbnMgPSBnZXRUcmFuc2l0aW9uc0ZvckxhbmVzKCk7XG4gICAgcHJlcGFyZUZyZXNoU3RhY2socm9vdCwgbGFuZXMpO1xuICB9XG5cbiAge1xuICAgIG1hcmtSZW5kZXJTdGFydGVkKGxhbmVzKTtcbiAgfVxuXG4gIGRvIHtcbiAgICB0cnkge1xuICAgICAgd29ya0xvb3BTeW5jKCk7XG4gICAgICBicmVhaztcbiAgICB9IGNhdGNoICh0aHJvd25WYWx1ZSkge1xuICAgICAgaGFuZGxlRXJyb3Iocm9vdCwgdGhyb3duVmFsdWUpO1xuICAgIH1cbiAgfSB3aGlsZSAodHJ1ZSk7XG5cbiAgcmVzZXRDb250ZXh0RGVwZW5kZW5jaWVzKCk7XG4gIGV4ZWN1dGlvbkNvbnRleHQgPSBwcmV2RXhlY3V0aW9uQ29udGV4dDtcbiAgcG9wRGlzcGF0Y2hlcihwcmV2RGlzcGF0Y2hlcik7XG5cbiAgaWYgKHdvcmtJblByb2dyZXNzICE9PSBudWxsKSB7XG4gICAgLy8gVGhpcyBpcyBhIHN5bmMgcmVuZGVyLCBzbyB3ZSBzaG91bGQgaGF2ZSBmaW5pc2hlZCB0aGUgd2hvbGUgdHJlZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjb21taXQgYW4gaW5jb21wbGV0ZSByb290LiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSAnICsgJ2J1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gIH1cblxuICB7XG4gICAgbWFya1JlbmRlclN0b3BwZWQoKTtcbiAgfSAvLyBTZXQgdGhpcyB0byBudWxsIHRvIGluZGljYXRlIHRoZXJlJ3Mgbm8gaW4tcHJvZ3Jlc3MgcmVuZGVyLlxuXG5cbiAgd29ya0luUHJvZ3Jlc3NSb290ID0gbnVsbDtcbiAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSBOb0xhbmVzO1xuICByZXR1cm4gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cztcbn0gLy8gVGhlIHdvcmsgbG9vcCBpcyBhbiBleHRyZW1lbHkgaG90IHBhdGguIFRlbGwgQ2xvc3VyZSBub3QgdG8gaW5saW5lIGl0LlxuXG4vKiogQG5vaW5saW5lICovXG5cblxuZnVuY3Rpb24gd29ya0xvb3BTeW5jKCkge1xuICAvLyBBbHJlYWR5IHRpbWVkIG91dCwgc28gcGVyZm9ybSB3b3JrIHdpdGhvdXQgY2hlY2tpbmcgaWYgd2UgbmVlZCB0byB5aWVsZC5cbiAgd2hpbGUgKHdvcmtJblByb2dyZXNzICE9PSBudWxsKSB7XG4gICAgcGVyZm9ybVVuaXRPZldvcmsod29ya0luUHJvZ3Jlc3MpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlclJvb3RDb25jdXJyZW50KHJvb3QsIGxhbmVzKSB7XG4gIHZhciBwcmV2RXhlY3V0aW9uQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gIGV4ZWN1dGlvbkNvbnRleHQgfD0gUmVuZGVyQ29udGV4dDtcbiAgdmFyIHByZXZEaXNwYXRjaGVyID0gcHVzaERpc3BhdGNoZXIoKTsgLy8gSWYgdGhlIHJvb3Qgb3IgbGFuZXMgaGF2ZSBjaGFuZ2VkLCB0aHJvdyBvdXQgdGhlIGV4aXN0aW5nIHN0YWNrXG4gIC8vIGFuZCBwcmVwYXJlIGEgZnJlc2ggb25lLiBPdGhlcndpc2Ugd2UnbGwgY29udGludWUgd2hlcmUgd2UgbGVmdCBvZmYuXG5cbiAgaWYgKHdvcmtJblByb2dyZXNzUm9vdCAhPT0gcm9vdCB8fCB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyAhPT0gbGFuZXMpIHtcbiAgICB7XG4gICAgICBpZiAoaXNEZXZUb29sc1ByZXNlbnQpIHtcbiAgICAgICAgdmFyIG1lbW9pemVkVXBkYXRlcnMgPSByb290Lm1lbW9pemVkVXBkYXRlcnM7XG5cbiAgICAgICAgaWYgKG1lbW9pemVkVXBkYXRlcnMuc2l6ZSA+IDApIHtcbiAgICAgICAgICByZXN0b3JlUGVuZGluZ1VwZGF0ZXJzKHJvb3QsIHdvcmtJblByb2dyZXNzUm9vdFJlbmRlckxhbmVzKTtcbiAgICAgICAgICBtZW1vaXplZFVwZGF0ZXJzLmNsZWFyKCk7XG4gICAgICAgIH0gLy8gQXQgdGhpcyBwb2ludCwgbW92ZSBGaWJlcnMgdGhhdCBzY2hlZHVsZWQgdGhlIHVwY29taW5nIHdvcmsgZnJvbSB0aGUgTWFwIHRvIHRoZSBTZXQuXG4gICAgICAgIC8vIElmIHdlIGJhaWxvdXQgb24gdGhpcyB3b3JrLCB3ZSdsbCBtb3ZlIHRoZW0gYmFjayAobGlrZSBhYm92ZSkuXG4gICAgICAgIC8vIEl0J3MgaW1wb3J0YW50IHRvIG1vdmUgdGhlbSBub3cgaW4gY2FzZSB0aGUgd29yayBzcGF3bnMgbW9yZSB3b3JrIGF0IHRoZSBzYW1lIHByaW9yaXR5IHdpdGggZGlmZmVyZW50IHVwZGF0ZXJzLlxuICAgICAgICAvLyBUaGF0IHdheSB3ZSBjYW4ga2VlcCB0aGUgY3VycmVudCB1cGRhdGUgYW5kIGZ1dHVyZSB1cGRhdGVzIHNlcGFyYXRlLlxuXG5cbiAgICAgICAgbW92ZVBlbmRpbmdGaWJlcnNUb01lbW9pemVkKHJvb3QsIGxhbmVzKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zID0gZ2V0VHJhbnNpdGlvbnNGb3JMYW5lcygpO1xuICAgIHJlc2V0UmVuZGVyVGltZXIoKTtcbiAgICBwcmVwYXJlRnJlc2hTdGFjayhyb290LCBsYW5lcyk7XG4gIH1cblxuICB7XG4gICAgbWFya1JlbmRlclN0YXJ0ZWQobGFuZXMpO1xuICB9XG5cbiAgZG8ge1xuICAgIHRyeSB7XG4gICAgICB3b3JrTG9vcENvbmN1cnJlbnQoKTtcbiAgICAgIGJyZWFrO1xuICAgIH0gY2F0Y2ggKHRocm93blZhbHVlKSB7XG4gICAgICBoYW5kbGVFcnJvcihyb290LCB0aHJvd25WYWx1ZSk7XG4gICAgfVxuICB9IHdoaWxlICh0cnVlKTtcblxuICByZXNldENvbnRleHREZXBlbmRlbmNpZXMoKTtcbiAgcG9wRGlzcGF0Y2hlcihwcmV2RGlzcGF0Y2hlcik7XG4gIGV4ZWN1dGlvbkNvbnRleHQgPSBwcmV2RXhlY3V0aW9uQ29udGV4dDtcblxuXG4gIGlmICh3b3JrSW5Qcm9ncmVzcyAhPT0gbnVsbCkge1xuICAgIC8vIFN0aWxsIHdvcmsgcmVtYWluaW5nLlxuICAgIHtcbiAgICAgIG1hcmtSZW5kZXJZaWVsZGVkKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFJvb3RJblByb2dyZXNzO1xuICB9IGVsc2Uge1xuICAgIC8vIENvbXBsZXRlZCB0aGUgdHJlZS5cbiAgICB7XG4gICAgICBtYXJrUmVuZGVyU3RvcHBlZCgpO1xuICAgIH0gLy8gU2V0IHRoaXMgdG8gbnVsbCB0byBpbmRpY2F0ZSB0aGVyZSdzIG5vIGluLXByb2dyZXNzIHJlbmRlci5cblxuXG4gICAgd29ya0luUHJvZ3Jlc3NSb290ID0gbnVsbDtcbiAgICB3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyA9IE5vTGFuZXM7IC8vIFJldHVybiB0aGUgZmluYWwgZXhpdCBzdGF0dXMuXG5cbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3NSb290RXhpdFN0YXR1cztcbiAgfVxufVxuLyoqIEBub2lubGluZSAqL1xuXG5cbmZ1bmN0aW9uIHdvcmtMb29wQ29uY3VycmVudCgpIHtcbiAgLy8gUGVyZm9ybSB3b3JrIHVudGlsIFNjaGVkdWxlciBhc2tzIHVzIHRvIHlpZWxkXG4gIHdoaWxlICh3b3JrSW5Qcm9ncmVzcyAhPT0gbnVsbCAmJiAhc2hvdWxkWWllbGQoKSkge1xuICAgIHBlcmZvcm1Vbml0T2ZXb3JrKHdvcmtJblByb2dyZXNzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwZXJmb3JtVW5pdE9mV29yayh1bml0T2ZXb3JrKSB7XG4gIC8vIFRoZSBjdXJyZW50LCBmbHVzaGVkLCBzdGF0ZSBvZiB0aGlzIGZpYmVyIGlzIHRoZSBhbHRlcm5hdGUuIElkZWFsbHlcbiAgLy8gbm90aGluZyBzaG91bGQgcmVseSBvbiB0aGlzLCBidXQgcmVseWluZyBvbiBpdCBoZXJlIG1lYW5zIHRoYXQgd2UgZG9uJ3RcbiAgLy8gbmVlZCBhbiBhZGRpdGlvbmFsIGZpZWxkIG9uIHRoZSB3b3JrIGluIHByb2dyZXNzLlxuICB2YXIgY3VycmVudCA9IHVuaXRPZldvcmsuYWx0ZXJuYXRlO1xuICBzZXRDdXJyZW50RmliZXIodW5pdE9mV29yayk7XG4gIHZhciBuZXh0O1xuXG4gIGlmICggKHVuaXRPZldvcmsubW9kZSAmIFByb2ZpbGVNb2RlKSAhPT0gTm9Nb2RlKSB7XG4gICAgc3RhcnRQcm9maWxlclRpbWVyKHVuaXRPZldvcmspO1xuICAgIG5leHQgPSBiZWdpbldvcmskMShjdXJyZW50LCB1bml0T2ZXb3JrLCBzdWJ0cmVlUmVuZGVyTGFuZXMpO1xuICAgIHN0b3BQcm9maWxlclRpbWVySWZSdW5uaW5nQW5kUmVjb3JkRGVsdGEodW5pdE9mV29yaywgdHJ1ZSk7XG4gIH0gZWxzZSB7XG4gICAgbmV4dCA9IGJlZ2luV29yayQxKGN1cnJlbnQsIHVuaXRPZldvcmssIHN1YnRyZWVSZW5kZXJMYW5lcyk7XG4gIH1cblxuICByZXNldEN1cnJlbnRGaWJlcigpO1xuICB1bml0T2ZXb3JrLm1lbW9pemVkUHJvcHMgPSB1bml0T2ZXb3JrLnBlbmRpbmdQcm9wcztcblxuICBpZiAobmV4dCA9PT0gbnVsbCkge1xuICAgIC8vIElmIHRoaXMgZG9lc24ndCBzcGF3biBuZXcgd29yaywgY29tcGxldGUgdGhlIGN1cnJlbnQgd29yay5cbiAgICBjb21wbGV0ZVVuaXRPZldvcmsodW5pdE9mV29yayk7XG4gIH0gZWxzZSB7XG4gICAgd29ya0luUHJvZ3Jlc3MgPSBuZXh0O1xuICB9XG5cbiAgUmVhY3RDdXJyZW50T3duZXIkMi5jdXJyZW50ID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gY29tcGxldGVVbml0T2ZXb3JrKHVuaXRPZldvcmspIHtcbiAgLy8gQXR0ZW1wdCB0byBjb21wbGV0ZSB0aGUgY3VycmVudCB1bml0IG9mIHdvcmssIHRoZW4gbW92ZSB0byB0aGUgbmV4dFxuICAvLyBzaWJsaW5nLiBJZiB0aGVyZSBhcmUgbm8gbW9yZSBzaWJsaW5ncywgcmV0dXJuIHRvIHRoZSBwYXJlbnQgZmliZXIuXG4gIHZhciBjb21wbGV0ZWRXb3JrID0gdW5pdE9mV29yaztcblxuICBkbyB7XG4gICAgLy8gVGhlIGN1cnJlbnQsIGZsdXNoZWQsIHN0YXRlIG9mIHRoaXMgZmliZXIgaXMgdGhlIGFsdGVybmF0ZS4gSWRlYWxseVxuICAgIC8vIG5vdGhpbmcgc2hvdWxkIHJlbHkgb24gdGhpcywgYnV0IHJlbHlpbmcgb24gaXQgaGVyZSBtZWFucyB0aGF0IHdlIGRvbid0XG4gICAgLy8gbmVlZCBhbiBhZGRpdGlvbmFsIGZpZWxkIG9uIHRoZSB3b3JrIGluIHByb2dyZXNzLlxuICAgIHZhciBjdXJyZW50ID0gY29tcGxldGVkV29yay5hbHRlcm5hdGU7XG4gICAgdmFyIHJldHVybkZpYmVyID0gY29tcGxldGVkV29yay5yZXR1cm47IC8vIENoZWNrIGlmIHRoZSB3b3JrIGNvbXBsZXRlZCBvciBpZiBzb21ldGhpbmcgdGhyZXcuXG5cbiAgICBpZiAoKGNvbXBsZXRlZFdvcmsuZmxhZ3MgJiBJbmNvbXBsZXRlKSA9PT0gTm9GbGFncykge1xuICAgICAgc2V0Q3VycmVudEZpYmVyKGNvbXBsZXRlZFdvcmspO1xuICAgICAgdmFyIG5leHQgPSB2b2lkIDA7XG5cbiAgICAgIGlmICggKGNvbXBsZXRlZFdvcmsubW9kZSAmIFByb2ZpbGVNb2RlKSA9PT0gTm9Nb2RlKSB7XG4gICAgICAgIG5leHQgPSBjb21wbGV0ZVdvcmsoY3VycmVudCwgY29tcGxldGVkV29yaywgc3VidHJlZVJlbmRlckxhbmVzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXJ0UHJvZmlsZXJUaW1lcihjb21wbGV0ZWRXb3JrKTtcbiAgICAgICAgbmV4dCA9IGNvbXBsZXRlV29yayhjdXJyZW50LCBjb21wbGV0ZWRXb3JrLCBzdWJ0cmVlUmVuZGVyTGFuZXMpOyAvLyBVcGRhdGUgcmVuZGVyIGR1cmF0aW9uIGFzc3VtaW5nIHdlIGRpZG4ndCBlcnJvci5cblxuICAgICAgICBzdG9wUHJvZmlsZXJUaW1lcklmUnVubmluZ0FuZFJlY29yZERlbHRhKGNvbXBsZXRlZFdvcmssIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgcmVzZXRDdXJyZW50RmliZXIoKTtcblxuICAgICAgaWYgKG5leHQgIT09IG51bGwpIHtcbiAgICAgICAgLy8gQ29tcGxldGluZyB0aGlzIGZpYmVyIHNwYXduZWQgbmV3IHdvcmsuIFdvcmsgb24gdGhhdCBuZXh0LlxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IG5leHQ7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyBmaWJlciBkaWQgbm90IGNvbXBsZXRlIGJlY2F1c2Ugc29tZXRoaW5nIHRocmV3LiBQb3AgdmFsdWVzIG9mZlxuICAgICAgLy8gdGhlIHN0YWNrIHdpdGhvdXQgZW50ZXJpbmcgdGhlIGNvbXBsZXRlIHBoYXNlLiBJZiB0aGlzIGlzIGEgYm91bmRhcnksXG4gICAgICAvLyBjYXB0dXJlIHZhbHVlcyBpZiBwb3NzaWJsZS5cbiAgICAgIHZhciBfbmV4dCA9IHVud2luZFdvcmsoY3VycmVudCwgY29tcGxldGVkV29yayk7IC8vIEJlY2F1c2UgdGhpcyBmaWJlciBkaWQgbm90IGNvbXBsZXRlLCBkb24ndCByZXNldCBpdHMgbGFuZXMuXG5cblxuICAgICAgaWYgKF9uZXh0ICE9PSBudWxsKSB7XG4gICAgICAgIC8vIElmIGNvbXBsZXRpbmcgdGhpcyB3b3JrIHNwYXduZWQgbmV3IHdvcmssIGRvIHRoYXQgbmV4dC4gV2UnbGwgY29tZVxuICAgICAgICAvLyBiYWNrIGhlcmUgYWdhaW4uXG4gICAgICAgIC8vIFNpbmNlIHdlJ3JlIHJlc3RhcnRpbmcsIHJlbW92ZSBhbnl0aGluZyB0aGF0IGlzIG5vdCBhIGhvc3QgZWZmZWN0XG4gICAgICAgIC8vIGZyb20gdGhlIGVmZmVjdCB0YWcuXG4gICAgICAgIF9uZXh0LmZsYWdzICY9IEhvc3RFZmZlY3RNYXNrO1xuICAgICAgICB3b3JrSW5Qcm9ncmVzcyA9IF9uZXh0O1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICggKGNvbXBsZXRlZFdvcmsubW9kZSAmIFByb2ZpbGVNb2RlKSAhPT0gTm9Nb2RlKSB7XG4gICAgICAgIC8vIFJlY29yZCB0aGUgcmVuZGVyIGR1cmF0aW9uIGZvciB0aGUgZmliZXIgdGhhdCBlcnJvcmVkLlxuICAgICAgICBzdG9wUHJvZmlsZXJUaW1lcklmUnVubmluZ0FuZFJlY29yZERlbHRhKGNvbXBsZXRlZFdvcmssIGZhbHNlKTsgLy8gSW5jbHVkZSB0aGUgdGltZSBzcGVudCB3b3JraW5nIG9uIGZhaWxlZCBjaGlsZHJlbiBiZWZvcmUgY29udGludWluZy5cblxuICAgICAgICB2YXIgYWN0dWFsRHVyYXRpb24gPSBjb21wbGV0ZWRXb3JrLmFjdHVhbER1cmF0aW9uO1xuICAgICAgICB2YXIgY2hpbGQgPSBjb21wbGV0ZWRXb3JrLmNoaWxkO1xuXG4gICAgICAgIHdoaWxlIChjaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICAgIGFjdHVhbER1cmF0aW9uICs9IGNoaWxkLmFjdHVhbER1cmF0aW9uO1xuICAgICAgICAgIGNoaWxkID0gY2hpbGQuc2libGluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbXBsZXRlZFdvcmsuYWN0dWFsRHVyYXRpb24gPSBhY3R1YWxEdXJhdGlvbjtcbiAgICAgIH1cblxuICAgICAgaWYgKHJldHVybkZpYmVyICE9PSBudWxsKSB7XG4gICAgICAgIC8vIE1hcmsgdGhlIHBhcmVudCBmaWJlciBhcyBpbmNvbXBsZXRlIGFuZCBjbGVhciBpdHMgc3VidHJlZSBmbGFncy5cbiAgICAgICAgcmV0dXJuRmliZXIuZmxhZ3MgfD0gSW5jb21wbGV0ZTtcbiAgICAgICAgcmV0dXJuRmliZXIuc3VidHJlZUZsYWdzID0gTm9GbGFncztcbiAgICAgICAgcmV0dXJuRmliZXIuZGVsZXRpb25zID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdlJ3ZlIHVud291bmQgYWxsIHRoZSB3YXkgdG8gdGhlIHJvb3QuXG4gICAgICAgIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSBSb290RGlkTm90Q29tcGxldGU7XG4gICAgICAgIHdvcmtJblByb2dyZXNzID0gbnVsbDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzaWJsaW5nRmliZXIgPSBjb21wbGV0ZWRXb3JrLnNpYmxpbmc7XG5cbiAgICBpZiAoc2libGluZ0ZpYmVyICE9PSBudWxsKSB7XG4gICAgICAvLyBJZiB0aGVyZSBpcyBtb3JlIHdvcmsgdG8gZG8gaW4gdGhpcyByZXR1cm5GaWJlciwgZG8gdGhhdCBuZXh0LlxuICAgICAgd29ya0luUHJvZ3Jlc3MgPSBzaWJsaW5nRmliZXI7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBPdGhlcndpc2UsIHJldHVybiB0byB0aGUgcGFyZW50XG5cblxuICAgIGNvbXBsZXRlZFdvcmsgPSByZXR1cm5GaWJlcjsgLy8gVXBkYXRlIHRoZSBuZXh0IHRoaW5nIHdlJ3JlIHdvcmtpbmcgb24gaW4gY2FzZSBzb21ldGhpbmcgdGhyb3dzLlxuXG4gICAgd29ya0luUHJvZ3Jlc3MgPSBjb21wbGV0ZWRXb3JrO1xuICB9IHdoaWxlIChjb21wbGV0ZWRXb3JrICE9PSBudWxsKTsgLy8gV2UndmUgcmVhY2hlZCB0aGUgcm9vdC5cblxuXG4gIGlmICh3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID09PSBSb290SW5Qcm9ncmVzcykge1xuICAgIHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPSBSb290Q29tcGxldGVkO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNvbW1pdFJvb3Qocm9vdCwgcmVjb3ZlcmFibGVFcnJvcnMsIHRyYW5zaXRpb25zKSB7XG4gIC8vIFRPRE86IFRoaXMgbm8gbG9uZ2VyIG1ha2VzIGFueSBzZW5zZS4gV2UgYWxyZWFkeSB3cmFwIHRoZSBtdXRhdGlvbiBhbmRcbiAgLy8gbGF5b3V0IHBoYXNlcy4gU2hvdWxkIGJlIGFibGUgdG8gcmVtb3ZlLlxuICB2YXIgcHJldmlvdXNVcGRhdGVMYW5lUHJpb3JpdHkgPSBnZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkoKTtcbiAgdmFyIHByZXZUcmFuc2l0aW9uID0gUmVhY3RDdXJyZW50QmF0Y2hDb25maWckMy50cmFuc2l0aW9uO1xuXG4gIHRyeSB7XG4gICAgUmVhY3RDdXJyZW50QmF0Y2hDb25maWckMy50cmFuc2l0aW9uID0gbnVsbDtcbiAgICBzZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkoRGlzY3JldGVFdmVudFByaW9yaXR5KTtcbiAgICBjb21taXRSb290SW1wbChyb290LCByZWNvdmVyYWJsZUVycm9ycywgdHJhbnNpdGlvbnMsIHByZXZpb3VzVXBkYXRlTGFuZVByaW9yaXR5KTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyQzLnRyYW5zaXRpb24gPSBwcmV2VHJhbnNpdGlvbjtcbiAgICBzZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkocHJldmlvdXNVcGRhdGVMYW5lUHJpb3JpdHkpO1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGNvbW1pdFJvb3RJbXBsKHJvb3QsIHJlY292ZXJhYmxlRXJyb3JzLCB0cmFuc2l0aW9ucywgcmVuZGVyUHJpb3JpdHlMZXZlbCkge1xuICBkbyB7XG4gICAgLy8gYGZsdXNoUGFzc2l2ZUVmZmVjdHNgIHdpbGwgY2FsbCBgZmx1c2hTeW5jVXBkYXRlUXVldWVgIGF0IHRoZSBlbmQsIHdoaWNoXG4gICAgLy8gbWVhbnMgYGZsdXNoUGFzc2l2ZUVmZmVjdHNgIHdpbGwgc29tZXRpbWVzIHJlc3VsdCBpbiBhZGRpdGlvbmFsXG4gICAgLy8gcGFzc2l2ZSBlZmZlY3RzLiBTbyB3ZSBuZWVkIHRvIGtlZXAgZmx1c2hpbmcgaW4gYSBsb29wIHVudGlsIHRoZXJlIGFyZVxuICAgIC8vIG5vIG1vcmUgcGVuZGluZyBlZmZlY3RzLlxuICAgIC8vIFRPRE86IE1pZ2h0IGJlIGJldHRlciBpZiBgZmx1c2hQYXNzaXZlRWZmZWN0c2AgZGlkIG5vdCBhdXRvbWF0aWNhbGx5XG4gICAgLy8gZmx1c2ggc3luY2hyb25vdXMgd29yayBhdCB0aGUgZW5kLCB0byBhdm9pZCBmYWN0b3JpbmcgaGF6YXJkcyBsaWtlIHRoaXMuXG4gICAgZmx1c2hQYXNzaXZlRWZmZWN0cygpO1xuICB9IHdoaWxlIChyb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyAhPT0gbnVsbCk7XG5cbiAgZmx1c2hSZW5kZXJQaGFzZVN0cmljdE1vZGVXYXJuaW5nc0luREVWKCk7XG5cbiAgaWYgKChleGVjdXRpb25Db250ZXh0ICYgKFJlbmRlckNvbnRleHQgfCBDb21taXRDb250ZXh0KSkgIT09IE5vQ29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcignU2hvdWxkIG5vdCBhbHJlYWR5IGJlIHdvcmtpbmcuJyk7XG4gIH1cblxuICB2YXIgZmluaXNoZWRXb3JrID0gcm9vdC5maW5pc2hlZFdvcms7XG4gIHZhciBsYW5lcyA9IHJvb3QuZmluaXNoZWRMYW5lcztcblxuICB7XG4gICAgbWFya0NvbW1pdFN0YXJ0ZWQobGFuZXMpO1xuICB9XG5cbiAgaWYgKGZpbmlzaGVkV29yayA9PT0gbnVsbCkge1xuXG4gICAge1xuICAgICAgbWFya0NvbW1pdFN0b3BwZWQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICB7XG4gICAgICBpZiAobGFuZXMgPT09IE5vTGFuZXMpIHtcbiAgICAgICAgZXJyb3IoJ3Jvb3QuZmluaXNoZWRMYW5lcyBzaG91bGQgbm90IGJlIGVtcHR5IGR1cmluZyBhIGNvbW1pdC4gVGhpcyBpcyBhICcgKyAnYnVnIGluIFJlYWN0LicpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJvb3QuZmluaXNoZWRXb3JrID0gbnVsbDtcbiAgcm9vdC5maW5pc2hlZExhbmVzID0gTm9MYW5lcztcblxuICBpZiAoZmluaXNoZWRXb3JrID09PSByb290LmN1cnJlbnQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBjb21taXQgdGhlIHNhbWUgdHJlZSBhcyBiZWZvcmUuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSAnICsgJ2EgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nKTtcbiAgfSAvLyBjb21taXRSb290IG5ldmVyIHJldHVybnMgYSBjb250aW51YXRpb247IGl0IGFsd2F5cyBmaW5pc2hlcyBzeW5jaHJvbm91c2x5LlxuICAvLyBTbyB3ZSBjYW4gY2xlYXIgdGhlc2Ugbm93IHRvIGFsbG93IGEgbmV3IGNhbGxiYWNrIHRvIGJlIHNjaGVkdWxlZC5cblxuXG4gIHJvb3QuY2FsbGJhY2tOb2RlID0gbnVsbDtcbiAgcm9vdC5jYWxsYmFja1ByaW9yaXR5ID0gTm9MYW5lOyAvLyBVcGRhdGUgdGhlIGZpcnN0IGFuZCBsYXN0IHBlbmRpbmcgdGltZXMgb24gdGhpcyByb290LiBUaGUgbmV3IGZpcnN0XG4gIC8vIHBlbmRpbmcgdGltZSBpcyB3aGF0ZXZlciBpcyBsZWZ0IG9uIHRoZSByb290IGZpYmVyLlxuXG4gIHZhciByZW1haW5pbmdMYW5lcyA9IG1lcmdlTGFuZXMoZmluaXNoZWRXb3JrLmxhbmVzLCBmaW5pc2hlZFdvcmsuY2hpbGRMYW5lcyk7XG4gIG1hcmtSb290RmluaXNoZWQocm9vdCwgcmVtYWluaW5nTGFuZXMpO1xuXG4gIGlmIChyb290ID09PSB3b3JrSW5Qcm9ncmVzc1Jvb3QpIHtcbiAgICAvLyBXZSBjYW4gcmVzZXQgdGhlc2Ugbm93IHRoYXQgdGhleSBhcmUgZmluaXNoZWQuXG4gICAgd29ya0luUHJvZ3Jlc3NSb290ID0gbnVsbDtcbiAgICB3b3JrSW5Qcm9ncmVzcyA9IG51bGw7XG4gICAgd29ya0luUHJvZ3Jlc3NSb290UmVuZGVyTGFuZXMgPSBOb0xhbmVzO1xuICB9IC8vIElmIHRoZXJlIGFyZSBwZW5kaW5nIHBhc3NpdmUgZWZmZWN0cywgc2NoZWR1bGUgYSBjYWxsYmFjayB0byBwcm9jZXNzIHRoZW0uXG4gIC8vIERvIHRoaXMgYXMgZWFybHkgYXMgcG9zc2libGUsIHNvIGl0IGlzIHF1ZXVlZCBiZWZvcmUgYW55dGhpbmcgZWxzZSB0aGF0XG4gIC8vIG1pZ2h0IGdldCBzY2hlZHVsZWQgaW4gdGhlIGNvbW1pdCBwaGFzZS4gKFNlZSAjMTY3MTQuKVxuICAvLyBUT0RPOiBEZWxldGUgYWxsIG90aGVyIHBsYWNlcyB0aGF0IHNjaGVkdWxlIHRoZSBwYXNzaXZlIGVmZmVjdCBjYWxsYmFja1xuICAvLyBUaGV5J3JlIHJlZHVuZGFudC5cblxuXG4gIGlmICgoZmluaXNoZWRXb3JrLnN1YnRyZWVGbGFncyAmIFBhc3NpdmVNYXNrKSAhPT0gTm9GbGFncyB8fCAoZmluaXNoZWRXb3JrLmZsYWdzICYgUGFzc2l2ZU1hc2spICE9PSBOb0ZsYWdzKSB7XG4gICAgaWYgKCFyb290RG9lc0hhdmVQYXNzaXZlRWZmZWN0cykge1xuICAgICAgcm9vdERvZXNIYXZlUGFzc2l2ZUVmZmVjdHMgPSB0cnVlO1xuICAgICAgLy8gdG8gc3RvcmUgaXQgaW4gcGVuZGluZ1Bhc3NpdmVUcmFuc2l0aW9ucyB1bnRpbCB0aGV5IGdldCBwcm9jZXNzZWRcbiAgICAgIC8vIFdlIG5lZWQgdG8gcGFzcyB0aGlzIHRocm91Z2ggYXMgYW4gYXJndW1lbnQgdG8gY29tbWl0Um9vdFxuICAgICAgLy8gYmVjYXVzZSB3b3JrSW5Qcm9ncmVzc1RyYW5zaXRpb25zIG1pZ2h0IGhhdmUgY2hhbmdlZCBiZXR3ZWVuXG4gICAgICAvLyB0aGUgcHJldmlvdXMgcmVuZGVyIGFuZCBjb21taXQgaWYgd2UgdGhyb3R0bGUgdGhlIGNvbW1pdFxuICAgICAgLy8gd2l0aCBzZXRUaW1lb3V0XG5cbiAgICAgIHBlbmRpbmdQYXNzaXZlVHJhbnNpdGlvbnMgPSB0cmFuc2l0aW9ucztcbiAgICAgIHNjaGVkdWxlQ2FsbGJhY2skMShOb3JtYWxQcmlvcml0eSwgZnVuY3Rpb24gKCkge1xuICAgICAgICBmbHVzaFBhc3NpdmVFZmZlY3RzKCk7IC8vIFRoaXMgcmVuZGVyIHRyaWdnZXJlZCBwYXNzaXZlIGVmZmVjdHM6IHJlbGVhc2UgdGhlIHJvb3QgY2FjaGUgcG9vbFxuICAgICAgICAvLyAqYWZ0ZXIqIHBhc3NpdmUgZWZmZWN0cyBmaXJlIHRvIGF2b2lkIGZyZWVpbmcgYSBjYWNoZSBwb29sIHRoYXQgbWF5XG4gICAgICAgIC8vIGJlIHJlZmVyZW5jZWQgYnkgYSBub2RlIGluIHRoZSB0cmVlIChIb3N0Um9vdCwgQ2FjaGUgYm91bmRhcnkgZXRjKVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfSk7XG4gICAgfVxuICB9IC8vIENoZWNrIGlmIHRoZXJlIGFyZSBhbnkgZWZmZWN0cyBpbiB0aGUgd2hvbGUgdHJlZS5cbiAgLy8gVE9ETzogVGhpcyBpcyBsZWZ0IG92ZXIgZnJvbSB0aGUgZWZmZWN0IGxpc3QgaW1wbGVtZW50YXRpb24sIHdoZXJlIHdlIGhhZFxuICAvLyB0byBjaGVjayBmb3IgdGhlIGV4aXN0ZW5jZSBvZiBgZmlyc3RFZmZlY3RgIHRvIHNhdGlzZnkgRmxvdy4gSSB0aGluayB0aGVcbiAgLy8gb25seSBvdGhlciByZWFzb24gdGhpcyBvcHRpbWl6YXRpb24gZXhpc3RzIGlzIGJlY2F1c2UgaXQgYWZmZWN0cyBwcm9maWxpbmcuXG4gIC8vIFJlY29uc2lkZXIgd2hldGhlciB0aGlzIGlzIG5lY2Vzc2FyeS5cblxuXG4gIHZhciBzdWJ0cmVlSGFzRWZmZWN0cyA9IChmaW5pc2hlZFdvcmsuc3VidHJlZUZsYWdzICYgKEJlZm9yZU11dGF0aW9uTWFzayB8IE11dGF0aW9uTWFzayB8IExheW91dE1hc2sgfCBQYXNzaXZlTWFzaykpICE9PSBOb0ZsYWdzO1xuICB2YXIgcm9vdEhhc0VmZmVjdCA9IChmaW5pc2hlZFdvcmsuZmxhZ3MgJiAoQmVmb3JlTXV0YXRpb25NYXNrIHwgTXV0YXRpb25NYXNrIHwgTGF5b3V0TWFzayB8IFBhc3NpdmVNYXNrKSkgIT09IE5vRmxhZ3M7XG5cbiAgaWYgKHN1YnRyZWVIYXNFZmZlY3RzIHx8IHJvb3RIYXNFZmZlY3QpIHtcbiAgICB2YXIgcHJldlRyYW5zaXRpb24gPSBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyQzLnRyYW5zaXRpb247XG4gICAgUmVhY3RDdXJyZW50QmF0Y2hDb25maWckMy50cmFuc2l0aW9uID0gbnVsbDtcbiAgICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IGdldEN1cnJlbnRVcGRhdGVQcmlvcml0eSgpO1xuICAgIHNldEN1cnJlbnRVcGRhdGVQcmlvcml0eShEaXNjcmV0ZUV2ZW50UHJpb3JpdHkpO1xuICAgIHZhciBwcmV2RXhlY3V0aW9uQ29udGV4dCA9IGV4ZWN1dGlvbkNvbnRleHQ7XG4gICAgZXhlY3V0aW9uQ29udGV4dCB8PSBDb21taXRDb250ZXh0OyAvLyBSZXNldCB0aGlzIHRvIG51bGwgYmVmb3JlIGNhbGxpbmcgbGlmZWN5Y2xlc1xuXG4gICAgUmVhY3RDdXJyZW50T3duZXIkMi5jdXJyZW50ID0gbnVsbDsgLy8gVGhlIGNvbW1pdCBwaGFzZSBpcyBicm9rZW4gaW50byBzZXZlcmFsIHN1Yi1waGFzZXMuIFdlIGRvIGEgc2VwYXJhdGUgcGFzc1xuICAgIC8vIG9mIHRoZSBlZmZlY3QgbGlzdCBmb3IgZWFjaCBwaGFzZTogYWxsIG11dGF0aW9uIGVmZmVjdHMgY29tZSBiZWZvcmUgYWxsXG4gICAgLy8gbGF5b3V0IGVmZmVjdHMsIGFuZCBzbyBvbi5cbiAgICAvLyBUaGUgZmlyc3QgcGhhc2UgYSBcImJlZm9yZSBtdXRhdGlvblwiIHBoYXNlLiBXZSB1c2UgdGhpcyBwaGFzZSB0byByZWFkIHRoZVxuICAgIC8vIHN0YXRlIG9mIHRoZSBob3N0IHRyZWUgcmlnaHQgYmVmb3JlIHdlIG11dGF0ZSBpdC4gVGhpcyBpcyB3aGVyZVxuICAgIC8vIGdldFNuYXBzaG90QmVmb3JlVXBkYXRlIGlzIGNhbGxlZC5cblxuICAgIHZhciBzaG91bGRGaXJlQWZ0ZXJBY3RpdmVJbnN0YW5jZUJsdXIgPSBjb21taXRCZWZvcmVNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrKTtcblxuICAgIHtcbiAgICAgIC8vIE1hcmsgdGhlIGN1cnJlbnQgY29tbWl0IHRpbWUgdG8gYmUgc2hhcmVkIGJ5IGFsbCBQcm9maWxlcnMgaW4gdGhpc1xuICAgICAgLy8gYmF0Y2guIFRoaXMgZW5hYmxlcyB0aGVtIHRvIGJlIGdyb3VwZWQgbGF0ZXIuXG4gICAgICByZWNvcmRDb21taXRUaW1lKCk7XG4gICAgfVxuXG5cbiAgICBjb21taXRNdXRhdGlvbkVmZmVjdHMocm9vdCwgZmluaXNoZWRXb3JrLCBsYW5lcyk7XG5cbiAgICByZXNldEFmdGVyQ29tbWl0KHJvb3QuY29udGFpbmVySW5mbyk7IC8vIFRoZSB3b3JrLWluLXByb2dyZXNzIHRyZWUgaXMgbm93IHRoZSBjdXJyZW50IHRyZWUuIFRoaXMgbXVzdCBjb21lIGFmdGVyXG4gICAgLy8gdGhlIG11dGF0aW9uIHBoYXNlLCBzbyB0aGF0IHRoZSBwcmV2aW91cyB0cmVlIGlzIHN0aWxsIGN1cnJlbnQgZHVyaW5nXG4gICAgLy8gY29tcG9uZW50V2lsbFVubW91bnQsIGJ1dCBiZWZvcmUgdGhlIGxheW91dCBwaGFzZSwgc28gdGhhdCB0aGUgZmluaXNoZWRcbiAgICAvLyB3b3JrIGlzIGN1cnJlbnQgZHVyaW5nIGNvbXBvbmVudERpZE1vdW50L1VwZGF0ZS5cblxuICAgIHJvb3QuY3VycmVudCA9IGZpbmlzaGVkV29yazsgLy8gVGhlIG5leHQgcGhhc2UgaXMgdGhlIGxheW91dCBwaGFzZSwgd2hlcmUgd2UgY2FsbCBlZmZlY3RzIHRoYXQgcmVhZFxuXG4gICAge1xuICAgICAgbWFya0xheW91dEVmZmVjdHNTdGFydGVkKGxhbmVzKTtcbiAgICB9XG5cbiAgICBjb21taXRMYXlvdXRFZmZlY3RzKGZpbmlzaGVkV29yaywgcm9vdCwgbGFuZXMpO1xuXG4gICAge1xuICAgICAgbWFya0xheW91dEVmZmVjdHNTdG9wcGVkKCk7XG4gICAgfVxuICAgIC8vIG9wcG9ydHVuaXR5IHRvIHBhaW50LlxuXG5cbiAgICByZXF1ZXN0UGFpbnQoKTtcbiAgICBleGVjdXRpb25Db250ZXh0ID0gcHJldkV4ZWN1dGlvbkNvbnRleHQ7IC8vIFJlc2V0IHRoZSBwcmlvcml0eSB0byB0aGUgcHJldmlvdXMgbm9uLXN5bmMgdmFsdWUuXG5cbiAgICBzZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkocHJldmlvdXNQcmlvcml0eSk7XG4gICAgUmVhY3RDdXJyZW50QmF0Y2hDb25maWckMy50cmFuc2l0aW9uID0gcHJldlRyYW5zaXRpb247XG4gIH0gZWxzZSB7XG4gICAgLy8gTm8gZWZmZWN0cy5cbiAgICByb290LmN1cnJlbnQgPSBmaW5pc2hlZFdvcms7IC8vIE1lYXN1cmUgdGhlc2UgYW55d2F5IHNvIHRoZSBmbGFtZWdyYXBoIGV4cGxpY2l0bHkgc2hvd3MgdGhhdCB0aGVyZSB3ZXJlXG4gICAgLy8gbm8gZWZmZWN0cy5cbiAgICAvLyBUT0RPOiBNYXliZSB0aGVyZSdzIGEgYmV0dGVyIHdheSB0byByZXBvcnQgdGhpcy5cblxuICAgIHtcbiAgICAgIHJlY29yZENvbW1pdFRpbWUoKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcm9vdERpZEhhdmVQYXNzaXZlRWZmZWN0cyA9IHJvb3REb2VzSGF2ZVBhc3NpdmVFZmZlY3RzO1xuXG4gIGlmIChyb290RG9lc0hhdmVQYXNzaXZlRWZmZWN0cykge1xuICAgIC8vIFRoaXMgY29tbWl0IGhhcyBwYXNzaXZlIGVmZmVjdHMuIFN0YXNoIGEgcmVmZXJlbmNlIHRvIHRoZW0uIEJ1dCBkb24ndFxuICAgIC8vIHNjaGVkdWxlIGEgY2FsbGJhY2sgdW50aWwgYWZ0ZXIgZmx1c2hpbmcgbGF5b3V0IHdvcmsuXG4gICAgcm9vdERvZXNIYXZlUGFzc2l2ZUVmZmVjdHMgPSBmYWxzZTtcbiAgICByb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyA9IHJvb3Q7XG4gICAgcGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXMgPSBsYW5lcztcbiAgfSBlbHNlIHtcblxuICAgIHtcbiAgICAgIG5lc3RlZFBhc3NpdmVVcGRhdGVDb3VudCA9IDA7XG4gICAgICByb290V2l0aFBhc3NpdmVOZXN0ZWRVcGRhdGVzID0gbnVsbDtcbiAgICB9XG4gIH0gLy8gUmVhZCB0aGlzIGFnYWluLCBzaW5jZSBhbiBlZmZlY3QgbWlnaHQgaGF2ZSB1cGRhdGVkIGl0XG5cblxuICByZW1haW5pbmdMYW5lcyA9IHJvb3QucGVuZGluZ0xhbmVzOyAvLyBDaGVjayBpZiB0aGVyZSdzIHJlbWFpbmluZyB3b3JrIG9uIHRoaXMgcm9vdFxuICAvLyBUT0RPOiBUaGlzIGlzIHBhcnQgb2YgdGhlIGBjb21wb25lbnREaWRDYXRjaGAgaW1wbGVtZW50YXRpb24uIEl0cyBwdXJwb3NlXG4gIC8vIGlzIHRvIGRldGVjdCB3aGV0aGVyIHNvbWV0aGluZyBtaWdodCBoYXZlIGNhbGxlZCBzZXRTdGF0ZSBpbnNpZGVcbiAgLy8gYGNvbXBvbmVudERpZENhdGNoYC4gVGhlIG1lY2hhbmlzbSBpcyBrbm93biB0byBiZSBmbGF3ZWQgYmVjYXVzZSBgc2V0U3RhdGVgXG4gIC8vIGluc2lkZSBgY29tcG9uZW50RGlkQ2F0Y2hgIGlzIGl0c2VsZiBmbGF3ZWQg4oCUIHRoYXQncyB3aHkgd2UgcmVjb21tZW5kXG4gIC8vIGBnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3JgIGluc3RlYWQuIEhvd2V2ZXIsIGl0IGNvdWxkIGJlIGltcHJvdmVkIGJ5XG4gIC8vIGNoZWNraW5nIGlmIHJlbWFpbmluZ0xhbmVzIGluY2x1ZGVzIFN5bmMgd29yaywgaW5zdGVhZCBvZiB3aGV0aGVyIHRoZXJlJ3NcbiAgLy8gYW55IHdvcmsgcmVtYWluaW5nIGF0IGFsbCAod2hpY2ggd291bGQgYWxzbyBpbmNsdWRlIHN0dWZmIGxpa2UgU3VzcGVuc2VcbiAgLy8gcmV0cmllcyBvciB0cmFuc2l0aW9ucykuIEl0J3MgYmVlbiBsaWtlIHRoaXMgZm9yIGEgd2hpbGUsIHRob3VnaCwgc28gZml4aW5nXG4gIC8vIGl0IHByb2JhYmx5IGlzbid0IHRoYXQgdXJnZW50LlxuXG4gIGlmIChyZW1haW5pbmdMYW5lcyA9PT0gTm9MYW5lcykge1xuICAgIC8vIElmIHRoZXJlJ3Mgbm8gcmVtYWluaW5nIHdvcmssIHdlIGNhbiBjbGVhciB0aGUgc2V0IG9mIGFscmVhZHkgZmFpbGVkXG4gICAgLy8gZXJyb3IgYm91bmRhcmllcy5cbiAgICBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCA9IG51bGw7XG4gIH1cblxuICB7XG4gICAgaWYgKCFyb290RGlkSGF2ZVBhc3NpdmVFZmZlY3RzKSB7XG4gICAgICBjb21taXREb3VibGVJbnZva2VFZmZlY3RzSW5ERVYocm9vdC5jdXJyZW50LCBmYWxzZSk7XG4gICAgfVxuICB9XG5cbiAgb25Db21taXRSb290KGZpbmlzaGVkV29yay5zdGF0ZU5vZGUsIHJlbmRlclByaW9yaXR5TGV2ZWwpO1xuXG4gIHtcbiAgICBpZiAoaXNEZXZUb29sc1ByZXNlbnQpIHtcbiAgICAgIHJvb3QubWVtb2l6ZWRVcGRhdGVycy5jbGVhcigpO1xuICAgIH1cbiAgfVxuXG4gIHtcbiAgICBvbkNvbW1pdFJvb3QkMSgpO1xuICB9IC8vIEFsd2F5cyBjYWxsIHRoaXMgYmVmb3JlIGV4aXRpbmcgYGNvbW1pdFJvb3RgLCB0byBlbnN1cmUgdGhhdCBhbnlcbiAgLy8gYWRkaXRpb25hbCB3b3JrIG9uIHRoaXMgcm9vdCBpcyBzY2hlZHVsZWQuXG5cblxuICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCwgbm93KCkpO1xuXG4gIGlmIChyZWNvdmVyYWJsZUVycm9ycyAhPT0gbnVsbCkge1xuICAgIC8vIFRoZXJlIHdlcmUgZXJyb3JzIGR1cmluZyB0aGlzIHJlbmRlciwgYnV0IHJlY292ZXJlZCBmcm9tIHRoZW0gd2l0aG91dFxuICAgIC8vIG5lZWRpbmcgdG8gc3VyZmFjZSBpdCB0byB0aGUgVUkuIFdlIGxvZyB0aGVtIGhlcmUuXG4gICAgdmFyIG9uUmVjb3ZlcmFibGVFcnJvciA9IHJvb3Qub25SZWNvdmVyYWJsZUVycm9yO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWNvdmVyYWJsZUVycm9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHJlY292ZXJhYmxlRXJyb3IgPSByZWNvdmVyYWJsZUVycm9yc1tpXTtcbiAgICAgIHZhciBjb21wb25lbnRTdGFjayA9IHJlY292ZXJhYmxlRXJyb3Iuc3RhY2s7XG4gICAgICB2YXIgZGlnZXN0ID0gcmVjb3ZlcmFibGVFcnJvci5kaWdlc3Q7XG4gICAgICBvblJlY292ZXJhYmxlRXJyb3IocmVjb3ZlcmFibGVFcnJvci52YWx1ZSwge1xuICAgICAgICBjb21wb25lbnRTdGFjazogY29tcG9uZW50U3RhY2ssXG4gICAgICAgIGRpZ2VzdDogZGlnZXN0XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBpZiAoaGFzVW5jYXVnaHRFcnJvcikge1xuICAgIGhhc1VuY2F1Z2h0RXJyb3IgPSBmYWxzZTtcbiAgICB2YXIgZXJyb3IkMSA9IGZpcnN0VW5jYXVnaHRFcnJvcjtcbiAgICBmaXJzdFVuY2F1Z2h0RXJyb3IgPSBudWxsO1xuICAgIHRocm93IGVycm9yJDE7XG4gIH0gLy8gSWYgdGhlIHBhc3NpdmUgZWZmZWN0cyBhcmUgdGhlIHJlc3VsdCBvZiBhIGRpc2NyZXRlIHJlbmRlciwgZmx1c2ggdGhlbVxuICAvLyBzeW5jaHJvbm91c2x5IGF0IHRoZSBlbmQgb2YgdGhlIGN1cnJlbnQgdGFzayBzbyB0aGF0IHRoZSByZXN1bHQgaXNcbiAgLy8gaW1tZWRpYXRlbHkgb2JzZXJ2YWJsZS4gT3RoZXJ3aXNlLCB3ZSBhc3N1bWUgdGhhdCB0aGV5IGFyZSBub3RcbiAgLy8gb3JkZXItZGVwZW5kZW50IGFuZCBkbyBub3QgbmVlZCB0byBiZSBvYnNlcnZlZCBieSBleHRlcm5hbCBzeXN0ZW1zLCBzbyB3ZVxuICAvLyBjYW4gd2FpdCB1bnRpbCBhZnRlciBwYWludC5cbiAgLy8gVE9ETzogV2UgY2FuIG9wdGltaXplIHRoaXMgYnkgbm90IHNjaGVkdWxpbmcgdGhlIGNhbGxiYWNrIGVhcmxpZXIuIFNpbmNlIHdlXG4gIC8vIGN1cnJlbnRseSBzY2hlZHVsZSB0aGUgY2FsbGJhY2sgaW4gbXVsdGlwbGUgcGxhY2VzLCB3aWxsIHdhaXQgdW50aWwgdGhvc2VcbiAgLy8gYXJlIGNvbnNvbGlkYXRlZC5cblxuXG4gIGlmIChpbmNsdWRlc1NvbWVMYW5lKHBlbmRpbmdQYXNzaXZlRWZmZWN0c0xhbmVzLCBTeW5jTGFuZSkgJiYgcm9vdC50YWcgIT09IExlZ2FjeVJvb3QpIHtcbiAgICBmbHVzaFBhc3NpdmVFZmZlY3RzKCk7XG4gIH0gLy8gUmVhZCB0aGlzIGFnYWluLCBzaW5jZSBhIHBhc3NpdmUgZWZmZWN0IG1pZ2h0IGhhdmUgdXBkYXRlZCBpdFxuXG5cbiAgcmVtYWluaW5nTGFuZXMgPSByb290LnBlbmRpbmdMYW5lcztcblxuICBpZiAoaW5jbHVkZXNTb21lTGFuZShyZW1haW5pbmdMYW5lcywgU3luY0xhbmUpKSB7XG4gICAge1xuICAgICAgbWFya05lc3RlZFVwZGF0ZVNjaGVkdWxlZCgpO1xuICAgIH0gLy8gQ291bnQgdGhlIG51bWJlciBvZiB0aW1lcyB0aGUgcm9vdCBzeW5jaHJvbm91c2x5IHJlLXJlbmRlcnMgd2l0aG91dFxuICAgIC8vIGZpbmlzaGluZy4gSWYgdGhlcmUgYXJlIHRvbyBtYW55LCBpdCBpbmRpY2F0ZXMgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AuXG5cblxuICAgIGlmIChyb290ID09PSByb290V2l0aE5lc3RlZFVwZGF0ZXMpIHtcbiAgICAgIG5lc3RlZFVwZGF0ZUNvdW50Kys7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5lc3RlZFVwZGF0ZUNvdW50ID0gMDtcbiAgICAgIHJvb3RXaXRoTmVzdGVkVXBkYXRlcyA9IHJvb3Q7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG5lc3RlZFVwZGF0ZUNvdW50ID0gMDtcbiAgfSAvLyBJZiBsYXlvdXQgd29yayB3YXMgc2NoZWR1bGVkLCBmbHVzaCBpdCBub3cuXG5cblxuICBmbHVzaFN5bmNDYWxsYmFja3MoKTtcblxuICB7XG4gICAgbWFya0NvbW1pdFN0b3BwZWQoKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBmbHVzaFBhc3NpdmVFZmZlY3RzKCkge1xuICAvLyBSZXR1cm5zIHdoZXRoZXIgcGFzc2l2ZSBlZmZlY3RzIHdlcmUgZmx1c2hlZC5cbiAgLy8gVE9ETzogQ29tYmluZSB0aGlzIGNoZWNrIHdpdGggdGhlIG9uZSBpbiBmbHVzaFBhc3NpdmVFRmZlY3RzSW1wbC4gV2Ugc2hvdWxkXG4gIC8vIHByb2JhYmx5IGp1c3QgY29tYmluZSB0aGUgdHdvIGZ1bmN0aW9ucy4gSSBiZWxpZXZlIHRoZXkgd2VyZSBvbmx5IHNlcGFyYXRlXG4gIC8vIGluIHRoZSBmaXJzdCBwbGFjZSBiZWNhdXNlIHdlIHVzZWQgdG8gd3JhcCBpdCB3aXRoXG4gIC8vIGBTY2hlZHVsZXIucnVuV2l0aFByaW9yaXR5YCwgd2hpY2ggYWNjZXB0cyBhIGZ1bmN0aW9uLiBCdXQgbm93IHdlIHRyYWNrIHRoZVxuICAvLyBwcmlvcml0eSB3aXRoaW4gUmVhY3QgaXRzZWxmLCBzbyB3ZSBjYW4gbXV0YXRlIHRoZSB2YXJpYWJsZSBkaXJlY3RseS5cbiAgaWYgKHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzICE9PSBudWxsKSB7XG4gICAgdmFyIHJlbmRlclByaW9yaXR5ID0gbGFuZXNUb0V2ZW50UHJpb3JpdHkocGVuZGluZ1Bhc3NpdmVFZmZlY3RzTGFuZXMpO1xuICAgIHZhciBwcmlvcml0eSA9IGxvd2VyRXZlbnRQcmlvcml0eShEZWZhdWx0RXZlbnRQcmlvcml0eSwgcmVuZGVyUHJpb3JpdHkpO1xuICAgIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnJDMudHJhbnNpdGlvbjtcbiAgICB2YXIgcHJldmlvdXNQcmlvcml0eSA9IGdldEN1cnJlbnRVcGRhdGVQcmlvcml0eSgpO1xuXG4gICAgdHJ5IHtcbiAgICAgIFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnJDMudHJhbnNpdGlvbiA9IG51bGw7XG4gICAgICBzZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkocHJpb3JpdHkpO1xuICAgICAgcmV0dXJuIGZsdXNoUGFzc2l2ZUVmZmVjdHNJbXBsKCk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHNldEN1cnJlbnRVcGRhdGVQcmlvcml0eShwcmV2aW91c1ByaW9yaXR5KTtcbiAgICAgIFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnJDMudHJhbnNpdGlvbiA9IHByZXZUcmFuc2l0aW9uOyAvLyBPbmNlIHBhc3NpdmUgZWZmZWN0cyBoYXZlIHJ1biBmb3IgdGhlIHRyZWUgLSBnaXZpbmcgY29tcG9uZW50cyBhXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gZW5xdWV1ZVBlbmRpbmdQYXNzaXZlUHJvZmlsZXJFZmZlY3QoZmliZXIpIHtcbiAge1xuICAgIHBlbmRpbmdQYXNzaXZlUHJvZmlsZXJFZmZlY3RzLnB1c2goZmliZXIpO1xuXG4gICAgaWYgKCFyb290RG9lc0hhdmVQYXNzaXZlRWZmZWN0cykge1xuICAgICAgcm9vdERvZXNIYXZlUGFzc2l2ZUVmZmVjdHMgPSB0cnVlO1xuICAgICAgc2NoZWR1bGVDYWxsYmFjayQxKE5vcm1hbFByaW9yaXR5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZsdXNoUGFzc2l2ZUVmZmVjdHMoKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmx1c2hQYXNzaXZlRWZmZWN0c0ltcGwoKSB7XG4gIGlmIChyb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSAvLyBDYWNoZSBhbmQgY2xlYXIgdGhlIHRyYW5zaXRpb25zIGZsYWdcblxuXG4gIHZhciB0cmFuc2l0aW9ucyA9IHBlbmRpbmdQYXNzaXZlVHJhbnNpdGlvbnM7XG4gIHBlbmRpbmdQYXNzaXZlVHJhbnNpdGlvbnMgPSBudWxsO1xuICB2YXIgcm9vdCA9IHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzO1xuICB2YXIgbGFuZXMgPSBwZW5kaW5nUGFzc2l2ZUVmZmVjdHNMYW5lcztcbiAgcm9vdFdpdGhQZW5kaW5nUGFzc2l2ZUVmZmVjdHMgPSBudWxsOyAvLyBUT0RPOiBUaGlzIGlzIHNvbWV0aW1lcyBvdXQgb2Ygc3luYyB3aXRoIHJvb3RXaXRoUGVuZGluZ1Bhc3NpdmVFZmZlY3RzLlxuICAvLyBGaWd1cmUgb3V0IHdoeSBhbmQgZml4IGl0LiBJdCdzIG5vdCBjYXVzaW5nIGFueSBrbm93biBpc3N1ZXMgKHByb2JhYmx5XG4gIC8vIGJlY2F1c2UgaXQncyBvbmx5IHVzZWQgZm9yIHByb2ZpbGluZyksIGJ1dCBpdCdzIGEgcmVmYWN0b3IgaGF6YXJkLlxuXG4gIHBlbmRpbmdQYXNzaXZlRWZmZWN0c0xhbmVzID0gTm9MYW5lcztcblxuICBpZiAoKGV4ZWN1dGlvbkNvbnRleHQgJiAoUmVuZGVyQ29udGV4dCB8IENvbW1pdENvbnRleHQpKSAhPT0gTm9Db250ZXh0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgZmx1c2ggcGFzc2l2ZSBlZmZlY3RzIHdoaWxlIGFscmVhZHkgcmVuZGVyaW5nLicpO1xuICB9XG5cbiAge1xuICAgIGlzRmx1c2hpbmdQYXNzaXZlRWZmZWN0cyA9IHRydWU7XG4gICAgZGlkU2NoZWR1bGVVcGRhdGVEdXJpbmdQYXNzaXZlRWZmZWN0cyA9IGZhbHNlO1xuICB9XG5cbiAge1xuICAgIG1hcmtQYXNzaXZlRWZmZWN0c1N0YXJ0ZWQobGFuZXMpO1xuICB9XG5cbiAgdmFyIHByZXZFeGVjdXRpb25Db250ZXh0ID0gZXhlY3V0aW9uQ29udGV4dDtcbiAgZXhlY3V0aW9uQ29udGV4dCB8PSBDb21taXRDb250ZXh0O1xuICBjb21taXRQYXNzaXZlVW5tb3VudEVmZmVjdHMocm9vdC5jdXJyZW50KTtcbiAgY29tbWl0UGFzc2l2ZU1vdW50RWZmZWN0cyhyb290LCByb290LmN1cnJlbnQsIGxhbmVzLCB0cmFuc2l0aW9ucyk7IC8vIFRPRE86IE1vdmUgdG8gY29tbWl0UGFzc2l2ZU1vdW50RWZmZWN0c1xuXG4gIHtcbiAgICB2YXIgcHJvZmlsZXJFZmZlY3RzID0gcGVuZGluZ1Bhc3NpdmVQcm9maWxlckVmZmVjdHM7XG4gICAgcGVuZGluZ1Bhc3NpdmVQcm9maWxlckVmZmVjdHMgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvZmlsZXJFZmZlY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgX2ZpYmVyID0gcHJvZmlsZXJFZmZlY3RzW2ldO1xuICAgICAgY29tbWl0UGFzc2l2ZUVmZmVjdER1cmF0aW9ucyhyb290LCBfZmliZXIpO1xuICAgIH1cbiAgfVxuXG4gIHtcbiAgICBtYXJrUGFzc2l2ZUVmZmVjdHNTdG9wcGVkKCk7XG4gIH1cblxuICB7XG4gICAgY29tbWl0RG91YmxlSW52b2tlRWZmZWN0c0luREVWKHJvb3QuY3VycmVudCwgdHJ1ZSk7XG4gIH1cblxuICBleGVjdXRpb25Db250ZXh0ID0gcHJldkV4ZWN1dGlvbkNvbnRleHQ7XG4gIGZsdXNoU3luY0NhbGxiYWNrcygpO1xuXG4gIHtcbiAgICAvLyBJZiBhZGRpdGlvbmFsIHBhc3NpdmUgZWZmZWN0cyB3ZXJlIHNjaGVkdWxlZCwgaW5jcmVtZW50IGEgY291bnRlci4gSWYgdGhpc1xuICAgIC8vIGV4Y2VlZHMgdGhlIGxpbWl0LCB3ZSdsbCBmaXJlIGEgd2FybmluZy5cbiAgICBpZiAoZGlkU2NoZWR1bGVVcGRhdGVEdXJpbmdQYXNzaXZlRWZmZWN0cykge1xuICAgICAgaWYgKHJvb3QgPT09IHJvb3RXaXRoUGFzc2l2ZU5lc3RlZFVwZGF0ZXMpIHtcbiAgICAgICAgbmVzdGVkUGFzc2l2ZVVwZGF0ZUNvdW50Kys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXN0ZWRQYXNzaXZlVXBkYXRlQ291bnQgPSAwO1xuICAgICAgICByb290V2l0aFBhc3NpdmVOZXN0ZWRVcGRhdGVzID0gcm9vdDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbmVzdGVkUGFzc2l2ZVVwZGF0ZUNvdW50ID0gMDtcbiAgICB9XG5cbiAgICBpc0ZsdXNoaW5nUGFzc2l2ZUVmZmVjdHMgPSBmYWxzZTtcbiAgICBkaWRTY2hlZHVsZVVwZGF0ZUR1cmluZ1Bhc3NpdmVFZmZlY3RzID0gZmFsc2U7XG4gIH0gLy8gVE9ETzogTW92ZSB0byBjb21taXRQYXNzaXZlTW91bnRFZmZlY3RzXG5cblxuICBvblBvc3RDb21taXRSb290KHJvb3QpO1xuXG4gIHtcbiAgICB2YXIgc3RhdGVOb2RlID0gcm9vdC5jdXJyZW50LnN0YXRlTm9kZTtcbiAgICBzdGF0ZU5vZGUuZWZmZWN0RHVyYXRpb24gPSAwO1xuICAgIHN0YXRlTm9kZS5wYXNzaXZlRWZmZWN0RHVyYXRpb24gPSAwO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzQWxyZWFkeUZhaWxlZExlZ2FjeUVycm9yQm91bmRhcnkoaW5zdGFuY2UpIHtcbiAgcmV0dXJuIGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkICE9PSBudWxsICYmIGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkLmhhcyhpbnN0YW5jZSk7XG59XG5mdW5jdGlvbiBtYXJrTGVnYWN5RXJyb3JCb3VuZGFyeUFzRmFpbGVkKGluc3RhbmNlKSB7XG4gIGlmIChsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZCA9PT0gbnVsbCkge1xuICAgIGxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkID0gbmV3IFNldChbaW5zdGFuY2VdKTtcbiAgfSBlbHNlIHtcbiAgICBsZWdhY3lFcnJvckJvdW5kYXJpZXNUaGF0QWxyZWFkeUZhaWxlZC5hZGQoaW5zdGFuY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByZXBhcmVUb1Rocm93VW5jYXVnaHRFcnJvcihlcnJvcikge1xuICBpZiAoIWhhc1VuY2F1Z2h0RXJyb3IpIHtcbiAgICBoYXNVbmNhdWdodEVycm9yID0gdHJ1ZTtcbiAgICBmaXJzdFVuY2F1Z2h0RXJyb3IgPSBlcnJvcjtcbiAgfVxufVxuXG52YXIgb25VbmNhdWdodEVycm9yID0gcHJlcGFyZVRvVGhyb3dVbmNhdWdodEVycm9yO1xuXG5mdW5jdGlvbiBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvck9uUm9vdChyb290RmliZXIsIHNvdXJjZUZpYmVyLCBlcnJvcikge1xuICB2YXIgZXJyb3JJbmZvID0gY3JlYXRlQ2FwdHVyZWRWYWx1ZUF0RmliZXIoZXJyb3IsIHNvdXJjZUZpYmVyKTtcbiAgdmFyIHVwZGF0ZSA9IGNyZWF0ZVJvb3RFcnJvclVwZGF0ZShyb290RmliZXIsIGVycm9ySW5mbywgU3luY0xhbmUpO1xuICB2YXIgcm9vdCA9IGVucXVldWVVcGRhdGUocm9vdEZpYmVyLCB1cGRhdGUsIFN5bmNMYW5lKTtcbiAgdmFyIGV2ZW50VGltZSA9IHJlcXVlc3RFdmVudFRpbWUoKTtcblxuICBpZiAocm9vdCAhPT0gbnVsbCkge1xuICAgIG1hcmtSb290VXBkYXRlZChyb290LCBTeW5jTGFuZSwgZXZlbnRUaW1lKTtcbiAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCwgZXZlbnRUaW1lKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYXB0dXJlQ29tbWl0UGhhc2VFcnJvcihzb3VyY2VGaWJlciwgbmVhcmVzdE1vdW50ZWRBbmNlc3RvciwgZXJyb3IkMSkge1xuICB7XG4gICAgcmVwb3J0VW5jYXVnaHRFcnJvckluREVWKGVycm9yJDEpO1xuICAgIHNldElzUnVubmluZ0luc2VydGlvbkVmZmVjdChmYWxzZSk7XG4gIH1cblxuICBpZiAoc291cmNlRmliZXIudGFnID09PSBIb3N0Um9vdCkge1xuICAgIC8vIEVycm9yIHdhcyB0aHJvd24gYXQgdGhlIHJvb3QuIFRoZXJlIGlzIG5vIHBhcmVudCwgc28gdGhlIHJvb3RcbiAgICAvLyBpdHNlbGYgc2hvdWxkIGNhcHR1cmUgaXQuXG4gICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3JPblJvb3Qoc291cmNlRmliZXIsIHNvdXJjZUZpYmVyLCBlcnJvciQxKTtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgZmliZXIgPSBudWxsO1xuXG4gIHtcbiAgICBmaWJlciA9IG5lYXJlc3RNb3VudGVkQW5jZXN0b3I7XG4gIH1cblxuICB3aGlsZSAoZmliZXIgIT09IG51bGwpIHtcbiAgICBpZiAoZmliZXIudGFnID09PSBIb3N0Um9vdCkge1xuICAgICAgY2FwdHVyZUNvbW1pdFBoYXNlRXJyb3JPblJvb3QoZmliZXIsIHNvdXJjZUZpYmVyLCBlcnJvciQxKTtcbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2UgaWYgKGZpYmVyLnRhZyA9PT0gQ2xhc3NDb21wb25lbnQpIHtcbiAgICAgIHZhciBjdG9yID0gZmliZXIudHlwZTtcbiAgICAgIHZhciBpbnN0YW5jZSA9IGZpYmVyLnN0YXRlTm9kZTtcblxuICAgICAgaWYgKHR5cGVvZiBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvciA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgaW5zdGFuY2UuY29tcG9uZW50RGlkQ2F0Y2ggPT09ICdmdW5jdGlvbicgJiYgIWlzQWxyZWFkeUZhaWxlZExlZ2FjeUVycm9yQm91bmRhcnkoaW5zdGFuY2UpKSB7XG4gICAgICAgIHZhciBlcnJvckluZm8gPSBjcmVhdGVDYXB0dXJlZFZhbHVlQXRGaWJlcihlcnJvciQxLCBzb3VyY2VGaWJlcik7XG4gICAgICAgIHZhciB1cGRhdGUgPSBjcmVhdGVDbGFzc0Vycm9yVXBkYXRlKGZpYmVyLCBlcnJvckluZm8sIFN5bmNMYW5lKTtcbiAgICAgICAgdmFyIHJvb3QgPSBlbnF1ZXVlVXBkYXRlKGZpYmVyLCB1cGRhdGUsIFN5bmNMYW5lKTtcbiAgICAgICAgdmFyIGV2ZW50VGltZSA9IHJlcXVlc3RFdmVudFRpbWUoKTtcblxuICAgICAgICBpZiAocm9vdCAhPT0gbnVsbCkge1xuICAgICAgICAgIG1hcmtSb290VXBkYXRlZChyb290LCBTeW5jTGFuZSwgZXZlbnRUaW1lKTtcbiAgICAgICAgICBlbnN1cmVSb290SXNTY2hlZHVsZWQocm9vdCwgZXZlbnRUaW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmaWJlciA9IGZpYmVyLnJldHVybjtcbiAgfVxuXG4gIHtcbiAgICAvLyBUT0RPOiBVbnRpbCB3ZSByZS1sYW5kIHNraXBVbm1vdW50ZWRCb3VuZGFyaWVzIChzZWUgIzIwMTQ3KSwgdGhpcyB3YXJuaW5nXG4gICAgLy8gd2lsbCBmaXJlIGZvciBlcnJvcnMgdGhhdCBhcmUgdGhyb3duIGJ5IGRlc3Ryb3kgZnVuY3Rpb25zIGluc2lkZSBkZWxldGVkXG4gICAgLy8gdHJlZXMuIFdoYXQgaXQgc2hvdWxkIGluc3RlYWQgZG8gaXMgcHJvcGFnYXRlIHRoZSBlcnJvciB0byB0aGUgcGFyZW50IG9mXG4gICAgLy8gdGhlIGRlbGV0ZWQgdHJlZS4gSW4gdGhlIG1lYW50aW1lLCBkbyBub3QgYWRkIHRoaXMgd2FybmluZyB0byB0aGVcbiAgICAvLyBhbGxvd2xpc3Q7IHRoaXMgaXMgb25seSBmb3Igb3VyIGludGVybmFsIHVzZS5cbiAgICBlcnJvcignSW50ZXJuYWwgUmVhY3QgZXJyb3I6IEF0dGVtcHRlZCB0byBjYXB0dXJlIGEgY29tbWl0IHBoYXNlIGVycm9yICcgKyAnaW5zaWRlIGEgZGV0YWNoZWQgdHJlZS4gVGhpcyBpbmRpY2F0ZXMgYSBidWcgaW4gUmVhY3QuIExpa2VseSAnICsgJ2NhdXNlcyBpbmNsdWRlIGRlbGV0aW5nIHRoZSBzYW1lIGZpYmVyIG1vcmUgdGhhbiBvbmNlLCBjb21taXR0aW5nIGFuICcgKyAnYWxyZWFkeS1maW5pc2hlZCB0cmVlLCBvciBhbiBpbmNvbnNpc3RlbnQgcmV0dXJuIHBvaW50ZXIuXFxuXFxuJyArICdFcnJvciBtZXNzYWdlOlxcblxcbiVzJywgZXJyb3IkMSk7XG4gIH1cbn1cbmZ1bmN0aW9uIHBpbmdTdXNwZW5kZWRSb290KHJvb3QsIHdha2VhYmxlLCBwaW5nZWRMYW5lcykge1xuICB2YXIgcGluZ0NhY2hlID0gcm9vdC5waW5nQ2FjaGU7XG5cbiAgaWYgKHBpbmdDYWNoZSAhPT0gbnVsbCkge1xuICAgIC8vIFRoZSB3YWtlYWJsZSByZXNvbHZlZCwgc28gd2Ugbm8gbG9uZ2VyIG5lZWQgdG8gbWVtb2l6ZSwgYmVjYXVzZSBpdCB3aWxsXG4gICAgLy8gbmV2ZXIgYmUgdGhyb3duIGFnYWluLlxuICAgIHBpbmdDYWNoZS5kZWxldGUod2FrZWFibGUpO1xuICB9XG5cbiAgdmFyIGV2ZW50VGltZSA9IHJlcXVlc3RFdmVudFRpbWUoKTtcbiAgbWFya1Jvb3RQaW5nZWQocm9vdCwgcGluZ2VkTGFuZXMpO1xuICB3YXJuSWZTdXNwZW5zZVJlc29sdXRpb25Ob3RXcmFwcGVkV2l0aEFjdERFVihyb290KTtcblxuICBpZiAod29ya0luUHJvZ3Jlc3NSb290ID09PSByb290ICYmIGlzU3Vic2V0T2ZMYW5lcyh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcywgcGluZ2VkTGFuZXMpKSB7XG4gICAgLy8gUmVjZWl2ZWQgYSBwaW5nIGF0IHRoZSBzYW1lIHByaW9yaXR5IGxldmVsIGF0IHdoaWNoIHdlJ3JlIGN1cnJlbnRseVxuICAgIC8vIHJlbmRlcmluZy4gV2UgbWlnaHQgd2FudCB0byByZXN0YXJ0IHRoaXMgcmVuZGVyLiBUaGlzIHNob3VsZCBtaXJyb3JcbiAgICAvLyB0aGUgbG9naWMgb2Ygd2hldGhlciBvciBub3QgYSByb290IHN1c3BlbmRzIG9uY2UgaXQgY29tcGxldGVzLlxuICAgIC8vIFRPRE86IElmIHdlJ3JlIHJlbmRlcmluZyBzeW5jIGVpdGhlciBkdWUgdG8gU3luYywgQmF0Y2hlZCBvciBleHBpcmVkLFxuICAgIC8vIHdlIHNob3VsZCBwcm9iYWJseSBuZXZlciByZXN0YXJ0LlxuICAgIC8vIElmIHdlJ3JlIHN1c3BlbmRlZCB3aXRoIGRlbGF5LCBvciBpZiBpdCdzIGEgcmV0cnksIHdlJ2xsIGFsd2F5cyBzdXNwZW5kXG4gICAgLy8gc28gd2UgY2FuIGFsd2F5cyByZXN0YXJ0LlxuICAgIGlmICh3b3JrSW5Qcm9ncmVzc1Jvb3RFeGl0U3RhdHVzID09PSBSb290U3VzcGVuZGVkV2l0aERlbGF5IHx8IHdvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMgPT09IFJvb3RTdXNwZW5kZWQgJiYgaW5jbHVkZXNPbmx5UmV0cmllcyh3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcykgJiYgbm93KCkgLSBnbG9iYWxNb3N0UmVjZW50RmFsbGJhY2tUaW1lIDwgRkFMTEJBQ0tfVEhST1RUTEVfTVMpIHtcbiAgICAgIC8vIFJlc3RhcnQgZnJvbSB0aGUgcm9vdC5cbiAgICAgIHByZXBhcmVGcmVzaFN0YWNrKHJvb3QsIE5vTGFuZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBFdmVuIHRob3VnaCB3ZSBjYW4ndCByZXN0YXJ0IHJpZ2h0IG5vdywgd2UgbWlnaHQgZ2V0IGFuXG4gICAgICAvLyBvcHBvcnR1bml0eSBsYXRlci4gU28gd2UgbWFyayB0aGlzIHJlbmRlciBhcyBoYXZpbmcgYSBwaW5nLlxuICAgICAgd29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMgPSBtZXJnZUxhbmVzKHdvcmtJblByb2dyZXNzUm9vdFBpbmdlZExhbmVzLCBwaW5nZWRMYW5lcyk7XG4gICAgfVxuICB9XG5cbiAgZW5zdXJlUm9vdElzU2NoZWR1bGVkKHJvb3QsIGV2ZW50VGltZSk7XG59XG5cbmZ1bmN0aW9uIHJldHJ5VGltZWRPdXRCb3VuZGFyeShib3VuZGFyeUZpYmVyLCByZXRyeUxhbmUpIHtcbiAgLy8gVGhlIGJvdW5kYXJ5IGZpYmVyIChhIFN1c3BlbnNlIGNvbXBvbmVudCBvciBTdXNwZW5zZUxpc3QgY29tcG9uZW50KVxuICAvLyBwcmV2aW91c2x5IHdhcyByZW5kZXJlZCBpbiBpdHMgZmFsbGJhY2sgc3RhdGUuIE9uZSBvZiB0aGUgcHJvbWlzZXMgdGhhdFxuICAvLyBzdXNwZW5kZWQgaXQgaGFzIHJlc29sdmVkLCB3aGljaCBtZWFucyBhdCBsZWFzdCBwYXJ0IG9mIHRoZSB0cmVlIHdhc1xuICAvLyBsaWtlbHkgdW5ibG9ja2VkLiBUcnkgcmVuZGVyaW5nIGFnYWluLCBhdCBhIG5ldyBsYW5lcy5cbiAgaWYgKHJldHJ5TGFuZSA9PT0gTm9MYW5lKSB7XG4gICAgLy8gVE9ETzogQXNzaWduIHRoaXMgdG8gYHN1c3BlbnNlU3RhdGUucmV0cnlMYW5lYD8gdG8gYXZvaWRcbiAgICAvLyB1bm5lY2Vzc2FyeSBlbnRhbmdsZW1lbnQ/XG4gICAgcmV0cnlMYW5lID0gcmVxdWVzdFJldHJ5TGFuZShib3VuZGFyeUZpYmVyKTtcbiAgfSAvLyBUT0RPOiBTcGVjaWFsIGNhc2UgaWRsZSBwcmlvcml0eT9cblxuXG4gIHZhciBldmVudFRpbWUgPSByZXF1ZXN0RXZlbnRUaW1lKCk7XG4gIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSk7XG5cbiAgaWYgKHJvb3QgIT09IG51bGwpIHtcbiAgICBtYXJrUm9vdFVwZGF0ZWQocm9vdCwgcmV0cnlMYW5lLCBldmVudFRpbWUpO1xuICAgIGVuc3VyZVJvb3RJc1NjaGVkdWxlZChyb290LCBldmVudFRpbWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJldHJ5RGVoeWRyYXRlZFN1c3BlbnNlQm91bmRhcnkoYm91bmRhcnlGaWJlcikge1xuICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGJvdW5kYXJ5RmliZXIubWVtb2l6ZWRTdGF0ZTtcbiAgdmFyIHJldHJ5TGFuZSA9IE5vTGFuZTtcblxuICBpZiAoc3VzcGVuc2VTdGF0ZSAhPT0gbnVsbCkge1xuICAgIHJldHJ5TGFuZSA9IHN1c3BlbnNlU3RhdGUucmV0cnlMYW5lO1xuICB9XG5cbiAgcmV0cnlUaW1lZE91dEJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSk7XG59XG5mdW5jdGlvbiByZXNvbHZlUmV0cnlXYWtlYWJsZShib3VuZGFyeUZpYmVyLCB3YWtlYWJsZSkge1xuICB2YXIgcmV0cnlMYW5lID0gTm9MYW5lOyAvLyBEZWZhdWx0XG5cbiAgdmFyIHJldHJ5Q2FjaGU7XG5cbiAgc3dpdGNoIChib3VuZGFyeUZpYmVyLnRhZykge1xuICAgIGNhc2UgU3VzcGVuc2VDb21wb25lbnQ6XG4gICAgICByZXRyeUNhY2hlID0gYm91bmRhcnlGaWJlci5zdGF0ZU5vZGU7XG4gICAgICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGJvdW5kYXJ5RmliZXIubWVtb2l6ZWRTdGF0ZTtcblxuICAgICAgaWYgKHN1c3BlbnNlU3RhdGUgIT09IG51bGwpIHtcbiAgICAgICAgcmV0cnlMYW5lID0gc3VzcGVuc2VTdGF0ZS5yZXRyeUxhbmU7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBTdXNwZW5zZUxpc3RDb21wb25lbnQ6XG4gICAgICByZXRyeUNhY2hlID0gYm91bmRhcnlGaWJlci5zdGF0ZU5vZGU7XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1BpbmdlZCB1bmtub3duIHN1c3BlbnNlIGJvdW5kYXJ5IHR5cGUuICcgKyAnVGhpcyBpcyBwcm9iYWJseSBhIGJ1ZyBpbiBSZWFjdC4nKTtcbiAgfVxuXG4gIGlmIChyZXRyeUNhY2hlICE9PSBudWxsKSB7XG4gICAgLy8gVGhlIHdha2VhYmxlIHJlc29sdmVkLCBzbyB3ZSBubyBsb25nZXIgbmVlZCB0byBtZW1vaXplLCBiZWNhdXNlIGl0IHdpbGxcbiAgICAvLyBuZXZlciBiZSB0aHJvd24gYWdhaW4uXG4gICAgcmV0cnlDYWNoZS5kZWxldGUod2FrZWFibGUpO1xuICB9XG5cbiAgcmV0cnlUaW1lZE91dEJvdW5kYXJ5KGJvdW5kYXJ5RmliZXIsIHJldHJ5TGFuZSk7XG59IC8vIENvbXB1dGVzIHRoZSBuZXh0IEp1c3QgTm90aWNlYWJsZSBEaWZmZXJlbmNlIChKTkQpIGJvdW5kYXJ5LlxuLy8gVGhlIHRoZW9yeSBpcyB0aGF0IGEgcGVyc29uIGNhbid0IHRlbGwgdGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBzbWFsbCBkaWZmZXJlbmNlcyBpbiB0aW1lLlxuLy8gVGhlcmVmb3JlLCBpZiB3ZSB3YWl0IGEgYml0IGxvbmdlciB0aGFuIG5lY2Vzc2FyeSB0aGF0IHdvbid0IHRyYW5zbGF0ZSB0byBhIG5vdGljZWFibGVcbi8vIGRpZmZlcmVuY2UgaW4gdGhlIGV4cGVyaWVuY2UuIEhvd2V2ZXIsIHdhaXRpbmcgZm9yIGxvbmdlciBtaWdodCBtZWFuIHRoYXQgd2UgY2FuIGF2b2lkXG4vLyBzaG93aW5nIGFuIGludGVybWVkaWF0ZSBsb2FkaW5nIHN0YXRlLiBUaGUgbG9uZ2VyIHdlIGhhdmUgYWxyZWFkeSB3YWl0ZWQsIHRoZSBoYXJkZXIgaXRcbi8vIGlzIHRvIHRlbGwgc21hbGwgZGlmZmVyZW5jZXMgaW4gdGltZS4gVGhlcmVmb3JlLCB0aGUgbG9uZ2VyIHdlJ3ZlIGFscmVhZHkgd2FpdGVkLFxuLy8gdGhlIGxvbmdlciB3ZSBjYW4gd2FpdCBhZGRpdGlvbmFsbHkuIEF0IHNvbWUgcG9pbnQgd2UgaGF2ZSB0byBnaXZlIHVwIHRob3VnaC5cbi8vIFdlIHBpY2sgYSB0cmFpbiBtb2RlbCB3aGVyZSB0aGUgbmV4dCBib3VuZGFyeSBjb21taXRzIGF0IGEgY29uc2lzdGVudCBzY2hlZHVsZS5cbi8vIFRoZXNlIHBhcnRpY3VsYXIgbnVtYmVycyBhcmUgdmFndWUgZXN0aW1hdGVzLiBXZSBleHBlY3QgdG8gYWRqdXN0IHRoZW0gYmFzZWQgb24gcmVzZWFyY2guXG5cbmZ1bmN0aW9uIGpuZCh0aW1lRWxhcHNlZCkge1xuICByZXR1cm4gdGltZUVsYXBzZWQgPCAxMjAgPyAxMjAgOiB0aW1lRWxhcHNlZCA8IDQ4MCA/IDQ4MCA6IHRpbWVFbGFwc2VkIDwgMTA4MCA/IDEwODAgOiB0aW1lRWxhcHNlZCA8IDE5MjAgPyAxOTIwIDogdGltZUVsYXBzZWQgPCAzMDAwID8gMzAwMCA6IHRpbWVFbGFwc2VkIDwgNDMyMCA/IDQzMjAgOiBjZWlsKHRpbWVFbGFwc2VkIC8gMTk2MCkgKiAxOTYwO1xufVxuXG5mdW5jdGlvbiBjaGVja0Zvck5lc3RlZFVwZGF0ZXMoKSB7XG4gIGlmIChuZXN0ZWRVcGRhdGVDb3VudCA+IE5FU1RFRF9VUERBVEVfTElNSVQpIHtcbiAgICBuZXN0ZWRVcGRhdGVDb3VudCA9IDA7XG4gICAgcm9vdFdpdGhOZXN0ZWRVcGRhdGVzID0gbnVsbDtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ01heGltdW0gdXBkYXRlIGRlcHRoIGV4Y2VlZGVkLiBUaGlzIGNhbiBoYXBwZW4gd2hlbiBhIGNvbXBvbmVudCAnICsgJ3JlcGVhdGVkbHkgY2FsbHMgc2V0U3RhdGUgaW5zaWRlIGNvbXBvbmVudFdpbGxVcGRhdGUgb3IgJyArICdjb21wb25lbnREaWRVcGRhdGUuIFJlYWN0IGxpbWl0cyB0aGUgbnVtYmVyIG9mIG5lc3RlZCB1cGRhdGVzIHRvICcgKyAncHJldmVudCBpbmZpbml0ZSBsb29wcy4nKTtcbiAgfVxuXG4gIHtcbiAgICBpZiAobmVzdGVkUGFzc2l2ZVVwZGF0ZUNvdW50ID4gTkVTVEVEX1BBU1NJVkVfVVBEQVRFX0xJTUlUKSB7XG4gICAgICBuZXN0ZWRQYXNzaXZlVXBkYXRlQ291bnQgPSAwO1xuICAgICAgcm9vdFdpdGhQYXNzaXZlTmVzdGVkVXBkYXRlcyA9IG51bGw7XG5cbiAgICAgIGVycm9yKCdNYXhpbXVtIHVwZGF0ZSBkZXB0aCBleGNlZWRlZC4gVGhpcyBjYW4gaGFwcGVuIHdoZW4gYSBjb21wb25lbnQgJyArIFwiY2FsbHMgc2V0U3RhdGUgaW5zaWRlIHVzZUVmZmVjdCwgYnV0IHVzZUVmZmVjdCBlaXRoZXIgZG9lc24ndCBcIiArICdoYXZlIGEgZGVwZW5kZW5jeSBhcnJheSwgb3Igb25lIG9mIHRoZSBkZXBlbmRlbmNpZXMgY2hhbmdlcyBvbiAnICsgJ2V2ZXJ5IHJlbmRlci4nKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZmx1c2hSZW5kZXJQaGFzZVN0cmljdE1vZGVXYXJuaW5nc0luREVWKCkge1xuICB7XG4gICAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MuZmx1c2hMZWdhY3lDb250ZXh0V2FybmluZygpO1xuXG4gICAge1xuICAgICAgUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MuZmx1c2hQZW5kaW5nVW5zYWZlTGlmZWN5Y2xlV2FybmluZ3MoKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWl0RG91YmxlSW52b2tlRWZmZWN0c0luREVWKGZpYmVyLCBoYXNQYXNzaXZlRWZmZWN0cykge1xuICB7XG4gICAgLy8gVE9ETyAoU3RyaWN0RWZmZWN0cykgU2hvdWxkIHdlIHNldCBhIG1hcmtlciBvbiB0aGUgcm9vdCBpZiBpdCBjb250YWlucyBzdHJpY3QgZWZmZWN0c1xuICAgIC8vIHNvIHdlIGRvbid0IHRyYXZlcnNlIHVubmVjZXNzYXJpbHk/IHNpbWlsYXIgdG8gc3VidHJlZUZsYWdzIGJ1dCBqdXN0IGF0IHRoZSByb290IGxldmVsLlxuICAgIC8vIE1heWJlIG5vdCBhIGJpZyBkZWFsIHNpbmNlIHRoaXMgaXMgREVWIG9ubHkgYmVoYXZpb3IuXG4gICAgc2V0Q3VycmVudEZpYmVyKGZpYmVyKTtcbiAgICBpbnZva2VFZmZlY3RzSW5EZXYoZmliZXIsIE1vdW50TGF5b3V0RGV2LCBpbnZva2VMYXlvdXRFZmZlY3RVbm1vdW50SW5ERVYpO1xuXG4gICAgaWYgKGhhc1Bhc3NpdmVFZmZlY3RzKSB7XG4gICAgICBpbnZva2VFZmZlY3RzSW5EZXYoZmliZXIsIE1vdW50UGFzc2l2ZURldiwgaW52b2tlUGFzc2l2ZUVmZmVjdFVubW91bnRJbkRFVik7XG4gICAgfVxuXG4gICAgaW52b2tlRWZmZWN0c0luRGV2KGZpYmVyLCBNb3VudExheW91dERldiwgaW52b2tlTGF5b3V0RWZmZWN0TW91bnRJbkRFVik7XG5cbiAgICBpZiAoaGFzUGFzc2l2ZUVmZmVjdHMpIHtcbiAgICAgIGludm9rZUVmZmVjdHNJbkRldihmaWJlciwgTW91bnRQYXNzaXZlRGV2LCBpbnZva2VQYXNzaXZlRWZmZWN0TW91bnRJbkRFVik7XG4gICAgfVxuXG4gICAgcmVzZXRDdXJyZW50RmliZXIoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZva2VFZmZlY3RzSW5EZXYoZmlyc3RDaGlsZCwgZmliZXJGbGFncywgaW52b2tlRWZmZWN0Rm4pIHtcbiAge1xuICAgIC8vIFdlIGRvbid0IG5lZWQgdG8gcmUtY2hlY2sgU3RyaWN0RWZmZWN0c01vZGUgaGVyZS5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkIGlmIHRoYXQgY2hlY2sgaGFzIGFscmVhZHkgcGFzc2VkLlxuICAgIHZhciBjdXJyZW50ID0gZmlyc3RDaGlsZDtcbiAgICB2YXIgc3VidHJlZVJvb3QgPSBudWxsO1xuXG4gICAgd2hpbGUgKGN1cnJlbnQgIT09IG51bGwpIHtcbiAgICAgIHZhciBwcmltYXJ5U3VidHJlZUZsYWcgPSBjdXJyZW50LnN1YnRyZWVGbGFncyAmIGZpYmVyRmxhZ3M7XG5cbiAgICAgIGlmIChjdXJyZW50ICE9PSBzdWJ0cmVlUm9vdCAmJiBjdXJyZW50LmNoaWxkICE9PSBudWxsICYmIHByaW1hcnlTdWJ0cmVlRmxhZyAhPT0gTm9GbGFncykge1xuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5jaGlsZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICgoY3VycmVudC5mbGFncyAmIGZpYmVyRmxhZ3MpICE9PSBOb0ZsYWdzKSB7XG4gICAgICAgICAgaW52b2tlRWZmZWN0Rm4oY3VycmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY3VycmVudC5zaWJsaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgY3VycmVudCA9IGN1cnJlbnQuc2libGluZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJyZW50ID0gc3VidHJlZVJvb3QgPSBjdXJyZW50LnJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgZGlkV2FyblN0YXRlVXBkYXRlRm9yTm90WWV0TW91bnRlZENvbXBvbmVudCA9IG51bGw7XG5mdW5jdGlvbiB3YXJuQWJvdXRVcGRhdGVPbk5vdFlldE1vdW50ZWRGaWJlckluREVWKGZpYmVyKSB7XG4gIHtcbiAgICBpZiAoKGV4ZWN1dGlvbkNvbnRleHQgJiBSZW5kZXJDb250ZXh0KSAhPT0gTm9Db250ZXh0KSB7XG4gICAgICAvLyBXZSBsZXQgdGhlIG90aGVyIHdhcm5pbmcgYWJvdXQgcmVuZGVyIHBoYXNlIHVwZGF0ZXMgZGVhbCB3aXRoIHRoaXMgb25lLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghKGZpYmVyLm1vZGUgJiBDb25jdXJyZW50TW9kZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGFnID0gZmliZXIudGFnO1xuXG4gICAgaWYgKHRhZyAhPT0gSW5kZXRlcm1pbmF0ZUNvbXBvbmVudCAmJiB0YWcgIT09IEhvc3RSb290ICYmIHRhZyAhPT0gQ2xhc3NDb21wb25lbnQgJiYgdGFnICE9PSBGdW5jdGlvbkNvbXBvbmVudCAmJiB0YWcgIT09IEZvcndhcmRSZWYgJiYgdGFnICE9PSBNZW1vQ29tcG9uZW50ICYmIHRhZyAhPT0gU2ltcGxlTWVtb0NvbXBvbmVudCkge1xuICAgICAgLy8gT25seSB3YXJuIGZvciB1c2VyLWRlZmluZWQgY29tcG9uZW50cywgbm90IGludGVybmFsIG9uZXMgbGlrZSBTdXNwZW5zZS5cbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFdlIHNob3cgdGhlIHdob2xlIHN0YWNrIGJ1dCBkZWR1cGUgb24gdGhlIHRvcCBjb21wb25lbnQncyBuYW1lIGJlY2F1c2VcbiAgICAvLyB0aGUgcHJvYmxlbWF0aWMgY29kZSBhbG1vc3QgYWx3YXlzIGxpZXMgaW5zaWRlIHRoYXQgY29tcG9uZW50LlxuXG5cbiAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWVGcm9tRmliZXIoZmliZXIpIHx8ICdSZWFjdENvbXBvbmVudCc7XG5cbiAgICBpZiAoZGlkV2FyblN0YXRlVXBkYXRlRm9yTm90WWV0TW91bnRlZENvbXBvbmVudCAhPT0gbnVsbCkge1xuICAgICAgaWYgKGRpZFdhcm5TdGF0ZVVwZGF0ZUZvck5vdFlldE1vdW50ZWRDb21wb25lbnQuaGFzKGNvbXBvbmVudE5hbWUpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgZGlkV2FyblN0YXRlVXBkYXRlRm9yTm90WWV0TW91bnRlZENvbXBvbmVudC5hZGQoY29tcG9uZW50TmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRpZFdhcm5TdGF0ZVVwZGF0ZUZvck5vdFlldE1vdW50ZWRDb21wb25lbnQgPSBuZXcgU2V0KFtjb21wb25lbnROYW1lXSk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzRmliZXIgPSBjdXJyZW50O1xuXG4gICAgdHJ5IHtcbiAgICAgIHNldEN1cnJlbnRGaWJlcihmaWJlcik7XG5cbiAgICAgIGVycm9yKFwiQ2FuJ3QgcGVyZm9ybSBhIFJlYWN0IHN0YXRlIHVwZGF0ZSBvbiBhIGNvbXBvbmVudCB0aGF0IGhhc24ndCBtb3VudGVkIHlldC4gXCIgKyAnVGhpcyBpbmRpY2F0ZXMgdGhhdCB5b3UgaGF2ZSBhIHNpZGUtZWZmZWN0IGluIHlvdXIgcmVuZGVyIGZ1bmN0aW9uIHRoYXQgJyArICdhc3luY2hyb25vdXNseSBsYXRlciBjYWxscyB0cmllcyB0byB1cGRhdGUgdGhlIGNvbXBvbmVudC4gTW92ZSB0aGlzIHdvcmsgdG8gJyArICd1c2VFZmZlY3QgaW5zdGVhZC4nKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKHByZXZpb3VzRmliZXIpIHtcbiAgICAgICAgc2V0Q3VycmVudEZpYmVyKGZpYmVyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc2V0Q3VycmVudEZpYmVyKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG52YXIgYmVnaW5Xb3JrJDE7XG5cbntcbiAgdmFyIGR1bW15RmliZXIgPSBudWxsO1xuXG4gIGJlZ2luV29yayQxID0gZnVuY3Rpb24gKGN1cnJlbnQsIHVuaXRPZldvcmssIGxhbmVzKSB7XG4gICAgLy8gSWYgYSBjb21wb25lbnQgdGhyb3dzIGFuIGVycm9yLCB3ZSByZXBsYXkgaXQgYWdhaW4gaW4gYSBzeW5jaHJvbm91c2x5XG4gICAgLy8gZGlzcGF0Y2hlZCBldmVudCwgc28gdGhhdCB0aGUgZGVidWdnZXIgd2lsbCB0cmVhdCBpdCBhcyBhbiB1bmNhdWdodFxuICAgIC8vIGVycm9yIFNlZSBSZWFjdEVycm9yVXRpbHMgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgLy8gQmVmb3JlIGVudGVyaW5nIHRoZSBiZWdpbiBwaGFzZSwgY29weSB0aGUgd29yay1pbi1wcm9ncmVzcyBvbnRvIGEgZHVtbXlcbiAgICAvLyBmaWJlci4gSWYgYmVnaW5Xb3JrIHRocm93cywgd2UnbGwgdXNlIHRoaXMgdG8gcmVzZXQgdGhlIHN0YXRlLlxuICAgIHZhciBvcmlnaW5hbFdvcmtJblByb2dyZXNzQ29weSA9IGFzc2lnbkZpYmVyUHJvcGVydGllc0luREVWKGR1bW15RmliZXIsIHVuaXRPZldvcmspO1xuXG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBiZWdpbldvcmsoY3VycmVudCwgdW5pdE9mV29yaywgbGFuZXMpO1xuICAgIH0gY2F0Y2ggKG9yaWdpbmFsRXJyb3IpIHtcbiAgICAgIGlmIChkaWRTdXNwZW5kT3JFcnJvcldoaWxlSHlkcmF0aW5nREVWKCkgfHwgb3JpZ2luYWxFcnJvciAhPT0gbnVsbCAmJiB0eXBlb2Ygb3JpZ2luYWxFcnJvciA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG9yaWdpbmFsRXJyb3IudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBEb24ndCByZXBsYXkgcHJvbWlzZXMuXG4gICAgICAgIC8vIERvbid0IHJlcGxheSBlcnJvcnMgaWYgd2UgYXJlIGh5ZHJhdGluZyBhbmQgaGF2ZSBhbHJlYWR5IHN1c3BlbmRlZCBvciBoYW5kbGVkIGFuIGVycm9yXG4gICAgICAgIHRocm93IG9yaWdpbmFsRXJyb3I7XG4gICAgICB9IC8vIEtlZXAgdGhpcyBjb2RlIGluIHN5bmMgd2l0aCBoYW5kbGVFcnJvcjsgYW55IGNoYW5nZXMgaGVyZSBtdXN0IGhhdmVcbiAgICAgIC8vIGNvcnJlc3BvbmRpbmcgY2hhbmdlcyB0aGVyZS5cblxuXG4gICAgICByZXNldENvbnRleHREZXBlbmRlbmNpZXMoKTtcbiAgICAgIHJlc2V0SG9va3NBZnRlclRocm93KCk7IC8vIERvbid0IHJlc2V0IGN1cnJlbnQgZGVidWcgZmliZXIsIHNpbmNlIHdlJ3JlIGFib3V0IHRvIHdvcmsgb24gdGhlXG4gICAgICAvLyBzYW1lIGZpYmVyIGFnYWluLlxuICAgICAgLy8gVW53aW5kIHRoZSBmYWlsZWQgc3RhY2sgZnJhbWVcblxuICAgICAgdW53aW5kSW50ZXJydXB0ZWRXb3JrKGN1cnJlbnQsIHVuaXRPZldvcmspOyAvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBwcm9wZXJ0aWVzIG9mIHRoZSBmaWJlci5cblxuICAgICAgYXNzaWduRmliZXJQcm9wZXJ0aWVzSW5ERVYodW5pdE9mV29yaywgb3JpZ2luYWxXb3JrSW5Qcm9ncmVzc0NvcHkpO1xuXG4gICAgICBpZiAoIHVuaXRPZldvcmsubW9kZSAmIFByb2ZpbGVNb2RlKSB7XG4gICAgICAgIC8vIFJlc2V0IHRoZSBwcm9maWxlciB0aW1lci5cbiAgICAgICAgc3RhcnRQcm9maWxlclRpbWVyKHVuaXRPZldvcmspO1xuICAgICAgfSAvLyBSdW4gYmVnaW5Xb3JrIGFnYWluLlxuXG5cbiAgICAgIGludm9rZUd1YXJkZWRDYWxsYmFjayhudWxsLCBiZWdpbldvcmssIG51bGwsIGN1cnJlbnQsIHVuaXRPZldvcmssIGxhbmVzKTtcblxuICAgICAgaWYgKGhhc0NhdWdodEVycm9yKCkpIHtcbiAgICAgICAgdmFyIHJlcGxheUVycm9yID0gY2xlYXJDYXVnaHRFcnJvcigpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcmVwbGF5RXJyb3IgPT09ICdvYmplY3QnICYmIHJlcGxheUVycm9yICE9PSBudWxsICYmIHJlcGxheUVycm9yLl9zdXBwcmVzc0xvZ2dpbmcgJiYgdHlwZW9mIG9yaWdpbmFsRXJyb3IgPT09ICdvYmplY3QnICYmIG9yaWdpbmFsRXJyb3IgIT09IG51bGwgJiYgIW9yaWdpbmFsRXJyb3IuX3N1cHByZXNzTG9nZ2luZykge1xuICAgICAgICAgIC8vIElmIHN1cHByZXNzZWQsIGxldCB0aGUgZmxhZyBjYXJyeSBvdmVyIHRvIHRoZSBvcmlnaW5hbCBlcnJvciB3aGljaCBpcyB0aGUgb25lIHdlJ2xsIHJldGhyb3cuXG4gICAgICAgICAgb3JpZ2luYWxFcnJvci5fc3VwcHJlc3NMb2dnaW5nID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBXZSBhbHdheXMgdGhyb3cgdGhlIG9yaWdpbmFsIGVycm9yIGluIGNhc2UgdGhlIHNlY29uZCByZW5kZXIgcGFzcyBpcyBub3QgaWRlbXBvdGVudC5cbiAgICAgIC8vIFRoaXMgY2FuIGhhcHBlbiBpZiBhIG1lbW9pemVkIGZ1bmN0aW9uIG9yIENvbW1vbkpTIG1vZHVsZSBkb2Vzbid0IHRocm93IGFmdGVyIGZpcnN0IGludm9jYXRpb24uXG5cblxuICAgICAgdGhyb3cgb3JpZ2luYWxFcnJvcjtcbiAgICB9XG4gIH07XG59XG5cbnZhciBkaWRXYXJuQWJvdXRVcGRhdGVJblJlbmRlciA9IGZhbHNlO1xudmFyIGRpZFdhcm5BYm91dFVwZGF0ZUluUmVuZGVyRm9yQW5vdGhlckNvbXBvbmVudDtcblxue1xuICBkaWRXYXJuQWJvdXRVcGRhdGVJblJlbmRlckZvckFub3RoZXJDb21wb25lbnQgPSBuZXcgU2V0KCk7XG59XG5cbmZ1bmN0aW9uIHdhcm5BYm91dFJlbmRlclBoYXNlVXBkYXRlc0luREVWKGZpYmVyKSB7XG4gIHtcbiAgICBpZiAoaXNSZW5kZXJpbmcgJiYgIWdldElzVXBkYXRpbmdPcGFxdWVWYWx1ZUluUmVuZGVyUGhhc2VJbkRFVigpKSB7XG4gICAgICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgICAgICBjYXNlIEZ1bmN0aW9uQ29tcG9uZW50OlxuICAgICAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudDpcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YXIgcmVuZGVyaW5nQ29tcG9uZW50TmFtZSA9IHdvcmtJblByb2dyZXNzICYmIGdldENvbXBvbmVudE5hbWVGcm9tRmliZXIod29ya0luUHJvZ3Jlc3MpIHx8ICdVbmtub3duJzsgLy8gRGVkdXBlIGJ5IHRoZSByZW5kZXJpbmcgY29tcG9uZW50IGJlY2F1c2UgaXQncyB0aGUgb25lIHRoYXQgbmVlZHMgdG8gYmUgZml4ZWQuXG5cbiAgICAgICAgICAgIHZhciBkZWR1cGVLZXkgPSByZW5kZXJpbmdDb21wb25lbnROYW1lO1xuXG4gICAgICAgICAgICBpZiAoIWRpZFdhcm5BYm91dFVwZGF0ZUluUmVuZGVyRm9yQW5vdGhlckNvbXBvbmVudC5oYXMoZGVkdXBlS2V5KSkge1xuICAgICAgICAgICAgICBkaWRXYXJuQWJvdXRVcGRhdGVJblJlbmRlckZvckFub3RoZXJDb21wb25lbnQuYWRkKGRlZHVwZUtleSk7XG4gICAgICAgICAgICAgIHZhciBzZXRTdGF0ZUNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKGZpYmVyKSB8fCAnVW5rbm93bic7XG5cbiAgICAgICAgICAgICAgZXJyb3IoJ0Nhbm5vdCB1cGRhdGUgYSBjb21wb25lbnQgKGAlc2ApIHdoaWxlIHJlbmRlcmluZyBhICcgKyAnZGlmZmVyZW50IGNvbXBvbmVudCAoYCVzYCkuIFRvIGxvY2F0ZSB0aGUgYmFkIHNldFN0YXRlKCkgY2FsbCBpbnNpZGUgYCVzYCwgJyArICdmb2xsb3cgdGhlIHN0YWNrIHRyYWNlIGFzIGRlc2NyaWJlZCBpbiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvc2V0c3RhdGUtaW4tcmVuZGVyJywgc2V0U3RhdGVDb21wb25lbnROYW1lLCByZW5kZXJpbmdDb21wb25lbnROYW1lLCByZW5kZXJpbmdDb21wb25lbnROYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKCFkaWRXYXJuQWJvdXRVcGRhdGVJblJlbmRlcikge1xuICAgICAgICAgICAgICBlcnJvcignQ2Fubm90IHVwZGF0ZSBkdXJpbmcgYW4gZXhpc3Rpbmcgc3RhdGUgdHJhbnNpdGlvbiAoc3VjaCBhcyAnICsgJ3dpdGhpbiBgcmVuZGVyYCkuIFJlbmRlciBtZXRob2RzIHNob3VsZCBiZSBhIHB1cmUgJyArICdmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuJyk7XG5cbiAgICAgICAgICAgICAgZGlkV2FybkFib3V0VXBkYXRlSW5SZW5kZXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJlc3RvcmVQZW5kaW5nVXBkYXRlcnMocm9vdCwgbGFuZXMpIHtcbiAge1xuICAgIGlmIChpc0RldlRvb2xzUHJlc2VudCkge1xuICAgICAgdmFyIG1lbW9pemVkVXBkYXRlcnMgPSByb290Lm1lbW9pemVkVXBkYXRlcnM7XG4gICAgICBtZW1vaXplZFVwZGF0ZXJzLmZvckVhY2goZnVuY3Rpb24gKHNjaGVkdWxpbmdGaWJlcikge1xuICAgICAgICBhZGRGaWJlclRvTGFuZXNNYXAocm9vdCwgc2NoZWR1bGluZ0ZpYmVyLCBsYW5lcyk7XG4gICAgICB9KTsgLy8gVGhpcyBmdW5jdGlvbiBpbnRlbnRpb25hbGx5IGRvZXMgbm90IGNsZWFyIG1lbW9pemVkIHVwZGF0ZXJzLlxuICAgICAgLy8gVGhvc2UgbWF5IHN0aWxsIGJlIHJlbGV2YW50IHRvIHRoZSBjdXJyZW50IGNvbW1pdFxuICAgICAgLy8gYW5kIGEgZnV0dXJlIG9uZSAoZS5nLiBTdXNwZW5zZSkuXG4gICAgfVxuICB9XG59XG52YXIgZmFrZUFjdENhbGxiYWNrTm9kZSA9IHt9O1xuXG5mdW5jdGlvbiBzY2hlZHVsZUNhbGxiYWNrJDEocHJpb3JpdHlMZXZlbCwgY2FsbGJhY2spIHtcbiAge1xuICAgIC8vIElmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYW4gYGFjdGAgc2NvcGUsIGJ5cGFzcyBTY2hlZHVsZXIgYW5kIHB1c2ggdG9cbiAgICAvLyB0aGUgYGFjdGAgcXVldWUgaW5zdGVhZC5cbiAgICB2YXIgYWN0UXVldWUgPSBSZWFjdEN1cnJlbnRBY3RRdWV1ZSQxLmN1cnJlbnQ7XG5cbiAgICBpZiAoYWN0UXVldWUgIT09IG51bGwpIHtcbiAgICAgIGFjdFF1ZXVlLnB1c2goY2FsbGJhY2spO1xuICAgICAgcmV0dXJuIGZha2VBY3RDYWxsYmFja05vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzY2hlZHVsZUNhbGxiYWNrKHByaW9yaXR5TGV2ZWwsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2FuY2VsQ2FsbGJhY2skMShjYWxsYmFja05vZGUpIHtcbiAgaWYgKCBjYWxsYmFja05vZGUgPT09IGZha2VBY3RDYWxsYmFja05vZGUpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gSW4gcHJvZHVjdGlvbiwgYWx3YXlzIGNhbGwgU2NoZWR1bGVyLiBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgc3RyaXBwZWQgb3V0LlxuXG5cbiAgcmV0dXJuIGNhbmNlbENhbGxiYWNrKGNhbGxiYWNrTm9kZSk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZEZvcmNlRmx1c2hGYWxsYmFja3NJbkRFVigpIHtcbiAgLy8gTmV2ZXIgZm9yY2UgZmx1c2ggaW4gcHJvZHVjdGlvbi4gVGhpcyBmdW5jdGlvbiBzaG91bGQgZ2V0IHN0cmlwcGVkIG91dC5cbiAgcmV0dXJuICBSZWFjdEN1cnJlbnRBY3RRdWV1ZSQxLmN1cnJlbnQgIT09IG51bGw7XG59XG5cbmZ1bmN0aW9uIHdhcm5JZlVwZGF0ZXNOb3RXcmFwcGVkV2l0aEFjdERFVihmaWJlcikge1xuICB7XG4gICAgaWYgKGZpYmVyLm1vZGUgJiBDb25jdXJyZW50TW9kZSkge1xuICAgICAgaWYgKCFpc0NvbmN1cnJlbnRBY3RFbnZpcm9ubWVudCgpKSB7XG4gICAgICAgIC8vIE5vdCBpbiBhbiBhY3QgZW52aXJvbm1lbnQuIE5vIG5lZWQgdG8gd2Fybi5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMZWdhY3kgbW9kZSBoYXMgYWRkaXRpb25hbCBjYXNlcyB3aGVyZSB3ZSBzdXBwcmVzcyBhIHdhcm5pbmcuXG4gICAgICBpZiAoIWlzTGVnYWN5QWN0RW52aXJvbm1lbnQoKSkge1xuICAgICAgICAvLyBOb3QgaW4gYW4gYWN0IGVudmlyb25tZW50LiBObyBuZWVkIHRvIHdhcm4uXG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGV4ZWN1dGlvbkNvbnRleHQgIT09IE5vQ29udGV4dCkge1xuICAgICAgICAvLyBMZWdhY3kgbW9kZSBkb2Vzbid0IHdhcm4gaWYgdGhlIHVwZGF0ZSBpcyBiYXRjaGVkLCBpLmUuXG4gICAgICAgIC8vIGJhdGNoZWRVcGRhdGVzIG9yIGZsdXNoU3luYy5cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoZmliZXIudGFnICE9PSBGdW5jdGlvbkNvbXBvbmVudCAmJiBmaWJlci50YWcgIT09IEZvcndhcmRSZWYgJiYgZmliZXIudGFnICE9PSBTaW1wbGVNZW1vQ29tcG9uZW50KSB7XG4gICAgICAgIC8vIEZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eSB3aXRoIHByZS1ob29rcyBjb2RlLCBsZWdhY3kgbW9kZSBvbmx5XG4gICAgICAgIC8vIHdhcm5zIGZvciB1cGRhdGVzIHRoYXQgb3JpZ2luYXRlIGZyb20gYSBob29rLlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKFJlYWN0Q3VycmVudEFjdFF1ZXVlJDEuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgdmFyIHByZXZpb3VzRmliZXIgPSBjdXJyZW50O1xuXG4gICAgICB0cnkge1xuICAgICAgICBzZXRDdXJyZW50RmliZXIoZmliZXIpO1xuXG4gICAgICAgIGVycm9yKCdBbiB1cGRhdGUgdG8gJXMgaW5zaWRlIGEgdGVzdCB3YXMgbm90IHdyYXBwZWQgaW4gYWN0KC4uLikuXFxuXFxuJyArICdXaGVuIHRlc3RpbmcsIGNvZGUgdGhhdCBjYXVzZXMgUmVhY3Qgc3RhdGUgdXBkYXRlcyBzaG91bGQgYmUgJyArICd3cmFwcGVkIGludG8gYWN0KC4uLik6XFxuXFxuJyArICdhY3QoKCkgPT4ge1xcbicgKyAnICAvKiBmaXJlIGV2ZW50cyB0aGF0IHVwZGF0ZSBzdGF0ZSAqL1xcbicgKyAnfSk7XFxuJyArICcvKiBhc3NlcnQgb24gdGhlIG91dHB1dCAqL1xcblxcbicgKyBcIlRoaXMgZW5zdXJlcyB0aGF0IHlvdSdyZSB0ZXN0aW5nIHRoZSBiZWhhdmlvciB0aGUgdXNlciB3b3VsZCBzZWUgXCIgKyAnaW4gdGhlIGJyb3dzZXIuJyArICcgTGVhcm4gbW9yZSBhdCBodHRwczovL3JlYWN0anMub3JnL2xpbmsvd3JhcC10ZXN0cy13aXRoLWFjdCcsIGdldENvbXBvbmVudE5hbWVGcm9tRmliZXIoZmliZXIpKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChwcmV2aW91c0ZpYmVyKSB7XG4gICAgICAgICAgc2V0Q3VycmVudEZpYmVyKGZpYmVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNldEN1cnJlbnRGaWJlcigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm5JZlN1c3BlbnNlUmVzb2x1dGlvbk5vdFdyYXBwZWRXaXRoQWN0REVWKHJvb3QpIHtcbiAge1xuICAgIGlmIChyb290LnRhZyAhPT0gTGVnYWN5Um9vdCAmJiBpc0NvbmN1cnJlbnRBY3RFbnZpcm9ubWVudCgpICYmIFJlYWN0Q3VycmVudEFjdFF1ZXVlJDEuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgZXJyb3IoJ0Egc3VzcGVuZGVkIHJlc291cmNlIGZpbmlzaGVkIGxvYWRpbmcgaW5zaWRlIGEgdGVzdCwgYnV0IHRoZSBldmVudCAnICsgJ3dhcyBub3Qgd3JhcHBlZCBpbiBhY3QoLi4uKS5cXG5cXG4nICsgJ1doZW4gdGVzdGluZywgY29kZSB0aGF0IHJlc29sdmVzIHN1c3BlbmRlZCBkYXRhIHNob3VsZCBiZSB3cmFwcGVkICcgKyAnaW50byBhY3QoLi4uKTpcXG5cXG4nICsgJ2FjdCgoKSA9PiB7XFxuJyArICcgIC8qIGZpbmlzaCBsb2FkaW5nIHN1c3BlbmRlZCBkYXRhICovXFxuJyArICd9KTtcXG4nICsgJy8qIGFzc2VydCBvbiB0aGUgb3V0cHV0ICovXFxuXFxuJyArIFwiVGhpcyBlbnN1cmVzIHRoYXQgeW91J3JlIHRlc3RpbmcgdGhlIGJlaGF2aW9yIHRoZSB1c2VyIHdvdWxkIHNlZSBcIiArICdpbiB0aGUgYnJvd3Nlci4nICsgJyBMZWFybiBtb3JlIGF0IGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay93cmFwLXRlc3RzLXdpdGgtYWN0Jyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldElzUnVubmluZ0luc2VydGlvbkVmZmVjdChpc1J1bm5pbmcpIHtcbiAge1xuICAgIGlzUnVubmluZ0luc2VydGlvbkVmZmVjdCA9IGlzUnVubmluZztcbiAgfVxufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1pbnRlcm5hbC9wcm9kLWVycm9yLWNvZGVzICovXG52YXIgcmVzb2x2ZUZhbWlseSA9IG51bGw7IC8vICRGbG93Rml4TWUgRmxvdyBnZXRzIGNvbmZ1c2VkIGJ5IGEgV2Vha1NldCBmZWF0dXJlIGNoZWNrIGJlbG93LlxuXG52YXIgZmFpbGVkQm91bmRhcmllcyA9IG51bGw7XG52YXIgc2V0UmVmcmVzaEhhbmRsZXIgPSBmdW5jdGlvbiAoaGFuZGxlcikge1xuICB7XG4gICAgcmVzb2x2ZUZhbWlseSA9IGhhbmRsZXI7XG4gIH1cbn07XG5mdW5jdGlvbiByZXNvbHZlRnVuY3Rpb25Gb3JIb3RSZWxvYWRpbmcodHlwZSkge1xuICB7XG4gICAgaWYgKHJlc29sdmVGYW1pbHkgPT09IG51bGwpIHtcbiAgICAgIC8vIEhvdCByZWxvYWRpbmcgaXMgZGlzYWJsZWQuXG4gICAgICByZXR1cm4gdHlwZTtcbiAgICB9XG5cbiAgICB2YXIgZmFtaWx5ID0gcmVzb2x2ZUZhbWlseSh0eXBlKTtcblxuICAgIGlmIChmYW1pbHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfSAvLyBVc2UgdGhlIGxhdGVzdCBrbm93biBpbXBsZW1lbnRhdGlvbi5cblxuXG4gICAgcmV0dXJuIGZhbWlseS5jdXJyZW50O1xuICB9XG59XG5mdW5jdGlvbiByZXNvbHZlQ2xhc3NGb3JIb3RSZWxvYWRpbmcodHlwZSkge1xuICAvLyBObyBpbXBsZW1lbnRhdGlvbiBkaWZmZXJlbmNlcy5cbiAgcmV0dXJuIHJlc29sdmVGdW5jdGlvbkZvckhvdFJlbG9hZGluZyh0eXBlKTtcbn1cbmZ1bmN0aW9uIHJlc29sdmVGb3J3YXJkUmVmRm9ySG90UmVsb2FkaW5nKHR5cGUpIHtcbiAge1xuICAgIGlmIChyZXNvbHZlRmFtaWx5ID09PSBudWxsKSB7XG4gICAgICAvLyBIb3QgcmVsb2FkaW5nIGlzIGRpc2FibGVkLlxuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfVxuXG4gICAgdmFyIGZhbWlseSA9IHJlc29sdmVGYW1pbHkodHlwZSk7XG5cbiAgICBpZiAoZmFtaWx5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIHJlYWwgZm9yd2FyZFJlZi4gRG9uJ3Qgd2FudCB0byBjcmFzaCBlYXJseS5cbiAgICAgIGlmICh0eXBlICE9PSBudWxsICYmIHR5cGUgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdHlwZS5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gRm9yd2FyZFJlZiBpcyBzcGVjaWFsIGJlY2F1c2UgaXRzIHJlc29sdmVkIC50eXBlIGlzIGFuIG9iamVjdCxcbiAgICAgICAgLy8gYnV0IGl0J3MgcG9zc2libGUgdGhhdCB3ZSBvbmx5IGhhdmUgaXRzIGlubmVyIHJlbmRlciBmdW5jdGlvbiBpbiB0aGUgbWFwLlxuICAgICAgICAvLyBJZiB0aGF0IGlubmVyIHJlbmRlciBmdW5jdGlvbiBpcyBkaWZmZXJlbnQsIHdlJ2xsIGJ1aWxkIGEgbmV3IGZvcndhcmRSZWYgdHlwZS5cbiAgICAgICAgdmFyIGN1cnJlbnRSZW5kZXIgPSByZXNvbHZlRnVuY3Rpb25Gb3JIb3RSZWxvYWRpbmcodHlwZS5yZW5kZXIpO1xuXG4gICAgICAgIGlmICh0eXBlLnJlbmRlciAhPT0gY3VycmVudFJlbmRlcikge1xuICAgICAgICAgIHZhciBzeW50aGV0aWNUeXBlID0ge1xuICAgICAgICAgICAgJCR0eXBlb2Y6IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUsXG4gICAgICAgICAgICByZW5kZXI6IGN1cnJlbnRSZW5kZXJcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKHR5cGUuZGlzcGxheU5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3ludGhldGljVHlwZS5kaXNwbGF5TmFtZSA9IHR5cGUuZGlzcGxheU5hbWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHN5bnRoZXRpY1R5cGU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHR5cGU7XG4gICAgfSAvLyBVc2UgdGhlIGxhdGVzdCBrbm93biBpbXBsZW1lbnRhdGlvbi5cblxuXG4gICAgcmV0dXJuIGZhbWlseS5jdXJyZW50O1xuICB9XG59XG5mdW5jdGlvbiBpc0NvbXBhdGlibGVGYW1pbHlGb3JIb3RSZWxvYWRpbmcoZmliZXIsIGVsZW1lbnQpIHtcbiAge1xuICAgIGlmIChyZXNvbHZlRmFtaWx5ID09PSBudWxsKSB7XG4gICAgICAvLyBIb3QgcmVsb2FkaW5nIGlzIGRpc2FibGVkLlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBwcmV2VHlwZSA9IGZpYmVyLmVsZW1lbnRUeXBlO1xuICAgIHZhciBuZXh0VHlwZSA9IGVsZW1lbnQudHlwZTsgLy8gSWYgd2UgZ290IGhlcmUsIHdlIGtub3cgdHlwZXMgYXJlbid0ID09PSBlcXVhbC5cblxuICAgIHZhciBuZWVkc0NvbXBhcmVGYW1pbGllcyA9IGZhbHNlO1xuICAgIHZhciAkJHR5cGVvZk5leHRUeXBlID0gdHlwZW9mIG5leHRUeXBlID09PSAnb2JqZWN0JyAmJiBuZXh0VHlwZSAhPT0gbnVsbCA/IG5leHRUeXBlLiQkdHlwZW9mIDogbnVsbDtcblxuICAgIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKHR5cGVvZiBuZXh0VHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbmVlZHNDb21wYXJlRmFtaWxpZXMgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgRnVuY3Rpb25Db21wb25lbnQ6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAodHlwZW9mIG5leHRUeXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBuZWVkc0NvbXBhcmVGYW1pbGllcyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIGlmICgkJHR5cGVvZk5leHRUeXBlID09PSBSRUFDVF9MQVpZX1RZUEUpIHtcbiAgICAgICAgICAgIC8vIFdlIGRvbid0IGtub3cgdGhlIGlubmVyIHR5cGUgeWV0LlxuICAgICAgICAgICAgLy8gV2UncmUgZ29pbmcgdG8gYXNzdW1lIHRoYXQgdGhlIGxhenkgaW5uZXIgdHlwZSBpcyBzdGFibGUsXG4gICAgICAgICAgICAvLyBhbmQgc28gaXQgaXMgc3VmZmljaWVudCB0byBhdm9pZCByZWNvbmNpbGluZyBpdCBhd2F5LlxuICAgICAgICAgICAgLy8gV2UncmUgbm90IGdvaW5nIHRvIHVud3JhcCBvciBhY3R1YWxseSB1c2UgdGhlIG5ldyBsYXp5IHR5cGUuXG4gICAgICAgICAgICBuZWVkc0NvbXBhcmVGYW1pbGllcyA9IHRydWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBGb3J3YXJkUmVmOlxuICAgICAgICB7XG4gICAgICAgICAgaWYgKCQkdHlwZW9mTmV4dFR5cGUgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUpIHtcbiAgICAgICAgICAgIG5lZWRzQ29tcGFyZUZhbWlsaWVzID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCQkdHlwZW9mTmV4dFR5cGUgPT09IFJFQUNUX0xBWllfVFlQRSkge1xuICAgICAgICAgICAgbmVlZHNDb21wYXJlRmFtaWxpZXMgPSB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgTWVtb0NvbXBvbmVudDpcbiAgICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudDpcbiAgICAgICAge1xuICAgICAgICAgIGlmICgkJHR5cGVvZk5leHRUeXBlID09PSBSRUFDVF9NRU1PX1RZUEUpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IGlmIGl0IHdhcyBidXQgY2FuIG5vIGxvbmdlciBiZSBzaW1wbGUsXG4gICAgICAgICAgICAvLyB3ZSBzaG91bGRuJ3Qgc2V0IHRoaXMuXG4gICAgICAgICAgICBuZWVkc0NvbXBhcmVGYW1pbGllcyA9IHRydWU7XG4gICAgICAgICAgfSBlbHNlIGlmICgkJHR5cGVvZk5leHRUeXBlID09PSBSRUFDVF9MQVpZX1RZUEUpIHtcbiAgICAgICAgICAgIG5lZWRzQ29tcGFyZUZhbWlsaWVzID0gdHJ1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSAvLyBDaGVjayBpZiBib3RoIHR5cGVzIGhhdmUgYSBmYW1pbHkgYW5kIGl0J3MgdGhlIHNhbWUgb25lLlxuXG5cbiAgICBpZiAobmVlZHNDb21wYXJlRmFtaWxpZXMpIHtcbiAgICAgIC8vIE5vdGU6IG1lbW8oKSBhbmQgZm9yd2FyZFJlZigpIHdlJ2xsIGNvbXBhcmUgb3V0ZXIgcmF0aGVyIHRoYW4gaW5uZXIgdHlwZS5cbiAgICAgIC8vIFRoaXMgbWVhbnMgYm90aCBvZiB0aGVtIG5lZWQgdG8gYmUgcmVnaXN0ZXJlZCB0byBwcmVzZXJ2ZSBzdGF0ZS5cbiAgICAgIC8vIElmIHdlIHVud3JhcHBlZCBhbmQgY29tcGFyZWQgdGhlIGlubmVyIHR5cGVzIGZvciB3cmFwcGVycyBpbnN0ZWFkLFxuICAgICAgLy8gdGhlbiB3ZSB3b3VsZCByaXNrIGZhbHNlbHkgc2F5aW5nIHR3byBzZXBhcmF0ZSBtZW1vKEZvbylcbiAgICAgIC8vIGNhbGxzIGFyZSBlcXVpdmFsZW50IGJlY2F1c2UgdGhleSB3cmFwIHRoZSBzYW1lIEZvbyBmdW5jdGlvbi5cbiAgICAgIHZhciBwcmV2RmFtaWx5ID0gcmVzb2x2ZUZhbWlseShwcmV2VHlwZSk7XG5cbiAgICAgIGlmIChwcmV2RmFtaWx5ICE9PSB1bmRlZmluZWQgJiYgcHJldkZhbWlseSA9PT0gcmVzb2x2ZUZhbWlseShuZXh0VHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5mdW5jdGlvbiBtYXJrRmFpbGVkRXJyb3JCb3VuZGFyeUZvckhvdFJlbG9hZGluZyhmaWJlcikge1xuICB7XG4gICAgaWYgKHJlc29sdmVGYW1pbHkgPT09IG51bGwpIHtcbiAgICAgIC8vIEhvdCByZWxvYWRpbmcgaXMgZGlzYWJsZWQuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBXZWFrU2V0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGZhaWxlZEJvdW5kYXJpZXMgPT09IG51bGwpIHtcbiAgICAgIGZhaWxlZEJvdW5kYXJpZXMgPSBuZXcgV2Vha1NldCgpO1xuICAgIH1cblxuICAgIGZhaWxlZEJvdW5kYXJpZXMuYWRkKGZpYmVyKTtcbiAgfVxufVxudmFyIHNjaGVkdWxlUmVmcmVzaCA9IGZ1bmN0aW9uIChyb290LCB1cGRhdGUpIHtcbiAge1xuICAgIGlmIChyZXNvbHZlRmFtaWx5ID09PSBudWxsKSB7XG4gICAgICAvLyBIb3QgcmVsb2FkaW5nIGlzIGRpc2FibGVkLlxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBzdGFsZUZhbWlsaWVzID0gdXBkYXRlLnN0YWxlRmFtaWxpZXMsXG4gICAgICAgIHVwZGF0ZWRGYW1pbGllcyA9IHVwZGF0ZS51cGRhdGVkRmFtaWxpZXM7XG4gICAgZmx1c2hQYXNzaXZlRWZmZWN0cygpO1xuICAgIGZsdXNoU3luYyhmdW5jdGlvbiAoKSB7XG4gICAgICBzY2hlZHVsZUZpYmVyc1dpdGhGYW1pbGllc1JlY3Vyc2l2ZWx5KHJvb3QuY3VycmVudCwgdXBkYXRlZEZhbWlsaWVzLCBzdGFsZUZhbWlsaWVzKTtcbiAgICB9KTtcbiAgfVxufTtcbnZhciBzY2hlZHVsZVJvb3QgPSBmdW5jdGlvbiAocm9vdCwgZWxlbWVudCkge1xuICB7XG4gICAgaWYgKHJvb3QuY29udGV4dCAhPT0gZW1wdHlDb250ZXh0T2JqZWN0KSB7XG4gICAgICAvLyBTdXBlciBlZGdlIGNhc2U6IHJvb3QgaGFzIGEgbGVnYWN5IF9yZW5kZXJTdWJ0cmVlIGNvbnRleHRcbiAgICAgIC8vIGJ1dCB3ZSBkb24ndCBrbm93IHRoZSBwYXJlbnRDb21wb25lbnQgc28gd2UgY2FuJ3QgcGFzcyBpdC5cbiAgICAgIC8vIEp1c3QgaWdub3JlLiBXZSdsbCBkZWxldGUgdGhpcyB3aXRoIF9yZW5kZXJTdWJ0cmVlIGNvZGUgcGF0aCBsYXRlci5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmbHVzaFBhc3NpdmVFZmZlY3RzKCk7XG4gICAgZmx1c2hTeW5jKGZ1bmN0aW9uICgpIHtcbiAgICAgIHVwZGF0ZUNvbnRhaW5lcihlbGVtZW50LCByb290LCBudWxsLCBudWxsKTtcbiAgICB9KTtcbiAgfVxufTtcblxuZnVuY3Rpb24gc2NoZWR1bGVGaWJlcnNXaXRoRmFtaWxpZXNSZWN1cnNpdmVseShmaWJlciwgdXBkYXRlZEZhbWlsaWVzLCBzdGFsZUZhbWlsaWVzKSB7XG4gIHtcbiAgICB2YXIgYWx0ZXJuYXRlID0gZmliZXIuYWx0ZXJuYXRlLFxuICAgICAgICBjaGlsZCA9IGZpYmVyLmNoaWxkLFxuICAgICAgICBzaWJsaW5nID0gZmliZXIuc2libGluZyxcbiAgICAgICAgdGFnID0gZmliZXIudGFnLFxuICAgICAgICB0eXBlID0gZmliZXIudHlwZTtcbiAgICB2YXIgY2FuZGlkYXRlVHlwZSA9IG51bGw7XG5cbiAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgY2FzZSBGdW5jdGlvbkNvbXBvbmVudDpcbiAgICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudDpcbiAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgIGNhbmRpZGF0ZVR5cGUgPSB0eXBlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBGb3J3YXJkUmVmOlxuICAgICAgICBjYW5kaWRhdGVUeXBlID0gdHlwZS5yZW5kZXI7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChyZXNvbHZlRmFtaWx5ID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHJlc29sdmVGYW1pbHkgdG8gYmUgc2V0IGR1cmluZyBob3QgcmVsb2FkLicpO1xuICAgIH1cblxuICAgIHZhciBuZWVkc1JlbmRlciA9IGZhbHNlO1xuICAgIHZhciBuZWVkc1JlbW91bnQgPSBmYWxzZTtcblxuICAgIGlmIChjYW5kaWRhdGVUeXBlICE9PSBudWxsKSB7XG4gICAgICB2YXIgZmFtaWx5ID0gcmVzb2x2ZUZhbWlseShjYW5kaWRhdGVUeXBlKTtcblxuICAgICAgaWYgKGZhbWlseSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChzdGFsZUZhbWlsaWVzLmhhcyhmYW1pbHkpKSB7XG4gICAgICAgICAgbmVlZHNSZW1vdW50ID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh1cGRhdGVkRmFtaWxpZXMuaGFzKGZhbWlseSkpIHtcbiAgICAgICAgICBpZiAodGFnID09PSBDbGFzc0NvbXBvbmVudCkge1xuICAgICAgICAgICAgbmVlZHNSZW1vdW50ID0gdHJ1ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmVlZHNSZW5kZXIgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmYWlsZWRCb3VuZGFyaWVzICE9PSBudWxsKSB7XG4gICAgICBpZiAoZmFpbGVkQm91bmRhcmllcy5oYXMoZmliZXIpIHx8IGFsdGVybmF0ZSAhPT0gbnVsbCAmJiBmYWlsZWRCb3VuZGFyaWVzLmhhcyhhbHRlcm5hdGUpKSB7XG4gICAgICAgIG5lZWRzUmVtb3VudCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5lZWRzUmVtb3VudCkge1xuICAgICAgZmliZXIuX2RlYnVnTmVlZHNSZW1vdW50ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAobmVlZHNSZW1vdW50IHx8IG5lZWRzUmVuZGVyKSB7XG4gICAgICB2YXIgX3Jvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIFN5bmNMYW5lKTtcblxuICAgICAgaWYgKF9yb290ICE9PSBudWxsKSB7XG4gICAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihfcm9vdCwgZmliZXIsIFN5bmNMYW5lLCBOb1RpbWVzdGFtcCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNoaWxkICE9PSBudWxsICYmICFuZWVkc1JlbW91bnQpIHtcbiAgICAgIHNjaGVkdWxlRmliZXJzV2l0aEZhbWlsaWVzUmVjdXJzaXZlbHkoY2hpbGQsIHVwZGF0ZWRGYW1pbGllcywgc3RhbGVGYW1pbGllcyk7XG4gICAgfVxuXG4gICAgaWYgKHNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgIHNjaGVkdWxlRmliZXJzV2l0aEZhbWlsaWVzUmVjdXJzaXZlbHkoc2libGluZywgdXBkYXRlZEZhbWlsaWVzLCBzdGFsZUZhbWlsaWVzKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCA9IGZ1bmN0aW9uIChyb290LCBmYW1pbGllcykge1xuICB7XG4gICAgdmFyIGhvc3RJbnN0YW5jZXMgPSBuZXcgU2V0KCk7XG4gICAgdmFyIHR5cGVzID0gbmV3IFNldChmYW1pbGllcy5tYXAoZnVuY3Rpb24gKGZhbWlseSkge1xuICAgICAgcmV0dXJuIGZhbWlseS5jdXJyZW50O1xuICAgIH0pKTtcbiAgICBmaW5kSG9zdEluc3RhbmNlc0Zvck1hdGNoaW5nRmliZXJzUmVjdXJzaXZlbHkocm9vdC5jdXJyZW50LCB0eXBlcywgaG9zdEluc3RhbmNlcyk7XG4gICAgcmV0dXJuIGhvc3RJbnN0YW5jZXM7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGZpbmRIb3N0SW5zdGFuY2VzRm9yTWF0Y2hpbmdGaWJlcnNSZWN1cnNpdmVseShmaWJlciwgdHlwZXMsIGhvc3RJbnN0YW5jZXMpIHtcbiAge1xuICAgIHZhciBjaGlsZCA9IGZpYmVyLmNoaWxkLFxuICAgICAgICBzaWJsaW5nID0gZmliZXIuc2libGluZyxcbiAgICAgICAgdGFnID0gZmliZXIudGFnLFxuICAgICAgICB0eXBlID0gZmliZXIudHlwZTtcbiAgICB2YXIgY2FuZGlkYXRlVHlwZSA9IG51bGw7XG5cbiAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgY2FzZSBGdW5jdGlvbkNvbXBvbmVudDpcbiAgICAgIGNhc2UgU2ltcGxlTWVtb0NvbXBvbmVudDpcbiAgICAgIGNhc2UgQ2xhc3NDb21wb25lbnQ6XG4gICAgICAgIGNhbmRpZGF0ZVR5cGUgPSB0eXBlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBGb3J3YXJkUmVmOlxuICAgICAgICBjYW5kaWRhdGVUeXBlID0gdHlwZS5yZW5kZXI7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciBkaWRNYXRjaCA9IGZhbHNlO1xuXG4gICAgaWYgKGNhbmRpZGF0ZVR5cGUgIT09IG51bGwpIHtcbiAgICAgIGlmICh0eXBlcy5oYXMoY2FuZGlkYXRlVHlwZSkpIHtcbiAgICAgICAgZGlkTWF0Y2ggPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkaWRNYXRjaCkge1xuICAgICAgLy8gV2UgaGF2ZSBhIG1hdGNoLiBUaGlzIG9ubHkgZHJpbGxzIGRvd24gdG8gdGhlIGNsb3Nlc3QgaG9zdCBjb21wb25lbnRzLlxuICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIHNlYXJjaCBkZWVwZXIgYmVjYXVzZSBmb3IgdGhlIHB1cnBvc2Ugb2YgZ2l2aW5nXG4gICAgICAvLyB2aXN1YWwgZmVlZGJhY2ssIFwiZmxhc2hpbmdcIiBvdXRlcm1vc3QgcGFyZW50IHJlY3RhbmdsZXMgaXMgc3VmZmljaWVudC5cbiAgICAgIGZpbmRIb3N0SW5zdGFuY2VzRm9yRmliZXJTaGFsbG93bHkoZmliZXIsIGhvc3RJbnN0YW5jZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGVyZSdzIG5vIG1hdGNoLCBtYXliZSB0aGVyZSB3aWxsIGJlIG9uZSBmdXJ0aGVyIGRvd24gaW4gdGhlIGNoaWxkIHRyZWUuXG4gICAgICBpZiAoY2hpbGQgIT09IG51bGwpIHtcbiAgICAgICAgZmluZEhvc3RJbnN0YW5jZXNGb3JNYXRjaGluZ0ZpYmVyc1JlY3Vyc2l2ZWx5KGNoaWxkLCB0eXBlcywgaG9zdEluc3RhbmNlcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgIGZpbmRIb3N0SW5zdGFuY2VzRm9yTWF0Y2hpbmdGaWJlcnNSZWN1cnNpdmVseShzaWJsaW5nLCB0eXBlcywgaG9zdEluc3RhbmNlcyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRIb3N0SW5zdGFuY2VzRm9yRmliZXJTaGFsbG93bHkoZmliZXIsIGhvc3RJbnN0YW5jZXMpIHtcbiAge1xuICAgIHZhciBmb3VuZEhvc3RJbnN0YW5jZXMgPSBmaW5kQ2hpbGRIb3N0SW5zdGFuY2VzRm9yRmliZXJTaGFsbG93bHkoZmliZXIsIGhvc3RJbnN0YW5jZXMpO1xuXG4gICAgaWYgKGZvdW5kSG9zdEluc3RhbmNlcykge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gSWYgd2UgZGlkbid0IGZpbmQgYW55IGhvc3QgY2hpbGRyZW4sIGZhbGxiYWNrIHRvIGNsb3Nlc3QgaG9zdCBwYXJlbnQuXG5cblxuICAgIHZhciBub2RlID0gZmliZXI7XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgc3dpdGNoIChub2RlLnRhZykge1xuICAgICAgICBjYXNlIEhvc3RDb21wb25lbnQ6XG4gICAgICAgICAgaG9zdEluc3RhbmNlcy5hZGQobm9kZS5zdGF0ZU5vZGUpO1xuICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBjYXNlIEhvc3RQb3J0YWw6XG4gICAgICAgICAgaG9zdEluc3RhbmNlcy5hZGQobm9kZS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7XG4gICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgICAgaG9zdEluc3RhbmNlcy5hZGQobm9kZS5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAobm9kZS5yZXR1cm4gPT09IG51bGwpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCB0byByZWFjaCByb290IGZpcnN0LicpO1xuICAgICAgfVxuXG4gICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRDaGlsZEhvc3RJbnN0YW5jZXNGb3JGaWJlclNoYWxsb3dseShmaWJlciwgaG9zdEluc3RhbmNlcykge1xuICB7XG4gICAgdmFyIG5vZGUgPSBmaWJlcjtcbiAgICB2YXIgZm91bmRIb3N0SW5zdGFuY2VzID0gZmFsc2U7XG5cbiAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgaWYgKG5vZGUudGFnID09PSBIb3N0Q29tcG9uZW50KSB7XG4gICAgICAgIC8vIFdlIGdvdCBhIG1hdGNoLlxuICAgICAgICBmb3VuZEhvc3RJbnN0YW5jZXMgPSB0cnVlO1xuICAgICAgICBob3N0SW5zdGFuY2VzLmFkZChub2RlLnN0YXRlTm9kZSk7IC8vIFRoZXJlIG1heSBzdGlsbCBiZSBtb3JlLCBzbyBrZWVwIHNlYXJjaGluZy5cbiAgICAgIH0gZWxzZSBpZiAobm9kZS5jaGlsZCAhPT0gbnVsbCkge1xuICAgICAgICBub2RlLmNoaWxkLnJldHVybiA9IG5vZGU7XG4gICAgICAgIG5vZGUgPSBub2RlLmNoaWxkO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG5vZGUgPT09IGZpYmVyKSB7XG4gICAgICAgIHJldHVybiBmb3VuZEhvc3RJbnN0YW5jZXM7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChub2RlLnNpYmxpbmcgPT09IG51bGwpIHtcbiAgICAgICAgaWYgKG5vZGUucmV0dXJuID09PSBudWxsIHx8IG5vZGUucmV0dXJuID09PSBmaWJlcikge1xuICAgICAgICAgIHJldHVybiBmb3VuZEhvc3RJbnN0YW5jZXM7XG4gICAgICAgIH1cblxuICAgICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgICB9XG5cbiAgICAgIG5vZGUuc2libGluZy5yZXR1cm4gPSBub2RlLnJldHVybjtcbiAgICAgIG5vZGUgPSBub2RlLnNpYmxpbmc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgaGFzQmFkTWFwUG9seWZpbGw7XG5cbntcbiAgaGFzQmFkTWFwUG9seWZpbGwgPSBmYWxzZTtcblxuICB0cnkge1xuICAgIHZhciBub25FeHRlbnNpYmxlT2JqZWN0ID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KTtcbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1uZXcgKi9cblxuICAgIG5ldyBNYXAoW1tub25FeHRlbnNpYmxlT2JqZWN0LCBudWxsXV0pO1xuICAgIG5ldyBTZXQoW25vbkV4dGVuc2libGVPYmplY3RdKTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLW5ldyAqL1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gVE9ETzogQ29uc2lkZXIgd2FybmluZyBhYm91dCBiYWQgcG9seWZpbGxzXG4gICAgaGFzQmFkTWFwUG9seWZpbGwgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIEZpYmVyTm9kZSh0YWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKSB7XG4gIC8vIEluc3RhbmNlXG4gIHRoaXMudGFnID0gdGFnO1xuICB0aGlzLmtleSA9IGtleTtcbiAgdGhpcy5lbGVtZW50VHlwZSA9IG51bGw7XG4gIHRoaXMudHlwZSA9IG51bGw7XG4gIHRoaXMuc3RhdGVOb2RlID0gbnVsbDsgLy8gRmliZXJcblxuICB0aGlzLnJldHVybiA9IG51bGw7XG4gIHRoaXMuY2hpbGQgPSBudWxsO1xuICB0aGlzLnNpYmxpbmcgPSBudWxsO1xuICB0aGlzLmluZGV4ID0gMDtcbiAgdGhpcy5yZWYgPSBudWxsO1xuICB0aGlzLnBlbmRpbmdQcm9wcyA9IHBlbmRpbmdQcm9wcztcbiAgdGhpcy5tZW1vaXplZFByb3BzID0gbnVsbDtcbiAgdGhpcy51cGRhdGVRdWV1ZSA9IG51bGw7XG4gIHRoaXMubWVtb2l6ZWRTdGF0ZSA9IG51bGw7XG4gIHRoaXMuZGVwZW5kZW5jaWVzID0gbnVsbDtcbiAgdGhpcy5tb2RlID0gbW9kZTsgLy8gRWZmZWN0c1xuXG4gIHRoaXMuZmxhZ3MgPSBOb0ZsYWdzO1xuICB0aGlzLnN1YnRyZWVGbGFncyA9IE5vRmxhZ3M7XG4gIHRoaXMuZGVsZXRpb25zID0gbnVsbDtcbiAgdGhpcy5sYW5lcyA9IE5vTGFuZXM7XG4gIHRoaXMuY2hpbGRMYW5lcyA9IE5vTGFuZXM7XG4gIHRoaXMuYWx0ZXJuYXRlID0gbnVsbDtcblxuICB7XG4gICAgLy8gTm90ZTogVGhlIGZvbGxvd2luZyBpcyBkb25lIHRvIGF2b2lkIGEgdjggcGVyZm9ybWFuY2UgY2xpZmYuXG4gICAgLy9cbiAgICAvLyBJbml0aWFsaXppbmcgdGhlIGZpZWxkcyBiZWxvdyB0byBzbWlzIGFuZCBsYXRlciB1cGRhdGluZyB0aGVtIHdpdGhcbiAgICAvLyBkb3VibGUgdmFsdWVzIHdpbGwgY2F1c2UgRmliZXJzIHRvIGVuZCB1cCBoYXZpbmcgc2VwYXJhdGUgc2hhcGVzLlxuICAgIC8vIFRoaXMgYmVoYXZpb3IvYnVnIGhhcyBzb21ldGhpbmcgdG8gZG8gd2l0aCBPYmplY3QucHJldmVudEV4dGVuc2lvbigpLlxuICAgIC8vIEZvcnR1bmF0ZWx5IHRoaXMgb25seSBpbXBhY3RzIERFViBidWlsZHMuXG4gICAgLy8gVW5mb3J0dW5hdGVseSBpdCBtYWtlcyBSZWFjdCB1bnVzYWJseSBzbG93IGZvciBzb21lIGFwcGxpY2F0aW9ucy5cbiAgICAvLyBUbyB3b3JrIGFyb3VuZCB0aGlzLCBpbml0aWFsaXplIHRoZSBmaWVsZHMgYmVsb3cgd2l0aCBkb3VibGVzLlxuICAgIC8vXG4gICAgLy8gTGVhcm4gbW9yZSBhYm91dCB0aGlzIGhlcmU6XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xNDM2NVxuICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTg1MzhcbiAgICB0aGlzLmFjdHVhbER1cmF0aW9uID0gTnVtYmVyLk5hTjtcbiAgICB0aGlzLmFjdHVhbFN0YXJ0VGltZSA9IE51bWJlci5OYU47XG4gICAgdGhpcy5zZWxmQmFzZUR1cmF0aW9uID0gTnVtYmVyLk5hTjtcbiAgICB0aGlzLnRyZWVCYXNlRHVyYXRpb24gPSBOdW1iZXIuTmFOOyAvLyBJdCdzIG9rYXkgdG8gcmVwbGFjZSB0aGUgaW5pdGlhbCBkb3VibGVzIHdpdGggc21pcyBhZnRlciBpbml0aWFsaXphdGlvbi5cbiAgICAvLyBUaGlzIHdvbid0IHRyaWdnZXIgdGhlIHBlcmZvcm1hbmNlIGNsaWZmIG1lbnRpb25lZCBhYm92ZSxcbiAgICAvLyBhbmQgaXQgc2ltcGxpZmllcyBvdGhlciBwcm9maWxlciBjb2RlIChpbmNsdWRpbmcgRGV2VG9vbHMpLlxuXG4gICAgdGhpcy5hY3R1YWxEdXJhdGlvbiA9IDA7XG4gICAgdGhpcy5hY3R1YWxTdGFydFRpbWUgPSAtMTtcbiAgICB0aGlzLnNlbGZCYXNlRHVyYXRpb24gPSAwO1xuICAgIHRoaXMudHJlZUJhc2VEdXJhdGlvbiA9IDA7XG4gIH1cblxuICB7XG4gICAgLy8gVGhpcyBpc24ndCBkaXJlY3RseSB1c2VkIGJ1dCBpcyBoYW5keSBmb3IgZGVidWdnaW5nIGludGVybmFsczpcbiAgICB0aGlzLl9kZWJ1Z1NvdXJjZSA9IG51bGw7XG4gICAgdGhpcy5fZGVidWdPd25lciA9IG51bGw7XG4gICAgdGhpcy5fZGVidWdOZWVkc1JlbW91bnQgPSBmYWxzZTtcbiAgICB0aGlzLl9kZWJ1Z0hvb2tUeXBlcyA9IG51bGw7XG5cbiAgICBpZiAoIWhhc0JhZE1hcFBvbHlmaWxsICYmIHR5cGVvZiBPYmplY3QucHJldmVudEV4dGVuc2lvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIE9iamVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0aGlzKTtcbiAgICB9XG4gIH1cbn0gLy8gVGhpcyBpcyBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uLCByYXRoZXIgdGhhbiBhIFBPSk8gY29uc3RydWN0b3IsIHN0aWxsXG4vLyBwbGVhc2UgZW5zdXJlIHdlIGRvIHRoZSBmb2xsb3dpbmc6XG4vLyAxKSBOb2JvZHkgc2hvdWxkIGFkZCBhbnkgaW5zdGFuY2UgbWV0aG9kcyBvbiB0aGlzLiBJbnN0YW5jZSBtZXRob2RzIGNhbiBiZVxuLy8gICAgbW9yZSBkaWZmaWN1bHQgdG8gcHJlZGljdCB3aGVuIHRoZXkgZ2V0IG9wdGltaXplZCBhbmQgdGhleSBhcmUgYWxtb3N0XG4vLyAgICBuZXZlciBpbmxpbmVkIHByb3Blcmx5IGluIHN0YXRpYyBjb21waWxlcnMuXG4vLyAyKSBOb2JvZHkgc2hvdWxkIHJlbHkgb24gYGluc3RhbmNlb2YgRmliZXJgIGZvciB0eXBlIHRlc3RpbmcuIFdlIHNob3VsZFxuLy8gICAgYWx3YXlzIGtub3cgd2hlbiBpdCBpcyBhIGZpYmVyLlxuLy8gMykgV2UgbWlnaHQgd2FudCB0byBleHBlcmltZW50IHdpdGggdXNpbmcgbnVtZXJpYyBrZXlzIHNpbmNlIHRoZXkgYXJlIGVhc2llclxuLy8gICAgdG8gb3B0aW1pemUgaW4gYSBub24tSklUIGVudmlyb25tZW50LlxuLy8gNCkgV2UgY2FuIGVhc2lseSBnbyBmcm9tIGEgY29uc3RydWN0b3IgdG8gYSBjcmVhdGVGaWJlciBvYmplY3QgbGl0ZXJhbCBpZiB0aGF0XG4vLyAgICBpcyBmYXN0ZXIuXG4vLyA1KSBJdCBzaG91bGQgYmUgZWFzeSB0byBwb3J0IHRoaXMgdG8gYSBDIHN0cnVjdCBhbmQga2VlcCBhIEMgaW1wbGVtZW50YXRpb25cbi8vICAgIGNvbXBhdGlibGUuXG5cblxudmFyIGNyZWF0ZUZpYmVyID0gZnVuY3Rpb24gKHRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpIHtcbiAgLy8gJEZsb3dGaXhNZTogdGhlIHNoYXBlcyBhcmUgZXhhY3QgaGVyZSBidXQgRmxvdyBkb2Vzbid0IGxpa2UgY29uc3RydWN0b3JzXG4gIHJldHVybiBuZXcgRmliZXJOb2RlKHRhZywgcGVuZGluZ1Byb3BzLCBrZXksIG1vZGUpO1xufTtcblxuZnVuY3Rpb24gc2hvdWxkQ29uc3RydWN0JDEoQ29tcG9uZW50KSB7XG4gIHZhciBwcm90b3R5cGUgPSBDb21wb25lbnQucHJvdG90eXBlO1xuICByZXR1cm4gISEocHJvdG90eXBlICYmIHByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KTtcbn1cblxuZnVuY3Rpb24gaXNTaW1wbGVGdW5jdGlvbkNvbXBvbmVudCh0eXBlKSB7XG4gIHJldHVybiB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhc2hvdWxkQ29uc3RydWN0JDEodHlwZSkgJiYgdHlwZS5kZWZhdWx0UHJvcHMgPT09IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIHJlc29sdmVMYXp5Q29tcG9uZW50VGFnKENvbXBvbmVudCkge1xuICBpZiAodHlwZW9mIENvbXBvbmVudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBzaG91bGRDb25zdHJ1Y3QkMShDb21wb25lbnQpID8gQ2xhc3NDb21wb25lbnQgOiBGdW5jdGlvbkNvbXBvbmVudDtcbiAgfSBlbHNlIGlmIChDb21wb25lbnQgIT09IHVuZGVmaW5lZCAmJiBDb21wb25lbnQgIT09IG51bGwpIHtcbiAgICB2YXIgJCR0eXBlb2YgPSBDb21wb25lbnQuJCR0eXBlb2Y7XG5cbiAgICBpZiAoJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUpIHtcbiAgICAgIHJldHVybiBGb3J3YXJkUmVmO1xuICAgIH1cblxuICAgIGlmICgkJHR5cGVvZiA9PT0gUkVBQ1RfTUVNT19UWVBFKSB7XG4gICAgICByZXR1cm4gTWVtb0NvbXBvbmVudDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gSW5kZXRlcm1pbmF0ZUNvbXBvbmVudDtcbn0gLy8gVGhpcyBpcyB1c2VkIHRvIGNyZWF0ZSBhbiBhbHRlcm5hdGUgZmliZXIgdG8gZG8gd29yayBvbi5cblxuZnVuY3Rpb24gY3JlYXRlV29ya0luUHJvZ3Jlc3MoY3VycmVudCwgcGVuZGluZ1Byb3BzKSB7XG4gIHZhciB3b3JrSW5Qcm9ncmVzcyA9IGN1cnJlbnQuYWx0ZXJuYXRlO1xuXG4gIGlmICh3b3JrSW5Qcm9ncmVzcyA9PT0gbnVsbCkge1xuICAgIC8vIFdlIHVzZSBhIGRvdWJsZSBidWZmZXJpbmcgcG9vbGluZyB0ZWNobmlxdWUgYmVjYXVzZSB3ZSBrbm93IHRoYXQgd2UnbGxcbiAgICAvLyBvbmx5IGV2ZXIgbmVlZCBhdCBtb3N0IHR3byB2ZXJzaW9ucyBvZiBhIHRyZWUuIFdlIHBvb2wgdGhlIFwib3RoZXJcIiB1bnVzZWRcbiAgICAvLyBub2RlIHRoYXQgd2UncmUgZnJlZSB0byByZXVzZS4gVGhpcyBpcyBsYXppbHkgY3JlYXRlZCB0byBhdm9pZCBhbGxvY2F0aW5nXG4gICAgLy8gZXh0cmEgb2JqZWN0cyBmb3IgdGhpbmdzIHRoYXQgYXJlIG5ldmVyIHVwZGF0ZWQuIEl0IGFsc28gYWxsb3cgdXMgdG9cbiAgICAvLyByZWNsYWltIHRoZSBleHRyYSBtZW1vcnkgaWYgbmVlZGVkLlxuICAgIHdvcmtJblByb2dyZXNzID0gY3JlYXRlRmliZXIoY3VycmVudC50YWcsIHBlbmRpbmdQcm9wcywgY3VycmVudC5rZXksIGN1cnJlbnQubW9kZSk7XG4gICAgd29ya0luUHJvZ3Jlc3MuZWxlbWVudFR5cGUgPSBjdXJyZW50LmVsZW1lbnRUeXBlO1xuICAgIHdvcmtJblByb2dyZXNzLnR5cGUgPSBjdXJyZW50LnR5cGU7XG4gICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gY3VycmVudC5zdGF0ZU5vZGU7XG5cbiAgICB7XG4gICAgICAvLyBERVYtb25seSBmaWVsZHNcbiAgICAgIHdvcmtJblByb2dyZXNzLl9kZWJ1Z1NvdXJjZSA9IGN1cnJlbnQuX2RlYnVnU291cmNlO1xuICAgICAgd29ya0luUHJvZ3Jlc3MuX2RlYnVnT3duZXIgPSBjdXJyZW50Ll9kZWJ1Z093bmVyO1xuICAgICAgd29ya0luUHJvZ3Jlc3MuX2RlYnVnSG9va1R5cGVzID0gY3VycmVudC5fZGVidWdIb29rVHlwZXM7XG4gICAgfVxuXG4gICAgd29ya0luUHJvZ3Jlc3MuYWx0ZXJuYXRlID0gY3VycmVudDtcbiAgICBjdXJyZW50LmFsdGVybmF0ZSA9IHdvcmtJblByb2dyZXNzO1xuICB9IGVsc2Uge1xuICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyA9IHBlbmRpbmdQcm9wczsgLy8gTmVlZGVkIGJlY2F1c2UgQmxvY2tzIHN0b3JlIGRhdGEgb24gdHlwZS5cblxuICAgIHdvcmtJblByb2dyZXNzLnR5cGUgPSBjdXJyZW50LnR5cGU7IC8vIFdlIGFscmVhZHkgaGF2ZSBhbiBhbHRlcm5hdGUuXG4gICAgLy8gUmVzZXQgdGhlIGVmZmVjdCB0YWcuXG5cbiAgICB3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IE5vRmxhZ3M7IC8vIFRoZSBlZmZlY3RzIGFyZSBubyBsb25nZXIgdmFsaWQuXG5cbiAgICB3b3JrSW5Qcm9ncmVzcy5zdWJ0cmVlRmxhZ3MgPSBOb0ZsYWdzO1xuICAgIHdvcmtJblByb2dyZXNzLmRlbGV0aW9ucyA9IG51bGw7XG5cbiAgICB7XG4gICAgICAvLyBXZSBpbnRlbnRpb25hbGx5IHJlc2V0LCByYXRoZXIgdGhhbiBjb3B5LCBhY3R1YWxEdXJhdGlvbiAmIGFjdHVhbFN0YXJ0VGltZS5cbiAgICAgIC8vIFRoaXMgcHJldmVudHMgdGltZSBmcm9tIGVuZGxlc3NseSBhY2N1bXVsYXRpbmcgaW4gbmV3IGNvbW1pdHMuXG4gICAgICAvLyBUaGlzIGhhcyB0aGUgZG93bnNpZGUgb2YgcmVzZXR0aW5nIHZhbHVlcyBmb3IgZGlmZmVyZW50IHByaW9yaXR5IHJlbmRlcnMsXG4gICAgICAvLyBCdXQgd29ya3MgZm9yIHlpZWxkaW5nICh0aGUgY29tbW9uIGNhc2UpIGFuZCBzaG91bGQgc3VwcG9ydCByZXN1bWluZy5cbiAgICAgIHdvcmtJblByb2dyZXNzLmFjdHVhbER1cmF0aW9uID0gMDtcbiAgICAgIHdvcmtJblByb2dyZXNzLmFjdHVhbFN0YXJ0VGltZSA9IC0xO1xuICAgIH1cbiAgfSAvLyBSZXNldCBhbGwgZWZmZWN0cyBleGNlcHQgc3RhdGljIG9uZXMuXG4gIC8vIFN0YXRpYyBlZmZlY3RzIGFyZSBub3Qgc3BlY2lmaWMgdG8gYSByZW5kZXIuXG5cblxuICB3b3JrSW5Qcm9ncmVzcy5mbGFncyA9IGN1cnJlbnQuZmxhZ3MgJiBTdGF0aWNNYXNrO1xuICB3b3JrSW5Qcm9ncmVzcy5jaGlsZExhbmVzID0gY3VycmVudC5jaGlsZExhbmVzO1xuICB3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IGN1cnJlbnQubGFuZXM7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID0gY3VycmVudC5jaGlsZDtcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9IGN1cnJlbnQubWVtb2l6ZWRQcm9wcztcbiAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IGN1cnJlbnQubWVtb2l6ZWRTdGF0ZTtcbiAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlOyAvLyBDbG9uZSB0aGUgZGVwZW5kZW5jaWVzIG9iamVjdC4gVGhpcyBpcyBtdXRhdGVkIGR1cmluZyB0aGUgcmVuZGVyIHBoYXNlLCBzb1xuICAvLyBpdCBjYW5ub3QgYmUgc2hhcmVkIHdpdGggdGhlIGN1cnJlbnQgZmliZXIuXG5cbiAgdmFyIGN1cnJlbnREZXBlbmRlbmNpZXMgPSBjdXJyZW50LmRlcGVuZGVuY2llcztcbiAgd29ya0luUHJvZ3Jlc3MuZGVwZW5kZW5jaWVzID0gY3VycmVudERlcGVuZGVuY2llcyA9PT0gbnVsbCA/IG51bGwgOiB7XG4gICAgbGFuZXM6IGN1cnJlbnREZXBlbmRlbmNpZXMubGFuZXMsXG4gICAgZmlyc3RDb250ZXh0OiBjdXJyZW50RGVwZW5kZW5jaWVzLmZpcnN0Q29udGV4dFxuICB9OyAvLyBUaGVzZSB3aWxsIGJlIG92ZXJyaWRkZW4gZHVyaW5nIHRoZSBwYXJlbnQncyByZWNvbmNpbGlhdGlvblxuXG4gIHdvcmtJblByb2dyZXNzLnNpYmxpbmcgPSBjdXJyZW50LnNpYmxpbmc7XG4gIHdvcmtJblByb2dyZXNzLmluZGV4ID0gY3VycmVudC5pbmRleDtcbiAgd29ya0luUHJvZ3Jlc3MucmVmID0gY3VycmVudC5yZWY7XG5cbiAge1xuICAgIHdvcmtJblByb2dyZXNzLnNlbGZCYXNlRHVyYXRpb24gPSBjdXJyZW50LnNlbGZCYXNlRHVyYXRpb247XG4gICAgd29ya0luUHJvZ3Jlc3MudHJlZUJhc2VEdXJhdGlvbiA9IGN1cnJlbnQudHJlZUJhc2VEdXJhdGlvbjtcbiAgfVxuXG4gIHtcbiAgICB3b3JrSW5Qcm9ncmVzcy5fZGVidWdOZWVkc1JlbW91bnQgPSBjdXJyZW50Ll9kZWJ1Z05lZWRzUmVtb3VudDtcblxuICAgIHN3aXRjaCAod29ya0luUHJvZ3Jlc3MudGFnKSB7XG4gICAgICBjYXNlIEluZGV0ZXJtaW5hdGVDb21wb25lbnQ6XG4gICAgICBjYXNlIEZ1bmN0aW9uQ29tcG9uZW50OlxuICAgICAgY2FzZSBTaW1wbGVNZW1vQ29tcG9uZW50OlxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlID0gcmVzb2x2ZUZ1bmN0aW9uRm9ySG90UmVsb2FkaW5nKGN1cnJlbnQudHlwZSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy50eXBlID0gcmVzb2x2ZUNsYXNzRm9ySG90UmVsb2FkaW5nKGN1cnJlbnQudHlwZSk7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICAgIHdvcmtJblByb2dyZXNzLnR5cGUgPSByZXNvbHZlRm9yd2FyZFJlZkZvckhvdFJlbG9hZGluZyhjdXJyZW50LnR5cGUpO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG59IC8vIFVzZWQgdG8gcmV1c2UgYSBGaWJlciBmb3IgYSBzZWNvbmQgcGFzcy5cblxuZnVuY3Rpb24gcmVzZXRXb3JrSW5Qcm9ncmVzcyh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyTGFuZXMpIHtcbiAgLy8gVGhpcyByZXNldHMgdGhlIEZpYmVyIHRvIHdoYXQgY3JlYXRlRmliZXIgb3IgY3JlYXRlV29ya0luUHJvZ3Jlc3Mgd291bGRcbiAgLy8gaGF2ZSBzZXQgdGhlIHZhbHVlcyB0byBiZWZvcmUgZHVyaW5nIHRoZSBmaXJzdCBwYXNzLiBJZGVhbGx5IHRoaXMgd291bGRuJ3RcbiAgLy8gYmUgbmVjZXNzYXJ5IGJ1dCB1bmZvcnR1bmF0ZWx5IG1hbnkgY29kZSBwYXRocyByZWFkcyBmcm9tIHRoZSB3b3JrSW5Qcm9ncmVzc1xuICAvLyB3aGVuIHRoZXkgc2hvdWxkIGJlIHJlYWRpbmcgZnJvbSBjdXJyZW50IGFuZCB3cml0aW5nIHRvIHdvcmtJblByb2dyZXNzLlxuICAvLyBXZSBhc3N1bWUgcGVuZGluZ1Byb3BzLCBpbmRleCwga2V5LCByZWYsIHJldHVybiBhcmUgc3RpbGwgdW50b3VjaGVkIHRvXG4gIC8vIGF2b2lkIGRvaW5nIGFub3RoZXIgcmVjb25jaWxpYXRpb24uXG4gIC8vIFJlc2V0IHRoZSBlZmZlY3QgZmxhZ3MgYnV0IGtlZXAgYW55IFBsYWNlbWVudCB0YWdzLCBzaW5jZSB0aGF0J3Mgc29tZXRoaW5nXG4gIC8vIHRoYXQgY2hpbGQgZmliZXIgaXMgc2V0dGluZywgbm90IHRoZSByZWNvbmNpbGlhdGlvbi5cbiAgd29ya0luUHJvZ3Jlc3MuZmxhZ3MgJj0gU3RhdGljTWFzayB8IFBsYWNlbWVudDsgLy8gVGhlIGVmZmVjdHMgYXJlIG5vIGxvbmdlciB2YWxpZC5cblxuICB2YXIgY3VycmVudCA9IHdvcmtJblByb2dyZXNzLmFsdGVybmF0ZTtcblxuICBpZiAoY3VycmVudCA9PT0gbnVsbCkge1xuICAgIC8vIFJlc2V0IHRvIGNyZWF0ZUZpYmVyJ3MgaW5pdGlhbCB2YWx1ZXMuXG4gICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IE5vTGFuZXM7XG4gICAgd29ya0luUHJvZ3Jlc3MubGFuZXMgPSByZW5kZXJMYW5lcztcbiAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG51bGw7XG4gICAgd29ya0luUHJvZ3Jlc3Muc3VidHJlZUZsYWdzID0gTm9GbGFncztcbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbnVsbDtcbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID0gbnVsbDtcbiAgICB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZSA9IG51bGw7XG4gICAgd29ya0luUHJvZ3Jlc3MuZGVwZW5kZW5jaWVzID0gbnVsbDtcbiAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSBudWxsO1xuXG4gICAge1xuICAgICAgLy8gTm90ZTogV2UgZG9uJ3QgcmVzZXQgdGhlIGFjdHVhbFRpbWUgY291bnRzLiBJdCdzIHVzZWZ1bCB0byBhY2N1bXVsYXRlXG4gICAgICAvLyBhY3R1YWwgdGltZSBhY3Jvc3MgbXVsdGlwbGUgcmVuZGVyIHBhc3Nlcy5cbiAgICAgIHdvcmtJblByb2dyZXNzLnNlbGZCYXNlRHVyYXRpb24gPSAwO1xuICAgICAgd29ya0luUHJvZ3Jlc3MudHJlZUJhc2VEdXJhdGlvbiA9IDA7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFJlc2V0IHRvIHRoZSBjbG9uZWQgdmFsdWVzIHRoYXQgY3JlYXRlV29ya0luUHJvZ3Jlc3Mgd291bGQndmUuXG4gICAgd29ya0luUHJvZ3Jlc3MuY2hpbGRMYW5lcyA9IGN1cnJlbnQuY2hpbGRMYW5lcztcbiAgICB3b3JrSW5Qcm9ncmVzcy5sYW5lcyA9IGN1cnJlbnQubGFuZXM7XG4gICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSBjdXJyZW50LmNoaWxkO1xuICAgIHdvcmtJblByb2dyZXNzLnN1YnRyZWVGbGFncyA9IE5vRmxhZ3M7XG4gICAgd29ya0luUHJvZ3Jlc3MuZGVsZXRpb25zID0gbnVsbDtcbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gY3VycmVudC5tZW1vaXplZFByb3BzO1xuICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBjdXJyZW50Lm1lbW9pemVkU3RhdGU7XG4gICAgd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWUgPSBjdXJyZW50LnVwZGF0ZVF1ZXVlOyAvLyBOZWVkZWQgYmVjYXVzZSBCbG9ja3Mgc3RvcmUgZGF0YSBvbiB0eXBlLlxuXG4gICAgd29ya0luUHJvZ3Jlc3MudHlwZSA9IGN1cnJlbnQudHlwZTsgLy8gQ2xvbmUgdGhlIGRlcGVuZGVuY2llcyBvYmplY3QuIFRoaXMgaXMgbXV0YXRlZCBkdXJpbmcgdGhlIHJlbmRlciBwaGFzZSwgc29cbiAgICAvLyBpdCBjYW5ub3QgYmUgc2hhcmVkIHdpdGggdGhlIGN1cnJlbnQgZmliZXIuXG5cbiAgICB2YXIgY3VycmVudERlcGVuZGVuY2llcyA9IGN1cnJlbnQuZGVwZW5kZW5jaWVzO1xuICAgIHdvcmtJblByb2dyZXNzLmRlcGVuZGVuY2llcyA9IGN1cnJlbnREZXBlbmRlbmNpZXMgPT09IG51bGwgPyBudWxsIDoge1xuICAgICAgbGFuZXM6IGN1cnJlbnREZXBlbmRlbmNpZXMubGFuZXMsXG4gICAgICBmaXJzdENvbnRleHQ6IGN1cnJlbnREZXBlbmRlbmNpZXMuZmlyc3RDb250ZXh0XG4gICAgfTtcblxuICAgIHtcbiAgICAgIC8vIE5vdGU6IFdlIGRvbid0IHJlc2V0IHRoZSBhY3R1YWxUaW1lIGNvdW50cy4gSXQncyB1c2VmdWwgdG8gYWNjdW11bGF0ZVxuICAgICAgLy8gYWN0dWFsIHRpbWUgYWNyb3NzIG11bHRpcGxlIHJlbmRlciBwYXNzZXMuXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5zZWxmQmFzZUR1cmF0aW9uID0gY3VycmVudC5zZWxmQmFzZUR1cmF0aW9uO1xuICAgICAgd29ya0luUHJvZ3Jlc3MudHJlZUJhc2VEdXJhdGlvbiA9IGN1cnJlbnQudHJlZUJhc2VEdXJhdGlvbjtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gd29ya0luUHJvZ3Jlc3M7XG59XG5mdW5jdGlvbiBjcmVhdGVIb3N0Um9vdEZpYmVyKHRhZywgaXNTdHJpY3RNb2RlLCBjb25jdXJyZW50VXBkYXRlc0J5RGVmYXVsdE92ZXJyaWRlKSB7XG4gIHZhciBtb2RlO1xuXG4gIGlmICh0YWcgPT09IENvbmN1cnJlbnRSb290KSB7XG4gICAgbW9kZSA9IENvbmN1cnJlbnRNb2RlO1xuXG4gICAgaWYgKGlzU3RyaWN0TW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgbW9kZSB8PSBTdHJpY3RMZWdhY3lNb2RlO1xuXG4gICAgICB7XG4gICAgICAgIG1vZGUgfD0gU3RyaWN0RWZmZWN0c01vZGU7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG1vZGUgPSBOb01vZGU7XG4gIH1cblxuICBpZiAoIGlzRGV2VG9vbHNQcmVzZW50KSB7XG4gICAgLy8gQWx3YXlzIGNvbGxlY3QgcHJvZmlsZSB0aW1pbmdzIHdoZW4gRGV2VG9vbHMgYXJlIHByZXNlbnQuXG4gICAgLy8gVGhpcyBlbmFibGVzIERldlRvb2xzIHRvIHN0YXJ0IGNhcHR1cmluZyB0aW1pbmcgYXQgYW55IHBvaW504oCTXG4gICAgLy8gV2l0aG91dCBzb21lIG5vZGVzIGluIHRoZSB0cmVlIGhhdmluZyBlbXB0eSBiYXNlIHRpbWVzLlxuICAgIG1vZGUgfD0gUHJvZmlsZU1vZGU7XG4gIH1cblxuICByZXR1cm4gY3JlYXRlRmliZXIoSG9zdFJvb3QsIG51bGwsIG51bGwsIG1vZGUpO1xufVxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzKHR5cGUsIC8vIFJlYWN0JEVsZW1lbnRUeXBlXG5rZXksIHBlbmRpbmdQcm9wcywgb3duZXIsIG1vZGUsIGxhbmVzKSB7XG4gIHZhciBmaWJlclRhZyA9IEluZGV0ZXJtaW5hdGVDb21wb25lbnQ7IC8vIFRoZSByZXNvbHZlZCB0eXBlIGlzIHNldCBpZiB3ZSBrbm93IHdoYXQgdGhlIGZpbmFsIHR5cGUgd2lsbCBiZS4gSS5lLiBpdCdzIG5vdCBsYXp5LlxuXG4gIHZhciByZXNvbHZlZFR5cGUgPSB0eXBlO1xuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmIChzaG91bGRDb25zdHJ1Y3QkMSh0eXBlKSkge1xuICAgICAgZmliZXJUYWcgPSBDbGFzc0NvbXBvbmVudDtcblxuICAgICAge1xuICAgICAgICByZXNvbHZlZFR5cGUgPSByZXNvbHZlQ2xhc3NGb3JIb3RSZWxvYWRpbmcocmVzb2x2ZWRUeXBlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAge1xuICAgICAgICByZXNvbHZlZFR5cGUgPSByZXNvbHZlRnVuY3Rpb25Gb3JIb3RSZWxvYWRpbmcocmVzb2x2ZWRUeXBlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgZmliZXJUYWcgPSBIb3N0Q29tcG9uZW50O1xuICB9IGVsc2Uge1xuICAgIGdldFRhZzogc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICAgIHJldHVybiBjcmVhdGVGaWJlckZyb21GcmFnbWVudChwZW5kaW5nUHJvcHMuY2hpbGRyZW4sIG1vZGUsIGxhbmVzLCBrZXkpO1xuXG4gICAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICAgIGZpYmVyVGFnID0gTW9kZTtcbiAgICAgICAgbW9kZSB8PSBTdHJpY3RMZWdhY3lNb2RlO1xuXG4gICAgICAgIGlmICggKG1vZGUgJiBDb25jdXJyZW50TW9kZSkgIT09IE5vTW9kZSkge1xuICAgICAgICAgIC8vIFN0cmljdCBlZmZlY3RzIHNob3VsZCBuZXZlciBydW4gb24gbGVnYWN5IHJvb3RzXG4gICAgICAgICAgbW9kZSB8PSBTdHJpY3RFZmZlY3RzTW9kZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIFJFQUNUX1BST0ZJTEVSX1RZUEU6XG4gICAgICAgIHJldHVybiBjcmVhdGVGaWJlckZyb21Qcm9maWxlcihwZW5kaW5nUHJvcHMsIG1vZGUsIGxhbmVzLCBrZXkpO1xuXG4gICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICAgIHJldHVybiBjcmVhdGVGaWJlckZyb21TdXNwZW5zZShwZW5kaW5nUHJvcHMsIG1vZGUsIGxhbmVzLCBrZXkpO1xuXG4gICAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUZpYmVyRnJvbVN1c3BlbnNlTGlzdChwZW5kaW5nUHJvcHMsIG1vZGUsIGxhbmVzLCBrZXkpO1xuXG4gICAgICBjYXNlIFJFQUNUX09GRlNDUkVFTl9UWVBFOlxuICAgICAgICByZXR1cm4gY3JlYXRlRmliZXJGcm9tT2Zmc2NyZWVuKHBlbmRpbmdQcm9wcywgbW9kZSwgbGFuZXMsIGtleSk7XG5cbiAgICAgIGNhc2UgUkVBQ1RfTEVHQUNZX0hJRERFTl9UWVBFOlxuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZmFsbHRocm91Z2hcblxuICAgICAgY2FzZSBSRUFDVF9TQ09QRV9UWVBFOlxuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZmFsbHRocm91Z2hcblxuICAgICAgY2FzZSBSRUFDVF9DQUNIRV9UWVBFOlxuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZmFsbHRocm91Z2hcblxuICAgICAgY2FzZSBSRUFDVF9UUkFDSU5HX01BUktFUl9UWVBFOlxuXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZmFsbHRocm91Z2hcblxuICAgICAgY2FzZSBSRUFDVF9ERUJVR19UUkFDSU5HX01PREVfVFlQRTpcblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWZhbGx0aHJvdWdoXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgICAgICAgICBjYXNlIFJFQUNUX1BST1ZJREVSX1RZUEU6XG4gICAgICAgICAgICAgICAgZmliZXJUYWcgPSBDb250ZXh0UHJvdmlkZXI7XG4gICAgICAgICAgICAgICAgYnJlYWsgZ2V0VGFnO1xuXG4gICAgICAgICAgICAgIGNhc2UgUkVBQ1RfQ09OVEVYVF9UWVBFOlxuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBjb25zdW1lclxuICAgICAgICAgICAgICAgIGZpYmVyVGFnID0gQ29udGV4dENvbnN1bWVyO1xuICAgICAgICAgICAgICAgIGJyZWFrIGdldFRhZztcblxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgICAgICAgICAgZmliZXJUYWcgPSBGb3J3YXJkUmVmO1xuXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgcmVzb2x2ZWRUeXBlID0gcmVzb2x2ZUZvcndhcmRSZWZGb3JIb3RSZWxvYWRpbmcocmVzb2x2ZWRUeXBlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBicmVhayBnZXRUYWc7XG5cbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgICAgICAgICAgZmliZXJUYWcgPSBNZW1vQ29tcG9uZW50O1xuICAgICAgICAgICAgICAgIGJyZWFrIGdldFRhZztcblxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAgICAgICAgICBmaWJlclRhZyA9IExhenlDb21wb25lbnQ7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZWRUeXBlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBicmVhayBnZXRUYWc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIGluZm8gPSAnJztcblxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwgJiYgT2JqZWN0LmtleXModHlwZSkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgIGluZm8gKz0gJyBZb3UgbGlrZWx5IGZvcmdvdCB0byBleHBvcnQgeW91ciBjb21wb25lbnQgZnJvbSB0aGUgZmlsZSAnICsgXCJpdCdzIGRlZmluZWQgaW4sIG9yIHlvdSBtaWdodCBoYXZlIG1peGVkIHVwIGRlZmF1bHQgYW5kIFwiICsgJ25hbWVkIGltcG9ydHMuJztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG93bmVyTmFtZSA9IG93bmVyID8gZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcihvd25lcikgOiBudWxsO1xuXG4gICAgICAgICAgICBpZiAob3duZXJOYW1lKSB7XG4gICAgICAgICAgICAgIGluZm8gKz0gJ1xcblxcbkNoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgb3duZXJOYW1lICsgJ2AuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VsZW1lbnQgdHlwZSBpcyBpbnZhbGlkOiBleHBlY3RlZCBhIHN0cmluZyAoZm9yIGJ1aWx0LWluICcgKyAnY29tcG9uZW50cykgb3IgYSBjbGFzcy9mdW5jdGlvbiAoZm9yIGNvbXBvc2l0ZSBjb21wb25lbnRzKSAnICsgKFwiYnV0IGdvdDogXCIgKyAodHlwZSA9PSBudWxsID8gdHlwZSA6IHR5cGVvZiB0eXBlKSArIFwiLlwiICsgaW5mbykpO1xuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXIoZmliZXJUYWcsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKTtcbiAgZmliZXIuZWxlbWVudFR5cGUgPSB0eXBlO1xuICBmaWJlci50eXBlID0gcmVzb2x2ZWRUeXBlO1xuICBmaWJlci5sYW5lcyA9IGxhbmVzO1xuXG4gIHtcbiAgICBmaWJlci5fZGVidWdPd25lciA9IG93bmVyO1xuICB9XG5cbiAgcmV0dXJuIGZpYmVyO1xufVxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tRWxlbWVudChlbGVtZW50LCBtb2RlLCBsYW5lcykge1xuICB2YXIgb3duZXIgPSBudWxsO1xuXG4gIHtcbiAgICBvd25lciA9IGVsZW1lbnQuX293bmVyO1xuICB9XG5cbiAgdmFyIHR5cGUgPSBlbGVtZW50LnR5cGU7XG4gIHZhciBrZXkgPSBlbGVtZW50LmtleTtcbiAgdmFyIHBlbmRpbmdQcm9wcyA9IGVsZW1lbnQucHJvcHM7XG4gIHZhciBmaWJlciA9IGNyZWF0ZUZpYmVyRnJvbVR5cGVBbmRQcm9wcyh0eXBlLCBrZXksIHBlbmRpbmdQcm9wcywgb3duZXIsIG1vZGUsIGxhbmVzKTtcblxuICB7XG4gICAgZmliZXIuX2RlYnVnU291cmNlID0gZWxlbWVudC5fc291cmNlO1xuICAgIGZpYmVyLl9kZWJ1Z093bmVyID0gZWxlbWVudC5fb3duZXI7XG4gIH1cblxuICByZXR1cm4gZmliZXI7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21GcmFnbWVudChlbGVtZW50cywgbW9kZSwgbGFuZXMsIGtleSkge1xuICB2YXIgZmliZXIgPSBjcmVhdGVGaWJlcihGcmFnbWVudCwgZWxlbWVudHMsIGtleSwgbW9kZSk7XG4gIGZpYmVyLmxhbmVzID0gbGFuZXM7XG4gIHJldHVybiBmaWJlcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tUHJvZmlsZXIocGVuZGluZ1Byb3BzLCBtb2RlLCBsYW5lcywga2V5KSB7XG4gIHtcbiAgICBpZiAodHlwZW9mIHBlbmRpbmdQcm9wcy5pZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIGVycm9yKCdQcm9maWxlciBtdXN0IHNwZWNpZnkgYW4gXCJpZFwiIG9mIHR5cGUgYHN0cmluZ2AgYXMgYSBwcm9wLiBSZWNlaXZlZCB0aGUgdHlwZSBgJXNgIGluc3RlYWQuJywgdHlwZW9mIHBlbmRpbmdQcm9wcy5pZCk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXIoUHJvZmlsZXIsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlIHwgUHJvZmlsZU1vZGUpO1xuICBmaWJlci5lbGVtZW50VHlwZSA9IFJFQUNUX1BST0ZJTEVSX1RZUEU7XG4gIGZpYmVyLmxhbmVzID0gbGFuZXM7XG5cbiAge1xuICAgIGZpYmVyLnN0YXRlTm9kZSA9IHtcbiAgICAgIGVmZmVjdER1cmF0aW9uOiAwLFxuICAgICAgcGFzc2l2ZUVmZmVjdER1cmF0aW9uOiAwXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBmaWJlcjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tU3VzcGVuc2UocGVuZGluZ1Byb3BzLCBtb2RlLCBsYW5lcywga2V5KSB7XG4gIHZhciBmaWJlciA9IGNyZWF0ZUZpYmVyKFN1c3BlbnNlQ29tcG9uZW50LCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSk7XG4gIGZpYmVyLmVsZW1lbnRUeXBlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRTtcbiAgZmliZXIubGFuZXMgPSBsYW5lcztcbiAgcmV0dXJuIGZpYmVyO1xufVxuZnVuY3Rpb24gY3JlYXRlRmliZXJGcm9tU3VzcGVuc2VMaXN0KHBlbmRpbmdQcm9wcywgbW9kZSwgbGFuZXMsIGtleSkge1xuICB2YXIgZmliZXIgPSBjcmVhdGVGaWJlcihTdXNwZW5zZUxpc3RDb21wb25lbnQsIHBlbmRpbmdQcm9wcywga2V5LCBtb2RlKTtcbiAgZmliZXIuZWxlbWVudFR5cGUgPSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU7XG4gIGZpYmVyLmxhbmVzID0gbGFuZXM7XG4gIHJldHVybiBmaWJlcjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbU9mZnNjcmVlbihwZW5kaW5nUHJvcHMsIG1vZGUsIGxhbmVzLCBrZXkpIHtcbiAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXIoT2Zmc2NyZWVuQ29tcG9uZW50LCBwZW5kaW5nUHJvcHMsIGtleSwgbW9kZSk7XG4gIGZpYmVyLmVsZW1lbnRUeXBlID0gUkVBQ1RfT0ZGU0NSRUVOX1RZUEU7XG4gIGZpYmVyLmxhbmVzID0gbGFuZXM7XG4gIHZhciBwcmltYXJ5Q2hpbGRJbnN0YW5jZSA9IHtcbiAgICBpc0hpZGRlbjogZmFsc2VcbiAgfTtcbiAgZmliZXIuc3RhdGVOb2RlID0gcHJpbWFyeUNoaWxkSW5zdGFuY2U7XG4gIHJldHVybiBmaWJlcjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbVRleHQoY29udGVudCwgbW9kZSwgbGFuZXMpIHtcbiAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXIoSG9zdFRleHQsIGNvbnRlbnQsIG51bGwsIG1vZGUpO1xuICBmaWJlci5sYW5lcyA9IGxhbmVzO1xuICByZXR1cm4gZmliZXI7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21Ib3N0SW5zdGFuY2VGb3JEZWxldGlvbigpIHtcbiAgdmFyIGZpYmVyID0gY3JlYXRlRmliZXIoSG9zdENvbXBvbmVudCwgbnVsbCwgbnVsbCwgTm9Nb2RlKTtcbiAgZmliZXIuZWxlbWVudFR5cGUgPSAnREVMRVRFRCc7XG4gIHJldHVybiBmaWJlcjtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyRnJvbURlaHlkcmF0ZWRGcmFnbWVudChkZWh5ZHJhdGVkTm9kZSkge1xuICB2YXIgZmliZXIgPSBjcmVhdGVGaWJlcihEZWh5ZHJhdGVkRnJhZ21lbnQsIG51bGwsIG51bGwsIE5vTW9kZSk7XG4gIGZpYmVyLnN0YXRlTm9kZSA9IGRlaHlkcmF0ZWROb2RlO1xuICByZXR1cm4gZmliZXI7XG59XG5mdW5jdGlvbiBjcmVhdGVGaWJlckZyb21Qb3J0YWwocG9ydGFsLCBtb2RlLCBsYW5lcykge1xuICB2YXIgcGVuZGluZ1Byb3BzID0gcG9ydGFsLmNoaWxkcmVuICE9PSBudWxsID8gcG9ydGFsLmNoaWxkcmVuIDogW107XG4gIHZhciBmaWJlciA9IGNyZWF0ZUZpYmVyKEhvc3RQb3J0YWwsIHBlbmRpbmdQcm9wcywgcG9ydGFsLmtleSwgbW9kZSk7XG4gIGZpYmVyLmxhbmVzID0gbGFuZXM7XG4gIGZpYmVyLnN0YXRlTm9kZSA9IHtcbiAgICBjb250YWluZXJJbmZvOiBwb3J0YWwuY29udGFpbmVySW5mbyxcbiAgICBwZW5kaW5nQ2hpbGRyZW46IG51bGwsXG4gICAgLy8gVXNlZCBieSBwZXJzaXN0ZW50IHVwZGF0ZXNcbiAgICBpbXBsZW1lbnRhdGlvbjogcG9ydGFsLmltcGxlbWVudGF0aW9uXG4gIH07XG4gIHJldHVybiBmaWJlcjtcbn0gLy8gVXNlZCBmb3Igc3Rhc2hpbmcgV0lQIHByb3BlcnRpZXMgdG8gcmVwbGF5IGZhaWxlZCB3b3JrIGluIERFVi5cblxuZnVuY3Rpb24gYXNzaWduRmliZXJQcm9wZXJ0aWVzSW5ERVYodGFyZ2V0LCBzb3VyY2UpIHtcbiAgaWYgKHRhcmdldCA9PT0gbnVsbCkge1xuICAgIC8vIFRoaXMgRmliZXIncyBpbml0aWFsIHByb3BlcnRpZXMgd2lsbCBhbHdheXMgYmUgb3ZlcndyaXR0ZW4uXG4gICAgLy8gV2Ugb25seSB1c2UgYSBGaWJlciB0byBlbnN1cmUgdGhlIHNhbWUgaGlkZGVuIGNsYXNzIHNvIERFViBpc24ndCBzbG93LlxuICAgIHRhcmdldCA9IGNyZWF0ZUZpYmVyKEluZGV0ZXJtaW5hdGVDb21wb25lbnQsIG51bGwsIG51bGwsIE5vTW9kZSk7XG4gIH0gLy8gVGhpcyBpcyBpbnRlbnRpb25hbGx5IHdyaXR0ZW4gYXMgYSBsaXN0IG9mIGFsbCBwcm9wZXJ0aWVzLlxuICAvLyBXZSB0cmllZCB0byB1c2UgT2JqZWN0LmFzc2lnbigpIGluc3RlYWQgYnV0IHRoaXMgaXMgY2FsbGVkIGluXG4gIC8vIHRoZSBob3R0ZXN0IHBhdGgsIGFuZCBPYmplY3QuYXNzaWduKCkgd2FzIHRvbyBzbG93OlxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzEyNTAyXG4gIC8vIFRoaXMgY29kZSBpcyBERVYtb25seSBzbyBzaXplIGlzIG5vdCBhIGNvbmNlcm4uXG5cblxuICB0YXJnZXQudGFnID0gc291cmNlLnRhZztcbiAgdGFyZ2V0LmtleSA9IHNvdXJjZS5rZXk7XG4gIHRhcmdldC5lbGVtZW50VHlwZSA9IHNvdXJjZS5lbGVtZW50VHlwZTtcbiAgdGFyZ2V0LnR5cGUgPSBzb3VyY2UudHlwZTtcbiAgdGFyZ2V0LnN0YXRlTm9kZSA9IHNvdXJjZS5zdGF0ZU5vZGU7XG4gIHRhcmdldC5yZXR1cm4gPSBzb3VyY2UucmV0dXJuO1xuICB0YXJnZXQuY2hpbGQgPSBzb3VyY2UuY2hpbGQ7XG4gIHRhcmdldC5zaWJsaW5nID0gc291cmNlLnNpYmxpbmc7XG4gIHRhcmdldC5pbmRleCA9IHNvdXJjZS5pbmRleDtcbiAgdGFyZ2V0LnJlZiA9IHNvdXJjZS5yZWY7XG4gIHRhcmdldC5wZW5kaW5nUHJvcHMgPSBzb3VyY2UucGVuZGluZ1Byb3BzO1xuICB0YXJnZXQubWVtb2l6ZWRQcm9wcyA9IHNvdXJjZS5tZW1vaXplZFByb3BzO1xuICB0YXJnZXQudXBkYXRlUXVldWUgPSBzb3VyY2UudXBkYXRlUXVldWU7XG4gIHRhcmdldC5tZW1vaXplZFN0YXRlID0gc291cmNlLm1lbW9pemVkU3RhdGU7XG4gIHRhcmdldC5kZXBlbmRlbmNpZXMgPSBzb3VyY2UuZGVwZW5kZW5jaWVzO1xuICB0YXJnZXQubW9kZSA9IHNvdXJjZS5tb2RlO1xuICB0YXJnZXQuZmxhZ3MgPSBzb3VyY2UuZmxhZ3M7XG4gIHRhcmdldC5zdWJ0cmVlRmxhZ3MgPSBzb3VyY2Uuc3VidHJlZUZsYWdzO1xuICB0YXJnZXQuZGVsZXRpb25zID0gc291cmNlLmRlbGV0aW9ucztcbiAgdGFyZ2V0LmxhbmVzID0gc291cmNlLmxhbmVzO1xuICB0YXJnZXQuY2hpbGRMYW5lcyA9IHNvdXJjZS5jaGlsZExhbmVzO1xuICB0YXJnZXQuYWx0ZXJuYXRlID0gc291cmNlLmFsdGVybmF0ZTtcblxuICB7XG4gICAgdGFyZ2V0LmFjdHVhbER1cmF0aW9uID0gc291cmNlLmFjdHVhbER1cmF0aW9uO1xuICAgIHRhcmdldC5hY3R1YWxTdGFydFRpbWUgPSBzb3VyY2UuYWN0dWFsU3RhcnRUaW1lO1xuICAgIHRhcmdldC5zZWxmQmFzZUR1cmF0aW9uID0gc291cmNlLnNlbGZCYXNlRHVyYXRpb247XG4gICAgdGFyZ2V0LnRyZWVCYXNlRHVyYXRpb24gPSBzb3VyY2UudHJlZUJhc2VEdXJhdGlvbjtcbiAgfVxuXG4gIHRhcmdldC5fZGVidWdTb3VyY2UgPSBzb3VyY2UuX2RlYnVnU291cmNlO1xuICB0YXJnZXQuX2RlYnVnT3duZXIgPSBzb3VyY2UuX2RlYnVnT3duZXI7XG4gIHRhcmdldC5fZGVidWdOZWVkc1JlbW91bnQgPSBzb3VyY2UuX2RlYnVnTmVlZHNSZW1vdW50O1xuICB0YXJnZXQuX2RlYnVnSG9va1R5cGVzID0gc291cmNlLl9kZWJ1Z0hvb2tUeXBlcztcbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gRmliZXJSb290Tm9kZShjb250YWluZXJJbmZvLCB0YWcsIGh5ZHJhdGUsIGlkZW50aWZpZXJQcmVmaXgsIG9uUmVjb3ZlcmFibGVFcnJvcikge1xuICB0aGlzLnRhZyA9IHRhZztcbiAgdGhpcy5jb250YWluZXJJbmZvID0gY29udGFpbmVySW5mbztcbiAgdGhpcy5wZW5kaW5nQ2hpbGRyZW4gPSBudWxsO1xuICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuICB0aGlzLnBpbmdDYWNoZSA9IG51bGw7XG4gIHRoaXMuZmluaXNoZWRXb3JrID0gbnVsbDtcbiAgdGhpcy50aW1lb3V0SGFuZGxlID0gbm9UaW1lb3V0O1xuICB0aGlzLmNvbnRleHQgPSBudWxsO1xuICB0aGlzLnBlbmRpbmdDb250ZXh0ID0gbnVsbDtcbiAgdGhpcy5jYWxsYmFja05vZGUgPSBudWxsO1xuICB0aGlzLmNhbGxiYWNrUHJpb3JpdHkgPSBOb0xhbmU7XG4gIHRoaXMuZXZlbnRUaW1lcyA9IGNyZWF0ZUxhbmVNYXAoTm9MYW5lcyk7XG4gIHRoaXMuZXhwaXJhdGlvblRpbWVzID0gY3JlYXRlTGFuZU1hcChOb1RpbWVzdGFtcCk7XG4gIHRoaXMucGVuZGluZ0xhbmVzID0gTm9MYW5lcztcbiAgdGhpcy5zdXNwZW5kZWRMYW5lcyA9IE5vTGFuZXM7XG4gIHRoaXMucGluZ2VkTGFuZXMgPSBOb0xhbmVzO1xuICB0aGlzLmV4cGlyZWRMYW5lcyA9IE5vTGFuZXM7XG4gIHRoaXMubXV0YWJsZVJlYWRMYW5lcyA9IE5vTGFuZXM7XG4gIHRoaXMuZmluaXNoZWRMYW5lcyA9IE5vTGFuZXM7XG4gIHRoaXMuZW50YW5nbGVkTGFuZXMgPSBOb0xhbmVzO1xuICB0aGlzLmVudGFuZ2xlbWVudHMgPSBjcmVhdGVMYW5lTWFwKE5vTGFuZXMpO1xuICB0aGlzLmlkZW50aWZpZXJQcmVmaXggPSBpZGVudGlmaWVyUHJlZml4O1xuICB0aGlzLm9uUmVjb3ZlcmFibGVFcnJvciA9IG9uUmVjb3ZlcmFibGVFcnJvcjtcblxuICB7XG4gICAgdGhpcy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhID0gbnVsbDtcbiAgfVxuXG4gIHtcbiAgICB0aGlzLmVmZmVjdER1cmF0aW9uID0gMDtcbiAgICB0aGlzLnBhc3NpdmVFZmZlY3REdXJhdGlvbiA9IDA7XG4gIH1cblxuICB7XG4gICAgdGhpcy5tZW1vaXplZFVwZGF0ZXJzID0gbmV3IFNldCgpO1xuICAgIHZhciBwZW5kaW5nVXBkYXRlcnNMYW5lTWFwID0gdGhpcy5wZW5kaW5nVXBkYXRlcnNMYW5lTWFwID0gW107XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgVG90YWxMYW5lczsgX2krKykge1xuICAgICAgcGVuZGluZ1VwZGF0ZXJzTGFuZU1hcC5wdXNoKG5ldyBTZXQoKSk7XG4gICAgfVxuICB9XG5cbiAge1xuICAgIHN3aXRjaCAodGFnKSB7XG4gICAgICBjYXNlIENvbmN1cnJlbnRSb290OlxuICAgICAgICB0aGlzLl9kZWJ1Z1Jvb3RUeXBlID0gaHlkcmF0ZSA/ICdoeWRyYXRlUm9vdCgpJyA6ICdjcmVhdGVSb290KCknO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBMZWdhY3lSb290OlxuICAgICAgICB0aGlzLl9kZWJ1Z1Jvb3RUeXBlID0gaHlkcmF0ZSA/ICdoeWRyYXRlKCknIDogJ3JlbmRlcigpJztcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZpYmVyUm9vdChjb250YWluZXJJbmZvLCB0YWcsIGh5ZHJhdGUsIGluaXRpYWxDaGlsZHJlbiwgaHlkcmF0aW9uQ2FsbGJhY2tzLCBpc1N0cmljdE1vZGUsIGNvbmN1cnJlbnRVcGRhdGVzQnlEZWZhdWx0T3ZlcnJpZGUsIC8vIFRPRE86IFdlIGhhdmUgc2V2ZXJhbCBvZiB0aGVzZSBhcmd1bWVudHMgdGhhdCBhcmUgY29uY2VwdHVhbGx5IHBhcnQgb2YgdGhlXG4vLyBob3N0IGNvbmZpZywgYnV0IGJlY2F1c2UgdGhleSBhcmUgcGFzc2VkIGluIGF0IHJ1bnRpbWUsIHdlIGhhdmUgdG8gdGhyZWFkXG4vLyB0aGVtIHRocm91Z2ggdGhlIHJvb3QgY29uc3RydWN0b3IuIFBlcmhhcHMgd2Ugc2hvdWxkIHB1dCB0aGVtIGFsbCBpbnRvIGFcbi8vIHNpbmdsZSB0eXBlLCBsaWtlIGEgRHluYW1pY0hvc3RDb25maWcgdGhhdCBpcyBkZWZpbmVkIGJ5IHRoZSByZW5kZXJlci5cbmlkZW50aWZpZXJQcmVmaXgsIG9uUmVjb3ZlcmFibGVFcnJvciwgdHJhbnNpdGlvbkNhbGxiYWNrcykge1xuICB2YXIgcm9vdCA9IG5ldyBGaWJlclJvb3ROb2RlKGNvbnRhaW5lckluZm8sIHRhZywgaHlkcmF0ZSwgaWRlbnRpZmllclByZWZpeCwgb25SZWNvdmVyYWJsZUVycm9yKTtcbiAgLy8gc3RhdGVOb2RlIGlzIGFueS5cblxuXG4gIHZhciB1bmluaXRpYWxpemVkRmliZXIgPSBjcmVhdGVIb3N0Um9vdEZpYmVyKHRhZywgaXNTdHJpY3RNb2RlKTtcbiAgcm9vdC5jdXJyZW50ID0gdW5pbml0aWFsaXplZEZpYmVyO1xuICB1bmluaXRpYWxpemVkRmliZXIuc3RhdGVOb2RlID0gcm9vdDtcblxuICB7XG4gICAgdmFyIF9pbml0aWFsU3RhdGUgPSB7XG4gICAgICBlbGVtZW50OiBpbml0aWFsQ2hpbGRyZW4sXG4gICAgICBpc0RlaHlkcmF0ZWQ6IGh5ZHJhdGUsXG4gICAgICBjYWNoZTogbnVsbCxcbiAgICAgIC8vIG5vdCBlbmFibGVkIHlldFxuICAgICAgdHJhbnNpdGlvbnM6IG51bGwsXG4gICAgICBwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOiBudWxsXG4gICAgfTtcbiAgICB1bmluaXRpYWxpemVkRmliZXIubWVtb2l6ZWRTdGF0ZSA9IF9pbml0aWFsU3RhdGU7XG4gIH1cblxuICBpbml0aWFsaXplVXBkYXRlUXVldWUodW5pbml0aWFsaXplZEZpYmVyKTtcbiAgcmV0dXJuIHJvb3Q7XG59XG5cbnZhciBSZWFjdFZlcnNpb24gPSAnMTguMy4xJztcblxuZnVuY3Rpb24gY3JlYXRlUG9ydGFsKGNoaWxkcmVuLCBjb250YWluZXJJbmZvLCAvLyBUT0RPOiBmaWd1cmUgb3V0IHRoZSBBUEkgZm9yIGNyb3NzLXJlbmRlcmVyIGltcGxlbWVudGF0aW9uLlxuaW1wbGVtZW50YXRpb24pIHtcbiAgdmFyIGtleSA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogbnVsbDtcblxuICB7XG4gICAgY2hlY2tLZXlTdHJpbmdDb2VyY2lvbihrZXkpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAvLyBUaGlzIHRhZyBhbGxvdyB1cyB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzIGFzIGEgUmVhY3QgUG9ydGFsXG4gICAgJCR0eXBlb2Y6IFJFQUNUX1BPUlRBTF9UWVBFLFxuICAgIGtleToga2V5ID09IG51bGwgPyBudWxsIDogJycgKyBrZXksXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGNvbnRhaW5lckluZm86IGNvbnRhaW5lckluZm8sXG4gICAgaW1wbGVtZW50YXRpb246IGltcGxlbWVudGF0aW9uXG4gIH07XG59XG5cbnZhciBkaWRXYXJuQWJvdXROZXN0ZWRVcGRhdGVzO1xudmFyIGRpZFdhcm5BYm91dEZpbmROb2RlSW5TdHJpY3RNb2RlO1xuXG57XG4gIGRpZFdhcm5BYm91dE5lc3RlZFVwZGF0ZXMgPSBmYWxzZTtcbiAgZGlkV2FybkFib3V0RmluZE5vZGVJblN0cmljdE1vZGUgPSB7fTtcbn1cblxuZnVuY3Rpb24gZ2V0Q29udGV4dEZvclN1YnRyZWUocGFyZW50Q29tcG9uZW50KSB7XG4gIGlmICghcGFyZW50Q29tcG9uZW50KSB7XG4gICAgcmV0dXJuIGVtcHR5Q29udGV4dE9iamVjdDtcbiAgfVxuXG4gIHZhciBmaWJlciA9IGdldChwYXJlbnRDb21wb25lbnQpO1xuICB2YXIgcGFyZW50Q29udGV4dCA9IGZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0KGZpYmVyKTtcblxuICBpZiAoZmliZXIudGFnID09PSBDbGFzc0NvbXBvbmVudCkge1xuICAgIHZhciBDb21wb25lbnQgPSBmaWJlci50eXBlO1xuXG4gICAgaWYgKGlzQ29udGV4dFByb3ZpZGVyKENvbXBvbmVudCkpIHtcbiAgICAgIHJldHVybiBwcm9jZXNzQ2hpbGRDb250ZXh0KGZpYmVyLCBDb21wb25lbnQsIHBhcmVudENvbnRleHQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBwYXJlbnRDb250ZXh0O1xufVxuXG5mdW5jdGlvbiBmaW5kSG9zdEluc3RhbmNlV2l0aFdhcm5pbmcoY29tcG9uZW50LCBtZXRob2ROYW1lKSB7XG4gIHtcbiAgICB2YXIgZmliZXIgPSBnZXQoY29tcG9uZW50KTtcblxuICAgIGlmIChmaWJlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudC5yZW5kZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmFibGUgdG8gZmluZCBub2RlIG9uIGFuIHVubW91bnRlZCBjb21wb25lbnQuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGNvbXBvbmVudCkuam9pbignLCcpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJBcmd1bWVudCBhcHBlYXJzIHRvIG5vdCBiZSBhIFJlYWN0Q29tcG9uZW50LiBLZXlzOiBcIiArIGtleXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBob3N0RmliZXIgPSBmaW5kQ3VycmVudEhvc3RGaWJlcihmaWJlcik7XG5cbiAgICBpZiAoaG9zdEZpYmVyID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoaG9zdEZpYmVyLm1vZGUgJiBTdHJpY3RMZWdhY3lNb2RlKSB7XG4gICAgICB2YXIgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWVGcm9tRmliZXIoZmliZXIpIHx8ICdDb21wb25lbnQnO1xuXG4gICAgICBpZiAoIWRpZFdhcm5BYm91dEZpbmROb2RlSW5TdHJpY3RNb2RlW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgIGRpZFdhcm5BYm91dEZpbmROb2RlSW5TdHJpY3RNb2RlW2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgICAgdmFyIHByZXZpb3VzRmliZXIgPSBjdXJyZW50O1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgc2V0Q3VycmVudEZpYmVyKGhvc3RGaWJlcik7XG5cbiAgICAgICAgICBpZiAoZmliZXIubW9kZSAmIFN0cmljdExlZ2FjeU1vZGUpIHtcbiAgICAgICAgICAgIGVycm9yKCclcyBpcyBkZXByZWNhdGVkIGluIFN0cmljdE1vZGUuICcgKyAnJXMgd2FzIHBhc3NlZCBhbiBpbnN0YW5jZSBvZiAlcyB3aGljaCBpcyBpbnNpZGUgU3RyaWN0TW9kZS4gJyArICdJbnN0ZWFkLCBhZGQgYSByZWYgZGlyZWN0bHkgdG8gdGhlIGVsZW1lbnQgeW91IHdhbnQgdG8gcmVmZXJlbmNlLiAnICsgJ0xlYXJuIG1vcmUgYWJvdXQgdXNpbmcgcmVmcyBzYWZlbHkgaGVyZTogJyArICdodHRwczovL3JlYWN0anMub3JnL2xpbmsvc3RyaWN0LW1vZGUtZmluZC1ub2RlJywgbWV0aG9kTmFtZSwgbWV0aG9kTmFtZSwgY29tcG9uZW50TmFtZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGVycm9yKCclcyBpcyBkZXByZWNhdGVkIGluIFN0cmljdE1vZGUuICcgKyAnJXMgd2FzIHBhc3NlZCBhbiBpbnN0YW5jZSBvZiAlcyB3aGljaCByZW5kZXJzIFN0cmljdE1vZGUgY2hpbGRyZW4uICcgKyAnSW5zdGVhZCwgYWRkIGEgcmVmIGRpcmVjdGx5IHRvIHRoZSBlbGVtZW50IHlvdSB3YW50IHRvIHJlZmVyZW5jZS4gJyArICdMZWFybiBtb3JlIGFib3V0IHVzaW5nIHJlZnMgc2FmZWx5IGhlcmU6ICcgKyAnaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3N0cmljdC1tb2RlLWZpbmQtbm9kZScsIG1ldGhvZE5hbWUsIG1ldGhvZE5hbWUsIGNvbXBvbmVudE5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAvLyBJZGVhbGx5IHRoaXMgc2hvdWxkIHJlc2V0IHRvIHByZXZpb3VzIGJ1dCB0aGlzIHNob3VsZG4ndCBiZSBjYWxsZWQgaW5cbiAgICAgICAgICAvLyByZW5kZXIgYW5kIHRoZXJlJ3MgYW5vdGhlciB3YXJuaW5nIGZvciB0aGF0IGFueXdheS5cbiAgICAgICAgICBpZiAocHJldmlvdXNGaWJlcikge1xuICAgICAgICAgICAgc2V0Q3VycmVudEZpYmVyKHByZXZpb3VzRmliZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNldEN1cnJlbnRGaWJlcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBob3N0RmliZXIuc3RhdGVOb2RlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRhaW5lcihjb250YWluZXJJbmZvLCB0YWcsIGh5ZHJhdGlvbkNhbGxiYWNrcywgaXNTdHJpY3RNb2RlLCBjb25jdXJyZW50VXBkYXRlc0J5RGVmYXVsdE92ZXJyaWRlLCBpZGVudGlmaWVyUHJlZml4LCBvblJlY292ZXJhYmxlRXJyb3IsIHRyYW5zaXRpb25DYWxsYmFja3MpIHtcbiAgdmFyIGh5ZHJhdGUgPSBmYWxzZTtcbiAgdmFyIGluaXRpYWxDaGlsZHJlbiA9IG51bGw7XG4gIHJldHVybiBjcmVhdGVGaWJlclJvb3QoY29udGFpbmVySW5mbywgdGFnLCBoeWRyYXRlLCBpbml0aWFsQ2hpbGRyZW4sIGh5ZHJhdGlvbkNhbGxiYWNrcywgaXNTdHJpY3RNb2RlLCBjb25jdXJyZW50VXBkYXRlc0J5RGVmYXVsdE92ZXJyaWRlLCBpZGVudGlmaWVyUHJlZml4LCBvblJlY292ZXJhYmxlRXJyb3IpO1xufVxuZnVuY3Rpb24gY3JlYXRlSHlkcmF0aW9uQ29udGFpbmVyKGluaXRpYWxDaGlsZHJlbiwgLy8gVE9ETzogUmVtb3ZlIGBjYWxsYmFja2Agd2hlbiB3ZSBkZWxldGUgbGVnYWN5IG1vZGUuXG5jYWxsYmFjaywgY29udGFpbmVySW5mbywgdGFnLCBoeWRyYXRpb25DYWxsYmFja3MsIGlzU3RyaWN0TW9kZSwgY29uY3VycmVudFVwZGF0ZXNCeURlZmF1bHRPdmVycmlkZSwgaWRlbnRpZmllclByZWZpeCwgb25SZWNvdmVyYWJsZUVycm9yLCB0cmFuc2l0aW9uQ2FsbGJhY2tzKSB7XG4gIHZhciBoeWRyYXRlID0gdHJ1ZTtcbiAgdmFyIHJvb3QgPSBjcmVhdGVGaWJlclJvb3QoY29udGFpbmVySW5mbywgdGFnLCBoeWRyYXRlLCBpbml0aWFsQ2hpbGRyZW4sIGh5ZHJhdGlvbkNhbGxiYWNrcywgaXNTdHJpY3RNb2RlLCBjb25jdXJyZW50VXBkYXRlc0J5RGVmYXVsdE92ZXJyaWRlLCBpZGVudGlmaWVyUHJlZml4LCBvblJlY292ZXJhYmxlRXJyb3IpOyAvLyBUT0RPOiBNb3ZlIHRoaXMgdG8gRmliZXJSb290IGNvbnN0cnVjdG9yXG5cbiAgcm9vdC5jb250ZXh0ID0gZ2V0Q29udGV4dEZvclN1YnRyZWUobnVsbCk7IC8vIFNjaGVkdWxlIHRoZSBpbml0aWFsIHJlbmRlci4gSW4gYSBoeWRyYXRpb24gcm9vdCwgdGhpcyBpcyBkaWZmZXJlbnQgZnJvbVxuICAvLyBhIHJlZ3VsYXIgdXBkYXRlIGJlY2F1c2UgdGhlIGluaXRpYWwgcmVuZGVyIG11c3QgbWF0Y2ggd2FzIHdhcyByZW5kZXJlZFxuICAvLyBvbiB0aGUgc2VydmVyLlxuICAvLyBOT1RFOiBUaGlzIHVwZGF0ZSBpbnRlbnRpb25hbGx5IGRvZXNuJ3QgaGF2ZSBhIHBheWxvYWQuIFdlJ3JlIG9ubHkgdXNpbmdcbiAgLy8gdGhlIHVwZGF0ZSB0byBzY2hlZHVsZSB3b3JrIG9uIHRoZSByb290IGZpYmVyIChhbmQsIGZvciBsZWdhY3kgcm9vdHMsIHRvXG4gIC8vIGVucXVldWUgdGhlIGNhbGxiYWNrIGlmIG9uZSBpcyBwcm92aWRlZCkuXG5cbiAgdmFyIGN1cnJlbnQgPSByb290LmN1cnJlbnQ7XG4gIHZhciBldmVudFRpbWUgPSByZXF1ZXN0RXZlbnRUaW1lKCk7XG4gIHZhciBsYW5lID0gcmVxdWVzdFVwZGF0ZUxhbmUoY3VycmVudCk7XG4gIHZhciB1cGRhdGUgPSBjcmVhdGVVcGRhdGUoZXZlbnRUaW1lLCBsYW5lKTtcbiAgdXBkYXRlLmNhbGxiYWNrID0gY2FsbGJhY2sgIT09IHVuZGVmaW5lZCAmJiBjYWxsYmFjayAhPT0gbnVsbCA/IGNhbGxiYWNrIDogbnVsbDtcbiAgZW5xdWV1ZVVwZGF0ZShjdXJyZW50LCB1cGRhdGUsIGxhbmUpO1xuICBzY2hlZHVsZUluaXRpYWxIeWRyYXRpb25PblJvb3Qocm9vdCwgbGFuZSwgZXZlbnRUaW1lKTtcbiAgcmV0dXJuIHJvb3Q7XG59XG5mdW5jdGlvbiB1cGRhdGVDb250YWluZXIoZWxlbWVudCwgY29udGFpbmVyLCBwYXJlbnRDb21wb25lbnQsIGNhbGxiYWNrKSB7XG4gIHtcbiAgICBvblNjaGVkdWxlUm9vdChjb250YWluZXIsIGVsZW1lbnQpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnQkMSA9IGNvbnRhaW5lci5jdXJyZW50O1xuICB2YXIgZXZlbnRUaW1lID0gcmVxdWVzdEV2ZW50VGltZSgpO1xuICB2YXIgbGFuZSA9IHJlcXVlc3RVcGRhdGVMYW5lKGN1cnJlbnQkMSk7XG5cbiAge1xuICAgIG1hcmtSZW5kZXJTY2hlZHVsZWQobGFuZSk7XG4gIH1cblxuICB2YXIgY29udGV4dCA9IGdldENvbnRleHRGb3JTdWJ0cmVlKHBhcmVudENvbXBvbmVudCk7XG5cbiAgaWYgKGNvbnRhaW5lci5jb250ZXh0ID09PSBudWxsKSB7XG4gICAgY29udGFpbmVyLmNvbnRleHQgPSBjb250ZXh0O1xuICB9IGVsc2Uge1xuICAgIGNvbnRhaW5lci5wZW5kaW5nQ29udGV4dCA9IGNvbnRleHQ7XG4gIH1cblxuICB7XG4gICAgaWYgKGlzUmVuZGVyaW5nICYmIGN1cnJlbnQgIT09IG51bGwgJiYgIWRpZFdhcm5BYm91dE5lc3RlZFVwZGF0ZXMpIHtcbiAgICAgIGRpZFdhcm5BYm91dE5lc3RlZFVwZGF0ZXMgPSB0cnVlO1xuXG4gICAgICBlcnJvcignUmVuZGVyIG1ldGhvZHMgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGU7ICcgKyAndHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSByZW5kZXIgaXMgbm90IGFsbG93ZWQuICcgKyAnSWYgbmVjZXNzYXJ5LCB0cmlnZ2VyIG5lc3RlZCB1cGRhdGVzIGluIGNvbXBvbmVudERpZFVwZGF0ZS5cXG5cXG4nICsgJ0NoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mICVzLicsIGdldENvbXBvbmVudE5hbWVGcm9tRmliZXIoY3VycmVudCkgfHwgJ1Vua25vd24nKTtcbiAgICB9XG4gIH1cblxuICB2YXIgdXBkYXRlID0gY3JlYXRlVXBkYXRlKGV2ZW50VGltZSwgbGFuZSk7IC8vIENhdXRpb246IFJlYWN0IERldlRvb2xzIGN1cnJlbnRseSBkZXBlbmRzIG9uIHRoaXMgcHJvcGVydHlcbiAgLy8gYmVpbmcgY2FsbGVkIFwiZWxlbWVudFwiLlxuXG4gIHVwZGF0ZS5wYXlsb2FkID0ge1xuICAgIGVsZW1lbnQ6IGVsZW1lbnRcbiAgfTtcbiAgY2FsbGJhY2sgPSBjYWxsYmFjayA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGNhbGxiYWNrO1xuXG4gIGlmIChjYWxsYmFjayAhPT0gbnVsbCkge1xuICAgIHtcbiAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZXJyb3IoJ3JlbmRlciguLi4pOiBFeHBlY3RlZCB0aGUgbGFzdCBvcHRpb25hbCBgY2FsbGJhY2tgIGFyZ3VtZW50IHRvIGJlIGEgJyArICdmdW5jdGlvbi4gSW5zdGVhZCByZWNlaXZlZDogJXMuJywgY2FsbGJhY2spO1xuICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZS5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICB9XG5cbiAgdmFyIHJvb3QgPSBlbnF1ZXVlVXBkYXRlKGN1cnJlbnQkMSwgdXBkYXRlLCBsYW5lKTtcblxuICBpZiAocm9vdCAhPT0gbnVsbCkge1xuICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBjdXJyZW50JDEsIGxhbmUsIGV2ZW50VGltZSk7XG4gICAgZW50YW5nbGVUcmFuc2l0aW9ucyhyb290LCBjdXJyZW50JDEsIGxhbmUpO1xuICB9XG5cbiAgcmV0dXJuIGxhbmU7XG59XG5mdW5jdGlvbiBnZXRQdWJsaWNSb290SW5zdGFuY2UoY29udGFpbmVyKSB7XG4gIHZhciBjb250YWluZXJGaWJlciA9IGNvbnRhaW5lci5jdXJyZW50O1xuXG4gIGlmICghY29udGFpbmVyRmliZXIuY2hpbGQpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHN3aXRjaCAoY29udGFpbmVyRmliZXIuY2hpbGQudGFnKSB7XG4gICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgcmV0dXJuIGdldFB1YmxpY0luc3RhbmNlKGNvbnRhaW5lckZpYmVyLmNoaWxkLnN0YXRlTm9kZSk7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGNvbnRhaW5lckZpYmVyLmNoaWxkLnN0YXRlTm9kZTtcbiAgfVxufVxuZnVuY3Rpb24gYXR0ZW1wdFN5bmNocm9ub3VzSHlkcmF0aW9uJDEoZmliZXIpIHtcbiAgc3dpdGNoIChmaWJlci50YWcpIHtcbiAgICBjYXNlIEhvc3RSb290OlxuICAgICAge1xuICAgICAgICB2YXIgcm9vdCA9IGZpYmVyLnN0YXRlTm9kZTtcblxuICAgICAgICBpZiAoaXNSb290RGVoeWRyYXRlZChyb290KSkge1xuICAgICAgICAgIC8vIEZsdXNoIHRoZSBmaXJzdCBzY2hlZHVsZWQgXCJ1cGRhdGVcIi5cbiAgICAgICAgICB2YXIgbGFuZXMgPSBnZXRIaWdoZXN0UHJpb3JpdHlQZW5kaW5nTGFuZXMocm9vdCk7XG4gICAgICAgICAgZmx1c2hSb290KHJvb3QsIGxhbmVzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgY2FzZSBTdXNwZW5zZUNvbXBvbmVudDpcbiAgICAgIHtcbiAgICAgICAgZmx1c2hTeW5jKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICB2YXIgcm9vdCA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShmaWJlciwgU3luY0xhbmUpO1xuXG4gICAgICAgICAgaWYgKHJvb3QgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBldmVudFRpbWUgPSByZXF1ZXN0RXZlbnRUaW1lKCk7XG4gICAgICAgICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIFN5bmNMYW5lLCBldmVudFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7IC8vIElmIHdlJ3JlIHN0aWxsIGJsb2NrZWQgYWZ0ZXIgdGhpcywgd2UgbmVlZCB0byBpbmNyZWFzZVxuICAgICAgICAvLyB0aGUgcHJpb3JpdHkgb2YgYW55IHByb21pc2VzIHJlc29sdmluZyB3aXRoaW4gdGhpc1xuICAgICAgICAvLyBib3VuZGFyeSBzbyB0aGF0IHRoZXkgbmV4dCBhdHRlbXB0IGFsc28gaGFzIGhpZ2hlciBwcmkuXG5cbiAgICAgICAgdmFyIHJldHJ5TGFuZSA9IFN5bmNMYW5lO1xuICAgICAgICBtYXJrUmV0cnlMYW5lSWZOb3RIeWRyYXRlZChmaWJlciwgcmV0cnlMYW5lKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1JldHJ5TGFuZUltcGwoZmliZXIsIHJldHJ5TGFuZSkge1xuICB2YXIgc3VzcGVuc2VTdGF0ZSA9IGZpYmVyLm1lbW9pemVkU3RhdGU7XG5cbiAgaWYgKHN1c3BlbnNlU3RhdGUgIT09IG51bGwgJiYgc3VzcGVuc2VTdGF0ZS5kZWh5ZHJhdGVkICE9PSBudWxsKSB7XG4gICAgc3VzcGVuc2VTdGF0ZS5yZXRyeUxhbmUgPSBoaWdoZXJQcmlvcml0eUxhbmUoc3VzcGVuc2VTdGF0ZS5yZXRyeUxhbmUsIHJldHJ5TGFuZSk7XG4gIH1cbn0gLy8gSW5jcmVhc2VzIHRoZSBwcmlvcml0eSBvZiB0aGVuYWJsZXMgd2hlbiB0aGV5IHJlc29sdmUgd2l0aGluIHRoaXMgYm91bmRhcnkuXG5cblxuZnVuY3Rpb24gbWFya1JldHJ5TGFuZUlmTm90SHlkcmF0ZWQoZmliZXIsIHJldHJ5TGFuZSkge1xuICBtYXJrUmV0cnlMYW5lSW1wbChmaWJlciwgcmV0cnlMYW5lKTtcbiAgdmFyIGFsdGVybmF0ZSA9IGZpYmVyLmFsdGVybmF0ZTtcblxuICBpZiAoYWx0ZXJuYXRlKSB7XG4gICAgbWFya1JldHJ5TGFuZUltcGwoYWx0ZXJuYXRlLCByZXRyeUxhbmUpO1xuICB9XG59XG5mdW5jdGlvbiBhdHRlbXB0Q29udGludW91c0h5ZHJhdGlvbiQxKGZpYmVyKSB7XG4gIGlmIChmaWJlci50YWcgIT09IFN1c3BlbnNlQ29tcG9uZW50KSB7XG4gICAgLy8gV2UgaWdub3JlIEhvc3RSb290cyBoZXJlIGJlY2F1c2Ugd2UgY2FuJ3QgaW5jcmVhc2VcbiAgICAvLyB0aGVpciBwcmlvcml0eSBhbmQgdGhleSBzaG91bGQgbm90IHN1c3BlbmQgb24gSS9PLFxuICAgIC8vIHNpbmNlIHlvdSBoYXZlIHRvIHdyYXAgYW55dGhpbmcgdGhhdCBtaWdodCBzdXNwZW5kIGluXG4gICAgLy8gU3VzcGVuc2UuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGxhbmUgPSBTZWxlY3RpdmVIeWRyYXRpb25MYW5lO1xuICB2YXIgcm9vdCA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShmaWJlciwgbGFuZSk7XG5cbiAgaWYgKHJvb3QgIT09IG51bGwpIHtcbiAgICB2YXIgZXZlbnRUaW1lID0gcmVxdWVzdEV2ZW50VGltZSgpO1xuICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgbGFuZSwgZXZlbnRUaW1lKTtcbiAgfVxuXG4gIG1hcmtSZXRyeUxhbmVJZk5vdEh5ZHJhdGVkKGZpYmVyLCBsYW5lKTtcbn1cbmZ1bmN0aW9uIGF0dGVtcHRIeWRyYXRpb25BdEN1cnJlbnRQcmlvcml0eSQxKGZpYmVyKSB7XG4gIGlmIChmaWJlci50YWcgIT09IFN1c3BlbnNlQ29tcG9uZW50KSB7XG4gICAgLy8gV2UgaWdub3JlIEhvc3RSb290cyBoZXJlIGJlY2F1c2Ugd2UgY2FuJ3QgaW5jcmVhc2VcbiAgICAvLyB0aGVpciBwcmlvcml0eSBvdGhlciB0aGFuIHN5bmNocm9ub3VzbHkgZmx1c2ggaXQuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIGxhbmUgPSByZXF1ZXN0VXBkYXRlTGFuZShmaWJlcik7XG4gIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCBsYW5lKTtcblxuICBpZiAocm9vdCAhPT0gbnVsbCkge1xuICAgIHZhciBldmVudFRpbWUgPSByZXF1ZXN0RXZlbnRUaW1lKCk7XG4gICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCBsYW5lLCBldmVudFRpbWUpO1xuICB9XG5cbiAgbWFya1JldHJ5TGFuZUlmTm90SHlkcmF0ZWQoZmliZXIsIGxhbmUpO1xufVxuZnVuY3Rpb24gZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMoZmliZXIpIHtcbiAgdmFyIGhvc3RGaWJlciA9IGZpbmRDdXJyZW50SG9zdEZpYmVyV2l0aE5vUG9ydGFscyhmaWJlcik7XG5cbiAgaWYgKGhvc3RGaWJlciA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGhvc3RGaWJlci5zdGF0ZU5vZGU7XG59XG5cbnZhciBzaG91bGRFcnJvckltcGwgPSBmdW5jdGlvbiAoZmliZXIpIHtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5mdW5jdGlvbiBzaG91bGRFcnJvcihmaWJlcikge1xuICByZXR1cm4gc2hvdWxkRXJyb3JJbXBsKGZpYmVyKTtcbn1cblxudmFyIHNob3VsZFN1c3BlbmRJbXBsID0gZnVuY3Rpb24gKGZpYmVyKSB7XG4gIHJldHVybiBmYWxzZTtcbn07XG5cbmZ1bmN0aW9uIHNob3VsZFN1c3BlbmQoZmliZXIpIHtcbiAgcmV0dXJuIHNob3VsZFN1c3BlbmRJbXBsKGZpYmVyKTtcbn1cbnZhciBvdmVycmlkZUhvb2tTdGF0ZSA9IG51bGw7XG52YXIgb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoID0gbnVsbDtcbnZhciBvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGggPSBudWxsO1xudmFyIG92ZXJyaWRlUHJvcHMgPSBudWxsO1xudmFyIG92ZXJyaWRlUHJvcHNEZWxldGVQYXRoID0gbnVsbDtcbnZhciBvdmVycmlkZVByb3BzUmVuYW1lUGF0aCA9IG51bGw7XG52YXIgc2NoZWR1bGVVcGRhdGUgPSBudWxsO1xudmFyIHNldEVycm9ySGFuZGxlciA9IG51bGw7XG52YXIgc2V0U3VzcGVuc2VIYW5kbGVyID0gbnVsbDtcblxue1xuICB2YXIgY29weVdpdGhEZWxldGVJbXBsID0gZnVuY3Rpb24gKG9iaiwgcGF0aCwgaW5kZXgpIHtcbiAgICB2YXIga2V5ID0gcGF0aFtpbmRleF07XG4gICAgdmFyIHVwZGF0ZWQgPSBpc0FycmF5KG9iaikgPyBvYmouc2xpY2UoKSA6IGFzc2lnbih7fSwgb2JqKTtcblxuICAgIGlmIChpbmRleCArIDEgPT09IHBhdGgubGVuZ3RoKSB7XG4gICAgICBpZiAoaXNBcnJheSh1cGRhdGVkKSkge1xuICAgICAgICB1cGRhdGVkLnNwbGljZShrZXksIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlIHVwZGF0ZWRba2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVwZGF0ZWQ7XG4gICAgfSAvLyAkRmxvd0ZpeE1lIG51bWJlciBvciBzdHJpbmcgaXMgZmluZSBoZXJlXG5cblxuICAgIHVwZGF0ZWRba2V5XSA9IGNvcHlXaXRoRGVsZXRlSW1wbChvYmpba2V5XSwgcGF0aCwgaW5kZXggKyAxKTtcbiAgICByZXR1cm4gdXBkYXRlZDtcbiAgfTtcblxuICB2YXIgY29weVdpdGhEZWxldGUgPSBmdW5jdGlvbiAob2JqLCBwYXRoKSB7XG4gICAgcmV0dXJuIGNvcHlXaXRoRGVsZXRlSW1wbChvYmosIHBhdGgsIDApO1xuICB9O1xuXG4gIHZhciBjb3B5V2l0aFJlbmFtZUltcGwgPSBmdW5jdGlvbiAob2JqLCBvbGRQYXRoLCBuZXdQYXRoLCBpbmRleCkge1xuICAgIHZhciBvbGRLZXkgPSBvbGRQYXRoW2luZGV4XTtcbiAgICB2YXIgdXBkYXRlZCA9IGlzQXJyYXkob2JqKSA/IG9iai5zbGljZSgpIDogYXNzaWduKHt9LCBvYmopO1xuXG4gICAgaWYgKGluZGV4ICsgMSA9PT0gb2xkUGF0aC5sZW5ndGgpIHtcbiAgICAgIHZhciBuZXdLZXkgPSBuZXdQYXRoW2luZGV4XTsgLy8gJEZsb3dGaXhNZSBudW1iZXIgb3Igc3RyaW5nIGlzIGZpbmUgaGVyZVxuXG4gICAgICB1cGRhdGVkW25ld0tleV0gPSB1cGRhdGVkW29sZEtleV07XG5cbiAgICAgIGlmIChpc0FycmF5KHVwZGF0ZWQpKSB7XG4gICAgICAgIHVwZGF0ZWQuc3BsaWNlKG9sZEtleSwgMSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZWxldGUgdXBkYXRlZFtvbGRLZXldO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lIG51bWJlciBvciBzdHJpbmcgaXMgZmluZSBoZXJlXG4gICAgICB1cGRhdGVkW29sZEtleV0gPSBjb3B5V2l0aFJlbmFtZUltcGwoIC8vICRGbG93Rml4TWUgbnVtYmVyIG9yIHN0cmluZyBpcyBmaW5lIGhlcmVcbiAgICAgIG9ialtvbGRLZXldLCBvbGRQYXRoLCBuZXdQYXRoLCBpbmRleCArIDEpO1xuICAgIH1cblxuICAgIHJldHVybiB1cGRhdGVkO1xuICB9O1xuXG4gIHZhciBjb3B5V2l0aFJlbmFtZSA9IGZ1bmN0aW9uIChvYmosIG9sZFBhdGgsIG5ld1BhdGgpIHtcbiAgICBpZiAob2xkUGF0aC5sZW5ndGggIT09IG5ld1BhdGgubGVuZ3RoKSB7XG4gICAgICB3YXJuKCdjb3B5V2l0aFJlbmFtZSgpIGV4cGVjdHMgcGF0aHMgb2YgdGhlIHNhbWUgbGVuZ3RoJyk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuZXdQYXRoLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICBpZiAob2xkUGF0aFtpXSAhPT0gbmV3UGF0aFtpXSkge1xuICAgICAgICAgIHdhcm4oJ2NvcHlXaXRoUmVuYW1lKCkgZXhwZWN0cyBwYXRocyB0byBiZSB0aGUgc2FtZSBleGNlcHQgZm9yIHRoZSBkZWVwZXN0IGtleScpO1xuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvcHlXaXRoUmVuYW1lSW1wbChvYmosIG9sZFBhdGgsIG5ld1BhdGgsIDApO1xuICB9O1xuXG4gIHZhciBjb3B5V2l0aFNldEltcGwgPSBmdW5jdGlvbiAob2JqLCBwYXRoLCBpbmRleCwgdmFsdWUpIHtcbiAgICBpZiAoaW5kZXggPj0gcGF0aC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIga2V5ID0gcGF0aFtpbmRleF07XG4gICAgdmFyIHVwZGF0ZWQgPSBpc0FycmF5KG9iaikgPyBvYmouc2xpY2UoKSA6IGFzc2lnbih7fSwgb2JqKTsgLy8gJEZsb3dGaXhNZSBudW1iZXIgb3Igc3RyaW5nIGlzIGZpbmUgaGVyZVxuXG4gICAgdXBkYXRlZFtrZXldID0gY29weVdpdGhTZXRJbXBsKG9ialtrZXldLCBwYXRoLCBpbmRleCArIDEsIHZhbHVlKTtcbiAgICByZXR1cm4gdXBkYXRlZDtcbiAgfTtcblxuICB2YXIgY29weVdpdGhTZXQgPSBmdW5jdGlvbiAob2JqLCBwYXRoLCB2YWx1ZSkge1xuICAgIHJldHVybiBjb3B5V2l0aFNldEltcGwob2JqLCBwYXRoLCAwLCB2YWx1ZSk7XG4gIH07XG5cbiAgdmFyIGZpbmRIb29rID0gZnVuY3Rpb24gKGZpYmVyLCBpZCkge1xuICAgIC8vIEZvciBub3csIHRoZSBcImlkXCIgb2Ygc3RhdGVmdWwgaG9va3MgaXMganVzdCB0aGUgc3RhdGVmdWwgaG9vayBpbmRleC5cbiAgICAvLyBUaGlzIG1heSBjaGFuZ2UgaW4gdGhlIGZ1dHVyZSB3aXRoIGUuZy4gbmVzdGVkIGhvb2tzLlxuICAgIHZhciBjdXJyZW50SG9vayA9IGZpYmVyLm1lbW9pemVkU3RhdGU7XG5cbiAgICB3aGlsZSAoY3VycmVudEhvb2sgIT09IG51bGwgJiYgaWQgPiAwKSB7XG4gICAgICBjdXJyZW50SG9vayA9IGN1cnJlbnRIb29rLm5leHQ7XG4gICAgICBpZC0tO1xuICAgIH1cblxuICAgIHJldHVybiBjdXJyZW50SG9vaztcbiAgfTsgLy8gU3VwcG9ydCBEZXZUb29scyBlZGl0YWJsZSB2YWx1ZXMgZm9yIHVzZVN0YXRlIGFuZCB1c2VSZWR1Y2VyLlxuXG5cbiAgb3ZlcnJpZGVIb29rU3RhdGUgPSBmdW5jdGlvbiAoZmliZXIsIGlkLCBwYXRoLCB2YWx1ZSkge1xuICAgIHZhciBob29rID0gZmluZEhvb2soZmliZXIsIGlkKTtcblxuICAgIGlmIChob29rICE9PSBudWxsKSB7XG4gICAgICB2YXIgbmV3U3RhdGUgPSBjb3B5V2l0aFNldChob29rLm1lbW9pemVkU3RhdGUsIHBhdGgsIHZhbHVlKTtcbiAgICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlO1xuICAgICAgaG9vay5iYXNlU3RhdGUgPSBuZXdTdGF0ZTsgLy8gV2UgYXJlbid0IGFjdHVhbGx5IGFkZGluZyBhbiB1cGRhdGUgdG8gdGhlIHF1ZXVlLFxuICAgICAgLy8gYmVjYXVzZSB0aGVyZSBpcyBubyB1cGRhdGUgd2UgY2FuIGFkZCBmb3IgdXNlUmVkdWNlciBob29rcyB0aGF0IHdvbid0IHRyaWdnZXIgYW4gZXJyb3IuXG4gICAgICAvLyAoVGhlcmUncyBubyBhcHByb3ByaWF0ZSBhY3Rpb24gdHlwZSBmb3IgRGV2VG9vbHMgb3ZlcnJpZGVzLilcbiAgICAgIC8vIEFzIGEgcmVzdWx0IHRob3VnaCwgUmVhY3Qgd2lsbCBzZWUgdGhlIHNjaGVkdWxlZCB1cGRhdGUgYXMgYSBub29wIGFuZCBiYWlsb3V0LlxuICAgICAgLy8gU2hhbGxvdyBjbG9uaW5nIHByb3BzIHdvcmtzIGFzIGEgd29ya2Fyb3VuZCBmb3Igbm93IHRvIGJ5cGFzcyB0aGUgYmFpbG91dCBjaGVjay5cblxuICAgICAgZmliZXIubWVtb2l6ZWRQcm9wcyA9IGFzc2lnbih7fSwgZmliZXIubWVtb2l6ZWRQcm9wcyk7XG4gICAgICB2YXIgcm9vdCA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShmaWJlciwgU3luY0xhbmUpO1xuXG4gICAgICBpZiAocm9vdCAhPT0gbnVsbCkge1xuICAgICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIFN5bmNMYW5lLCBOb1RpbWVzdGFtcCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCA9IGZ1bmN0aW9uIChmaWJlciwgaWQsIHBhdGgpIHtcbiAgICB2YXIgaG9vayA9IGZpbmRIb29rKGZpYmVyLCBpZCk7XG5cbiAgICBpZiAoaG9vayAhPT0gbnVsbCkge1xuICAgICAgdmFyIG5ld1N0YXRlID0gY29weVdpdGhEZWxldGUoaG9vay5tZW1vaXplZFN0YXRlLCBwYXRoKTtcbiAgICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlO1xuICAgICAgaG9vay5iYXNlU3RhdGUgPSBuZXdTdGF0ZTsgLy8gV2UgYXJlbid0IGFjdHVhbGx5IGFkZGluZyBhbiB1cGRhdGUgdG8gdGhlIHF1ZXVlLFxuICAgICAgLy8gYmVjYXVzZSB0aGVyZSBpcyBubyB1cGRhdGUgd2UgY2FuIGFkZCBmb3IgdXNlUmVkdWNlciBob29rcyB0aGF0IHdvbid0IHRyaWdnZXIgYW4gZXJyb3IuXG4gICAgICAvLyAoVGhlcmUncyBubyBhcHByb3ByaWF0ZSBhY3Rpb24gdHlwZSBmb3IgRGV2VG9vbHMgb3ZlcnJpZGVzLilcbiAgICAgIC8vIEFzIGEgcmVzdWx0IHRob3VnaCwgUmVhY3Qgd2lsbCBzZWUgdGhlIHNjaGVkdWxlZCB1cGRhdGUgYXMgYSBub29wIGFuZCBiYWlsb3V0LlxuICAgICAgLy8gU2hhbGxvdyBjbG9uaW5nIHByb3BzIHdvcmtzIGFzIGEgd29ya2Fyb3VuZCBmb3Igbm93IHRvIGJ5cGFzcyB0aGUgYmFpbG91dCBjaGVjay5cblxuICAgICAgZmliZXIubWVtb2l6ZWRQcm9wcyA9IGFzc2lnbih7fSwgZmliZXIubWVtb2l6ZWRQcm9wcyk7XG4gICAgICB2YXIgcm9vdCA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShmaWJlciwgU3luY0xhbmUpO1xuXG4gICAgICBpZiAocm9vdCAhPT0gbnVsbCkge1xuICAgICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIFN5bmNMYW5lLCBOb1RpbWVzdGFtcCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCA9IGZ1bmN0aW9uIChmaWJlciwgaWQsIG9sZFBhdGgsIG5ld1BhdGgpIHtcbiAgICB2YXIgaG9vayA9IGZpbmRIb29rKGZpYmVyLCBpZCk7XG5cbiAgICBpZiAoaG9vayAhPT0gbnVsbCkge1xuICAgICAgdmFyIG5ld1N0YXRlID0gY29weVdpdGhSZW5hbWUoaG9vay5tZW1vaXplZFN0YXRlLCBvbGRQYXRoLCBuZXdQYXRoKTtcbiAgICAgIGhvb2subWVtb2l6ZWRTdGF0ZSA9IG5ld1N0YXRlO1xuICAgICAgaG9vay5iYXNlU3RhdGUgPSBuZXdTdGF0ZTsgLy8gV2UgYXJlbid0IGFjdHVhbGx5IGFkZGluZyBhbiB1cGRhdGUgdG8gdGhlIHF1ZXVlLFxuICAgICAgLy8gYmVjYXVzZSB0aGVyZSBpcyBubyB1cGRhdGUgd2UgY2FuIGFkZCBmb3IgdXNlUmVkdWNlciBob29rcyB0aGF0IHdvbid0IHRyaWdnZXIgYW4gZXJyb3IuXG4gICAgICAvLyAoVGhlcmUncyBubyBhcHByb3ByaWF0ZSBhY3Rpb24gdHlwZSBmb3IgRGV2VG9vbHMgb3ZlcnJpZGVzLilcbiAgICAgIC8vIEFzIGEgcmVzdWx0IHRob3VnaCwgUmVhY3Qgd2lsbCBzZWUgdGhlIHNjaGVkdWxlZCB1cGRhdGUgYXMgYSBub29wIGFuZCBiYWlsb3V0LlxuICAgICAgLy8gU2hhbGxvdyBjbG9uaW5nIHByb3BzIHdvcmtzIGFzIGEgd29ya2Fyb3VuZCBmb3Igbm93IHRvIGJ5cGFzcyB0aGUgYmFpbG91dCBjaGVjay5cblxuICAgICAgZmliZXIubWVtb2l6ZWRQcm9wcyA9IGFzc2lnbih7fSwgZmliZXIubWVtb2l6ZWRQcm9wcyk7XG4gICAgICB2YXIgcm9vdCA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShmaWJlciwgU3luY0xhbmUpO1xuXG4gICAgICBpZiAocm9vdCAhPT0gbnVsbCkge1xuICAgICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIFN5bmNMYW5lLCBOb1RpbWVzdGFtcCk7XG4gICAgICB9XG4gICAgfVxuICB9OyAvLyBTdXBwb3J0IERldlRvb2xzIHByb3BzIGZvciBmdW5jdGlvbiBjb21wb25lbnRzLCBmb3J3YXJkUmVmLCBtZW1vLCBob3N0IGNvbXBvbmVudHMsIGV0Yy5cblxuXG4gIG92ZXJyaWRlUHJvcHMgPSBmdW5jdGlvbiAoZmliZXIsIHBhdGgsIHZhbHVlKSB7XG4gICAgZmliZXIucGVuZGluZ1Byb3BzID0gY29weVdpdGhTZXQoZmliZXIubWVtb2l6ZWRQcm9wcywgcGF0aCwgdmFsdWUpO1xuXG4gICAgaWYgKGZpYmVyLmFsdGVybmF0ZSkge1xuICAgICAgZmliZXIuYWx0ZXJuYXRlLnBlbmRpbmdQcm9wcyA9IGZpYmVyLnBlbmRpbmdQcm9wcztcbiAgICB9XG5cbiAgICB2YXIgcm9vdCA9IGVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZShmaWJlciwgU3luY0xhbmUpO1xuXG4gICAgaWYgKHJvb3QgIT09IG51bGwpIHtcbiAgICAgIHNjaGVkdWxlVXBkYXRlT25GaWJlcihyb290LCBmaWJlciwgU3luY0xhbmUsIE5vVGltZXN0YW1wKTtcbiAgICB9XG4gIH07XG5cbiAgb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGggPSBmdW5jdGlvbiAoZmliZXIsIHBhdGgpIHtcbiAgICBmaWJlci5wZW5kaW5nUHJvcHMgPSBjb3B5V2l0aERlbGV0ZShmaWJlci5tZW1vaXplZFByb3BzLCBwYXRoKTtcblxuICAgIGlmIChmaWJlci5hbHRlcm5hdGUpIHtcbiAgICAgIGZpYmVyLmFsdGVybmF0ZS5wZW5kaW5nUHJvcHMgPSBmaWJlci5wZW5kaW5nUHJvcHM7XG4gICAgfVxuXG4gICAgdmFyIHJvb3QgPSBlbnF1ZXVlQ29uY3VycmVudFJlbmRlckZvckxhbmUoZmliZXIsIFN5bmNMYW5lKTtcblxuICAgIGlmIChyb290ICE9PSBudWxsKSB7XG4gICAgICBzY2hlZHVsZVVwZGF0ZU9uRmliZXIocm9vdCwgZmliZXIsIFN5bmNMYW5lLCBOb1RpbWVzdGFtcCk7XG4gICAgfVxuICB9O1xuXG4gIG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoID0gZnVuY3Rpb24gKGZpYmVyLCBvbGRQYXRoLCBuZXdQYXRoKSB7XG4gICAgZmliZXIucGVuZGluZ1Byb3BzID0gY29weVdpdGhSZW5hbWUoZmliZXIubWVtb2l6ZWRQcm9wcywgb2xkUGF0aCwgbmV3UGF0aCk7XG5cbiAgICBpZiAoZmliZXIuYWx0ZXJuYXRlKSB7XG4gICAgICBmaWJlci5hbHRlcm5hdGUucGVuZGluZ1Byb3BzID0gZmliZXIucGVuZGluZ1Byb3BzO1xuICAgIH1cblxuICAgIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCBTeW5jTGFuZSk7XG5cbiAgICBpZiAocm9vdCAhPT0gbnVsbCkge1xuICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCBTeW5jTGFuZSwgTm9UaW1lc3RhbXApO1xuICAgIH1cbiAgfTtcblxuICBzY2hlZHVsZVVwZGF0ZSA9IGZ1bmN0aW9uIChmaWJlcikge1xuICAgIHZhciByb290ID0gZW5xdWV1ZUNvbmN1cnJlbnRSZW5kZXJGb3JMYW5lKGZpYmVyLCBTeW5jTGFuZSk7XG5cbiAgICBpZiAocm9vdCAhPT0gbnVsbCkge1xuICAgICAgc2NoZWR1bGVVcGRhdGVPbkZpYmVyKHJvb3QsIGZpYmVyLCBTeW5jTGFuZSwgTm9UaW1lc3RhbXApO1xuICAgIH1cbiAgfTtcblxuICBzZXRFcnJvckhhbmRsZXIgPSBmdW5jdGlvbiAobmV3U2hvdWxkRXJyb3JJbXBsKSB7XG4gICAgc2hvdWxkRXJyb3JJbXBsID0gbmV3U2hvdWxkRXJyb3JJbXBsO1xuICB9O1xuXG4gIHNldFN1c3BlbnNlSGFuZGxlciA9IGZ1bmN0aW9uIChuZXdTaG91bGRTdXNwZW5kSW1wbCkge1xuICAgIHNob3VsZFN1c3BlbmRJbXBsID0gbmV3U2hvdWxkU3VzcGVuZEltcGw7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyKGZpYmVyKSB7XG4gIHZhciBob3N0RmliZXIgPSBmaW5kQ3VycmVudEhvc3RGaWJlcihmaWJlcik7XG5cbiAgaWYgKGhvc3RGaWJlciA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGhvc3RGaWJlci5zdGF0ZU5vZGU7XG59XG5cbmZ1bmN0aW9uIGVtcHR5RmluZEZpYmVyQnlIb3N0SW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRGaWJlckZvckRldlRvb2xzKCkge1xuICByZXR1cm4gY3VycmVudDtcbn1cblxuZnVuY3Rpb24gaW5qZWN0SW50b0RldlRvb2xzKGRldlRvb2xzQ29uZmlnKSB7XG4gIHZhciBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSA9IGRldlRvb2xzQ29uZmlnLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO1xuICB2YXIgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0Q3VycmVudERpc3BhdGNoZXI7XG4gIHJldHVybiBpbmplY3RJbnRlcm5hbHMoe1xuICAgIGJ1bmRsZVR5cGU6IGRldlRvb2xzQ29uZmlnLmJ1bmRsZVR5cGUsXG4gICAgdmVyc2lvbjogZGV2VG9vbHNDb25maWcudmVyc2lvbixcbiAgICByZW5kZXJlclBhY2thZ2VOYW1lOiBkZXZUb29sc0NvbmZpZy5yZW5kZXJlclBhY2thZ2VOYW1lLFxuICAgIHJlbmRlcmVyQ29uZmlnOiBkZXZUb29sc0NvbmZpZy5yZW5kZXJlckNvbmZpZyxcbiAgICBvdmVycmlkZUhvb2tTdGF0ZTogb3ZlcnJpZGVIb29rU3RhdGUsXG4gICAgb3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoOiBvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgsXG4gICAgb3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoOiBvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgsXG4gICAgb3ZlcnJpZGVQcm9wczogb3ZlcnJpZGVQcm9wcyxcbiAgICBvdmVycmlkZVByb3BzRGVsZXRlUGF0aDogb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgsXG4gICAgb3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGg6IG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoLFxuICAgIHNldEVycm9ySGFuZGxlcjogc2V0RXJyb3JIYW5kbGVyLFxuICAgIHNldFN1c3BlbnNlSGFuZGxlcjogc2V0U3VzcGVuc2VIYW5kbGVyLFxuICAgIHNjaGVkdWxlVXBkYXRlOiBzY2hlZHVsZVVwZGF0ZSxcbiAgICBjdXJyZW50RGlzcGF0Y2hlclJlZjogUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixcbiAgICBmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjogZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIsXG4gICAgZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6IGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIHx8IGVtcHR5RmluZEZpYmVyQnlIb3N0SW5zdGFuY2UsXG4gICAgLy8gUmVhY3QgUmVmcmVzaFxuICAgIGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDogIGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCAsXG4gICAgc2NoZWR1bGVSZWZyZXNoOiAgc2NoZWR1bGVSZWZyZXNoICxcbiAgICBzY2hlZHVsZVJvb3Q6ICBzY2hlZHVsZVJvb3QgLFxuICAgIHNldFJlZnJlc2hIYW5kbGVyOiAgc2V0UmVmcmVzaEhhbmRsZXIgLFxuICAgIC8vIEVuYWJsZXMgRGV2VG9vbHMgdG8gYXBwZW5kIG93bmVyIHN0YWNrcyB0byBlcnJvciBtZXNzYWdlcyBpbiBERVYgbW9kZS5cbiAgICBnZXRDdXJyZW50RmliZXI6ICBnZXRDdXJyZW50RmliZXJGb3JEZXZUb29scyAsXG4gICAgLy8gRW5hYmxlcyBEZXZUb29scyB0byBkZXRlY3QgcmVjb25jaWxlciB2ZXJzaW9uIHJhdGhlciB0aGFuIHJlbmRlcmVyIHZlcnNpb25cbiAgICAvLyB3aGljaCBtYXkgbm90IG1hdGNoIGZvciB0aGlyZCBwYXJ0eSByZW5kZXJlcnMuXG4gICAgcmVjb25jaWxlclZlcnNpb246IFJlYWN0VmVyc2lvblxuICB9KTtcbn1cblxuLyogZ2xvYmFsIHJlcG9ydEVycm9yICovXG5cbnZhciBkZWZhdWx0T25SZWNvdmVyYWJsZUVycm9yID0gdHlwZW9mIHJlcG9ydEVycm9yID09PSAnZnVuY3Rpb24nID8gLy8gSW4gbW9kZXJuIGJyb3dzZXJzLCByZXBvcnRFcnJvciB3aWxsIGRpc3BhdGNoIGFuIGVycm9yIGV2ZW50LFxuLy8gZW11bGF0aW5nIGFuIHVuY2F1Z2h0IEphdmFTY3JpcHQgZXJyb3IuXG5yZXBvcnRFcnJvciA6IGZ1bmN0aW9uIChlcnJvcikge1xuICAvLyBJbiBvbGRlciBicm93c2VycyBhbmQgdGVzdCBlbnZpcm9ubWVudHMsIGZhbGxiYWNrIHRvIGNvbnNvbGUuZXJyb3IuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1pbnRlcm5hbC9uby1wcm9kdWN0aW9uLWxvZ2dpbmdcbiAgY29uc29sZVsnZXJyb3InXShlcnJvcik7XG59O1xuXG5mdW5jdGlvbiBSZWFjdERPTVJvb3QoaW50ZXJuYWxSb290KSB7XG4gIHRoaXMuX2ludGVybmFsUm9vdCA9IGludGVybmFsUm9vdDtcbn1cblxuUmVhY3RET01IeWRyYXRpb25Sb290LnByb3RvdHlwZS5yZW5kZXIgPSBSZWFjdERPTVJvb3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChjaGlsZHJlbikge1xuICB2YXIgcm9vdCA9IHRoaXMuX2ludGVybmFsUm9vdDtcblxuICBpZiAocm9vdCA9PT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHVwZGF0ZSBhbiB1bm1vdW50ZWQgcm9vdC4nKTtcbiAgfVxuXG4gIHtcbiAgICBpZiAodHlwZW9mIGFyZ3VtZW50c1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZXJyb3IoJ3JlbmRlciguLi4pOiBkb2VzIG5vdCBzdXBwb3J0IHRoZSBzZWNvbmQgY2FsbGJhY2sgYXJndW1lbnQuICcgKyAnVG8gZXhlY3V0ZSBhIHNpZGUgZWZmZWN0IGFmdGVyIHJlbmRlcmluZywgZGVjbGFyZSBpdCBpbiBhIGNvbXBvbmVudCBib2R5IHdpdGggdXNlRWZmZWN0KCkuJyk7XG4gICAgfSBlbHNlIGlmIChpc1ZhbGlkQ29udGFpbmVyKGFyZ3VtZW50c1sxXSkpIHtcbiAgICAgIGVycm9yKCdZb3UgcGFzc2VkIGEgY29udGFpbmVyIHRvIHRoZSBzZWNvbmQgYXJndW1lbnQgb2Ygcm9vdC5yZW5kZXIoLi4uKS4gJyArIFwiWW91IGRvbid0IG5lZWQgdG8gcGFzcyBpdCBhZ2FpbiBzaW5jZSB5b3UgYWxyZWFkeSBwYXNzZWQgaXQgdG8gY3JlYXRlIHRoZSByb290LlwiKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBhcmd1bWVudHNbMV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBlcnJvcignWW91IHBhc3NlZCBhIHNlY29uZCBhcmd1bWVudCB0byByb290LnJlbmRlciguLi4pIGJ1dCBpdCBvbmx5IGFjY2VwdHMgJyArICdvbmUgYXJndW1lbnQuJyk7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRhaW5lciA9IHJvb3QuY29udGFpbmVySW5mbztcblxuICAgIGlmIChjb250YWluZXIubm9kZVR5cGUgIT09IENPTU1FTlRfTk9ERSkge1xuICAgICAgdmFyIGhvc3RJbnN0YW5jZSA9IGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzKHJvb3QuY3VycmVudCk7XG5cbiAgICAgIGlmIChob3N0SW5zdGFuY2UpIHtcbiAgICAgICAgaWYgKGhvc3RJbnN0YW5jZS5wYXJlbnROb2RlICE9PSBjb250YWluZXIpIHtcbiAgICAgICAgICBlcnJvcigncmVuZGVyKC4uLik6IEl0IGxvb2tzIGxpa2UgdGhlIFJlYWN0LXJlbmRlcmVkIGNvbnRlbnQgb2YgdGhlICcgKyAncm9vdCBjb250YWluZXIgd2FzIHJlbW92ZWQgd2l0aG91dCB1c2luZyBSZWFjdC4gVGhpcyBpcyBub3QgJyArICdzdXBwb3J0ZWQgYW5kIHdpbGwgY2F1c2UgZXJyb3JzLiBJbnN0ZWFkLCBjYWxsICcgKyBcInJvb3QudW5tb3VudCgpIHRvIGVtcHR5IGEgcm9vdCdzIGNvbnRhaW5lci5cIik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB1cGRhdGVDb250YWluZXIoY2hpbGRyZW4sIHJvb3QsIG51bGwsIG51bGwpO1xufTtcblxuUmVhY3RET01IeWRyYXRpb25Sb290LnByb3RvdHlwZS51bm1vdW50ID0gUmVhY3RET01Sb290LnByb3RvdHlwZS51bm1vdW50ID0gZnVuY3Rpb24gKCkge1xuICB7XG4gICAgaWYgKHR5cGVvZiBhcmd1bWVudHNbMF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGVycm9yKCd1bm1vdW50KC4uLik6IGRvZXMgbm90IHN1cHBvcnQgYSBjYWxsYmFjayBhcmd1bWVudC4gJyArICdUbyBleGVjdXRlIGEgc2lkZSBlZmZlY3QgYWZ0ZXIgcmVuZGVyaW5nLCBkZWNsYXJlIGl0IGluIGEgY29tcG9uZW50IGJvZHkgd2l0aCB1c2VFZmZlY3QoKS4nKTtcbiAgICB9XG4gIH1cblxuICB2YXIgcm9vdCA9IHRoaXMuX2ludGVybmFsUm9vdDtcblxuICBpZiAocm9vdCAhPT0gbnVsbCkge1xuICAgIHRoaXMuX2ludGVybmFsUm9vdCA9IG51bGw7XG4gICAgdmFyIGNvbnRhaW5lciA9IHJvb3QuY29udGFpbmVySW5mbztcblxuICAgIHtcbiAgICAgIGlmIChpc0FscmVhZHlSZW5kZXJpbmcoKSkge1xuICAgICAgICBlcnJvcignQXR0ZW1wdGVkIHRvIHN5bmNocm9ub3VzbHkgdW5tb3VudCBhIHJvb3Qgd2hpbGUgUmVhY3Qgd2FzIGFscmVhZHkgJyArICdyZW5kZXJpbmcuIFJlYWN0IGNhbm5vdCBmaW5pc2ggdW5tb3VudGluZyB0aGUgcm9vdCB1bnRpbCB0aGUgJyArICdjdXJyZW50IHJlbmRlciBoYXMgY29tcGxldGVkLCB3aGljaCBtYXkgbGVhZCB0byBhIHJhY2UgY29uZGl0aW9uLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZsdXNoU3luYyhmdW5jdGlvbiAoKSB7XG4gICAgICB1cGRhdGVDb250YWluZXIobnVsbCwgcm9vdCwgbnVsbCwgbnVsbCk7XG4gICAgfSk7XG4gICAgdW5tYXJrQ29udGFpbmVyQXNSb290KGNvbnRhaW5lcik7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVJvb3QoY29udGFpbmVyLCBvcHRpb25zKSB7XG4gIGlmICghaXNWYWxpZENvbnRhaW5lcihjb250YWluZXIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjcmVhdGVSb290KC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJyk7XG4gIH1cblxuICB3YXJuSWZSZWFjdERPTUNvbnRhaW5lckluREVWKGNvbnRhaW5lcik7XG4gIHZhciBpc1N0cmljdE1vZGUgPSBmYWxzZTtcbiAgdmFyIGNvbmN1cnJlbnRVcGRhdGVzQnlEZWZhdWx0T3ZlcnJpZGUgPSBmYWxzZTtcbiAgdmFyIGlkZW50aWZpZXJQcmVmaXggPSAnJztcbiAgdmFyIG9uUmVjb3ZlcmFibGVFcnJvciA9IGRlZmF1bHRPblJlY292ZXJhYmxlRXJyb3I7XG4gIHZhciB0cmFuc2l0aW9uQ2FsbGJhY2tzID0gbnVsbDtcblxuICBpZiAob3B0aW9ucyAhPT0gbnVsbCAmJiBvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICB7XG4gICAgICBpZiAob3B0aW9ucy5oeWRyYXRlKSB7XG4gICAgICAgIHdhcm4oJ2h5ZHJhdGUgdGhyb3VnaCBjcmVhdGVSb290IGlzIGRlcHJlY2F0ZWQuIFVzZSBSZWFjdERPTUNsaWVudC5oeWRyYXRlUm9vdChjb250YWluZXIsIDxBcHAgLz4pIGluc3RlYWQuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdvYmplY3QnICYmIG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucy4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFKSB7XG4gICAgICAgICAgZXJyb3IoJ1lvdSBwYXNzZWQgYSBKU1ggZWxlbWVudCB0byBjcmVhdGVSb290LiBZb3UgcHJvYmFibHkgbWVhbnQgdG8gJyArICdjYWxsIHJvb3QucmVuZGVyIGluc3RlYWQuICcgKyAnRXhhbXBsZSB1c2FnZTpcXG5cXG4nICsgJyAgbGV0IHJvb3QgPSBjcmVhdGVSb290KGRvbUNvbnRhaW5lcik7XFxuJyArICcgIHJvb3QucmVuZGVyKDxBcHAgLz4pOycpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMudW5zdGFibGVfc3RyaWN0TW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgaXNTdHJpY3RNb2RlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pZGVudGlmaWVyUHJlZml4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlkZW50aWZpZXJQcmVmaXggPSBvcHRpb25zLmlkZW50aWZpZXJQcmVmaXg7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMub25SZWNvdmVyYWJsZUVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9uUmVjb3ZlcmFibGVFcnJvciA9IG9wdGlvbnMub25SZWNvdmVyYWJsZUVycm9yO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnRyYW5zaXRpb25DYWxsYmFja3MgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdHJhbnNpdGlvbkNhbGxiYWNrcyA9IG9wdGlvbnMudHJhbnNpdGlvbkNhbGxiYWNrcztcbiAgICB9XG4gIH1cblxuICB2YXIgcm9vdCA9IGNyZWF0ZUNvbnRhaW5lcihjb250YWluZXIsIENvbmN1cnJlbnRSb290LCBudWxsLCBpc1N0cmljdE1vZGUsIGNvbmN1cnJlbnRVcGRhdGVzQnlEZWZhdWx0T3ZlcnJpZGUsIGlkZW50aWZpZXJQcmVmaXgsIG9uUmVjb3ZlcmFibGVFcnJvcik7XG4gIG1hcmtDb250YWluZXJBc1Jvb3Qocm9vdC5jdXJyZW50LCBjb250YWluZXIpO1xuICB2YXIgcm9vdENvbnRhaW5lckVsZW1lbnQgPSBjb250YWluZXIubm9kZVR5cGUgPT09IENPTU1FTlRfTk9ERSA/IGNvbnRhaW5lci5wYXJlbnROb2RlIDogY29udGFpbmVyO1xuICBsaXN0ZW5Ub0FsbFN1cHBvcnRlZEV2ZW50cyhyb290Q29udGFpbmVyRWxlbWVudCk7XG4gIHJldHVybiBuZXcgUmVhY3RET01Sb290KHJvb3QpO1xufVxuXG5mdW5jdGlvbiBSZWFjdERPTUh5ZHJhdGlvblJvb3QoaW50ZXJuYWxSb290KSB7XG4gIHRoaXMuX2ludGVybmFsUm9vdCA9IGludGVybmFsUm9vdDtcbn1cblxuZnVuY3Rpb24gc2NoZWR1bGVIeWRyYXRpb24odGFyZ2V0KSB7XG4gIGlmICh0YXJnZXQpIHtcbiAgICBxdWV1ZUV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0KHRhcmdldCk7XG4gIH1cbn1cblxuUmVhY3RET01IeWRyYXRpb25Sb290LnByb3RvdHlwZS51bnN0YWJsZV9zY2hlZHVsZUh5ZHJhdGlvbiA9IHNjaGVkdWxlSHlkcmF0aW9uO1xuZnVuY3Rpb24gaHlkcmF0ZVJvb3QoY29udGFpbmVyLCBpbml0aWFsQ2hpbGRyZW4sIG9wdGlvbnMpIHtcbiAgaWYgKCFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2h5ZHJhdGVSb290KC4uLik6IFRhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJyk7XG4gIH1cblxuICB3YXJuSWZSZWFjdERPTUNvbnRhaW5lckluREVWKGNvbnRhaW5lcik7XG5cbiAge1xuICAgIGlmIChpbml0aWFsQ2hpbGRyZW4gPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IoJ011c3QgcHJvdmlkZSBpbml0aWFsIGNoaWxkcmVuIGFzIHNlY29uZCBhcmd1bWVudCB0byBoeWRyYXRlUm9vdC4gJyArICdFeGFtcGxlIHVzYWdlOiBoeWRyYXRlUm9vdChkb21Db250YWluZXIsIDxBcHAgLz4pJyk7XG4gICAgfVxuICB9IC8vIEZvciBub3cgd2UgcmV1c2UgdGhlIHdob2xlIGJhZyBvZiBvcHRpb25zIHNpbmNlIHRoZXkgY29udGFpblxuICAvLyB0aGUgaHlkcmF0aW9uIGNhbGxiYWNrcy5cblxuXG4gIHZhciBoeWRyYXRpb25DYWxsYmFja3MgPSBvcHRpb25zICE9IG51bGwgPyBvcHRpb25zIDogbnVsbDsgLy8gVE9ETzogRGVsZXRlIHRoaXMgb3B0aW9uXG5cbiAgdmFyIG11dGFibGVTb3VyY2VzID0gb3B0aW9ucyAhPSBudWxsICYmIG9wdGlvbnMuaHlkcmF0ZWRTb3VyY2VzIHx8IG51bGw7XG4gIHZhciBpc1N0cmljdE1vZGUgPSBmYWxzZTtcbiAgdmFyIGNvbmN1cnJlbnRVcGRhdGVzQnlEZWZhdWx0T3ZlcnJpZGUgPSBmYWxzZTtcbiAgdmFyIGlkZW50aWZpZXJQcmVmaXggPSAnJztcbiAgdmFyIG9uUmVjb3ZlcmFibGVFcnJvciA9IGRlZmF1bHRPblJlY292ZXJhYmxlRXJyb3I7XG5cbiAgaWYgKG9wdGlvbnMgIT09IG51bGwgJiYgb3B0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKG9wdGlvbnMudW5zdGFibGVfc3RyaWN0TW9kZSA9PT0gdHJ1ZSkge1xuICAgICAgaXNTdHJpY3RNb2RlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5pZGVudGlmaWVyUHJlZml4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlkZW50aWZpZXJQcmVmaXggPSBvcHRpb25zLmlkZW50aWZpZXJQcmVmaXg7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMub25SZWNvdmVyYWJsZUVycm9yICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG9uUmVjb3ZlcmFibGVFcnJvciA9IG9wdGlvbnMub25SZWNvdmVyYWJsZUVycm9yO1xuICAgIH1cbiAgfVxuXG4gIHZhciByb290ID0gY3JlYXRlSHlkcmF0aW9uQ29udGFpbmVyKGluaXRpYWxDaGlsZHJlbiwgbnVsbCwgY29udGFpbmVyLCBDb25jdXJyZW50Um9vdCwgaHlkcmF0aW9uQ2FsbGJhY2tzLCBpc1N0cmljdE1vZGUsIGNvbmN1cnJlbnRVcGRhdGVzQnlEZWZhdWx0T3ZlcnJpZGUsIGlkZW50aWZpZXJQcmVmaXgsIG9uUmVjb3ZlcmFibGVFcnJvcik7XG4gIG1hcmtDb250YWluZXJBc1Jvb3Qocm9vdC5jdXJyZW50LCBjb250YWluZXIpOyAvLyBUaGlzIGNhbid0IGJlIGEgY29tbWVudCBub2RlIHNpbmNlIGh5ZHJhdGlvbiBkb2Vzbid0IHdvcmsgb24gY29tbWVudCBub2RlcyBhbnl3YXkuXG5cbiAgbGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMoY29udGFpbmVyKTtcblxuICBpZiAobXV0YWJsZVNvdXJjZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG11dGFibGVTb3VyY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbXV0YWJsZVNvdXJjZSA9IG11dGFibGVTb3VyY2VzW2ldO1xuICAgICAgcmVnaXN0ZXJNdXRhYmxlU291cmNlRm9ySHlkcmF0aW9uKHJvb3QsIG11dGFibGVTb3VyY2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgUmVhY3RET01IeWRyYXRpb25Sb290KHJvb3QpO1xufVxuZnVuY3Rpb24gaXNWYWxpZENvbnRhaW5lcihub2RlKSB7XG4gIHJldHVybiAhIShub2RlICYmIChub2RlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUgfHwgbm9kZS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfTk9ERSB8fCBub2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFIHx8ICFkaXNhYmxlQ29tbWVudHNBc0RPTUNvbnRhaW5lcnMgICkpO1xufSAvLyBUT0RPOiBSZW1vdmUgdGhpcyBmdW5jdGlvbiB3aGljaCBhbHNvIGluY2x1ZGVzIGNvbW1lbnQgbm9kZXMuXG4vLyBXZSBvbmx5IHVzZSBpdCBpbiBwbGFjZXMgdGhhdCBhcmUgY3VycmVudGx5IG1vcmUgcmVsYXhlZC5cblxuZnVuY3Rpb24gaXNWYWxpZENvbnRhaW5lckxlZ2FjeShub2RlKSB7XG4gIHJldHVybiAhIShub2RlICYmIChub2RlLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUgfHwgbm9kZS5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfTk9ERSB8fCBub2RlLm5vZGVUeXBlID09PSBET0NVTUVOVF9GUkFHTUVOVF9OT0RFIHx8IG5vZGUubm9kZVR5cGUgPT09IENPTU1FTlRfTk9ERSAmJiBub2RlLm5vZGVWYWx1ZSA9PT0gJyByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSAnKSk7XG59XG5cbmZ1bmN0aW9uIHdhcm5JZlJlYWN0RE9NQ29udGFpbmVySW5ERVYoY29udGFpbmVyKSB7XG4gIHtcbiAgICBpZiAoY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUgJiYgY29udGFpbmVyLnRhZ05hbWUgJiYgY29udGFpbmVyLnRhZ05hbWUudG9VcHBlckNhc2UoKSA9PT0gJ0JPRFknKSB7XG4gICAgICBlcnJvcignY3JlYXRlUm9vdCgpOiBDcmVhdGluZyByb290cyBkaXJlY3RseSB3aXRoIGRvY3VtZW50LmJvZHkgaXMgJyArICdkaXNjb3VyYWdlZCwgc2luY2UgaXRzIGNoaWxkcmVuIGFyZSBvZnRlbiBtYW5pcHVsYXRlZCBieSB0aGlyZC1wYXJ0eSAnICsgJ3NjcmlwdHMgYW5kIGJyb3dzZXIgZXh0ZW5zaW9ucy4gVGhpcyBtYXkgbGVhZCB0byBzdWJ0bGUgJyArICdyZWNvbmNpbGlhdGlvbiBpc3N1ZXMuIFRyeSB1c2luZyBhIGNvbnRhaW5lciBlbGVtZW50IGNyZWF0ZWQgJyArICdmb3IgeW91ciBhcHAuJyk7XG4gICAgfVxuXG4gICAgaWYgKGlzQ29udGFpbmVyTWFya2VkQXNSb290KGNvbnRhaW5lcikpIHtcbiAgICAgIGlmIChjb250YWluZXIuX3JlYWN0Um9vdENvbnRhaW5lcikge1xuICAgICAgICBlcnJvcignWW91IGFyZSBjYWxsaW5nIFJlYWN0RE9NQ2xpZW50LmNyZWF0ZVJvb3QoKSBvbiBhIGNvbnRhaW5lciB0aGF0IHdhcyBwcmV2aW91c2x5ICcgKyAncGFzc2VkIHRvIFJlYWN0RE9NLnJlbmRlcigpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvcignWW91IGFyZSBjYWxsaW5nIFJlYWN0RE9NQ2xpZW50LmNyZWF0ZVJvb3QoKSBvbiBhIGNvbnRhaW5lciB0aGF0ICcgKyAnaGFzIGFscmVhZHkgYmVlbiBwYXNzZWQgdG8gY3JlYXRlUm9vdCgpIGJlZm9yZS4gSW5zdGVhZCwgY2FsbCAnICsgJ3Jvb3QucmVuZGVyKCkgb24gdGhlIGV4aXN0aW5nIHJvb3QgaW5zdGVhZCBpZiB5b3Ugd2FudCB0byB1cGRhdGUgaXQuJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbnZhciBSZWFjdEN1cnJlbnRPd25lciQzID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50T3duZXI7XG52YXIgdG9wTGV2ZWxVcGRhdGVXYXJuaW5ncztcblxue1xuICB0b3BMZXZlbFVwZGF0ZVdhcm5pbmdzID0gZnVuY3Rpb24gKGNvbnRhaW5lcikge1xuICAgIGlmIChjb250YWluZXIuX3JlYWN0Um9vdENvbnRhaW5lciAmJiBjb250YWluZXIubm9kZVR5cGUgIT09IENPTU1FTlRfTk9ERSkge1xuICAgICAgdmFyIGhvc3RJbnN0YW5jZSA9IGZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzKGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyLmN1cnJlbnQpO1xuXG4gICAgICBpZiAoaG9zdEluc3RhbmNlKSB7XG4gICAgICAgIGlmIChob3N0SW5zdGFuY2UucGFyZW50Tm9kZSAhPT0gY29udGFpbmVyKSB7XG4gICAgICAgICAgZXJyb3IoJ3JlbmRlciguLi4pOiBJdCBsb29rcyBsaWtlIHRoZSBSZWFjdC1yZW5kZXJlZCBjb250ZW50IG9mIHRoaXMgJyArICdjb250YWluZXIgd2FzIHJlbW92ZWQgd2l0aG91dCB1c2luZyBSZWFjdC4gVGhpcyBpcyBub3QgJyArICdzdXBwb3J0ZWQgYW5kIHdpbGwgY2F1c2UgZXJyb3JzLiBJbnN0ZWFkLCBjYWxsICcgKyAnUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZSB0byBlbXB0eSBhIGNvbnRhaW5lci4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBpc1Jvb3RSZW5kZXJlZEJ5U29tZVJlYWN0ID0gISFjb250YWluZXIuX3JlYWN0Um9vdENvbnRhaW5lcjtcbiAgICB2YXIgcm9vdEVsID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgdmFyIGhhc05vblJvb3RSZWFjdENoaWxkID0gISEocm9vdEVsICYmIGdldEluc3RhbmNlRnJvbU5vZGUocm9vdEVsKSk7XG5cbiAgICBpZiAoaGFzTm9uUm9vdFJlYWN0Q2hpbGQgJiYgIWlzUm9vdFJlbmRlcmVkQnlTb21lUmVhY3QpIHtcbiAgICAgIGVycm9yKCdyZW5kZXIoLi4uKTogUmVwbGFjaW5nIFJlYWN0LXJlbmRlcmVkIGNoaWxkcmVuIHdpdGggYSBuZXcgcm9vdCAnICsgJ2NvbXBvbmVudC4gSWYgeW91IGludGVuZGVkIHRvIHVwZGF0ZSB0aGUgY2hpbGRyZW4gb2YgdGhpcyBub2RlLCAnICsgJ3lvdSBzaG91bGQgaW5zdGVhZCBoYXZlIHRoZSBleGlzdGluZyBjaGlsZHJlbiB1cGRhdGUgdGhlaXIgc3RhdGUgJyArICdhbmQgcmVuZGVyIHRoZSBuZXcgY29tcG9uZW50cyBpbnN0ZWFkIG9mIGNhbGxpbmcgUmVhY3RET00ucmVuZGVyLicpO1xuICAgIH1cblxuICAgIGlmIChjb250YWluZXIubm9kZVR5cGUgPT09IEVMRU1FTlRfTk9ERSAmJiBjb250YWluZXIudGFnTmFtZSAmJiBjb250YWluZXIudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnQk9EWScpIHtcbiAgICAgIGVycm9yKCdyZW5kZXIoKTogUmVuZGVyaW5nIGNvbXBvbmVudHMgZGlyZWN0bHkgaW50byBkb2N1bWVudC5ib2R5IGlzICcgKyAnZGlzY291cmFnZWQsIHNpbmNlIGl0cyBjaGlsZHJlbiBhcmUgb2Z0ZW4gbWFuaXB1bGF0ZWQgYnkgdGhpcmQtcGFydHkgJyArICdzY3JpcHRzIGFuZCBicm93c2VyIGV4dGVuc2lvbnMuIFRoaXMgbWF5IGxlYWQgdG8gc3VidGxlICcgKyAncmVjb25jaWxpYXRpb24gaXNzdWVzLiBUcnkgcmVuZGVyaW5nIGludG8gYSBjb250YWluZXIgZWxlbWVudCBjcmVhdGVkICcgKyAnZm9yIHlvdXIgYXBwLicpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcikge1xuICBpZiAoIWNvbnRhaW5lcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gRE9DVU1FTlRfTk9ERSkge1xuICAgIHJldHVybiBjb250YWluZXIuZG9jdW1lbnRFbGVtZW50O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjb250YWluZXIuZmlyc3RDaGlsZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBub29wT25SZWNvdmVyYWJsZUVycm9yKCkgey8vIFRoaXMgaXNuJ3QgcmVhY2hhYmxlIGJlY2F1c2Ugb25SZWNvdmVyYWJsZUVycm9yIGlzbid0IGNhbGxlZCBpbiB0aGVcbiAgLy8gbGVnYWN5IEFQSS5cbn1cblxuZnVuY3Rpb24gbGVnYWN5Q3JlYXRlUm9vdEZyb21ET01Db250YWluZXIoY29udGFpbmVyLCBpbml0aWFsQ2hpbGRyZW4sIHBhcmVudENvbXBvbmVudCwgY2FsbGJhY2ssIGlzSHlkcmF0aW9uQ29udGFpbmVyKSB7XG4gIGlmIChpc0h5ZHJhdGlvbkNvbnRhaW5lcikge1xuICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciBvcmlnaW5hbENhbGxiYWNrID0gY2FsbGJhY2s7XG5cbiAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBnZXRQdWJsaWNSb290SW5zdGFuY2Uocm9vdCk7XG4gICAgICAgIG9yaWdpbmFsQ2FsbGJhY2suY2FsbChpbnN0YW5jZSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciByb290ID0gY3JlYXRlSHlkcmF0aW9uQ29udGFpbmVyKGluaXRpYWxDaGlsZHJlbiwgY2FsbGJhY2ssIGNvbnRhaW5lciwgTGVnYWN5Um9vdCwgbnVsbCwgLy8gaHlkcmF0aW9uQ2FsbGJhY2tzXG4gICAgZmFsc2UsIC8vIGlzU3RyaWN0TW9kZVxuICAgIGZhbHNlLCAvLyBjb25jdXJyZW50VXBkYXRlc0J5RGVmYXVsdE92ZXJyaWRlLFxuICAgICcnLCAvLyBpZGVudGlmaWVyUHJlZml4XG4gICAgbm9vcE9uUmVjb3ZlcmFibGVFcnJvcik7XG4gICAgY29udGFpbmVyLl9yZWFjdFJvb3RDb250YWluZXIgPSByb290O1xuICAgIG1hcmtDb250YWluZXJBc1Jvb3Qocm9vdC5jdXJyZW50LCBjb250YWluZXIpO1xuICAgIHZhciByb290Q29udGFpbmVyRWxlbWVudCA9IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFID8gY29udGFpbmVyLnBhcmVudE5vZGUgOiBjb250YWluZXI7XG4gICAgbGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMocm9vdENvbnRhaW5lckVsZW1lbnQpO1xuICAgIGZsdXNoU3luYygpO1xuICAgIHJldHVybiByb290O1xuICB9IGVsc2Uge1xuICAgIC8vIEZpcnN0IGNsZWFyIGFueSBleGlzdGluZyBjb250ZW50LlxuICAgIHZhciByb290U2libGluZztcblxuICAgIHdoaWxlIChyb290U2libGluZyA9IGNvbnRhaW5lci5sYXN0Q2hpbGQpIHtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChyb290U2libGluZyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIF9vcmlnaW5hbENhbGxiYWNrID0gY2FsbGJhY2s7XG5cbiAgICAgIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgaW5zdGFuY2UgPSBnZXRQdWJsaWNSb290SW5zdGFuY2UoX3Jvb3QpO1xuXG4gICAgICAgIF9vcmlnaW5hbENhbGxiYWNrLmNhbGwoaW5zdGFuY2UpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgX3Jvb3QgPSBjcmVhdGVDb250YWluZXIoY29udGFpbmVyLCBMZWdhY3lSb290LCBudWxsLCAvLyBoeWRyYXRpb25DYWxsYmFja3NcbiAgICBmYWxzZSwgLy8gaXNTdHJpY3RNb2RlXG4gICAgZmFsc2UsIC8vIGNvbmN1cnJlbnRVcGRhdGVzQnlEZWZhdWx0T3ZlcnJpZGUsXG4gICAgJycsIC8vIGlkZW50aWZpZXJQcmVmaXhcbiAgICBub29wT25SZWNvdmVyYWJsZUVycm9yKTtcblxuICAgIGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyID0gX3Jvb3Q7XG4gICAgbWFya0NvbnRhaW5lckFzUm9vdChfcm9vdC5jdXJyZW50LCBjb250YWluZXIpO1xuXG4gICAgdmFyIF9yb290Q29udGFpbmVyRWxlbWVudCA9IGNvbnRhaW5lci5ub2RlVHlwZSA9PT0gQ09NTUVOVF9OT0RFID8gY29udGFpbmVyLnBhcmVudE5vZGUgOiBjb250YWluZXI7XG5cbiAgICBsaXN0ZW5Ub0FsbFN1cHBvcnRlZEV2ZW50cyhfcm9vdENvbnRhaW5lckVsZW1lbnQpOyAvLyBJbml0aWFsIG1vdW50IHNob3VsZCBub3QgYmUgYmF0Y2hlZC5cblxuICAgIGZsdXNoU3luYyhmdW5jdGlvbiAoKSB7XG4gICAgICB1cGRhdGVDb250YWluZXIoaW5pdGlhbENoaWxkcmVuLCBfcm9vdCwgcGFyZW50Q29tcG9uZW50LCBjYWxsYmFjayk7XG4gICAgfSk7XG4gICAgcmV0dXJuIF9yb290O1xuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm5PbkludmFsaWRDYWxsYmFjayQxKGNhbGxiYWNrLCBjYWxsZXJOYW1lKSB7XG4gIHtcbiAgICBpZiAoY2FsbGJhY2sgIT09IG51bGwgJiYgdHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICBlcnJvcignJXMoLi4uKTogRXhwZWN0ZWQgdGhlIGxhc3Qgb3B0aW9uYWwgYGNhbGxiYWNrYCBhcmd1bWVudCB0byBiZSBhICcgKyAnZnVuY3Rpb24uIEluc3RlYWQgcmVjZWl2ZWQ6ICVzLicsIGNhbGxlck5hbWUsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbGVnYWN5UmVuZGVyU3VidHJlZUludG9Db250YWluZXIocGFyZW50Q29tcG9uZW50LCBjaGlsZHJlbiwgY29udGFpbmVyLCBmb3JjZUh5ZHJhdGUsIGNhbGxiYWNrKSB7XG4gIHtcbiAgICB0b3BMZXZlbFVwZGF0ZVdhcm5pbmdzKGNvbnRhaW5lcik7XG4gICAgd2Fybk9uSW52YWxpZENhbGxiYWNrJDEoY2FsbGJhY2sgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjYWxsYmFjaywgJ3JlbmRlcicpO1xuICB9XG5cbiAgdmFyIG1heWJlUm9vdCA9IGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyO1xuICB2YXIgcm9vdDtcblxuICBpZiAoIW1heWJlUm9vdCkge1xuICAgIC8vIEluaXRpYWwgbW91bnRcbiAgICByb290ID0gbGVnYWN5Q3JlYXRlUm9vdEZyb21ET01Db250YWluZXIoY29udGFpbmVyLCBjaGlsZHJlbiwgcGFyZW50Q29tcG9uZW50LCBjYWxsYmFjaywgZm9yY2VIeWRyYXRlKTtcbiAgfSBlbHNlIHtcbiAgICByb290ID0gbWF5YmVSb290O1xuXG4gICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIG9yaWdpbmFsQ2FsbGJhY2sgPSBjYWxsYmFjaztcblxuICAgICAgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbnN0YW5jZSA9IGdldFB1YmxpY1Jvb3RJbnN0YW5jZShyb290KTtcbiAgICAgICAgb3JpZ2luYWxDYWxsYmFjay5jYWxsKGluc3RhbmNlKTtcbiAgICAgIH07XG4gICAgfSAvLyBVcGRhdGVcblxuXG4gICAgdXBkYXRlQ29udGFpbmVyKGNoaWxkcmVuLCByb290LCBwYXJlbnRDb21wb25lbnQsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHJldHVybiBnZXRQdWJsaWNSb290SW5zdGFuY2Uocm9vdCk7XG59XG5cbnZhciBkaWRXYXJuQWJvdXRGaW5kRE9NTm9kZSA9IGZhbHNlO1xuZnVuY3Rpb24gZmluZERPTU5vZGUoY29tcG9uZW50T3JFbGVtZW50KSB7XG4gIHtcbiAgICBpZiAoIWRpZFdhcm5BYm91dEZpbmRET01Ob2RlKSB7XG4gICAgICBkaWRXYXJuQWJvdXRGaW5kRE9NTm9kZSA9IHRydWU7XG5cbiAgICAgIGVycm9yKCdmaW5kRE9NTm9kZSBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgJyArICdyZWxlYXNlLiBJbnN0ZWFkLCBhZGQgYSByZWYgZGlyZWN0bHkgdG8gdGhlIGVsZW1lbnQgeW91IHdhbnQgJyArICd0byByZWZlcmVuY2UuIExlYXJuIG1vcmUgYWJvdXQgdXNpbmcgcmVmcyBzYWZlbHkgaGVyZTogJyArICdodHRwczovL3JlYWN0anMub3JnL2xpbmsvc3RyaWN0LW1vZGUtZmluZC1ub2RlJyk7XG4gICAgfVxuXG4gICAgdmFyIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIkMy5jdXJyZW50O1xuXG4gICAgaWYgKG93bmVyICE9PSBudWxsICYmIG93bmVyLnN0YXRlTm9kZSAhPT0gbnVsbCkge1xuICAgICAgdmFyIHdhcm5lZEFib3V0UmVmc0luUmVuZGVyID0gb3duZXIuc3RhdGVOb2RlLl93YXJuZWRBYm91dFJlZnNJblJlbmRlcjtcblxuICAgICAgaWYgKCF3YXJuZWRBYm91dFJlZnNJblJlbmRlcikge1xuICAgICAgICBlcnJvcignJXMgaXMgYWNjZXNzaW5nIGZpbmRET01Ob2RlIGluc2lkZSBpdHMgcmVuZGVyKCkuICcgKyAncmVuZGVyKCkgc2hvdWxkIGJlIGEgcHVyZSBmdW5jdGlvbiBvZiBwcm9wcyBhbmQgc3RhdGUuIEl0IHNob3VsZCAnICsgJ25ldmVyIGFjY2VzcyBzb21ldGhpbmcgdGhhdCByZXF1aXJlcyBzdGFsZSBkYXRhIGZyb20gdGhlIHByZXZpb3VzICcgKyAncmVuZGVyLCBzdWNoIGFzIHJlZnMuIE1vdmUgdGhpcyBsb2dpYyB0byBjb21wb25lbnREaWRNb3VudCBhbmQgJyArICdjb21wb25lbnREaWRVcGRhdGUgaW5zdGVhZC4nLCBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUob3duZXIudHlwZSkgfHwgJ0EgY29tcG9uZW50Jyk7XG4gICAgICB9XG5cbiAgICAgIG93bmVyLnN0YXRlTm9kZS5fd2FybmVkQWJvdXRSZWZzSW5SZW5kZXIgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChjb21wb25lbnRPckVsZW1lbnQgPT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKGNvbXBvbmVudE9yRWxlbWVudC5ub2RlVHlwZSA9PT0gRUxFTUVOVF9OT0RFKSB7XG4gICAgcmV0dXJuIGNvbXBvbmVudE9yRWxlbWVudDtcbiAgfVxuXG4gIHtcbiAgICByZXR1cm4gZmluZEhvc3RJbnN0YW5jZVdpdGhXYXJuaW5nKGNvbXBvbmVudE9yRWxlbWVudCwgJ2ZpbmRET01Ob2RlJyk7XG4gIH1cbn1cbmZ1bmN0aW9uIGh5ZHJhdGUoZWxlbWVudCwgY29udGFpbmVyLCBjYWxsYmFjaykge1xuICB7XG4gICAgZXJyb3IoJ1JlYWN0RE9NLmh5ZHJhdGUgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCBpbiBSZWFjdCAxOC4gVXNlIGh5ZHJhdGVSb290ICcgKyAnaW5zdGVhZC4gVW50aWwgeW91IHN3aXRjaCB0byB0aGUgbmV3IEFQSSwgeW91ciBhcHAgd2lsbCBiZWhhdmUgYXMgJyArIFwiaWYgaXQncyBydW5uaW5nIFJlYWN0IDE3LiBMZWFybiBcIiArICdtb3JlOiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvc3dpdGNoLXRvLWNyZWF0ZXJvb3QnKTtcbiAgfVxuXG4gIGlmICghaXNWYWxpZENvbnRhaW5lckxlZ2FjeShjb250YWluZXIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LicpO1xuICB9XG5cbiAge1xuICAgIHZhciBpc01vZGVyblJvb3QgPSBpc0NvbnRhaW5lck1hcmtlZEFzUm9vdChjb250YWluZXIpICYmIGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyID09PSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoaXNNb2Rlcm5Sb290KSB7XG4gICAgICBlcnJvcignWW91IGFyZSBjYWxsaW5nIFJlYWN0RE9NLmh5ZHJhdGUoKSBvbiBhIGNvbnRhaW5lciB0aGF0IHdhcyBwcmV2aW91c2x5ICcgKyAncGFzc2VkIHRvIFJlYWN0RE9NQ2xpZW50LmNyZWF0ZVJvb3QoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiAnICsgJ0RpZCB5b3UgbWVhbiB0byBjYWxsIGh5ZHJhdGVSb290KGNvbnRhaW5lciwgZWxlbWVudCk/Jyk7XG4gICAgfVxuICB9IC8vIFRPRE86IHRocm93IG9yIHdhcm4gaWYgd2UgY291bGRuJ3QgaHlkcmF0ZT9cblxuXG4gIHJldHVybiBsZWdhY3lSZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihudWxsLCBlbGVtZW50LCBjb250YWluZXIsIHRydWUsIGNhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIHJlbmRlcihlbGVtZW50LCBjb250YWluZXIsIGNhbGxiYWNrKSB7XG4gIHtcbiAgICBlcnJvcignUmVhY3RET00ucmVuZGVyIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgaW4gUmVhY3QgMTguIFVzZSBjcmVhdGVSb290ICcgKyAnaW5zdGVhZC4gVW50aWwgeW91IHN3aXRjaCB0byB0aGUgbmV3IEFQSSwgeW91ciBhcHAgd2lsbCBiZWhhdmUgYXMgJyArIFwiaWYgaXQncyBydW5uaW5nIFJlYWN0IDE3LiBMZWFybiBcIiArICdtb3JlOiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvc3dpdGNoLXRvLWNyZWF0ZXJvb3QnKTtcbiAgfVxuXG4gIGlmICghaXNWYWxpZENvbnRhaW5lckxlZ2FjeShjb250YWluZXIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LicpO1xuICB9XG5cbiAge1xuICAgIHZhciBpc01vZGVyblJvb3QgPSBpc0NvbnRhaW5lck1hcmtlZEFzUm9vdChjb250YWluZXIpICYmIGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyID09PSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoaXNNb2Rlcm5Sb290KSB7XG4gICAgICBlcnJvcignWW91IGFyZSBjYWxsaW5nIFJlYWN0RE9NLnJlbmRlcigpIG9uIGEgY29udGFpbmVyIHRoYXQgd2FzIHByZXZpb3VzbHkgJyArICdwYXNzZWQgdG8gUmVhY3RET01DbGllbnQuY3JlYXRlUm9vdCgpLiBUaGlzIGlzIG5vdCBzdXBwb3J0ZWQuICcgKyAnRGlkIHlvdSBtZWFuIHRvIGNhbGwgcm9vdC5yZW5kZXIoZWxlbWVudCk/Jyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxlZ2FjeVJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKG51bGwsIGVsZW1lbnQsIGNvbnRhaW5lciwgZmFsc2UsIGNhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKHBhcmVudENvbXBvbmVudCwgZWxlbWVudCwgY29udGFpbmVyTm9kZSwgY2FsbGJhY2spIHtcbiAge1xuICAgIGVycm9yKCdSZWFjdERPTS51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcigpIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgJyArICdpbiBSZWFjdCAxOC4gQ29uc2lkZXIgdXNpbmcgYSBwb3J0YWwgaW5zdGVhZC4gVW50aWwgeW91IHN3aXRjaCB0byAnICsgXCJ0aGUgY3JlYXRlUm9vdCBBUEksIHlvdXIgYXBwIHdpbGwgYmVoYXZlIGFzIGlmIGl0J3MgcnVubmluZyBSZWFjdCBcIiArICcxNy4gTGVhcm4gbW9yZTogaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3N3aXRjaC10by1jcmVhdGVyb290Jyk7XG4gIH1cblxuICBpZiAoIWlzVmFsaWRDb250YWluZXJMZWdhY3koY29udGFpbmVyTm9kZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJyk7XG4gIH1cblxuICBpZiAocGFyZW50Q29tcG9uZW50ID09IG51bGwgfHwgIWhhcyhwYXJlbnRDb21wb25lbnQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwYXJlbnRDb21wb25lbnQgbXVzdCBiZSBhIHZhbGlkIFJlYWN0IENvbXBvbmVudCcpO1xuICB9XG5cbiAgcmV0dXJuIGxlZ2FjeVJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKHBhcmVudENvbXBvbmVudCwgZWxlbWVudCwgY29udGFpbmVyTm9kZSwgZmFsc2UsIGNhbGxiYWNrKTtcbn1cbnZhciBkaWRXYXJuQWJvdXRVbm1vdW50Q29tcG9uZW50QXROb2RlID0gZmFsc2U7XG5mdW5jdGlvbiB1bm1vdW50Q29tcG9uZW50QXROb2RlKGNvbnRhaW5lcikge1xuICB7XG4gICAgaWYgKCFkaWRXYXJuQWJvdXRVbm1vdW50Q29tcG9uZW50QXROb2RlKSB7XG4gICAgICBkaWRXYXJuQWJvdXRVbm1vdW50Q29tcG9uZW50QXROb2RlID0gdHJ1ZTtcblxuICAgICAgZXJyb3IoJ3VubW91bnRDb21wb25lbnRBdE5vZGUgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSAnICsgJ25leHQgbWFqb3IgcmVsZWFzZS4gU3dpdGNoIHRvIHRoZSBjcmVhdGVSb290IEFQSS4gTGVhcm4gJyArICdtb3JlOiBodHRwczovL3JlYWN0anMub3JnL2xpbmsvc3dpdGNoLXRvLWNyZWF0ZXJvb3QnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWlzVmFsaWRDb250YWluZXJMZWdhY3koY29udGFpbmVyKSkge1xuICAgIHRocm93IG5ldyBFcnJvcigndW5tb3VudENvbXBvbmVudEF0Tm9kZSguLi4pOiBUYXJnZXQgY29udGFpbmVyIGlzIG5vdCBhIERPTSBlbGVtZW50LicpO1xuICB9XG5cbiAge1xuICAgIHZhciBpc01vZGVyblJvb3QgPSBpc0NvbnRhaW5lck1hcmtlZEFzUm9vdChjb250YWluZXIpICYmIGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyID09PSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoaXNNb2Rlcm5Sb290KSB7XG4gICAgICBlcnJvcignWW91IGFyZSBjYWxsaW5nIFJlYWN0RE9NLnVubW91bnRDb21wb25lbnRBdE5vZGUoKSBvbiBhIGNvbnRhaW5lciB0aGF0IHdhcyBwcmV2aW91c2x5ICcgKyAncGFzc2VkIHRvIFJlYWN0RE9NQ2xpZW50LmNyZWF0ZVJvb3QoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBEaWQgeW91IG1lYW4gdG8gY2FsbCByb290LnVubW91bnQoKT8nKTtcbiAgICB9XG4gIH1cblxuICBpZiAoY29udGFpbmVyLl9yZWFjdFJvb3RDb250YWluZXIpIHtcbiAgICB7XG4gICAgICB2YXIgcm9vdEVsID0gZ2V0UmVhY3RSb290RWxlbWVudEluQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICB2YXIgcmVuZGVyZWRCeURpZmZlcmVudFJlYWN0ID0gcm9vdEVsICYmICFnZXRJbnN0YW5jZUZyb21Ob2RlKHJvb3RFbCk7XG5cbiAgICAgIGlmIChyZW5kZXJlZEJ5RGlmZmVyZW50UmVhY3QpIHtcbiAgICAgICAgZXJyb3IoXCJ1bm1vdW50Q29tcG9uZW50QXROb2RlKCk6IFRoZSBub2RlIHlvdSdyZSBhdHRlbXB0aW5nIHRvIHVubW91bnQgXCIgKyAnd2FzIHJlbmRlcmVkIGJ5IGFub3RoZXIgY29weSBvZiBSZWFjdC4nKTtcbiAgICAgIH1cbiAgICB9IC8vIFVubW91bnQgc2hvdWxkIG5vdCBiZSBiYXRjaGVkLlxuXG5cbiAgICBmbHVzaFN5bmMoZnVuY3Rpb24gKCkge1xuICAgICAgbGVnYWN5UmVuZGVyU3VidHJlZUludG9Db250YWluZXIobnVsbCwgbnVsbCwgY29udGFpbmVyLCBmYWxzZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyAkRmxvd0ZpeE1lIFRoaXMgc2hvdWxkIHByb2JhYmx5IHVzZSBgZGVsZXRlIGNvbnRhaW5lci5fcmVhY3RSb290Q29udGFpbmVyYFxuICAgICAgICBjb250YWluZXIuX3JlYWN0Um9vdENvbnRhaW5lciA9IG51bGw7XG4gICAgICAgIHVubWFya0NvbnRhaW5lckFzUm9vdChjb250YWluZXIpO1xuICAgICAgfSk7XG4gICAgfSk7IC8vIElmIHlvdSBjYWxsIHVubW91bnRDb21wb25lbnRBdE5vZGUgdHdpY2UgaW4gcXVpY2sgc3VjY2Vzc2lvbiwgeW91J2xsXG4gICAgLy8gZ2V0IGB0cnVlYCB0d2ljZS4gVGhhdCdzIHByb2JhYmx5IGZpbmU/XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIHtcbiAgICB7XG4gICAgICB2YXIgX3Jvb3RFbCA9IGdldFJlYWN0Um9vdEVsZW1lbnRJbkNvbnRhaW5lcihjb250YWluZXIpO1xuXG4gICAgICB2YXIgaGFzTm9uUm9vdFJlYWN0Q2hpbGQgPSAhIShfcm9vdEVsICYmIGdldEluc3RhbmNlRnJvbU5vZGUoX3Jvb3RFbCkpOyAvLyBDaGVjayBpZiB0aGUgY29udGFpbmVyIGl0c2VsZiBpcyBhIFJlYWN0IHJvb3Qgbm9kZS5cblxuICAgICAgdmFyIGlzQ29udGFpbmVyUmVhY3RSb290ID0gY29udGFpbmVyLm5vZGVUeXBlID09PSBFTEVNRU5UX05PREUgJiYgaXNWYWxpZENvbnRhaW5lckxlZ2FjeShjb250YWluZXIucGFyZW50Tm9kZSkgJiYgISFjb250YWluZXIucGFyZW50Tm9kZS5fcmVhY3RSb290Q29udGFpbmVyO1xuXG4gICAgICBpZiAoaGFzTm9uUm9vdFJlYWN0Q2hpbGQpIHtcbiAgICAgICAgZXJyb3IoXCJ1bm1vdW50Q29tcG9uZW50QXROb2RlKCk6IFRoZSBub2RlIHlvdSdyZSBhdHRlbXB0aW5nIHRvIHVubW91bnQgXCIgKyAnd2FzIHJlbmRlcmVkIGJ5IFJlYWN0IGFuZCBpcyBub3QgYSB0b3AtbGV2ZWwgY29udGFpbmVyLiAlcycsIGlzQ29udGFpbmVyUmVhY3RSb290ID8gJ1lvdSBtYXkgaGF2ZSBhY2NpZGVudGFsbHkgcGFzc2VkIGluIGEgUmVhY3Qgcm9vdCBub2RlIGluc3RlYWQgJyArICdvZiBpdHMgY29udGFpbmVyLicgOiAnSW5zdGVhZCwgaGF2ZSB0aGUgcGFyZW50IGNvbXBvbmVudCB1cGRhdGUgaXRzIHN0YXRlIGFuZCAnICsgJ3JlcmVuZGVyIGluIG9yZGVyIHRvIHJlbW92ZSB0aGlzIGNvbXBvbmVudC4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbn1cblxuc2V0QXR0ZW1wdFN5bmNocm9ub3VzSHlkcmF0aW9uKGF0dGVtcHRTeW5jaHJvbm91c0h5ZHJhdGlvbiQxKTtcbnNldEF0dGVtcHRDb250aW51b3VzSHlkcmF0aW9uKGF0dGVtcHRDb250aW51b3VzSHlkcmF0aW9uJDEpO1xuc2V0QXR0ZW1wdEh5ZHJhdGlvbkF0Q3VycmVudFByaW9yaXR5KGF0dGVtcHRIeWRyYXRpb25BdEN1cnJlbnRQcmlvcml0eSQxKTtcbnNldEdldEN1cnJlbnRVcGRhdGVQcmlvcml0eShnZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkpO1xuc2V0QXR0ZW1wdEh5ZHJhdGlvbkF0UHJpb3JpdHkocnVuV2l0aFByaW9yaXR5KTtcblxue1xuICBpZiAodHlwZW9mIE1hcCAhPT0gJ2Z1bmN0aW9uJyB8fCAvLyAkRmxvd0lzc3VlIEZsb3cgaW5jb3JyZWN0bHkgdGhpbmtzIE1hcCBoYXMgbm8gcHJvdG90eXBlXG4gIE1hcC5wcm90b3R5cGUgPT0gbnVsbCB8fCB0eXBlb2YgTWFwLnByb3RvdHlwZS5mb3JFYWNoICE9PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiBTZXQgIT09ICdmdW5jdGlvbicgfHwgLy8gJEZsb3dJc3N1ZSBGbG93IGluY29ycmVjdGx5IHRoaW5rcyBTZXQgaGFzIG5vIHByb3RvdHlwZVxuICBTZXQucHJvdG90eXBlID09IG51bGwgfHwgdHlwZW9mIFNldC5wcm90b3R5cGUuY2xlYXIgIT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIFNldC5wcm90b3R5cGUuZm9yRWFjaCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGVycm9yKCdSZWFjdCBkZXBlbmRzIG9uIE1hcCBhbmQgU2V0IGJ1aWx0LWluIHR5cGVzLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhICcgKyAncG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHMnKTtcbiAgfVxufVxuXG5zZXRSZXN0b3JlSW1wbGVtZW50YXRpb24ocmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSQzKTtcbnNldEJhdGNoaW5nSW1wbGVtZW50YXRpb24oYmF0Y2hlZFVwZGF0ZXMkMSwgZGlzY3JldGVVcGRhdGVzLCBmbHVzaFN5bmMpO1xuXG5mdW5jdGlvbiBjcmVhdGVQb3J0YWwkMShjaGlsZHJlbiwgY29udGFpbmVyKSB7XG4gIHZhciBrZXkgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7XG5cbiAgaWYgKCFpc1ZhbGlkQ29udGFpbmVyKGNvbnRhaW5lcikpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1RhcmdldCBjb250YWluZXIgaXMgbm90IGEgRE9NIGVsZW1lbnQuJyk7XG4gIH0gLy8gVE9ETzogcGFzcyBSZWFjdERPTSBwb3J0YWwgaW1wbGVtZW50YXRpb24gYXMgdGhpcmQgYXJndW1lbnRcbiAgLy8gJEZsb3dGaXhNZSBUaGUgRmxvdyB0eXBlIGlzIG9wYXF1ZSBidXQgdGhlcmUncyBubyB3YXkgdG8gYWN0dWFsbHkgY3JlYXRlIGl0LlxuXG5cbiAgcmV0dXJuIGNyZWF0ZVBvcnRhbChjaGlsZHJlbiwgY29udGFpbmVyLCBudWxsLCBrZXkpO1xufVxuXG5mdW5jdGlvbiByZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihwYXJlbnRDb21wb25lbnQsIGVsZW1lbnQsIGNvbnRhaW5lck5vZGUsIGNhbGxiYWNrKSB7XG4gIHJldHVybiB1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihwYXJlbnRDb21wb25lbnQsIGVsZW1lbnQsIGNvbnRhaW5lck5vZGUsIGNhbGxiYWNrKTtcbn1cblxudmFyIEludGVybmFscyA9IHtcbiAgdXNpbmdDbGllbnRFbnRyeVBvaW50OiBmYWxzZSxcbiAgLy8gS2VlcCBpbiBzeW5jIHdpdGggUmVhY3RUZXN0VXRpbHMuanMuXG4gIC8vIFRoaXMgaXMgYW4gYXJyYXkgZm9yIGJldHRlciBtaW5pZmljYXRpb24uXG4gIEV2ZW50czogW2dldEluc3RhbmNlRnJvbU5vZGUsIGdldE5vZGVGcm9tSW5zdGFuY2UsIGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUsIGVucXVldWVTdGF0ZVJlc3RvcmUsIHJlc3RvcmVTdGF0ZUlmTmVlZGVkLCBiYXRjaGVkVXBkYXRlcyQxXVxufTtcblxuZnVuY3Rpb24gY3JlYXRlUm9vdCQxKGNvbnRhaW5lciwgb3B0aW9ucykge1xuICB7XG4gICAgaWYgKCFJbnRlcm5hbHMudXNpbmdDbGllbnRFbnRyeVBvaW50ICYmICFmYWxzZSkge1xuICAgICAgZXJyb3IoJ1lvdSBhcmUgaW1wb3J0aW5nIGNyZWF0ZVJvb3QgZnJvbSBcInJlYWN0LWRvbVwiIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQuICcgKyAnWW91IHNob3VsZCBpbnN0ZWFkIGltcG9ydCBpdCBmcm9tIFwicmVhY3QtZG9tL2NsaWVudFwiLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjcmVhdGVSb290KGNvbnRhaW5lciwgb3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIGh5ZHJhdGVSb290JDEoY29udGFpbmVyLCBpbml0aWFsQ2hpbGRyZW4sIG9wdGlvbnMpIHtcbiAge1xuICAgIGlmICghSW50ZXJuYWxzLnVzaW5nQ2xpZW50RW50cnlQb2ludCAmJiAhZmFsc2UpIHtcbiAgICAgIGVycm9yKCdZb3UgYXJlIGltcG9ydGluZyBoeWRyYXRlUm9vdCBmcm9tIFwicmVhY3QtZG9tXCIgd2hpY2ggaXMgbm90IHN1cHBvcnRlZC4gJyArICdZb3Ugc2hvdWxkIGluc3RlYWQgaW1wb3J0IGl0IGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCIuJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGh5ZHJhdGVSb290KGNvbnRhaW5lciwgaW5pdGlhbENoaWxkcmVuLCBvcHRpb25zKTtcbn0gLy8gT3ZlcmxvYWQgdGhlIGRlZmluaXRpb24gdG8gdGhlIHR3byB2YWxpZCBzaWduYXR1cmVzLlxuLy8gV2FybmluZywgdGhpcyBvcHRzLW91dCBvZiBjaGVja2luZyB0aGUgZnVuY3Rpb24gYm9keS5cblxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5mdW5jdGlvbiBmbHVzaFN5bmMkMShmbikge1xuICB7XG4gICAgaWYgKGlzQWxyZWFkeVJlbmRlcmluZygpKSB7XG4gICAgICBlcnJvcignZmx1c2hTeW5jIHdhcyBjYWxsZWQgZnJvbSBpbnNpZGUgYSBsaWZlY3ljbGUgbWV0aG9kLiBSZWFjdCBjYW5ub3QgJyArICdmbHVzaCB3aGVuIFJlYWN0IGlzIGFscmVhZHkgcmVuZGVyaW5nLiBDb25zaWRlciBtb3ZpbmcgdGhpcyBjYWxsIHRvICcgKyAnYSBzY2hlZHVsZXIgdGFzayBvciBtaWNybyB0YXNrLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmbHVzaFN5bmMoZm4pO1xufVxudmFyIGZvdW5kRGV2VG9vbHMgPSBpbmplY3RJbnRvRGV2VG9vbHMoe1xuICBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTogZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUsXG4gIGJ1bmRsZVR5cGU6ICAxICxcbiAgdmVyc2lvbjogUmVhY3RWZXJzaW9uLFxuICByZW5kZXJlclBhY2thZ2VOYW1lOiAncmVhY3QtZG9tJ1xufSk7XG5cbntcbiAgaWYgKCFmb3VuZERldlRvb2xzICYmIGNhblVzZURPTSAmJiB3aW5kb3cudG9wID09PSB3aW5kb3cuc2VsZikge1xuICAgIC8vIElmIHdlJ3JlIGluIENocm9tZSBvciBGaXJlZm94LCBwcm92aWRlIGEgZG93bmxvYWQgbGluayBpZiBub3QgaW5zdGFsbGVkLlxuICAgIGlmIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZScpID4gLTEgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdFZGdlJykgPT09IC0xIHx8IG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID4gLTEpIHtcbiAgICAgIHZhciBwcm90b2NvbCA9IHdpbmRvdy5sb2NhdGlvbi5wcm90b2NvbDsgLy8gRG9uJ3Qgd2FybiBpbiBleG90aWMgY2FzZXMgbGlrZSBjaHJvbWUtZXh0ZW5zaW9uOi8vLlxuXG4gICAgICBpZiAoL14oaHR0cHM/fGZpbGUpOiQvLnRlc3QocHJvdG9jb2wpKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1pbnRlcm5hbC9uby1wcm9kdWN0aW9uLWxvZ2dpbmdcbiAgICAgICAgY29uc29sZS5pbmZvKCclY0Rvd25sb2FkIHRoZSBSZWFjdCBEZXZUb29scyAnICsgJ2ZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOiAnICsgJ2h0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1kZXZ0b29scycgKyAocHJvdG9jb2wgPT09ICdmaWxlOicgPyAnXFxuWW91IG1pZ2h0IG5lZWQgdG8gdXNlIGEgbG9jYWwgSFRUUCBzZXJ2ZXIgKGluc3RlYWQgb2YgZmlsZTovLyk6ICcgKyAnaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LWRldnRvb2xzLWZhcScgOiAnJyksICdmb250LXdlaWdodDpib2xkJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQgPSBJbnRlcm5hbHM7XG5leHBvcnRzLmNyZWF0ZVBvcnRhbCA9IGNyZWF0ZVBvcnRhbCQxO1xuZXhwb3J0cy5jcmVhdGVSb290ID0gY3JlYXRlUm9vdCQxO1xuZXhwb3J0cy5maW5kRE9NTm9kZSA9IGZpbmRET01Ob2RlO1xuZXhwb3J0cy5mbHVzaFN5bmMgPSBmbHVzaFN5bmMkMTtcbmV4cG9ydHMuaHlkcmF0ZSA9IGh5ZHJhdGU7XG5leHBvcnRzLmh5ZHJhdGVSb290ID0gaHlkcmF0ZVJvb3QkMTtcbmV4cG9ydHMucmVuZGVyID0gcmVuZGVyO1xuZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlID0gdW5tb3VudENvbXBvbmVudEF0Tm9kZTtcbmV4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMgPSBiYXRjaGVkVXBkYXRlcyQxO1xuZXhwb3J0cy51bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciA9IHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyO1xuZXhwb3J0cy52ZXJzaW9uID0gUmVhY3RWZXJzaW9uO1xuICAgICAgICAgIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbmlmIChcbiAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5yZWdpc3RlckludGVybmFsTW9kdWxlU3RvcCA9PT1cbiAgICAnZnVuY3Rpb24nXG4pIHtcbiAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLnJlZ2lzdGVySW50ZXJuYWxNb2R1bGVTdG9wKG5ldyBFcnJvcigpKTtcbn1cbiAgICAgICAgXG4gIH0pKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIChmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0ID0gcmVxdWlyZSgncmVhY3QnKTtcblxuLy8gQVRURU5USU9OXG4vLyBXaGVuIGFkZGluZyBuZXcgc3ltYm9scyB0byB0aGlzIGZpbGUsXG4vLyBQbGVhc2UgY29uc2lkZXIgYWxzbyBhZGRpbmcgdG8gJ3JlYWN0LWRldnRvb2xzLXNoYXJlZC9zcmMvYmFja2VuZC9SZWFjdFN5bWJvbHMnXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy5cbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50Jyk7XG52YXIgUkVBQ1RfUE9SVEFMX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5wb3J0YWwnKTtcbnZhciBSRUFDVF9GUkFHTUVOVF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QuZnJhZ21lbnQnKTtcbnZhciBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Quc3RyaWN0X21vZGUnKTtcbnZhciBSRUFDVF9QUk9GSUxFUl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QucHJvZmlsZXInKTtcbnZhciBSRUFDVF9QUk9WSURFUl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QucHJvdmlkZXInKTtcbnZhciBSRUFDVF9DT05URVhUX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5jb250ZXh0Jyk7XG52YXIgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmZvcndhcmRfcmVmJyk7XG52YXIgUkVBQ1RfU1VTUEVOU0VfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnN1c3BlbnNlJyk7XG52YXIgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2VfbGlzdCcpO1xudmFyIFJFQUNUX01FTU9fVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0Lm1lbW8nKTtcbnZhciBSRUFDVF9MQVpZX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5sYXp5Jyk7XG52YXIgUkVBQ1RfT0ZGU0NSRUVOX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5vZmZzY3JlZW4nKTtcbnZhciBNQVlCRV9JVEVSQVRPUl9TWU1CT0wgPSBTeW1ib2wuaXRlcmF0b3I7XG52YXIgRkFVWF9JVEVSQVRPUl9TWU1CT0wgPSAnQEBpdGVyYXRvcic7XG5mdW5jdGlvbiBnZXRJdGVyYXRvckZuKG1heWJlSXRlcmFibGUpIHtcbiAgaWYgKG1heWJlSXRlcmFibGUgPT09IG51bGwgfHwgdHlwZW9mIG1heWJlSXRlcmFibGUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgbWF5YmVJdGVyYXRvciA9IE1BWUJFX0lURVJBVE9SX1NZTUJPTCAmJiBtYXliZUl0ZXJhYmxlW01BWUJFX0lURVJBVE9SX1NZTUJPTF0gfHwgbWF5YmVJdGVyYWJsZVtGQVVYX0lURVJBVE9SX1NZTUJPTF07XG5cbiAgaWYgKHR5cGVvZiBtYXliZUl0ZXJhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG1heWJlSXRlcmF0b3I7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxudmFyIFJlYWN0U2hhcmVkSW50ZXJuYWxzID0gUmVhY3QuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7XG5cbmZ1bmN0aW9uIGVycm9yKGZvcm1hdCkge1xuICB7XG4gICAge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgcHJpbnRXYXJuaW5nKCdlcnJvcicsIGZvcm1hdCwgYXJncyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByaW50V2FybmluZyhsZXZlbCwgZm9ybWF0LCBhcmdzKSB7XG4gIC8vIFdoZW4gY2hhbmdpbmcgdGhpcyBsb2dpYywgeW91IG1pZ2h0IHdhbnQgdG8gYWxzb1xuICAvLyB1cGRhdGUgY29uc29sZVdpdGhTdGFja0Rldi53d3cuanMgYXMgd2VsbC5cbiAge1xuICAgIHZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZTtcbiAgICB2YXIgc3RhY2sgPSBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldFN0YWNrQWRkZW5kdW0oKTtcblxuICAgIGlmIChzdGFjayAhPT0gJycpIHtcbiAgICAgIGZvcm1hdCArPSAnJXMnO1xuICAgICAgYXJncyA9IGFyZ3MuY29uY2F0KFtzdGFja10pO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL3NhZmUtc3RyaW5nLWNvZXJjaW9uXG5cblxuICAgIHZhciBhcmdzV2l0aEZvcm1hdCA9IGFyZ3MubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gU3RyaW5nKGl0ZW0pO1xuICAgIH0pOyAvLyBDYXJlZnVsOiBSTiBjdXJyZW50bHkgZGVwZW5kcyBvbiB0aGlzIHByZWZpeFxuXG4gICAgYXJnc1dpdGhGb3JtYXQudW5zaGlmdCgnV2FybmluZzogJyArIGZvcm1hdCk7IC8vIFdlIGludGVudGlvbmFsbHkgZG9uJ3QgdXNlIHNwcmVhZCAob3IgLmFwcGx5KSBkaXJlY3RseSBiZWNhdXNlIGl0XG4gICAgLy8gYnJlYWtzIElFOTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8xMzYxMFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1pbnRlcm5hbC9uby1wcm9kdWN0aW9uLWxvZ2dpbmdcblxuICAgIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGVbbGV2ZWxdLCBjb25zb2xlLCBhcmdzV2l0aEZvcm1hdCk7XG4gIH1cbn1cblxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxudmFyIGVuYWJsZVNjb3BlQVBJID0gZmFsc2U7IC8vIEV4cGVyaW1lbnRhbCBDcmVhdGUgRXZlbnQgSGFuZGxlIEFQSS5cbnZhciBlbmFibGVDYWNoZUVsZW1lbnQgPSBmYWxzZTtcbnZhciBlbmFibGVUcmFuc2l0aW9uVHJhY2luZyA9IGZhbHNlOyAvLyBObyBrbm93biBidWdzLCBidXQgbmVlZHMgcGVyZm9ybWFuY2UgdGVzdGluZ1xuXG52YXIgZW5hYmxlTGVnYWN5SGlkZGVuID0gZmFsc2U7IC8vIEVuYWJsZXMgdW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2sgZmVhdHVyZSBpbiBGaWJlclxuLy8gc3R1ZmYuIEludGVuZGVkIHRvIGVuYWJsZSBSZWFjdCBjb3JlIG1lbWJlcnMgdG8gbW9yZSBlYXNpbHkgZGVidWcgc2NoZWR1bGluZ1xuLy8gaXNzdWVzIGluIERFViBidWlsZHMuXG5cbnZhciBlbmFibGVEZWJ1Z1RyYWNpbmcgPSBmYWxzZTsgLy8gVHJhY2sgd2hpY2ggRmliZXIocykgc2NoZWR1bGUgcmVuZGVyIHdvcmsuXG5cbnZhciBSRUFDVF9NT0RVTEVfUkVGRVJFTkNFO1xuXG57XG4gIFJFQUNUX01PRFVMRV9SRUZFUkVOQ0UgPSBTeW1ib2wuZm9yKCdyZWFjdC5tb2R1bGUucmVmZXJlbmNlJyk7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50VHlwZSh0eXBlKSB7XG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBOb3RlOiB0eXBlb2YgbWlnaHQgYmUgb3RoZXIgdGhhbiAnc3ltYm9sJyBvciAnbnVtYmVyJyAoZS5nLiBpZiBpdCdzIGEgcG9seWZpbGwpLlxuXG5cbiAgaWYgKHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRSB8fCBlbmFibGVEZWJ1Z1RyYWNpbmcgIHx8IHR5cGUgPT09IFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1VTUEVOU0VfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgfHwgZW5hYmxlTGVnYWN5SGlkZGVuICB8fCB0eXBlID09PSBSRUFDVF9PRkZTQ1JFRU5fVFlQRSB8fCBlbmFibGVTY29wZUFQSSAgfHwgZW5hYmxlQ2FjaGVFbGVtZW50ICB8fCBlbmFibGVUcmFuc2l0aW9uVHJhY2luZyApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCkge1xuICAgIGlmICh0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9MQVpZX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTUVNT19UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX1BST1ZJREVSX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgfHwgLy8gVGhpcyBuZWVkcyB0byBpbmNsdWRlIGFsbCBwb3NzaWJsZSBtb2R1bGUgcmVmZXJlbmNlIG9iamVjdFxuICAgIC8vIHR5cGVzIHN1cHBvcnRlZCBieSBhbnkgRmxpZ2h0IGNvbmZpZ3VyYXRpb24gYW55d2hlcmUgc2luY2VcbiAgICAvLyB3ZSBkb24ndCBrbm93IHdoaWNoIEZsaWdodCBidWlsZCB0aGlzIHdpbGwgZW5kIHVwIGJlaW5nIHVzZWRcbiAgICAvLyB3aXRoLlxuICAgIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01PRFVMRV9SRUZFUkVOQ0UgfHwgdHlwZS5nZXRNb2R1bGVJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGdldFdyYXBwZWROYW1lKG91dGVyVHlwZSwgaW5uZXJUeXBlLCB3cmFwcGVyTmFtZSkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBvdXRlclR5cGUuZGlzcGxheU5hbWU7XG5cbiAgaWYgKGRpc3BsYXlOYW1lKSB7XG4gICAgcmV0dXJuIGRpc3BsYXlOYW1lO1xuICB9XG5cbiAgdmFyIGZ1bmN0aW9uTmFtZSA9IGlubmVyVHlwZS5kaXNwbGF5TmFtZSB8fCBpbm5lclR5cGUubmFtZSB8fCAnJztcbiAgcmV0dXJuIGZ1bmN0aW9uTmFtZSAhPT0gJycgPyB3cmFwcGVyTmFtZSArIFwiKFwiICsgZnVuY3Rpb25OYW1lICsgXCIpXCIgOiB3cmFwcGVyTmFtZTtcbn0gLy8gS2VlcCBpbiBzeW5jIHdpdGggcmVhY3QtcmVjb25jaWxlci9nZXRDb21wb25lbnROYW1lRnJvbUZpYmVyXG5cblxuZnVuY3Rpb24gZ2V0Q29udGV4dE5hbWUodHlwZSkge1xuICByZXR1cm4gdHlwZS5kaXNwbGF5TmFtZSB8fCAnQ29udGV4dCc7XG59IC8vIE5vdGUgdGhhdCB0aGUgcmVjb25jaWxlciBwYWNrYWdlIHNob3VsZCBnZW5lcmFsbHkgcHJlZmVyIHRvIHVzZSBnZXRDb21wb25lbnROYW1lRnJvbUZpYmVyKCkgaW5zdGVhZC5cblxuXG5mdW5jdGlvbiBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUodHlwZSkge1xuICBpZiAodHlwZSA9PSBudWxsKSB7XG4gICAgLy8gSG9zdCByb290LCB0ZXh0IG5vZGUgb3IganVzdCBpbnZhbGlkIHR5cGUuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB7XG4gICAgaWYgKHR5cGVvZiB0eXBlLnRhZyA9PT0gJ251bWJlcicpIHtcbiAgICAgIGVycm9yKCdSZWNlaXZlZCBhbiB1bmV4cGVjdGVkIG9iamVjdCBpbiBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoKS4gJyArICdUaGlzIGlzIGxpa2VseSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgdHlwZS5uYW1lIHx8IG51bGw7XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHR5cGU7XG4gIH1cblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlIFJFQUNUX0ZSQUdNRU5UX1RZUEU6XG4gICAgICByZXR1cm4gJ0ZyYWdtZW50JztcblxuICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICByZXR1cm4gJ1BvcnRhbCc7XG5cbiAgICBjYXNlIFJFQUNUX1BST0ZJTEVSX1RZUEU6XG4gICAgICByZXR1cm4gJ1Byb2ZpbGVyJztcblxuICAgIGNhc2UgUkVBQ1RfU1RSSUNUX01PREVfVFlQRTpcbiAgICAgIHJldHVybiAnU3RyaWN0TW9kZSc7XG5cbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX1RZUEU6XG4gICAgICByZXR1cm4gJ1N1c3BlbnNlJztcblxuICAgIGNhc2UgUkVBQ1RfU1VTUEVOU0VfTElTVF9UWVBFOlxuICAgICAgcmV0dXJuICdTdXNwZW5zZUxpc3QnO1xuXG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgc3dpdGNoICh0eXBlLiQkdHlwZW9mKSB7XG4gICAgICBjYXNlIFJFQUNUX0NPTlRFWFRfVFlQRTpcbiAgICAgICAgdmFyIGNvbnRleHQgPSB0eXBlO1xuICAgICAgICByZXR1cm4gZ2V0Q29udGV4dE5hbWUoY29udGV4dCkgKyAnLkNvbnN1bWVyJztcblxuICAgICAgY2FzZSBSRUFDVF9QUk9WSURFUl9UWVBFOlxuICAgICAgICB2YXIgcHJvdmlkZXIgPSB0eXBlO1xuICAgICAgICByZXR1cm4gZ2V0Q29udGV4dE5hbWUocHJvdmlkZXIuX2NvbnRleHQpICsgJy5Qcm92aWRlcic7XG5cbiAgICAgIGNhc2UgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRTpcbiAgICAgICAgcmV0dXJuIGdldFdyYXBwZWROYW1lKHR5cGUsIHR5cGUucmVuZGVyLCAnRm9yd2FyZFJlZicpO1xuXG4gICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgdmFyIG91dGVyTmFtZSA9IHR5cGUuZGlzcGxheU5hbWUgfHwgbnVsbDtcblxuICAgICAgICBpZiAob3V0ZXJOYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgcmV0dXJuIG91dGVyTmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUodHlwZS50eXBlKSB8fCAnTWVtbyc7XG5cbiAgICAgIGNhc2UgUkVBQ1RfTEFaWV9UWVBFOlxuICAgICAgICB7XG4gICAgICAgICAgdmFyIGxhenlDb21wb25lbnQgPSB0eXBlO1xuICAgICAgICAgIHZhciBwYXlsb2FkID0gbGF6eUNvbXBvbmVudC5fcGF5bG9hZDtcbiAgICAgICAgICB2YXIgaW5pdCA9IGxhenlDb21wb25lbnQuX2luaXQ7XG5cbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShpbml0KHBheWxvYWQpKTtcbiAgICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWZhbGx0aHJvdWdoXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbnZhciBhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xuXG4vLyBIZWxwZXJzIHRvIHBhdGNoIGNvbnNvbGUubG9ncyB0byBhdm9pZCBsb2dnaW5nIGR1cmluZyBzaWRlLWVmZmVjdCBmcmVlXG4vLyByZXBsYXlpbmcgb24gcmVuZGVyIGZ1bmN0aW9uLiBUaGlzIGN1cnJlbnRseSBvbmx5IHBhdGNoZXMgdGhlIG9iamVjdFxuLy8gbGF6aWx5IHdoaWNoIHdvbid0IGNvdmVyIGlmIHRoZSBsb2cgZnVuY3Rpb24gd2FzIGV4dHJhY3RlZCBlYWdlcmx5LlxuLy8gV2UgY291bGQgYWxzbyBlYWdlcmx5IHBhdGNoIHRoZSBtZXRob2QuXG52YXIgZGlzYWJsZWREZXB0aCA9IDA7XG52YXIgcHJldkxvZztcbnZhciBwcmV2SW5mbztcbnZhciBwcmV2V2FybjtcbnZhciBwcmV2RXJyb3I7XG52YXIgcHJldkdyb3VwO1xudmFyIHByZXZHcm91cENvbGxhcHNlZDtcbnZhciBwcmV2R3JvdXBFbmQ7XG5cbmZ1bmN0aW9uIGRpc2FibGVkTG9nKCkge31cblxuZGlzYWJsZWRMb2cuX19yZWFjdERpc2FibGVkTG9nID0gdHJ1ZTtcbmZ1bmN0aW9uIGRpc2FibGVMb2dzKCkge1xuICB7XG4gICAgaWYgKGRpc2FibGVkRGVwdGggPT09IDApIHtcbiAgICAgIC8qIGVzbGludC1kaXNhYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgICAgcHJldkxvZyA9IGNvbnNvbGUubG9nO1xuICAgICAgcHJldkluZm8gPSBjb25zb2xlLmluZm87XG4gICAgICBwcmV2V2FybiA9IGNvbnNvbGUud2FybjtcbiAgICAgIHByZXZFcnJvciA9IGNvbnNvbGUuZXJyb3I7XG4gICAgICBwcmV2R3JvdXAgPSBjb25zb2xlLmdyb3VwO1xuICAgICAgcHJldkdyb3VwQ29sbGFwc2VkID0gY29uc29sZS5ncm91cENvbGxhcHNlZDtcbiAgICAgIHByZXZHcm91cEVuZCA9IGNvbnNvbGUuZ3JvdXBFbmQ7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTkwOTlcblxuICAgICAgdmFyIHByb3BzID0ge1xuICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIHZhbHVlOiBkaXNhYmxlZExvZyxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH07IC8vICRGbG93Rml4TWUgRmxvdyB0aGlua3MgY29uc29sZSBpcyBpbW11dGFibGUuXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNvbnNvbGUsIHtcbiAgICAgICAgaW5mbzogcHJvcHMsXG4gICAgICAgIGxvZzogcHJvcHMsXG4gICAgICAgIHdhcm46IHByb3BzLFxuICAgICAgICBlcnJvcjogcHJvcHMsXG4gICAgICAgIGdyb3VwOiBwcm9wcyxcbiAgICAgICAgZ3JvdXBDb2xsYXBzZWQ6IHByb3BzLFxuICAgICAgICBncm91cEVuZDogcHJvcHNcbiAgICAgIH0pO1xuICAgICAgLyogZXNsaW50LWVuYWJsZSByZWFjdC1pbnRlcm5hbC9uby1wcm9kdWN0aW9uLWxvZ2dpbmcgKi9cbiAgICB9XG5cbiAgICBkaXNhYmxlZERlcHRoKys7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlZW5hYmxlTG9ncygpIHtcbiAge1xuICAgIGRpc2FibGVkRGVwdGgtLTtcblxuICAgIGlmIChkaXNhYmxlZERlcHRoID09PSAwKSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1pbnRlcm5hbC9uby1wcm9kdWN0aW9uLWxvZ2dpbmcgKi9cbiAgICAgIHZhciBwcm9wcyA9IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZVxuICAgICAgfTsgLy8gJEZsb3dGaXhNZSBGbG93IHRoaW5rcyBjb25zb2xlIGlzIGltbXV0YWJsZS5cblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoY29uc29sZSwge1xuICAgICAgICBsb2c6IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkxvZ1xuICAgICAgICB9KSxcbiAgICAgICAgaW5mbzogYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHZhbHVlOiBwcmV2SW5mb1xuICAgICAgICB9KSxcbiAgICAgICAgd2FybjogYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHZhbHVlOiBwcmV2V2FyblxuICAgICAgICB9KSxcbiAgICAgICAgZXJyb3I6IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkVycm9yXG4gICAgICAgIH0pLFxuICAgICAgICBncm91cDogYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHZhbHVlOiBwcmV2R3JvdXBcbiAgICAgICAgfSksXG4gICAgICAgIGdyb3VwQ29sbGFwc2VkOiBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgdmFsdWU6IHByZXZHcm91cENvbGxhcHNlZFxuICAgICAgICB9KSxcbiAgICAgICAgZ3JvdXBFbmQ6IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwRW5kXG4gICAgICAgIH0pXG4gICAgICB9KTtcbiAgICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gICAgfVxuXG4gICAgaWYgKGRpc2FibGVkRGVwdGggPCAwKSB7XG4gICAgICBlcnJvcignZGlzYWJsZWREZXB0aCBmZWxsIGJlbG93IHplcm8uICcgKyAnVGhpcyBpcyBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyk7XG4gICAgfVxuICB9XG59XG5cbnZhciBSZWFjdEN1cnJlbnREaXNwYXRjaGVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcjtcbnZhciBwcmVmaXg7XG5mdW5jdGlvbiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lLCBzb3VyY2UsIG93bmVyRm4pIHtcbiAge1xuICAgIGlmIChwcmVmaXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gRXh0cmFjdCB0aGUgVk0gc3BlY2lmaWMgcHJlZml4IHVzZWQgYnkgZWFjaCBsaW5lLlxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgdmFyIG1hdGNoID0geC5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtcbiAgICAgICAgcHJlZml4ID0gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG4gICAgICB9XG4gICAgfSAvLyBXZSB1c2UgdGhlIHByZWZpeCB0byBlbnN1cmUgb3VyIHN0YWNrcyBsaW5lIHVwIHdpdGggbmF0aXZlIHN0YWNrIGZyYW1lcy5cblxuXG4gICAgcmV0dXJuICdcXG4nICsgcHJlZml4ICsgbmFtZTtcbiAgfVxufVxudmFyIHJlZW50cnkgPSBmYWxzZTtcbnZhciBjb21wb25lbnRGcmFtZUNhY2hlO1xuXG57XG4gIHZhciBQb3NzaWJseVdlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyA/IFdlYWtNYXAgOiBNYXA7XG4gIGNvbXBvbmVudEZyYW1lQ2FjaGUgPSBuZXcgUG9zc2libHlXZWFrTWFwKCk7XG59XG5cbmZ1bmN0aW9uIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZm4sIGNvbnN0cnVjdCkge1xuICAvLyBJZiBzb21ldGhpbmcgYXNrZWQgZm9yIGEgc3RhY2sgaW5zaWRlIGEgZmFrZSByZW5kZXIsIGl0IHNob3VsZCBnZXQgaWdub3JlZC5cbiAgaWYgKCAhZm4gfHwgcmVlbnRyeSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHtcbiAgICB2YXIgZnJhbWUgPSBjb21wb25lbnRGcmFtZUNhY2hlLmdldChmbik7XG5cbiAgICBpZiAoZnJhbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZyYW1lO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb250cm9sO1xuICByZWVudHJ5ID0gdHJ1ZTtcbiAgdmFyIHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZTsgLy8gJEZsb3dGaXhNZSBJdCBkb2VzIGFjY2VwdCB1bmRlZmluZWQuXG5cbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSB1bmRlZmluZWQ7XG4gIHZhciBwcmV2aW91c0Rpc3BhdGNoZXI7XG5cbiAge1xuICAgIHByZXZpb3VzRGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIuY3VycmVudDsgLy8gU2V0IHRoZSBkaXNwYXRjaGVyIGluIERFViBiZWNhdXNlIHRoaXMgbWlnaHQgYmUgY2FsbCBpbiB0aGUgcmVuZGVyIGZ1bmN0aW9uXG4gICAgLy8gZm9yIHdhcm5pbmdzLlxuXG4gICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlci5jdXJyZW50ID0gbnVsbDtcbiAgICBkaXNhYmxlTG9ncygpO1xuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIHNob3VsZCB0aHJvdy5cbiAgICBpZiAoY29uc3RydWN0KSB7XG4gICAgICAvLyBTb21ldGhpbmcgc2hvdWxkIGJlIHNldHRpbmcgdGhlIHByb3BzIGluIHRoZSBjb25zdHJ1Y3Rvci5cbiAgICAgIHZhciBGYWtlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgfTsgLy8gJEZsb3dGaXhNZVxuXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGYWtlLnByb3RvdHlwZSwgJ3Byb3BzJywge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAvLyBXZSB1c2UgYSB0aHJvd2luZyBzZXR0ZXIgaW5zdGVhZCBvZiBmcm96ZW4gb3Igbm9uLXdyaXRhYmxlIHByb3BzXG4gICAgICAgICAgLy8gYmVjYXVzZSB0aGF0IHdvbid0IHRocm93IGluIGEgbm9uLXN0cmljdCBtb2RlIGZ1bmN0aW9uLlxuICAgICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09ICdvYmplY3QnICYmIFJlZmxlY3QuY29uc3RydWN0KSB7XG4gICAgICAgIC8vIFdlIGNvbnN0cnVjdCBhIGRpZmZlcmVudCBjb250cm9sIGZvciB0aGlzIGNhc2UgdG8gaW5jbHVkZSBhbnkgZXh0cmFcbiAgICAgICAgLy8gZnJhbWVzIGFkZGVkIGJ5IHRoZSBjb25zdHJ1Y3QgY2FsbC5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBSZWZsZWN0LmNvbnN0cnVjdChGYWtlLCBbXSk7XG4gICAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgICBjb250cm9sID0geDtcbiAgICAgICAgfVxuXG4gICAgICAgIFJlZmxlY3QuY29uc3RydWN0KGZuLCBbXSwgRmFrZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIEZha2UuY2FsbCgpO1xuICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgY29udHJvbCA9IHg7XG4gICAgICAgIH1cblxuICAgICAgICBmbi5jYWxsKEZha2UucHJvdG90eXBlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgY29udHJvbCA9IHg7XG4gICAgICB9XG5cbiAgICAgIGZuKCk7XG4gICAgfVxuICB9IGNhdGNoIChzYW1wbGUpIHtcbiAgICAvLyBUaGlzIGlzIGlubGluZWQgbWFudWFsbHkgYmVjYXVzZSBjbG9zdXJlIGRvZXNuJ3QgZG8gaXQgZm9yIHVzLlxuICAgIGlmIChzYW1wbGUgJiYgY29udHJvbCAmJiB0eXBlb2Ygc2FtcGxlLnN0YWNrID09PSAnc3RyaW5nJykge1xuICAgICAgLy8gVGhpcyBleHRyYWN0cyB0aGUgZmlyc3QgZnJhbWUgZnJvbSB0aGUgc2FtcGxlIHRoYXQgaXNuJ3QgYWxzbyBpbiB0aGUgY29udHJvbC5cbiAgICAgIC8vIFNraXBwaW5nIG9uZSBmcmFtZSB0aGF0IHdlIGFzc3VtZSBpcyB0aGUgZnJhbWUgdGhhdCBjYWxscyB0aGUgdHdvLlxuICAgICAgdmFyIHNhbXBsZUxpbmVzID0gc2FtcGxlLnN0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAgIHZhciBjb250cm9sTGluZXMgPSBjb250cm9sLnN0YWNrLnNwbGl0KCdcXG4nKTtcbiAgICAgIHZhciBzID0gc2FtcGxlTGluZXMubGVuZ3RoIC0gMTtcbiAgICAgIHZhciBjID0gY29udHJvbExpbmVzLmxlbmd0aCAtIDE7XG5cbiAgICAgIHdoaWxlIChzID49IDEgJiYgYyA+PSAwICYmIHNhbXBsZUxpbmVzW3NdICE9PSBjb250cm9sTGluZXNbY10pIHtcbiAgICAgICAgLy8gV2UgZXhwZWN0IGF0IGxlYXN0IG9uZSBzdGFjayBmcmFtZSB0byBiZSBzaGFyZWQuXG4gICAgICAgIC8vIFR5cGljYWxseSB0aGlzIHdpbGwgYmUgdGhlIHJvb3QgbW9zdCBvbmUuIEhvd2V2ZXIsIHN0YWNrIGZyYW1lcyBtYXkgYmVcbiAgICAgICAgLy8gY3V0IG9mZiBkdWUgdG8gbWF4aW11bSBzdGFjayBsaW1pdHMuIEluIHRoaXMgY2FzZSwgb25lIG1heWJlIGN1dCBvZmZcbiAgICAgICAgLy8gZWFybGllciB0aGFuIHRoZSBvdGhlci4gV2UgYXNzdW1lIHRoYXQgdGhlIHNhbXBsZSBpcyBsb25nZXIgb3IgdGhlIHNhbWVcbiAgICAgICAgLy8gYW5kIHRoZXJlIGZvciBjdXQgb2ZmIGVhcmxpZXIuIFNvIHdlIHNob3VsZCBmaW5kIHRoZSByb290IG1vc3QgZnJhbWUgaW5cbiAgICAgICAgLy8gdGhlIHNhbXBsZSBzb21ld2hlcmUgaW4gdGhlIGNvbnRyb2wuXG4gICAgICAgIGMtLTtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IHMgPj0gMSAmJiBjID49IDA7IHMtLSwgYy0tKSB7XG4gICAgICAgIC8vIE5leHQgd2UgZmluZCB0aGUgZmlyc3Qgb25lIHRoYXQgaXNuJ3QgdGhlIHNhbWUgd2hpY2ggc2hvdWxkIGJlIHRoZVxuICAgICAgICAvLyBmcmFtZSB0aGF0IGNhbGxlZCBvdXIgc2FtcGxlIGZ1bmN0aW9uIGFuZCB0aGUgY29udHJvbC5cbiAgICAgICAgaWYgKHNhbXBsZUxpbmVzW3NdICE9PSBjb250cm9sTGluZXNbY10pIHtcbiAgICAgICAgICAvLyBJbiBWOCwgdGhlIGZpcnN0IGxpbmUgaXMgZGVzY3JpYmluZyB0aGUgbWVzc2FnZSBidXQgb3RoZXIgVk1zIGRvbid0LlxuICAgICAgICAgIC8vIElmIHdlJ3JlIGFib3V0IHRvIHJldHVybiB0aGUgZmlyc3QgbGluZSwgYW5kIHRoZSBjb250cm9sIGlzIGFsc28gb24gdGhlIHNhbWVcbiAgICAgICAgICAvLyBsaW5lLCB0aGF0J3MgYSBwcmV0dHkgZ29vZCBpbmRpY2F0b3IgdGhhdCBvdXIgc2FtcGxlIHRocmV3IGF0IHNhbWUgbGluZSBhc1xuICAgICAgICAgIC8vIHRoZSBjb250cm9sLiBJLmUuIGJlZm9yZSB3ZSBlbnRlcmVkIHRoZSBzYW1wbGUgZnJhbWUuIFNvIHdlIGlnbm9yZSB0aGlzIHJlc3VsdC5cbiAgICAgICAgICAvLyBUaGlzIGNhbiBoYXBwZW4gaWYgeW91IHBhc3NlZCBhIGNsYXNzIHRvIGZ1bmN0aW9uIGNvbXBvbmVudCwgb3Igbm9uLWZ1bmN0aW9uLlxuICAgICAgICAgIGlmIChzICE9PSAxIHx8IGMgIT09IDEpIHtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgcy0tO1xuICAgICAgICAgICAgICBjLS07IC8vIFdlIG1heSBzdGlsbCBoYXZlIHNpbWlsYXIgaW50ZXJtZWRpYXRlIGZyYW1lcyBmcm9tIHRoZSBjb25zdHJ1Y3QgY2FsbC5cbiAgICAgICAgICAgICAgLy8gVGhlIG5leHQgb25lIHRoYXQgaXNuJ3QgdGhlIHNhbWUgc2hvdWxkIGJlIG91ciBtYXRjaCB0aG91Z2guXG5cbiAgICAgICAgICAgICAgaWYgKGMgPCAwIHx8IHNhbXBsZUxpbmVzW3NdICE9PSBjb250cm9sTGluZXNbY10pIHtcbiAgICAgICAgICAgICAgICAvLyBWOCBhZGRzIGEgXCJuZXdcIiBwcmVmaXggZm9yIG5hdGl2ZSBjbGFzc2VzLiBMZXQncyByZW1vdmUgaXQgdG8gbWFrZSBpdCBwcmV0dGllci5cbiAgICAgICAgICAgICAgICB2YXIgX2ZyYW1lID0gJ1xcbicgKyBzYW1wbGVMaW5lc1tzXS5yZXBsYWNlKCcgYXQgbmV3ICcsICcgYXQgJyk7IC8vIElmIG91ciBjb21wb25lbnQgZnJhbWUgaXMgbGFiZWxlZCBcIjxhbm9ueW1vdXM+XCJcbiAgICAgICAgICAgICAgICAvLyBidXQgd2UgaGF2ZSBhIHVzZXItcHJvdmlkZWQgXCJkaXNwbGF5TmFtZVwiXG4gICAgICAgICAgICAgICAgLy8gc3BsaWNlIGl0IGluIHRvIG1ha2UgdGhlIHN0YWNrIG1vcmUgcmVhZGFibGUuXG5cblxuICAgICAgICAgICAgICAgIGlmIChmbi5kaXNwbGF5TmFtZSAmJiBfZnJhbWUuaW5jbHVkZXMoJzxhbm9ueW1vdXM+JykpIHtcbiAgICAgICAgICAgICAgICAgIF9mcmFtZSA9IF9mcmFtZS5yZXBsYWNlKCc8YW5vbnltb3VzPicsIGZuLmRpc3BsYXlOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudEZyYW1lQ2FjaGUuc2V0KGZuLCBfZnJhbWUpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gLy8gUmV0dXJuIHRoZSBsaW5lIHdlIGZvdW5kLlxuXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gX2ZyYW1lO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IHdoaWxlIChzID49IDEgJiYgYyA+PSAwKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSBmaW5hbGx5IHtcbiAgICByZWVudHJ5ID0gZmFsc2U7XG5cbiAgICB7XG4gICAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyLmN1cnJlbnQgPSBwcmV2aW91c0Rpc3BhdGNoZXI7XG4gICAgICByZWVuYWJsZUxvZ3MoKTtcbiAgICB9XG5cbiAgICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2U7XG4gIH0gLy8gRmFsbGJhY2sgdG8ganVzdCB1c2luZyB0aGUgbmFtZSBpZiB3ZSBjb3VsZG4ndCBtYWtlIGl0IHRocm93LlxuXG5cbiAgdmFyIG5hbWUgPSBmbiA/IGZuLmRpc3BsYXlOYW1lIHx8IGZuLm5hbWUgOiAnJztcbiAgdmFyIHN5bnRoZXRpY0ZyYW1lID0gbmFtZSA/IGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKG5hbWUpIDogJyc7XG5cbiAge1xuICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbXBvbmVudEZyYW1lQ2FjaGUuc2V0KGZuLCBzeW50aGV0aWNGcmFtZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN5bnRoZXRpY0ZyYW1lO1xufVxuZnVuY3Rpb24gZGVzY3JpYmVGdW5jdGlvbkNvbXBvbmVudEZyYW1lKGZuLCBzb3VyY2UsIG93bmVyRm4pIHtcbiAge1xuICAgIHJldHVybiBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZuLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2hvdWxkQ29uc3RydWN0KENvbXBvbmVudCkge1xuICB2YXIgcHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcbiAgcmV0dXJuICEhKHByb3RvdHlwZSAmJiBwcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59XG5cbmZ1bmN0aW9uIGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVih0eXBlLCBzb3VyY2UsIG93bmVyRm4pIHtcblxuICBpZiAodHlwZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAge1xuICAgICAgcmV0dXJuIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUodHlwZSwgc2hvdWxkQ29uc3RydWN0KHR5cGUpKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKHR5cGUpO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKCdTdXNwZW5zZScpO1xuXG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoJ1N1c3BlbnNlTGlzdCcpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0Jykge1xuICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICByZXR1cm4gZGVzY3JpYmVGdW5jdGlvbkNvbXBvbmVudEZyYW1lKHR5cGUucmVuZGVyKTtcblxuICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgIC8vIE1lbW8gbWF5IGNvbnRhaW4gYW55IGNvbXBvbmVudCB0eXBlIHNvIHdlIHJlY3Vyc2l2ZWx5IHJlc29sdmUgaXQuXG4gICAgICAgIHJldHVybiBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYodHlwZS50eXBlLCBzb3VyY2UsIG93bmVyRm4pO1xuXG4gICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBsYXp5Q29tcG9uZW50ID0gdHlwZTtcbiAgICAgICAgICB2YXIgcGF5bG9hZCA9IGxhenlDb21wb25lbnQuX3BheWxvYWQ7XG4gICAgICAgICAgdmFyIGluaXQgPSBsYXp5Q29tcG9uZW50Ll9pbml0O1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIExhenkgbWF5IGNvbnRhaW4gYW55IGNvbXBvbmVudCB0eXBlIHNvIHdlIHJlY3Vyc2l2ZWx5IHJlc29sdmUgaXQuXG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKGluaXQocGF5bG9hZCksIHNvdXJjZSwgb3duZXJGbik7XG4gICAgICAgICAgfSBjYXRjaCAoeCkge31cbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnJztcbn1cblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xudmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lO1xuXG5mdW5jdGlvbiBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChlbGVtZW50KSB7XG4gIHtcbiAgICBpZiAoZWxlbWVudCkge1xuICAgICAgdmFyIG93bmVyID0gZWxlbWVudC5fb3duZXI7XG4gICAgICB2YXIgc3RhY2sgPSBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYoZWxlbWVudC50eXBlLCBlbGVtZW50Ll9zb3VyY2UsIG93bmVyID8gb3duZXIudHlwZSA6IG51bGwpO1xuICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5zZXRFeHRyYVN0YWNrRnJhbWUoc3RhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lLnNldEV4dHJhU3RhY2tGcmFtZShudWxsKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCBjb21wb25lbnROYW1lLCBlbGVtZW50KSB7XG4gIHtcbiAgICAvLyAkRmxvd0ZpeE1lIFRoaXMgaXMgb2theSBidXQgRmxvdyBkb2Vzbid0IGtub3cgaXQuXG4gICAgdmFyIGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChoYXNPd25Qcm9wZXJ0eSk7XG5cbiAgICBmb3IgKHZhciB0eXBlU3BlY05hbWUgaW4gdHlwZVNwZWNzKSB7XG4gICAgICBpZiAoaGFzKHR5cGVTcGVjcywgdHlwZVNwZWNOYW1lKSkge1xuICAgICAgICB2YXIgZXJyb3IkMSA9IHZvaWQgMDsgLy8gUHJvcCB0eXBlIHZhbGlkYXRpb24gbWF5IHRocm93LiBJbiBjYXNlIHRoZXkgZG8sIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LlxuICAgICAgICAvLyBBZnRlciB0aGVzZSBoYXZlIGJlZW4gY2xlYW5lZCB1cCwgd2UnbGwgbGV0IHRoZW0gdGhyb3cuXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL3Byb2QtZXJyb3ItY29kZXNcbiAgICAgICAgICAgIHZhciBlcnIgPSBFcnJvcigoY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnKSArICc6ICcgKyBsb2NhdGlvbiArICcgdHlwZSBgJyArIHR5cGVTcGVjTmFtZSArICdgIGlzIGludmFsaWQ7ICcgKyAnaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLCBidXQgcmVjZWl2ZWQgYCcgKyB0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gKyAnYC4nICsgJ1RoaXMgb2Z0ZW4gaGFwcGVucyBiZWNhdXNlIG9mIHR5cG9zIHN1Y2ggYXMgYFByb3BUeXBlcy5mdW5jdGlvbmAgaW5zdGVhZCBvZiBgUHJvcFR5cGVzLmZ1bmNgLicpO1xuICAgICAgICAgICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXJyb3IkMSA9IHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdKHZhbHVlcywgdHlwZVNwZWNOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgbnVsbCwgJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJyk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXJyb3IkMSA9IGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycm9yJDEgJiYgIShlcnJvciQxIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgICBlcnJvcignJXM6IHR5cGUgc3BlY2lmaWNhdGlvbiBvZiAlcycgKyAnIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICsgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiAnICsgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gcGFzcyBhbiBhcmd1bWVudCB0byB0aGUgdHlwZSBjaGVja2VyICcgKyAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICsgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIGxvY2F0aW9uLCB0eXBlU3BlY05hbWUsIHR5cGVvZiBlcnJvciQxKTtcblxuICAgICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycm9yJDEgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yJDEubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgICAgLy8gT25seSBtb25pdG9yIHRoaXMgZmFpbHVyZSBvbmNlIGJlY2F1c2UgdGhlcmUgdGVuZHMgdG8gYmUgYSBsb3Qgb2YgdGhlXG4gICAgICAgICAgLy8gc2FtZSBlcnJvci5cbiAgICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IkMS5tZXNzYWdlXSA9IHRydWU7XG4gICAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgICBlcnJvcignRmFpbGVkICVzIHR5cGU6ICVzJywgbG9jYXRpb24sIGVycm9yJDEubWVzc2FnZSk7XG5cbiAgICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG52YXIgaXNBcnJheUltcGwgPSBBcnJheS5pc0FycmF5OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5cbmZ1bmN0aW9uIGlzQXJyYXkoYSkge1xuICByZXR1cm4gaXNBcnJheUltcGwoYSk7XG59XG5cbi8qXG4gKiBUaGUgYCcnICsgdmFsdWVgIHBhdHRlcm4gKHVzZWQgaW4gaW4gcGVyZi1zZW5zaXRpdmUgY29kZSkgdGhyb3dzIGZvciBTeW1ib2xcbiAqIGFuZCBUZW1wb3JhbC4qIHR5cGVzLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L3B1bGwvMjIwNjQuXG4gKlxuICogVGhlIGZ1bmN0aW9ucyBpbiB0aGlzIG1vZHVsZSB3aWxsIHRocm93IGFuIGVhc2llci10by11bmRlcnN0YW5kLFxuICogZWFzaWVyLXRvLWRlYnVnIGV4Y2VwdGlvbiB3aXRoIGEgY2xlYXIgZXJyb3JzIG1lc3NhZ2UgbWVzc2FnZSBleHBsYWluaW5nIHRoZVxuICogcHJvYmxlbS4gKEluc3RlYWQgb2YgYSBjb25mdXNpbmcgZXhjZXB0aW9uIHRocm93biBpbnNpZGUgdGhlIGltcGxlbWVudGF0aW9uXG4gKiBvZiB0aGUgYHZhbHVlYCBvYmplY3QpLlxuICovXG4vLyAkRmxvd0ZpeE1lIG9ubHkgY2FsbGVkIGluIERFViwgc28gdm9pZCByZXR1cm4gaXMgbm90IHBvc3NpYmxlLlxuZnVuY3Rpb24gdHlwZU5hbWUodmFsdWUpIHtcbiAge1xuICAgIC8vIHRvU3RyaW5nVGFnIGlzIG5lZWRlZCBmb3IgbmFtZXNwYWNlZCB0eXBlcyBsaWtlIFRlbXBvcmFsLkluc3RhbnRcbiAgICB2YXIgaGFzVG9TdHJpbmdUYWcgPSB0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC50b1N0cmluZ1RhZztcbiAgICB2YXIgdHlwZSA9IGhhc1RvU3RyaW5nVGFnICYmIHZhbHVlW1N5bWJvbC50b1N0cmluZ1RhZ10gfHwgdmFsdWUuY29uc3RydWN0b3IubmFtZSB8fCAnT2JqZWN0JztcbiAgICByZXR1cm4gdHlwZTtcbiAgfVxufSAvLyAkRmxvd0ZpeE1lIG9ubHkgY2FsbGVkIGluIERFViwgc28gdm9pZCByZXR1cm4gaXMgbm90IHBvc3NpYmxlLlxuXG5cbmZ1bmN0aW9uIHdpbGxDb2VyY2lvblRocm93KHZhbHVlKSB7XG4gIHtcbiAgICB0cnkge1xuICAgICAgdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKSB7XG4gIC8vIElmIHlvdSBlbmRlZCB1cCBoZXJlIGJ5IGZvbGxvd2luZyBhbiBleGNlcHRpb24gY2FsbCBzdGFjaywgaGVyZSdzIHdoYXQnc1xuICAvLyBoYXBwZW5lZDogeW91IHN1cHBsaWVkIGFuIG9iamVjdCBvciBzeW1ib2wgdmFsdWUgdG8gUmVhY3QgKGFzIGEgcHJvcCwga2V5LFxuICAvLyBET00gYXR0cmlidXRlLCBDU1MgcHJvcGVydHksIHN0cmluZyByZWYsIGV0Yy4pIGFuZCB3aGVuIFJlYWN0IHRyaWVkIHRvXG4gIC8vIGNvZXJjZSBpdCB0byBhIHN0cmluZyB1c2luZyBgJycgKyB2YWx1ZWAsIGFuIGV4Y2VwdGlvbiB3YXMgdGhyb3duLlxuICAvL1xuICAvLyBUaGUgbW9zdCBjb21tb24gdHlwZXMgdGhhdCB3aWxsIGNhdXNlIHRoaXMgZXhjZXB0aW9uIGFyZSBgU3ltYm9sYCBpbnN0YW5jZXNcbiAgLy8gYW5kIFRlbXBvcmFsIG9iamVjdHMgbGlrZSBgVGVtcG9yYWwuSW5zdGFudGAuIEJ1dCBhbnkgb2JqZWN0IHRoYXQgaGFzIGFcbiAgLy8gYHZhbHVlT2ZgIG9yIGBbU3ltYm9sLnRvUHJpbWl0aXZlXWAgbWV0aG9kIHRoYXQgdGhyb3dzIHdpbGwgYWxzbyBjYXVzZSB0aGlzXG4gIC8vIGV4Y2VwdGlvbi4gKExpYnJhcnkgYXV0aG9ycyBkbyB0aGlzIHRvIHByZXZlbnQgdXNlcnMgZnJvbSB1c2luZyBidWlsdC1pblxuICAvLyBudW1lcmljIG9wZXJhdG9ycyBsaWtlIGArYCBvciBjb21wYXJpc29uIG9wZXJhdG9ycyBsaWtlIGA+PWAgYmVjYXVzZSBjdXN0b21cbiAgLy8gbWV0aG9kcyBhcmUgbmVlZGVkIHRvIHBlcmZvcm0gYWNjdXJhdGUgYXJpdGhtZXRpYyBvciBjb21wYXJpc29uLilcbiAgLy9cbiAgLy8gVG8gZml4IHRoZSBwcm9ibGVtLCBjb2VyY2UgdGhpcyBvYmplY3Qgb3Igc3ltYm9sIHZhbHVlIHRvIGEgc3RyaW5nIGJlZm9yZVxuICAvLyBwYXNzaW5nIGl0IHRvIFJlYWN0LiBUaGUgbW9zdCByZWxpYWJsZSB3YXkgaXMgdXN1YWxseSBgU3RyaW5nKHZhbHVlKWAuXG4gIC8vXG4gIC8vIFRvIGZpbmQgd2hpY2ggdmFsdWUgaXMgdGhyb3dpbmcsIGNoZWNrIHRoZSBicm93c2VyIG9yIGRlYnVnZ2VyIGNvbnNvbGUuXG4gIC8vIEJlZm9yZSB0aGlzIGV4Y2VwdGlvbiB3YXMgdGhyb3duLCB0aGVyZSBzaG91bGQgYmUgYGNvbnNvbGUuZXJyb3JgIG91dHB1dFxuICAvLyB0aGF0IHNob3dzIHRoZSB0eXBlIChTeW1ib2wsIFRlbXBvcmFsLlBsYWluRGF0ZSwgZXRjLikgdGhhdCBjYXVzZWQgdGhlXG4gIC8vIHByb2JsZW0gYW5kIGhvdyB0aGF0IHR5cGUgd2FzIHVzZWQ6IGtleSwgYXRycmlidXRlLCBpbnB1dCB2YWx1ZSBwcm9wLCBldGMuXG4gIC8vIEluIG1vc3QgY2FzZXMsIHRoaXMgY29uc29sZSBvdXRwdXQgYWxzbyBzaG93cyB0aGUgY29tcG9uZW50IGFuZCBpdHNcbiAgLy8gYW5jZXN0b3IgY29tcG9uZW50cyB3aGVyZSB0aGUgZXhjZXB0aW9uIGhhcHBlbmVkLlxuICAvL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvc2FmZS1zdHJpbmctY29lcmNpb25cbiAgcmV0dXJuICcnICsgdmFsdWU7XG59XG5mdW5jdGlvbiBjaGVja0tleVN0cmluZ0NvZXJjaW9uKHZhbHVlKSB7XG4gIHtcbiAgICBpZiAod2lsbENvZXJjaW9uVGhyb3codmFsdWUpKSB7XG4gICAgICBlcnJvcignVGhlIHByb3ZpZGVkIGtleSBpcyBhbiB1bnN1cHBvcnRlZCB0eXBlICVzLicgKyAnIFRoaXMgdmFsdWUgbXVzdCBiZSBjb2VyY2VkIHRvIGEgc3RyaW5nIGJlZm9yZSBiZWZvcmUgdXNpbmcgaXQgaGVyZS4nLCB0eXBlTmFtZSh2YWx1ZSkpO1xuXG4gICAgICByZXR1cm4gdGVzdFN0cmluZ0NvZXJjaW9uKHZhbHVlKTsgLy8gdGhyb3cgKHRvIGhlbHAgY2FsbGVycyBmaW5kIHRyb3VibGVzaG9vdGluZyBjb21tZW50cylcbiAgICB9XG4gIH1cbn1cblxudmFyIFJlYWN0Q3VycmVudE93bmVyID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50T3duZXI7XG52YXIgUkVTRVJWRURfUFJPUFMgPSB7XG4gIGtleTogdHJ1ZSxcbiAgcmVmOiB0cnVlLFxuICBfX3NlbGY6IHRydWUsXG4gIF9fc291cmNlOiB0cnVlXG59O1xudmFyIHNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duO1xudmFyIHNwZWNpYWxQcm9wUmVmV2FybmluZ1Nob3duO1xudmFyIGRpZFdhcm5BYm91dFN0cmluZ1JlZnM7XG5cbntcbiAgZGlkV2FybkFib3V0U3RyaW5nUmVmcyA9IHt9O1xufVxuXG5mdW5jdGlvbiBoYXNWYWxpZFJlZihjb25maWcpIHtcbiAge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ3JlZicpKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdyZWYnKS5nZXQ7XG5cbiAgICAgIGlmIChnZXR0ZXIgJiYgZ2V0dGVyLmlzUmVhY3RXYXJuaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29uZmlnLnJlZiAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBoYXNWYWxpZEtleShjb25maWcpIHtcbiAge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgJ2tleScpKSB7XG4gICAgICB2YXIgZ2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjb25maWcsICdrZXknKS5nZXQ7XG5cbiAgICAgIGlmIChnZXR0ZXIgJiYgZ2V0dGVyLmlzUmVhY3RXYXJuaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gY29uZmlnLmtleSAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiB3YXJuSWZTdHJpbmdSZWZDYW5ub3RCZUF1dG9Db252ZXJ0ZWQoY29uZmlnLCBzZWxmKSB7XG4gIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5yZWYgPT09ICdzdHJpbmcnICYmIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgJiYgc2VsZiAmJiBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnN0YXRlTm9kZSAhPT0gc2VsZikge1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC50eXBlKTtcblxuICAgICAgaWYgKCFkaWRXYXJuQWJvdXRTdHJpbmdSZWZzW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgIGVycm9yKCdDb21wb25lbnQgXCIlc1wiIGNvbnRhaW5zIHRoZSBzdHJpbmcgcmVmIFwiJXNcIi4gJyArICdTdXBwb3J0IGZvciBzdHJpbmcgcmVmcyB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gJyArICdUaGlzIGNhc2UgY2Fubm90IGJlIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIHRvIGFuIGFycm93IGZ1bmN0aW9uLiAnICsgJ1dlIGFzayB5b3UgdG8gbWFudWFsbHkgZml4IHRoaXMgY2FzZSBieSB1c2luZyB1c2VSZWYoKSBvciBjcmVhdGVSZWYoKSBpbnN0ZWFkLiAnICsgJ0xlYXJuIG1vcmUgYWJvdXQgdXNpbmcgcmVmcyBzYWZlbHkgaGVyZTogJyArICdodHRwczovL3JlYWN0anMub3JnL2xpbmsvc3RyaWN0LW1vZGUtc3RyaW5nLXJlZicsIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnR5cGUpLCBjb25maWcucmVmKTtcblxuICAgICAgICBkaWRXYXJuQWJvdXRTdHJpbmdSZWZzW2NvbXBvbmVudE5hbWVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lS2V5UHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHtcbiAgICB2YXIgd2FybkFib3V0QWNjZXNzaW5nS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93bikge1xuICAgICAgICBzcGVjaWFsUHJvcEtleVdhcm5pbmdTaG93biA9IHRydWU7XG5cbiAgICAgICAgZXJyb3IoJyVzOiBga2V5YCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3NwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB3YXJuQWJvdXRBY2Nlc3NpbmdLZXkuaXNSZWFjdFdhcm5pbmcgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ2tleScsIHtcbiAgICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nS2V5LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmaW5lUmVmUHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHtcbiAgICB2YXIgd2FybkFib3V0QWNjZXNzaW5nUmVmID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCFzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93bikge1xuICAgICAgICBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93biA9IHRydWU7XG5cbiAgICAgICAgZXJyb3IoJyVzOiBgcmVmYCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3NwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYuaXNSZWFjdFdhcm5pbmcgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9wcywgJ3JlZicsIHtcbiAgICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nUmVmLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbn1cbi8qKlxuICogRmFjdG9yeSBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IFJlYWN0IGVsZW1lbnQuIFRoaXMgbm8gbG9uZ2VyIGFkaGVyZXMgdG9cbiAqIHRoZSBjbGFzcyBwYXR0ZXJuLCBzbyBkbyBub3QgdXNlIG5ldyB0byBjYWxsIGl0LiBBbHNvLCBpbnN0YW5jZW9mIGNoZWNrXG4gKiB3aWxsIG5vdCB3b3JrLiBJbnN0ZWFkIHRlc3QgJCR0eXBlb2YgZmllbGQgYWdhaW5zdCBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgdG8gY2hlY2tcbiAqIGlmIHNvbWV0aGluZyBpcyBhIFJlYWN0IEVsZW1lbnQuXG4gKlxuICogQHBhcmFtIHsqfSB0eXBlXG4gKiBAcGFyYW0geyp9IHByb3BzXG4gKiBAcGFyYW0geyp9IGtleVxuICogQHBhcmFtIHtzdHJpbmd8b2JqZWN0fSByZWZcbiAqIEBwYXJhbSB7Kn0gb3duZXJcbiAqIEBwYXJhbSB7Kn0gc2VsZiBBICp0ZW1wb3JhcnkqIGhlbHBlciB0byBkZXRlY3QgcGxhY2VzIHdoZXJlIGB0aGlzYCBpc1xuICogZGlmZmVyZW50IGZyb20gdGhlIGBvd25lcmAgd2hlbiBSZWFjdC5jcmVhdGVFbGVtZW50IGlzIGNhbGxlZCwgc28gdGhhdCB3ZVxuICogY2FuIHdhcm4uIFdlIHdhbnQgdG8gZ2V0IHJpZCBvZiBvd25lciBhbmQgcmVwbGFjZSBzdHJpbmcgYHJlZmBzIHdpdGggYXJyb3dcbiAqIGZ1bmN0aW9ucywgYW5kIGFzIGxvbmcgYXMgYHRoaXNgIGFuZCBvd25lciBhcmUgdGhlIHNhbWUsIHRoZXJlIHdpbGwgYmUgbm9cbiAqIGNoYW5nZSBpbiBiZWhhdmlvci5cbiAqIEBwYXJhbSB7Kn0gc291cmNlIEFuIGFubm90YXRpb24gb2JqZWN0IChhZGRlZCBieSBhIHRyYW5zcGlsZXIgb3Igb3RoZXJ3aXNlKVxuICogaW5kaWNhdGluZyBmaWxlbmFtZSwgbGluZSBudW1iZXIsIGFuZC9vciBvdGhlciBpbmZvcm1hdGlvbi5cbiAqIEBpbnRlcm5hbFxuICovXG5cblxudmFyIFJlYWN0RWxlbWVudCA9IGZ1bmN0aW9uICh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpIHtcbiAgdmFyIGVsZW1lbnQgPSB7XG4gICAgLy8gVGhpcyB0YWcgYWxsb3dzIHVzIHRvIHVuaXF1ZWx5IGlkZW50aWZ5IHRoaXMgYXMgYSBSZWFjdCBFbGVtZW50XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0VMRU1FTlRfVFlQRSxcbiAgICAvLyBCdWlsdC1pbiBwcm9wZXJ0aWVzIHRoYXQgYmVsb25nIG9uIHRoZSBlbGVtZW50XG4gICAgdHlwZTogdHlwZSxcbiAgICBrZXk6IGtleSxcbiAgICByZWY6IHJlZixcbiAgICBwcm9wczogcHJvcHMsXG4gICAgLy8gUmVjb3JkIHRoZSBjb21wb25lbnQgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoaXMgZWxlbWVudC5cbiAgICBfb3duZXI6IG93bmVyXG4gIH07XG5cbiAge1xuICAgIC8vIFRoZSB2YWxpZGF0aW9uIGZsYWcgaXMgY3VycmVudGx5IG11dGF0aXZlLiBXZSBwdXQgaXQgb25cbiAgICAvLyBhbiBleHRlcm5hbCBiYWNraW5nIHN0b3JlIHNvIHRoYXQgd2UgY2FuIGZyZWV6ZSB0aGUgd2hvbGUgb2JqZWN0LlxuICAgIC8vIFRoaXMgY2FuIGJlIHJlcGxhY2VkIHdpdGggYSBXZWFrTWFwIG9uY2UgdGhleSBhcmUgaW1wbGVtZW50ZWQgaW5cbiAgICAvLyBjb21tb25seSB1c2VkIGRldmVsb3BtZW50IGVudmlyb25tZW50cy5cbiAgICBlbGVtZW50Ll9zdG9yZSA9IHt9OyAvLyBUbyBtYWtlIGNvbXBhcmluZyBSZWFjdEVsZW1lbnRzIGVhc2llciBmb3IgdGVzdGluZyBwdXJwb3Nlcywgd2UgbWFrZVxuICAgIC8vIHRoZSB2YWxpZGF0aW9uIGZsYWcgbm9uLWVudW1lcmFibGUgKHdoZXJlIHBvc3NpYmxlLCB3aGljaCBzaG91bGRcbiAgICAvLyBpbmNsdWRlIGV2ZXJ5IGVudmlyb25tZW50IHdlIHJ1biB0ZXN0cyBpbiksIHNvIHRoZSB0ZXN0IGZyYW1ld29ya1xuICAgIC8vIGlnbm9yZXMgaXQuXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudC5fc3RvcmUsICd2YWxpZGF0ZWQnLCB7XG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIHZhbHVlOiBmYWxzZVxuICAgIH0pOyAvLyBzZWxmIGFuZCBzb3VyY2UgYXJlIERFViBvbmx5IHByb3BlcnRpZXMuXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudCwgJ19zZWxmJywge1xuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6IHNlbGZcbiAgICB9KTsgLy8gVHdvIGVsZW1lbnRzIGNyZWF0ZWQgaW4gdHdvIGRpZmZlcmVudCBwbGFjZXMgc2hvdWxkIGJlIGNvbnNpZGVyZWRcbiAgICAvLyBlcXVhbCBmb3IgdGVzdGluZyBwdXJwb3NlcyBhbmQgdGhlcmVmb3JlIHdlIGhpZGUgaXQgZnJvbSBlbnVtZXJhdGlvbi5cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NvdXJjZScsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBzb3VyY2VcbiAgICB9KTtcblxuICAgIGlmIChPYmplY3QuZnJlZXplKSB7XG4gICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQucHJvcHMpO1xuICAgICAgT2JqZWN0LmZyZWV6ZShlbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZWxlbWVudDtcbn07XG4vKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JmY3MvcHVsbC8xMDdcbiAqIEBwYXJhbSB7Kn0gdHlwZVxuICogQHBhcmFtIHtvYmplY3R9IHByb3BzXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKi9cblxuZnVuY3Rpb24ganN4REVWKHR5cGUsIGNvbmZpZywgbWF5YmVLZXksIHNvdXJjZSwgc2VsZikge1xuICB7XG4gICAgdmFyIHByb3BOYW1lOyAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG5cbiAgICB2YXIgcHJvcHMgPSB7fTtcbiAgICB2YXIga2V5ID0gbnVsbDtcbiAgICB2YXIgcmVmID0gbnVsbDsgLy8gQ3VycmVudGx5LCBrZXkgY2FuIGJlIHNwcmVhZCBpbiBhcyBhIHByb3AuIFRoaXMgY2F1c2VzIGEgcG90ZW50aWFsXG4gICAgLy8gaXNzdWUgaWYga2V5IGlzIGFsc28gZXhwbGljaXRseSBkZWNsYXJlZCAoaWUuIDxkaXYgey4uLnByb3BzfSBrZXk9XCJIaVwiIC8+XG4gICAgLy8gb3IgPGRpdiBrZXk9XCJIaVwiIHsuLi5wcm9wc30gLz4gKS4gV2Ugd2FudCB0byBkZXByZWNhdGUga2V5IHNwcmVhZCxcbiAgICAvLyBidXQgYXMgYW4gaW50ZXJtZWRpYXJ5IHN0ZXAsIHdlIHdpbGwgdXNlIGpzeERFViBmb3IgZXZlcnl0aGluZyBleGNlcHRcbiAgICAvLyA8ZGl2IHsuLi5wcm9wc30ga2V5PVwiSGlcIiAvPiwgYmVjYXVzZSB3ZSBhcmVuJ3QgY3VycmVudGx5IGFibGUgdG8gdGVsbCBpZlxuICAgIC8vIGtleSBpcyBleHBsaWNpdGx5IGRlY2xhcmVkIHRvIGJlIHVuZGVmaW5lZCBvciBub3QuXG5cbiAgICBpZiAobWF5YmVLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAge1xuICAgICAgICBjaGVja0tleVN0cmluZ0NvZXJjaW9uKG1heWJlS2V5KTtcbiAgICAgIH1cblxuICAgICAga2V5ID0gJycgKyBtYXliZUtleTtcbiAgICB9XG5cbiAgICBpZiAoaGFzVmFsaWRLZXkoY29uZmlnKSkge1xuICAgICAge1xuICAgICAgICBjaGVja0tleVN0cmluZ0NvZXJjaW9uKGNvbmZpZy5rZXkpO1xuICAgICAgfVxuXG4gICAgICBrZXkgPSAnJyArIGNvbmZpZy5rZXk7XG4gICAgfVxuXG4gICAgaWYgKGhhc1ZhbGlkUmVmKGNvbmZpZykpIHtcbiAgICAgIHJlZiA9IGNvbmZpZy5yZWY7XG4gICAgICB3YXJuSWZTdHJpbmdSZWZDYW5ub3RCZUF1dG9Db252ZXJ0ZWQoY29uZmlnLCBzZWxmKTtcbiAgICB9IC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIGFyZSBhZGRlZCB0byBhIG5ldyBwcm9wcyBvYmplY3RcblxuXG4gICAgZm9yIChwcm9wTmFtZSBpbiBjb25maWcpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGNvbmZpZywgcHJvcE5hbWUpICYmICFSRVNFUlZFRF9QUk9QUy5oYXNPd25Qcm9wZXJ0eShwcm9wTmFtZSkpIHtcbiAgICAgICAgcHJvcHNbcHJvcE5hbWVdID0gY29uZmlnW3Byb3BOYW1lXTtcbiAgICAgIH1cbiAgICB9IC8vIFJlc29sdmUgZGVmYXVsdCBwcm9wc1xuXG5cbiAgICBpZiAodHlwZSAmJiB0eXBlLmRlZmF1bHRQcm9wcykge1xuICAgICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUuZGVmYXVsdFByb3BzO1xuXG4gICAgICBmb3IgKHByb3BOYW1lIGluIGRlZmF1bHRQcm9wcykge1xuICAgICAgICBpZiAocHJvcHNbcHJvcE5hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGtleSB8fCByZWYpIHtcbiAgICAgIHZhciBkaXNwbGF5TmFtZSA9IHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nID8gdHlwZS5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWUgfHwgJ1Vua25vd24nIDogdHlwZTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBkZWZpbmVLZXlQcm9wV2FybmluZ0dldHRlcihwcm9wcywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVmKSB7XG4gICAgICAgIGRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFJlYWN0RWxlbWVudCh0eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LCBwcm9wcyk7XG4gIH1cbn1cblxudmFyIFJlYWN0Q3VycmVudE93bmVyJDEgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdEN1cnJlbnRPd25lcjtcbnZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lO1xuXG5mdW5jdGlvbiBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKGVsZW1lbnQpIHtcbiAge1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB2YXIgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcbiAgICAgIHZhciBzdGFjayA9IGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVihlbGVtZW50LnR5cGUsIGVsZW1lbnQuX3NvdXJjZSwgb3duZXIgPyBvd25lci50eXBlIDogbnVsbCk7XG4gICAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEuc2V0RXh0cmFTdGFja0ZyYW1lKHN0YWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSQxLnNldEV4dHJhU3RhY2tGcmFtZShudWxsKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIHByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duO1xuXG57XG4gIHByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duID0gZmFsc2U7XG59XG4vKipcbiAqIFZlcmlmaWVzIHRoZSBvYmplY3QgaXMgYSBSZWFjdEVsZW1lbnQuXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI2lzdmFsaWRlbGVtZW50XG4gKiBAcGFyYW0gez9vYmplY3R9IG9iamVjdFxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBgb2JqZWN0YCBpcyBhIFJlYWN0RWxlbWVudC5cbiAqIEBmaW5hbFxuICovXG5cblxuZnVuY3Rpb24gaXNWYWxpZEVsZW1lbnQob2JqZWN0KSB7XG4gIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0ICE9PSBudWxsICYmIG9iamVjdC4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpIHtcbiAge1xuICAgIGlmIChSZWFjdEN1cnJlbnRPd25lciQxLmN1cnJlbnQpIHtcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKFJlYWN0Q3VycmVudE93bmVyJDEuY3VycmVudC50eXBlKTtcblxuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuICdcXG5cXG5DaGVjayB0aGUgcmVuZGVyIG1ldGhvZCBvZiBgJyArIG5hbWUgKyAnYC4nO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTb3VyY2VJbmZvRXJyb3JBZGRlbmR1bShzb3VyY2UpIHtcbiAge1xuICAgIGlmIChzb3VyY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIGZpbGVOYW1lID0gc291cmNlLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sICcnKTtcbiAgICAgIHZhciBsaW5lTnVtYmVyID0gc291cmNlLmxpbmVOdW1iZXI7XG4gICAgICByZXR1cm4gJ1xcblxcbkNoZWNrIHlvdXIgY29kZSBhdCAnICsgZmlsZU5hbWUgKyAnOicgKyBsaW5lTnVtYmVyICsgJy4nO1xuICAgIH1cblxuICAgIHJldHVybiAnJztcbiAgfVxufVxuLyoqXG4gKiBXYXJuIGlmIHRoZXJlJ3Mgbm8ga2V5IGV4cGxpY2l0bHkgc2V0IG9uIGR5bmFtaWMgYXJyYXlzIG9mIGNoaWxkcmVuIG9yXG4gKiBvYmplY3Qga2V5cyBhcmUgbm90IHZhbGlkLiBUaGlzIGFsbG93cyB1cyB0byBrZWVwIHRyYWNrIG9mIGNoaWxkcmVuIGJldHdlZW5cbiAqIHVwZGF0ZXMuXG4gKi9cblxuXG52YXIgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0ge307XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRDb21wb25lbnRFcnJvckluZm8ocGFyZW50VHlwZSkge1xuICB7XG4gICAgdmFyIGluZm8gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKTtcblxuICAgIGlmICghaW5mbykge1xuICAgICAgdmFyIHBhcmVudE5hbWUgPSB0eXBlb2YgcGFyZW50VHlwZSA9PT0gJ3N0cmluZycgPyBwYXJlbnRUeXBlIDogcGFyZW50VHlwZS5kaXNwbGF5TmFtZSB8fCBwYXJlbnRUeXBlLm5hbWU7XG5cbiAgICAgIGlmIChwYXJlbnROYW1lKSB7XG4gICAgICAgIGluZm8gPSBcIlxcblxcbkNoZWNrIHRoZSB0b3AtbGV2ZWwgcmVuZGVyIGNhbGwgdXNpbmcgPFwiICsgcGFyZW50TmFtZSArIFwiPi5cIjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaW5mbztcbiAgfVxufVxuLyoqXG4gKiBXYXJuIGlmIHRoZSBlbGVtZW50IGRvZXNuJ3QgaGF2ZSBhbiBleHBsaWNpdCBrZXkgYXNzaWduZWQgdG8gaXQuXG4gKiBUaGlzIGVsZW1lbnQgaXMgaW4gYW4gYXJyYXkuIFRoZSBhcnJheSBjb3VsZCBncm93IGFuZCBzaHJpbmsgb3IgYmVcbiAqIHJlb3JkZXJlZC4gQWxsIGNoaWxkcmVuIHRoYXQgaGF2ZW4ndCBhbHJlYWR5IGJlZW4gdmFsaWRhdGVkIGFyZSByZXF1aXJlZCB0b1xuICogaGF2ZSBhIFwia2V5XCIgcHJvcGVydHkgYXNzaWduZWQgdG8gaXQuIEVycm9yIHN0YXR1c2VzIGFyZSBjYWNoZWQgc28gYSB3YXJuaW5nXG4gKiB3aWxsIG9ubHkgYmUgc2hvd24gb25jZS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7UmVhY3RFbGVtZW50fSBlbGVtZW50IEVsZW1lbnQgdGhhdCByZXF1aXJlcyBhIGtleS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBlbGVtZW50J3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlRXhwbGljaXRLZXkoZWxlbWVudCwgcGFyZW50VHlwZSkge1xuICB7XG4gICAgaWYgKCFlbGVtZW50Ll9zdG9yZSB8fCBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgfHwgZWxlbWVudC5rZXkgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGVsZW1lbnQuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG4gICAgdmFyIGN1cnJlbnRDb21wb25lbnRFcnJvckluZm8gPSBnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvKHBhcmVudFR5cGUpO1xuXG4gICAgaWYgKG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSA9IHRydWU7IC8vIFVzdWFsbHkgdGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIG9mZmVuZGVyLCBidXQgaWYgaXQgYWNjZXB0cyBjaGlsZHJlbiBhcyBhXG4gICAgLy8gcHJvcGVydHksIGl0IG1heSBiZSB0aGUgY3JlYXRvciBvZiB0aGUgY2hpbGQgdGhhdCdzIHJlc3BvbnNpYmxlIGZvclxuICAgIC8vIGFzc2lnbmluZyBpdCBhIGtleS5cblxuICAgIHZhciBjaGlsZE93bmVyID0gJyc7XG5cbiAgICBpZiAoZWxlbWVudCAmJiBlbGVtZW50Ll9vd25lciAmJiBlbGVtZW50Ll9vd25lciAhPT0gUmVhY3RDdXJyZW50T3duZXIkMS5jdXJyZW50KSB7XG4gICAgICAvLyBHaXZlIHRoZSBjb21wb25lbnQgdGhhdCBvcmlnaW5hbGx5IGNyZWF0ZWQgdGhpcyBjaGlsZC5cbiAgICAgIGNoaWxkT3duZXIgPSBcIiBJdCB3YXMgcGFzc2VkIGEgY2hpbGQgZnJvbSBcIiArIGdldENvbXBvbmVudE5hbWVGcm9tVHlwZShlbGVtZW50Ll9vd25lci50eXBlKSArIFwiLlwiO1xuICAgIH1cblxuICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEoZWxlbWVudCk7XG5cbiAgICBlcnJvcignRWFjaCBjaGlsZCBpbiBhIGxpc3Qgc2hvdWxkIGhhdmUgYSB1bmlxdWUgXCJrZXlcIiBwcm9wLicgKyAnJXMlcyBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3dhcm5pbmcta2V5cyBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLCBjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvLCBjaGlsZE93bmVyKTtcblxuICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEobnVsbCk7XG4gIH1cbn1cbi8qKlxuICogRW5zdXJlIHRoYXQgZXZlcnkgZWxlbWVudCBlaXRoZXIgaXMgcGFzc2VkIGluIGEgc3RhdGljIGxvY2F0aW9uLCBpbiBhblxuICogYXJyYXkgd2l0aCBhbiBleHBsaWNpdCBrZXlzIHByb3BlcnR5IGRlZmluZWQsIG9yIGluIGFuIG9iamVjdCBsaXRlcmFsXG4gKiB3aXRoIHZhbGlkIGtleSBwcm9wZXJ0eS5cbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBwYXJhbSB7UmVhY3ROb2RlfSBub2RlIFN0YXRpY2FsbHkgcGFzc2VkIGNoaWxkIG9mIGFueSB0eXBlLlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIG5vZGUncyBwYXJlbnQncyB0eXBlLlxuICovXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVDaGlsZEtleXMobm9kZSwgcGFyZW50VHlwZSkge1xuICB7XG4gICAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc0FycmF5KG5vZGUpKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNoaWxkID0gbm9kZVtpXTtcblxuICAgICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgICAgdmFsaWRhdGVFeHBsaWNpdEtleShjaGlsZCwgcGFyZW50VHlwZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVmFsaWRFbGVtZW50KG5vZGUpKSB7XG4gICAgICAvLyBUaGlzIGVsZW1lbnQgd2FzIHBhc3NlZCBpbiBhIHZhbGlkIGxvY2F0aW9uLlxuICAgICAgaWYgKG5vZGUuX3N0b3JlKSB7XG4gICAgICAgIG5vZGUuX3N0b3JlLnZhbGlkYXRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obm9kZSk7XG5cbiAgICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBFbnRyeSBpdGVyYXRvcnMgdXNlZCB0byBwcm92aWRlIGltcGxpY2l0IGtleXMsXG4gICAgICAgIC8vIGJ1dCBub3cgd2UgcHJpbnQgYSBzZXBhcmF0ZSB3YXJuaW5nIGZvciB0aGVtIGxhdGVyLlxuICAgICAgICBpZiAoaXRlcmF0b3JGbiAhPT0gbm9kZS5lbnRyaWVzKSB7XG4gICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG5vZGUpO1xuICAgICAgICAgIHZhciBzdGVwO1xuXG4gICAgICAgICAgd2hpbGUgKCEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgICAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KHN0ZXAudmFsdWUpKSB7XG4gICAgICAgICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoc3RlcC52YWx1ZSwgcGFyZW50VHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4vKipcbiAqIEdpdmVuIGFuIGVsZW1lbnQsIHZhbGlkYXRlIHRoYXQgaXRzIHByb3BzIGZvbGxvdyB0aGUgcHJvcFR5cGVzIGRlZmluaXRpb24sXG4gKiBwcm92aWRlZCBieSB0aGUgdHlwZS5cbiAqXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZWxlbWVudFxuICovXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCkge1xuICB7XG4gICAgdmFyIHR5cGUgPSBlbGVtZW50LnR5cGU7XG5cbiAgICBpZiAodHlwZSA9PT0gbnVsbCB8fCB0eXBlID09PSB1bmRlZmluZWQgfHwgdHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHByb3BUeXBlcztcblxuICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcHJvcFR5cGVzID0gdHlwZS5wcm9wVHlwZXM7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgKHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgfHwgLy8gTm90ZTogTWVtbyBvbmx5IGNoZWNrcyBvdXRlciBwcm9wcyBoZXJlLlxuICAgIC8vIElubmVyIHByb3BzIGFyZSBjaGVja2VkIGluIHRoZSByZWNvbmNpbGVyLlxuICAgIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01FTU9fVFlQRSkpIHtcbiAgICAgIHByb3BUeXBlcyA9IHR5cGUucHJvcFR5cGVzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHByb3BUeXBlcykge1xuICAgICAgLy8gSW50ZW50aW9uYWxseSBpbnNpZGUgdG8gYXZvaWQgdHJpZ2dlcmluZyBsYXp5IGluaXRpYWxpemVyczpcbiAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUpO1xuICAgICAgY2hlY2tQcm9wVHlwZXMocHJvcFR5cGVzLCBlbGVtZW50LnByb3BzLCAncHJvcCcsIG5hbWUsIGVsZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAodHlwZS5Qcm9wVHlwZXMgIT09IHVuZGVmaW5lZCAmJiAhcHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd24pIHtcbiAgICAgIHByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duID0gdHJ1ZTsgLy8gSW50ZW50aW9uYWxseSBpbnNpZGUgdG8gYXZvaWQgdHJpZ2dlcmluZyBsYXp5IGluaXRpYWxpemVyczpcblxuICAgICAgdmFyIF9uYW1lID0gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUpO1xuXG4gICAgICBlcnJvcignQ29tcG9uZW50ICVzIGRlY2xhcmVkIGBQcm9wVHlwZXNgIGluc3RlYWQgb2YgYHByb3BUeXBlc2AuIERpZCB5b3UgbWlzc3BlbGwgdGhlIHByb3BlcnR5IGFzc2lnbm1lbnQ/JywgX25hbWUgfHwgJ1Vua25vd24nKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHR5cGUuZ2V0RGVmYXVsdFByb3BzID09PSAnZnVuY3Rpb24nICYmICF0eXBlLmdldERlZmF1bHRQcm9wcy5pc1JlYWN0Q2xhc3NBcHByb3ZlZCkge1xuICAgICAgZXJyb3IoJ2dldERlZmF1bHRQcm9wcyBpcyBvbmx5IHVzZWQgb24gY2xhc3NpYyBSZWFjdC5jcmVhdGVDbGFzcyAnICsgJ2RlZmluaXRpb25zLiBVc2UgYSBzdGF0aWMgcHJvcGVydHkgbmFtZWQgYGRlZmF1bHRQcm9wc2AgaW5zdGVhZC4nKTtcbiAgICB9XG4gIH1cbn1cbi8qKlxuICogR2l2ZW4gYSBmcmFnbWVudCwgdmFsaWRhdGUgdGhhdCBpdCBjYW4gb25seSBiZSBwcm92aWRlZCB3aXRoIGZyYWdtZW50IHByb3BzXG4gKiBAcGFyYW0ge1JlYWN0RWxlbWVudH0gZnJhZ21lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlRnJhZ21lbnRQcm9wcyhmcmFnbWVudCkge1xuICB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmcmFnbWVudC5wcm9wcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoa2V5ICE9PSAnY2hpbGRyZW4nICYmIGtleSAhPT0gJ2tleScpIHtcbiAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQkMShmcmFnbWVudCk7XG5cbiAgICAgICAgZXJyb3IoJ0ludmFsaWQgcHJvcCBgJXNgIHN1cHBsaWVkIHRvIGBSZWFjdC5GcmFnbWVudGAuICcgKyAnUmVhY3QuRnJhZ21lbnQgY2FuIG9ubHkgaGF2ZSBga2V5YCBhbmQgYGNoaWxkcmVuYCBwcm9wcy4nLCBrZXkpO1xuXG4gICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEobnVsbCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmcmFnbWVudC5yZWYgIT09IG51bGwpIHtcbiAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEoZnJhZ21lbnQpO1xuXG4gICAgICBlcnJvcignSW52YWxpZCBhdHRyaWJ1dGUgYHJlZmAgc3VwcGxpZWQgdG8gYFJlYWN0LkZyYWdtZW50YC4nKTtcblxuICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQkMShudWxsKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGRpZFdhcm5BYm91dEtleVNwcmVhZCA9IHt9O1xuZnVuY3Rpb24ganN4V2l0aFZhbGlkYXRpb24odHlwZSwgcHJvcHMsIGtleSwgaXNTdGF0aWNDaGlsZHJlbiwgc291cmNlLCBzZWxmKSB7XG4gIHtcbiAgICB2YXIgdmFsaWRUeXBlID0gaXNWYWxpZEVsZW1lbnRUeXBlKHR5cGUpOyAvLyBXZSB3YXJuIGluIHRoaXMgY2FzZSBidXQgZG9uJ3QgdGhyb3cuIFdlIGV4cGVjdCB0aGUgZWxlbWVudCBjcmVhdGlvbiB0b1xuICAgIC8vIHN1Y2NlZWQgYW5kIHRoZXJlIHdpbGwgbGlrZWx5IGJlIGVycm9ycyBpbiByZW5kZXIuXG5cbiAgICBpZiAoIXZhbGlkVHlwZSkge1xuICAgICAgdmFyIGluZm8gPSAnJztcblxuICAgICAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiBPYmplY3Qua2V5cyh0eXBlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaW5mbyArPSAnIFlvdSBsaWtlbHkgZm9yZ290IHRvIGV4cG9ydCB5b3VyIGNvbXBvbmVudCBmcm9tIHRoZSBmaWxlICcgKyBcIml0J3MgZGVmaW5lZCBpbiwgb3IgeW91IG1pZ2h0IGhhdmUgbWl4ZWQgdXAgZGVmYXVsdCBhbmQgbmFtZWQgaW1wb3J0cy5cIjtcbiAgICAgIH1cblxuICAgICAgdmFyIHNvdXJjZUluZm8gPSBnZXRTb3VyY2VJbmZvRXJyb3JBZGRlbmR1bShzb3VyY2UpO1xuXG4gICAgICBpZiAoc291cmNlSW5mbykge1xuICAgICAgICBpbmZvICs9IHNvdXJjZUluZm87XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpbmZvICs9IGdldERlY2xhcmF0aW9uRXJyb3JBZGRlbmR1bSgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgdHlwZVN0cmluZztcblxuICAgICAgaWYgKHR5cGUgPT09IG51bGwpIHtcbiAgICAgICAgdHlwZVN0cmluZyA9ICdudWxsJztcbiAgICAgIH0gZWxzZSBpZiAoaXNBcnJheSh0eXBlKSkge1xuICAgICAgICB0eXBlU3RyaW5nID0gJ2FycmF5JztcbiAgICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gdW5kZWZpbmVkICYmIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRSkge1xuICAgICAgICB0eXBlU3RyaW5nID0gXCI8XCIgKyAoZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUudHlwZSkgfHwgJ1Vua25vd24nKSArIFwiIC8+XCI7XG4gICAgICAgIGluZm8gPSAnIERpZCB5b3UgYWNjaWRlbnRhbGx5IGV4cG9ydCBhIEpTWCBsaXRlcmFsIGluc3RlYWQgb2YgYSBjb21wb25lbnQ/JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5cGVTdHJpbmcgPSB0eXBlb2YgdHlwZTtcbiAgICAgIH1cblxuICAgICAgZXJyb3IoJ1JlYWN0LmpzeDogdHlwZSBpcyBpbnZhbGlkIC0tIGV4cGVjdGVkIGEgc3RyaW5nIChmb3IgJyArICdidWlsdC1pbiBjb21wb25lbnRzKSBvciBhIGNsYXNzL2Z1bmN0aW9uIChmb3IgY29tcG9zaXRlICcgKyAnY29tcG9uZW50cykgYnV0IGdvdDogJXMuJXMnLCB0eXBlU3RyaW5nLCBpbmZvKTtcbiAgICB9XG5cbiAgICB2YXIgZWxlbWVudCA9IGpzeERFVih0eXBlLCBwcm9wcywga2V5LCBzb3VyY2UsIHNlbGYpOyAvLyBUaGUgcmVzdWx0IGNhbiBiZSBudWxsaXNoIGlmIGEgbW9jayBvciBhIGN1c3RvbSBmdW5jdGlvbiBpcyB1c2VkLlxuICAgIC8vIFRPRE86IERyb3AgdGhpcyB3aGVuIHRoZXNlIGFyZSBubyBsb25nZXIgYWxsb3dlZCBhcyB0aGUgdHlwZSBhcmd1bWVudC5cblxuICAgIGlmIChlbGVtZW50ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH0gLy8gU2tpcCBrZXkgd2FybmluZyBpZiB0aGUgdHlwZSBpc24ndCB2YWxpZCBzaW5jZSBvdXIga2V5IHZhbGlkYXRpb24gbG9naWNcbiAgICAvLyBkb2Vzbid0IGV4cGVjdCBhIG5vbi1zdHJpbmcvZnVuY3Rpb24gdHlwZSBhbmQgY2FuIHRocm93IGNvbmZ1c2luZyBlcnJvcnMuXG4gICAgLy8gV2UgZG9uJ3Qgd2FudCBleGNlcHRpb24gYmVoYXZpb3IgdG8gZGlmZmVyIGJldHdlZW4gZGV2IGFuZCBwcm9kLlxuICAgIC8vIChSZW5kZXJpbmcgd2lsbCB0aHJvdyB3aXRoIGEgaGVscGZ1bCBtZXNzYWdlIGFuZCBhcyBzb29uIGFzIHRoZSB0eXBlIGlzXG4gICAgLy8gZml4ZWQsIHRoZSBrZXkgd2FybmluZ3Mgd2lsbCBhcHBlYXIuKVxuXG5cbiAgICBpZiAodmFsaWRUeXBlKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSBwcm9wcy5jaGlsZHJlbjtcblxuICAgICAgaWYgKGNoaWxkcmVuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGlzU3RhdGljQ2hpbGRyZW4pIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgdmFsaWRhdGVDaGlsZEtleXMoY2hpbGRyZW5baV0sIHR5cGUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoT2JqZWN0LmZyZWV6ZSkge1xuICAgICAgICAgICAgICBPYmplY3QuZnJlZXplKGNoaWxkcmVuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyb3IoJ1JlYWN0LmpzeDogU3RhdGljIGNoaWxkcmVuIHNob3VsZCBhbHdheXMgYmUgYW4gYXJyYXkuICcgKyAnWW91IGFyZSBsaWtlbHkgZXhwbGljaXRseSBjYWxsaW5nIFJlYWN0LmpzeHMgb3IgUmVhY3QuanN4REVWLiAnICsgJ1VzZSB0aGUgQmFiZWwgdHJhbnNmb3JtIGluc3RlYWQuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGNoaWxkcmVuLCB0eXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3BzLCAna2V5JykpIHtcbiAgICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUodHlwZSk7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcHMpLmZpbHRlcihmdW5jdGlvbiAoaykge1xuICAgICAgICAgIHJldHVybiBrICE9PSAna2V5JztcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBiZWZvcmVFeGFtcGxlID0ga2V5cy5sZW5ndGggPiAwID8gJ3trZXk6IHNvbWVLZXksICcgKyBrZXlzLmpvaW4oJzogLi4uLCAnKSArICc6IC4uLn0nIDogJ3trZXk6IHNvbWVLZXl9JztcblxuICAgICAgICBpZiAoIWRpZFdhcm5BYm91dEtleVNwcmVhZFtjb21wb25lbnROYW1lICsgYmVmb3JlRXhhbXBsZV0pIHtcbiAgICAgICAgICB2YXIgYWZ0ZXJFeGFtcGxlID0ga2V5cy5sZW5ndGggPiAwID8gJ3snICsga2V5cy5qb2luKCc6IC4uLiwgJykgKyAnOiAuLi59JyA6ICd7fSc7XG5cbiAgICAgICAgICBlcnJvcignQSBwcm9wcyBvYmplY3QgY29udGFpbmluZyBhIFwia2V5XCIgcHJvcCBpcyBiZWluZyBzcHJlYWQgaW50byBKU1g6XFxuJyArICcgIGxldCBwcm9wcyA9ICVzO1xcbicgKyAnICA8JXMgey4uLnByb3BzfSAvPlxcbicgKyAnUmVhY3Qga2V5cyBtdXN0IGJlIHBhc3NlZCBkaXJlY3RseSB0byBKU1ggd2l0aG91dCB1c2luZyBzcHJlYWQ6XFxuJyArICcgIGxldCBwcm9wcyA9ICVzO1xcbicgKyAnICA8JXMga2V5PXtzb21lS2V5fSB7Li4ucHJvcHN9IC8+JywgYmVmb3JlRXhhbXBsZSwgY29tcG9uZW50TmFtZSwgYWZ0ZXJFeGFtcGxlLCBjb21wb25lbnROYW1lKTtcblxuICAgICAgICAgIGRpZFdhcm5BYm91dEtleVNwcmVhZFtjb21wb25lbnROYW1lICsgYmVmb3JlRXhhbXBsZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpIHtcbiAgICAgIHZhbGlkYXRlRnJhZ21lbnRQcm9wcyhlbGVtZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsaWRhdGVQcm9wVHlwZXMoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH1cbn0gLy8gVGhlc2UgdHdvIGZ1bmN0aW9ucyBleGlzdCB0byBzdGlsbCBnZXQgY2hpbGQgd2FybmluZ3MgaW4gZGV2XG4vLyBldmVuIHdpdGggdGhlIHByb2QgdHJhbnNmb3JtLiBUaGlzIG1lYW5zIHRoYXQganN4REVWIGlzIHB1cmVseVxuLy8gb3B0LWluIGJlaGF2aW9yIGZvciBiZXR0ZXIgbWVzc2FnZXMgYnV0IHRoYXQgd2Ugd29uJ3Qgc3RvcFxuLy8gZ2l2aW5nIHlvdSB3YXJuaW5ncyBpZiB5b3UgdXNlIHByb2R1Y3Rpb24gYXBpcy5cblxuZnVuY3Rpb24ganN4V2l0aFZhbGlkYXRpb25TdGF0aWModHlwZSwgcHJvcHMsIGtleSkge1xuICB7XG4gICAgcmV0dXJuIGpzeFdpdGhWYWxpZGF0aW9uKHR5cGUsIHByb3BzLCBrZXksIHRydWUpO1xuICB9XG59XG5mdW5jdGlvbiBqc3hXaXRoVmFsaWRhdGlvbkR5bmFtaWModHlwZSwgcHJvcHMsIGtleSkge1xuICB7XG4gICAgcmV0dXJuIGpzeFdpdGhWYWxpZGF0aW9uKHR5cGUsIHByb3BzLCBrZXksIGZhbHNlKTtcbiAgfVxufVxuXG52YXIganN4ID0gIGpzeFdpdGhWYWxpZGF0aW9uRHluYW1pYyA7IC8vIHdlIG1heSB3YW50IHRvIHNwZWNpYWwgY2FzZSBqc3hzIGludGVybmFsbHkgdG8gdGFrZSBhZHZhbnRhZ2Ugb2Ygc3RhdGljIGNoaWxkcmVuLlxuLy8gZm9yIG5vdyB3ZSBjYW4gc2hpcCBpZGVudGljYWwgcHJvZCBmdW5jdGlvbnNcblxudmFyIGpzeHMgPSAganN4V2l0aFZhbGlkYXRpb25TdGF0aWMgO1xuXG5leHBvcnRzLkZyYWdtZW50ID0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbmV4cG9ydHMuanN4ID0ganN4O1xuZXhwb3J0cy5qc3hzID0ganN4cztcbiAgfSkoKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LmRldmVsb3BtZW50LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICd1c2Ugc3RyaWN0JztcblxuLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuaWYgKFxuICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICE9PSAndW5kZWZpbmVkJyAmJlxuICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLnJlZ2lzdGVySW50ZXJuYWxNb2R1bGVTdGFydCA9PT1cbiAgICAnZnVuY3Rpb24nXG4pIHtcbiAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLnJlZ2lzdGVySW50ZXJuYWxNb2R1bGVTdGFydChuZXcgRXJyb3IoKSk7XG59XG4gICAgICAgICAgdmFyIFJlYWN0VmVyc2lvbiA9ICcxOC4zLjEnO1xuXG4vLyBBVFRFTlRJT05cbi8vIFdoZW4gYWRkaW5nIG5ldyBzeW1ib2xzIHRvIHRoaXMgZmlsZSxcbi8vIFBsZWFzZSBjb25zaWRlciBhbHNvIGFkZGluZyB0byAncmVhY3QtZGV2dG9vbHMtc2hhcmVkL3NyYy9iYWNrZW5kL1JlYWN0U3ltYm9scydcbi8vIFRoZSBTeW1ib2wgdXNlZCB0byB0YWcgdGhlIFJlYWN0RWxlbWVudC1saWtlIHR5cGVzLlxudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKTtcbnZhciBSRUFDVF9QT1JUQUxfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LnBvcnRhbCcpO1xudmFyIFJFQUNUX0ZSQUdNRU5UX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5mcmFnbWVudCcpO1xudmFyIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5zdHJpY3RfbW9kZScpO1xudmFyIFJFQUNUX1BST0ZJTEVSX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5wcm9maWxlcicpO1xudmFyIFJFQUNUX1BST1ZJREVSX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5wcm92aWRlcicpO1xudmFyIFJFQUNUX0NPTlRFWFRfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmNvbnRleHQnKTtcbnZhciBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gU3ltYm9sLmZvcigncmVhY3QuZm9yd2FyZF9yZWYnKTtcbnZhciBSRUFDVF9TVVNQRU5TRV9UWVBFID0gU3ltYm9sLmZvcigncmVhY3Quc3VzcGVuc2UnKTtcbnZhciBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgPSBTeW1ib2wuZm9yKCdyZWFjdC5zdXNwZW5zZV9saXN0Jyk7XG52YXIgUkVBQ1RfTUVNT19UWVBFID0gU3ltYm9sLmZvcigncmVhY3QubWVtbycpO1xudmFyIFJFQUNUX0xBWllfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmxhenknKTtcbnZhciBSRUFDVF9PRkZTQ1JFRU5fVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0Lm9mZnNjcmVlbicpO1xudmFyIE1BWUJFX0lURVJBVE9SX1NZTUJPTCA9IFN5bWJvbC5pdGVyYXRvcjtcbnZhciBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJztcbmZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZSkge1xuICBpZiAobWF5YmVJdGVyYWJsZSA9PT0gbnVsbCB8fCB0eXBlb2YgbWF5YmVJdGVyYWJsZSAhPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBtYXliZUl0ZXJhdG9yID0gTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSB8fCBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXTtcblxuICBpZiAodHlwZW9mIG1heWJlSXRlcmF0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gbWF5YmVJdGVyYXRvcjtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG4vKipcbiAqIEtlZXBzIHRyYWNrIG9mIHRoZSBjdXJyZW50IGRpc3BhdGNoZXIuXG4gKi9cbnZhciBSZWFjdEN1cnJlbnREaXNwYXRjaGVyID0ge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEB0eXBlIHtSZWFjdENvbXBvbmVudH1cbiAgICovXG4gIGN1cnJlbnQ6IG51bGxcbn07XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgYmF0Y2gncyBjb25maWd1cmF0aW9uIHN1Y2ggYXMgaG93IGxvbmcgYW4gdXBkYXRlXG4gKiBzaG91bGQgc3VzcGVuZCBmb3IgaWYgaXQgbmVlZHMgdG8uXG4gKi9cbnZhciBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyA9IHtcbiAgdHJhbnNpdGlvbjogbnVsbFxufTtcblxudmFyIFJlYWN0Q3VycmVudEFjdFF1ZXVlID0ge1xuICBjdXJyZW50OiBudWxsLFxuICAvLyBVc2VkIHRvIHJlcHJvZHVjZSBiZWhhdmlvciBvZiBgYmF0Y2hlZFVwZGF0ZXNgIGluIGxlZ2FjeSBtb2RlLlxuICBpc0JhdGNoaW5nTGVnYWN5OiBmYWxzZSxcbiAgZGlkU2NoZWR1bGVMZWdhY3lVcGRhdGU6IGZhbHNlXG59O1xuXG4vKipcbiAqIEtlZXBzIHRyYWNrIG9mIHRoZSBjdXJyZW50IG93bmVyLlxuICpcbiAqIFRoZSBjdXJyZW50IG93bmVyIGlzIHRoZSBjb21wb25lbnQgd2hvIHNob3VsZCBvd24gYW55IGNvbXBvbmVudHMgdGhhdCBhcmVcbiAqIGN1cnJlbnRseSBiZWluZyBjb25zdHJ1Y3RlZC5cbiAqL1xudmFyIFJlYWN0Q3VycmVudE93bmVyID0ge1xuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIEB0eXBlIHtSZWFjdENvbXBvbmVudH1cbiAgICovXG4gIGN1cnJlbnQ6IG51bGxcbn07XG5cbnZhciBSZWFjdERlYnVnQ3VycmVudEZyYW1lID0ge307XG52YXIgY3VycmVudEV4dHJhU3RhY2tGcmFtZSA9IG51bGw7XG5mdW5jdGlvbiBzZXRFeHRyYVN0YWNrRnJhbWUoc3RhY2spIHtcbiAge1xuICAgIGN1cnJlbnRFeHRyYVN0YWNrRnJhbWUgPSBzdGFjaztcbiAgfVxufVxuXG57XG4gIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuc2V0RXh0cmFTdGFja0ZyYW1lID0gZnVuY3Rpb24gKHN0YWNrKSB7XG4gICAge1xuICAgICAgY3VycmVudEV4dHJhU3RhY2tGcmFtZSA9IHN0YWNrO1xuICAgIH1cbiAgfTsgLy8gU3RhY2sgaW1wbGVtZW50YXRpb24gaW5qZWN0ZWQgYnkgdGhlIGN1cnJlbnQgcmVuZGVyZXIuXG5cblxuICBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldEN1cnJlbnRTdGFjayA9IG51bGw7XG5cbiAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRTdGFja0FkZGVuZHVtID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdGFjayA9ICcnOyAvLyBBZGQgYW4gZXh0cmEgdG9wIGZyYW1lIHdoaWxlIGFuIGVsZW1lbnQgaXMgYmVpbmcgdmFsaWRhdGVkXG5cbiAgICBpZiAoY3VycmVudEV4dHJhU3RhY2tGcmFtZSkge1xuICAgICAgc3RhY2sgKz0gY3VycmVudEV4dHJhU3RhY2tGcmFtZTtcbiAgICB9IC8vIERlbGVnYXRlIHRvIHRoZSBpbmplY3RlZCByZW5kZXJlci1zcGVjaWZpYyBpbXBsZW1lbnRhdGlvblxuXG5cbiAgICB2YXIgaW1wbCA9IFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0Q3VycmVudFN0YWNrO1xuXG4gICAgaWYgKGltcGwpIHtcbiAgICAgIHN0YWNrICs9IGltcGwoKSB8fCAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gc3RhY2s7XG4gIH07XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnZhciBlbmFibGVTY29wZUFQSSA9IGZhbHNlOyAvLyBFeHBlcmltZW50YWwgQ3JlYXRlIEV2ZW50IEhhbmRsZSBBUEkuXG52YXIgZW5hYmxlQ2FjaGVFbGVtZW50ID0gZmFsc2U7XG52YXIgZW5hYmxlVHJhbnNpdGlvblRyYWNpbmcgPSBmYWxzZTsgLy8gTm8ga25vd24gYnVncywgYnV0IG5lZWRzIHBlcmZvcm1hbmNlIHRlc3RpbmdcblxudmFyIGVuYWJsZUxlZ2FjeUhpZGRlbiA9IGZhbHNlOyAvLyBFbmFibGVzIHVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIGZlYXR1cmUgaW4gRmliZXJcbi8vIHN0dWZmLiBJbnRlbmRlZCB0byBlbmFibGUgUmVhY3QgY29yZSBtZW1iZXJzIHRvIG1vcmUgZWFzaWx5IGRlYnVnIHNjaGVkdWxpbmdcbi8vIGlzc3VlcyBpbiBERVYgYnVpbGRzLlxuXG52YXIgZW5hYmxlRGVidWdUcmFjaW5nID0gZmFsc2U7IC8vIFRyYWNrIHdoaWNoIEZpYmVyKHMpIHNjaGVkdWxlIHJlbmRlciB3b3JrLlxuXG52YXIgUmVhY3RTaGFyZWRJbnRlcm5hbHMgPSB7XG4gIFJlYWN0Q3VycmVudERpc3BhdGNoZXI6IFJlYWN0Q3VycmVudERpc3BhdGNoZXIsXG4gIFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOiBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxcbiAgUmVhY3RDdXJyZW50T3duZXI6IFJlYWN0Q3VycmVudE93bmVyXG59O1xuXG57XG4gIFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSBSZWFjdERlYnVnQ3VycmVudEZyYW1lO1xuICBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdEN1cnJlbnRBY3RRdWV1ZSA9IFJlYWN0Q3VycmVudEFjdFF1ZXVlO1xufVxuXG4vLyBieSBjYWxscyB0byB0aGVzZSBtZXRob2RzIGJ5IGEgQmFiZWwgcGx1Z2luLlxuLy9cbi8vIEluIFBST0QgKG9yIGluIHBhY2thZ2VzIHdpdGhvdXQgYWNjZXNzIHRvIFJlYWN0IGludGVybmFscyksXG4vLyB0aGV5IGFyZSBsZWZ0IGFzIHRoZXkgYXJlIGluc3RlYWQuXG5cbmZ1bmN0aW9uIHdhcm4oZm9ybWF0KSB7XG4gIHtcbiAgICB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgfVxuXG4gICAgICBwcmludFdhcm5pbmcoJ3dhcm4nLCBmb3JtYXQsIGFyZ3MpO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZXJyb3IoZm9ybWF0KSB7XG4gIHtcbiAgICB7XG4gICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbjIgPiAxID8gX2xlbjIgLSAxIDogMCksIF9rZXkyID0gMTsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyIC0gMV0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgICAgfVxuXG4gICAgICBwcmludFdhcm5pbmcoJ2Vycm9yJywgZm9ybWF0LCBhcmdzKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJpbnRXYXJuaW5nKGxldmVsLCBmb3JtYXQsIGFyZ3MpIHtcbiAgLy8gV2hlbiBjaGFuZ2luZyB0aGlzIGxvZ2ljLCB5b3UgbWlnaHQgd2FudCB0byBhbHNvXG4gIC8vIHVwZGF0ZSBjb25zb2xlV2l0aFN0YWNrRGV2Lnd3dy5qcyBhcyB3ZWxsLlxuICB7XG4gICAgdmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSBSZWFjdFNoYXJlZEludGVybmFscy5SZWFjdERlYnVnQ3VycmVudEZyYW1lO1xuICAgIHZhciBzdGFjayA9IFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0U3RhY2tBZGRlbmR1bSgpO1xuXG4gICAgaWYgKHN0YWNrICE9PSAnJykge1xuICAgICAgZm9ybWF0ICs9ICclcyc7XG4gICAgICBhcmdzID0gYXJncy5jb25jYXQoW3N0YWNrXSk7XG4gICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvc2FmZS1zdHJpbmctY29lcmNpb25cblxuXG4gICAgdmFyIGFyZ3NXaXRoRm9ybWF0ID0gYXJncy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiBTdHJpbmcoaXRlbSk7XG4gICAgfSk7IC8vIENhcmVmdWw6IFJOIGN1cnJlbnRseSBkZXBlbmRzIG9uIHRoaXMgcHJlZml4XG5cbiAgICBhcmdzV2l0aEZvcm1hdC51bnNoaWZ0KCdXYXJuaW5nOiAnICsgZm9ybWF0KTsgLy8gV2UgaW50ZW50aW9uYWxseSBkb24ndCB1c2Ugc3ByZWFkIChvciAuYXBwbHkpIGRpcmVjdGx5IGJlY2F1c2UgaXRcbiAgICAvLyBicmVha3MgSUU5OiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzEzNjEwXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZ1xuXG4gICAgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5LmNhbGwoY29uc29sZVtsZXZlbF0sIGNvbnNvbGUsIGFyZ3NXaXRoRm9ybWF0KTtcbiAgfVxufVxuXG52YXIgZGlkV2FyblN0YXRlVXBkYXRlRm9yVW5tb3VudGVkQ29tcG9uZW50ID0ge307XG5cbmZ1bmN0aW9uIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCBjYWxsZXJOYW1lKSB7XG4gIHtcbiAgICB2YXIgX2NvbnN0cnVjdG9yID0gcHVibGljSW5zdGFuY2UuY29uc3RydWN0b3I7XG4gICAgdmFyIGNvbXBvbmVudE5hbWUgPSBfY29uc3RydWN0b3IgJiYgKF9jb25zdHJ1Y3Rvci5kaXNwbGF5TmFtZSB8fCBfY29uc3RydWN0b3IubmFtZSkgfHwgJ1JlYWN0Q2xhc3MnO1xuICAgIHZhciB3YXJuaW5nS2V5ID0gY29tcG9uZW50TmFtZSArIFwiLlwiICsgY2FsbGVyTmFtZTtcblxuICAgIGlmIChkaWRXYXJuU3RhdGVVcGRhdGVGb3JVbm1vdW50ZWRDb21wb25lbnRbd2FybmluZ0tleV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlcnJvcihcIkNhbid0IGNhbGwgJXMgb24gYSBjb21wb25lbnQgdGhhdCBpcyBub3QgeWV0IG1vdW50ZWQuIFwiICsgJ1RoaXMgaXMgYSBuby1vcCwgYnV0IGl0IG1pZ2h0IGluZGljYXRlIGEgYnVnIGluIHlvdXIgYXBwbGljYXRpb24uICcgKyAnSW5zdGVhZCwgYXNzaWduIHRvIGB0aGlzLnN0YXRlYCBkaXJlY3RseSBvciBkZWZpbmUgYSBgc3RhdGUgPSB7fTtgICcgKyAnY2xhc3MgcHJvcGVydHkgd2l0aCB0aGUgZGVzaXJlZCBzdGF0ZSBpbiB0aGUgJXMgY29tcG9uZW50LicsIGNhbGxlck5hbWUsIGNvbXBvbmVudE5hbWUpO1xuXG4gICAgZGlkV2FyblN0YXRlVXBkYXRlRm9yVW5tb3VudGVkQ29tcG9uZW50W3dhcm5pbmdLZXldID0gdHJ1ZTtcbiAgfVxufVxuLyoqXG4gKiBUaGlzIGlzIHRoZSBhYnN0cmFjdCBBUEkgZm9yIGFuIHVwZGF0ZSBxdWV1ZS5cbiAqL1xuXG5cbnZhciBSZWFjdE5vb3BVcGRhdGVRdWV1ZSA9IHtcbiAgLyoqXG4gICAqIENoZWNrcyB3aGV0aGVyIG9yIG5vdCB0aGlzIGNvbXBvc2l0ZSBjb21wb25lbnQgaXMgbW91bnRlZC5cbiAgICogQHBhcmFtIHtSZWFjdENsYXNzfSBwdWJsaWNJbnN0YW5jZSBUaGUgaW5zdGFuY2Ugd2Ugd2FudCB0byB0ZXN0LlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIG1vdW50ZWQsIGZhbHNlIG90aGVyd2lzZS5cbiAgICogQHByb3RlY3RlZFxuICAgKiBAZmluYWxcbiAgICovXG4gIGlzTW91bnRlZDogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBGb3JjZXMgYW4gdXBkYXRlLiBUaGlzIHNob3VsZCBvbmx5IGJlIGludm9rZWQgd2hlbiBpdCBpcyBrbm93biB3aXRoXG4gICAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICAgKlxuICAgKiBZb3UgbWF5IHdhbnQgdG8gY2FsbCB0aGlzIHdoZW4geW91IGtub3cgdGhhdCBzb21lIGRlZXBlciBhc3BlY3Qgb2YgdGhlXG4gICAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICAgKlxuICAgKiBUaGlzIHdpbGwgbm90IGludm9rZSBgc2hvdWxkQ29tcG9uZW50VXBkYXRlYCwgYnV0IGl0IHdpbGwgaW52b2tlXG4gICAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0gez9mdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIGFmdGVyIGNvbXBvbmVudCBpcyB1cGRhdGVkLlxuICAgKiBAcGFyYW0gez9zdHJpbmd9IGNhbGxlck5hbWUgbmFtZSBvZiB0aGUgY2FsbGluZyBmdW5jdGlvbiBpbiB0aGUgcHVibGljIEFQSS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlRm9yY2VVcGRhdGU6IGZ1bmN0aW9uIChwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2ssIGNhbGxlck5hbWUpIHtcbiAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ2ZvcmNlVXBkYXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBvZiB0aGUgc3RhdGUuIEFsd2F5cyB1c2UgdGhpcyBvciBgc2V0U3RhdGVgIHRvIG11dGF0ZSBzdGF0ZS5cbiAgICogWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICAgKlxuICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICAgKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBsZXRlU3RhdGUgTmV4dCBzdGF0ZS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBjb21wb25lbnQgaXMgdXBkYXRlZC5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBjYWxsZXJOYW1lIG5hbWUgb2YgdGhlIGNhbGxpbmcgZnVuY3Rpb24gaW4gdGhlIHB1YmxpYyBBUEkuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBjb21wbGV0ZVN0YXRlLCBjYWxsYmFjaywgY2FsbGVyTmFtZSkge1xuICAgIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCAncmVwbGFjZVN0YXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldHMgYSBzdWJzZXQgb2YgdGhlIHN0YXRlLiBUaGlzIG9ubHkgZXhpc3RzIGJlY2F1c2UgX3BlbmRpbmdTdGF0ZSBpc1xuICAgKiBpbnRlcm5hbC4gVGhpcyBwcm92aWRlcyBhIG1lcmdpbmcgc3RyYXRlZ3kgdGhhdCBpcyBub3QgYXZhaWxhYmxlIHRvIGRlZXBcbiAgICogcHJvcGVydGllcyB3aGljaCBpcyBjb25mdXNpbmcuIFRPRE86IEV4cG9zZSBwZW5kaW5nU3RhdGUgb3IgZG9uJ3QgdXNlIGl0XG4gICAqIGR1cmluZyB0aGUgbWVyZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7UmVhY3RDbGFzc30gcHVibGljSW5zdGFuY2UgVGhlIGluc3RhbmNlIHRoYXQgc2hvdWxkIHJlcmVuZGVyLlxuICAgKiBAcGFyYW0ge29iamVjdH0gcGFydGlhbFN0YXRlIE5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBzdGF0ZS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBjb21wb25lbnQgaXMgdXBkYXRlZC5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBOYW1lIG9mIHRoZSBjYWxsaW5nIGZ1bmN0aW9uIGluIHRoZSBwdWJsaWMgQVBJLlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGVucXVldWVTZXRTdGF0ZTogZnVuY3Rpb24gKHB1YmxpY0luc3RhbmNlLCBwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrLCBjYWxsZXJOYW1lKSB7XG4gICAgd2Fybk5vb3AocHVibGljSW5zdGFuY2UsICdzZXRTdGF0ZScpO1xuICB9XG59O1xuXG52YXIgYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcblxudmFyIGVtcHR5T2JqZWN0ID0ge307XG5cbntcbiAgT2JqZWN0LmZyZWV6ZShlbXB0eU9iamVjdCk7XG59XG4vKipcbiAqIEJhc2UgY2xhc3MgaGVscGVycyBmb3IgdGhlIHVwZGF0aW5nIHN0YXRlIG9mIGEgY29tcG9uZW50LlxuICovXG5cblxuZnVuY3Rpb24gQ29tcG9uZW50KHByb3BzLCBjb250ZXh0LCB1cGRhdGVyKSB7XG4gIHRoaXMucHJvcHMgPSBwcm9wcztcbiAgdGhpcy5jb250ZXh0ID0gY29udGV4dDsgLy8gSWYgYSBjb21wb25lbnQgaGFzIHN0cmluZyByZWZzLCB3ZSB3aWxsIGFzc2lnbiBhIGRpZmZlcmVudCBvYmplY3QgbGF0ZXIuXG5cbiAgdGhpcy5yZWZzID0gZW1wdHlPYmplY3Q7IC8vIFdlIGluaXRpYWxpemUgdGhlIGRlZmF1bHQgdXBkYXRlciBidXQgdGhlIHJlYWwgb25lIGdldHMgaW5qZWN0ZWQgYnkgdGhlXG4gIC8vIHJlbmRlcmVyLlxuXG4gIHRoaXMudXBkYXRlciA9IHVwZGF0ZXIgfHwgUmVhY3ROb29wVXBkYXRlUXVldWU7XG59XG5cbkNvbXBvbmVudC5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCA9IHt9O1xuLyoqXG4gKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBzdGF0ZS4gQWx3YXlzIHVzZSB0aGlzIHRvIG11dGF0ZVxuICogc3RhdGUuIFlvdSBzaG91bGQgdHJlYXQgYHRoaXMuc3RhdGVgIGFzIGltbXV0YWJsZS5cbiAqXG4gKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICogYWNjZXNzaW5nIGB0aGlzLnN0YXRlYCBhZnRlciBjYWxsaW5nIHRoaXMgbWV0aG9kIG1heSByZXR1cm4gdGhlIG9sZCB2YWx1ZS5cbiAqXG4gKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBjYWxscyB0byBgc2V0U3RhdGVgIHdpbGwgcnVuIHN5bmNocm9ub3VzbHksXG4gKiBhcyB0aGV5IG1heSBldmVudHVhbGx5IGJlIGJhdGNoZWQgdG9nZXRoZXIuICBZb3UgY2FuIHByb3ZpZGUgYW4gb3B0aW9uYWxcbiAqIGNhbGxiYWNrIHRoYXQgd2lsbCBiZSBleGVjdXRlZCB3aGVuIHRoZSBjYWxsIHRvIHNldFN0YXRlIGlzIGFjdHVhbGx5XG4gKiBjb21wbGV0ZWQuXG4gKlxuICogV2hlbiBhIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIHRvIHNldFN0YXRlLCBpdCB3aWxsIGJlIGNhbGxlZCBhdCBzb21lIHBvaW50IGluXG4gKiB0aGUgZnV0dXJlIChub3Qgc3luY2hyb25vdXNseSkuIEl0IHdpbGwgYmUgY2FsbGVkIHdpdGggdGhlIHVwIHRvIGRhdGVcbiAqIGNvbXBvbmVudCBhcmd1bWVudHMgKHN0YXRlLCBwcm9wcywgY29udGV4dCkuIFRoZXNlIHZhbHVlcyBjYW4gYmUgZGlmZmVyZW50XG4gKiBmcm9tIHRoaXMuKiBiZWNhdXNlIHlvdXIgZnVuY3Rpb24gbWF5IGJlIGNhbGxlZCBhZnRlciByZWNlaXZlUHJvcHMgYnV0IGJlZm9yZVxuICogc2hvdWxkQ29tcG9uZW50VXBkYXRlLCBhbmQgdGhpcyBuZXcgc3RhdGUsIHByb3BzLCBhbmQgY29udGV4dCB3aWxsIG5vdCB5ZXQgYmVcbiAqIGFzc2lnbmVkIHRvIHRoaXMuXG4gKlxuICogQHBhcmFtIHtvYmplY3R8ZnVuY3Rpb259IHBhcnRpYWxTdGF0ZSBOZXh0IHBhcnRpYWwgc3RhdGUgb3IgZnVuY3Rpb24gdG9cbiAqICAgICAgICBwcm9kdWNlIG5leHQgcGFydGlhbCBzdGF0ZSB0byBiZSBtZXJnZWQgd2l0aCBjdXJyZW50IHN0YXRlLlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBzdGF0ZSBpcyB1cGRhdGVkLlxuICogQGZpbmFsXG4gKiBAcHJvdGVjdGVkXG4gKi9cblxuQ29tcG9uZW50LnByb3RvdHlwZS5zZXRTdGF0ZSA9IGZ1bmN0aW9uIChwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrKSB7XG4gIGlmICh0eXBlb2YgcGFydGlhbFN0YXRlICE9PSAnb2JqZWN0JyAmJiB0eXBlb2YgcGFydGlhbFN0YXRlICE9PSAnZnVuY3Rpb24nICYmIHBhcnRpYWxTdGF0ZSAhPSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRTdGF0ZSguLi4pOiB0YWtlcyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzIHRvIHVwZGF0ZSBvciBhICcgKyAnZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLicpO1xuICB9XG5cbiAgdGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLCBwYXJ0aWFsU3RhdGUsIGNhbGxiYWNrLCAnc2V0U3RhdGUnKTtcbn07XG4vKipcbiAqIEZvcmNlcyBhbiB1cGRhdGUuIFRoaXMgc2hvdWxkIG9ubHkgYmUgaW52b2tlZCB3aGVuIGl0IGlzIGtub3duIHdpdGhcbiAqIGNlcnRhaW50eSB0aGF0IHdlIGFyZSAqKm5vdCoqIGluIGEgRE9NIHRyYW5zYWN0aW9uLlxuICpcbiAqIFlvdSBtYXkgd2FudCB0byBjYWxsIHRoaXMgd2hlbiB5b3Uga25vdyB0aGF0IHNvbWUgZGVlcGVyIGFzcGVjdCBvZiB0aGVcbiAqIGNvbXBvbmVudCdzIHN0YXRlIGhhcyBjaGFuZ2VkIGJ1dCBgc2V0U3RhdGVgIHdhcyBub3QgY2FsbGVkLlxuICpcbiAqIFRoaXMgd2lsbCBub3QgaW52b2tlIGBzaG91bGRDb21wb25lbnRVcGRhdGVgLCBidXQgaXQgd2lsbCBpbnZva2VcbiAqIGBjb21wb25lbnRXaWxsVXBkYXRlYCBhbmQgYGNvbXBvbmVudERpZFVwZGF0ZWAuXG4gKlxuICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciB1cGRhdGUgaXMgY29tcGxldGUuXG4gKiBAZmluYWxcbiAqIEBwcm90ZWN0ZWRcbiAqL1xuXG5cbkNvbXBvbmVudC5wcm90b3R5cGUuZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgdGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLCBjYWxsYmFjaywgJ2ZvcmNlVXBkYXRlJyk7XG59O1xuLyoqXG4gKiBEZXByZWNhdGVkIEFQSXMuIFRoZXNlIEFQSXMgdXNlZCB0byBleGlzdCBvbiBjbGFzc2ljIFJlYWN0IGNsYXNzZXMgYnV0IHNpbmNlXG4gKiB3ZSB3b3VsZCBsaWtlIHRvIGRlcHJlY2F0ZSB0aGVtLCB3ZSdyZSBub3QgZ29pbmcgdG8gbW92ZSB0aGVtIG92ZXIgdG8gdGhpc1xuICogbW9kZXJuIGJhc2UgY2xhc3MuIEluc3RlYWQsIHdlIGRlZmluZSBhIGdldHRlciB0aGF0IHdhcm5zIGlmIGl0J3MgYWNjZXNzZWQuXG4gKi9cblxuXG57XG4gIHZhciBkZXByZWNhdGVkQVBJcyA9IHtcbiAgICBpc01vdW50ZWQ6IFsnaXNNb3VudGVkJywgJ0luc3RlYWQsIG1ha2Ugc3VyZSB0byBjbGVhbiB1cCBzdWJzY3JpcHRpb25zIGFuZCBwZW5kaW5nIHJlcXVlc3RzIGluICcgKyAnY29tcG9uZW50V2lsbFVubW91bnQgdG8gcHJldmVudCBtZW1vcnkgbGVha3MuJ10sXG4gICAgcmVwbGFjZVN0YXRlOiBbJ3JlcGxhY2VTdGF0ZScsICdSZWZhY3RvciB5b3VyIGNvZGUgdG8gdXNlIHNldFN0YXRlIGluc3RlYWQgKHNlZSAnICsgJ2h0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMzIzNikuJ11cbiAgfTtcblxuICB2YXIgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUsIGluZm8pIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29tcG9uZW50LnByb3RvdHlwZSwgbWV0aG9kTmFtZSwge1xuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdhcm4oJyVzKC4uLikgaXMgZGVwcmVjYXRlZCBpbiBwbGFpbiBKYXZhU2NyaXB0IFJlYWN0IGNsYXNzZXMuICVzJywgaW5mb1swXSwgaW5mb1sxXSk7XG5cbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBmb3IgKHZhciBmbk5hbWUgaW4gZGVwcmVjYXRlZEFQSXMpIHtcbiAgICBpZiAoZGVwcmVjYXRlZEFQSXMuaGFzT3duUHJvcGVydHkoZm5OYW1lKSkge1xuICAgICAgZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nKGZuTmFtZSwgZGVwcmVjYXRlZEFQSXNbZm5OYW1lXSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIENvbXBvbmVudER1bW15KCkge31cblxuQ29tcG9uZW50RHVtbXkucHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcbi8qKlxuICogQ29udmVuaWVuY2UgY29tcG9uZW50IHdpdGggZGVmYXVsdCBzaGFsbG93IGVxdWFsaXR5IGNoZWNrIGZvciBzQ1UuXG4gKi9cblxuZnVuY3Rpb24gUHVyZUNvbXBvbmVudChwcm9wcywgY29udGV4dCwgdXBkYXRlcikge1xuICB0aGlzLnByb3BzID0gcHJvcHM7XG4gIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7IC8vIElmIGEgY29tcG9uZW50IGhhcyBzdHJpbmcgcmVmcywgd2Ugd2lsbCBhc3NpZ24gYSBkaWZmZXJlbnQgb2JqZWN0IGxhdGVyLlxuXG4gIHRoaXMucmVmcyA9IGVtcHR5T2JqZWN0O1xuICB0aGlzLnVwZGF0ZXIgPSB1cGRhdGVyIHx8IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlO1xufVxuXG52YXIgcHVyZUNvbXBvbmVudFByb3RvdHlwZSA9IFB1cmVDb21wb25lbnQucHJvdG90eXBlID0gbmV3IENvbXBvbmVudER1bW15KCk7XG5wdXJlQ29tcG9uZW50UHJvdG90eXBlLmNvbnN0cnVjdG9yID0gUHVyZUNvbXBvbmVudDsgLy8gQXZvaWQgYW4gZXh0cmEgcHJvdG90eXBlIGp1bXAgZm9yIHRoZXNlIG1ldGhvZHMuXG5cbmFzc2lnbihwdXJlQ29tcG9uZW50UHJvdG90eXBlLCBDb21wb25lbnQucHJvdG90eXBlKTtcbnB1cmVDb21wb25lbnRQcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQgPSB0cnVlO1xuXG4vLyBhbiBpbW11dGFibGUgb2JqZWN0IHdpdGggYSBzaW5nbGUgbXV0YWJsZSB2YWx1ZVxuZnVuY3Rpb24gY3JlYXRlUmVmKCkge1xuICB2YXIgcmVmT2JqZWN0ID0ge1xuICAgIGN1cnJlbnQ6IG51bGxcbiAgfTtcblxuICB7XG4gICAgT2JqZWN0LnNlYWwocmVmT2JqZWN0KTtcbiAgfVxuXG4gIHJldHVybiByZWZPYmplY3Q7XG59XG5cbnZhciBpc0FycmF5SW1wbCA9IEFycmF5LmlzQXJyYXk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZWRlY2xhcmVcblxuZnVuY3Rpb24gaXNBcnJheShhKSB7XG4gIHJldHVybiBpc0FycmF5SW1wbChhKTtcbn1cblxuLypcbiAqIFRoZSBgJycgKyB2YWx1ZWAgcGF0dGVybiAodXNlZCBpbiBpbiBwZXJmLXNlbnNpdGl2ZSBjb2RlKSB0aHJvd3MgZm9yIFN5bWJvbFxuICogYW5kIFRlbXBvcmFsLiogdHlwZXMuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvcHVsbC8yMjA2NC5cbiAqXG4gKiBUaGUgZnVuY3Rpb25zIGluIHRoaXMgbW9kdWxlIHdpbGwgdGhyb3cgYW4gZWFzaWVyLXRvLXVuZGVyc3RhbmQsXG4gKiBlYXNpZXItdG8tZGVidWcgZXhjZXB0aW9uIHdpdGggYSBjbGVhciBlcnJvcnMgbWVzc2FnZSBtZXNzYWdlIGV4cGxhaW5pbmcgdGhlXG4gKiBwcm9ibGVtLiAoSW5zdGVhZCBvZiBhIGNvbmZ1c2luZyBleGNlcHRpb24gdGhyb3duIGluc2lkZSB0aGUgaW1wbGVtZW50YXRpb25cbiAqIG9mIHRoZSBgdmFsdWVgIG9iamVjdCkuXG4gKi9cbi8vICRGbG93Rml4TWUgb25seSBjYWxsZWQgaW4gREVWLCBzbyB2b2lkIHJldHVybiBpcyBub3QgcG9zc2libGUuXG5mdW5jdGlvbiB0eXBlTmFtZSh2YWx1ZSkge1xuICB7XG4gICAgLy8gdG9TdHJpbmdUYWcgaXMgbmVlZGVkIGZvciBuYW1lc3BhY2VkIHR5cGVzIGxpa2UgVGVtcG9yYWwuSW5zdGFudFxuICAgIHZhciBoYXNUb1N0cmluZ1RhZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLnRvU3RyaW5nVGFnO1xuICAgIHZhciB0eXBlID0gaGFzVG9TdHJpbmdUYWcgJiYgdmFsdWVbU3ltYm9sLnRvU3RyaW5nVGFnXSB8fCB2YWx1ZS5jb25zdHJ1Y3Rvci5uYW1lIHx8ICdPYmplY3QnO1xuICAgIHJldHVybiB0eXBlO1xuICB9XG59IC8vICRGbG93Rml4TWUgb25seSBjYWxsZWQgaW4gREVWLCBzbyB2b2lkIHJldHVybiBpcyBub3QgcG9zc2libGUuXG5cblxuZnVuY3Rpb24gd2lsbENvZXJjaW9uVGhyb3codmFsdWUpIHtcbiAge1xuICAgIHRyeSB7XG4gICAgICB0ZXN0U3RyaW5nQ29lcmNpb24odmFsdWUpO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0ZXN0U3RyaW5nQ29lcmNpb24odmFsdWUpIHtcbiAgLy8gSWYgeW91IGVuZGVkIHVwIGhlcmUgYnkgZm9sbG93aW5nIGFuIGV4Y2VwdGlvbiBjYWxsIHN0YWNrLCBoZXJlJ3Mgd2hhdCdzXG4gIC8vIGhhcHBlbmVkOiB5b3Ugc3VwcGxpZWQgYW4gb2JqZWN0IG9yIHN5bWJvbCB2YWx1ZSB0byBSZWFjdCAoYXMgYSBwcm9wLCBrZXksXG4gIC8vIERPTSBhdHRyaWJ1dGUsIENTUyBwcm9wZXJ0eSwgc3RyaW5nIHJlZiwgZXRjLikgYW5kIHdoZW4gUmVhY3QgdHJpZWQgdG9cbiAgLy8gY29lcmNlIGl0IHRvIGEgc3RyaW5nIHVzaW5nIGAnJyArIHZhbHVlYCwgYW4gZXhjZXB0aW9uIHdhcyB0aHJvd24uXG4gIC8vXG4gIC8vIFRoZSBtb3N0IGNvbW1vbiB0eXBlcyB0aGF0IHdpbGwgY2F1c2UgdGhpcyBleGNlcHRpb24gYXJlIGBTeW1ib2xgIGluc3RhbmNlc1xuICAvLyBhbmQgVGVtcG9yYWwgb2JqZWN0cyBsaWtlIGBUZW1wb3JhbC5JbnN0YW50YC4gQnV0IGFueSBvYmplY3QgdGhhdCBoYXMgYVxuICAvLyBgdmFsdWVPZmAgb3IgYFtTeW1ib2wudG9QcmltaXRpdmVdYCBtZXRob2QgdGhhdCB0aHJvd3Mgd2lsbCBhbHNvIGNhdXNlIHRoaXNcbiAgLy8gZXhjZXB0aW9uLiAoTGlicmFyeSBhdXRob3JzIGRvIHRoaXMgdG8gcHJldmVudCB1c2VycyBmcm9tIHVzaW5nIGJ1aWx0LWluXG4gIC8vIG51bWVyaWMgb3BlcmF0b3JzIGxpa2UgYCtgIG9yIGNvbXBhcmlzb24gb3BlcmF0b3JzIGxpa2UgYD49YCBiZWNhdXNlIGN1c3RvbVxuICAvLyBtZXRob2RzIGFyZSBuZWVkZWQgdG8gcGVyZm9ybSBhY2N1cmF0ZSBhcml0aG1ldGljIG9yIGNvbXBhcmlzb24uKVxuICAvL1xuICAvLyBUbyBmaXggdGhlIHByb2JsZW0sIGNvZXJjZSB0aGlzIG9iamVjdCBvciBzeW1ib2wgdmFsdWUgdG8gYSBzdHJpbmcgYmVmb3JlXG4gIC8vIHBhc3NpbmcgaXQgdG8gUmVhY3QuIFRoZSBtb3N0IHJlbGlhYmxlIHdheSBpcyB1c3VhbGx5IGBTdHJpbmcodmFsdWUpYC5cbiAgLy9cbiAgLy8gVG8gZmluZCB3aGljaCB2YWx1ZSBpcyB0aHJvd2luZywgY2hlY2sgdGhlIGJyb3dzZXIgb3IgZGVidWdnZXIgY29uc29sZS5cbiAgLy8gQmVmb3JlIHRoaXMgZXhjZXB0aW9uIHdhcyB0aHJvd24sIHRoZXJlIHNob3VsZCBiZSBgY29uc29sZS5lcnJvcmAgb3V0cHV0XG4gIC8vIHRoYXQgc2hvd3MgdGhlIHR5cGUgKFN5bWJvbCwgVGVtcG9yYWwuUGxhaW5EYXRlLCBldGMuKSB0aGF0IGNhdXNlZCB0aGVcbiAgLy8gcHJvYmxlbSBhbmQgaG93IHRoYXQgdHlwZSB3YXMgdXNlZDoga2V5LCBhdHJyaWJ1dGUsIGlucHV0IHZhbHVlIHByb3AsIGV0Yy5cbiAgLy8gSW4gbW9zdCBjYXNlcywgdGhpcyBjb25zb2xlIG91dHB1dCBhbHNvIHNob3dzIHRoZSBjb21wb25lbnQgYW5kIGl0c1xuICAvLyBhbmNlc3RvciBjb21wb25lbnRzIHdoZXJlIHRoZSBleGNlcHRpb24gaGFwcGVuZWQuXG4gIC8vXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1pbnRlcm5hbC9zYWZlLXN0cmluZy1jb2VyY2lvblxuICByZXR1cm4gJycgKyB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNoZWNrS2V5U3RyaW5nQ29lcmNpb24odmFsdWUpIHtcbiAge1xuICAgIGlmICh3aWxsQ29lcmNpb25UaHJvdyh2YWx1ZSkpIHtcbiAgICAgIGVycm9yKCdUaGUgcHJvdmlkZWQga2V5IGlzIGFuIHVuc3VwcG9ydGVkIHR5cGUgJXMuJyArICcgVGhpcyB2YWx1ZSBtdXN0IGJlIGNvZXJjZWQgdG8gYSBzdHJpbmcgYmVmb3JlIGJlZm9yZSB1c2luZyBpdCBoZXJlLicsIHR5cGVOYW1lKHZhbHVlKSk7XG5cbiAgICAgIHJldHVybiB0ZXN0U3RyaW5nQ29lcmNpb24odmFsdWUpOyAvLyB0aHJvdyAodG8gaGVscCBjYWxsZXJzIGZpbmQgdHJvdWJsZXNob290aW5nIGNvbW1lbnRzKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRXcmFwcGVkTmFtZShvdXRlclR5cGUsIGlubmVyVHlwZSwgd3JhcHBlck5hbWUpIHtcbiAgdmFyIGRpc3BsYXlOYW1lID0gb3V0ZXJUeXBlLmRpc3BsYXlOYW1lO1xuXG4gIGlmIChkaXNwbGF5TmFtZSkge1xuICAgIHJldHVybiBkaXNwbGF5TmFtZTtcbiAgfVxuXG4gIHZhciBmdW5jdGlvbk5hbWUgPSBpbm5lclR5cGUuZGlzcGxheU5hbWUgfHwgaW5uZXJUeXBlLm5hbWUgfHwgJyc7XG4gIHJldHVybiBmdW5jdGlvbk5hbWUgIT09ICcnID8gd3JhcHBlck5hbWUgKyBcIihcIiArIGZ1bmN0aW9uTmFtZSArIFwiKVwiIDogd3JhcHBlck5hbWU7XG59IC8vIEtlZXAgaW4gc3luYyB3aXRoIHJlYWN0LXJlY29uY2lsZXIvZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlclxuXG5cbmZ1bmN0aW9uIGdldENvbnRleHROYW1lKHR5cGUpIHtcbiAgcmV0dXJuIHR5cGUuZGlzcGxheU5hbWUgfHwgJ0NvbnRleHQnO1xufSAvLyBOb3RlIHRoYXQgdGhlIHJlY29uY2lsZXIgcGFja2FnZSBzaG91bGQgZ2VuZXJhbGx5IHByZWZlciB0byB1c2UgZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlcigpIGluc3RlYWQuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUpIHtcbiAgaWYgKHR5cGUgPT0gbnVsbCkge1xuICAgIC8vIEhvc3Qgcm9vdCwgdGV4dCBub2RlIG9yIGp1c3QgaW52YWxpZCB0eXBlLlxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAge1xuICAgIGlmICh0eXBlb2YgdHlwZS50YWcgPT09ICdudW1iZXInKSB7XG4gICAgICBlcnJvcignUmVjZWl2ZWQgYW4gdW5leHBlY3RlZCBvYmplY3QgaW4gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKCkuICcgKyAnVGhpcyBpcyBsaWtlbHkgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBSRUFDVF9GUkFHTUVOVF9UWVBFOlxuICAgICAgcmV0dXJuICdGcmFnbWVudCc7XG5cbiAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgcmV0dXJuICdQb3J0YWwnO1xuXG4gICAgY2FzZSBSRUFDVF9QUk9GSUxFUl9UWVBFOlxuICAgICAgcmV0dXJuICdQcm9maWxlcic7XG5cbiAgICBjYXNlIFJFQUNUX1NUUklDVF9NT0RFX1RZUEU6XG4gICAgICByZXR1cm4gJ1N0cmljdE1vZGUnO1xuXG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuICdTdXNwZW5zZSc7XG5cbiAgICBjYXNlIFJFQUNUX1NVU1BFTlNFX0xJU1RfVFlQRTpcbiAgICAgIHJldHVybiAnU3VzcGVuc2VMaXN0JztcblxuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0Jykge1xuICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9DT05URVhUX1RZUEU6XG4gICAgICAgIHZhciBjb250ZXh0ID0gdHlwZTtcbiAgICAgICAgcmV0dXJuIGdldENvbnRleHROYW1lKGNvbnRleHQpICsgJy5Db25zdW1lcic7XG5cbiAgICAgIGNhc2UgUkVBQ1RfUFJPVklERVJfVFlQRTpcbiAgICAgICAgdmFyIHByb3ZpZGVyID0gdHlwZTtcbiAgICAgICAgcmV0dXJuIGdldENvbnRleHROYW1lKHByb3ZpZGVyLl9jb250ZXh0KSArICcuUHJvdmlkZXInO1xuXG4gICAgICBjYXNlIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEU6XG4gICAgICAgIHJldHVybiBnZXRXcmFwcGVkTmFtZSh0eXBlLCB0eXBlLnJlbmRlciwgJ0ZvcndhcmRSZWYnKTtcblxuICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgIHZhciBvdXRlck5hbWUgPSB0eXBlLmRpc3BsYXlOYW1lIHx8IG51bGw7XG5cbiAgICAgICAgaWYgKG91dGVyTmFtZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBvdXRlck5hbWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZUZyb21UeXBlKHR5cGUudHlwZSkgfHwgJ01lbW8nO1xuXG4gICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBsYXp5Q29tcG9uZW50ID0gdHlwZTtcbiAgICAgICAgICB2YXIgcGF5bG9hZCA9IGxhenlDb21wb25lbnQuX3BheWxvYWQ7XG4gICAgICAgICAgdmFyIGluaXQgPSBsYXp5Q29tcG9uZW50Ll9pbml0O1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoaW5pdChwYXlsb2FkKSk7XG4gICAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1mYWxsdGhyb3VnaFxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuXG52YXIgUkVTRVJWRURfUFJPUFMgPSB7XG4gIGtleTogdHJ1ZSxcbiAgcmVmOiB0cnVlLFxuICBfX3NlbGY6IHRydWUsXG4gIF9fc291cmNlOiB0cnVlXG59O1xudmFyIHNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duLCBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93biwgZGlkV2FybkFib3V0U3RyaW5nUmVmcztcblxue1xuICBkaWRXYXJuQWJvdXRTdHJpbmdSZWZzID0ge307XG59XG5cbmZ1bmN0aW9uIGhhc1ZhbGlkUmVmKGNvbmZpZykge1xuICB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCAncmVmJykpIHtcbiAgICAgIHZhciBnZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNvbmZpZywgJ3JlZicpLmdldDtcblxuICAgICAgaWYgKGdldHRlciAmJiBnZXR0ZXIuaXNSZWFjdFdhcm5pbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb25maWcucmVmICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGhhc1ZhbGlkS2V5KGNvbmZpZykge1xuICB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwoY29uZmlnLCAna2V5JykpIHtcbiAgICAgIHZhciBnZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGNvbmZpZywgJ2tleScpLmdldDtcblxuICAgICAgaWYgKGdldHRlciAmJiBnZXR0ZXIuaXNSZWFjdFdhcm5pbmcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjb25maWcua2V5ICE9PSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSkge1xuICB2YXIgd2FybkFib3V0QWNjZXNzaW5nS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgIHtcbiAgICAgIGlmICghc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24pIHtcbiAgICAgICAgc3BlY2lhbFByb3BLZXlXYXJuaW5nU2hvd24gPSB0cnVlO1xuXG4gICAgICAgIGVycm9yKCclczogYGtleWAgaXMgbm90IGEgcHJvcC4gVHJ5aW5nIHRvIGFjY2VzcyBpdCB3aWxsIHJlc3VsdCAnICsgJ2luIGB1bmRlZmluZWRgIGJlaW5nIHJldHVybmVkLiBJZiB5b3UgbmVlZCB0byBhY2Nlc3MgdGhlIHNhbWUgJyArICd2YWx1ZSB3aXRoaW4gdGhlIGNoaWxkIGNvbXBvbmVudCwgeW91IHNob3VsZCBwYXNzIGl0IGFzIGEgZGlmZmVyZW50ICcgKyAncHJvcC4gKGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9zcGVjaWFsLXByb3BzKScsIGRpc3BsYXlOYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgd2FybkFib3V0QWNjZXNzaW5nS2V5LmlzUmVhY3RXYXJuaW5nID0gdHJ1ZTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3BzLCAna2V5Jywge1xuICAgIGdldDogd2FybkFib3V0QWNjZXNzaW5nS2V5LFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZGVmaW5lUmVmUHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKSB7XG4gIHZhciB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYgPSBmdW5jdGlvbiAoKSB7XG4gICAge1xuICAgICAgaWYgKCFzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93bikge1xuICAgICAgICBzcGVjaWFsUHJvcFJlZldhcm5pbmdTaG93biA9IHRydWU7XG5cbiAgICAgICAgZXJyb3IoJyVzOiBgcmVmYCBpcyBub3QgYSBwcm9wLiBUcnlpbmcgdG8gYWNjZXNzIGl0IHdpbGwgcmVzdWx0ICcgKyAnaW4gYHVuZGVmaW5lZGAgYmVpbmcgcmV0dXJuZWQuIElmIHlvdSBuZWVkIHRvIGFjY2VzcyB0aGUgc2FtZSAnICsgJ3ZhbHVlIHdpdGhpbiB0aGUgY2hpbGQgY29tcG9uZW50LCB5b3Ugc2hvdWxkIHBhc3MgaXQgYXMgYSBkaWZmZXJlbnQgJyArICdwcm9wLiAoaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3NwZWNpYWwtcHJvcHMpJywgZGlzcGxheU5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYuaXNSZWFjdFdhcm5pbmcgPSB0cnVlO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvcHMsICdyZWYnLCB7XG4gICAgZ2V0OiB3YXJuQWJvdXRBY2Nlc3NpbmdSZWYsXG4gICAgY29uZmlndXJhYmxlOiB0cnVlXG4gIH0pO1xufVxuXG5mdW5jdGlvbiB3YXJuSWZTdHJpbmdSZWZDYW5ub3RCZUF1dG9Db252ZXJ0ZWQoY29uZmlnKSB7XG4gIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5yZWYgPT09ICdzdHJpbmcnICYmIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgJiYgY29uZmlnLl9fc2VsZiAmJiBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50LnN0YXRlTm9kZSAhPT0gY29uZmlnLl9fc2VsZikge1xuICAgICAgdmFyIGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC50eXBlKTtcblxuICAgICAgaWYgKCFkaWRXYXJuQWJvdXRTdHJpbmdSZWZzW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgIGVycm9yKCdDb21wb25lbnQgXCIlc1wiIGNvbnRhaW5zIHRoZSBzdHJpbmcgcmVmIFwiJXNcIi4gJyArICdTdXBwb3J0IGZvciBzdHJpbmcgcmVmcyB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gJyArICdUaGlzIGNhc2UgY2Fubm90IGJlIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIHRvIGFuIGFycm93IGZ1bmN0aW9uLiAnICsgJ1dlIGFzayB5b3UgdG8gbWFudWFsbHkgZml4IHRoaXMgY2FzZSBieSB1c2luZyB1c2VSZWYoKSBvciBjcmVhdGVSZWYoKSBpbnN0ZWFkLiAnICsgJ0xlYXJuIG1vcmUgYWJvdXQgdXNpbmcgcmVmcyBzYWZlbHkgaGVyZTogJyArICdodHRwczovL3JlYWN0anMub3JnL2xpbmsvc3RyaWN0LW1vZGUtc3RyaW5nLXJlZicsIGNvbXBvbmVudE5hbWUsIGNvbmZpZy5yZWYpO1xuXG4gICAgICAgIGRpZFdhcm5BYm91dFN0cmluZ1JlZnNbY29tcG9uZW50TmFtZV0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBGYWN0b3J5IG1ldGhvZCB0byBjcmVhdGUgYSBuZXcgUmVhY3QgZWxlbWVudC4gVGhpcyBubyBsb25nZXIgYWRoZXJlcyB0b1xuICogdGhlIGNsYXNzIHBhdHRlcm4sIHNvIGRvIG5vdCB1c2UgbmV3IHRvIGNhbGwgaXQuIEFsc28sIGluc3RhbmNlb2YgY2hlY2tcbiAqIHdpbGwgbm90IHdvcmsuIEluc3RlYWQgdGVzdCAkJHR5cGVvZiBmaWVsZCBhZ2FpbnN0IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSB0byBjaGVja1xuICogaWYgc29tZXRoaW5nIGlzIGEgUmVhY3QgRWxlbWVudC5cbiAqXG4gKiBAcGFyYW0geyp9IHR5cGVcbiAqIEBwYXJhbSB7Kn0gcHJvcHNcbiAqIEBwYXJhbSB7Kn0ga2V5XG4gKiBAcGFyYW0ge3N0cmluZ3xvYmplY3R9IHJlZlxuICogQHBhcmFtIHsqfSBvd25lclxuICogQHBhcmFtIHsqfSBzZWxmIEEgKnRlbXBvcmFyeSogaGVscGVyIHRvIGRldGVjdCBwbGFjZXMgd2hlcmUgYHRoaXNgIGlzXG4gKiBkaWZmZXJlbnQgZnJvbSB0aGUgYG93bmVyYCB3aGVuIFJlYWN0LmNyZWF0ZUVsZW1lbnQgaXMgY2FsbGVkLCBzbyB0aGF0IHdlXG4gKiBjYW4gd2Fybi4gV2Ugd2FudCB0byBnZXQgcmlkIG9mIG93bmVyIGFuZCByZXBsYWNlIHN0cmluZyBgcmVmYHMgd2l0aCBhcnJvd1xuICogZnVuY3Rpb25zLCBhbmQgYXMgbG9uZyBhcyBgdGhpc2AgYW5kIG93bmVyIGFyZSB0aGUgc2FtZSwgdGhlcmUgd2lsbCBiZSBub1xuICogY2hhbmdlIGluIGJlaGF2aW9yLlxuICogQHBhcmFtIHsqfSBzb3VyY2UgQW4gYW5ub3RhdGlvbiBvYmplY3QgKGFkZGVkIGJ5IGEgdHJhbnNwaWxlciBvciBvdGhlcndpc2UpXG4gKiBpbmRpY2F0aW5nIGZpbGVuYW1lLCBsaW5lIG51bWJlciwgYW5kL29yIG90aGVyIGluZm9ybWF0aW9uLlxuICogQGludGVybmFsXG4gKi9cblxuXG52YXIgUmVhY3RFbGVtZW50ID0gZnVuY3Rpb24gKHR5cGUsIGtleSwgcmVmLCBzZWxmLCBzb3VyY2UsIG93bmVyLCBwcm9wcykge1xuICB2YXIgZWxlbWVudCA9IHtcbiAgICAvLyBUaGlzIHRhZyBhbGxvd3MgdXMgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyBhcyBhIFJlYWN0IEVsZW1lbnRcbiAgICAkJHR5cGVvZjogUkVBQ1RfRUxFTUVOVF9UWVBFLFxuICAgIC8vIEJ1aWx0LWluIHByb3BlcnRpZXMgdGhhdCBiZWxvbmcgb24gdGhlIGVsZW1lbnRcbiAgICB0eXBlOiB0eXBlLFxuICAgIGtleToga2V5LFxuICAgIHJlZjogcmVmLFxuICAgIHByb3BzOiBwcm9wcyxcbiAgICAvLyBSZWNvcmQgdGhlIGNvbXBvbmVudCByZXNwb25zaWJsZSBmb3IgY3JlYXRpbmcgdGhpcyBlbGVtZW50LlxuICAgIF9vd25lcjogb3duZXJcbiAgfTtcblxuICB7XG4gICAgLy8gVGhlIHZhbGlkYXRpb24gZmxhZyBpcyBjdXJyZW50bHkgbXV0YXRpdmUuIFdlIHB1dCBpdCBvblxuICAgIC8vIGFuIGV4dGVybmFsIGJhY2tpbmcgc3RvcmUgc28gdGhhdCB3ZSBjYW4gZnJlZXplIHRoZSB3aG9sZSBvYmplY3QuXG4gICAgLy8gVGhpcyBjYW4gYmUgcmVwbGFjZWQgd2l0aCBhIFdlYWtNYXAgb25jZSB0aGV5IGFyZSBpbXBsZW1lbnRlZCBpblxuICAgIC8vIGNvbW1vbmx5IHVzZWQgZGV2ZWxvcG1lbnQgZW52aXJvbm1lbnRzLlxuICAgIGVsZW1lbnQuX3N0b3JlID0ge307IC8vIFRvIG1ha2UgY29tcGFyaW5nIFJlYWN0RWxlbWVudHMgZWFzaWVyIGZvciB0ZXN0aW5nIHB1cnBvc2VzLCB3ZSBtYWtlXG4gICAgLy8gdGhlIHZhbGlkYXRpb24gZmxhZyBub24tZW51bWVyYWJsZSAod2hlcmUgcG9zc2libGUsIHdoaWNoIHNob3VsZFxuICAgIC8vIGluY2x1ZGUgZXZlcnkgZW52aXJvbm1lbnQgd2UgcnVuIHRlc3RzIGluKSwgc28gdGhlIHRlc3QgZnJhbWV3b3JrXG4gICAgLy8gaWdub3JlcyBpdC5cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50Ll9zdG9yZSwgJ3ZhbGlkYXRlZCcsIHtcbiAgICAgIGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IGZhbHNlXG4gICAgfSk7IC8vIHNlbGYgYW5kIHNvdXJjZSBhcmUgREVWIG9ubHkgcHJvcGVydGllcy5cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlbGVtZW50LCAnX3NlbGYnLCB7XG4gICAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICB2YWx1ZTogc2VsZlxuICAgIH0pOyAvLyBUd28gZWxlbWVudHMgY3JlYXRlZCBpbiB0d28gZGlmZmVyZW50IHBsYWNlcyBzaG91bGQgYmUgY29uc2lkZXJlZFxuICAgIC8vIGVxdWFsIGZvciB0ZXN0aW5nIHB1cnBvc2VzIGFuZCB0aGVyZWZvcmUgd2UgaGlkZSBpdCBmcm9tIGVudW1lcmF0aW9uLlxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsZW1lbnQsICdfc291cmNlJywge1xuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IGZhbHNlLFxuICAgICAgdmFsdWU6IHNvdXJjZVxuICAgIH0pO1xuXG4gICAgaWYgKE9iamVjdC5mcmVlemUpIHtcbiAgICAgIE9iamVjdC5mcmVlemUoZWxlbWVudC5wcm9wcyk7XG4gICAgICBPYmplY3QuZnJlZXplKGVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufTtcbi8qKlxuICogQ3JlYXRlIGFuZCByZXR1cm4gYSBuZXcgUmVhY3RFbGVtZW50IG9mIHRoZSBnaXZlbiB0eXBlLlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNjcmVhdGVlbGVtZW50XG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCh0eXBlLCBjb25maWcsIGNoaWxkcmVuKSB7XG4gIHZhciBwcm9wTmFtZTsgLy8gUmVzZXJ2ZWQgbmFtZXMgYXJlIGV4dHJhY3RlZFxuXG4gIHZhciBwcm9wcyA9IHt9O1xuICB2YXIga2V5ID0gbnVsbDtcbiAgdmFyIHJlZiA9IG51bGw7XG4gIHZhciBzZWxmID0gbnVsbDtcbiAgdmFyIHNvdXJjZSA9IG51bGw7XG5cbiAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgaWYgKGhhc1ZhbGlkUmVmKGNvbmZpZykpIHtcbiAgICAgIHJlZiA9IGNvbmZpZy5yZWY7XG5cbiAgICAgIHtcbiAgICAgICAgd2FybklmU3RyaW5nUmVmQ2Fubm90QmVBdXRvQ29udmVydGVkKGNvbmZpZyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGhhc1ZhbGlkS2V5KGNvbmZpZykpIHtcbiAgICAgIHtcbiAgICAgICAgY2hlY2tLZXlTdHJpbmdDb2VyY2lvbihjb25maWcua2V5KTtcbiAgICAgIH1cblxuICAgICAga2V5ID0gJycgKyBjb25maWcua2V5O1xuICAgIH1cblxuICAgIHNlbGYgPSBjb25maWcuX19zZWxmID09PSB1bmRlZmluZWQgPyBudWxsIDogY29uZmlnLl9fc2VsZjtcbiAgICBzb3VyY2UgPSBjb25maWcuX19zb3VyY2UgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjb25maWcuX19zb3VyY2U7IC8vIFJlbWFpbmluZyBwcm9wZXJ0aWVzIGFyZSBhZGRlZCB0byBhIG5ldyBwcm9wcyBvYmplY3RcblxuICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJiAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgICB9XG4gICAgfVxuICB9IC8vIENoaWxkcmVuIGNhbiBiZSBtb3JlIHRoYW4gb25lIGFyZ3VtZW50LCBhbmQgdGhvc2UgYXJlIHRyYW5zZmVycmVkIG9udG9cbiAgLy8gdGhlIG5ld2x5IGFsbG9jYXRlZCBwcm9wcyBvYmplY3QuXG5cblxuICB2YXIgY2hpbGRyZW5MZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoIC0gMjtcblxuICBpZiAoY2hpbGRyZW5MZW5ndGggPT09IDEpIHtcbiAgICBwcm9wcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICB9IGVsc2UgaWYgKGNoaWxkcmVuTGVuZ3RoID4gMSkge1xuICAgIHZhciBjaGlsZEFycmF5ID0gQXJyYXkoY2hpbGRyZW5MZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbkxlbmd0aDsgaSsrKSB7XG4gICAgICBjaGlsZEFycmF5W2ldID0gYXJndW1lbnRzW2kgKyAyXTtcbiAgICB9XG5cbiAgICB7XG4gICAgICBpZiAoT2JqZWN0LmZyZWV6ZSkge1xuICAgICAgICBPYmplY3QuZnJlZXplKGNoaWxkQXJyYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfSAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHNcblxuXG4gIGlmICh0eXBlICYmIHR5cGUuZGVmYXVsdFByb3BzKSB7XG4gICAgdmFyIGRlZmF1bHRQcm9wcyA9IHR5cGUuZGVmYXVsdFByb3BzO1xuXG4gICAgZm9yIChwcm9wTmFtZSBpbiBkZWZhdWx0UHJvcHMpIHtcbiAgICAgIGlmIChwcm9wc1twcm9wTmFtZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHtcbiAgICBpZiAoa2V5IHx8IHJlZikge1xuICAgICAgdmFyIGRpc3BsYXlOYW1lID0gdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicgPyB0eXBlLmRpc3BsYXlOYW1lIHx8IHR5cGUubmFtZSB8fCAnVW5rbm93bicgOiB0eXBlO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGRlZmluZUtleVByb3BXYXJuaW5nR2V0dGVyKHByb3BzLCBkaXNwbGF5TmFtZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWYpIHtcbiAgICAgICAgZGVmaW5lUmVmUHJvcFdhcm5pbmdHZXR0ZXIocHJvcHMsIGRpc3BsYXlOYW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gUmVhY3RFbGVtZW50KHR5cGUsIGtleSwgcmVmLCBzZWxmLCBzb3VyY2UsIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQsIHByb3BzKTtcbn1cbmZ1bmN0aW9uIGNsb25lQW5kUmVwbGFjZUtleShvbGRFbGVtZW50LCBuZXdLZXkpIHtcbiAgdmFyIG5ld0VsZW1lbnQgPSBSZWFjdEVsZW1lbnQob2xkRWxlbWVudC50eXBlLCBuZXdLZXksIG9sZEVsZW1lbnQucmVmLCBvbGRFbGVtZW50Ll9zZWxmLCBvbGRFbGVtZW50Ll9zb3VyY2UsIG9sZEVsZW1lbnQuX293bmVyLCBvbGRFbGVtZW50LnByb3BzKTtcbiAgcmV0dXJuIG5ld0VsZW1lbnQ7XG59XG4vKipcbiAqIENsb25lIGFuZCByZXR1cm4gYSBuZXcgUmVhY3RFbGVtZW50IHVzaW5nIGVsZW1lbnQgYXMgdGhlIHN0YXJ0aW5nIHBvaW50LlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNjbG9uZWVsZW1lbnRcbiAqL1xuXG5mdW5jdGlvbiBjbG9uZUVsZW1lbnQoZWxlbWVudCwgY29uZmlnLCBjaGlsZHJlbikge1xuICBpZiAoZWxlbWVudCA9PT0gbnVsbCB8fCBlbGVtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWFjdC5jbG9uZUVsZW1lbnQoLi4uKTogVGhlIGFyZ3VtZW50IG11c3QgYmUgYSBSZWFjdCBlbGVtZW50LCBidXQgeW91IHBhc3NlZCBcIiArIGVsZW1lbnQgKyBcIi5cIik7XG4gIH1cblxuICB2YXIgcHJvcE5hbWU7IC8vIE9yaWdpbmFsIHByb3BzIGFyZSBjb3BpZWRcblxuICB2YXIgcHJvcHMgPSBhc3NpZ24oe30sIGVsZW1lbnQucHJvcHMpOyAvLyBSZXNlcnZlZCBuYW1lcyBhcmUgZXh0cmFjdGVkXG5cbiAgdmFyIGtleSA9IGVsZW1lbnQua2V5O1xuICB2YXIgcmVmID0gZWxlbWVudC5yZWY7IC8vIFNlbGYgaXMgcHJlc2VydmVkIHNpbmNlIHRoZSBvd25lciBpcyBwcmVzZXJ2ZWQuXG5cbiAgdmFyIHNlbGYgPSBlbGVtZW50Ll9zZWxmOyAvLyBTb3VyY2UgaXMgcHJlc2VydmVkIHNpbmNlIGNsb25lRWxlbWVudCBpcyB1bmxpa2VseSB0byBiZSB0YXJnZXRlZCBieSBhXG4gIC8vIHRyYW5zcGlsZXIsIGFuZCB0aGUgb3JpZ2luYWwgc291cmNlIGlzIHByb2JhYmx5IGEgYmV0dGVyIGluZGljYXRvciBvZiB0aGVcbiAgLy8gdHJ1ZSBvd25lci5cblxuICB2YXIgc291cmNlID0gZWxlbWVudC5fc291cmNlOyAvLyBPd25lciB3aWxsIGJlIHByZXNlcnZlZCwgdW5sZXNzIHJlZiBpcyBvdmVycmlkZGVuXG5cbiAgdmFyIG93bmVyID0gZWxlbWVudC5fb3duZXI7XG5cbiAgaWYgKGNvbmZpZyAhPSBudWxsKSB7XG4gICAgaWYgKGhhc1ZhbGlkUmVmKGNvbmZpZykpIHtcbiAgICAgIC8vIFNpbGVudGx5IHN0ZWFsIHRoZSByZWYgZnJvbSB0aGUgcGFyZW50LlxuICAgICAgcmVmID0gY29uZmlnLnJlZjtcbiAgICAgIG93bmVyID0gUmVhY3RDdXJyZW50T3duZXIuY3VycmVudDtcbiAgICB9XG5cbiAgICBpZiAoaGFzVmFsaWRLZXkoY29uZmlnKSkge1xuICAgICAge1xuICAgICAgICBjaGVja0tleVN0cmluZ0NvZXJjaW9uKGNvbmZpZy5rZXkpO1xuICAgICAgfVxuXG4gICAgICBrZXkgPSAnJyArIGNvbmZpZy5rZXk7XG4gICAgfSAvLyBSZW1haW5pbmcgcHJvcGVydGllcyBvdmVycmlkZSBleGlzdGluZyBwcm9wc1xuXG5cbiAgICB2YXIgZGVmYXVsdFByb3BzO1xuXG4gICAgaWYgKGVsZW1lbnQudHlwZSAmJiBlbGVtZW50LnR5cGUuZGVmYXVsdFByb3BzKSB7XG4gICAgICBkZWZhdWx0UHJvcHMgPSBlbGVtZW50LnR5cGUuZGVmYXVsdFByb3BzO1xuICAgIH1cblxuICAgIGZvciAocHJvcE5hbWUgaW4gY29uZmlnKSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChjb25maWcsIHByb3BOYW1lKSAmJiAhUkVTRVJWRURfUFJPUFMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgIGlmIChjb25maWdbcHJvcE5hbWVdID09PSB1bmRlZmluZWQgJiYgZGVmYXVsdFByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyBSZXNvbHZlIGRlZmF1bHQgcHJvcHNcbiAgICAgICAgICBwcm9wc1twcm9wTmFtZV0gPSBkZWZhdWx0UHJvcHNbcHJvcE5hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByb3BzW3Byb3BOYW1lXSA9IGNvbmZpZ1twcm9wTmFtZV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gQ2hpbGRyZW4gY2FuIGJlIG1vcmUgdGhhbiBvbmUgYXJndW1lbnQsIGFuZCB0aG9zZSBhcmUgdHJhbnNmZXJyZWQgb250b1xuICAvLyB0aGUgbmV3bHkgYWxsb2NhdGVkIHByb3BzIG9iamVjdC5cblxuXG4gIHZhciBjaGlsZHJlbkxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGggLSAyO1xuXG4gIGlmIChjaGlsZHJlbkxlbmd0aCA9PT0gMSkge1xuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIH0gZWxzZSBpZiAoY2hpbGRyZW5MZW5ndGggPiAxKSB7XG4gICAgdmFyIGNoaWxkQXJyYXkgPSBBcnJheShjaGlsZHJlbkxlbmd0aCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkQXJyYXlbaV0gPSBhcmd1bWVudHNbaSArIDJdO1xuICAgIH1cblxuICAgIHByb3BzLmNoaWxkcmVuID0gY2hpbGRBcnJheTtcbiAgfVxuXG4gIHJldHVybiBSZWFjdEVsZW1lbnQoZWxlbWVudC50eXBlLCBrZXksIHJlZiwgc2VsZiwgc291cmNlLCBvd25lciwgcHJvcHMpO1xufVxuLyoqXG4gKiBWZXJpZmllcyB0aGUgb2JqZWN0IGlzIGEgUmVhY3RFbGVtZW50LlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNpc3ZhbGlkZWxlbWVudFxuICogQHBhcmFtIHs/b2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgYG9iamVjdGAgaXMgYSBSZWFjdEVsZW1lbnQuXG4gKiBAZmluYWxcbiAqL1xuXG5mdW5jdGlvbiBpc1ZhbGlkRWxlbWVudChvYmplY3QpIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIG9iamVjdCAhPT0gbnVsbCAmJiBvYmplY3QuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRTtcbn1cblxudmFyIFNFUEFSQVRPUiA9ICcuJztcbnZhciBTVUJTRVBBUkFUT1IgPSAnOic7XG4vKipcbiAqIEVzY2FwZSBhbmQgd3JhcCBrZXkgc28gaXQgaXMgc2FmZSB0byB1c2UgYXMgYSByZWFjdGlkXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSB0byBiZSBlc2NhcGVkLlxuICogQHJldHVybiB7c3RyaW5nfSB0aGUgZXNjYXBlZCBrZXkuXG4gKi9cblxuZnVuY3Rpb24gZXNjYXBlKGtleSkge1xuICB2YXIgZXNjYXBlUmVnZXggPSAvWz06XS9nO1xuICB2YXIgZXNjYXBlckxvb2t1cCA9IHtcbiAgICAnPSc6ICc9MCcsXG4gICAgJzonOiAnPTInXG4gIH07XG4gIHZhciBlc2NhcGVkU3RyaW5nID0ga2V5LnJlcGxhY2UoZXNjYXBlUmVnZXgsIGZ1bmN0aW9uIChtYXRjaCkge1xuICAgIHJldHVybiBlc2NhcGVyTG9va3VwW21hdGNoXTtcbiAgfSk7XG4gIHJldHVybiAnJCcgKyBlc2NhcGVkU3RyaW5nO1xufVxuLyoqXG4gKiBUT0RPOiBUZXN0IHRoYXQgYSBzaW5nbGUgY2hpbGQgYW5kIGFuIGFycmF5IHdpdGggb25lIGl0ZW0gaGF2ZSB0aGUgc2FtZSBrZXlcbiAqIHBhdHRlcm4uXG4gKi9cblxuXG52YXIgZGlkV2FybkFib3V0TWFwcyA9IGZhbHNlO1xudmFyIHVzZXJQcm92aWRlZEtleUVzY2FwZVJlZ2V4ID0gL1xcLysvZztcblxuZnVuY3Rpb24gZXNjYXBlVXNlclByb3ZpZGVkS2V5KHRleHQpIHtcbiAgcmV0dXJuIHRleHQucmVwbGFjZSh1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCwgJyQmLycpO1xufVxuLyoqXG4gKiBHZW5lcmF0ZSBhIGtleSBzdHJpbmcgdGhhdCBpZGVudGlmaWVzIGEgZWxlbWVudCB3aXRoaW4gYSBzZXQuXG4gKlxuICogQHBhcmFtIHsqfSBlbGVtZW50IEEgZWxlbWVudCB0aGF0IGNvdWxkIGNvbnRhaW4gYSBtYW51YWwga2V5LlxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IEluZGV4IHRoYXQgaXMgdXNlZCBpZiBhIG1hbnVhbCBrZXkgaXMgbm90IHByb3ZpZGVkLlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cblxuZnVuY3Rpb24gZ2V0RWxlbWVudEtleShlbGVtZW50LCBpbmRleCkge1xuICAvLyBEbyBzb21lIHR5cGVjaGVja2luZyBoZXJlIHNpbmNlIHdlIGNhbGwgdGhpcyBibGluZGx5LiBXZSB3YW50IHRvIGVuc3VyZVxuICAvLyB0aGF0IHdlIGRvbid0IGJsb2NrIHBvdGVudGlhbCBmdXR1cmUgRVMgQVBJcy5cbiAgaWYgKHR5cGVvZiBlbGVtZW50ID09PSAnb2JqZWN0JyAmJiBlbGVtZW50ICE9PSBudWxsICYmIGVsZW1lbnQua2V5ICE9IG51bGwpIHtcbiAgICAvLyBFeHBsaWNpdCBrZXlcbiAgICB7XG4gICAgICBjaGVja0tleVN0cmluZ0NvZXJjaW9uKGVsZW1lbnQua2V5KTtcbiAgICB9XG5cbiAgICByZXR1cm4gZXNjYXBlKCcnICsgZWxlbWVudC5rZXkpO1xuICB9IC8vIEltcGxpY2l0IGtleSBkZXRlcm1pbmVkIGJ5IHRoZSBpbmRleCBpbiB0aGUgc2V0XG5cblxuICByZXR1cm4gaW5kZXgudG9TdHJpbmcoMzYpO1xufVxuXG5mdW5jdGlvbiBtYXBJbnRvQXJyYXkoY2hpbGRyZW4sIGFycmF5LCBlc2NhcGVkUHJlZml4LCBuYW1lU29GYXIsIGNhbGxiYWNrKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIGNoaWxkcmVuO1xuXG4gIGlmICh0eXBlID09PSAndW5kZWZpbmVkJyB8fCB0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICAvLyBBbGwgb2YgdGhlIGFib3ZlIGFyZSBwZXJjZWl2ZWQgYXMgbnVsbC5cbiAgICBjaGlsZHJlbiA9IG51bGw7XG4gIH1cblxuICB2YXIgaW52b2tlQ2FsbGJhY2sgPSBmYWxzZTtcblxuICBpZiAoY2hpbGRyZW4gPT09IG51bGwpIHtcbiAgICBpbnZva2VDYWxsYmFjayA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgaW52b2tlQ2FsbGJhY2sgPSB0cnVlO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAgc3dpdGNoIChjaGlsZHJlbi4kJHR5cGVvZikge1xuICAgICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6XG4gICAgICAgICAgICBpbnZva2VDYWxsYmFjayA9IHRydWU7XG4gICAgICAgIH1cblxuICAgIH1cbiAgfVxuXG4gIGlmIChpbnZva2VDYWxsYmFjaykge1xuICAgIHZhciBfY2hpbGQgPSBjaGlsZHJlbjtcbiAgICB2YXIgbWFwcGVkQ2hpbGQgPSBjYWxsYmFjayhfY2hpbGQpOyAvLyBJZiBpdCdzIHRoZSBvbmx5IGNoaWxkLCB0cmVhdCB0aGUgbmFtZSBhcyBpZiBpdCB3YXMgd3JhcHBlZCBpbiBhbiBhcnJheVxuICAgIC8vIHNvIHRoYXQgaXQncyBjb25zaXN0ZW50IGlmIHRoZSBudW1iZXIgb2YgY2hpbGRyZW4gZ3Jvd3M6XG5cbiAgICB2YXIgY2hpbGRLZXkgPSBuYW1lU29GYXIgPT09ICcnID8gU0VQQVJBVE9SICsgZ2V0RWxlbWVudEtleShfY2hpbGQsIDApIDogbmFtZVNvRmFyO1xuXG4gICAgaWYgKGlzQXJyYXkobWFwcGVkQ2hpbGQpKSB7XG4gICAgICB2YXIgZXNjYXBlZENoaWxkS2V5ID0gJyc7XG5cbiAgICAgIGlmIChjaGlsZEtleSAhPSBudWxsKSB7XG4gICAgICAgIGVzY2FwZWRDaGlsZEtleSA9IGVzY2FwZVVzZXJQcm92aWRlZEtleShjaGlsZEtleSkgKyAnLyc7XG4gICAgICB9XG5cbiAgICAgIG1hcEludG9BcnJheShtYXBwZWRDaGlsZCwgYXJyYXksIGVzY2FwZWRDaGlsZEtleSwgJycsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHJldHVybiBjO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmIChtYXBwZWRDaGlsZCAhPSBudWxsKSB7XG4gICAgICBpZiAoaXNWYWxpZEVsZW1lbnQobWFwcGVkQ2hpbGQpKSB7XG4gICAgICAgIHtcbiAgICAgICAgICAvLyBUaGUgYGlmYCBzdGF0ZW1lbnQgaGVyZSBwcmV2ZW50cyBhdXRvLWRpc2FibGluZyBvZiB0aGUgc2FmZVxuICAgICAgICAgIC8vIGNvZXJjaW9uIEVTTGludCBydWxlLCBzbyB3ZSBtdXN0IG1hbnVhbGx5IGRpc2FibGUgaXQgYmVsb3cuXG4gICAgICAgICAgLy8gJEZsb3dGaXhNZSBGbG93IGluY29ycmVjdGx5IHRoaW5rcyBSZWFjdC5Qb3J0YWwgZG9lc24ndCBoYXZlIGEga2V5XG4gICAgICAgICAgaWYgKG1hcHBlZENoaWxkLmtleSAmJiAoIV9jaGlsZCB8fCBfY2hpbGQua2V5ICE9PSBtYXBwZWRDaGlsZC5rZXkpKSB7XG4gICAgICAgICAgICBjaGVja0tleVN0cmluZ0NvZXJjaW9uKG1hcHBlZENoaWxkLmtleSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbWFwcGVkQ2hpbGQgPSBjbG9uZUFuZFJlcGxhY2VLZXkobWFwcGVkQ2hpbGQsIC8vIEtlZXAgYm90aCB0aGUgKG1hcHBlZCkgYW5kIG9sZCBrZXlzIGlmIHRoZXkgZGlmZmVyLCBqdXN0IGFzXG4gICAgICAgIC8vIHRyYXZlcnNlQWxsQ2hpbGRyZW4gdXNlZCB0byBkbyBmb3Igb2JqZWN0cyBhcyBjaGlsZHJlblxuICAgICAgICBlc2NhcGVkUHJlZml4ICsgKCAvLyAkRmxvd0ZpeE1lIEZsb3cgaW5jb3JyZWN0bHkgdGhpbmtzIFJlYWN0LlBvcnRhbCBkb2Vzbid0IGhhdmUgYSBrZXlcbiAgICAgICAgbWFwcGVkQ2hpbGQua2V5ICYmICghX2NoaWxkIHx8IF9jaGlsZC5rZXkgIT09IG1hcHBlZENoaWxkLmtleSkgPyAvLyAkRmxvd0ZpeE1lIEZsb3cgaW5jb3JyZWN0bHkgdGhpbmtzIGV4aXN0aW5nIGVsZW1lbnQncyBrZXkgY2FuIGJlIGEgbnVtYmVyXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1pbnRlcm5hbC9zYWZlLXN0cmluZy1jb2VyY2lvblxuICAgICAgICBlc2NhcGVVc2VyUHJvdmlkZWRLZXkoJycgKyBtYXBwZWRDaGlsZC5rZXkpICsgJy8nIDogJycpICsgY2hpbGRLZXkpO1xuICAgICAgfVxuXG4gICAgICBhcnJheS5wdXNoKG1hcHBlZENoaWxkKTtcbiAgICB9XG5cbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIHZhciBjaGlsZDtcbiAgdmFyIG5leHROYW1lO1xuICB2YXIgc3VidHJlZUNvdW50ID0gMDsgLy8gQ291bnQgb2YgY2hpbGRyZW4gZm91bmQgaW4gdGhlIGN1cnJlbnQgc3VidHJlZS5cblxuICB2YXIgbmV4dE5hbWVQcmVmaXggPSBuYW1lU29GYXIgPT09ICcnID8gU0VQQVJBVE9SIDogbmFtZVNvRmFyICsgU1VCU0VQQVJBVE9SO1xuXG4gIGlmIChpc0FycmF5KGNoaWxkcmVuKSkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoaWxkID0gY2hpbGRyZW5baV07XG4gICAgICBuZXh0TmFtZSA9IG5leHROYW1lUHJlZml4ICsgZ2V0RWxlbWVudEtleShjaGlsZCwgaSk7XG4gICAgICBzdWJ0cmVlQ291bnQgKz0gbWFwSW50b0FycmF5KGNoaWxkLCBhcnJheSwgZXNjYXBlZFByZWZpeCwgbmV4dE5hbWUsIGNhbGxiYWNrKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKGNoaWxkcmVuKTtcblxuICAgIGlmICh0eXBlb2YgaXRlcmF0b3JGbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdmFyIGl0ZXJhYmxlQ2hpbGRyZW4gPSBjaGlsZHJlbjtcblxuICAgICAge1xuICAgICAgICAvLyBXYXJuIGFib3V0IHVzaW5nIE1hcHMgYXMgY2hpbGRyZW5cbiAgICAgICAgaWYgKGl0ZXJhdG9yRm4gPT09IGl0ZXJhYmxlQ2hpbGRyZW4uZW50cmllcykge1xuICAgICAgICAgIGlmICghZGlkV2FybkFib3V0TWFwcykge1xuICAgICAgICAgICAgd2FybignVXNpbmcgTWFwcyBhcyBjaGlsZHJlbiBpcyBub3Qgc3VwcG9ydGVkLiAnICsgJ1VzZSBhbiBhcnJheSBvZiBrZXllZCBSZWFjdEVsZW1lbnRzIGluc3RlYWQuJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZGlkV2FybkFib3V0TWFwcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKGl0ZXJhYmxlQ2hpbGRyZW4pO1xuICAgICAgdmFyIHN0ZXA7XG4gICAgICB2YXIgaWkgPSAwO1xuXG4gICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgIGNoaWxkID0gc3RlcC52YWx1ZTtcbiAgICAgICAgbmV4dE5hbWUgPSBuZXh0TmFtZVByZWZpeCArIGdldEVsZW1lbnRLZXkoY2hpbGQsIGlpKyspO1xuICAgICAgICBzdWJ0cmVlQ291bnQgKz0gbWFwSW50b0FycmF5KGNoaWxkLCBhcnJheSwgZXNjYXBlZFByZWZpeCwgbmV4dE5hbWUsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaW50ZXJuYWwvc2FmZS1zdHJpbmctY29lcmNpb25cbiAgICAgIHZhciBjaGlsZHJlblN0cmluZyA9IFN0cmluZyhjaGlsZHJlbik7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6IFwiICsgKGNoaWxkcmVuU3RyaW5nID09PSAnW29iamVjdCBPYmplY3RdJyA/ICdvYmplY3Qgd2l0aCBrZXlzIHsnICsgT2JqZWN0LmtleXMoY2hpbGRyZW4pLmpvaW4oJywgJykgKyAnfScgOiBjaGlsZHJlblN0cmluZykgKyBcIikuIFwiICsgJ0lmIHlvdSBtZWFudCB0byByZW5kZXIgYSBjb2xsZWN0aW9uIG9mIGNoaWxkcmVuLCB1c2UgYW4gYXJyYXkgJyArICdpbnN0ZWFkLicpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzdWJ0cmVlQ291bnQ7XG59XG5cbi8qKlxuICogTWFwcyBjaGlsZHJlbiB0aGF0IGFyZSB0eXBpY2FsbHkgc3BlY2lmaWVkIGFzIGBwcm9wcy5jaGlsZHJlbmAuXG4gKlxuICogU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9yZWFjdC1hcGkuaHRtbCNyZWFjdGNoaWxkcmVubWFwXG4gKlxuICogVGhlIHByb3ZpZGVkIG1hcEZ1bmN0aW9uKGNoaWxkLCBpbmRleCkgd2lsbCBiZSBjYWxsZWQgZm9yIGVhY2hcbiAqIGxlYWYgY2hpbGQuXG4gKlxuICogQHBhcmFtIHs/Kn0gY2hpbGRyZW4gQ2hpbGRyZW4gdHJlZSBjb250YWluZXIuXG4gKiBAcGFyYW0ge2Z1bmN0aW9uKCosIGludCl9IGZ1bmMgVGhlIG1hcCBmdW5jdGlvbi5cbiAqIEBwYXJhbSB7Kn0gY29udGV4dCBDb250ZXh0IGZvciBtYXBGdW5jdGlvbi5cbiAqIEByZXR1cm4ge29iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIG9yZGVyZWQgbWFwIG9mIHJlc3VsdHMuXG4gKi9cbmZ1bmN0aW9uIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jLCBjb250ZXh0KSB7XG4gIGlmIChjaGlsZHJlbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuO1xuICB9XG5cbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIgY291bnQgPSAwO1xuICBtYXBJbnRvQXJyYXkoY2hpbGRyZW4sIHJlc3VsdCwgJycsICcnLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gZnVuYy5jYWxsKGNvbnRleHQsIGNoaWxkLCBjb3VudCsrKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG4vKipcbiAqIENvdW50IHRoZSBudW1iZXIgb2YgY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhc1xuICogYHByb3BzLmNoaWxkcmVuYC5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL3JlYWN0LWFwaS5odG1sI3JlYWN0Y2hpbGRyZW5jb3VudFxuICpcbiAqIEBwYXJhbSB7Pyp9IGNoaWxkcmVuIENoaWxkcmVuIHRyZWUgY29udGFpbmVyLlxuICogQHJldHVybiB7bnVtYmVyfSBUaGUgbnVtYmVyIG9mIGNoaWxkcmVuLlxuICovXG5cblxuZnVuY3Rpb24gY291bnRDaGlsZHJlbihjaGlsZHJlbikge1xuICB2YXIgbiA9IDA7XG4gIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jdGlvbiAoKSB7XG4gICAgbisrOyAvLyBEb24ndCByZXR1cm4gYW55dGhpbmdcbiAgfSk7XG4gIHJldHVybiBuO1xufVxuXG4vKipcbiAqIEl0ZXJhdGVzIHRocm91Z2ggY2hpbGRyZW4gdGhhdCBhcmUgdHlwaWNhbGx5IHNwZWNpZmllZCBhcyBgcHJvcHMuY2hpbGRyZW5gLlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjcmVhY3RjaGlsZHJlbmZvcmVhY2hcbiAqXG4gKiBUaGUgcHJvdmlkZWQgZm9yRWFjaEZ1bmMoY2hpbGQsIGluZGV4KSB3aWxsIGJlIGNhbGxlZCBmb3IgZWFjaFxuICogbGVhZiBjaGlsZC5cbiAqXG4gKiBAcGFyYW0gez8qfSBjaGlsZHJlbiBDaGlsZHJlbiB0cmVlIGNvbnRhaW5lci5cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKiwgaW50KX0gZm9yRWFjaEZ1bmNcbiAqIEBwYXJhbSB7Kn0gZm9yRWFjaENvbnRleHQgQ29udGV4dCBmb3IgZm9yRWFjaENvbnRleHQuXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2hDaGlsZHJlbihjaGlsZHJlbiwgZm9yRWFjaEZ1bmMsIGZvckVhY2hDb250ZXh0KSB7XG4gIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jdGlvbiAoKSB7XG4gICAgZm9yRWFjaEZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgLy8gRG9uJ3QgcmV0dXJuIGFueXRoaW5nLlxuICB9LCBmb3JFYWNoQ29udGV4dCk7XG59XG4vKipcbiAqIEZsYXR0ZW4gYSBjaGlsZHJlbiBvYmplY3QgKHR5cGljYWxseSBzcGVjaWZpZWQgYXMgYHByb3BzLmNoaWxkcmVuYCkgYW5kXG4gKiByZXR1cm4gYW4gYXJyYXkgd2l0aCBhcHByb3ByaWF0ZWx5IHJlLWtleWVkIGNoaWxkcmVuLlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjcmVhY3RjaGlsZHJlbnRvYXJyYXlcbiAqL1xuXG5cbmZ1bmN0aW9uIHRvQXJyYXkoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIG1hcENoaWxkcmVuKGNoaWxkcmVuLCBmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQ7XG4gIH0pIHx8IFtdO1xufVxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmaXJzdCBjaGlsZCBpbiBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4gYW5kIHZlcmlmaWVzIHRoYXQgdGhlcmVcbiAqIGlzIG9ubHkgb25lIGNoaWxkIGluIHRoZSBjb2xsZWN0aW9uLlxuICpcbiAqIFNlZSBodHRwczovL3JlYWN0anMub3JnL2RvY3MvcmVhY3QtYXBpLmh0bWwjcmVhY3RjaGlsZHJlbm9ubHlcbiAqXG4gKiBUaGUgY3VycmVudCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIGZ1bmN0aW9uIGFzc3VtZXMgdGhhdCBhIHNpbmdsZSBjaGlsZCBnZXRzXG4gKiBwYXNzZWQgd2l0aG91dCBhIHdyYXBwZXIsIGJ1dCB0aGUgcHVycG9zZSBvZiB0aGlzIGhlbHBlciBmdW5jdGlvbiBpcyB0b1xuICogYWJzdHJhY3QgYXdheSB0aGUgcGFydGljdWxhciBzdHJ1Y3R1cmUgb2YgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHs/b2JqZWN0fSBjaGlsZHJlbiBDaGlsZCBjb2xsZWN0aW9uIHN0cnVjdHVyZS5cbiAqIEByZXR1cm4ge1JlYWN0RWxlbWVudH0gVGhlIGZpcnN0IGFuZCBvbmx5IGBSZWFjdEVsZW1lbnRgIGNvbnRhaW5lZCBpbiB0aGVcbiAqIHN0cnVjdHVyZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICBpZiAoIWlzVmFsaWRFbGVtZW50KGNoaWxkcmVuKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuJyk7XG4gIH1cblxuICByZXR1cm4gY2hpbGRyZW47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbnRleHQoZGVmYXVsdFZhbHVlKSB7XG4gIC8vIFRPRE86IFNlY29uZCBhcmd1bWVudCB1c2VkIHRvIGJlIGFuIG9wdGlvbmFsIGBjYWxjdWxhdGVDaGFuZ2VkQml0c2BcbiAgLy8gZnVuY3Rpb24uIFdhcm4gdG8gcmVzZXJ2ZSBmb3IgZnV0dXJlIHVzZT9cbiAgdmFyIGNvbnRleHQgPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0NPTlRFWFRfVFlQRSxcbiAgICAvLyBBcyBhIHdvcmthcm91bmQgdG8gc3VwcG9ydCBtdWx0aXBsZSBjb25jdXJyZW50IHJlbmRlcmVycywgd2UgY2F0ZWdvcml6ZVxuICAgIC8vIHNvbWUgcmVuZGVyZXJzIGFzIHByaW1hcnkgYW5kIG90aGVycyBhcyBzZWNvbmRhcnkuIFdlIG9ubHkgZXhwZWN0XG4gICAgLy8gdGhlcmUgdG8gYmUgdHdvIGNvbmN1cnJlbnQgcmVuZGVyZXJzIGF0IG1vc3Q6IFJlYWN0IE5hdGl2ZSAocHJpbWFyeSkgYW5kXG4gICAgLy8gRmFicmljIChzZWNvbmRhcnkpOyBSZWFjdCBET00gKHByaW1hcnkpIGFuZCBSZWFjdCBBUlQgKHNlY29uZGFyeSkuXG4gICAgLy8gU2Vjb25kYXJ5IHJlbmRlcmVycyBzdG9yZSB0aGVpciBjb250ZXh0IHZhbHVlcyBvbiBzZXBhcmF0ZSBmaWVsZHMuXG4gICAgX2N1cnJlbnRWYWx1ZTogZGVmYXVsdFZhbHVlLFxuICAgIF9jdXJyZW50VmFsdWUyOiBkZWZhdWx0VmFsdWUsXG4gICAgLy8gVXNlZCB0byB0cmFjayBob3cgbWFueSBjb25jdXJyZW50IHJlbmRlcmVycyB0aGlzIGNvbnRleHQgY3VycmVudGx5XG4gICAgLy8gc3VwcG9ydHMgd2l0aGluIGluIGEgc2luZ2xlIHJlbmRlcmVyLiBTdWNoIGFzIHBhcmFsbGVsIHNlcnZlciByZW5kZXJpbmcuXG4gICAgX3RocmVhZENvdW50OiAwLFxuICAgIC8vIFRoZXNlIGFyZSBjaXJjdWxhclxuICAgIFByb3ZpZGVyOiBudWxsLFxuICAgIENvbnN1bWVyOiBudWxsLFxuICAgIC8vIEFkZCB0aGVzZSB0byB1c2Ugc2FtZSBoaWRkZW4gY2xhc3MgaW4gVk0gYXMgU2VydmVyQ29udGV4dFxuICAgIF9kZWZhdWx0VmFsdWU6IG51bGwsXG4gICAgX2dsb2JhbE5hbWU6IG51bGxcbiAgfTtcbiAgY29udGV4dC5Qcm92aWRlciA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfUFJPVklERVJfVFlQRSxcbiAgICBfY29udGV4dDogY29udGV4dFxuICB9O1xuICB2YXIgaGFzV2FybmVkQWJvdXRVc2luZ05lc3RlZENvbnRleHRDb25zdW1lcnMgPSBmYWxzZTtcbiAgdmFyIGhhc1dhcm5lZEFib3V0VXNpbmdDb25zdW1lclByb3ZpZGVyID0gZmFsc2U7XG4gIHZhciBoYXNXYXJuZWRBYm91dERpc3BsYXlOYW1lT25Db25zdW1lciA9IGZhbHNlO1xuXG4gIHtcbiAgICAvLyBBIHNlcGFyYXRlIG9iamVjdCwgYnV0IHByb3hpZXMgYmFjayB0byB0aGUgb3JpZ2luYWwgY29udGV4dCBvYmplY3QgZm9yXG4gICAgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuIEl0IGhhcyBhIGRpZmZlcmVudCAkJHR5cGVvZiwgc28gd2UgY2FuIHByb3Blcmx5XG4gICAgLy8gd2FybiBmb3IgdGhlIGluY29ycmVjdCB1c2FnZSBvZiBDb250ZXh0IGFzIGEgQ29uc3VtZXIuXG4gICAgdmFyIENvbnN1bWVyID0ge1xuICAgICAgJCR0eXBlb2Y6IFJFQUNUX0NPTlRFWFRfVFlQRSxcbiAgICAgIF9jb250ZXh0OiBjb250ZXh0XG4gICAgfTsgLy8gJEZsb3dGaXhNZTogRmxvdyBjb21wbGFpbnMgYWJvdXQgbm90IHNldHRpbmcgYSB2YWx1ZSwgd2hpY2ggaXMgaW50ZW50aW9uYWwgaGVyZVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoQ29uc3VtZXIsIHtcbiAgICAgIFByb3ZpZGVyOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghaGFzV2FybmVkQWJvdXRVc2luZ0NvbnN1bWVyUHJvdmlkZXIpIHtcbiAgICAgICAgICAgIGhhc1dhcm5lZEFib3V0VXNpbmdDb25zdW1lclByb3ZpZGVyID0gdHJ1ZTtcblxuICAgICAgICAgICAgZXJyb3IoJ1JlbmRlcmluZyA8Q29udGV4dC5Db25zdW1lci5Qcm92aWRlcj4gaXMgbm90IHN1cHBvcnRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluICcgKyAnYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gRGlkIHlvdSBtZWFuIHRvIHJlbmRlciA8Q29udGV4dC5Qcm92aWRlcj4gaW5zdGVhZD8nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY29udGV4dC5Qcm92aWRlcjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoX1Byb3ZpZGVyKSB7XG4gICAgICAgICAgY29udGV4dC5Qcm92aWRlciA9IF9Qcm92aWRlcjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIF9jdXJyZW50VmFsdWU6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuX2N1cnJlbnRWYWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoX2N1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgIGNvbnRleHQuX2N1cnJlbnRWYWx1ZSA9IF9jdXJyZW50VmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBfY3VycmVudFZhbHVlMjoge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gY29udGV4dC5fY3VycmVudFZhbHVlMjtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoX2N1cnJlbnRWYWx1ZTIpIHtcbiAgICAgICAgICBjb250ZXh0Ll9jdXJyZW50VmFsdWUyID0gX2N1cnJlbnRWYWx1ZTI7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBfdGhyZWFkQ291bnQ6IHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnRleHQuX3RocmVhZENvdW50O1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChfdGhyZWFkQ291bnQpIHtcbiAgICAgICAgICBjb250ZXh0Ll90aHJlYWRDb3VudCA9IF90aHJlYWRDb3VudDtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIENvbnN1bWVyOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICghaGFzV2FybmVkQWJvdXRVc2luZ05lc3RlZENvbnRleHRDb25zdW1lcnMpIHtcbiAgICAgICAgICAgIGhhc1dhcm5lZEFib3V0VXNpbmdOZXN0ZWRDb250ZXh0Q29uc3VtZXJzID0gdHJ1ZTtcblxuICAgICAgICAgICAgZXJyb3IoJ1JlbmRlcmluZyA8Q29udGV4dC5Db25zdW1lci5Db25zdW1lcj4gaXMgbm90IHN1cHBvcnRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluICcgKyAnYSBmdXR1cmUgbWFqb3IgcmVsZWFzZS4gRGlkIHlvdSBtZWFuIHRvIHJlbmRlciA8Q29udGV4dC5Db25zdW1lcj4gaW5zdGVhZD8nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gY29udGV4dC5Db25zdW1lcjtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGRpc3BsYXlOYW1lOiB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBjb250ZXh0LmRpc3BsYXlOYW1lO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChkaXNwbGF5TmFtZSkge1xuICAgICAgICAgIGlmICghaGFzV2FybmVkQWJvdXREaXNwbGF5TmFtZU9uQ29uc3VtZXIpIHtcbiAgICAgICAgICAgIHdhcm4oJ1NldHRpbmcgYGRpc3BsYXlOYW1lYCBvbiBDb250ZXh0LkNvbnN1bWVyIGhhcyBubyBlZmZlY3QuICcgKyBcIllvdSBzaG91bGQgc2V0IGl0IGRpcmVjdGx5IG9uIHRoZSBjb250ZXh0IHdpdGggQ29udGV4dC5kaXNwbGF5TmFtZSA9ICclcycuXCIsIGRpc3BsYXlOYW1lKTtcblxuICAgICAgICAgICAgaGFzV2FybmVkQWJvdXREaXNwbGF5TmFtZU9uQ29uc3VtZXIgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pOyAvLyAkRmxvd0ZpeE1lOiBGbG93IGNvbXBsYWlucyBhYm91dCBtaXNzaW5nIHByb3BlcnRpZXMgYmVjYXVzZSBpdCBkb2Vzbid0IHVuZGVyc3RhbmQgZGVmaW5lUHJvcGVydHlcblxuICAgIGNvbnRleHQuQ29uc3VtZXIgPSBDb25zdW1lcjtcbiAgfVxuXG4gIHtcbiAgICBjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIgPSBudWxsO1xuICAgIGNvbnRleHQuX2N1cnJlbnRSZW5kZXJlcjIgPSBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHQ7XG59XG5cbnZhciBVbmluaXRpYWxpemVkID0gLTE7XG52YXIgUGVuZGluZyA9IDA7XG52YXIgUmVzb2x2ZWQgPSAxO1xudmFyIFJlamVjdGVkID0gMjtcblxuZnVuY3Rpb24gbGF6eUluaXRpYWxpemVyKHBheWxvYWQpIHtcbiAgaWYgKHBheWxvYWQuX3N0YXR1cyA9PT0gVW5pbml0aWFsaXplZCkge1xuICAgIHZhciBjdG9yID0gcGF5bG9hZC5fcmVzdWx0O1xuICAgIHZhciB0aGVuYWJsZSA9IGN0b3IoKTsgLy8gVHJhbnNpdGlvbiB0byB0aGUgbmV4dCBzdGF0ZS5cbiAgICAvLyBUaGlzIG1pZ2h0IHRocm93IGVpdGhlciBiZWNhdXNlIGl0J3MgbWlzc2luZyBvciB0aHJvd3MuIElmIHNvLCB3ZSB0cmVhdCBpdFxuICAgIC8vIGFzIHN0aWxsIHVuaW5pdGlhbGl6ZWQgYW5kIHRyeSBhZ2FpbiBuZXh0IHRpbWUuIFdoaWNoIGlzIHRoZSBzYW1lIGFzIHdoYXRcbiAgICAvLyBoYXBwZW5zIGlmIHRoZSBjdG9yIG9yIGFueSB3cmFwcGVycyBwcm9jZXNzaW5nIHRoZSBjdG9yIHRocm93cy4gVGhpcyBtaWdodFxuICAgIC8vIGVuZCB1cCBmaXhpbmcgaXQgaWYgdGhlIHJlc29sdXRpb24gd2FzIGEgY29uY3VycmVuY3kgYnVnLlxuXG4gICAgdGhlbmFibGUudGhlbihmdW5jdGlvbiAobW9kdWxlT2JqZWN0KSB7XG4gICAgICBpZiAocGF5bG9hZC5fc3RhdHVzID09PSBQZW5kaW5nIHx8IHBheWxvYWQuX3N0YXR1cyA9PT0gVW5pbml0aWFsaXplZCkge1xuICAgICAgICAvLyBUcmFuc2l0aW9uIHRvIHRoZSBuZXh0IHN0YXRlLlxuICAgICAgICB2YXIgcmVzb2x2ZWQgPSBwYXlsb2FkO1xuICAgICAgICByZXNvbHZlZC5fc3RhdHVzID0gUmVzb2x2ZWQ7XG4gICAgICAgIHJlc29sdmVkLl9yZXN1bHQgPSBtb2R1bGVPYmplY3Q7XG4gICAgICB9XG4gICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICBpZiAocGF5bG9hZC5fc3RhdHVzID09PSBQZW5kaW5nIHx8IHBheWxvYWQuX3N0YXR1cyA9PT0gVW5pbml0aWFsaXplZCkge1xuICAgICAgICAvLyBUcmFuc2l0aW9uIHRvIHRoZSBuZXh0IHN0YXRlLlxuICAgICAgICB2YXIgcmVqZWN0ZWQgPSBwYXlsb2FkO1xuICAgICAgICByZWplY3RlZC5fc3RhdHVzID0gUmVqZWN0ZWQ7XG4gICAgICAgIHJlamVjdGVkLl9yZXN1bHQgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChwYXlsb2FkLl9zdGF0dXMgPT09IFVuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIC8vIEluIGNhc2UsIHdlJ3JlIHN0aWxsIHVuaW5pdGlhbGl6ZWQsIHRoZW4gd2UncmUgd2FpdGluZyBmb3IgdGhlIHRoZW5hYmxlXG4gICAgICAvLyB0byByZXNvbHZlLiBTZXQgaXQgYXMgcGVuZGluZyBpbiB0aGUgbWVhbnRpbWUuXG4gICAgICB2YXIgcGVuZGluZyA9IHBheWxvYWQ7XG4gICAgICBwZW5kaW5nLl9zdGF0dXMgPSBQZW5kaW5nO1xuICAgICAgcGVuZGluZy5fcmVzdWx0ID0gdGhlbmFibGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBheWxvYWQuX3N0YXR1cyA9PT0gUmVzb2x2ZWQpIHtcbiAgICB2YXIgbW9kdWxlT2JqZWN0ID0gcGF5bG9hZC5fcmVzdWx0O1xuXG4gICAge1xuICAgICAgaWYgKG1vZHVsZU9iamVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVycm9yKCdsYXp5OiBFeHBlY3RlZCB0aGUgcmVzdWx0IG9mIGEgZHluYW1pYyBpbXAnICsgJ29ydCgpIGNhbGwuICcgKyAnSW5zdGVhZCByZWNlaXZlZDogJXNcXG5cXG5Zb3VyIGNvZGUgc2hvdWxkIGxvb2sgbGlrZTogXFxuICAnICsgLy8gQnJlYWsgdXAgaW1wb3J0cyB0byBhdm9pZCBhY2NpZGVudGFsbHkgcGFyc2luZyB0aGVtIGFzIGRlcGVuZGVuY2llcy5cbiAgICAgICAgJ2NvbnN0IE15Q29tcG9uZW50ID0gbGF6eSgoKSA9PiBpbXAnICsgXCJvcnQoJy4vTXlDb21wb25lbnQnKSlcXG5cXG5cIiArICdEaWQgeW91IGFjY2lkZW50YWxseSBwdXQgY3VybHkgYnJhY2VzIGFyb3VuZCB0aGUgaW1wb3J0PycsIG1vZHVsZU9iamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAge1xuICAgICAgaWYgKCEoJ2RlZmF1bHQnIGluIG1vZHVsZU9iamVjdCkpIHtcbiAgICAgICAgZXJyb3IoJ2xhenk6IEV4cGVjdGVkIHRoZSByZXN1bHQgb2YgYSBkeW5hbWljIGltcCcgKyAnb3J0KCkgY2FsbC4gJyArICdJbnN0ZWFkIHJlY2VpdmVkOiAlc1xcblxcbllvdXIgY29kZSBzaG91bGQgbG9vayBsaWtlOiBcXG4gICcgKyAvLyBCcmVhayB1cCBpbXBvcnRzIHRvIGF2b2lkIGFjY2lkZW50YWxseSBwYXJzaW5nIHRoZW0gYXMgZGVwZW5kZW5jaWVzLlxuICAgICAgICAnY29uc3QgTXlDb21wb25lbnQgPSBsYXp5KCgpID0+IGltcCcgKyBcIm9ydCgnLi9NeUNvbXBvbmVudCcpKVwiLCBtb2R1bGVPYmplY3QpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBtb2R1bGVPYmplY3QuZGVmYXVsdDtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBwYXlsb2FkLl9yZXN1bHQ7XG4gIH1cbn1cblxuZnVuY3Rpb24gbGF6eShjdG9yKSB7XG4gIHZhciBwYXlsb2FkID0ge1xuICAgIC8vIFdlIHVzZSB0aGVzZSBmaWVsZHMgdG8gc3RvcmUgdGhlIHJlc3VsdC5cbiAgICBfc3RhdHVzOiBVbmluaXRpYWxpemVkLFxuICAgIF9yZXN1bHQ6IGN0b3JcbiAgfTtcbiAgdmFyIGxhenlUeXBlID0ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9MQVpZX1RZUEUsXG4gICAgX3BheWxvYWQ6IHBheWxvYWQsXG4gICAgX2luaXQ6IGxhenlJbml0aWFsaXplclxuICB9O1xuXG4gIHtcbiAgICAvLyBJbiBwcm9kdWN0aW9uLCB0aGlzIHdvdWxkIGp1c3Qgc2V0IGl0IG9uIHRoZSBvYmplY3QuXG4gICAgdmFyIGRlZmF1bHRQcm9wcztcbiAgICB2YXIgcHJvcFR5cGVzOyAvLyAkRmxvd0ZpeE1lXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhsYXp5VHlwZSwge1xuICAgICAgZGVmYXVsdFByb3BzOiB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIGRlZmF1bHRQcm9wcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobmV3RGVmYXVsdFByb3BzKSB7XG4gICAgICAgICAgZXJyb3IoJ1JlYWN0LmxhenkoLi4uKTogSXQgaXMgbm90IHN1cHBvcnRlZCB0byBhc3NpZ24gYGRlZmF1bHRQcm9wc2AgdG8gJyArICdhIGxhenkgY29tcG9uZW50IGltcG9ydC4gRWl0aGVyIHNwZWNpZnkgdGhlbSB3aGVyZSB0aGUgY29tcG9uZW50ICcgKyAnaXMgZGVmaW5lZCwgb3IgY3JlYXRlIGEgd3JhcHBpbmcgY29tcG9uZW50IGFyb3VuZCBpdC4nKTtcblxuICAgICAgICAgIGRlZmF1bHRQcm9wcyA9IG5ld0RlZmF1bHRQcm9wczsgLy8gTWF0Y2ggcHJvZHVjdGlvbiBiZWhhdmlvciBtb3JlIGNsb3NlbHk6XG4gICAgICAgICAgLy8gJEZsb3dGaXhNZVxuXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGxhenlUeXBlLCAnZGVmYXVsdFByb3BzJywge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgcHJvcFR5cGVzOiB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHByb3BUeXBlcztcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobmV3UHJvcFR5cGVzKSB7XG4gICAgICAgICAgZXJyb3IoJ1JlYWN0LmxhenkoLi4uKTogSXQgaXMgbm90IHN1cHBvcnRlZCB0byBhc3NpZ24gYHByb3BUeXBlc2AgdG8gJyArICdhIGxhenkgY29tcG9uZW50IGltcG9ydC4gRWl0aGVyIHNwZWNpZnkgdGhlbSB3aGVyZSB0aGUgY29tcG9uZW50ICcgKyAnaXMgZGVmaW5lZCwgb3IgY3JlYXRlIGEgd3JhcHBpbmcgY29tcG9uZW50IGFyb3VuZCBpdC4nKTtcblxuICAgICAgICAgIHByb3BUeXBlcyA9IG5ld1Byb3BUeXBlczsgLy8gTWF0Y2ggcHJvZHVjdGlvbiBiZWhhdmlvciBtb3JlIGNsb3NlbHk6XG4gICAgICAgICAgLy8gJEZsb3dGaXhNZVxuXG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGxhenlUeXBlLCAncHJvcFR5cGVzJywge1xuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gbGF6eVR5cGU7XG59XG5cbmZ1bmN0aW9uIGZvcndhcmRSZWYocmVuZGVyKSB7XG4gIHtcbiAgICBpZiAocmVuZGVyICE9IG51bGwgJiYgcmVuZGVyLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUpIHtcbiAgICAgIGVycm9yKCdmb3J3YXJkUmVmIHJlcXVpcmVzIGEgcmVuZGVyIGZ1bmN0aW9uIGJ1dCByZWNlaXZlZCBhIGBtZW1vYCAnICsgJ2NvbXBvbmVudC4gSW5zdGVhZCBvZiBmb3J3YXJkUmVmKG1lbW8oLi4uKSksIHVzZSAnICsgJ21lbW8oZm9yd2FyZFJlZiguLi4pKS4nKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiByZW5kZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGVycm9yKCdmb3J3YXJkUmVmIHJlcXVpcmVzIGEgcmVuZGVyIGZ1bmN0aW9uIGJ1dCB3YXMgZ2l2ZW4gJXMuJywgcmVuZGVyID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIHJlbmRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChyZW5kZXIubGVuZ3RoICE9PSAwICYmIHJlbmRlci5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgZXJyb3IoJ2ZvcndhcmRSZWYgcmVuZGVyIGZ1bmN0aW9ucyBhY2NlcHQgZXhhY3RseSB0d28gcGFyYW1ldGVyczogcHJvcHMgYW5kIHJlZi4gJXMnLCByZW5kZXIubGVuZ3RoID09PSAxID8gJ0RpZCB5b3UgZm9yZ2V0IHRvIHVzZSB0aGUgcmVmIHBhcmFtZXRlcj8nIDogJ0FueSBhZGRpdGlvbmFsIHBhcmFtZXRlciB3aWxsIGJlIHVuZGVmaW5lZC4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocmVuZGVyICE9IG51bGwpIHtcbiAgICAgIGlmIChyZW5kZXIuZGVmYXVsdFByb3BzICE9IG51bGwgfHwgcmVuZGVyLnByb3BUeXBlcyAhPSBudWxsKSB7XG4gICAgICAgIGVycm9yKCdmb3J3YXJkUmVmIHJlbmRlciBmdW5jdGlvbnMgZG8gbm90IHN1cHBvcnQgcHJvcFR5cGVzIG9yIGRlZmF1bHRQcm9wcy4gJyArICdEaWQgeW91IGFjY2lkZW50YWxseSBwYXNzIGEgUmVhY3QgY29tcG9uZW50PycpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBlbGVtZW50VHlwZSA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSxcbiAgICByZW5kZXI6IHJlbmRlclxuICB9O1xuXG4gIHtcbiAgICB2YXIgb3duTmFtZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudFR5cGUsICdkaXNwbGF5TmFtZScsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBvd25OYW1lO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgb3duTmFtZSA9IG5hbWU7IC8vIFRoZSBpbm5lciBjb21wb25lbnQgc2hvdWxkbid0IGluaGVyaXQgdGhpcyBkaXNwbGF5IG5hbWUgaW4gbW9zdCBjYXNlcyxcbiAgICAgICAgLy8gYmVjYXVzZSB0aGUgY29tcG9uZW50IG1heSBiZSB1c2VkIGVsc2V3aGVyZS5cbiAgICAgICAgLy8gQnV0IGl0J3MgbmljZSBmb3IgYW5vbnltb3VzIGZ1bmN0aW9ucyB0byBpbmhlcml0IHRoZSBuYW1lLFxuICAgICAgICAvLyBzbyB0aGF0IG91ciBjb21wb25lbnQtc3RhY2sgZ2VuZXJhdGlvbiBsb2dpYyB3aWxsIGRpc3BsYXkgdGhlaXIgZnJhbWVzLlxuICAgICAgICAvLyBBbiBhbm9ueW1vdXMgZnVuY3Rpb24gZ2VuZXJhbGx5IHN1Z2dlc3RzIGEgcGF0dGVybiBsaWtlOlxuICAgICAgICAvLyAgIFJlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IHsuLi59KTtcbiAgICAgICAgLy8gVGhpcyBraW5kIG9mIGlubmVyIGZ1bmN0aW9uIGlzIG5vdCB1c2VkIGVsc2V3aGVyZSBzbyB0aGUgc2lkZSBlZmZlY3QgaXMgb2theS5cblxuICAgICAgICBpZiAoIXJlbmRlci5uYW1lICYmICFyZW5kZXIuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgICByZW5kZXIuZGlzcGxheU5hbWUgPSBuYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZWxlbWVudFR5cGU7XG59XG5cbnZhciBSRUFDVF9NT0RVTEVfUkVGRVJFTkNFO1xuXG57XG4gIFJFQUNUX01PRFVMRV9SRUZFUkVOQ0UgPSBTeW1ib2wuZm9yKCdyZWFjdC5tb2R1bGUucmVmZXJlbmNlJyk7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRFbGVtZW50VHlwZSh0eXBlKSB7XG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyBOb3RlOiB0eXBlb2YgbWlnaHQgYmUgb3RoZXIgdGhhbiAnc3ltYm9sJyBvciAnbnVtYmVyJyAoZS5nLiBpZiBpdCdzIGEgcG9seWZpbGwpLlxuXG5cbiAgaWYgKHR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfUFJPRklMRVJfVFlQRSB8fCBlbmFibGVEZWJ1Z1RyYWNpbmcgIHx8IHR5cGUgPT09IFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgfHwgdHlwZSA9PT0gUkVBQ1RfU1VTUEVOU0VfVFlQRSB8fCB0eXBlID09PSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUgfHwgZW5hYmxlTGVnYWN5SGlkZGVuICB8fCB0eXBlID09PSBSRUFDVF9PRkZTQ1JFRU5fVFlQRSB8fCBlbmFibGVTY29wZUFQSSAgfHwgZW5hYmxlQ2FjaGVFbGVtZW50ICB8fCBlbmFibGVUcmFuc2l0aW9uVHJhY2luZyApIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCkge1xuICAgIGlmICh0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9MQVpZX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfTUVNT19UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX1BST1ZJREVSX1RZUEUgfHwgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfQ09OVEVYVF9UWVBFIHx8IHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUgfHwgLy8gVGhpcyBuZWVkcyB0byBpbmNsdWRlIGFsbCBwb3NzaWJsZSBtb2R1bGUgcmVmZXJlbmNlIG9iamVjdFxuICAgIC8vIHR5cGVzIHN1cHBvcnRlZCBieSBhbnkgRmxpZ2h0IGNvbmZpZ3VyYXRpb24gYW55d2hlcmUgc2luY2VcbiAgICAvLyB3ZSBkb24ndCBrbm93IHdoaWNoIEZsaWdodCBidWlsZCB0aGlzIHdpbGwgZW5kIHVwIGJlaW5nIHVzZWRcbiAgICAvLyB3aXRoLlxuICAgIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX01PRFVMRV9SRUZFUkVOQ0UgfHwgdHlwZS5nZXRNb2R1bGVJZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG1lbW8odHlwZSwgY29tcGFyZSkge1xuICB7XG4gICAgaWYgKCFpc1ZhbGlkRWxlbWVudFR5cGUodHlwZSkpIHtcbiAgICAgIGVycm9yKCdtZW1vOiBUaGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIGNvbXBvbmVudC4gSW5zdGVhZCAnICsgJ3JlY2VpdmVkOiAlcycsIHR5cGUgPT09IG51bGwgPyAnbnVsbCcgOiB0eXBlb2YgdHlwZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGVsZW1lbnRUeXBlID0ge1xuICAgICQkdHlwZW9mOiBSRUFDVF9NRU1PX1RZUEUsXG4gICAgdHlwZTogdHlwZSxcbiAgICBjb21wYXJlOiBjb21wYXJlID09PSB1bmRlZmluZWQgPyBudWxsIDogY29tcGFyZVxuICB9O1xuXG4gIHtcbiAgICB2YXIgb3duTmFtZTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWxlbWVudFR5cGUsICdkaXNwbGF5TmFtZScsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBvd25OYW1lO1xuICAgICAgfSxcbiAgICAgIHNldDogZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgb3duTmFtZSA9IG5hbWU7IC8vIFRoZSBpbm5lciBjb21wb25lbnQgc2hvdWxkbid0IGluaGVyaXQgdGhpcyBkaXNwbGF5IG5hbWUgaW4gbW9zdCBjYXNlcyxcbiAgICAgICAgLy8gYmVjYXVzZSB0aGUgY29tcG9uZW50IG1heSBiZSB1c2VkIGVsc2V3aGVyZS5cbiAgICAgICAgLy8gQnV0IGl0J3MgbmljZSBmb3IgYW5vbnltb3VzIGZ1bmN0aW9ucyB0byBpbmhlcml0IHRoZSBuYW1lLFxuICAgICAgICAvLyBzbyB0aGF0IG91ciBjb21wb25lbnQtc3RhY2sgZ2VuZXJhdGlvbiBsb2dpYyB3aWxsIGRpc3BsYXkgdGhlaXIgZnJhbWVzLlxuICAgICAgICAvLyBBbiBhbm9ueW1vdXMgZnVuY3Rpb24gZ2VuZXJhbGx5IHN1Z2dlc3RzIGEgcGF0dGVybiBsaWtlOlxuICAgICAgICAvLyAgIFJlYWN0Lm1lbW8oKHByb3BzKSA9PiB7Li4ufSk7XG4gICAgICAgIC8vIFRoaXMga2luZCBvZiBpbm5lciBmdW5jdGlvbiBpcyBub3QgdXNlZCBlbHNld2hlcmUgc28gdGhlIHNpZGUgZWZmZWN0IGlzIG9rYXkuXG5cbiAgICAgICAgaWYgKCF0eXBlLm5hbWUgJiYgIXR5cGUuZGlzcGxheU5hbWUpIHtcbiAgICAgICAgICB0eXBlLmRpc3BsYXlOYW1lID0gbmFtZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnRUeXBlO1xufVxuXG5mdW5jdGlvbiByZXNvbHZlRGlzcGF0Y2hlcigpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSBSZWFjdEN1cnJlbnREaXNwYXRjaGVyLmN1cnJlbnQ7XG5cbiAge1xuICAgIGlmIChkaXNwYXRjaGVyID09PSBudWxsKSB7XG4gICAgICBlcnJvcignSW52YWxpZCBob29rIGNhbGwuIEhvb2tzIGNhbiBvbmx5IGJlIGNhbGxlZCBpbnNpZGUgb2YgdGhlIGJvZHkgb2YgYSBmdW5jdGlvbiBjb21wb25lbnQuIFRoaXMgY291bGQgaGFwcGVuIGZvcicgKyAnIG9uZSBvZiB0aGUgZm9sbG93aW5nIHJlYXNvbnM6XFxuJyArICcxLiBZb3UgbWlnaHQgaGF2ZSBtaXNtYXRjaGluZyB2ZXJzaW9ucyBvZiBSZWFjdCBhbmQgdGhlIHJlbmRlcmVyIChzdWNoIGFzIFJlYWN0IERPTSlcXG4nICsgJzIuIFlvdSBtaWdodCBiZSBicmVha2luZyB0aGUgUnVsZXMgb2YgSG9va3NcXG4nICsgJzMuIFlvdSBtaWdodCBoYXZlIG1vcmUgdGhhbiBvbmUgY29weSBvZiBSZWFjdCBpbiB0aGUgc2FtZSBhcHBcXG4nICsgJ1NlZSBodHRwczovL3JlYWN0anMub3JnL2xpbmsvaW52YWxpZC1ob29rLWNhbGwgZm9yIHRpcHMgYWJvdXQgaG93IHRvIGRlYnVnIGFuZCBmaXggdGhpcyBwcm9ibGVtLicpO1xuICAgIH1cbiAgfSAvLyBXaWxsIHJlc3VsdCBpbiBhIG51bGwgYWNjZXNzIGVycm9yIGlmIGFjY2Vzc2VkIG91dHNpZGUgcmVuZGVyIHBoYXNlLiBXZVxuICAvLyBpbnRlbnRpb25hbGx5IGRvbid0IHRocm93IG91ciBvd24gZXJyb3IgYmVjYXVzZSB0aGlzIGlzIGluIGEgaG90IHBhdGguXG4gIC8vIEFsc28gaGVscHMgZW5zdXJlIHRoaXMgaXMgaW5saW5lZC5cblxuXG4gIHJldHVybiBkaXNwYXRjaGVyO1xufVxuZnVuY3Rpb24gdXNlQ29udGV4dChDb250ZXh0KSB7XG4gIHZhciBkaXNwYXRjaGVyID0gcmVzb2x2ZURpc3BhdGNoZXIoKTtcblxuICB7XG4gICAgLy8gVE9ETzogYWRkIGEgbW9yZSBnZW5lcmljIHdhcm5pbmcgZm9yIGludmFsaWQgdmFsdWVzLlxuICAgIGlmIChDb250ZXh0Ll9jb250ZXh0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciByZWFsQ29udGV4dCA9IENvbnRleHQuX2NvbnRleHQ7IC8vIERvbid0IGRlZHVwbGljYXRlIGJlY2F1c2UgdGhpcyBsZWdpdGltYXRlbHkgY2F1c2VzIGJ1Z3NcbiAgICAgIC8vIGFuZCBub2JvZHkgc2hvdWxkIGJlIHVzaW5nIHRoaXMgaW4gZXhpc3RpbmcgY29kZS5cblxuICAgICAgaWYgKHJlYWxDb250ZXh0LkNvbnN1bWVyID09PSBDb250ZXh0KSB7XG4gICAgICAgIGVycm9yKCdDYWxsaW5nIHVzZUNvbnRleHQoQ29udGV4dC5Db25zdW1lcikgaXMgbm90IHN1cHBvcnRlZCwgbWF5IGNhdXNlIGJ1Z3MsIGFuZCB3aWxsIGJlICcgKyAncmVtb3ZlZCBpbiBhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiBEaWQgeW91IG1lYW4gdG8gY2FsbCB1c2VDb250ZXh0KENvbnRleHQpIGluc3RlYWQ/Jyk7XG4gICAgICB9IGVsc2UgaWYgKHJlYWxDb250ZXh0LlByb3ZpZGVyID09PSBDb250ZXh0KSB7XG4gICAgICAgIGVycm9yKCdDYWxsaW5nIHVzZUNvbnRleHQoQ29udGV4dC5Qcm92aWRlcikgaXMgbm90IHN1cHBvcnRlZC4gJyArICdEaWQgeW91IG1lYW4gdG8gY2FsbCB1c2VDb250ZXh0KENvbnRleHQpIGluc3RlYWQ/Jyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGRpc3BhdGNoZXIudXNlQ29udGV4dChDb250ZXh0KTtcbn1cbmZ1bmN0aW9uIHVzZVN0YXRlKGluaXRpYWxTdGF0ZSkge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZVN0YXRlKGluaXRpYWxTdGF0ZSk7XG59XG5mdW5jdGlvbiB1c2VSZWR1Y2VyKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSByZXNvbHZlRGlzcGF0Y2hlcigpO1xuICByZXR1cm4gZGlzcGF0Y2hlci51c2VSZWR1Y2VyKHJlZHVjZXIsIGluaXRpYWxBcmcsIGluaXQpO1xufVxuZnVuY3Rpb24gdXNlUmVmKGluaXRpYWxWYWx1ZSkge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZVJlZihpbml0aWFsVmFsdWUpO1xufVxuZnVuY3Rpb24gdXNlRWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZUVmZmVjdChjcmVhdGUsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXNlSW5zZXJ0aW9uRWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZUluc2VydGlvbkVmZmVjdChjcmVhdGUsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXNlTGF5b3V0RWZmZWN0KGNyZWF0ZSwgZGVwcykge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZUxheW91dEVmZmVjdChjcmVhdGUsIGRlcHMpO1xufVxuZnVuY3Rpb24gdXNlQ2FsbGJhY2soY2FsbGJhY2ssIGRlcHMpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSByZXNvbHZlRGlzcGF0Y2hlcigpO1xuICByZXR1cm4gZGlzcGF0Y2hlci51c2VDYWxsYmFjayhjYWxsYmFjaywgZGVwcyk7XG59XG5mdW5jdGlvbiB1c2VNZW1vKGNyZWF0ZSwgZGVwcykge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZU1lbW8oY3JlYXRlLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVzZUltcGVyYXRpdmVIYW5kbGUocmVmLCBjcmVhdGUsIGRlcHMpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSByZXNvbHZlRGlzcGF0Y2hlcigpO1xuICByZXR1cm4gZGlzcGF0Y2hlci51c2VJbXBlcmF0aXZlSGFuZGxlKHJlZiwgY3JlYXRlLCBkZXBzKTtcbn1cbmZ1bmN0aW9uIHVzZURlYnVnVmFsdWUodmFsdWUsIGZvcm1hdHRlckZuKSB7XG4gIHtcbiAgICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gICAgcmV0dXJuIGRpc3BhdGNoZXIudXNlRGVidWdWYWx1ZSh2YWx1ZSwgZm9ybWF0dGVyRm4pO1xuICB9XG59XG5mdW5jdGlvbiB1c2VUcmFuc2l0aW9uKCkge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZVRyYW5zaXRpb24oKTtcbn1cbmZ1bmN0aW9uIHVzZURlZmVycmVkVmFsdWUodmFsdWUpIHtcbiAgdmFyIGRpc3BhdGNoZXIgPSByZXNvbHZlRGlzcGF0Y2hlcigpO1xuICByZXR1cm4gZGlzcGF0Y2hlci51c2VEZWZlcnJlZFZhbHVlKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHVzZUlkKCkge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZUlkKCk7XG59XG5mdW5jdGlvbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZShzdWJzY3JpYmUsIGdldFNuYXBzaG90LCBnZXRTZXJ2ZXJTbmFwc2hvdCkge1xuICB2YXIgZGlzcGF0Y2hlciA9IHJlc29sdmVEaXNwYXRjaGVyKCk7XG4gIHJldHVybiBkaXNwYXRjaGVyLnVzZVN5bmNFeHRlcm5hbFN0b3JlKHN1YnNjcmliZSwgZ2V0U25hcHNob3QsIGdldFNlcnZlclNuYXBzaG90KTtcbn1cblxuLy8gSGVscGVycyB0byBwYXRjaCBjb25zb2xlLmxvZ3MgdG8gYXZvaWQgbG9nZ2luZyBkdXJpbmcgc2lkZS1lZmZlY3QgZnJlZVxuLy8gcmVwbGF5aW5nIG9uIHJlbmRlciBmdW5jdGlvbi4gVGhpcyBjdXJyZW50bHkgb25seSBwYXRjaGVzIHRoZSBvYmplY3Rcbi8vIGxhemlseSB3aGljaCB3b24ndCBjb3ZlciBpZiB0aGUgbG9nIGZ1bmN0aW9uIHdhcyBleHRyYWN0ZWQgZWFnZXJseS5cbi8vIFdlIGNvdWxkIGFsc28gZWFnZXJseSBwYXRjaCB0aGUgbWV0aG9kLlxudmFyIGRpc2FibGVkRGVwdGggPSAwO1xudmFyIHByZXZMb2c7XG52YXIgcHJldkluZm87XG52YXIgcHJldldhcm47XG52YXIgcHJldkVycm9yO1xudmFyIHByZXZHcm91cDtcbnZhciBwcmV2R3JvdXBDb2xsYXBzZWQ7XG52YXIgcHJldkdyb3VwRW5kO1xuXG5mdW5jdGlvbiBkaXNhYmxlZExvZygpIHt9XG5cbmRpc2FibGVkTG9nLl9fcmVhY3REaXNhYmxlZExvZyA9IHRydWU7XG5mdW5jdGlvbiBkaXNhYmxlTG9ncygpIHtcbiAge1xuICAgIGlmIChkaXNhYmxlZERlcHRoID09PSAwKSB7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSByZWFjdC1pbnRlcm5hbC9uby1wcm9kdWN0aW9uLWxvZ2dpbmcgKi9cbiAgICAgIHByZXZMb2cgPSBjb25zb2xlLmxvZztcbiAgICAgIHByZXZJbmZvID0gY29uc29sZS5pbmZvO1xuICAgICAgcHJldldhcm4gPSBjb25zb2xlLndhcm47XG4gICAgICBwcmV2RXJyb3IgPSBjb25zb2xlLmVycm9yO1xuICAgICAgcHJldkdyb3VwID0gY29uc29sZS5ncm91cDtcbiAgICAgIHByZXZHcm91cENvbGxhcHNlZCA9IGNvbnNvbGUuZ3JvdXBDb2xsYXBzZWQ7XG4gICAgICBwcmV2R3JvdXBFbmQgPSBjb25zb2xlLmdyb3VwRW5kOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE5MDk5XG5cbiAgICAgIHZhciBwcm9wcyA9IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogZGlzYWJsZWRMb2csXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9OyAvLyAkRmxvd0ZpeE1lIEZsb3cgdGhpbmtzIGNvbnNvbGUgaXMgaW1tdXRhYmxlLlxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhjb25zb2xlLCB7XG4gICAgICAgIGluZm86IHByb3BzLFxuICAgICAgICBsb2c6IHByb3BzLFxuICAgICAgICB3YXJuOiBwcm9wcyxcbiAgICAgICAgZXJyb3I6IHByb3BzLFxuICAgICAgICBncm91cDogcHJvcHMsXG4gICAgICAgIGdyb3VwQ29sbGFwc2VkOiBwcm9wcyxcbiAgICAgICAgZ3JvdXBFbmQ6IHByb3BzXG4gICAgICB9KTtcbiAgICAgIC8qIGVzbGludC1lbmFibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gICAgfVxuXG4gICAgZGlzYWJsZWREZXB0aCsrO1xuICB9XG59XG5mdW5jdGlvbiByZWVuYWJsZUxvZ3MoKSB7XG4gIHtcbiAgICBkaXNhYmxlZERlcHRoLS07XG5cbiAgICBpZiAoZGlzYWJsZWREZXB0aCA9PT0gMCkge1xuICAgICAgLyogZXNsaW50LWRpc2FibGUgcmVhY3QtaW50ZXJuYWwvbm8tcHJvZHVjdGlvbi1sb2dnaW5nICovXG4gICAgICB2YXIgcHJvcHMgPSB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgIH07IC8vICRGbG93Rml4TWUgRmxvdyB0aGlua3MgY29uc29sZSBpcyBpbW11dGFibGUuXG5cbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGNvbnNvbGUsIHtcbiAgICAgICAgbG9nOiBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgdmFsdWU6IHByZXZMb2dcbiAgICAgICAgfSksXG4gICAgICAgIGluZm86IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkluZm9cbiAgICAgICAgfSksXG4gICAgICAgIHdhcm46IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldldhcm5cbiAgICAgICAgfSksXG4gICAgICAgIGVycm9yOiBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgdmFsdWU6IHByZXZFcnJvclxuICAgICAgICB9KSxcbiAgICAgICAgZ3JvdXA6IGFzc2lnbih7fSwgcHJvcHMsIHtcbiAgICAgICAgICB2YWx1ZTogcHJldkdyb3VwXG4gICAgICAgIH0pLFxuICAgICAgICBncm91cENvbGxhcHNlZDogYXNzaWduKHt9LCBwcm9wcywge1xuICAgICAgICAgIHZhbHVlOiBwcmV2R3JvdXBDb2xsYXBzZWRcbiAgICAgICAgfSksXG4gICAgICAgIGdyb3VwRW5kOiBhc3NpZ24oe30sIHByb3BzLCB7XG4gICAgICAgICAgdmFsdWU6IHByZXZHcm91cEVuZFxuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgICAvKiBlc2xpbnQtZW5hYmxlIHJlYWN0LWludGVybmFsL25vLXByb2R1Y3Rpb24tbG9nZ2luZyAqL1xuICAgIH1cblxuICAgIGlmIChkaXNhYmxlZERlcHRoIDwgMCkge1xuICAgICAgZXJyb3IoJ2Rpc2FibGVkRGVwdGggZmVsbCBiZWxvdyB6ZXJvLiAnICsgJ1RoaXMgaXMgYSBidWcgaW4gUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxID0gUmVhY3RTaGFyZWRJbnRlcm5hbHMuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcjtcbnZhciBwcmVmaXg7XG5mdW5jdGlvbiBkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZShuYW1lLCBzb3VyY2UsIG93bmVyRm4pIHtcbiAge1xuICAgIGlmIChwcmVmaXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gRXh0cmFjdCB0aGUgVk0gc3BlY2lmaWMgcHJlZml4IHVzZWQgYnkgZWFjaCBsaW5lLlxuICAgICAgdHJ5IHtcbiAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgIH0gY2F0Y2ggKHgpIHtcbiAgICAgICAgdmFyIG1hdGNoID0geC5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtcbiAgICAgICAgcHJlZml4ID0gbWF0Y2ggJiYgbWF0Y2hbMV0gfHwgJyc7XG4gICAgICB9XG4gICAgfSAvLyBXZSB1c2UgdGhlIHByZWZpeCB0byBlbnN1cmUgb3VyIHN0YWNrcyBsaW5lIHVwIHdpdGggbmF0aXZlIHN0YWNrIGZyYW1lcy5cblxuXG4gICAgcmV0dXJuICdcXG4nICsgcHJlZml4ICsgbmFtZTtcbiAgfVxufVxudmFyIHJlZW50cnkgPSBmYWxzZTtcbnZhciBjb21wb25lbnRGcmFtZUNhY2hlO1xuXG57XG4gIHZhciBQb3NzaWJseVdlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyA/IFdlYWtNYXAgOiBNYXA7XG4gIGNvbXBvbmVudEZyYW1lQ2FjaGUgPSBuZXcgUG9zc2libHlXZWFrTWFwKCk7XG59XG5cbmZ1bmN0aW9uIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUoZm4sIGNvbnN0cnVjdCkge1xuICAvLyBJZiBzb21ldGhpbmcgYXNrZWQgZm9yIGEgc3RhY2sgaW5zaWRlIGEgZmFrZSByZW5kZXIsIGl0IHNob3VsZCBnZXQgaWdub3JlZC5cbiAgaWYgKCAhZm4gfHwgcmVlbnRyeSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHtcbiAgICB2YXIgZnJhbWUgPSBjb21wb25lbnRGcmFtZUNhY2hlLmdldChmbik7XG5cbiAgICBpZiAoZnJhbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGZyYW1lO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb250cm9sO1xuICByZWVudHJ5ID0gdHJ1ZTtcbiAgdmFyIHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2UgPSBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZTsgLy8gJEZsb3dGaXhNZSBJdCBkb2VzIGFjY2VwdCB1bmRlZmluZWQuXG5cbiAgRXJyb3IucHJlcGFyZVN0YWNrVHJhY2UgPSB1bmRlZmluZWQ7XG4gIHZhciBwcmV2aW91c0Rpc3BhdGNoZXI7XG5cbiAge1xuICAgIHByZXZpb3VzRGlzcGF0Y2hlciA9IFJlYWN0Q3VycmVudERpc3BhdGNoZXIkMS5jdXJyZW50OyAvLyBTZXQgdGhlIGRpc3BhdGNoZXIgaW4gREVWIGJlY2F1c2UgdGhpcyBtaWdodCBiZSBjYWxsIGluIHRoZSByZW5kZXIgZnVuY3Rpb25cbiAgICAvLyBmb3Igd2FybmluZ3MuXG5cbiAgICBSZWFjdEN1cnJlbnREaXNwYXRjaGVyJDEuY3VycmVudCA9IG51bGw7XG4gICAgZGlzYWJsZUxvZ3MoKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgLy8gVGhpcyBzaG91bGQgdGhyb3cuXG4gICAgaWYgKGNvbnN0cnVjdCkge1xuICAgICAgLy8gU29tZXRoaW5nIHNob3VsZCBiZSBzZXR0aW5nIHRoZSBwcm9wcyBpbiB0aGUgY29uc3RydWN0b3IuXG4gICAgICB2YXIgRmFrZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoKTtcbiAgICAgIH07IC8vICRGbG93Rml4TWVcblxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmFrZS5wcm90b3R5cGUsICdwcm9wcycsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgLy8gV2UgdXNlIGEgdGhyb3dpbmcgc2V0dGVyIGluc3RlYWQgb2YgZnJvemVuIG9yIG5vbi13cml0YWJsZSBwcm9wc1xuICAgICAgICAgIC8vIGJlY2F1c2UgdGhhdCB3b24ndCB0aHJvdyBpbiBhIG5vbi1zdHJpY3QgbW9kZSBmdW5jdGlvbi5cbiAgICAgICAgICB0aHJvdyBFcnJvcigpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSAnb2JqZWN0JyAmJiBSZWZsZWN0LmNvbnN0cnVjdCkge1xuICAgICAgICAvLyBXZSBjb25zdHJ1Y3QgYSBkaWZmZXJlbnQgY29udHJvbCBmb3IgdGhpcyBjYXNlIHRvIGluY2x1ZGUgYW55IGV4dHJhXG4gICAgICAgIC8vIGZyYW1lcyBhZGRlZCBieSB0aGUgY29uc3RydWN0IGNhbGwuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgUmVmbGVjdC5jb25zdHJ1Y3QoRmFrZSwgW10pO1xuICAgICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgICAgY29udHJvbCA9IHg7XG4gICAgICAgIH1cblxuICAgICAgICBSZWZsZWN0LmNvbnN0cnVjdChmbiwgW10sIEZha2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBGYWtlLmNhbGwoKTtcbiAgICAgICAgfSBjYXRjaCAoeCkge1xuICAgICAgICAgIGNvbnRyb2wgPSB4O1xuICAgICAgICB9XG5cbiAgICAgICAgZm4uY2FsbChGYWtlLnByb3RvdHlwZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHRocm93IEVycm9yKCk7XG4gICAgICB9IGNhdGNoICh4KSB7XG4gICAgICAgIGNvbnRyb2wgPSB4O1xuICAgICAgfVxuXG4gICAgICBmbigpO1xuICAgIH1cbiAgfSBjYXRjaCAoc2FtcGxlKSB7XG4gICAgLy8gVGhpcyBpcyBpbmxpbmVkIG1hbnVhbGx5IGJlY2F1c2UgY2xvc3VyZSBkb2Vzbid0IGRvIGl0IGZvciB1cy5cbiAgICBpZiAoc2FtcGxlICYmIGNvbnRyb2wgJiYgdHlwZW9mIHNhbXBsZS5zdGFjayA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIFRoaXMgZXh0cmFjdHMgdGhlIGZpcnN0IGZyYW1lIGZyb20gdGhlIHNhbXBsZSB0aGF0IGlzbid0IGFsc28gaW4gdGhlIGNvbnRyb2wuXG4gICAgICAvLyBTa2lwcGluZyBvbmUgZnJhbWUgdGhhdCB3ZSBhc3N1bWUgaXMgdGhlIGZyYW1lIHRoYXQgY2FsbHMgdGhlIHR3by5cbiAgICAgIHZhciBzYW1wbGVMaW5lcyA9IHNhbXBsZS5zdGFjay5zcGxpdCgnXFxuJyk7XG4gICAgICB2YXIgY29udHJvbExpbmVzID0gY29udHJvbC5zdGFjay5zcGxpdCgnXFxuJyk7XG4gICAgICB2YXIgcyA9IHNhbXBsZUxpbmVzLmxlbmd0aCAtIDE7XG4gICAgICB2YXIgYyA9IGNvbnRyb2xMaW5lcy5sZW5ndGggLSAxO1xuXG4gICAgICB3aGlsZSAocyA+PSAxICYmIGMgPj0gMCAmJiBzYW1wbGVMaW5lc1tzXSAhPT0gY29udHJvbExpbmVzW2NdKSB7XG4gICAgICAgIC8vIFdlIGV4cGVjdCBhdCBsZWFzdCBvbmUgc3RhY2sgZnJhbWUgdG8gYmUgc2hhcmVkLlxuICAgICAgICAvLyBUeXBpY2FsbHkgdGhpcyB3aWxsIGJlIHRoZSByb290IG1vc3Qgb25lLiBIb3dldmVyLCBzdGFjayBmcmFtZXMgbWF5IGJlXG4gICAgICAgIC8vIGN1dCBvZmYgZHVlIHRvIG1heGltdW0gc3RhY2sgbGltaXRzLiBJbiB0aGlzIGNhc2UsIG9uZSBtYXliZSBjdXQgb2ZmXG4gICAgICAgIC8vIGVhcmxpZXIgdGhhbiB0aGUgb3RoZXIuIFdlIGFzc3VtZSB0aGF0IHRoZSBzYW1wbGUgaXMgbG9uZ2VyIG9yIHRoZSBzYW1lXG4gICAgICAgIC8vIGFuZCB0aGVyZSBmb3IgY3V0IG9mZiBlYXJsaWVyLiBTbyB3ZSBzaG91bGQgZmluZCB0aGUgcm9vdCBtb3N0IGZyYW1lIGluXG4gICAgICAgIC8vIHRoZSBzYW1wbGUgc29tZXdoZXJlIGluIHRoZSBjb250cm9sLlxuICAgICAgICBjLS07XG4gICAgICB9XG5cbiAgICAgIGZvciAoOyBzID49IDEgJiYgYyA+PSAwOyBzLS0sIGMtLSkge1xuICAgICAgICAvLyBOZXh0IHdlIGZpbmQgdGhlIGZpcnN0IG9uZSB0aGF0IGlzbid0IHRoZSBzYW1lIHdoaWNoIHNob3VsZCBiZSB0aGVcbiAgICAgICAgLy8gZnJhbWUgdGhhdCBjYWxsZWQgb3VyIHNhbXBsZSBmdW5jdGlvbiBhbmQgdGhlIGNvbnRyb2wuXG4gICAgICAgIGlmIChzYW1wbGVMaW5lc1tzXSAhPT0gY29udHJvbExpbmVzW2NdKSB7XG4gICAgICAgICAgLy8gSW4gVjgsIHRoZSBmaXJzdCBsaW5lIGlzIGRlc2NyaWJpbmcgdGhlIG1lc3NhZ2UgYnV0IG90aGVyIFZNcyBkb24ndC5cbiAgICAgICAgICAvLyBJZiB3ZSdyZSBhYm91dCB0byByZXR1cm4gdGhlIGZpcnN0IGxpbmUsIGFuZCB0aGUgY29udHJvbCBpcyBhbHNvIG9uIHRoZSBzYW1lXG4gICAgICAgICAgLy8gbGluZSwgdGhhdCdzIGEgcHJldHR5IGdvb2QgaW5kaWNhdG9yIHRoYXQgb3VyIHNhbXBsZSB0aHJldyBhdCBzYW1lIGxpbmUgYXNcbiAgICAgICAgICAvLyB0aGUgY29udHJvbC4gSS5lLiBiZWZvcmUgd2UgZW50ZXJlZCB0aGUgc2FtcGxlIGZyYW1lLiBTbyB3ZSBpZ25vcmUgdGhpcyByZXN1bHQuXG4gICAgICAgICAgLy8gVGhpcyBjYW4gaGFwcGVuIGlmIHlvdSBwYXNzZWQgYSBjbGFzcyB0byBmdW5jdGlvbiBjb21wb25lbnQsIG9yIG5vbi1mdW5jdGlvbi5cbiAgICAgICAgICBpZiAocyAhPT0gMSB8fCBjICE9PSAxKSB7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgIHMtLTtcbiAgICAgICAgICAgICAgYy0tOyAvLyBXZSBtYXkgc3RpbGwgaGF2ZSBzaW1pbGFyIGludGVybWVkaWF0ZSBmcmFtZXMgZnJvbSB0aGUgY29uc3RydWN0IGNhbGwuXG4gICAgICAgICAgICAgIC8vIFRoZSBuZXh0IG9uZSB0aGF0IGlzbid0IHRoZSBzYW1lIHNob3VsZCBiZSBvdXIgbWF0Y2ggdGhvdWdoLlxuXG4gICAgICAgICAgICAgIGlmIChjIDwgMCB8fCBzYW1wbGVMaW5lc1tzXSAhPT0gY29udHJvbExpbmVzW2NdKSB7XG4gICAgICAgICAgICAgICAgLy8gVjggYWRkcyBhIFwibmV3XCIgcHJlZml4IGZvciBuYXRpdmUgY2xhc3Nlcy4gTGV0J3MgcmVtb3ZlIGl0IHRvIG1ha2UgaXQgcHJldHRpZXIuXG4gICAgICAgICAgICAgICAgdmFyIF9mcmFtZSA9ICdcXG4nICsgc2FtcGxlTGluZXNbc10ucmVwbGFjZSgnIGF0IG5ldyAnLCAnIGF0ICcpOyAvLyBJZiBvdXIgY29tcG9uZW50IGZyYW1lIGlzIGxhYmVsZWQgXCI8YW5vbnltb3VzPlwiXG4gICAgICAgICAgICAgICAgLy8gYnV0IHdlIGhhdmUgYSB1c2VyLXByb3ZpZGVkIFwiZGlzcGxheU5hbWVcIlxuICAgICAgICAgICAgICAgIC8vIHNwbGljZSBpdCBpbiB0byBtYWtlIHRoZSBzdGFjayBtb3JlIHJlYWRhYmxlLlxuXG5cbiAgICAgICAgICAgICAgICBpZiAoZm4uZGlzcGxheU5hbWUgJiYgX2ZyYW1lLmluY2x1ZGVzKCc8YW5vbnltb3VzPicpKSB7XG4gICAgICAgICAgICAgICAgICBfZnJhbWUgPSBfZnJhbWUucmVwbGFjZSgnPGFub255bW91cz4nLCBmbi5kaXNwbGF5TmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRGcmFtZUNhY2hlLnNldChmbiwgX2ZyYW1lKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IC8vIFJldHVybiB0aGUgbGluZSB3ZSBmb3VuZC5cblxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9mcmFtZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSB3aGlsZSAocyA+PSAxICYmIGMgPj0gMCk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgcmVlbnRyeSA9IGZhbHNlO1xuXG4gICAge1xuICAgICAgUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxLmN1cnJlbnQgPSBwcmV2aW91c0Rpc3BhdGNoZXI7XG4gICAgICByZWVuYWJsZUxvZ3MoKTtcbiAgICB9XG5cbiAgICBFcnJvci5wcmVwYXJlU3RhY2tUcmFjZSA9IHByZXZpb3VzUHJlcGFyZVN0YWNrVHJhY2U7XG4gIH0gLy8gRmFsbGJhY2sgdG8ganVzdCB1c2luZyB0aGUgbmFtZSBpZiB3ZSBjb3VsZG4ndCBtYWtlIGl0IHRocm93LlxuXG5cbiAgdmFyIG5hbWUgPSBmbiA/IGZuLmRpc3BsYXlOYW1lIHx8IGZuLm5hbWUgOiAnJztcbiAgdmFyIHN5bnRoZXRpY0ZyYW1lID0gbmFtZSA/IGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKG5hbWUpIDogJyc7XG5cbiAge1xuICAgIGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNvbXBvbmVudEZyYW1lQ2FjaGUuc2V0KGZuLCBzeW50aGV0aWNGcmFtZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN5bnRoZXRpY0ZyYW1lO1xufVxuZnVuY3Rpb24gZGVzY3JpYmVGdW5jdGlvbkNvbXBvbmVudEZyYW1lKGZuLCBzb3VyY2UsIG93bmVyRm4pIHtcbiAge1xuICAgIHJldHVybiBkZXNjcmliZU5hdGl2ZUNvbXBvbmVudEZyYW1lKGZuLCBmYWxzZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2hvdWxkQ29uc3RydWN0KENvbXBvbmVudCkge1xuICB2YXIgcHJvdG90eXBlID0gQ29tcG9uZW50LnByb3RvdHlwZTtcbiAgcmV0dXJuICEhKHByb3RvdHlwZSAmJiBwcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudCk7XG59XG5cbmZ1bmN0aW9uIGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVih0eXBlLCBzb3VyY2UsIG93bmVyRm4pIHtcblxuICBpZiAodHlwZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nKSB7XG4gICAge1xuICAgICAgcmV0dXJuIGRlc2NyaWJlTmF0aXZlQ29tcG9uZW50RnJhbWUodHlwZSwgc2hvdWxkQ29uc3RydWN0KHR5cGUpKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKHR5cGUpO1xuICB9XG5cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9UWVBFOlxuICAgICAgcmV0dXJuIGRlc2NyaWJlQnVpbHRJbkNvbXBvbmVudEZyYW1lKCdTdXNwZW5zZScpO1xuXG4gICAgY2FzZSBSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEU6XG4gICAgICByZXR1cm4gZGVzY3JpYmVCdWlsdEluQ29tcG9uZW50RnJhbWUoJ1N1c3BlbnNlTGlzdCcpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnb2JqZWN0Jykge1xuICAgIHN3aXRjaCAodHlwZS4kJHR5cGVvZikge1xuICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICByZXR1cm4gZGVzY3JpYmVGdW5jdGlvbkNvbXBvbmVudEZyYW1lKHR5cGUucmVuZGVyKTtcblxuICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgIC8vIE1lbW8gbWF5IGNvbnRhaW4gYW55IGNvbXBvbmVudCB0eXBlIHNvIHdlIHJlY3Vyc2l2ZWx5IHJlc29sdmUgaXQuXG4gICAgICAgIHJldHVybiBkZXNjcmliZVVua25vd25FbGVtZW50VHlwZUZyYW1lSW5ERVYodHlwZS50eXBlLCBzb3VyY2UsIG93bmVyRm4pO1xuXG4gICAgICBjYXNlIFJFQUNUX0xBWllfVFlQRTpcbiAgICAgICAge1xuICAgICAgICAgIHZhciBsYXp5Q29tcG9uZW50ID0gdHlwZTtcbiAgICAgICAgICB2YXIgcGF5bG9hZCA9IGxhenlDb21wb25lbnQuX3BheWxvYWQ7XG4gICAgICAgICAgdmFyIGluaXQgPSBsYXp5Q29tcG9uZW50Ll9pbml0O1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIExhenkgbWF5IGNvbnRhaW4gYW55IGNvbXBvbmVudCB0eXBlIHNvIHdlIHJlY3Vyc2l2ZWx5IHJlc29sdmUgaXQuXG4gICAgICAgICAgICByZXR1cm4gZGVzY3JpYmVVbmtub3duRWxlbWVudFR5cGVGcmFtZUluREVWKGluaXQocGF5bG9hZCksIHNvdXJjZSwgb3duZXJGbik7XG4gICAgICAgICAgfSBjYXRjaCAoeCkge31cbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAnJztcbn1cblxudmFyIGxvZ2dlZFR5cGVGYWlsdXJlcyA9IHt9O1xudmFyIFJlYWN0RGVidWdDdXJyZW50RnJhbWUkMSA9IFJlYWN0U2hhcmVkSW50ZXJuYWxzLlJlYWN0RGVidWdDdXJyZW50RnJhbWU7XG5cbmZ1bmN0aW9uIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KGVsZW1lbnQpIHtcbiAge1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB2YXIgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcbiAgICAgIHZhciBzdGFjayA9IGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVihlbGVtZW50LnR5cGUsIGVsZW1lbnQuX3NvdXJjZSwgb3duZXIgPyBvd25lci50eXBlIDogbnVsbCk7XG4gICAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lJDEuc2V0RXh0cmFTdGFja0ZyYW1lKHN0YWNrKTtcbiAgICB9IGVsc2Uge1xuICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSQxLnNldEV4dHJhU3RhY2tGcmFtZShudWxsKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tQcm9wVHlwZXModHlwZVNwZWNzLCB2YWx1ZXMsIGxvY2F0aW9uLCBjb21wb25lbnROYW1lLCBlbGVtZW50KSB7XG4gIHtcbiAgICAvLyAkRmxvd0ZpeE1lIFRoaXMgaXMgb2theSBidXQgRmxvdyBkb2Vzbid0IGtub3cgaXQuXG4gICAgdmFyIGhhcyA9IEZ1bmN0aW9uLmNhbGwuYmluZChoYXNPd25Qcm9wZXJ0eSk7XG5cbiAgICBmb3IgKHZhciB0eXBlU3BlY05hbWUgaW4gdHlwZVNwZWNzKSB7XG4gICAgICBpZiAoaGFzKHR5cGVTcGVjcywgdHlwZVNwZWNOYW1lKSkge1xuICAgICAgICB2YXIgZXJyb3IkMSA9IHZvaWQgMDsgLy8gUHJvcCB0eXBlIHZhbGlkYXRpb24gbWF5IHRocm93LiBJbiBjYXNlIHRoZXkgZG8sIHdlIGRvbid0IHdhbnQgdG9cbiAgICAgICAgLy8gZmFpbCB0aGUgcmVuZGVyIHBoYXNlIHdoZXJlIGl0IGRpZG4ndCBmYWlsIGJlZm9yZS4gU28gd2UgbG9nIGl0LlxuICAgICAgICAvLyBBZnRlciB0aGVzZSBoYXZlIGJlZW4gY2xlYW5lZCB1cCwgd2UnbGwgbGV0IHRoZW0gdGhyb3cuXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIGlzIGludGVudGlvbmFsbHkgYW4gaW52YXJpYW50IHRoYXQgZ2V0cyBjYXVnaHQuIEl0J3MgdGhlIHNhbWVcbiAgICAgICAgICAvLyBiZWhhdmlvciBhcyB3aXRob3V0IHRoaXMgc3RhdGVtZW50IGV4Y2VwdCB3aXRoIGEgYmV0dGVyIG1lc3NhZ2UuXG4gICAgICAgICAgaWYgKHR5cGVvZiB0eXBlU3BlY3NbdHlwZVNwZWNOYW1lXSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWludGVybmFsL3Byb2QtZXJyb3ItY29kZXNcbiAgICAgICAgICAgIHZhciBlcnIgPSBFcnJvcigoY29tcG9uZW50TmFtZSB8fCAnUmVhY3QgY2xhc3MnKSArICc6ICcgKyBsb2NhdGlvbiArICcgdHlwZSBgJyArIHR5cGVTcGVjTmFtZSArICdgIGlzIGludmFsaWQ7ICcgKyAnaXQgbXVzdCBiZSBhIGZ1bmN0aW9uLCB1c3VhbGx5IGZyb20gdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLCBidXQgcmVjZWl2ZWQgYCcgKyB0eXBlb2YgdHlwZVNwZWNzW3R5cGVTcGVjTmFtZV0gKyAnYC4nICsgJ1RoaXMgb2Z0ZW4gaGFwcGVucyBiZWNhdXNlIG9mIHR5cG9zIHN1Y2ggYXMgYFByb3BUeXBlcy5mdW5jdGlvbmAgaW5zdGVhZCBvZiBgUHJvcFR5cGVzLmZ1bmNgLicpO1xuICAgICAgICAgICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXJyb3IkMSA9IHR5cGVTcGVjc1t0eXBlU3BlY05hbWVdKHZhbHVlcywgdHlwZVNwZWNOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgbnVsbCwgJ1NFQ1JFVF9ET19OT1RfUEFTU19USElTX09SX1lPVV9XSUxMX0JFX0ZJUkVEJyk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXJyb3IkMSA9IGV4O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycm9yJDEgJiYgIShlcnJvciQxIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgICBlcnJvcignJXM6IHR5cGUgc3BlY2lmaWNhdGlvbiBvZiAlcycgKyAnIGAlc2AgaXMgaW52YWxpZDsgdGhlIHR5cGUgY2hlY2tlciAnICsgJ2Z1bmN0aW9uIG11c3QgcmV0dXJuIGBudWxsYCBvciBhbiBgRXJyb3JgIGJ1dCByZXR1cm5lZCBhICVzLiAnICsgJ1lvdSBtYXkgaGF2ZSBmb3Jnb3R0ZW4gdG8gcGFzcyBhbiBhcmd1bWVudCB0byB0aGUgdHlwZSBjaGVja2VyICcgKyAnY3JlYXRvciAoYXJyYXlPZiwgaW5zdGFuY2VPZiwgb2JqZWN0T2YsIG9uZU9mLCBvbmVPZlR5cGUsIGFuZCAnICsgJ3NoYXBlIGFsbCByZXF1aXJlIGFuIGFyZ3VtZW50KS4nLCBjb21wb25lbnROYW1lIHx8ICdSZWFjdCBjbGFzcycsIGxvY2F0aW9uLCB0eXBlU3BlY05hbWUsIHR5cGVvZiBlcnJvciQxKTtcblxuICAgICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50KG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVycm9yJDEgaW5zdGFuY2VvZiBFcnJvciAmJiAhKGVycm9yJDEubWVzc2FnZSBpbiBsb2dnZWRUeXBlRmFpbHVyZXMpKSB7XG4gICAgICAgICAgLy8gT25seSBtb25pdG9yIHRoaXMgZmFpbHVyZSBvbmNlIGJlY2F1c2UgdGhlcmUgdGVuZHMgdG8gYmUgYSBsb3Qgb2YgdGhlXG4gICAgICAgICAgLy8gc2FtZSBlcnJvci5cbiAgICAgICAgICBsb2dnZWRUeXBlRmFpbHVyZXNbZXJyb3IkMS5tZXNzYWdlXSA9IHRydWU7XG4gICAgICAgICAgc2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQoZWxlbWVudCk7XG5cbiAgICAgICAgICBlcnJvcignRmFpbGVkICVzIHR5cGU6ICVzJywgbG9jYXRpb24sIGVycm9yJDEubWVzc2FnZSk7XG5cbiAgICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudChudWxsKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKGVsZW1lbnQpIHtcbiAge1xuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICB2YXIgb3duZXIgPSBlbGVtZW50Ll9vd25lcjtcbiAgICAgIHZhciBzdGFjayA9IGRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFVihlbGVtZW50LnR5cGUsIGVsZW1lbnQuX3NvdXJjZSwgb3duZXIgPyBvd25lci50eXBlIDogbnVsbCk7XG4gICAgICBzZXRFeHRyYVN0YWNrRnJhbWUoc3RhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRFeHRyYVN0YWNrRnJhbWUobnVsbCk7XG4gICAgfVxuICB9XG59XG5cbnZhciBwcm9wVHlwZXNNaXNzcGVsbFdhcm5pbmdTaG93bjtcblxue1xuICBwcm9wVHlwZXNNaXNzcGVsbFdhcm5pbmdTaG93biA9IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKSB7XG4gIGlmIChSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50KSB7XG4gICAgdmFyIG5hbWUgPSBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoUmVhY3RDdXJyZW50T3duZXIuY3VycmVudC50eXBlKTtcblxuICAgIGlmIChuYW1lKSB7XG4gICAgICByZXR1cm4gJ1xcblxcbkNoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgbmFtZSArICdgLic7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuICcnO1xufVxuXG5mdW5jdGlvbiBnZXRTb3VyY2VJbmZvRXJyb3JBZGRlbmR1bShzb3VyY2UpIHtcbiAgaWYgKHNvdXJjZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIGZpbGVOYW1lID0gc291cmNlLmZpbGVOYW1lLnJlcGxhY2UoL14uKltcXFxcXFwvXS8sICcnKTtcbiAgICB2YXIgbGluZU51bWJlciA9IHNvdXJjZS5saW5lTnVtYmVyO1xuICAgIHJldHVybiAnXFxuXFxuQ2hlY2sgeW91ciBjb2RlIGF0ICcgKyBmaWxlTmFtZSArICc6JyArIGxpbmVOdW1iZXIgKyAnLic7XG4gIH1cblxuICByZXR1cm4gJyc7XG59XG5cbmZ1bmN0aW9uIGdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtRm9yUHJvcHMoZWxlbWVudFByb3BzKSB7XG4gIGlmIChlbGVtZW50UHJvcHMgIT09IG51bGwgJiYgZWxlbWVudFByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gZ2V0U291cmNlSW5mb0Vycm9yQWRkZW5kdW0oZWxlbWVudFByb3BzLl9fc291cmNlKTtcbiAgfVxuXG4gIHJldHVybiAnJztcbn1cbi8qKlxuICogV2FybiBpZiB0aGVyZSdzIG5vIGtleSBleHBsaWNpdGx5IHNldCBvbiBkeW5hbWljIGFycmF5cyBvZiBjaGlsZHJlbiBvclxuICogb2JqZWN0IGtleXMgYXJlIG5vdCB2YWxpZC4gVGhpcyBhbGxvd3MgdXMgdG8ga2VlcCB0cmFjayBvZiBjaGlsZHJlbiBiZXR3ZWVuXG4gKiB1cGRhdGVzLlxuICovXG5cblxudmFyIG93bmVySGFzS2V5VXNlV2FybmluZyA9IHt9O1xuXG5mdW5jdGlvbiBnZXRDdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvKHBhcmVudFR5cGUpIHtcbiAgdmFyIGluZm8gPSBnZXREZWNsYXJhdGlvbkVycm9yQWRkZW5kdW0oKTtcblxuICBpZiAoIWluZm8pIHtcbiAgICB2YXIgcGFyZW50TmFtZSA9IHR5cGVvZiBwYXJlbnRUeXBlID09PSAnc3RyaW5nJyA/IHBhcmVudFR5cGUgOiBwYXJlbnRUeXBlLmRpc3BsYXlOYW1lIHx8IHBhcmVudFR5cGUubmFtZTtcblxuICAgIGlmIChwYXJlbnROYW1lKSB7XG4gICAgICBpbmZvID0gXCJcXG5cXG5DaGVjayB0aGUgdG9wLWxldmVsIHJlbmRlciBjYWxsIHVzaW5nIDxcIiArIHBhcmVudE5hbWUgKyBcIj4uXCI7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGluZm87XG59XG4vKipcbiAqIFdhcm4gaWYgdGhlIGVsZW1lbnQgZG9lc24ndCBoYXZlIGFuIGV4cGxpY2l0IGtleSBhc3NpZ25lZCB0byBpdC5cbiAqIFRoaXMgZWxlbWVudCBpcyBpbiBhbiBhcnJheS4gVGhlIGFycmF5IGNvdWxkIGdyb3cgYW5kIHNocmluayBvciBiZVxuICogcmVvcmRlcmVkLiBBbGwgY2hpbGRyZW4gdGhhdCBoYXZlbid0IGFscmVhZHkgYmVlbiB2YWxpZGF0ZWQgYXJlIHJlcXVpcmVkIHRvXG4gKiBoYXZlIGEgXCJrZXlcIiBwcm9wZXJ0eSBhc3NpZ25lZCB0byBpdC4gRXJyb3Igc3RhdHVzZXMgYXJlIGNhY2hlZCBzbyBhIHdhcm5pbmdcbiAqIHdpbGwgb25seSBiZSBzaG93biBvbmNlLlxuICpcbiAqIEBpbnRlcm5hbFxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnQgRWxlbWVudCB0aGF0IHJlcXVpcmVzIGEga2V5LlxuICogQHBhcmFtIHsqfSBwYXJlbnRUeXBlIGVsZW1lbnQncyBwYXJlbnQncyB0eXBlLlxuICovXG5cblxuZnVuY3Rpb24gdmFsaWRhdGVFeHBsaWNpdEtleShlbGVtZW50LCBwYXJlbnRUeXBlKSB7XG4gIGlmICghZWxlbWVudC5fc3RvcmUgfHwgZWxlbWVudC5fc3RvcmUudmFsaWRhdGVkIHx8IGVsZW1lbnQua2V5ICE9IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBlbGVtZW50Ll9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICB2YXIgY3VycmVudENvbXBvbmVudEVycm9ySW5mbyA9IGdldEN1cnJlbnRDb21wb25lbnRFcnJvckluZm8ocGFyZW50VHlwZSk7XG5cbiAgaWYgKG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIG93bmVySGFzS2V5VXNlV2FybmluZ1tjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvXSA9IHRydWU7IC8vIFVzdWFsbHkgdGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIG9mZmVuZGVyLCBidXQgaWYgaXQgYWNjZXB0cyBjaGlsZHJlbiBhcyBhXG4gIC8vIHByb3BlcnR5LCBpdCBtYXkgYmUgdGhlIGNyZWF0b3Igb2YgdGhlIGNoaWxkIHRoYXQncyByZXNwb25zaWJsZSBmb3JcbiAgLy8gYXNzaWduaW5nIGl0IGEga2V5LlxuXG4gIHZhciBjaGlsZE93bmVyID0gJyc7XG5cbiAgaWYgKGVsZW1lbnQgJiYgZWxlbWVudC5fb3duZXIgJiYgZWxlbWVudC5fb3duZXIgIT09IFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQpIHtcbiAgICAvLyBHaXZlIHRoZSBjb21wb25lbnQgdGhhdCBvcmlnaW5hbGx5IGNyZWF0ZWQgdGhpcyBjaGlsZC5cbiAgICBjaGlsZE93bmVyID0gXCIgSXQgd2FzIHBhc3NlZCBhIGNoaWxkIGZyb20gXCIgKyBnZXRDb21wb25lbnROYW1lRnJvbVR5cGUoZWxlbWVudC5fb3duZXIudHlwZSkgKyBcIi5cIjtcbiAgfVxuXG4gIHtcbiAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKGVsZW1lbnQpO1xuXG4gICAgZXJyb3IoJ0VhY2ggY2hpbGQgaW4gYSBsaXN0IHNob3VsZCBoYXZlIGEgdW5pcXVlIFwia2V5XCIgcHJvcC4nICsgJyVzJXMgU2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay93YXJuaW5nLWtleXMgZm9yIG1vcmUgaW5mb3JtYXRpb24uJywgY3VycmVudENvbXBvbmVudEVycm9ySW5mbywgY2hpbGRPd25lcik7XG5cbiAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKG51bGwpO1xuICB9XG59XG4vKipcbiAqIEVuc3VyZSB0aGF0IGV2ZXJ5IGVsZW1lbnQgZWl0aGVyIGlzIHBhc3NlZCBpbiBhIHN0YXRpYyBsb2NhdGlvbiwgaW4gYW5cbiAqIGFycmF5IHdpdGggYW4gZXhwbGljaXQga2V5cyBwcm9wZXJ0eSBkZWZpbmVkLCBvciBpbiBhbiBvYmplY3QgbGl0ZXJhbFxuICogd2l0aCB2YWxpZCBrZXkgcHJvcGVydHkuXG4gKlxuICogQGludGVybmFsXG4gKiBAcGFyYW0ge1JlYWN0Tm9kZX0gbm9kZSBTdGF0aWNhbGx5IHBhc3NlZCBjaGlsZCBvZiBhbnkgdHlwZS5cbiAqIEBwYXJhbSB7Kn0gcGFyZW50VHlwZSBub2RlJ3MgcGFyZW50J3MgdHlwZS5cbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ2hpbGRLZXlzKG5vZGUsIHBhcmVudFR5cGUpIHtcbiAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG5vZGUpKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgY2hpbGQgPSBub2RlW2ldO1xuXG4gICAgICBpZiAoaXNWYWxpZEVsZW1lbnQoY2hpbGQpKSB7XG4gICAgICAgIHZhbGlkYXRlRXhwbGljaXRLZXkoY2hpbGQsIHBhcmVudFR5cGUpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1ZhbGlkRWxlbWVudChub2RlKSkge1xuICAgIC8vIFRoaXMgZWxlbWVudCB3YXMgcGFzc2VkIGluIGEgdmFsaWQgbG9jYXRpb24uXG4gICAgaWYgKG5vZGUuX3N0b3JlKSB7XG4gICAgICBub2RlLl9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIH1cbiAgfSBlbHNlIGlmIChub2RlKSB7XG4gICAgdmFyIGl0ZXJhdG9yRm4gPSBnZXRJdGVyYXRvckZuKG5vZGUpO1xuXG4gICAgaWYgKHR5cGVvZiBpdGVyYXRvckZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAvLyBFbnRyeSBpdGVyYXRvcnMgdXNlZCB0byBwcm92aWRlIGltcGxpY2l0IGtleXMsXG4gICAgICAvLyBidXQgbm93IHdlIHByaW50IGEgc2VwYXJhdGUgd2FybmluZyBmb3IgdGhlbSBsYXRlci5cbiAgICAgIGlmIChpdGVyYXRvckZuICE9PSBub2RlLmVudHJpZXMpIHtcbiAgICAgICAgdmFyIGl0ZXJhdG9yID0gaXRlcmF0b3JGbi5jYWxsKG5vZGUpO1xuICAgICAgICB2YXIgc3RlcDtcblxuICAgICAgICB3aGlsZSAoIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgICAgICAgaWYgKGlzVmFsaWRFbGVtZW50KHN0ZXAudmFsdWUpKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUV4cGxpY2l0S2V5KHN0ZXAudmFsdWUsIHBhcmVudFR5cGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuLyoqXG4gKiBHaXZlbiBhbiBlbGVtZW50LCB2YWxpZGF0ZSB0aGF0IGl0cyBwcm9wcyBmb2xsb3cgdGhlIHByb3BUeXBlcyBkZWZpbml0aW9uLFxuICogcHJvdmlkZWQgYnkgdGhlIHR5cGUuXG4gKlxuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGVsZW1lbnRcbiAqL1xuXG5cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcFR5cGVzKGVsZW1lbnQpIHtcbiAge1xuICAgIHZhciB0eXBlID0gZWxlbWVudC50eXBlO1xuXG4gICAgaWYgKHR5cGUgPT09IG51bGwgfHwgdHlwZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBwcm9wVHlwZXM7XG5cbiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHByb3BUeXBlcyA9IHR5cGUucHJvcFR5cGVzO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmICh0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFIHx8IC8vIE5vdGU6IE1lbW8gb25seSBjaGVja3Mgb3V0ZXIgcHJvcHMgaGVyZS5cbiAgICAvLyBJbm5lciBwcm9wcyBhcmUgY2hlY2tlZCBpbiB0aGUgcmVjb25jaWxlci5cbiAgICB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9NRU1PX1RZUEUpKSB7XG4gICAgICBwcm9wVHlwZXMgPSB0eXBlLnByb3BUeXBlcztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwcm9wVHlwZXMpIHtcbiAgICAgIC8vIEludGVudGlvbmFsbHkgaW5zaWRlIHRvIGF2b2lkIHRyaWdnZXJpbmcgbGF6eSBpbml0aWFsaXplcnM6XG4gICAgICB2YXIgbmFtZSA9IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlKTtcbiAgICAgIGNoZWNrUHJvcFR5cGVzKHByb3BUeXBlcywgZWxlbWVudC5wcm9wcywgJ3Byb3AnLCBuYW1lLCBlbGVtZW50KTtcbiAgICB9IGVsc2UgaWYgKHR5cGUuUHJvcFR5cGVzICE9PSB1bmRlZmluZWQgJiYgIXByb3BUeXBlc01pc3NwZWxsV2FybmluZ1Nob3duKSB7XG4gICAgICBwcm9wVHlwZXNNaXNzcGVsbFdhcm5pbmdTaG93biA9IHRydWU7IC8vIEludGVudGlvbmFsbHkgaW5zaWRlIHRvIGF2b2lkIHRyaWdnZXJpbmcgbGF6eSBpbml0aWFsaXplcnM6XG5cbiAgICAgIHZhciBfbmFtZSA9IGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlKTtcblxuICAgICAgZXJyb3IoJ0NvbXBvbmVudCAlcyBkZWNsYXJlZCBgUHJvcFR5cGVzYCBpbnN0ZWFkIG9mIGBwcm9wVHlwZXNgLiBEaWQgeW91IG1pc3NwZWxsIHRoZSBwcm9wZXJ0eSBhc3NpZ25tZW50PycsIF9uYW1lIHx8ICdVbmtub3duJyk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0eXBlLmdldERlZmF1bHRQcm9wcyA9PT0gJ2Z1bmN0aW9uJyAmJiAhdHlwZS5nZXREZWZhdWx0UHJvcHMuaXNSZWFjdENsYXNzQXBwcm92ZWQpIHtcbiAgICAgIGVycm9yKCdnZXREZWZhdWx0UHJvcHMgaXMgb25seSB1c2VkIG9uIGNsYXNzaWMgUmVhY3QuY3JlYXRlQ2xhc3MgJyArICdkZWZpbml0aW9ucy4gVXNlIGEgc3RhdGljIHByb3BlcnR5IG5hbWVkIGBkZWZhdWx0UHJvcHNgIGluc3RlYWQuJyk7XG4gICAgfVxuICB9XG59XG4vKipcbiAqIEdpdmVuIGEgZnJhZ21lbnQsIHZhbGlkYXRlIHRoYXQgaXQgY2FuIG9ubHkgYmUgcHJvdmlkZWQgd2l0aCBmcmFnbWVudCBwcm9wc1xuICogQHBhcmFtIHtSZWFjdEVsZW1lbnR9IGZyYWdtZW50XG4gKi9cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZUZyYWdtZW50UHJvcHMoZnJhZ21lbnQpIHtcbiAge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZnJhZ21lbnQucHJvcHMpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKGtleSAhPT0gJ2NoaWxkcmVuJyAmJiBrZXkgIT09ICdrZXknKSB7XG4gICAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEoZnJhZ21lbnQpO1xuXG4gICAgICAgIGVycm9yKCdJbnZhbGlkIHByb3AgYCVzYCBzdXBwbGllZCB0byBgUmVhY3QuRnJhZ21lbnRgLiAnICsgJ1JlYWN0LkZyYWdtZW50IGNhbiBvbmx5IGhhdmUgYGtleWAgYW5kIGBjaGlsZHJlbmAgcHJvcHMuJywga2V5KTtcblxuICAgICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKG51bGwpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZnJhZ21lbnQucmVmICE9PSBudWxsKSB7XG4gICAgICBzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxKGZyYWdtZW50KTtcblxuICAgICAgZXJyb3IoJ0ludmFsaWQgYXR0cmlidXRlIGByZWZgIHN1cHBsaWVkIHRvIGBSZWFjdC5GcmFnbWVudGAuJyk7XG5cbiAgICAgIHNldEN1cnJlbnRseVZhbGlkYXRpbmdFbGVtZW50JDEobnVsbCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVFbGVtZW50V2l0aFZhbGlkYXRpb24odHlwZSwgcHJvcHMsIGNoaWxkcmVuKSB7XG4gIHZhciB2YWxpZFR5cGUgPSBpc1ZhbGlkRWxlbWVudFR5cGUodHlwZSk7IC8vIFdlIHdhcm4gaW4gdGhpcyBjYXNlIGJ1dCBkb24ndCB0aHJvdy4gV2UgZXhwZWN0IHRoZSBlbGVtZW50IGNyZWF0aW9uIHRvXG4gIC8vIHN1Y2NlZWQgYW5kIHRoZXJlIHdpbGwgbGlrZWx5IGJlIGVycm9ycyBpbiByZW5kZXIuXG5cbiAgaWYgKCF2YWxpZFR5cGUpIHtcbiAgICB2YXIgaW5mbyA9ICcnO1xuXG4gICAgaWYgKHR5cGUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZSAhPT0gbnVsbCAmJiBPYmplY3Qua2V5cyh0eXBlKS5sZW5ndGggPT09IDApIHtcbiAgICAgIGluZm8gKz0gJyBZb3UgbGlrZWx5IGZvcmdvdCB0byBleHBvcnQgeW91ciBjb21wb25lbnQgZnJvbSB0aGUgZmlsZSAnICsgXCJpdCdzIGRlZmluZWQgaW4sIG9yIHlvdSBtaWdodCBoYXZlIG1peGVkIHVwIGRlZmF1bHQgYW5kIG5hbWVkIGltcG9ydHMuXCI7XG4gICAgfVxuXG4gICAgdmFyIHNvdXJjZUluZm8gPSBnZXRTb3VyY2VJbmZvRXJyb3JBZGRlbmR1bUZvclByb3BzKHByb3BzKTtcblxuICAgIGlmIChzb3VyY2VJbmZvKSB7XG4gICAgICBpbmZvICs9IHNvdXJjZUluZm87XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZm8gKz0gZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtKCk7XG4gICAgfVxuXG4gICAgdmFyIHR5cGVTdHJpbmc7XG5cbiAgICBpZiAodHlwZSA9PT0gbnVsbCkge1xuICAgICAgdHlwZVN0cmluZyA9ICdudWxsJztcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkodHlwZSkpIHtcbiAgICAgIHR5cGVTdHJpbmcgPSAnYXJyYXknO1xuICAgIH0gZWxzZSBpZiAodHlwZSAhPT0gdW5kZWZpbmVkICYmIHR5cGUuJCR0eXBlb2YgPT09IFJFQUNUX0VMRU1FTlRfVFlQRSkge1xuICAgICAgdHlwZVN0cmluZyA9IFwiPFwiICsgKGdldENvbXBvbmVudE5hbWVGcm9tVHlwZSh0eXBlLnR5cGUpIHx8ICdVbmtub3duJykgKyBcIiAvPlwiO1xuICAgICAgaW5mbyA9ICcgRGlkIHlvdSBhY2NpZGVudGFsbHkgZXhwb3J0IGEgSlNYIGxpdGVyYWwgaW5zdGVhZCBvZiBhIGNvbXBvbmVudD8nO1xuICAgIH0gZWxzZSB7XG4gICAgICB0eXBlU3RyaW5nID0gdHlwZW9mIHR5cGU7XG4gICAgfVxuXG4gICAge1xuICAgICAgZXJyb3IoJ1JlYWN0LmNyZWF0ZUVsZW1lbnQ6IHR5cGUgaXMgaW52YWxpZCAtLSBleHBlY3RlZCBhIHN0cmluZyAoZm9yICcgKyAnYnVpbHQtaW4gY29tcG9uZW50cykgb3IgYSBjbGFzcy9mdW5jdGlvbiAoZm9yIGNvbXBvc2l0ZSAnICsgJ2NvbXBvbmVudHMpIGJ1dCBnb3Q6ICVzLiVzJywgdHlwZVN0cmluZywgaW5mbyk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGVsZW1lbnQgPSBjcmVhdGVFbGVtZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IC8vIFRoZSByZXN1bHQgY2FuIGJlIG51bGxpc2ggaWYgYSBtb2NrIG9yIGEgY3VzdG9tIGZ1bmN0aW9uIGlzIHVzZWQuXG4gIC8vIFRPRE86IERyb3AgdGhpcyB3aGVuIHRoZXNlIGFyZSBubyBsb25nZXIgYWxsb3dlZCBhcyB0aGUgdHlwZSBhcmd1bWVudC5cblxuICBpZiAoZWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGVsZW1lbnQ7XG4gIH0gLy8gU2tpcCBrZXkgd2FybmluZyBpZiB0aGUgdHlwZSBpc24ndCB2YWxpZCBzaW5jZSBvdXIga2V5IHZhbGlkYXRpb24gbG9naWNcbiAgLy8gZG9lc24ndCBleHBlY3QgYSBub24tc3RyaW5nL2Z1bmN0aW9uIHR5cGUgYW5kIGNhbiB0aHJvdyBjb25mdXNpbmcgZXJyb3JzLlxuICAvLyBXZSBkb24ndCB3YW50IGV4Y2VwdGlvbiBiZWhhdmlvciB0byBkaWZmZXIgYmV0d2VlbiBkZXYgYW5kIHByb2QuXG4gIC8vIChSZW5kZXJpbmcgd2lsbCB0aHJvdyB3aXRoIGEgaGVscGZ1bCBtZXNzYWdlIGFuZCBhcyBzb29uIGFzIHRoZSB0eXBlIGlzXG4gIC8vIGZpeGVkLCB0aGUga2V5IHdhcm5pbmdzIHdpbGwgYXBwZWFyLilcblxuXG4gIGlmICh2YWxpZFR5cGUpIHtcbiAgICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsaWRhdGVDaGlsZEtleXMoYXJndW1lbnRzW2ldLCB0eXBlKTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSkge1xuICAgIHZhbGlkYXRlRnJhZ21lbnRQcm9wcyhlbGVtZW50KTtcbiAgfSBlbHNlIHtcbiAgICB2YWxpZGF0ZVByb3BUeXBlcyhlbGVtZW50KTtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50O1xufVxudmFyIGRpZFdhcm5BYm91dERlcHJlY2F0ZWRDcmVhdGVGYWN0b3J5ID0gZmFsc2U7XG5mdW5jdGlvbiBjcmVhdGVGYWN0b3J5V2l0aFZhbGlkYXRpb24odHlwZSkge1xuICB2YXIgdmFsaWRhdGVkRmFjdG9yeSA9IGNyZWF0ZUVsZW1lbnRXaXRoVmFsaWRhdGlvbi5iaW5kKG51bGwsIHR5cGUpO1xuICB2YWxpZGF0ZWRGYWN0b3J5LnR5cGUgPSB0eXBlO1xuXG4gIHtcbiAgICBpZiAoIWRpZFdhcm5BYm91dERlcHJlY2F0ZWRDcmVhdGVGYWN0b3J5KSB7XG4gICAgICBkaWRXYXJuQWJvdXREZXByZWNhdGVkQ3JlYXRlRmFjdG9yeSA9IHRydWU7XG5cbiAgICAgIHdhcm4oJ1JlYWN0LmNyZWF0ZUZhY3RvcnkoKSBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gJyArICdhIGZ1dHVyZSBtYWpvciByZWxlYXNlLiBDb25zaWRlciB1c2luZyBKU1ggJyArICdvciB1c2UgUmVhY3QuY3JlYXRlRWxlbWVudCgpIGRpcmVjdGx5IGluc3RlYWQuJyk7XG4gICAgfSAvLyBMZWdhY3kgaG9vazogcmVtb3ZlIGl0XG5cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh2YWxpZGF0ZWRGYWN0b3J5LCAndHlwZScsIHtcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdhcm4oJ0ZhY3RvcnkudHlwZSBpcyBkZXByZWNhdGVkLiBBY2Nlc3MgdGhlIGNsYXNzIGRpcmVjdGx5ICcgKyAnYmVmb3JlIHBhc3NpbmcgaXQgdG8gY3JlYXRlRmFjdG9yeS4nKTtcblxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3R5cGUnLCB7XG4gICAgICAgICAgdmFsdWU6IHR5cGVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0eXBlO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHZhbGlkYXRlZEZhY3Rvcnk7XG59XG5mdW5jdGlvbiBjbG9uZUVsZW1lbnRXaXRoVmFsaWRhdGlvbihlbGVtZW50LCBwcm9wcywgY2hpbGRyZW4pIHtcbiAgdmFyIG5ld0VsZW1lbnQgPSBjbG9uZUVsZW1lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICBmb3IgKHZhciBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhbGlkYXRlQ2hpbGRLZXlzKGFyZ3VtZW50c1tpXSwgbmV3RWxlbWVudC50eXBlKTtcbiAgfVxuXG4gIHZhbGlkYXRlUHJvcFR5cGVzKG5ld0VsZW1lbnQpO1xuICByZXR1cm4gbmV3RWxlbWVudDtcbn1cblxuZnVuY3Rpb24gc3RhcnRUcmFuc2l0aW9uKHNjb3BlLCBvcHRpb25zKSB7XG4gIHZhciBwcmV2VHJhbnNpdGlvbiA9IFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLnRyYW5zaXRpb247XG4gIFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLnRyYW5zaXRpb24gPSB7fTtcbiAgdmFyIGN1cnJlbnRUcmFuc2l0aW9uID0gUmVhY3RDdXJyZW50QmF0Y2hDb25maWcudHJhbnNpdGlvbjtcblxuICB7XG4gICAgUmVhY3RDdXJyZW50QmF0Y2hDb25maWcudHJhbnNpdGlvbi5fdXBkYXRlZEZpYmVycyA9IG5ldyBTZXQoKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgc2NvcGUoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBSZWFjdEN1cnJlbnRCYXRjaENvbmZpZy50cmFuc2l0aW9uID0gcHJldlRyYW5zaXRpb247XG5cbiAgICB7XG4gICAgICBpZiAocHJldlRyYW5zaXRpb24gPT09IG51bGwgJiYgY3VycmVudFRyYW5zaXRpb24uX3VwZGF0ZWRGaWJlcnMpIHtcbiAgICAgICAgdmFyIHVwZGF0ZWRGaWJlcnNDb3VudCA9IGN1cnJlbnRUcmFuc2l0aW9uLl91cGRhdGVkRmliZXJzLnNpemU7XG5cbiAgICAgICAgaWYgKHVwZGF0ZWRGaWJlcnNDb3VudCA+IDEwKSB7XG4gICAgICAgICAgd2FybignRGV0ZWN0ZWQgYSBsYXJnZSBudW1iZXIgb2YgdXBkYXRlcyBpbnNpZGUgc3RhcnRUcmFuc2l0aW9uLiAnICsgJ0lmIHRoaXMgaXMgZHVlIHRvIGEgc3Vic2NyaXB0aW9uIHBsZWFzZSByZS13cml0ZSBpdCB0byB1c2UgUmVhY3QgcHJvdmlkZWQgaG9va3MuICcgKyAnT3RoZXJ3aXNlIGNvbmN1cnJlbnQgbW9kZSBndWFyYW50ZWVzIGFyZSBvZmYgdGhlIHRhYmxlLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFRyYW5zaXRpb24uX3VwZGF0ZWRGaWJlcnMuY2xlYXIoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGRpZFdhcm5BYm91dE1lc3NhZ2VDaGFubmVsID0gZmFsc2U7XG52YXIgZW5xdWV1ZVRhc2tJbXBsID0gbnVsbDtcbmZ1bmN0aW9uIGVucXVldWVUYXNrKHRhc2spIHtcbiAgaWYgKGVucXVldWVUYXNrSW1wbCA9PT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICAvLyByZWFkIHJlcXVpcmUgb2ZmIHRoZSBtb2R1bGUgb2JqZWN0IHRvIGdldCBhcm91bmQgdGhlIGJ1bmRsZXJzLlxuICAgICAgLy8gd2UgZG9uJ3Qgd2FudCB0aGVtIHRvIGRldGVjdCBhIHJlcXVpcmUgYW5kIGJ1bmRsZSBhIE5vZGUgcG9seWZpbGwuXG4gICAgICB2YXIgcmVxdWlyZVN0cmluZyA9ICgncmVxdWlyZScgKyBNYXRoLnJhbmRvbSgpKS5zbGljZSgwLCA3KTtcbiAgICAgIHZhciBub2RlUmVxdWlyZSA9IG1vZHVsZSAmJiBtb2R1bGVbcmVxdWlyZVN0cmluZ107IC8vIGFzc3VtaW5nIHdlJ3JlIGluIG5vZGUsIGxldCdzIHRyeSB0byBnZXQgbm9kZSdzXG4gICAgICAvLyB2ZXJzaW9uIG9mIHNldEltbWVkaWF0ZSwgYnlwYXNzaW5nIGZha2UgdGltZXJzIGlmIGFueS5cblxuICAgICAgZW5xdWV1ZVRhc2tJbXBsID0gbm9kZVJlcXVpcmUuY2FsbChtb2R1bGUsICd0aW1lcnMnKS5zZXRJbW1lZGlhdGU7XG4gICAgfSBjYXRjaCAoX2Vycikge1xuICAgICAgLy8gd2UncmUgaW4gYSBicm93c2VyXG4gICAgICAvLyB3ZSBjYW4ndCB1c2UgcmVndWxhciB0aW1lcnMgYmVjYXVzZSB0aGV5IG1heSBzdGlsbCBiZSBmYWtlZFxuICAgICAgLy8gc28gd2UgdHJ5IE1lc3NhZ2VDaGFubmVsK3Bvc3RNZXNzYWdlIGluc3RlYWRcbiAgICAgIGVucXVldWVUYXNrSW1wbCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB7XG4gICAgICAgICAgaWYgKGRpZFdhcm5BYm91dE1lc3NhZ2VDaGFubmVsID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGlkV2FybkFib3V0TWVzc2FnZUNoYW5uZWwgPSB0cnVlO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIE1lc3NhZ2VDaGFubmVsID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICBlcnJvcignVGhpcyBicm93c2VyIGRvZXMgbm90IGhhdmUgYSBNZXNzYWdlQ2hhbm5lbCBpbXBsZW1lbnRhdGlvbiwgJyArICdzbyBlbnF1ZXVpbmcgdGFza3MgdmlhIGF3YWl0IGFjdChhc3luYyAoKSA9PiAuLi4pIHdpbGwgZmFpbC4gJyArICdQbGVhc2UgZmlsZSBhbiBpc3N1ZSBhdCBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzICcgKyAnaWYgeW91IGVuY291bnRlciB0aGlzIHdhcm5pbmcuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBjYWxsYmFjaztcbiAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZSh1bmRlZmluZWQpO1xuICAgICAgfTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZW5xdWV1ZVRhc2tJbXBsKHRhc2spO1xufVxuXG52YXIgYWN0U2NvcGVEZXB0aCA9IDA7XG52YXIgZGlkV2Fybk5vQXdhaXRBY3QgPSBmYWxzZTtcbmZ1bmN0aW9uIGFjdChjYWxsYmFjaykge1xuICB7XG4gICAgLy8gYGFjdGAgY2FsbHMgY2FuIGJlIG5lc3RlZCwgc28gd2UgdHJhY2sgdGhlIGRlcHRoLiBUaGlzIHJlcHJlc2VudHMgdGhlXG4gICAgLy8gbnVtYmVyIG9mIGBhY3RgIHNjb3BlcyBvbiB0aGUgc3RhY2suXG4gICAgdmFyIHByZXZBY3RTY29wZURlcHRoID0gYWN0U2NvcGVEZXB0aDtcbiAgICBhY3RTY29wZURlcHRoKys7XG5cbiAgICBpZiAoUmVhY3RDdXJyZW50QWN0UXVldWUuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgLy8gVGhpcyBpcyB0aGUgb3V0ZXJtb3N0IGBhY3RgIHNjb3BlLiBJbml0aWFsaXplIHRoZSBxdWV1ZS4gVGhlIHJlY29uY2lsZXJcbiAgICAgIC8vIHdpbGwgZGV0ZWN0IHRoZSBxdWV1ZSBhbmQgdXNlIGl0IGluc3RlYWQgb2YgU2NoZWR1bGVyLlxuICAgICAgUmVhY3RDdXJyZW50QWN0UXVldWUuY3VycmVudCA9IFtdO1xuICAgIH1cblxuICAgIHZhciBwcmV2SXNCYXRjaGluZ0xlZ2FjeSA9IFJlYWN0Q3VycmVudEFjdFF1ZXVlLmlzQmF0Y2hpbmdMZWdhY3k7XG4gICAgdmFyIHJlc3VsdDtcblxuICAgIHRyeSB7XG4gICAgICAvLyBVc2VkIHRvIHJlcHJvZHVjZSBiZWhhdmlvciBvZiBgYmF0Y2hlZFVwZGF0ZXNgIGluIGxlZ2FjeSBtb2RlLiBPbmx5XG4gICAgICAvLyBzZXQgdG8gYHRydWVgIHdoaWxlIHRoZSBnaXZlbiBjYWxsYmFjayBpcyBleGVjdXRlZCwgbm90IGZvciB1cGRhdGVzXG4gICAgICAvLyB0cmlnZ2VyZWQgZHVyaW5nIGFuIGFzeW5jIGV2ZW50LCBiZWNhdXNlIHRoaXMgaXMgaG93IHRoZSBsZWdhY3lcbiAgICAgIC8vIGltcGxlbWVudGF0aW9uIG9mIGBhY3RgIGJlaGF2ZWQuXG4gICAgICBSZWFjdEN1cnJlbnRBY3RRdWV1ZS5pc0JhdGNoaW5nTGVnYWN5ID0gdHJ1ZTtcbiAgICAgIHJlc3VsdCA9IGNhbGxiYWNrKCk7IC8vIFJlcGxpY2F0ZSBiZWhhdmlvciBvZiBvcmlnaW5hbCBgYWN0YCBpbXBsZW1lbnRhdGlvbiBpbiBsZWdhY3kgbW9kZSxcbiAgICAgIC8vIHdoaWNoIGZsdXNoZWQgdXBkYXRlcyBpbW1lZGlhdGVseSBhZnRlciB0aGUgc2NvcGUgZnVuY3Rpb24gZXhpdHMsIGV2ZW5cbiAgICAgIC8vIGlmIGl0J3MgYW4gYXN5bmMgZnVuY3Rpb24uXG5cbiAgICAgIGlmICghcHJldklzQmF0Y2hpbmdMZWdhY3kgJiYgUmVhY3RDdXJyZW50QWN0UXVldWUuZGlkU2NoZWR1bGVMZWdhY3lVcGRhdGUpIHtcbiAgICAgICAgdmFyIHF1ZXVlID0gUmVhY3RDdXJyZW50QWN0UXVldWUuY3VycmVudDtcblxuICAgICAgICBpZiAocXVldWUgIT09IG51bGwpIHtcbiAgICAgICAgICBSZWFjdEN1cnJlbnRBY3RRdWV1ZS5kaWRTY2hlZHVsZUxlZ2FjeVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgIGZsdXNoQWN0UXVldWUocXVldWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHBvcEFjdFNjb3BlKHByZXZBY3RTY29wZURlcHRoKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBSZWFjdEN1cnJlbnRBY3RRdWV1ZS5pc0JhdGNoaW5nTGVnYWN5ID0gcHJldklzQmF0Y2hpbmdMZWdhY3k7XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdCAhPT0gbnVsbCAmJiB0eXBlb2YgcmVzdWx0ID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgcmVzdWx0LnRoZW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHZhciB0aGVuYWJsZVJlc3VsdCA9IHJlc3VsdDsgLy8gVGhlIGNhbGxiYWNrIGlzIGFuIGFzeW5jIGZ1bmN0aW9uIChpLmUuIHJldHVybmVkIGEgcHJvbWlzZSkuIFdhaXRcbiAgICAgIC8vIGZvciBpdCB0byByZXNvbHZlIGJlZm9yZSBleGl0aW5nIHRoZSBjdXJyZW50IHNjb3BlLlxuXG4gICAgICB2YXIgd2FzQXdhaXRlZCA9IGZhbHNlO1xuICAgICAgdmFyIHRoZW5hYmxlID0ge1xuICAgICAgICB0aGVuOiBmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgd2FzQXdhaXRlZCA9IHRydWU7XG4gICAgICAgICAgdGhlbmFibGVSZXN1bHQudGhlbihmdW5jdGlvbiAocmV0dXJuVmFsdWUpIHtcbiAgICAgICAgICAgIHBvcEFjdFNjb3BlKHByZXZBY3RTY29wZURlcHRoKTtcblxuICAgICAgICAgICAgaWYgKGFjdFNjb3BlRGVwdGggPT09IDApIHtcbiAgICAgICAgICAgICAgLy8gV2UndmUgZXhpdGVkIHRoZSBvdXRlcm1vc3QgYWN0IHNjb3BlLiBSZWN1cnNpdmVseSBmbHVzaCB0aGVcbiAgICAgICAgICAgICAgLy8gcXVldWUgdW50aWwgdGhlcmUncyBubyByZW1haW5pbmcgd29yay5cbiAgICAgICAgICAgICAgcmVjdXJzaXZlbHlGbHVzaEFzeW5jQWN0V29yayhyZXR1cm5WYWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJlc29sdmUocmV0dXJuVmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgLy8gVGhlIGNhbGxiYWNrIHRocmV3IGFuIGVycm9yLlxuICAgICAgICAgICAgcG9wQWN0U2NvcGUocHJldkFjdFNjb3BlRGVwdGgpO1xuICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAge1xuICAgICAgICBpZiAoIWRpZFdhcm5Ob0F3YWl0QWN0ICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAgICAgICAgIFByb21pc2UucmVzb2x2ZSgpLnRoZW4oZnVuY3Rpb24gKCkge30pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCF3YXNBd2FpdGVkKSB7XG4gICAgICAgICAgICAgIGRpZFdhcm5Ob0F3YWl0QWN0ID0gdHJ1ZTtcblxuICAgICAgICAgICAgICBlcnJvcignWW91IGNhbGxlZCBhY3QoYXN5bmMgKCkgPT4gLi4uKSB3aXRob3V0IGF3YWl0LiAnICsgJ1RoaXMgY291bGQgbGVhZCB0byB1bmV4cGVjdGVkIHRlc3RpbmcgYmVoYXZpb3VyLCAnICsgJ2ludGVybGVhdmluZyBtdWx0aXBsZSBhY3QgY2FsbHMgYW5kIG1peGluZyB0aGVpciAnICsgJ3Njb3Blcy4gJyArICdZb3Ugc2hvdWxkIC0gYXdhaXQgYWN0KGFzeW5jICgpID0+IC4uLik7Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoZW5hYmxlO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcmV0dXJuVmFsdWUgPSByZXN1bHQ7IC8vIFRoZSBjYWxsYmFjayBpcyBub3QgYW4gYXN5bmMgZnVuY3Rpb24uIEV4aXQgdGhlIGN1cnJlbnQgc2NvcGVcbiAgICAgIC8vIGltbWVkaWF0ZWx5LCB3aXRob3V0IGF3YWl0aW5nLlxuXG4gICAgICBwb3BBY3RTY29wZShwcmV2QWN0U2NvcGVEZXB0aCk7XG5cbiAgICAgIGlmIChhY3RTY29wZURlcHRoID09PSAwKSB7XG4gICAgICAgIC8vIEV4aXRpbmcgdGhlIG91dGVybW9zdCBhY3Qgc2NvcGUuIEZsdXNoIHRoZSBxdWV1ZS5cbiAgICAgICAgdmFyIF9xdWV1ZSA9IFJlYWN0Q3VycmVudEFjdFF1ZXVlLmN1cnJlbnQ7XG5cbiAgICAgICAgaWYgKF9xdWV1ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIGZsdXNoQWN0UXVldWUoX3F1ZXVlKTtcbiAgICAgICAgICBSZWFjdEN1cnJlbnRBY3RRdWV1ZS5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgfSAvLyBSZXR1cm4gYSB0aGVuYWJsZS4gSWYgdGhlIHVzZXIgYXdhaXRzIGl0LCB3ZSdsbCBmbHVzaCBhZ2FpbiBpblxuICAgICAgICAvLyBjYXNlIGFkZGl0aW9uYWwgd29yayB3YXMgc2NoZWR1bGVkIGJ5IGEgbWljcm90YXNrLlxuXG5cbiAgICAgICAgdmFyIF90aGVuYWJsZSA9IHtcbiAgICAgICAgICB0aGVuOiBmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAvLyBDb25maXJtIHdlIGhhdmVuJ3QgcmUtZW50ZXJlZCBhbm90aGVyIGBhY3RgIHNjb3BlLCBpbiBjYXNlXG4gICAgICAgICAgICAvLyB0aGUgdXNlciBkb2VzIHNvbWV0aGluZyB3ZWlyZCBsaWtlIGF3YWl0IHRoZSB0aGVuYWJsZVxuICAgICAgICAgICAgLy8gbXVsdGlwbGUgdGltZXMuXG4gICAgICAgICAgICBpZiAoUmVhY3RDdXJyZW50QWN0UXVldWUuY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBmbHVzaCB0aGUgcXVldWUgdW50aWwgdGhlcmUncyBubyByZW1haW5pbmcgd29yay5cbiAgICAgICAgICAgICAgUmVhY3RDdXJyZW50QWN0UXVldWUuY3VycmVudCA9IFtdO1xuICAgICAgICAgICAgICByZWN1cnNpdmVseUZsdXNoQXN5bmNBY3RXb3JrKHJldHVyblZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5WYWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoZW5hYmxlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU2luY2Ugd2UncmUgaW5zaWRlIGEgbmVzdGVkIGBhY3RgIHNjb3BlLCB0aGUgcmV0dXJuZWQgdGhlbmFibGVcbiAgICAgICAgLy8gaW1tZWRpYXRlbHkgcmVzb2x2ZXMuIFRoZSBvdXRlciBzY29wZSB3aWxsIGZsdXNoIHRoZSBxdWV1ZS5cbiAgICAgICAgdmFyIF90aGVuYWJsZTIgPSB7XG4gICAgICAgICAgdGhlbjogZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXR1cm5WYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoZW5hYmxlMjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gcG9wQWN0U2NvcGUocHJldkFjdFNjb3BlRGVwdGgpIHtcbiAge1xuICAgIGlmIChwcmV2QWN0U2NvcGVEZXB0aCAhPT0gYWN0U2NvcGVEZXB0aCAtIDEpIHtcbiAgICAgIGVycm9yKCdZb3Ugc2VlbSB0byBoYXZlIG92ZXJsYXBwaW5nIGFjdCgpIGNhbGxzLCB0aGlzIGlzIG5vdCBzdXBwb3J0ZWQuICcgKyAnQmUgc3VyZSB0byBhd2FpdCBwcmV2aW91cyBhY3QoKSBjYWxscyBiZWZvcmUgbWFraW5nIGEgbmV3IG9uZS4gJyk7XG4gICAgfVxuXG4gICAgYWN0U2NvcGVEZXB0aCA9IHByZXZBY3RTY29wZURlcHRoO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY3Vyc2l2ZWx5Rmx1c2hBc3luY0FjdFdvcmsocmV0dXJuVmFsdWUsIHJlc29sdmUsIHJlamVjdCkge1xuICB7XG4gICAgdmFyIHF1ZXVlID0gUmVhY3RDdXJyZW50QWN0UXVldWUuY3VycmVudDtcblxuICAgIGlmIChxdWV1ZSAhPT0gbnVsbCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgZmx1c2hBY3RRdWV1ZShxdWV1ZSk7XG4gICAgICAgIGVucXVldWVUYXNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAocXVldWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAvLyBObyBhZGRpdGlvbmFsIHdvcmsgd2FzIHNjaGVkdWxlZC4gRmluaXNoLlxuICAgICAgICAgICAgUmVhY3RDdXJyZW50QWN0UXVldWUuY3VycmVudCA9IG51bGw7XG4gICAgICAgICAgICByZXNvbHZlKHJldHVyblZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gS2VlcCBmbHVzaGluZyB3b3JrIHVudGlsIHRoZXJlJ3Mgbm9uZSBsZWZ0LlxuICAgICAgICAgICAgcmVjdXJzaXZlbHlGbHVzaEFzeW5jQWN0V29yayhyZXR1cm5WYWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzb2x2ZShyZXR1cm5WYWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbnZhciBpc0ZsdXNoaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQWN0UXVldWUocXVldWUpIHtcbiAge1xuICAgIGlmICghaXNGbHVzaGluZykge1xuICAgICAgLy8gUHJldmVudCByZS1lbnRyYW5jZS5cbiAgICAgIGlzRmx1c2hpbmcgPSB0cnVlO1xuICAgICAgdmFyIGkgPSAwO1xuXG4gICAgICB0cnkge1xuICAgICAgICBmb3IgKDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgdmFyIGNhbGxiYWNrID0gcXVldWVbaV07XG5cbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGNhbGxiYWNrKHRydWUpO1xuICAgICAgICAgIH0gd2hpbGUgKGNhbGxiYWNrICE9PSBudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHF1ZXVlLmxlbmd0aCA9IDA7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAvLyBJZiBzb21ldGhpbmcgdGhyb3dzLCBsZWF2ZSB0aGUgcmVtYWluaW5nIGNhbGxiYWNrcyBvbiB0aGUgcXVldWUuXG4gICAgICAgIHF1ZXVlID0gcXVldWUuc2xpY2UoaSArIDEpO1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlzRmx1c2hpbmcgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFyIGNyZWF0ZUVsZW1lbnQkMSA9ICBjcmVhdGVFbGVtZW50V2l0aFZhbGlkYXRpb24gO1xudmFyIGNsb25lRWxlbWVudCQxID0gIGNsb25lRWxlbWVudFdpdGhWYWxpZGF0aW9uIDtcbnZhciBjcmVhdGVGYWN0b3J5ID0gIGNyZWF0ZUZhY3RvcnlXaXRoVmFsaWRhdGlvbiA7XG52YXIgQ2hpbGRyZW4gPSB7XG4gIG1hcDogbWFwQ2hpbGRyZW4sXG4gIGZvckVhY2g6IGZvckVhY2hDaGlsZHJlbixcbiAgY291bnQ6IGNvdW50Q2hpbGRyZW4sXG4gIHRvQXJyYXk6IHRvQXJyYXksXG4gIG9ubHk6IG9ubHlDaGlsZFxufTtcblxuZXhwb3J0cy5DaGlsZHJlbiA9IENoaWxkcmVuO1xuZXhwb3J0cy5Db21wb25lbnQgPSBDb21wb25lbnQ7XG5leHBvcnRzLkZyYWdtZW50ID0gUkVBQ1RfRlJBR01FTlRfVFlQRTtcbmV4cG9ydHMuUHJvZmlsZXIgPSBSRUFDVF9QUk9GSUxFUl9UWVBFO1xuZXhwb3J0cy5QdXJlQ29tcG9uZW50ID0gUHVyZUNvbXBvbmVudDtcbmV4cG9ydHMuU3RyaWN0TW9kZSA9IFJFQUNUX1NUUklDVF9NT0RFX1RZUEU7XG5leHBvcnRzLlN1c3BlbnNlID0gUkVBQ1RfU1VTUEVOU0VfVFlQRTtcbmV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQgPSBSZWFjdFNoYXJlZEludGVybmFscztcbmV4cG9ydHMuYWN0ID0gYWN0O1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQgPSBjbG9uZUVsZW1lbnQkMTtcbmV4cG9ydHMuY3JlYXRlQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQ7XG5leHBvcnRzLmNyZWF0ZUVsZW1lbnQgPSBjcmVhdGVFbGVtZW50JDE7XG5leHBvcnRzLmNyZWF0ZUZhY3RvcnkgPSBjcmVhdGVGYWN0b3J5O1xuZXhwb3J0cy5jcmVhdGVSZWYgPSBjcmVhdGVSZWY7XG5leHBvcnRzLmZvcndhcmRSZWYgPSBmb3J3YXJkUmVmO1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudCA9IGlzVmFsaWRFbGVtZW50O1xuZXhwb3J0cy5sYXp5ID0gbGF6eTtcbmV4cG9ydHMubWVtbyA9IG1lbW87XG5leHBvcnRzLnN0YXJ0VHJhbnNpdGlvbiA9IHN0YXJ0VHJhbnNpdGlvbjtcbmV4cG9ydHMudW5zdGFibGVfYWN0ID0gYWN0O1xuZXhwb3J0cy51c2VDYWxsYmFjayA9IHVzZUNhbGxiYWNrO1xuZXhwb3J0cy51c2VDb250ZXh0ID0gdXNlQ29udGV4dDtcbmV4cG9ydHMudXNlRGVidWdWYWx1ZSA9IHVzZURlYnVnVmFsdWU7XG5leHBvcnRzLnVzZURlZmVycmVkVmFsdWUgPSB1c2VEZWZlcnJlZFZhbHVlO1xuZXhwb3J0cy51c2VFZmZlY3QgPSB1c2VFZmZlY3Q7XG5leHBvcnRzLnVzZUlkID0gdXNlSWQ7XG5leHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGUgPSB1c2VJbXBlcmF0aXZlSGFuZGxlO1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3QgPSB1c2VJbnNlcnRpb25FZmZlY3Q7XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdCA9IHVzZUxheW91dEVmZmVjdDtcbmV4cG9ydHMudXNlTWVtbyA9IHVzZU1lbW87XG5leHBvcnRzLnVzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyO1xuZXhwb3J0cy51c2VSZWYgPSB1c2VSZWY7XG5leHBvcnRzLnVzZVN0YXRlID0gdXNlU3RhdGU7XG5leHBvcnRzLnVzZVN5bmNFeHRlcm5hbFN0b3JlID0gdXNlU3luY0V4dGVybmFsU3RvcmU7XG5leHBvcnRzLnVzZVRyYW5zaXRpb24gPSB1c2VUcmFuc2l0aW9uO1xuZXhwb3J0cy52ZXJzaW9uID0gUmVhY3RWZXJzaW9uO1xuICAgICAgICAgIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbmlmIChcbiAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5yZWdpc3RlckludGVybmFsTW9kdWxlU3RvcCA9PT1cbiAgICAnZnVuY3Rpb24nXG4pIHtcbiAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLnJlZ2lzdGVySW50ZXJuYWxNb2R1bGVTdG9wKG5ldyBFcnJvcigpKTtcbn1cbiAgICAgICAgXG4gIH0pKCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1qc3gtcnVudGltZS5kZXZlbG9wbWVudC5qcycpO1xufVxuIl0sIm5hbWVzIjpbIl90eXBlb2YiLCJvIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsInJlZ2lzdGVySW50ZXJuYWxNb2R1bGVTdGFydCIsIkVycm9yIiwiUmVhY3QiLCJyZXF1aXJlIiwiU2NoZWR1bGVyIiwiUmVhY3RTaGFyZWRJbnRlcm5hbHMiLCJfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCIsInN1cHByZXNzV2FybmluZyIsInNldFN1cHByZXNzV2FybmluZyIsIm5ld1N1cHByZXNzV2FybmluZyIsIndhcm4iLCJmb3JtYXQiLCJfbGVuIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiYXJncyIsIkFycmF5IiwiX2tleSIsInByaW50V2FybmluZyIsImVycm9yIiwiX2xlbjIiLCJfa2V5MiIsImxldmVsIiwiUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSIsInN0YWNrIiwiZ2V0U3RhY2tBZGRlbmR1bSIsImNvbmNhdCIsImFyZ3NXaXRoRm9ybWF0IiwibWFwIiwiaXRlbSIsIlN0cmluZyIsInVuc2hpZnQiLCJGdW5jdGlvbiIsImFwcGx5IiwiY2FsbCIsImNvbnNvbGUiLCJGdW5jdGlvbkNvbXBvbmVudCIsIkNsYXNzQ29tcG9uZW50IiwiSW5kZXRlcm1pbmF0ZUNvbXBvbmVudCIsIkhvc3RSb290IiwiSG9zdFBvcnRhbCIsIkhvc3RDb21wb25lbnQiLCJIb3N0VGV4dCIsIkZyYWdtZW50IiwiTW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkZvcndhcmRSZWYiLCJQcm9maWxlciIsIlN1c3BlbnNlQ29tcG9uZW50IiwiTWVtb0NvbXBvbmVudCIsIlNpbXBsZU1lbW9Db21wb25lbnQiLCJMYXp5Q29tcG9uZW50IiwiSW5jb21wbGV0ZUNsYXNzQ29tcG9uZW50IiwiRGVoeWRyYXRlZEZyYWdtZW50IiwiU3VzcGVuc2VMaXN0Q29tcG9uZW50IiwiU2NvcGVDb21wb25lbnQiLCJPZmZzY3JlZW5Db21wb25lbnQiLCJMZWdhY3lIaWRkZW5Db21wb25lbnQiLCJDYWNoZUNvbXBvbmVudCIsIlRyYWNpbmdNYXJrZXJDb21wb25lbnQiLCJlbmFibGVDbGllbnRSZW5kZXJGYWxsYmFja09uVGV4dE1pc21hdGNoIiwiZW5hYmxlTmV3UmVjb25jaWxlciIsImVuYWJsZUxhenlDb250ZXh0UHJvcGFnYXRpb24iLCJlbmFibGVMZWdhY3lIaWRkZW4iLCJlbmFibGVTdXNwZW5zZUF2b2lkVGhpc0ZhbGxiYWNrIiwiZGlzYWJsZUNvbW1lbnRzQXNET01Db250YWluZXJzIiwiZW5hYmxlQ3VzdG9tRWxlbWVudFByb3BlcnR5U3VwcG9ydCIsIndhcm5BYm91dFN0cmluZ1JlZnMiLCJlbmFibGVTY2hlZHVsaW5nUHJvZmlsZXIiLCJlbmFibGVQcm9maWxlclRpbWVyIiwiZW5hYmxlUHJvZmlsZXJDb21taXRIb29rcyIsImFsbE5hdGl2ZUV2ZW50cyIsIlNldCIsInJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMiLCJwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzIiwicmVnaXN0ZXJUd29QaGFzZUV2ZW50IiwicmVnaXN0cmF0aW9uTmFtZSIsImRlcGVuZGVuY2llcyIsInJlZ2lzdGVyRGlyZWN0RXZlbnQiLCJsb3dlckNhc2VkTmFtZSIsInRvTG93ZXJDYXNlIiwib25kYmxjbGljayIsImkiLCJhZGQiLCJjYW5Vc2VET00iLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJoYXNPd25Qcm9wZXJ0eSIsIk9iamVjdCIsInR5cGVOYW1lIiwidmFsdWUiLCJoYXNUb1N0cmluZ1RhZyIsInRvU3RyaW5nVGFnIiwidHlwZSIsIm5hbWUiLCJ3aWxsQ29lcmNpb25UaHJvdyIsInRlc3RTdHJpbmdDb2VyY2lvbiIsImUiLCJjaGVja0F0dHJpYnV0ZVN0cmluZ0NvZXJjaW9uIiwiYXR0cmlidXRlTmFtZSIsImNoZWNrS2V5U3RyaW5nQ29lcmNpb24iLCJjaGVja1Byb3BTdHJpbmdDb2VyY2lvbiIsInByb3BOYW1lIiwiY2hlY2tDU1NQcm9wZXJ0eVN0cmluZ0NvZXJjaW9uIiwiY2hlY2tIdG1sU3RyaW5nQ29lcmNpb24iLCJjaGVja0Zvcm1GaWVsZFZhbHVlU3RyaW5nQ29lcmNpb24iLCJSRVNFUlZFRCIsIlNUUklORyIsIkJPT0xFQU5JU0hfU1RSSU5HIiwiQk9PTEVBTiIsIk9WRVJMT0FERURfQk9PTEVBTiIsIk5VTUVSSUMiLCJQT1NJVElWRV9OVU1FUklDIiwiQVRUUklCVVRFX05BTUVfU1RBUlRfQ0hBUiIsIkFUVFJJQlVURV9OQU1FX0NIQVIiLCJWQUxJRF9BVFRSSUJVVEVfTkFNRV9SRUdFWCIsIlJlZ0V4cCIsImlsbGVnYWxBdHRyaWJ1dGVOYW1lQ2FjaGUiLCJ2YWxpZGF0ZWRBdHRyaWJ1dGVOYW1lQ2FjaGUiLCJpc0F0dHJpYnV0ZU5hbWVTYWZlIiwidGVzdCIsInNob3VsZElnbm9yZUF0dHJpYnV0ZSIsInByb3BlcnR5SW5mbyIsImlzQ3VzdG9tQ29tcG9uZW50VGFnIiwic2hvdWxkUmVtb3ZlQXR0cmlidXRlV2l0aFdhcm5pbmciLCJhY2NlcHRzQm9vbGVhbnMiLCJwcmVmaXgiLCJzbGljZSIsInNob3VsZFJlbW92ZUF0dHJpYnV0ZSIsImlzTmFOIiwiZ2V0UHJvcGVydHlJbmZvIiwicHJvcGVydGllcyIsIlByb3BlcnR5SW5mb1JlY29yZCIsIm11c3RVc2VQcm9wZXJ0eSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsInNhbml0aXplVVJMIiwicmVtb3ZlRW1wdHlTdHJpbmciLCJwcm9wZXJ0eU5hbWUiLCJyZXNlcnZlZFByb3BzIiwiZm9yRWFjaCIsIl9yZWYiLCJDQU1FTElaRSIsImNhcGl0YWxpemUiLCJ0b2tlbiIsInRvVXBwZXJDYXNlIiwicmVwbGFjZSIsInhsaW5rSHJlZiIsImlzSmF2YVNjcmlwdFByb3RvY29sIiwiZGlkV2FybiIsInVybCIsIkpTT04iLCJzdHJpbmdpZnkiLCJnZXRWYWx1ZUZvclByb3BlcnR5Iiwibm9kZSIsImV4cGVjdGVkIiwic3RyaW5nVmFsdWUiLCJoYXNBdHRyaWJ1dGUiLCJnZXRBdHRyaWJ1dGUiLCJnZXRWYWx1ZUZvckF0dHJpYnV0ZSIsInVuZGVmaW5lZCIsInNldFZhbHVlRm9yUHJvcGVydHkiLCJfYXR0cmlidXRlTmFtZSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsIl90eXBlIiwiYXR0cmlidXRlVmFsdWUiLCJ0b1N0cmluZyIsInNldEF0dHJpYnV0ZU5TIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiUkVBQ1RfUE9SVEFMX1RZUEUiLCJSRUFDVF9GUkFHTUVOVF9UWVBFIiwiUkVBQ1RfU1RSSUNUX01PREVfVFlQRSIsIlJFQUNUX1BST0ZJTEVSX1RZUEUiLCJSRUFDVF9QUk9WSURFUl9UWVBFIiwiUkVBQ1RfQ09OVEVYVF9UWVBFIiwiUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSIsIlJFQUNUX1NVU1BFTlNFX1RZUEUiLCJSRUFDVF9TVVNQRU5TRV9MSVNUX1RZUEUiLCJSRUFDVF9NRU1PX1RZUEUiLCJSRUFDVF9MQVpZX1RZUEUiLCJSRUFDVF9TQ09QRV9UWVBFIiwiUkVBQ1RfREVCVUdfVFJBQ0lOR19NT0RFX1RZUEUiLCJSRUFDVF9PRkZTQ1JFRU5fVFlQRSIsIlJFQUNUX0xFR0FDWV9ISURERU5fVFlQRSIsIlJFQUNUX0NBQ0hFX1RZUEUiLCJSRUFDVF9UUkFDSU5HX01BUktFUl9UWVBFIiwiTUFZQkVfSVRFUkFUT1JfU1lNQk9MIiwiRkFVWF9JVEVSQVRPUl9TWU1CT0wiLCJnZXRJdGVyYXRvckZuIiwibWF5YmVJdGVyYWJsZSIsIm1heWJlSXRlcmF0b3IiLCJhc3NpZ24iLCJkaXNhYmxlZERlcHRoIiwicHJldkxvZyIsInByZXZJbmZvIiwicHJldldhcm4iLCJwcmV2RXJyb3IiLCJwcmV2R3JvdXAiLCJwcmV2R3JvdXBDb2xsYXBzZWQiLCJwcmV2R3JvdXBFbmQiLCJkaXNhYmxlZExvZyIsIl9fcmVhY3REaXNhYmxlZExvZyIsImRpc2FibGVMb2dzIiwibG9nIiwiaW5mbyIsImdyb3VwIiwiZ3JvdXBDb2xsYXBzZWQiLCJncm91cEVuZCIsInByb3BzIiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsIndyaXRhYmxlIiwiZGVmaW5lUHJvcGVydGllcyIsInJlZW5hYmxlTG9ncyIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJkZXNjcmliZUJ1aWx0SW5Db21wb25lbnRGcmFtZSIsInNvdXJjZSIsIm93bmVyRm4iLCJ4IiwibWF0Y2giLCJ0cmltIiwicmVlbnRyeSIsImNvbXBvbmVudEZyYW1lQ2FjaGUiLCJQb3NzaWJseVdlYWtNYXAiLCJXZWFrTWFwIiwiTWFwIiwiZGVzY3JpYmVOYXRpdmVDb21wb25lbnRGcmFtZSIsImZuIiwiY29uc3RydWN0IiwiZnJhbWUiLCJnZXQiLCJjb250cm9sIiwicHJldmlvdXNQcmVwYXJlU3RhY2tUcmFjZSIsInByZXBhcmVTdGFja1RyYWNlIiwicHJldmlvdXNEaXNwYXRjaGVyIiwiY3VycmVudCIsIkZha2UiLCJkZWZpbmVQcm9wZXJ0eSIsInNldCIsIlJlZmxlY3QiLCJzYW1wbGUiLCJzYW1wbGVMaW5lcyIsInNwbGl0IiwiY29udHJvbExpbmVzIiwicyIsImMiLCJfZnJhbWUiLCJkaXNwbGF5TmFtZSIsImluY2x1ZGVzIiwic3ludGhldGljRnJhbWUiLCJkZXNjcmliZUNsYXNzQ29tcG9uZW50RnJhbWUiLCJjdG9yIiwiZGVzY3JpYmVGdW5jdGlvbkNvbXBvbmVudEZyYW1lIiwic2hvdWxkQ29uc3RydWN0IiwiQ29tcG9uZW50IiwiaXNSZWFjdENvbXBvbmVudCIsImRlc2NyaWJlVW5rbm93bkVsZW1lbnRUeXBlRnJhbWVJbkRFViIsIiQkdHlwZW9mIiwicmVuZGVyIiwibGF6eUNvbXBvbmVudCIsInBheWxvYWQiLCJfcGF5bG9hZCIsImluaXQiLCJfaW5pdCIsImRlc2NyaWJlRmliZXIiLCJmaWJlciIsIm93bmVyIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJ0YWciLCJnZXRTdGFja0J5RmliZXJJbkRldkFuZFByb2QiLCJ3b3JrSW5Qcm9ncmVzcyIsIm1lc3NhZ2UiLCJnZXRXcmFwcGVkTmFtZSIsIm91dGVyVHlwZSIsImlubmVyVHlwZSIsIndyYXBwZXJOYW1lIiwiZnVuY3Rpb25OYW1lIiwiZ2V0Q29udGV4dE5hbWUiLCJnZXRDb21wb25lbnROYW1lRnJvbVR5cGUiLCJjb250ZXh0IiwicHJvdmlkZXIiLCJfY29udGV4dCIsIm91dGVyTmFtZSIsImdldFdyYXBwZWROYW1lJDEiLCJnZXRDb250ZXh0TmFtZSQxIiwiZ2V0Q29tcG9uZW50TmFtZUZyb21GaWJlciIsImlzUmVuZGVyaW5nIiwiZ2V0Q3VycmVudEZpYmVyT3duZXJOYW1lSW5EZXZPck51bGwiLCJnZXRDdXJyZW50RmliZXJTdGFja0luRGV2IiwicmVzZXRDdXJyZW50RmliZXIiLCJnZXRDdXJyZW50U3RhY2siLCJzZXRDdXJyZW50RmliZXIiLCJnZXRDdXJyZW50RmliZXIiLCJzZXRJc1JlbmRlcmluZyIsInJlbmRlcmluZyIsImdldFRvU3RyaW5nVmFsdWUiLCJoYXNSZWFkT25seVZhbHVlIiwiYnV0dG9uIiwiY2hlY2tib3giLCJpbWFnZSIsImhpZGRlbiIsInJhZGlvIiwicmVzZXQiLCJzdWJtaXQiLCJjaGVja0NvbnRyb2xsZWRWYWx1ZVByb3BzIiwidGFnTmFtZSIsIm9uQ2hhbmdlIiwib25JbnB1dCIsInJlYWRPbmx5IiwiZGlzYWJsZWQiLCJjaGVja2VkIiwiaXNDaGVja2FibGUiLCJlbGVtIiwibm9kZU5hbWUiLCJnZXRUcmFja2VyIiwiX3ZhbHVlVHJhY2tlciIsImRldGFjaFRyYWNrZXIiLCJnZXRWYWx1ZUZyb21Ob2RlIiwidHJhY2tWYWx1ZU9uTm9kZSIsInZhbHVlRmllbGQiLCJkZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiY3VycmVudFZhbHVlIiwidHJhY2tlciIsImdldFZhbHVlIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJ0cmFjayIsInVwZGF0ZVZhbHVlSWZDaGFuZ2VkIiwibGFzdFZhbHVlIiwibmV4dFZhbHVlIiwiZ2V0QWN0aXZlRWxlbWVudCIsImRvYyIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiZGlkV2FyblZhbHVlRGVmYXVsdFZhbHVlIiwiZGlkV2FybkNoZWNrZWREZWZhdWx0Q2hlY2tlZCIsImRpZFdhcm5Db250cm9sbGVkVG9VbmNvbnRyb2xsZWQiLCJkaWRXYXJuVW5jb250cm9sbGVkVG9Db250cm9sbGVkIiwiaXNDb250cm9sbGVkIiwidXNlc0NoZWNrZWQiLCJnZXRIb3N0UHJvcHMiLCJlbGVtZW50IiwiaG9zdFByb3BzIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJpbml0V3JhcHBlclN0YXRlIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsInVwZGF0ZUNoZWNrZWQiLCJ1cGRhdGVXcmFwcGVyIiwic2V0RGVmYXVsdFZhbHVlIiwicG9zdE1vdW50V3JhcHBlciIsImlzSHlkcmF0aW5nIiwiaXNCdXR0b24iLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlIiwidXBkYXRlTmFtZWRDb3VzaW5zIiwicm9vdE5vZGUiLCJxdWVyeVJvb3QiLCJwYXJlbnROb2RlIiwicXVlcnlTZWxlY3RvckFsbCIsIm90aGVyTm9kZSIsImZvcm0iLCJvdGhlclByb3BzIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSIsIm93bmVyRG9jdW1lbnQiLCJkaWRXYXJuU2VsZWN0ZWRTZXRPbk9wdGlvbiIsImRpZFdhcm5JbnZhbGlkQ2hpbGQiLCJkaWRXYXJuSW52YWxpZElubmVySFRNTCIsInZhbGlkYXRlUHJvcHMiLCJjaGlsZHJlbiIsIkNoaWxkcmVuIiwiY2hpbGQiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsInNlbGVjdGVkIiwicG9zdE1vdW50V3JhcHBlciQxIiwiaXNBcnJheUltcGwiLCJpc0FycmF5IiwiYSIsImRpZFdhcm5WYWx1ZURlZmF1bHRWYWx1ZSQxIiwiZ2V0RGVjbGFyYXRpb25FcnJvckFkZGVuZHVtIiwib3duZXJOYW1lIiwidmFsdWVQcm9wTmFtZXMiLCJjaGVja1NlbGVjdFByb3BUeXBlcyIsInByb3BOYW1lSXNBcnJheSIsIm11bHRpcGxlIiwidXBkYXRlT3B0aW9ucyIsInByb3BWYWx1ZSIsInNldERlZmF1bHRTZWxlY3RlZCIsIm9wdGlvbnMiLCJzZWxlY3RlZFZhbHVlcyIsInNlbGVjdGVkVmFsdWUiLCJfaSIsImRlZmF1bHRTZWxlY3RlZCIsIl9zZWxlY3RlZFZhbHVlIiwiX2kyIiwiZ2V0SG9zdFByb3BzJDEiLCJpbml0V3JhcHBlclN0YXRlJDEiLCJ3YXNNdWx0aXBsZSIsInBvc3RNb3VudFdyYXBwZXIkMiIsInBvc3RVcGRhdGVXcmFwcGVyIiwicmVzdG9yZUNvbnRyb2xsZWRTdGF0ZSQxIiwiZGlkV2FyblZhbERlZmF1bHRWYWwiLCJnZXRIb3N0UHJvcHMkMiIsImluaXRXcmFwcGVyU3RhdGUkMiIsInVwZGF0ZVdyYXBwZXIkMSIsIm5ld1ZhbHVlIiwicG9zdE1vdW50V3JhcHBlciQzIiwidGV4dENvbnRlbnQiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlJDIiLCJIVE1MX05BTUVTUEFDRSIsIk1BVEhfTkFNRVNQQUNFIiwiU1ZHX05BTUVTUEFDRSIsImdldEludHJpbnNpY05hbWVzcGFjZSIsImdldENoaWxkTmFtZXNwYWNlIiwicGFyZW50TmFtZXNwYWNlIiwiY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbiIsImZ1bmMiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwiYXJnMCIsImFyZzEiLCJhcmcyIiwiYXJnMyIsInJldXNhYmxlU1ZHQ29udGFpbmVyIiwic2V0SW5uZXJIVE1MIiwiaHRtbCIsIm5hbWVzcGFjZVVSSSIsImlubmVySFRNTCIsInZhbHVlT2YiLCJzdmdOb2RlIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJFTEVNRU5UX05PREUiLCJURVhUX05PREUiLCJDT01NRU5UX05PREUiLCJET0NVTUVOVF9OT0RFIiwiRE9DVU1FTlRfRlJBR01FTlRfTk9ERSIsInNldFRleHRDb250ZW50IiwidGV4dCIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwic2hvcnRoYW5kVG9Mb25naGFuZCIsImFuaW1hdGlvbiIsImJhY2tncm91bmQiLCJiYWNrZ3JvdW5kUG9zaXRpb24iLCJib3JkZXIiLCJib3JkZXJCbG9ja0VuZCIsImJvcmRlckJsb2NrU3RhcnQiLCJib3JkZXJCb3R0b20iLCJib3JkZXJDb2xvciIsImJvcmRlckltYWdlIiwiYm9yZGVySW5saW5lRW5kIiwiYm9yZGVySW5saW5lU3RhcnQiLCJib3JkZXJMZWZ0IiwiYm9yZGVyUmFkaXVzIiwiYm9yZGVyUmlnaHQiLCJib3JkZXJTdHlsZSIsImJvcmRlclRvcCIsImJvcmRlcldpZHRoIiwiY29sdW1uUnVsZSIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEZsb3ciLCJmb250IiwiZm9udFZhcmlhbnQiLCJnYXAiLCJncmlkIiwiZ3JpZEFyZWEiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkdhcCIsImdyaWRHYXAiLCJncmlkUm93IiwiZ3JpZFJvd0dhcCIsImdyaWRUZW1wbGF0ZSIsImxpc3RTdHlsZSIsIm1hcmdpbiIsIm1hcmtlciIsIm1hc2siLCJtYXNrUG9zaXRpb24iLCJvdXRsaW5lIiwib3ZlcmZsb3ciLCJwYWRkaW5nIiwicGxhY2VDb250ZW50IiwicGxhY2VJdGVtcyIsInBsYWNlU2VsZiIsInRleHREZWNvcmF0aW9uIiwidGV4dEVtcGhhc2lzIiwidHJhbnNpdGlvbiIsIndvcmRXcmFwIiwiaXNVbml0bGVzc051bWJlciIsImFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50IiwiYXNwZWN0UmF0aW8iLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJwcmVmaXhLZXkiLCJrZXkiLCJjaGFyQXQiLCJzdWJzdHJpbmciLCJwcmVmaXhlcyIsImtleXMiLCJwcm9wIiwiZGFuZ2Vyb3VzU3R5bGVWYWx1ZSIsImlzQ3VzdG9tUHJvcGVydHkiLCJpc0VtcHR5IiwidXBwZXJjYXNlUGF0dGVybiIsIm1zUGF0dGVybiIsImh5cGhlbmF0ZVN0eWxlTmFtZSIsIndhcm5WYWxpZFN0eWxlIiwiYmFkVmVuZG9yZWRTdHlsZU5hbWVQYXR0ZXJuIiwibXNQYXR0ZXJuJDEiLCJoeXBoZW5QYXR0ZXJuIiwiYmFkU3R5bGVWYWx1ZVdpdGhTZW1pY29sb25QYXR0ZXJuIiwid2FybmVkU3R5bGVOYW1lcyIsIndhcm5lZFN0eWxlVmFsdWVzIiwid2FybmVkRm9yTmFOVmFsdWUiLCJ3YXJuZWRGb3JJbmZpbml0eVZhbHVlIiwiY2FtZWxpemUiLCJzdHJpbmciLCJfIiwiY2hhcmFjdGVyIiwid2Fybkh5cGhlbmF0ZWRTdHlsZU5hbWUiLCJ3YXJuQmFkVmVuZG9yZWRTdHlsZU5hbWUiLCJ3YXJuU3R5bGVWYWx1ZVdpdGhTZW1pY29sb24iLCJ3YXJuU3R5bGVWYWx1ZUlzTmFOIiwid2FyblN0eWxlVmFsdWVJc0luZmluaXR5IiwiaW5kZXhPZiIsImlzRmluaXRlIiwid2FyblZhbGlkU3R5bGUkMSIsImNyZWF0ZURhbmdlcm91c1N0cmluZ0ZvclN0eWxlcyIsInN0eWxlcyIsInNlcmlhbGl6ZWQiLCJkZWxpbWl0ZXIiLCJzdHlsZU5hbWUiLCJzdHlsZVZhbHVlIiwic2V0VmFsdWVGb3JTdHlsZXMiLCJzdHlsZSIsInNldFByb3BlcnR5IiwiaXNWYWx1ZUVtcHR5IiwiZXhwYW5kU2hvcnRoYW5kTWFwIiwiZXhwYW5kZWQiLCJsb25naGFuZHMiLCJ2YWxpZGF0ZVNob3J0aGFuZFByb3BlcnR5Q29sbGlzaW9uSW5EZXYiLCJzdHlsZVVwZGF0ZXMiLCJuZXh0U3R5bGVzIiwiZXhwYW5kZWRVcGRhdGVzIiwiZXhwYW5kZWRTdHlsZXMiLCJ3YXJuZWRBYm91dCIsIm9yaWdpbmFsS2V5IiwiY29ycmVjdE9yaWdpbmFsS2V5Iiwid2FybmluZ0tleSIsIm9taXR0ZWRDbG9zZVRhZ3MiLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsIndiciIsInZvaWRFbGVtZW50VGFncyIsIm1lbnVpdGVtIiwiSFRNTCIsImFzc2VydFZhbGlkUHJvcHMiLCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmciLCJjb250ZW50RWRpdGFibGUiLCJpc0N1c3RvbUNvbXBvbmVudCIsImlzIiwicG9zc2libGVTdGFuZGFyZE5hbWVzIiwiYWNjZXB0IiwiYWNjZXB0Y2hhcnNldCIsImFjY2Vzc2tleSIsImFjdGlvbiIsImFsbG93ZnVsbHNjcmVlbiIsImFsdCIsImFzIiwiYXN5bmMiLCJhdXRvY2FwaXRhbGl6ZSIsImF1dG9jb21wbGV0ZSIsImF1dG9jb3JyZWN0IiwiYXV0b2ZvY3VzIiwiYXV0b3BsYXkiLCJhdXRvc2F2ZSIsImNhcHR1cmUiLCJjZWxscGFkZGluZyIsImNlbGxzcGFjaW5nIiwiY2hhbGxlbmdlIiwiY2hhcnNldCIsImNpdGUiLCJjbGFzc2lkIiwiY2xhc3NuYW1lIiwiY29scyIsImNvbHNwYW4iLCJjb250ZW50IiwiY29udGVudGVkaXRhYmxlIiwiY29udGV4dG1lbnUiLCJjb250cm9scyIsImNvbnRyb2xzbGlzdCIsImNvb3JkcyIsImNyb3Nzb3JpZ2luIiwiZGFuZ2Vyb3VzbHlzZXRpbm5lcmh0bWwiLCJkYXRhIiwiZGF0ZXRpbWUiLCJkZWZhdWx0Y2hlY2tlZCIsImRlZmF1bHR2YWx1ZSIsImRlZmVyIiwiZGlyIiwiZGlzYWJsZXBpY3R1cmVpbnBpY3R1cmUiLCJkaXNhYmxlcmVtb3RlcGxheWJhY2siLCJkb3dubG9hZCIsImRyYWdnYWJsZSIsImVuY3R5cGUiLCJlbnRlcmtleWhpbnQiLCJmb3JtbWV0aG9kIiwiZm9ybWFjdGlvbiIsImZvcm1lbmN0eXBlIiwiZm9ybW5vdmFsaWRhdGUiLCJmb3JtdGFyZ2V0IiwiZnJhbWVib3JkZXIiLCJoZWFkZXJzIiwiaGVpZ2h0IiwiaGlnaCIsImhyZWYiLCJocmVmbGFuZyIsImh0bWxmb3IiLCJodHRwZXF1aXYiLCJpY29uIiwiaWQiLCJpbWFnZXNpemVzIiwiaW1hZ2VzcmNzZXQiLCJpbm5lcmh0bWwiLCJpbnB1dG1vZGUiLCJpbnRlZ3JpdHkiLCJpdGVtaWQiLCJpdGVtcHJvcCIsIml0ZW1yZWYiLCJpdGVtc2NvcGUiLCJpdGVtdHlwZSIsImtleXBhcmFtcyIsImtleXR5cGUiLCJraW5kIiwibGFiZWwiLCJsYW5nIiwibGlzdCIsImxvb3AiLCJsb3ciLCJtYW5pZmVzdCIsIm1hcmdpbndpZHRoIiwibWFyZ2luaGVpZ2h0IiwibWF4IiwibWF4bGVuZ3RoIiwibWVkaWEiLCJtZWRpYWdyb3VwIiwibWV0aG9kIiwibWluIiwibWlubGVuZ3RoIiwibXV0ZWQiLCJub21vZHVsZSIsIm5vbmNlIiwibm92YWxpZGF0ZSIsIm9wZW4iLCJvcHRpbXVtIiwicGF0dGVybiIsInBsYWNlaG9sZGVyIiwicGxheXNpbmxpbmUiLCJwb3N0ZXIiLCJwcmVsb2FkIiwicHJvZmlsZSIsInJhZGlvZ3JvdXAiLCJyZWFkb25seSIsInJlZmVycmVycG9saWN5IiwicmVsIiwicmVxdWlyZWQiLCJyZXZlcnNlZCIsInJvbGUiLCJyb3dzIiwicm93c3BhbiIsInNhbmRib3giLCJzY29wZSIsInNjb3BlZCIsInNjcm9sbGluZyIsInNlYW1sZXNzIiwic2hhcGUiLCJzaXplIiwic2l6ZXMiLCJzcGFuIiwic3BlbGxjaGVjayIsInNyYyIsInNyY2RvYyIsInNyY2xhbmciLCJzcmNzZXQiLCJzdGFydCIsInN0ZXAiLCJzdW1tYXJ5IiwidGFiaW5kZXgiLCJ0YXJnZXQiLCJ0aXRsZSIsInVzZW1hcCIsIndpZHRoIiwid21vZGUiLCJ3cmFwIiwiYWJvdXQiLCJhY2NlbnRoZWlnaHQiLCJhY2N1bXVsYXRlIiwiYWRkaXRpdmUiLCJhbGlnbm1lbnRiYXNlbGluZSIsImFsbG93cmVvcmRlciIsImFscGhhYmV0aWMiLCJhbXBsaXR1ZGUiLCJhcmFiaWNmb3JtIiwiYXNjZW50IiwiYXR0cmlidXRlbmFtZSIsImF0dHJpYnV0ZXR5cGUiLCJhdXRvcmV2ZXJzZSIsImF6aW11dGgiLCJiYXNlZnJlcXVlbmN5IiwiYmFzZWxpbmVzaGlmdCIsImJhc2Vwcm9maWxlIiwiYmJveCIsImJlZ2luIiwiYmlhcyIsImJ5IiwiY2FsY21vZGUiLCJjYXBoZWlnaHQiLCJjbGlwIiwiY2xpcHBhdGgiLCJjbGlwcGF0aHVuaXRzIiwiY2xpcHJ1bGUiLCJjb2xvciIsImNvbG9yaW50ZXJwb2xhdGlvbiIsImNvbG9yaW50ZXJwb2xhdGlvbmZpbHRlcnMiLCJjb2xvcnByb2ZpbGUiLCJjb2xvcnJlbmRlcmluZyIsImNvbnRlbnRzY3JpcHR0eXBlIiwiY29udGVudHN0eWxldHlwZSIsImN1cnNvciIsImN4IiwiY3kiLCJkIiwiZGF0YXR5cGUiLCJkZWNlbGVyYXRlIiwiZGVzY2VudCIsImRpZmZ1c2Vjb25zdGFudCIsImRpcmVjdGlvbiIsImRpc3BsYXkiLCJkaXZpc29yIiwiZG9taW5hbnRiYXNlbGluZSIsImR1ciIsImR4IiwiZHkiLCJlZGdlbW9kZSIsImVsZXZhdGlvbiIsImVuYWJsZWJhY2tncm91bmQiLCJlbmQiLCJleHBvbmVudCIsImV4dGVybmFscmVzb3VyY2VzcmVxdWlyZWQiLCJmaWxsIiwiZmlsbG9wYWNpdHkiLCJmaWxscnVsZSIsImZpbHRlciIsImZpbHRlcnJlcyIsImZpbHRlcnVuaXRzIiwiZmxvb2RvcGFjaXR5IiwiZmxvb2Rjb2xvciIsImZvY3VzYWJsZSIsImZvbnRmYW1pbHkiLCJmb250c2l6ZSIsImZvbnRzaXplYWRqdXN0IiwiZm9udHN0cmV0Y2giLCJmb250c3R5bGUiLCJmb250dmFyaWFudCIsImZvbnR3ZWlnaHQiLCJmcm9tIiwiZngiLCJmeSIsImcxIiwiZzIiLCJnbHlwaG5hbWUiLCJnbHlwaG9yaWVudGF0aW9uaG9yaXpvbnRhbCIsImdseXBob3JpZW50YXRpb252ZXJ0aWNhbCIsImdseXBocmVmIiwiZ3JhZGllbnR0cmFuc2Zvcm0iLCJncmFkaWVudHVuaXRzIiwiaGFuZ2luZyIsImhvcml6YWR2eCIsImhvcml6b3JpZ2lueCIsImlkZW9ncmFwaGljIiwiaW1hZ2VyZW5kZXJpbmciLCJpbjIiLCJpbmxpc3QiLCJpbnRlcmNlcHQiLCJrMSIsImsyIiwiazMiLCJrNCIsImsiLCJrZXJuZWxtYXRyaXgiLCJrZXJuZWx1bml0bGVuZ3RoIiwia2VybmluZyIsImtleXBvaW50cyIsImtleXNwbGluZXMiLCJrZXl0aW1lcyIsImxlbmd0aGFkanVzdCIsImxldHRlcnNwYWNpbmciLCJsaWdodGluZ2NvbG9yIiwibGltaXRpbmdjb25lYW5nbGUiLCJsb2NhbCIsIm1hcmtlcmVuZCIsIm1hcmtlcmhlaWdodCIsIm1hcmtlcm1pZCIsIm1hcmtlcnN0YXJ0IiwibWFya2VydW5pdHMiLCJtYXJrZXJ3aWR0aCIsIm1hc2tjb250ZW50dW5pdHMiLCJtYXNrdW5pdHMiLCJtYXRoZW1hdGljYWwiLCJtb2RlIiwibnVtb2N0YXZlcyIsIm9mZnNldCIsIm9wZXJhdG9yIiwib3JpZW50Iiwib3JpZW50YXRpb24iLCJvcmlnaW4iLCJvdmVybGluZXBvc2l0aW9uIiwib3ZlcmxpbmV0aGlja25lc3MiLCJwYWludG9yZGVyIiwicGFub3NlMSIsInBhdGhsZW5ndGgiLCJwYXR0ZXJuY29udGVudHVuaXRzIiwicGF0dGVybnRyYW5zZm9ybSIsInBhdHRlcm51bml0cyIsInBvaW50ZXJldmVudHMiLCJwb2ludHMiLCJwb2ludHNhdHgiLCJwb2ludHNhdHkiLCJwb2ludHNhdHoiLCJwcmVzZXJ2ZWFscGhhIiwicHJlc2VydmVhc3BlY3RyYXRpbyIsInByaW1pdGl2ZXVuaXRzIiwicHJvcGVydHkiLCJyIiwicmFkaXVzIiwicmVmeCIsInJlZnkiLCJyZW5kZXJpbmdpbnRlbnQiLCJyZXBlYXRjb3VudCIsInJlcGVhdGR1ciIsInJlcXVpcmVkZXh0ZW5zaW9ucyIsInJlcXVpcmVkZmVhdHVyZXMiLCJyZXNvdXJjZSIsInJlc3RhcnQiLCJyZXN1bHQiLCJyZXN1bHRzIiwicm90YXRlIiwicngiLCJyeSIsInNjYWxlIiwic2VjdXJpdHkiLCJzZWVkIiwic2hhcGVyZW5kZXJpbmciLCJzbG9wZSIsInNwYWNpbmciLCJzcGVjdWxhcmNvbnN0YW50Iiwic3BlY3VsYXJleHBvbmVudCIsInNwZWVkIiwic3ByZWFkbWV0aG9kIiwic3RhcnRvZmZzZXQiLCJzdGRkZXZpYXRpb24iLCJzdGVtaCIsInN0ZW12Iiwic3RpdGNodGlsZXMiLCJzdG9wY29sb3IiLCJzdG9wb3BhY2l0eSIsInN0cmlrZXRocm91Z2hwb3NpdGlvbiIsInN0cmlrZXRocm91Z2h0aGlja25lc3MiLCJzdHJva2UiLCJzdHJva2VkYXNoYXJyYXkiLCJzdHJva2VkYXNob2Zmc2V0Iiwic3Ryb2tlbGluZWNhcCIsInN0cm9rZWxpbmVqb2luIiwic3Ryb2tlbWl0ZXJsaW1pdCIsInN0cm9rZXdpZHRoIiwic3Ryb2tlb3BhY2l0eSIsInN1cHByZXNzY29udGVudGVkaXRhYmxld2FybmluZyIsInN1cHByZXNzaHlkcmF0aW9ud2FybmluZyIsInN1cmZhY2VzY2FsZSIsInN5c3RlbWxhbmd1YWdlIiwidGFibGV2YWx1ZXMiLCJ0YXJnZXR4IiwidGFyZ2V0eSIsInRleHRhbmNob3IiLCJ0ZXh0ZGVjb3JhdGlvbiIsInRleHRsZW5ndGgiLCJ0ZXh0cmVuZGVyaW5nIiwidG8iLCJ0cmFuc2Zvcm0iLCJ1MSIsInUyIiwidW5kZXJsaW5lcG9zaXRpb24iLCJ1bmRlcmxpbmV0aGlja25lc3MiLCJ1bmljb2RlIiwidW5pY29kZWJpZGkiLCJ1bmljb2RlcmFuZ2UiLCJ1bml0c3BlcmVtIiwidW5zZWxlY3RhYmxlIiwidmFscGhhYmV0aWMiLCJ2YWx1ZXMiLCJ2ZWN0b3JlZmZlY3QiLCJ2ZXJzaW9uIiwidmVydGFkdnkiLCJ2ZXJ0b3JpZ2lueCIsInZlcnRvcmlnaW55IiwidmhhbmdpbmciLCJ2aWRlb2dyYXBoaWMiLCJ2aWV3Ym94Iiwidmlld3RhcmdldCIsInZpc2liaWxpdHkiLCJ2bWF0aGVtYXRpY2FsIiwidm9jYWIiLCJ3aWR0aHMiLCJ3b3Jkc3BhY2luZyIsIndyaXRpbmdtb2RlIiwieDEiLCJ4MiIsInhjaGFubmVsc2VsZWN0b3IiLCJ4aGVpZ2h0IiwieGxpbmthY3R1YXRlIiwieGxpbmthcmNyb2xlIiwieGxpbmtocmVmIiwieGxpbmtyb2xlIiwieGxpbmtzaG93IiwieGxpbmt0aXRsZSIsInhsaW5rdHlwZSIsInhtbGJhc2UiLCJ4bWxsYW5nIiwieG1sbnMiLCJ4bWxuc3hsaW5rIiwieG1sc3BhY2UiLCJ5MSIsInkyIiwieSIsInljaGFubmVsc2VsZWN0b3IiLCJ6Iiwiem9vbWFuZHBhbiIsImFyaWFQcm9wZXJ0aWVzIiwid2FybmVkUHJvcGVydGllcyIsInJBUklBIiwickFSSUFDYW1lbCIsInZhbGlkYXRlUHJvcGVydHkiLCJhcmlhTmFtZSIsImNvcnJlY3ROYW1lIiwic3RhbmRhcmROYW1lIiwid2FybkludmFsaWRBUklBUHJvcHMiLCJpbnZhbGlkUHJvcHMiLCJpc1ZhbGlkIiwicHVzaCIsInVua25vd25Qcm9wU3RyaW5nIiwiam9pbiIsInZhbGlkYXRlUHJvcGVydGllcyIsImRpZFdhcm5WYWx1ZU51bGwiLCJ2YWxpZGF0ZVByb3BlcnRpZXMkMSIsInZhbGlkYXRlUHJvcGVydHkkMSIsIndhcm5lZFByb3BlcnRpZXMkMSIsIkVWRU5UX05BTUVfUkVHRVgiLCJJTlZBTElEX0VWRU5UX05BTUVfUkVHRVgiLCJyQVJJQSQxIiwickFSSUFDYW1lbCQxIiwiZXZlbnRSZWdpc3RyeSIsImlzUmVzZXJ2ZWQiLCJ3YXJuVW5rbm93blByb3BlcnRpZXMiLCJ1bmtub3duUHJvcHMiLCJ2YWxpZGF0ZVByb3BlcnRpZXMkMiIsIklTX0VWRU5UX0hBTkRMRV9OT05fTUFOQUdFRF9OT0RFIiwiSVNfTk9OX0RFTEVHQVRFRCIsIklTX0NBUFRVUkVfUEhBU0UiLCJTSE9VTERfTk9UX1BST0NFU1NfUE9MWUZJTExfRVZFTlRfUExVR0lOUyIsImN1cnJlbnRSZXBsYXlpbmdFdmVudCIsInNldFJlcGxheWluZ0V2ZW50IiwiZXZlbnQiLCJyZXNldFJlcGxheWluZ0V2ZW50IiwiaXNSZXBsYXlpbmdFdmVudCIsImdldEV2ZW50VGFyZ2V0IiwibmF0aXZlRXZlbnQiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJyZXN0b3JlSW1wbCIsInJlc3RvcmVUYXJnZXQiLCJyZXN0b3JlUXVldWUiLCJyZXN0b3JlU3RhdGVPZlRhcmdldCIsImludGVybmFsSW5zdGFuY2UiLCJnZXRJbnN0YW5jZUZyb21Ob2RlIiwic3RhdGVOb2RlIiwiX3Byb3BzIiwic2V0UmVzdG9yZUltcGxlbWVudGF0aW9uIiwiaW1wbCIsImVucXVldWVTdGF0ZVJlc3RvcmUiLCJuZWVkc1N0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwicXVldWVkVGFyZ2V0cyIsImJhdGNoZWRVcGRhdGVzSW1wbCIsImJvb2trZWVwaW5nIiwiZmx1c2hTeW5jSW1wbCIsImlzSW5zaWRlRXZlbnRIYW5kbGVyIiwiZmluaXNoRXZlbnRIYW5kbGVyIiwiY29udHJvbGxlZENvbXBvbmVudHNIYXZlUGVuZGluZ1VwZGF0ZXMiLCJiYXRjaGVkVXBkYXRlcyIsImIiLCJzZXRCYXRjaGluZ0ltcGxlbWVudGF0aW9uIiwiX2JhdGNoZWRVcGRhdGVzSW1wbCIsIl9kaXNjcmV0ZVVwZGF0ZXNJbXBsIiwiX2ZsdXNoU3luY0ltcGwiLCJpc0ludGVyYWN0aXZlIiwic2hvdWxkUHJldmVudE1vdXNlRXZlbnQiLCJnZXRMaXN0ZW5lciIsImluc3QiLCJsaXN0ZW5lciIsInBhc3NpdmVCcm93c2VyRXZlbnRzU3VwcG9ydGVkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tQcm9kIiwiZiIsImZ1bmNBcmdzIiwib25FcnJvciIsImludm9rZUd1YXJkZWRDYWxsYmFja0ltcGwiLCJkaXNwYXRjaEV2ZW50IiwiY3JlYXRlRXZlbnQiLCJmYWtlTm9kZSIsImludm9rZUd1YXJkZWRDYWxsYmFja0RldiIsImV2dCIsImRpZENhbGwiLCJkaWRFcnJvciIsIndpbmRvd0V2ZW50Iiwid2luZG93RXZlbnREZXNjcmlwdG9yIiwicmVzdG9yZUFmdGVyRGlzcGF0Y2giLCJldnRUeXBlIiwiY2FsbENhbGxiYWNrIiwiZGlkU2V0RXJyb3IiLCJpc0Nyb3NzT3JpZ2luRXJyb3IiLCJoYW5kbGVXaW5kb3dFcnJvciIsImNvbG5vIiwibGluZW5vIiwiZGVmYXVsdFByZXZlbnRlZCIsIl9zdXBwcmVzc0xvZ2dpbmciLCJpbm5lciIsImluaXRFdmVudCIsImludm9rZUd1YXJkZWRDYWxsYmFja0ltcGwkMSIsImhhc0Vycm9yIiwiY2F1Z2h0RXJyb3IiLCJoYXNSZXRocm93RXJyb3IiLCJyZXRocm93RXJyb3IiLCJyZXBvcnRlciIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvciIsImNsZWFyQ2F1Z2h0RXJyb3IiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJoYXNDYXVnaHRFcnJvciIsIl9yZWFjdEludGVybmFscyIsImhhcyIsIk5vRmxhZ3MiLCJQZXJmb3JtZWRXb3JrIiwiUGxhY2VtZW50IiwiVXBkYXRlIiwiQ2hpbGREZWxldGlvbiIsIkNvbnRlbnRSZXNldCIsIkNhbGxiYWNrIiwiRGlkQ2FwdHVyZSIsIkZvcmNlQ2xpZW50UmVuZGVyIiwiUmVmIiwiU25hcHNob3QiLCJQYXNzaXZlIiwiSHlkcmF0aW5nIiwiVmlzaWJpbGl0eSIsIlN0b3JlQ29uc2lzdGVuY3kiLCJMaWZlY3ljbGVFZmZlY3RNYXNrIiwiSG9zdEVmZmVjdE1hc2siLCJJbmNvbXBsZXRlIiwiU2hvdWxkQ2FwdHVyZSIsIkZvcmNlVXBkYXRlRm9yTGVnYWN5U3VzcGVuc2UiLCJGb3JrZWQiLCJSZWZTdGF0aWMiLCJMYXlvdXRTdGF0aWMiLCJQYXNzaXZlU3RhdGljIiwiTW91bnRMYXlvdXREZXYiLCJNb3VudFBhc3NpdmVEZXYiLCJCZWZvcmVNdXRhdGlvbk1hc2siLCJNdXRhdGlvbk1hc2siLCJMYXlvdXRNYXNrIiwiUGFzc2l2ZU1hc2siLCJTdGF0aWNNYXNrIiwiUmVhY3RDdXJyZW50T3duZXIiLCJnZXROZWFyZXN0TW91bnRlZEZpYmVyIiwibmVhcmVzdE1vdW50ZWQiLCJhbHRlcm5hdGUiLCJuZXh0Tm9kZSIsImZsYWdzIiwiZ2V0U3VzcGVuc2VJbnN0YW5jZUZyb21GaWJlciIsInN1c3BlbnNlU3RhdGUiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImdldENvbnRhaW5lckZyb21GaWJlciIsImNvbnRhaW5lckluZm8iLCJpc0ZpYmVyTW91bnRlZCIsImlzTW91bnRlZCIsImNvbXBvbmVudCIsIm93bmVyRmliZXIiLCJpbnN0YW5jZSIsIl93YXJuZWRBYm91dFJlZnNJblJlbmRlciIsImFzc2VydElzTW91bnRlZCIsImZpbmRDdXJyZW50RmliZXJVc2luZ1Nsb3dQYXRoIiwicGFyZW50QSIsInBhcmVudEIiLCJuZXh0UGFyZW50Iiwic2libGluZyIsImRpZEZpbmRDaGlsZCIsIl9jaGlsZCIsImZpbmRDdXJyZW50SG9zdEZpYmVyIiwicGFyZW50IiwiY3VycmVudFBhcmVudCIsImZpbmRDdXJyZW50SG9zdEZpYmVySW1wbCIsImZpbmRDdXJyZW50SG9zdEZpYmVyV2l0aE5vUG9ydGFscyIsImZpbmRDdXJyZW50SG9zdEZpYmVyV2l0aE5vUG9ydGFsc0ltcGwiLCJzY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsImNhbmNlbENhbGxiYWNrIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJzaG91bGRZaWVsZCIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwicmVxdWVzdFBhaW50IiwidW5zdGFibGVfcmVxdWVzdFBhaW50Iiwibm93IiwidW5zdGFibGVfbm93IiwiZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIkltbWVkaWF0ZVByaW9yaXR5IiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJVc2VyQmxvY2tpbmdQcmlvcml0eSIsInVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5IiwiTm9ybWFsUHJpb3JpdHkiLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIkxvd1ByaW9yaXR5IiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJJZGxlUHJpb3JpdHkiLCJ1bnN0YWJsZV9JZGxlUHJpb3JpdHkiLCJ1bnN0YWJsZV95aWVsZFZhbHVlIiwidW5zdGFibGVfc2V0RGlzYWJsZVlpZWxkVmFsdWUiLCJyZW5kZXJlcklEIiwiaW5qZWN0ZWRIb29rIiwiaW5qZWN0ZWRQcm9maWxpbmdIb29rcyIsImhhc0xvZ2dlZEVycm9yIiwiaXNEZXZUb29sc1ByZXNlbnQiLCJpbmplY3RJbnRlcm5hbHMiLCJpbnRlcm5hbHMiLCJob29rIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJnZXRMYW5lTGFiZWxNYXAiLCJpbmplY3RQcm9maWxpbmdIb29rcyIsImluamVjdCIsImVyciIsImNoZWNrRENFIiwib25TY2hlZHVsZVJvb3QiLCJyb290Iiwib25TY2hlZHVsZUZpYmVyUm9vdCIsIm9uQ29tbWl0Um9vdCIsImV2ZW50UHJpb3JpdHkiLCJvbkNvbW1pdEZpYmVyUm9vdCIsInNjaGVkdWxlclByaW9yaXR5IiwiRGlzY3JldGVFdmVudFByaW9yaXR5IiwiQ29udGludW91c0V2ZW50UHJpb3JpdHkiLCJEZWZhdWx0RXZlbnRQcmlvcml0eSIsIklkbGVFdmVudFByaW9yaXR5Iiwib25Qb3N0Q29tbWl0Um9vdCIsIm9uUG9zdENvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0VW5tb3VudCIsIm9uQ29tbWl0RmliZXJVbm1vdW50Iiwic2V0SXNTdHJpY3RNb2RlRm9yRGV2dG9vbHMiLCJuZXdJc1N0cmljdE1vZGUiLCJzZXRTdHJpY3RNb2RlIiwicHJvZmlsaW5nSG9va3MiLCJsYW5lIiwiaW5kZXgiLCJUb3RhbExhbmVzIiwiZ2V0TGFiZWxGb3JMYW5lIiwibWFya0NvbW1pdFN0YXJ0ZWQiLCJsYW5lcyIsIm1hcmtDb21taXRTdG9wcGVkIiwibWFya0NvbXBvbmVudFJlbmRlclN0YXJ0ZWQiLCJtYXJrQ29tcG9uZW50UmVuZGVyU3RvcHBlZCIsIm1hcmtDb21wb25lbnRQYXNzaXZlRWZmZWN0TW91bnRTdGFydGVkIiwibWFya0NvbXBvbmVudFBhc3NpdmVFZmZlY3RNb3VudFN0b3BwZWQiLCJtYXJrQ29tcG9uZW50UGFzc2l2ZUVmZmVjdFVubW91bnRTdGFydGVkIiwibWFya0NvbXBvbmVudFBhc3NpdmVFZmZlY3RVbm1vdW50U3RvcHBlZCIsIm1hcmtDb21wb25lbnRMYXlvdXRFZmZlY3RNb3VudFN0YXJ0ZWQiLCJtYXJrQ29tcG9uZW50TGF5b3V0RWZmZWN0TW91bnRTdG9wcGVkIiwibWFya0NvbXBvbmVudExheW91dEVmZmVjdFVubW91bnRTdGFydGVkIiwibWFya0NvbXBvbmVudExheW91dEVmZmVjdFVubW91bnRTdG9wcGVkIiwibWFya0NvbXBvbmVudEVycm9yZWQiLCJ0aHJvd25WYWx1ZSIsIm1hcmtDb21wb25lbnRTdXNwZW5kZWQiLCJ3YWtlYWJsZSIsIm1hcmtMYXlvdXRFZmZlY3RzU3RhcnRlZCIsIm1hcmtMYXlvdXRFZmZlY3RzU3RvcHBlZCIsIm1hcmtQYXNzaXZlRWZmZWN0c1N0YXJ0ZWQiLCJtYXJrUGFzc2l2ZUVmZmVjdHNTdG9wcGVkIiwibWFya1JlbmRlclN0YXJ0ZWQiLCJtYXJrUmVuZGVyWWllbGRlZCIsIm1hcmtSZW5kZXJTdG9wcGVkIiwibWFya1JlbmRlclNjaGVkdWxlZCIsIm1hcmtGb3JjZVVwZGF0ZVNjaGVkdWxlZCIsIm1hcmtTdGF0ZVVwZGF0ZVNjaGVkdWxlZCIsIk5vTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiUHJvZmlsZU1vZGUiLCJTdHJpY3RMZWdhY3lNb2RlIiwiU3RyaWN0RWZmZWN0c01vZGUiLCJjbHozMiIsIk1hdGgiLCJjbHozMkZhbGxiYWNrIiwiTE4yIiwiYXNVaW50IiwiTm9MYW5lcyIsIk5vTGFuZSIsIlN5bmNMYW5lIiwiSW5wdXRDb250aW51b3VzSHlkcmF0aW9uTGFuZSIsIklucHV0Q29udGludW91c0xhbmUiLCJEZWZhdWx0SHlkcmF0aW9uTGFuZSIsIkRlZmF1bHRMYW5lIiwiVHJhbnNpdGlvbkh5ZHJhdGlvbkxhbmUiLCJUcmFuc2l0aW9uTGFuZXMiLCJUcmFuc2l0aW9uTGFuZTEiLCJUcmFuc2l0aW9uTGFuZTIiLCJUcmFuc2l0aW9uTGFuZTMiLCJUcmFuc2l0aW9uTGFuZTQiLCJUcmFuc2l0aW9uTGFuZTUiLCJUcmFuc2l0aW9uTGFuZTYiLCJUcmFuc2l0aW9uTGFuZTciLCJUcmFuc2l0aW9uTGFuZTgiLCJUcmFuc2l0aW9uTGFuZTkiLCJUcmFuc2l0aW9uTGFuZTEwIiwiVHJhbnNpdGlvbkxhbmUxMSIsIlRyYW5zaXRpb25MYW5lMTIiLCJUcmFuc2l0aW9uTGFuZTEzIiwiVHJhbnNpdGlvbkxhbmUxNCIsIlRyYW5zaXRpb25MYW5lMTUiLCJUcmFuc2l0aW9uTGFuZTE2IiwiUmV0cnlMYW5lcyIsIlJldHJ5TGFuZTEiLCJSZXRyeUxhbmUyIiwiUmV0cnlMYW5lMyIsIlJldHJ5TGFuZTQiLCJSZXRyeUxhbmU1IiwiU29tZVJldHJ5TGFuZSIsIlNlbGVjdGl2ZUh5ZHJhdGlvbkxhbmUiLCJOb25JZGxlTGFuZXMiLCJJZGxlSHlkcmF0aW9uTGFuZSIsIklkbGVMYW5lIiwiT2Zmc2NyZWVuTGFuZSIsIk5vVGltZXN0YW1wIiwibmV4dFRyYW5zaXRpb25MYW5lIiwibmV4dFJldHJ5TGFuZSIsImdldEhpZ2hlc3RQcmlvcml0eUxhbmVzIiwiZ2V0SGlnaGVzdFByaW9yaXR5TGFuZSIsImdldE5leHRMYW5lcyIsIndpcExhbmVzIiwicGVuZGluZ0xhbmVzIiwibmV4dExhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsIm5vbklkbGVQZW5kaW5nTGFuZXMiLCJub25JZGxlVW5ibG9ja2VkTGFuZXMiLCJub25JZGxlUGluZ2VkTGFuZXMiLCJ1bmJsb2NrZWRMYW5lcyIsIm5leHRMYW5lIiwid2lwTGFuZSIsImVudGFuZ2xlZExhbmVzIiwiZW50YW5nbGVtZW50cyIsInBpY2tBcmJpdHJhcnlMYW5lSW5kZXgiLCJnZXRNb3N0UmVjZW50RXZlbnRUaW1lIiwiZXZlbnRUaW1lcyIsIm1vc3RSZWNlbnRFdmVudFRpbWUiLCJldmVudFRpbWUiLCJjb21wdXRlRXhwaXJhdGlvblRpbWUiLCJjdXJyZW50VGltZSIsIm1hcmtTdGFydmVkTGFuZXNBc0V4cGlyZWQiLCJleHBpcmF0aW9uVGltZXMiLCJleHBpcmF0aW9uVGltZSIsImV4cGlyZWRMYW5lcyIsImdldEhpZ2hlc3RQcmlvcml0eVBlbmRpbmdMYW5lcyIsImdldExhbmVzVG9SZXRyeVN5bmNocm9ub3VzbHlPbkVycm9yIiwiZXZlcnl0aGluZ0J1dE9mZnNjcmVlbiIsImluY2x1ZGVzU3luY0xhbmUiLCJpbmNsdWRlc05vbklkbGVXb3JrIiwiaW5jbHVkZXNPbmx5UmV0cmllcyIsImluY2x1ZGVzT25seU5vblVyZ2VudExhbmVzIiwiVXJnZW50TGFuZXMiLCJpbmNsdWRlc09ubHlUcmFuc2l0aW9ucyIsImluY2x1ZGVzQmxvY2tpbmdMYW5lIiwiU3luY0RlZmF1bHRMYW5lcyIsImluY2x1ZGVzRXhwaXJlZExhbmUiLCJpc1RyYW5zaXRpb25MYW5lIiwiY2xhaW1OZXh0VHJhbnNpdGlvbkxhbmUiLCJjbGFpbU5leHRSZXRyeUxhbmUiLCJwaWNrQXJiaXRyYXJ5TGFuZSIsImxhbmVUb0luZGV4IiwiaW5jbHVkZXNTb21lTGFuZSIsImlzU3Vic2V0T2ZMYW5lcyIsInN1YnNldCIsIm1lcmdlTGFuZXMiLCJyZW1vdmVMYW5lcyIsImludGVyc2VjdExhbmVzIiwibGFuZVRvTGFuZXMiLCJoaWdoZXJQcmlvcml0eUxhbmUiLCJjcmVhdGVMYW5lTWFwIiwiaW5pdGlhbCIsImxhbmVNYXAiLCJtYXJrUm9vdFVwZGF0ZWQiLCJ1cGRhdGVMYW5lIiwibWFya1Jvb3RTdXNwZW5kZWQiLCJtYXJrUm9vdFBpbmdlZCIsIm1hcmtSb290RmluaXNoZWQiLCJyZW1haW5pbmdMYW5lcyIsIm5vTG9uZ2VyUGVuZGluZ0xhbmVzIiwibXV0YWJsZVJlYWRMYW5lcyIsIm1hcmtSb290RW50YW5nbGVkIiwicm9vdEVudGFuZ2xlZExhbmVzIiwiZ2V0QnVtcGVkTGFuZUZvckh5ZHJhdGlvbiIsInJlbmRlckxhbmVzIiwicmVuZGVyTGFuZSIsImFkZEZpYmVyVG9MYW5lc01hcCIsInBlbmRpbmdVcGRhdGVyc0xhbmVNYXAiLCJ1cGRhdGVycyIsIm1vdmVQZW5kaW5nRmliZXJzVG9NZW1vaXplZCIsIm1lbW9pemVkVXBkYXRlcnMiLCJjbGVhciIsImdldFRyYW5zaXRpb25zRm9yTGFuZXMiLCJjdXJyZW50VXBkYXRlUHJpb3JpdHkiLCJnZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkiLCJzZXRDdXJyZW50VXBkYXRlUHJpb3JpdHkiLCJuZXdQcmlvcml0eSIsInJ1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwicHJldmlvdXNQcmlvcml0eSIsImhpZ2hlckV2ZW50UHJpb3JpdHkiLCJsb3dlckV2ZW50UHJpb3JpdHkiLCJpc0hpZ2hlckV2ZW50UHJpb3JpdHkiLCJsYW5lc1RvRXZlbnRQcmlvcml0eSIsImlzUm9vdERlaHlkcmF0ZWQiLCJjdXJyZW50U3RhdGUiLCJpc0RlaHlkcmF0ZWQiLCJfYXR0ZW1wdFN5bmNocm9ub3VzSHlkcmF0aW9uIiwic2V0QXR0ZW1wdFN5bmNocm9ub3VzSHlkcmF0aW9uIiwiYXR0ZW1wdFN5bmNocm9ub3VzSHlkcmF0aW9uIiwiYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24iLCJzZXRBdHRlbXB0Q29udGludW91c0h5ZHJhdGlvbiIsImF0dGVtcHRIeWRyYXRpb25BdEN1cnJlbnRQcmlvcml0eSIsInNldEF0dGVtcHRIeWRyYXRpb25BdEN1cnJlbnRQcmlvcml0eSIsImdldEN1cnJlbnRVcGRhdGVQcmlvcml0eSQxIiwic2V0R2V0Q3VycmVudFVwZGF0ZVByaW9yaXR5IiwiYXR0ZW1wdEh5ZHJhdGlvbkF0UHJpb3JpdHkiLCJzZXRBdHRlbXB0SHlkcmF0aW9uQXRQcmlvcml0eSIsImhhc1NjaGVkdWxlZFJlcGxheUF0dGVtcHQiLCJxdWV1ZWREaXNjcmV0ZUV2ZW50cyIsInF1ZXVlZEZvY3VzIiwicXVldWVkRHJhZyIsInF1ZXVlZE1vdXNlIiwicXVldWVkUG9pbnRlcnMiLCJxdWV1ZWRQb2ludGVyQ2FwdHVyZXMiLCJxdWV1ZWRFeHBsaWNpdEh5ZHJhdGlvblRhcmdldHMiLCJkaXNjcmV0ZVJlcGxheWFibGVFdmVudHMiLCJpc0Rpc2NyZXRlRXZlbnRUaGF0UmVxdWlyZXNIeWRyYXRpb24iLCJldmVudFR5cGUiLCJjcmVhdGVRdWV1ZWRSZXBsYXlhYmxlRXZlbnQiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwidGFyZ2V0Q29udGFpbmVyIiwidGFyZ2V0Q29udGFpbmVycyIsImNsZWFySWZDb250aW51b3VzRXZlbnQiLCJwb2ludGVySWQiLCJfcG9pbnRlcklkIiwiYWNjdW11bGF0ZU9yQ3JlYXRlQ29udGludW91c1F1ZXVlZFJlcGxheWFibGVFdmVudCIsImV4aXN0aW5nUXVldWVkRXZlbnQiLCJxdWV1ZWRFdmVudCIsIl9maWJlcjIiLCJxdWV1ZUlmQ29udGludW91c0V2ZW50IiwiZm9jdXNFdmVudCIsImRyYWdFdmVudCIsIm1vdXNlRXZlbnQiLCJwb2ludGVyRXZlbnQiLCJfcG9pbnRlckV2ZW50IiwiX3BvaW50ZXJJZDIiLCJhdHRlbXB0RXhwbGljaXRIeWRyYXRpb25UYXJnZXQiLCJxdWV1ZWRUYXJnZXQiLCJ0YXJnZXRJbnN0IiwiZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUiLCJxdWV1ZUV4cGxpY2l0SHlkcmF0aW9uVGFyZ2V0IiwidXBkYXRlUHJpb3JpdHkiLCJzcGxpY2UiLCJhdHRlbXB0UmVwbGF5Q29udGludW91c1F1ZXVlZEV2ZW50IiwibmV4dEJsb2NrZWRPbiIsImZpbmRJbnN0YW5jZUJsb2NraW5nRXZlbnQiLCJuYXRpdmVFdmVudENsb25lIiwiX2ZpYmVyMyIsInNoaWZ0IiwiYXR0ZW1wdFJlcGxheUNvbnRpbnVvdXNRdWV1ZWRFdmVudEluTWFwIiwicmVwbGF5VW5ibG9ja2VkRXZlbnRzIiwic2NoZWR1bGVDYWxsYmFja0lmVW5ibG9ja2VkIiwidW5ibG9ja2VkIiwicmV0cnlJZkJsb2NrZWRPbiIsInVuYmxvY2siLCJuZXh0RXhwbGljaXRUYXJnZXQiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsIl9lbmFibGVkIiwic2V0RW5hYmxlZCIsImVuYWJsZWQiLCJpc0VuYWJsZWQiLCJjcmVhdGVFdmVudExpc3RlbmVyV3JhcHBlcldpdGhQcmlvcml0eSIsImdldEV2ZW50UHJpb3JpdHkiLCJsaXN0ZW5lcldyYXBwZXIiLCJkaXNwYXRjaERpc2NyZXRlRXZlbnQiLCJkaXNwYXRjaENvbnRpbnVvdXNFdmVudCIsImJpbmQiLCJjb250YWluZXIiLCJwcmV2VHJhbnNpdGlvbiIsImRpc3BhdGNoRXZlbnRXaXRoRW5hYmxlQ2FwdHVyZVBoYXNlU2VsZWN0aXZlSHlkcmF0aW9uV2l0aG91dERpc2NyZXRlRXZlbnRSZXBsYXkiLCJkaXNwYXRjaEV2ZW50Rm9yUGx1Z2luRXZlbnRTeXN0ZW0iLCJyZXR1cm5fdGFyZ2V0SW5zdCIsInN0b3BQcm9wYWdhdGlvbiIsIm5hdGl2ZUV2ZW50VGFyZ2V0IiwiYWRkRXZlbnRCdWJibGVMaXN0ZW5lciIsImFkZEV2ZW50Q2FwdHVyZUxpc3RlbmVyIiwiYWRkRXZlbnRDYXB0dXJlTGlzdGVuZXJXaXRoUGFzc2l2ZUZsYWciLCJwYXNzaXZlIiwiYWRkRXZlbnRCdWJibGVMaXN0ZW5lcldpdGhQYXNzaXZlRmxhZyIsInN0YXJ0VGV4dCIsImZhbGxiYWNrVGV4dCIsImluaXRpYWxpemUiLCJnZXRUZXh0IiwiZ2V0RGF0YSIsInN0YXJ0VmFsdWUiLCJzdGFydExlbmd0aCIsImVuZFZhbHVlIiwiZW5kTGVuZ3RoIiwibWluRW5kIiwic2xpY2VUYWlsIiwiZ2V0RXZlbnRDaGFyQ29kZSIsImNoYXJDb2RlIiwia2V5Q29kZSIsImZ1bmN0aW9uVGhhdFJldHVybnNUcnVlIiwiZnVuY3Rpb25UaGF0UmV0dXJuc0ZhbHNlIiwiY3JlYXRlU3ludGhldGljRXZlbnQiLCJJbnRlcmZhY2UiLCJTeW50aGV0aWNCYXNlRXZlbnQiLCJyZWFjdE5hbWUiLCJyZWFjdEV2ZW50VHlwZSIsIl9yZWFjdE5hbWUiLCJfdGFyZ2V0SW5zdCIsImN1cnJlbnRUYXJnZXQiLCJfcHJvcE5hbWUiLCJub3JtYWxpemUiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50IiwiRXZlbnRJbnRlcmZhY2UiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwiaXNUcnVzdGVkIiwiU3ludGhldGljRXZlbnQiLCJVSUV2ZW50SW50ZXJmYWNlIiwidmlldyIsImRldGFpbCIsIlN5bnRoZXRpY1VJRXZlbnQiLCJsYXN0TW92ZW1lbnRYIiwibGFzdE1vdmVtZW50WSIsImxhc3RNb3VzZUV2ZW50IiwidXBkYXRlTW91c2VNb3ZlbWVudFBvbHlmaWxsU3RhdGUiLCJzY3JlZW5YIiwic2NyZWVuWSIsIk1vdXNlRXZlbnRJbnRlcmZhY2UiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImdldEV2ZW50TW9kaWZpZXJTdGF0ZSIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJTeW50aGV0aWNNb3VzZUV2ZW50IiwiRHJhZ0V2ZW50SW50ZXJmYWNlIiwiZGF0YVRyYW5zZmVyIiwiU3ludGhldGljRHJhZ0V2ZW50IiwiRm9jdXNFdmVudEludGVyZmFjZSIsIlN5bnRoZXRpY0ZvY3VzRXZlbnQiLCJBbmltYXRpb25FdmVudEludGVyZmFjZSIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJTeW50aGV0aWNBbmltYXRpb25FdmVudCIsIkNsaXBib2FyZEV2ZW50SW50ZXJmYWNlIiwiY2xpcGJvYXJkRGF0YSIsIlN5bnRoZXRpY0NsaXBib2FyZEV2ZW50IiwiQ29tcG9zaXRpb25FdmVudEludGVyZmFjZSIsIlN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQiLCJTeW50aGV0aWNJbnB1dEV2ZW50Iiwibm9ybWFsaXplS2V5IiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInRyYW5zbGF0ZVRvS2V5IiwiZ2V0RXZlbnRLZXkiLCJmcm9tQ2hhckNvZGUiLCJtb2RpZmllcktleVRvUHJvcCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJtb2RpZmllclN0YXRlR2V0dGVyIiwia2V5QXJnIiwic3ludGhldGljRXZlbnQiLCJrZXlQcm9wIiwiS2V5Ym9hcmRFdmVudEludGVyZmFjZSIsImNvZGUiLCJsb2NhdGlvbiIsInJlcGVhdCIsImxvY2FsZSIsIndoaWNoIiwiU3ludGhldGljS2V5Ym9hcmRFdmVudCIsIlBvaW50ZXJFdmVudEludGVyZmFjZSIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJTeW50aGV0aWNQb2ludGVyRXZlbnQiLCJUb3VjaEV2ZW50SW50ZXJmYWNlIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsIlN5bnRoZXRpY1RvdWNoRXZlbnQiLCJUcmFuc2l0aW9uRXZlbnRJbnRlcmZhY2UiLCJTeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQiLCJXaGVlbEV2ZW50SW50ZXJmYWNlIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJTeW50aGV0aWNXaGVlbEV2ZW50IiwiRU5EX0tFWUNPREVTIiwiU1RBUlRfS0VZQ09ERSIsImNhblVzZUNvbXBvc2l0aW9uRXZlbnQiLCJkb2N1bWVudE1vZGUiLCJjYW5Vc2VUZXh0SW5wdXRFdmVudCIsInVzZUZhbGxiYWNrQ29tcG9zaXRpb25EYXRhIiwiU1BBQ0VCQVJfQ09ERSIsIlNQQUNFQkFSX0NIQVIiLCJyZWdpc3RlckV2ZW50cyIsImhhc1NwYWNlS2V5cHJlc3MiLCJpc0tleXByZXNzQ29tbWFuZCIsImdldENvbXBvc2l0aW9uRXZlbnRUeXBlIiwiaXNGYWxsYmFja0NvbXBvc2l0aW9uU3RhcnQiLCJpc0ZhbGxiYWNrQ29tcG9zaXRpb25FbmQiLCJnZXREYXRhRnJvbUN1c3RvbUV2ZW50IiwiaXNVc2luZ0tvcmVhbklNRSIsImlzQ29tcG9zaW5nIiwiZXh0cmFjdENvbXBvc2l0aW9uRXZlbnQiLCJkaXNwYXRjaFF1ZXVlIiwiZmFsbGJhY2tEYXRhIiwibGlzdGVuZXJzIiwiYWNjdW11bGF0ZVR3b1BoYXNlTGlzdGVuZXJzIiwiY3VzdG9tRGF0YSIsImdldE5hdGl2ZUJlZm9yZUlucHV0Q2hhcnMiLCJjaGFycyIsImdldEZhbGxiYWNrQmVmb3JlSW5wdXRDaGFycyIsImV4dHJhY3RCZWZvcmVJbnB1dEV2ZW50IiwiZXh0cmFjdEV2ZW50cyIsInN1cHBvcnRlZElucHV0VHlwZXMiLCJkYXRlIiwiZW1haWwiLCJtb250aCIsIm51bWJlciIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0aW1lIiwid2VlayIsImlzVGV4dElucHV0RWxlbWVudCIsImlzRXZlbnRTdXBwb3J0ZWQiLCJldmVudE5hbWVTdWZmaXgiLCJldmVudE5hbWUiLCJpc1N1cHBvcnRlZCIsInJlZ2lzdGVyRXZlbnRzJDEiLCJjcmVhdGVBbmRBY2N1bXVsYXRlQ2hhbmdlRXZlbnQiLCJhY3RpdmVFbGVtZW50SW5zdCIsInNob3VsZFVzZUNoYW5nZUV2ZW50IiwibWFudWFsRGlzcGF0Y2hDaGFuZ2VFdmVudCIsInJ1bkV2ZW50SW5CYXRjaCIsInByb2Nlc3NEaXNwYXRjaFF1ZXVlIiwiZ2V0SW5zdElmVmFsdWVDaGFuZ2VkIiwidGFyZ2V0Tm9kZSIsImdldE5vZGVGcm9tSW5zdGFuY2UiLCJnZXRUYXJnZXRJbnN0Rm9yQ2hhbmdlRXZlbnQiLCJpc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJzdGFydFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UiLCJhdHRhY2hFdmVudCIsImhhbmRsZVByb3BlcnR5Q2hhbmdlIiwic3RvcFdhdGNoaW5nRm9yVmFsdWVDaGFuZ2UiLCJkZXRhY2hFdmVudCIsImhhbmRsZUV2ZW50c0ZvcklucHV0RXZlbnRQb2x5ZmlsbCIsImdldFRhcmdldEluc3RGb3JJbnB1dEV2ZW50UG9seWZpbGwiLCJzaG91bGRVc2VDbGlja0V2ZW50IiwiZ2V0VGFyZ2V0SW5zdEZvckNsaWNrRXZlbnQiLCJnZXRUYXJnZXRJbnN0Rm9ySW5wdXRPckNoYW5nZUV2ZW50IiwiaGFuZGxlQ29udHJvbGxlZElucHV0Qmx1ciIsInN0YXRlIiwiZXh0cmFjdEV2ZW50cyQxIiwiZ2V0VGFyZ2V0SW5zdEZ1bmMiLCJoYW5kbGVFdmVudEZ1bmMiLCJyZWdpc3RlckV2ZW50cyQyIiwiZXh0cmFjdEV2ZW50cyQyIiwiaXNPdmVyRXZlbnQiLCJpc091dEV2ZW50IiwicmVsYXRlZCIsImlzQ29udGFpbmVyTWFya2VkQXNSb290Iiwid2luIiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJfcmVsYXRlZCIsIlN5bnRoZXRpY0V2ZW50Q3RvciIsImxlYXZlRXZlbnRUeXBlIiwiZW50ZXJFdmVudFR5cGUiLCJldmVudFR5cGVQcmVmaXgiLCJmcm9tTm9kZSIsInRvTm9kZSIsImxlYXZlIiwiZW50ZXIiLCJuYXRpdmVUYXJnZXRJbnN0IiwiZW50ZXJFdmVudCIsImFjY3VtdWxhdGVFbnRlckxlYXZlVHdvUGhhc2VMaXN0ZW5lcnMiLCJvYmplY3RJcyIsInNoYWxsb3dFcXVhbCIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsImN1cnJlbnRLZXkiLCJnZXRMZWFmTm9kZSIsImdldFNpYmxpbmdOb2RlIiwibmV4dFNpYmxpbmciLCJnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0Iiwibm9kZVN0YXJ0Iiwibm9kZUVuZCIsImdldE9mZnNldHMiLCJvdXRlck5vZGUiLCJzZWxlY3Rpb24iLCJnZXRTZWxlY3Rpb24iLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiZ2V0TW9kZXJuT2Zmc2V0c0Zyb21Qb2ludHMiLCJpbmRleFdpdGhpbkFuY2hvciIsImluZGV4V2l0aGluRm9jdXMiLCJvdXRlciIsIm5leHQiLCJzZXRPZmZzZXRzIiwib2Zmc2V0cyIsImV4dGVuZCIsInRlbXAiLCJzdGFydE1hcmtlciIsImVuZE1hcmtlciIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImlzVGV4dE5vZGUiLCJjb250YWluc05vZGUiLCJpbm5lck5vZGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiaXNJbkRvY3VtZW50IiwiZG9jdW1lbnRFbGVtZW50IiwiaXNTYW1lT3JpZ2luRnJhbWUiLCJpZnJhbWUiLCJjb250ZW50V2luZG93IiwiZ2V0QWN0aXZlRWxlbWVudERlZXAiLCJIVE1MSUZyYW1lRWxlbWVudCIsImhhc1NlbGVjdGlvbkNhcGFiaWxpdGllcyIsImdldFNlbGVjdGlvbkluZm9ybWF0aW9uIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsInJlc3RvcmVTZWxlY3Rpb24iLCJwcmlvclNlbGVjdGlvbkluZm9ybWF0aW9uIiwiY3VyRm9jdXNlZEVsZW0iLCJwcmlvckZvY3VzZWRFbGVtIiwicHJpb3JTZWxlY3Rpb25SYW5nZSIsInNldFNlbGVjdGlvbiIsImFuY2VzdG9ycyIsImFuY2VzdG9yIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJmb2N1cyIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwic2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50IiwicmVnaXN0ZXJFdmVudHMkMyIsImFjdGl2ZUVsZW1lbnQkMSIsImFjdGl2ZUVsZW1lbnRJbnN0JDEiLCJsYXN0U2VsZWN0aW9uIiwibW91c2VEb3duIiwiZ2V0U2VsZWN0aW9uJDEiLCJnZXRFdmVudFRhcmdldERvY3VtZW50IiwiZXZlbnRUYXJnZXQiLCJjb25zdHJ1Y3RTZWxlY3RFdmVudCIsImN1cnJlbnRTZWxlY3Rpb24iLCJleHRyYWN0RXZlbnRzJDMiLCJtYWtlUHJlZml4TWFwIiwic3R5bGVQcm9wIiwidmVuZG9yUHJlZml4ZXMiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJwcmVmaXhlZEV2ZW50TmFtZXMiLCJnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSIsInByZWZpeE1hcCIsIkFOSU1BVElPTl9FTkQiLCJBTklNQVRJT05fSVRFUkFUSU9OIiwiQU5JTUFUSU9OX1NUQVJUIiwiVFJBTlNJVElPTl9FTkQiLCJ0b3BMZXZlbEV2ZW50c1RvUmVhY3ROYW1lcyIsInNpbXBsZUV2ZW50UGx1Z2luRXZlbnRzIiwicmVnaXN0ZXJTaW1wbGVFdmVudCIsInJlZ2lzdGVyU2ltcGxlRXZlbnRzIiwiY2FwaXRhbGl6ZWRFdmVudCIsImV4dHJhY3RFdmVudHMkNCIsImluQ2FwdHVyZVBoYXNlIiwiYWNjdW11bGF0ZVRhcmdldE9ubHkiLCJfbGlzdGVuZXJzIiwiYWNjdW11bGF0ZVNpbmdsZVBoYXNlTGlzdGVuZXJzIiwiX2V2ZW50IiwiZXh0cmFjdEV2ZW50cyQ1Iiwic2hvdWxkUHJvY2Vzc1BvbHlmaWxsUGx1Z2lucyIsIm1lZGlhRXZlbnRUeXBlcyIsIm5vbkRlbGVnYXRlZEV2ZW50cyIsImV4ZWN1dGVEaXNwYXRjaCIsInByb2Nlc3NEaXNwYXRjaFF1ZXVlSXRlbXNJbk9yZGVyIiwiZGlzcGF0Y2hMaXN0ZW5lcnMiLCJwcmV2aW91c0luc3RhbmNlIiwiX2Rpc3BhdGNoTGlzdGVuZXJzJGkiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMkX2kiLCJfaW5zdGFuY2UiLCJfY3VycmVudFRhcmdldCIsIl9saXN0ZW5lciIsIl9kaXNwYXRjaFF1ZXVlJGkiLCJkaXNwYXRjaEV2ZW50c0ZvclBsdWdpbnMiLCJsaXN0ZW5Ub05vbkRlbGVnYXRlZEV2ZW50IiwidGFyZ2V0RWxlbWVudCIsImlzQ2FwdHVyZVBoYXNlTGlzdGVuZXIiLCJsaXN0ZW5lclNldCIsImdldEV2ZW50TGlzdGVuZXJTZXQiLCJsaXN0ZW5lclNldEtleSIsImdldExpc3RlbmVyU2V0S2V5IiwiYWRkVHJhcHBlZEV2ZW50TGlzdGVuZXIiLCJsaXN0ZW5Ub05hdGl2ZUV2ZW50IiwibGlzdGVuaW5nTWFya2VyIiwicmFuZG9tIiwibGlzdGVuVG9BbGxTdXBwb3J0ZWRFdmVudHMiLCJyb290Q29udGFpbmVyRWxlbWVudCIsImlzRGVmZXJyZWRMaXN0ZW5lckZvckxlZ2FjeUZCU3VwcG9ydCIsImlzUGFzc2l2ZUxpc3RlbmVyIiwidW5zdWJzY3JpYmVMaXN0ZW5lciIsImlzTWF0Y2hpbmdSb290Q29udGFpbmVyIiwiZ3JhbmRDb250YWluZXIiLCJhbmNlc3Rvckluc3QiLCJ0YXJnZXRDb250YWluZXJOb2RlIiwibWFpbkxvb3AiLCJub2RlVGFnIiwiZ3JhbmROb2RlIiwiZ3JhbmRUYWciLCJwYXJlbnRUYWciLCJjcmVhdGVEaXNwYXRjaExpc3RlbmVyIiwidGFyZ2V0RmliZXIiLCJuYXRpdmVFdmVudFR5cGUiLCJjYXB0dXJlTmFtZSIsInJlYWN0RXZlbnROYW1lIiwibGFzdEhvc3RDb21wb25lbnQiLCJfaW5zdGFuY2UyIiwiX2luc3RhbmNlMyIsImNhcHR1cmVMaXN0ZW5lciIsImJ1YmJsZUxpc3RlbmVyIiwiZ2V0UGFyZW50IiwiZ2V0TG93ZXN0Q29tbW9uQW5jZXN0b3IiLCJpbnN0QSIsImluc3RCIiwibm9kZUEiLCJub2RlQiIsImRlcHRoQSIsInRlbXBBIiwiZGVwdGhCIiwidGVtcEIiLCJkZXB0aCIsImFjY3VtdWxhdGVFbnRlckxlYXZlTGlzdGVuZXJzRm9yRXZlbnQiLCJjb21tb24iLCJfaW5zdGFuY2U0IiwibGVhdmVFdmVudCIsImRpZFdhcm5JbnZhbGlkSHlkcmF0aW9uIiwiREFOR0VST1VTTFlfU0VUX0lOTkVSX0hUTUwiLCJTVVBQUkVTU19DT05URU5UX0VESVRBQkxFX1dBUk5JTkciLCJTVVBQUkVTU19IWURSQVRJT05fV0FSTklORyIsIkFVVE9GT0NVUyIsIkNISUxEUkVOIiwiU1RZTEUiLCJIVE1MJDEiLCJ3YXJuZWRVbmtub3duVGFncyIsInZhbGlkYXRlUHJvcGVydGllc0luRGV2ZWxvcG1lbnQiLCJ3YXJuRm9yUHJvcERpZmZlcmVuY2UiLCJ3YXJuRm9yRXh0cmFBdHRyaWJ1dGVzIiwid2FybkZvckludmFsaWRFdmVudExpc3RlbmVyIiwiY2FuRGlmZlN0eWxlRm9ySHlkcmF0aW9uV2FybmluZyIsIm5vcm1hbGl6ZUhUTUwiLCJkaWFsb2ciLCJ3ZWJ2aWV3Iiwic2VydmVyVmFsdWUiLCJjbGllbnRWYWx1ZSIsIm5vcm1hbGl6ZWRDbGllbnRWYWx1ZSIsIm5vcm1hbGl6ZU1hcmt1cEZvclRleHRPckF0dHJpYnV0ZSIsIm5vcm1hbGl6ZWRTZXJ2ZXJWYWx1ZSIsImF0dHJpYnV0ZU5hbWVzIiwibmFtZXMiLCJ0ZXN0RWxlbWVudCIsImNyZWF0ZUVsZW1lbnROUyIsIk5PUk1BTElaRV9ORVdMSU5FU19SRUdFWCIsIk5PUk1BTElaRV9OVUxMX0FORF9SRVBMQUNFTUVOVF9SRUdFWCIsIm1hcmt1cCIsIm1hcmt1cFN0cmluZyIsImNoZWNrRm9yVW5tYXRjaGVkVGV4dCIsInNlcnZlclRleHQiLCJjbGllbnRUZXh0IiwiaXNDb25jdXJyZW50TW9kZSIsInNob3VsZFdhcm5EZXYiLCJub3JtYWxpemVkQ2xpZW50VGV4dCIsIm5vcm1hbGl6ZWRTZXJ2ZXJUZXh0IiwiZ2V0T3duZXJEb2N1bWVudEZyb21Sb290Q29udGFpbmVyIiwibm9vcCIsInRyYXBDbGlja09uTm9uSW50ZXJhY3RpdmVFbGVtZW50Iiwib25jbGljayIsInNldEluaXRpYWxET01Qcm9wZXJ0aWVzIiwiZG9tRWxlbWVudCIsIm5leHRQcm9wcyIsInByb3BLZXkiLCJuZXh0UHJvcCIsImZyZWV6ZSIsIm5leHRIdG1sIiwiY2FuU2V0VGV4dENvbnRlbnQiLCJ1cGRhdGVET01Qcm9wZXJ0aWVzIiwidXBkYXRlUGF5bG9hZCIsIndhc0N1c3RvbUNvbXBvbmVudFRhZyIsImRpdiIsImNyZWF0ZVRleHROb2RlIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJyYXdQcm9wcyIsIm9uQ2xpY2siLCJkaWZmUHJvcGVydGllcyIsImxhc3RSYXdQcm9wcyIsIm5leHRSYXdQcm9wcyIsImxhc3RQcm9wcyIsImxhc3RTdHlsZSIsImxhc3RQcm9wIiwibGFzdEh0bWwiLCJ1cGRhdGVQcm9wZXJ0aWVzIiwiZ2V0UG9zc2libGVTdGFuZGFyZE5hbWUiLCJkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzIiwiZXh0cmFBdHRyaWJ1dGVOYW1lcyIsImF0dHJpYnV0ZXMiLCJzZXJ2ZXJIVE1MIiwiZXhwZWN0ZWRIVE1MIiwiZXhwZWN0ZWRTdHlsZSIsImlzTWlzbWF0Y2hEdWVUb0JhZENhc2luZyIsIm93bk5hbWVzcGFjZSIsImRvbnRXYXJuQ3VzdG9tRWxlbWVudCIsImRpZmZIeWRyYXRlZFRleHQiLCJ0ZXh0Tm9kZSIsImlzRGlmZmVyZW50Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQiLCJyZXN0b3JlQ29udHJvbGxlZFN0YXRlJDMiLCJ2YWxpZGF0ZURPTU5lc3RpbmciLCJ1cGRhdGVkQW5jZXN0b3JJbmZvIiwic3BlY2lhbFRhZ3MiLCJpblNjb3BlVGFncyIsImJ1dHRvblNjb3BlVGFncyIsImltcGxpZWRFbmRUYWdzIiwiZW1wdHlBbmNlc3RvckluZm8iLCJmb3JtVGFnIiwiYVRhZ0luU2NvcGUiLCJidXR0b25UYWdJblNjb3BlIiwibm9iclRhZ0luU2NvcGUiLCJwVGFnSW5CdXR0b25TY29wZSIsImxpc3RJdGVtVGFnQXV0b2Nsb3NpbmciLCJkbEl0ZW1UYWdBdXRvY2xvc2luZyIsIm9sZEluZm8iLCJhbmNlc3RvckluZm8iLCJpc1RhZ1ZhbGlkV2l0aFBhcmVudCIsImZpbmRJbnZhbGlkQW5jZXN0b3JGb3JUYWciLCJkaWRXYXJuJDEiLCJjaGlsZFRhZyIsImNoaWxkVGV4dCIsInBhcmVudEluZm8iLCJpbnZhbGlkUGFyZW50IiwiaW52YWxpZEFuY2VzdG9yIiwiaW52YWxpZFBhcmVudE9yQW5jZXN0b3IiLCJhbmNlc3RvclRhZyIsIndhcm5LZXkiLCJ0YWdEaXNwbGF5TmFtZSIsIndoaXRlc3BhY2VJbmZvIiwiU1VQUFJFU1NfSFlEUkFUSU9OX1dBUk5JTkckMSIsIlNVU1BFTlNFX1NUQVJUX0RBVEEiLCJTVVNQRU5TRV9FTkRfREFUQSIsIlNVU1BFTlNFX1BFTkRJTkdfU1RBUlRfREFUQSIsIlNVU1BFTlNFX0ZBTExCQUNLX1NUQVJUX0RBVEEiLCJTVFlMRSQxIiwiZXZlbnRzRW5hYmxlZCIsInNlbGVjdGlvbkluZm9ybWF0aW9uIiwiZ2V0Um9vdEhvc3RDb250ZXh0Iiwicm9vdENvbnRhaW5lckluc3RhbmNlIiwibmFtZXNwYWNlIiwidmFsaWRhdGVkVGFnIiwiZ2V0Q2hpbGRIb3N0Q29udGV4dCIsInBhcmVudEhvc3RDb250ZXh0IiwicGFyZW50SG9zdENvbnRleHREZXYiLCJnZXRQdWJsaWNJbnN0YW5jZSIsInByZXBhcmVGb3JDb21taXQiLCJhY3RpdmVJbnN0YW5jZSIsInJlc2V0QWZ0ZXJDb21taXQiLCJjcmVhdGVJbnN0YW5jZSIsImhvc3RDb250ZXh0IiwiaW50ZXJuYWxJbnN0YW5jZUhhbmRsZSIsImhvc3RDb250ZXh0RGV2Iiwib3duQW5jZXN0b3JJbmZvIiwicHJlY2FjaGVGaWJlck5vZGUiLCJ1cGRhdGVGaWJlclByb3BzIiwiYXBwZW5kSW5pdGlhbENoaWxkIiwicGFyZW50SW5zdGFuY2UiLCJmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbiIsImF1dG9Gb2N1cyIsInByZXBhcmVVcGRhdGUiLCJvbGRQcm9wcyIsIm5ld1Byb3BzIiwic2hvdWxkU2V0VGV4dENvbnRlbnQiLCJfX2h0bWwiLCJjcmVhdGVUZXh0SW5zdGFuY2UiLCJnZXRDdXJyZW50RXZlbnRQcmlvcml0eSIsImN1cnJlbnRFdmVudCIsInNjaGVkdWxlVGltZW91dCIsInNldFRpbWVvdXQiLCJjYW5jZWxUaW1lb3V0IiwiY2xlYXJUaW1lb3V0Iiwibm9UaW1lb3V0IiwibG9jYWxQcm9taXNlIiwiUHJvbWlzZSIsInNjaGVkdWxlTWljcm90YXNrIiwicXVldWVNaWNyb3Rhc2siLCJjYWxsYmFjayIsInJlc29sdmUiLCJ0aGVuIiwiaGFuZGxlRXJyb3JJbk5leHRUaWNrIiwiY29tbWl0TW91bnQiLCJjb21taXRVcGRhdGUiLCJyZXNldFRleHRDb250ZW50IiwiY29tbWl0VGV4dFVwZGF0ZSIsInRleHRJbnN0YW5jZSIsIm9sZFRleHQiLCJuZXdUZXh0IiwiYXBwZW5kQ2hpbGRUb0NvbnRhaW5lciIsImluc2VydEJlZm9yZSIsInJlYWN0Um9vdENvbnRhaW5lciIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJiZWZvcmVDaGlsZCIsImluc2VydEluQ29udGFpbmVyQmVmb3JlIiwicmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyIiwiY2xlYXJTdXNwZW5zZUJvdW5kYXJ5Iiwic3VzcGVuc2VJbnN0YW5jZSIsImNsZWFyU3VzcGVuc2VCb3VuZGFyeUZyb21Db250YWluZXIiLCJoaWRlSW5zdGFuY2UiLCJoaWRlVGV4dEluc3RhbmNlIiwidW5oaWRlSW5zdGFuY2UiLCJ1bmhpZGVUZXh0SW5zdGFuY2UiLCJjbGVhckNvbnRhaW5lciIsImNhbkh5ZHJhdGVJbnN0YW5jZSIsImNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UiLCJjYW5IeWRyYXRlU3VzcGVuc2VJbnN0YW5jZSIsImlzU3VzcGVuc2VJbnN0YW5jZVBlbmRpbmciLCJpc1N1c3BlbnNlSW5zdGFuY2VGYWxsYmFjayIsImdldFN1c3BlbnNlSW5zdGFuY2VGYWxsYmFja0Vycm9yRGV0YWlscyIsImRhdGFzZXQiLCJkaWdlc3QiLCJkZ3N0IiwibXNnIiwic3RjayIsInJlZ2lzdGVyU3VzcGVuc2VJbnN0YW5jZVJldHJ5IiwiX3JlYWN0UmV0cnkiLCJnZXROZXh0SHlkcmF0YWJsZSIsIm5vZGVEYXRhIiwiZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nIiwiZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQiLCJnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZFdpdGhpbkNvbnRhaW5lciIsInBhcmVudENvbnRhaW5lciIsImdldEZpcnN0SHlkcmF0YWJsZUNoaWxkV2l0aGluU3VzcGVuc2VJbnN0YW5jZSIsImh5ZHJhdGVJbnN0YW5jZSIsImh5ZHJhdGVUZXh0SW5zdGFuY2UiLCJoeWRyYXRlU3VzcGVuc2VJbnN0YW5jZSIsImdldE5leHRIeWRyYXRhYmxlSW5zdGFuY2VBZnRlclN1c3BlbnNlSW5zdGFuY2UiLCJnZXRQYXJlbnRTdXNwZW5zZUluc3RhbmNlIiwidGFyZ2V0SW5zdGFuY2UiLCJwcmV2aW91c1NpYmxpbmciLCJjb21taXRIeWRyYXRlZENvbnRhaW5lciIsImNvbW1pdEh5ZHJhdGVkU3VzcGVuc2VJbnN0YW5jZSIsInNob3VsZERlbGV0ZVVuaHlkcmF0ZWRUYWlsSW5zdGFuY2VzIiwicGFyZW50VHlwZSIsImRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UiLCJkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlIiwicGFyZW50UHJvcHMiLCJkaWROb3RIeWRyYXRlSW5zdGFuY2VXaXRoaW5Db250YWluZXIiLCJkaWROb3RIeWRyYXRlSW5zdGFuY2VXaXRoaW5TdXNwZW5zZUluc3RhbmNlIiwiZGlkTm90SHlkcmF0ZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZVdpdGhpbkNvbnRhaW5lciIsImRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlV2l0aGluQ29udGFpbmVyIiwiZGlkTm90RmluZEh5ZHJhdGFibGVJbnN0YW5jZVdpdGhpblN1c3BlbnNlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZVdpdGhpblN1c3BlbnNlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlIiwiZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2UiLCJlcnJvckh5ZHJhdGluZ0NvbnRhaW5lciIsInByZXBhcmVQb3J0YWxNb3VudCIsInBvcnRhbEluc3RhbmNlIiwicmFuZG9tS2V5IiwiaW50ZXJuYWxJbnN0YW5jZUtleSIsImludGVybmFsUHJvcHNLZXkiLCJpbnRlcm5hbENvbnRhaW5lckluc3RhbmNlS2V5IiwiaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5IiwiaW50ZXJuYWxFdmVudEhhbmRsZXJMaXN0ZW5lcnNLZXkiLCJpbnRlcm5hbEV2ZW50SGFuZGxlc1NldEtleSIsImRldGFjaERlbGV0ZWRJbnN0YW5jZSIsImhvc3RJbnN0IiwibWFya0NvbnRhaW5lckFzUm9vdCIsImhvc3RSb290IiwidW5tYXJrQ29udGFpbmVyQXNSb290IiwidGFyZ2V0U3VzcGVuc2VJbnN0IiwiZWxlbWVudExpc3RlbmVyU2V0IiwibG9nZ2VkVHlwZUZhaWx1cmVzIiwiUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSQxIiwic2V0Q3VycmVudGx5VmFsaWRhdGluZ0VsZW1lbnQiLCJfb3duZXIiLCJfc291cmNlIiwic2V0RXh0cmFTdGFja0ZyYW1lIiwiY2hlY2tQcm9wVHlwZXMiLCJ0eXBlU3BlY3MiLCJjb21wb25lbnROYW1lIiwidHlwZVNwZWNOYW1lIiwiZXJyb3IkMSIsImV4IiwidmFsdWVTdGFjayIsImZpYmVyU3RhY2siLCJjcmVhdGVDdXJzb3IiLCJwb3AiLCJ3YXJuZWRBYm91dE1pc3NpbmdHZXRDaGlsZENvbnRleHQiLCJlbXB0eUNvbnRleHRPYmplY3QiLCJjb250ZXh0U3RhY2tDdXJzb3IiLCJkaWRQZXJmb3JtV29ya1N0YWNrQ3Vyc29yIiwicHJldmlvdXNDb250ZXh0IiwiZ2V0VW5tYXNrZWRDb250ZXh0IiwiZGlkUHVzaE93bkNvbnRleHRJZlByb3ZpZGVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJjYWNoZUNvbnRleHQiLCJ1bm1hc2tlZENvbnRleHQiLCJtYXNrZWRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiZ2V0TWFza2VkQ29udGV4dCIsImNvbnRleHRUeXBlcyIsImhhc0NvbnRleHRDaGFuZ2VkIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJwb3BDb250ZXh0IiwicG9wVG9wTGV2ZWxDb250ZXh0T2JqZWN0IiwicHVzaFRvcExldmVsQ29udGV4dE9iamVjdCIsImRpZENoYW5nZSIsInByb2Nlc3NDaGlsZENvbnRleHQiLCJwYXJlbnRDb250ZXh0IiwiZ2V0Q2hpbGRDb250ZXh0IiwiY2hpbGRDb250ZXh0IiwiY29udGV4dEtleSIsInB1c2hDb250ZXh0UHJvdmlkZXIiLCJtZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlciIsIm1lcmdlZENvbnRleHQiLCJmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dCIsIkxlZ2FjeVJvb3QiLCJDb25jdXJyZW50Um9vdCIsInN5bmNRdWV1ZSIsImluY2x1ZGVzTGVnYWN5U3luY0NhbGxiYWNrcyIsImlzRmx1c2hpbmdTeW5jUXVldWUiLCJzY2hlZHVsZVN5bmNDYWxsYmFjayIsInNjaGVkdWxlTGVnYWN5U3luY0NhbGxiYWNrIiwiZmx1c2hTeW5jQ2FsbGJhY2tzT25seUluTGVnYWN5TW9kZSIsImZsdXNoU3luY0NhbGxiYWNrcyIsInByZXZpb3VzVXBkYXRlUHJpb3JpdHkiLCJpc1N5bmMiLCJxdWV1ZSIsImZvcmtTdGFjayIsImZvcmtTdGFja0luZGV4IiwidHJlZUZvcmtQcm92aWRlciIsInRyZWVGb3JrQ291bnQiLCJpZFN0YWNrIiwiaWRTdGFja0luZGV4IiwidHJlZUNvbnRleHRQcm92aWRlciIsInRyZWVDb250ZXh0SWQiLCJ0cmVlQ29udGV4dE92ZXJmbG93IiwiaXNGb3JrZWRDaGlsZCIsIndhcm5JZk5vdEh5ZHJhdGluZyIsImdldEZvcmtzQXRMZXZlbCIsImdldFRyZWVJZCIsImlkV2l0aExlYWRpbmdCaXQiLCJnZXRMZWFkaW5nQml0IiwicHVzaFRyZWVGb3JrIiwidG90YWxDaGlsZHJlbiIsInB1c2hUcmVlSWQiLCJiYXNlSWRXaXRoTGVhZGluZ0JpdCIsImJhc2VPdmVyZmxvdyIsImJhc2VMZW5ndGgiLCJnZXRCaXRMZW5ndGgiLCJiYXNlSWQiLCJzbG90IiwibnVtYmVyT2ZPdmVyZmxvd0JpdHMiLCJuZXdPdmVyZmxvd0JpdHMiLCJuZXdPdmVyZmxvdyIsInJlc3RPZkJhc2VJZCIsInJlc3RPZkJhc2VMZW5ndGgiLCJyZXN0T2ZMZW5ndGgiLCJyZXN0T2ZOZXdCaXRzIiwibmV3Qml0cyIsIl9pZCIsIl9vdmVyZmxvdyIsInB1c2hNYXRlcmlhbGl6ZWRUcmVlSWQiLCJyZXR1cm5GaWJlciIsIm51bWJlck9mRm9ya3MiLCJzbG90SW5kZXgiLCJwb3BUcmVlQ29udGV4dCIsImdldFN1c3BlbmRlZFRyZWVDb250ZXh0IiwicmVzdG9yZVN1c3BlbmRlZFRyZWVDb250ZXh0Iiwic3VzcGVuZGVkQ29udGV4dCIsImdldElzSHlkcmF0aW5nIiwiaHlkcmF0aW9uUGFyZW50RmliZXIiLCJuZXh0SHlkcmF0YWJsZUluc3RhbmNlIiwiZGlkU3VzcGVuZE9yRXJyb3JERVYiLCJoeWRyYXRpb25FcnJvcnMiLCJ3YXJuSWZIeWRyYXRpbmciLCJtYXJrRGlkVGhyb3dXaGlsZUh5ZHJhdGluZ0RFViIsImRpZFN1c3BlbmRPckVycm9yV2hpbGVIeWRyYXRpbmdERVYiLCJlbnRlckh5ZHJhdGlvblN0YXRlIiwicmVlbnRlckh5ZHJhdGlvblN0YXRlRnJvbURlaHlkcmF0ZWRTdXNwZW5zZUluc3RhbmNlIiwidHJlZUNvbnRleHQiLCJ3YXJuVW5oeWRyYXRlZEluc3RhbmNlIiwibWVtb2l6ZWRQcm9wcyIsImRlbGV0ZUh5ZHJhdGFibGVJbnN0YW5jZSIsImNoaWxkVG9EZWxldGUiLCJjcmVhdGVGaWJlckZyb21Ib3N0SW5zdGFuY2VGb3JEZWxldGlvbiIsImRlbGV0aW9ucyIsIndhcm5Ob25oeWRyYXRlZEluc3RhbmNlIiwicGVuZGluZ1Byb3BzIiwiX3RleHQiLCJfaXNDb25jdXJyZW50TW9kZSIsIl9wYXJlbnRJbnN0YW5jZSIsIl90eXBlMiIsIl9wcm9wczIiLCJfdGV4dDIiLCJpbnNlcnROb25IeWRyYXRlZEluc3RhbmNlIiwidHJ5SHlkcmF0ZSIsIm5leHRJbnN0YW5jZSIsInJldHJ5TGFuZSIsImRlaHlkcmF0ZWRGcmFnbWVudCIsImNyZWF0ZUZpYmVyRnJvbURlaHlkcmF0ZWRGcmFnbWVudCIsInNob3VsZENsaWVudFJlbmRlck9uTWlzbWF0Y2giLCJ0aHJvd09uSHlkcmF0aW9uTWlzbWF0Y2giLCJ0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSIsImZpcnN0QXR0ZW1wdGVkSW5zdGFuY2UiLCJwcmV2SHlkcmF0aW9uUGFyZW50RmliZXIiLCJwcmVwYXJlVG9IeWRyYXRlSG9zdEluc3RhbmNlIiwic2hvdWxkV2FybklmTWlzbWF0Y2hEZXYiLCJ1cGRhdGVRdWV1ZSIsInByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlIiwic2hvdWxkVXBkYXRlIiwiX2lzQ29uY3VycmVudE1vZGUyIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RTdXNwZW5zZUluc3RhbmNlIiwic2tpcFBhc3REZWh5ZHJhdGVkU3VzcGVuc2VJbnN0YW5jZSIsInBvcFRvTmV4dEhvc3RQYXJlbnQiLCJwb3BIeWRyYXRpb25TdGF0ZSIsIndhcm5JZlVuaHlkcmF0ZWRUYWlsTm9kZXMiLCJoYXNVbmh5ZHJhdGVkVGFpbE5vZGVzIiwicmVzZXRIeWRyYXRpb25TdGF0ZSIsInVwZ3JhZGVIeWRyYXRpb25FcnJvcnNUb1JlY292ZXJhYmxlIiwicXVldWVSZWNvdmVyYWJsZUVycm9ycyIsInF1ZXVlSHlkcmF0aW9uRXJyb3IiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyQxIiwiTm9UcmFuc2l0aW9uIiwicmVxdWVzdEN1cnJlbnRUcmFuc2l0aW9uIiwiUmVhY3RTdHJpY3RNb2RlV2FybmluZ3MiLCJyZWNvcmRVbnNhZmVMaWZlY3ljbGVXYXJuaW5ncyIsImZsdXNoUGVuZGluZ1Vuc2FmZUxpZmVjeWNsZVdhcm5pbmdzIiwicmVjb3JkTGVnYWN5Q29udGV4dFdhcm5pbmciLCJmbHVzaExlZ2FjeUNvbnRleHRXYXJuaW5nIiwiZGlzY2FyZFBlbmRpbmdXYXJuaW5ncyIsImZpbmRTdHJpY3RSb290IiwibWF5YmVTdHJpY3RSb290Iiwic2V0VG9Tb3J0ZWRTdHJpbmciLCJhcnJheSIsInNvcnQiLCJwZW5kaW5nQ29tcG9uZW50V2lsbE1vdW50V2FybmluZ3MiLCJwZW5kaW5nVU5TQUZFX0NvbXBvbmVudFdpbGxNb3VudFdhcm5pbmdzIiwicGVuZGluZ0NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHNXYXJuaW5ncyIsInBlbmRpbmdVTlNBRkVfQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1dhcm5pbmdzIiwicGVuZGluZ0NvbXBvbmVudFdpbGxVcGRhdGVXYXJuaW5ncyIsInBlbmRpbmdVTlNBRkVfQ29tcG9uZW50V2lsbFVwZGF0ZVdhcm5pbmdzIiwiZGlkV2FybkFib3V0VW5zYWZlTGlmZWN5Y2xlcyIsImNvbXBvbmVudFdpbGxNb3VudCIsIl9fc3VwcHJlc3NEZXByZWNhdGlvbldhcm5pbmciLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbE1vdW50VW5pcXVlTmFtZXMiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50VW5pcXVlTmFtZXMiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzVW5pcXVlTmFtZXMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc1VuaXF1ZU5hbWVzIiwiY29tcG9uZW50V2lsbFVwZGF0ZVVuaXF1ZU5hbWVzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGVVbmlxdWVOYW1lcyIsInNvcnRlZE5hbWVzIiwiX3NvcnRlZE5hbWVzIiwiX3NvcnRlZE5hbWVzMiIsIl9zb3J0ZWROYW1lczMiLCJfc29ydGVkTmFtZXM0IiwiX3NvcnRlZE5hbWVzNSIsInBlbmRpbmdMZWdhY3lDb250ZXh0V2FybmluZyIsImRpZFdhcm5BYm91dExlZ2FjeUNvbnRleHQiLCJzdHJpY3RSb290Iiwid2FybmluZ3NGb3JSb290IiwiZmliZXJBcnJheSIsImZpcnN0RmliZXIiLCJ1bmlxdWVOYW1lcyIsImRpZFdhcm5BYm91dE1hcHMiLCJkaWRXYXJuQWJvdXRHZW5lcmF0b3JzIiwiZGlkV2FybkFib3V0U3RyaW5nUmVmcyIsIm93bmVySGFzS2V5VXNlV2FybmluZyIsIm93bmVySGFzRnVuY3Rpb25UeXBlV2FybmluZyIsIndhcm5Gb3JNaXNzaW5nS2V5IiwiX3N0b3JlIiwidmFsaWRhdGVkIiwiaXNSZWFjdENsYXNzIiwiY29lcmNlUmVmIiwibWl4ZWRSZWYiLCJyZWYiLCJfc2VsZiIsInJlc29sdmVkSW5zdCIsInN0cmluZ1JlZiIsIl9zdHJpbmdSZWYiLCJyZWZzIiwidGhyb3dPbkludmFsaWRPYmplY3RUeXBlIiwibmV3Q2hpbGQiLCJjaGlsZFN0cmluZyIsIndhcm5PbkZ1bmN0aW9uVHlwZSIsInJlc29sdmVMYXp5IiwibGF6eVR5cGUiLCJDaGlsZFJlY29uY2lsZXIiLCJzaG91bGRUcmFja1NpZGVFZmZlY3RzIiwiZGVsZXRlQ2hpbGQiLCJkZWxldGVSZW1haW5pbmdDaGlsZHJlbiIsImN1cnJlbnRGaXJzdENoaWxkIiwibWFwUmVtYWluaW5nQ2hpbGRyZW4iLCJleGlzdGluZ0NoaWxkcmVuIiwiZXhpc3RpbmdDaGlsZCIsInVzZUZpYmVyIiwiY2xvbmUiLCJjcmVhdGVXb3JrSW5Qcm9ncmVzcyIsInBsYWNlQ2hpbGQiLCJuZXdGaWJlciIsImxhc3RQbGFjZWRJbmRleCIsIm5ld0luZGV4Iiwib2xkSW5kZXgiLCJwbGFjZVNpbmdsZUNoaWxkIiwidXBkYXRlVGV4dE5vZGUiLCJjcmVhdGVkIiwiY3JlYXRlRmliZXJGcm9tVGV4dCIsImV4aXN0aW5nIiwidXBkYXRlRWxlbWVudCIsImVsZW1lbnRUeXBlIiwidXBkYXRlRnJhZ21lbnQiLCJpc0NvbXBhdGlibGVGYW1pbHlGb3JIb3RSZWxvYWRpbmciLCJjcmVhdGVGaWJlckZyb21FbGVtZW50IiwidXBkYXRlUG9ydGFsIiwicG9ydGFsIiwiaW1wbGVtZW50YXRpb24iLCJjcmVhdGVGaWJlckZyb21Qb3J0YWwiLCJmcmFnbWVudCIsImNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50IiwiY3JlYXRlQ2hpbGQiLCJfY3JlYXRlZCIsIl9jcmVhdGVkMiIsIl9jcmVhdGVkMyIsInVwZGF0ZVNsb3QiLCJvbGRGaWJlciIsInVwZGF0ZUZyb21NYXAiLCJuZXdJZHgiLCJtYXRjaGVkRmliZXIiLCJfbWF0Y2hlZEZpYmVyIiwiX21hdGNoZWRGaWJlcjIiLCJfbWF0Y2hlZEZpYmVyMyIsIndhcm5PbkludmFsaWRLZXkiLCJrbm93bktleXMiLCJyZWNvbmNpbGVDaGlsZHJlbkFycmF5IiwibmV3Q2hpbGRyZW4iLCJyZXN1bHRpbmdGaXJzdENoaWxkIiwicHJldmlvdXNOZXdGaWJlciIsIm5leHRPbGRGaWJlciIsIl9uZXdGaWJlciIsIl9udW1iZXJPZkZvcmtzIiwiX25ld0ZpYmVyMiIsIl9udW1iZXJPZkZvcmtzMiIsInJlY29uY2lsZUNoaWxkcmVuSXRlcmF0b3IiLCJuZXdDaGlsZHJlbkl0ZXJhYmxlIiwiaXRlcmF0b3JGbiIsImVudHJpZXMiLCJfbmV3Q2hpbGRyZW4iLCJfc3RlcCIsImRvbmUiLCJfbmV3RmliZXIzIiwiX251bWJlck9mRm9ya3MzIiwiX25ld0ZpYmVyNCIsIl9udW1iZXJPZkZvcmtzNCIsInJlY29uY2lsZVNpbmdsZVRleHROb2RlIiwicmVjb25jaWxlU2luZ2xlRWxlbWVudCIsIl9leGlzdGluZyIsIl9jcmVhdGVkNCIsInJlY29uY2lsZVNpbmdsZVBvcnRhbCIsInJlY29uY2lsZUNoaWxkRmliZXJzIiwiaXNVbmtleWVkVG9wTGV2ZWxGcmFnbWVudCIsIm1vdW50Q2hpbGRGaWJlcnMiLCJjbG9uZUNoaWxkRmliZXJzIiwiY3VycmVudENoaWxkIiwicmVzZXRDaGlsZEZpYmVycyIsInJlc2V0V29ya0luUHJvZ3Jlc3MiLCJ2YWx1ZUN1cnNvciIsInJlbmRlcmVyU2lnaWwiLCJjdXJyZW50bHlSZW5kZXJpbmdGaWJlciIsImxhc3RDb250ZXh0RGVwZW5kZW5jeSIsImxhc3RGdWxseU9ic2VydmVkQ29udGV4dCIsImlzRGlzYWxsb3dlZENvbnRleHRSZWFkSW5ERVYiLCJyZXNldENvbnRleHREZXBlbmRlbmNpZXMiLCJlbnRlckRpc2FsbG93ZWRDb250ZXh0UmVhZEluREVWIiwiZXhpdERpc2FsbG93ZWRDb250ZXh0UmVhZEluREVWIiwicHVzaFByb3ZpZGVyIiwicHJvdmlkZXJGaWJlciIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFJlbmRlcmVyIiwicG9wUHJvdmlkZXIiLCJzY2hlZHVsZUNvbnRleHRXb3JrT25QYXJlbnRQYXRoIiwicHJvcGFnYXRpb25Sb290IiwiY2hpbGRMYW5lcyIsInByb3BhZ2F0ZUNvbnRleHRDaGFuZ2UiLCJwcm9wYWdhdGVDb250ZXh0Q2hhbmdlX2VhZ2VyIiwibmV4dEZpYmVyIiwiZGVwZW5kZW5jeSIsImZpcnN0Q29udGV4dCIsInVwZGF0ZSIsImNyZWF0ZVVwZGF0ZSIsIkZvcmNlVXBkYXRlIiwic2hhcmVkUXVldWUiLCJzaGFyZWQiLCJwZW5kaW5nIiwicGFyZW50U3VzcGVuc2UiLCJfYWx0ZXJuYXRlIiwicHJlcGFyZVRvUmVhZENvbnRleHQiLCJtYXJrV29ya0luUHJvZ3Jlc3NSZWNlaXZlZFVwZGF0ZSIsInJlYWRDb250ZXh0IiwiY29udGV4dEl0ZW0iLCJtZW1vaXplZFZhbHVlIiwiY29uY3VycmVudFF1ZXVlcyIsInB1c2hDb25jdXJyZW50VXBkYXRlUXVldWUiLCJmaW5pc2hRdWV1ZWluZ0NvbmN1cnJlbnRVcGRhdGVzIiwibGFzdEludGVybGVhdmVkVXBkYXRlIiwiaW50ZXJsZWF2ZWQiLCJmaXJzdEludGVybGVhdmVkVXBkYXRlIiwibGFzdFBlbmRpbmdVcGRhdGUiLCJmaXJzdFBlbmRpbmdVcGRhdGUiLCJlbnF1ZXVlQ29uY3VycmVudEhvb2tVcGRhdGUiLCJtYXJrVXBkYXRlTGFuZUZyb21GaWJlclRvUm9vdCIsImVucXVldWVDb25jdXJyZW50SG9va1VwZGF0ZUFuZEVhZ2VybHlCYWlsb3V0IiwiZW5xdWV1ZUNvbmN1cnJlbnRDbGFzc1VwZGF0ZSIsImVucXVldWVDb25jdXJyZW50UmVuZGVyRm9yTGFuZSIsInVuc2FmZV9tYXJrVXBkYXRlTGFuZUZyb21GaWJlclRvUm9vdCIsInNvdXJjZUZpYmVyIiwid2FybkFib3V0VXBkYXRlT25Ob3RZZXRNb3VudGVkRmliZXJJbkRFViIsIlVwZGF0ZVN0YXRlIiwiUmVwbGFjZVN0YXRlIiwiQ2FwdHVyZVVwZGF0ZSIsImhhc0ZvcmNlVXBkYXRlIiwiZGlkV2FyblVwZGF0ZUluc2lkZVVwZGF0ZSIsImN1cnJlbnRseVByb2Nlc3NpbmdRdWV1ZSIsImluaXRpYWxpemVVcGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImZpcnN0QmFzZVVwZGF0ZSIsImxhc3RCYXNlVXBkYXRlIiwiZWZmZWN0cyIsImNsb25lVXBkYXRlUXVldWUiLCJjdXJyZW50UXVldWUiLCJlbnF1ZXVlVXBkYXRlIiwiaXNVbnNhZmVDbGFzc1JlbmRlclBoYXNlVXBkYXRlIiwiZW50YW5nbGVUcmFuc2l0aW9ucyIsInF1ZXVlTGFuZXMiLCJuZXdRdWV1ZUxhbmVzIiwiZW5xdWV1ZUNhcHR1cmVkVXBkYXRlIiwiY2FwdHVyZWRVcGRhdGUiLCJuZXdGaXJzdCIsIm5ld0xhc3QiLCJnZXRTdGF0ZUZyb21VcGRhdGUiLCJwcmV2U3RhdGUiLCJuZXh0U3RhdGUiLCJwYXJ0aWFsU3RhdGUiLCJwcm9jZXNzVXBkYXRlUXVldWUiLCJwZW5kaW5nUXVldWUiLCJjdXJyZW50TGFzdEJhc2VVcGRhdGUiLCJuZXdTdGF0ZSIsIm5ld0xhbmVzIiwibmV3QmFzZVN0YXRlIiwibmV3Rmlyc3RCYXNlVXBkYXRlIiwibmV3TGFzdEJhc2VVcGRhdGUiLCJ1cGRhdGVFdmVudFRpbWUiLCJfY2xvbmUiLCJfbGFzdFBlbmRpbmdVcGRhdGUiLCJfZmlyc3RQZW5kaW5nVXBkYXRlIiwibGFzdEludGVybGVhdmVkIiwibWFya1NraXBwZWRVcGRhdGVMYW5lcyIsInJlc2V0SGFzRm9yY2VVcGRhdGVCZWZvcmVQcm9jZXNzaW5nIiwiY2hlY2tIYXNGb3JjZVVwZGF0ZUFmdGVyUHJvY2Vzc2luZyIsImNvbW1pdFVwZGF0ZVF1ZXVlIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRRdWV1ZSIsImVmZmVjdCIsIk5PX0NPTlRFWFQiLCJjb250ZXh0U3RhY2tDdXJzb3IkMSIsImNvbnRleHRGaWJlclN0YWNrQ3Vyc29yIiwicm9vdEluc3RhbmNlU3RhY2tDdXJzb3IiLCJyZXF1aXJlZENvbnRleHQiLCJnZXRSb290SG9zdENvbnRhaW5lciIsInJvb3RJbnN0YW5jZSIsInB1c2hIb3N0Q29udGFpbmVyIiwibmV4dFJvb3RJbnN0YW5jZSIsIm5leHRSb290Q29udGV4dCIsInBvcEhvc3RDb250YWluZXIiLCJnZXRIb3N0Q29udGV4dCIsInB1c2hIb3N0Q29udGV4dCIsIm5leHRDb250ZXh0IiwicG9wSG9zdENvbnRleHQiLCJEZWZhdWx0U3VzcGVuc2VDb250ZXh0IiwiU3VidHJlZVN1c3BlbnNlQ29udGV4dE1hc2siLCJJbnZpc2libGVQYXJlbnRTdXNwZW5zZUNvbnRleHQiLCJGb3JjZVN1c3BlbnNlRmFsbGJhY2siLCJzdXNwZW5zZVN0YWNrQ3Vyc29yIiwiaGFzU3VzcGVuc2VDb250ZXh0IiwiZmxhZyIsInNldERlZmF1bHRTaGFsbG93U3VzcGVuc2VDb250ZXh0Iiwic2V0U2hhbGxvd1N1c3BlbnNlQ29udGV4dCIsInNoYWxsb3dDb250ZXh0IiwiYWRkU3VidHJlZVN1c3BlbnNlQ29udGV4dCIsInN1YnRyZWVDb250ZXh0IiwicHVzaFN1c3BlbnNlQ29udGV4dCIsIm5ld0NvbnRleHQiLCJwb3BTdXNwZW5zZUNvbnRleHQiLCJzaG91bGRDYXB0dXJlU3VzcGVuc2UiLCJoYXNJbnZpc2libGVQYXJlbnQiLCJmaW5kRmlyc3RTdXNwZW5kZWQiLCJyb3ciLCJyZXZlYWxPcmRlciIsImRpZFN1c3BlbmQiLCJOb0ZsYWdzJDEiLCJIYXNFZmZlY3QiLCJJbnNlcnRpb24iLCJMYXlvdXQiLCJQYXNzaXZlJDEiLCJ3b3JrSW5Qcm9ncmVzc1NvdXJjZXMiLCJyZXNldFdvcmtJblByb2dyZXNzVmVyc2lvbnMiLCJtdXRhYmxlU291cmNlIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJyZWdpc3Rlck11dGFibGVTb3VyY2VGb3JIeWRyYXRpb24iLCJnZXRWZXJzaW9uIiwiX2dldFZlcnNpb24iLCJtdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciQxIiwiUmVhY3RDdXJyZW50QmF0Y2hDb25maWckMiIsImRpZFdhcm5BYm91dE1pc21hdGNoZWRIb29rc0ZvckNvbXBvbmVudCIsImRpZFdhcm5VbmNhY2hlZEdldFNuYXBzaG90IiwiY3VycmVudGx5UmVuZGVyaW5nRmliZXIkMSIsImN1cnJlbnRIb29rIiwid29ya0luUHJvZ3Jlc3NIb29rIiwiZGlkU2NoZWR1bGVSZW5kZXJQaGFzZVVwZGF0ZSIsImRpZFNjaGVkdWxlUmVuZGVyUGhhc2VVcGRhdGVEdXJpbmdUaGlzUGFzcyIsImxvY2FsSWRDb3VudGVyIiwiZ2xvYmFsQ2xpZW50SWRDb3VudGVyIiwiUkVfUkVOREVSX0xJTUlUIiwiY3VycmVudEhvb2tOYW1lSW5EZXYiLCJob29rVHlwZXNEZXYiLCJob29rVHlwZXNVcGRhdGVJbmRleERldiIsImlnbm9yZVByZXZpb3VzRGVwZW5kZW5jaWVzIiwibW91bnRIb29rVHlwZXNEZXYiLCJob29rTmFtZSIsInVwZGF0ZUhvb2tUeXBlc0RldiIsIndhcm5Pbkhvb2tNaXNtYXRjaEluRGV2IiwiY2hlY2tEZXBzQXJlQXJyYXlEZXYiLCJkZXBzIiwiY3VycmVudEhvb2tOYW1lIiwidGFibGUiLCJzZWNvbmRDb2x1bW5TdGFydCIsIm9sZEhvb2tOYW1lIiwibmV3SG9va05hbWUiLCJ0aHJvd0ludmFsaWRIb29rRXJyb3IiLCJhcmVIb29rSW5wdXRzRXF1YWwiLCJuZXh0RGVwcyIsInByZXZEZXBzIiwicmVuZGVyV2l0aEhvb2tzIiwic2Vjb25kQXJnIiwibmV4dFJlbmRlckxhbmVzIiwiX2RlYnVnSG9va1R5cGVzIiwiSG9va3NEaXNwYXRjaGVyT25VcGRhdGVJbkRFViIsIkhvb2tzRGlzcGF0Y2hlck9uTW91bnRXaXRoSG9va1R5cGVzSW5ERVYiLCJIb29rc0Rpc3BhdGNoZXJPbk1vdW50SW5ERVYiLCJudW1iZXJPZlJlUmVuZGVycyIsIkhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXJJbkRFViIsIkNvbnRleHRPbmx5RGlzcGF0Y2hlciIsImRpZFJlbmRlclRvb0Zld0hvb2tzIiwiY2hlY2tEaWRSZW5kZXJJZEhvb2siLCJkaWRSZW5kZXJJZEhvb2siLCJiYWlsb3V0SG9va3MiLCJyZXNldEhvb2tzQWZ0ZXJUaHJvdyIsImlzVXBkYXRpbmdPcGFxdWVWYWx1ZUluUmVuZGVyUGhhc2UiLCJtb3VudFdvcmtJblByb2dyZXNzSG9vayIsImJhc2VRdWV1ZSIsInVwZGF0ZVdvcmtJblByb2dyZXNzSG9vayIsIm5leHRDdXJyZW50SG9vayIsIm5leHRXb3JrSW5Qcm9ncmVzc0hvb2siLCJuZXdIb29rIiwiY3JlYXRlRnVuY3Rpb25Db21wb25lbnRVcGRhdGVRdWV1ZSIsImxhc3RFZmZlY3QiLCJzdG9yZXMiLCJiYXNpY1N0YXRlUmVkdWNlciIsIm1vdW50UmVkdWNlciIsInJlZHVjZXIiLCJpbml0aWFsQXJnIiwiaW5pdGlhbFN0YXRlIiwiZGlzcGF0Y2giLCJsYXN0UmVuZGVyZWRSZWR1Y2VyIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaFJlZHVjZXJBY3Rpb24iLCJ1cGRhdGVSZWR1Y2VyIiwiYmFzZUZpcnN0IiwicGVuZGluZ0ZpcnN0IiwiZmlyc3QiLCJuZXdCYXNlUXVldWVGaXJzdCIsIm5ld0Jhc2VRdWV1ZUxhc3QiLCJoYXNFYWdlclN0YXRlIiwiZWFnZXJTdGF0ZSIsImludGVybGVhdmVkTGFuZSIsInJlcmVuZGVyUmVkdWNlciIsImxhc3RSZW5kZXJQaGFzZVVwZGF0ZSIsImZpcnN0UmVuZGVyUGhhc2VVcGRhdGUiLCJtb3VudE11dGFibGVTb3VyY2UiLCJnZXRTbmFwc2hvdCIsInN1YnNjcmliZSIsInVwZGF0ZU11dGFibGVTb3VyY2UiLCJtb3VudFN5bmNFeHRlcm5hbFN0b3JlIiwiZ2V0U2VydmVyU25hcHNob3QiLCJuZXh0U25hcHNob3QiLCJjYWNoZWRTbmFwc2hvdCIsImdldFdvcmtJblByb2dyZXNzUm9vdCIsInB1c2hTdG9yZUNvbnNpc3RlbmN5Q2hlY2siLCJtb3VudEVmZmVjdCIsInN1YnNjcmliZVRvU3RvcmUiLCJwdXNoRWZmZWN0IiwidXBkYXRlU3RvcmVJbnN0YW5jZSIsInVwZGF0ZVN5bmNFeHRlcm5hbFN0b3JlIiwicHJldlNuYXBzaG90Iiwic25hcHNob3RDaGFuZ2VkIiwidXBkYXRlRWZmZWN0IiwicmVuZGVyZWRTbmFwc2hvdCIsImNoZWNrIiwiY29tcG9uZW50VXBkYXRlUXVldWUiLCJjaGVja0lmU25hcHNob3RDaGFuZ2VkIiwiZm9yY2VTdG9yZVJlcmVuZGVyIiwiaGFuZGxlU3RvcmVDaGFuZ2UiLCJsYXRlc3RHZXRTbmFwc2hvdCIsInByZXZWYWx1ZSIsInNjaGVkdWxlVXBkYXRlT25GaWJlciIsIm1vdW50U3RhdGUiLCJkaXNwYXRjaFNldFN0YXRlIiwidXBkYXRlU3RhdGUiLCJyZXJlbmRlclN0YXRlIiwiY3JlYXRlIiwiZGVzdHJveSIsImZpcnN0RWZmZWN0IiwibW91bnRSZWYiLCJfcmVmMiIsInVwZGF0ZVJlZiIsIm1vdW50RWZmZWN0SW1wbCIsImZpYmVyRmxhZ3MiLCJob29rRmxhZ3MiLCJ1cGRhdGVFZmZlY3RJbXBsIiwicHJldkVmZmVjdCIsIm1vdW50SW5zZXJ0aW9uRWZmZWN0IiwidXBkYXRlSW5zZXJ0aW9uRWZmZWN0IiwibW91bnRMYXlvdXRFZmZlY3QiLCJ1cGRhdGVMYXlvdXRFZmZlY3QiLCJpbXBlcmF0aXZlSGFuZGxlRWZmZWN0IiwicmVmQ2FsbGJhY2siLCJfaW5zdCIsInJlZk9iamVjdCIsIl9pbnN0MiIsIm1vdW50SW1wZXJhdGl2ZUhhbmRsZSIsImVmZmVjdERlcHMiLCJ1cGRhdGVJbXBlcmF0aXZlSGFuZGxlIiwibW91bnREZWJ1Z1ZhbHVlIiwiZm9ybWF0dGVyRm4iLCJ1cGRhdGVEZWJ1Z1ZhbHVlIiwibW91bnRDYWxsYmFjayIsInVwZGF0ZUNhbGxiYWNrIiwibW91bnRNZW1vIiwibmV4dENyZWF0ZSIsInVwZGF0ZU1lbW8iLCJtb3VudERlZmVycmVkVmFsdWUiLCJ1cGRhdGVEZWZlcnJlZFZhbHVlIiwicmVzb2x2ZWRDdXJyZW50SG9vayIsInVwZGF0ZURlZmVycmVkVmFsdWVJbXBsIiwicmVyZW5kZXJEZWZlcnJlZFZhbHVlIiwic2hvdWxkRGVmZXJWYWx1ZSIsImRlZmVycmVkTGFuZSIsInN0YXJ0VHJhbnNpdGlvbiIsInNldFBlbmRpbmciLCJjdXJyZW50VHJhbnNpdGlvbiIsIl91cGRhdGVkRmliZXJzIiwidXBkYXRlZEZpYmVyc0NvdW50IiwibW91bnRUcmFuc2l0aW9uIiwiX21vdW50U3RhdGUiLCJpc1BlbmRpbmciLCJ1cGRhdGVUcmFuc2l0aW9uIiwiX3VwZGF0ZVN0YXRlIiwicmVyZW5kZXJUcmFuc2l0aW9uIiwiX3JlcmVuZGVyU3RhdGUiLCJnZXRJc1VwZGF0aW5nT3BhcXVlVmFsdWVJblJlbmRlclBoYXNlSW5ERVYiLCJtb3VudElkIiwiaWRlbnRpZmllclByZWZpeCIsInRyZWVJZCIsImxvY2FsSWQiLCJnbG9iYWxDbGllbnRJZCIsInVwZGF0ZUlkIiwicmVxdWVzdFVwZGF0ZUxhbmUiLCJpc1JlbmRlclBoYXNlVXBkYXRlIiwiZW5xdWV1ZVJlbmRlclBoYXNlVXBkYXRlIiwicmVxdWVzdEV2ZW50VGltZSIsImVudGFuZ2xlVHJhbnNpdGlvblVwZGF0ZSIsIm1hcmtVcGRhdGVJbkRldlRvb2xzIiwicHJldkRpc3BhdGNoZXIiLCJJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25VcGRhdGVJbkRFViIsInVzZUNhbGxiYWNrIiwidXNlQ29udGV4dCIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VJbnNlcnRpb25FZmZlY3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidXNlRGVidWdWYWx1ZSIsInVzZURlZmVycmVkVmFsdWUiLCJ1c2VUcmFuc2l0aW9uIiwidXNlTXV0YWJsZVNvdXJjZSIsInVzZVN5bmNFeHRlcm5hbFN0b3JlIiwidXNlSWQiLCJ1bnN0YWJsZV9pc05ld1JlY29uY2lsZXIiLCJJbnZhbGlkTmVzdGVkSG9va3NEaXNwYXRjaGVyT25Nb3VudEluREVWIiwiSW52YWxpZE5lc3RlZEhvb2tzRGlzcGF0Y2hlck9uUmVyZW5kZXJJbkRFViIsIndhcm5JbnZhbGlkQ29udGV4dEFjY2VzcyIsIndhcm5JbnZhbGlkSG9va0FjY2VzcyIsIm5vdyQxIiwiY29tbWl0VGltZSIsImxheW91dEVmZmVjdFN0YXJ0VGltZSIsInByb2ZpbGVyU3RhcnRUaW1lIiwicGFzc2l2ZUVmZmVjdFN0YXJ0VGltZSIsImN1cnJlbnRVcGRhdGVJc05lc3RlZCIsIm5lc3RlZFVwZGF0ZVNjaGVkdWxlZCIsImlzQ3VycmVudFVwZGF0ZU5lc3RlZCIsIm1hcmtOZXN0ZWRVcGRhdGVTY2hlZHVsZWQiLCJyZXNldE5lc3RlZFVwZGF0ZUZsYWciLCJzeW5jTmVzdGVkVXBkYXRlRmxhZyIsImdldENvbW1pdFRpbWUiLCJyZWNvcmRDb21taXRUaW1lIiwic3RhcnRQcm9maWxlclRpbWVyIiwiYWN0dWFsU3RhcnRUaW1lIiwic3RvcFByb2ZpbGVyVGltZXJJZlJ1bm5pbmciLCJzdG9wUHJvZmlsZXJUaW1lcklmUnVubmluZ0FuZFJlY29yZERlbHRhIiwib3ZlcnJpZGVCYXNlVGltZSIsImFjdHVhbER1cmF0aW9uIiwic2VsZkJhc2VEdXJhdGlvbiIsInJlY29yZExheW91dEVmZmVjdER1cmF0aW9uIiwicGFyZW50RmliZXIiLCJlZmZlY3REdXJhdGlvbiIsInBhcmVudFN0YXRlTm9kZSIsInJlY29yZFBhc3NpdmVFZmZlY3REdXJhdGlvbiIsInBhc3NpdmVFZmZlY3REdXJhdGlvbiIsInN0YXJ0TGF5b3V0RWZmZWN0VGltZXIiLCJzdGFydFBhc3NpdmVFZmZlY3RUaW1lciIsInRyYW5zZmVyQWN0dWFsRHVyYXRpb24iLCJyZXNvbHZlRGVmYXVsdFByb3BzIiwiYmFzZVByb3BzIiwiZGVmYXVsdFByb3BzIiwiZmFrZUludGVybmFsSW5zdGFuY2UiLCJkaWRXYXJuQWJvdXRTdGF0ZUFzc2lnbm1lbnRGb3JDb21wb25lbnQiLCJkaWRXYXJuQWJvdXRVbmluaXRpYWxpemVkU3RhdGUiLCJkaWRXYXJuQWJvdXRHZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZVdpdGhvdXREaWRVcGRhdGUiLCJkaWRXYXJuQWJvdXRMZWdhY3lMaWZlY3ljbGVzQW5kRGVyaXZlZFN0YXRlIiwiZGlkV2FybkFib3V0VW5kZWZpbmVkRGVyaXZlZFN0YXRlIiwid2Fybk9uVW5kZWZpbmVkRGVyaXZlZFN0YXRlIiwid2Fybk9uSW52YWxpZENhbGxiYWNrIiwiZGlkV2FybkFib3V0RGlyZWN0bHlBc3NpZ25pbmdQcm9wc1RvU3RhdGUiLCJkaWRXYXJuQWJvdXRDb250ZXh0VHlwZUFuZENvbnRleHRUeXBlcyIsImRpZFdhcm5BYm91dEludmFsaWRhdGVDb250ZXh0VHlwZSIsImRpZFdhcm5BYm91dExlZ2FjeUNvbnRleHQkMSIsImRpZFdhcm5PbkludmFsaWRDYWxsYmFjayIsImNhbGxlck5hbWUiLCJhcHBseURlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsImNsYXNzQ29tcG9uZW50VXBkYXRlciIsImVucXVldWVTZXRTdGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJjaGVja1Nob3VsZENvbXBvbmVudFVwZGF0ZSIsIm9sZFN0YXRlIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJjaGVja0NsYXNzSW5zdGFuY2UiLCJyZW5kZXJQcmVzZW50IiwiZ2V0SW5pdGlhbFN0YXRlIiwiaXNSZWFjdENsYXNzQXBwcm92ZWQiLCJnZXREZWZhdWx0UHJvcHMiLCJwcm9wVHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbXBvbmVudFNob3VsZFVwZGF0ZSIsImNvbXBvbmVudERpZFVubW91bnQiLCJjb21wb25lbnREaWRSZWNlaXZlUHJvcHMiLCJjb21wb25lbnRXaWxsUmVjaWV2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNpZXZlUHJvcHMiLCJoYXNNdXRhdGVkUHJvcHMiLCJnZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsIl9zdGF0ZSIsImFkb3B0Q2xhc3NJbnN0YW5jZSIsInVwZGF0ZXIiLCJfcmVhY3RJbnRlcm5hbEluc3RhbmNlIiwiY29uc3RydWN0Q2xhc3NJbnN0YW5jZSIsImlzTGVnYWN5Q29udGV4dENvbnN1bWVyIiwiYWRkZW5kdW0iLCJmb3VuZFdpbGxNb3VudE5hbWUiLCJmb3VuZFdpbGxSZWNlaXZlUHJvcHNOYW1lIiwiZm91bmRXaWxsVXBkYXRlTmFtZSIsIl9jb21wb25lbnROYW1lIiwibmV3QXBpTmFtZSIsImNhbGxDb21wb25lbnRXaWxsTW91bnQiLCJjYWxsQ29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm1vdW50Q2xhc3NJbnN0YW5jZSIsImNvbXBvbmVudERpZE1vdW50IiwicmVzdW1lTW91bnRDbGFzc0luc3RhbmNlIiwib2xkQ29udGV4dCIsIm5leHRMZWdhY3lVbm1hc2tlZENvbnRleHQiLCJoYXNOZXdMaWZlY3ljbGVzIiwiX2ZpYmVyRmxhZ3MiLCJfZmliZXJGbGFnczIiLCJ1cGRhdGVDbGFzc0luc3RhbmNlIiwidW5yZXNvbHZlZE9sZFByb3BzIiwidW5yZXNvbHZlZE5ld1Byb3BzIiwibmV4dFVubWFza2VkQ29udGV4dCIsImNyZWF0ZUNhcHR1cmVkVmFsdWVBdEZpYmVyIiwiY3JlYXRlQ2FwdHVyZWRWYWx1ZSIsInNob3dFcnJvckRpYWxvZyIsImJvdW5kYXJ5IiwiZXJyb3JJbmZvIiwibG9nQ2FwdHVyZWRFcnJvciIsImxvZ0Vycm9yIiwiY29tcG9uZW50U3RhY2siLCJjb21wb25lbnROYW1lTWVzc2FnZSIsImVycm9yQm91bmRhcnlNZXNzYWdlIiwiZXJyb3JCb3VuZGFyeU5hbWUiLCJjb21iaW5lZE1lc3NhZ2UiLCJQb3NzaWJseVdlYWtNYXAkMSIsImNyZWF0ZVJvb3RFcnJvclVwZGF0ZSIsIm9uVW5jYXVnaHRFcnJvciIsImNyZWF0ZUNsYXNzRXJyb3JVcGRhdGUiLCJtYXJrRmFpbGVkRXJyb3JCb3VuZGFyeUZvckhvdFJlbG9hZGluZyIsImNvbXBvbmVudERpZENhdGNoIiwibWFya0xlZ2FjeUVycm9yQm91bmRhcnlBc0ZhaWxlZCIsImF0dGFjaFBpbmdMaXN0ZW5lciIsInBpbmdDYWNoZSIsInRocmVhZElEcyIsInBpbmciLCJwaW5nU3VzcGVuZGVkUm9vdCIsInJlc3RvcmVQZW5kaW5nVXBkYXRlcnMiLCJhdHRhY2hSZXRyeUxpc3RlbmVyIiwic3VzcGVuc2VCb3VuZGFyeSIsIndha2VhYmxlcyIsInJlc2V0U3VzcGVuZGVkQ29tcG9uZW50Iiwicm9vdFJlbmRlckxhbmVzIiwiY3VycmVudFNvdXJjZSIsImdldE5lYXJlc3RTdXNwZW5zZUJvdW5kYXJ5VG9DYXB0dXJlIiwibWFya1N1c3BlbnNlQm91bmRhcnlTaG91bGRDYXB0dXJlIiwiY3VycmVudFNvdXJjZUZpYmVyIiwidGhyb3dFeGNlcHRpb24iLCJyZW5kZXJEaWRTdXNwZW5kRGVsYXlJZlBvc3NpYmxlIiwidW5jYXVnaHRTdXNwZW5zZUVycm9yIiwiX3N1c3BlbnNlQm91bmRhcnkiLCJyZW5kZXJEaWRFcnJvciIsIl9lcnJvckluZm8iLCJpc0FscmVhZHlGYWlsZWRMZWdhY3lFcnJvckJvdW5kYXJ5IiwiX2xhbmUiLCJfdXBkYXRlIiwiZ2V0U3VzcGVuZGVkQ2FjaGUiLCJSZWFjdEN1cnJlbnRPd25lciQxIiwiZGlkUmVjZWl2ZVVwZGF0ZSIsImRpZFdhcm5BYm91dEJhZENsYXNzIiwiZGlkV2FybkFib3V0TW9kdWxlUGF0dGVybkNvbXBvbmVudCIsImRpZFdhcm5BYm91dENvbnRleHRUeXBlT25GdW5jdGlvbkNvbXBvbmVudCIsImRpZFdhcm5BYm91dEdldERlcml2ZWRTdGF0ZU9uRnVuY3Rpb25Db21wb25lbnQiLCJkaWRXYXJuQWJvdXRGdW5jdGlvblJlZnMiLCJkaWRXYXJuQWJvdXRSZWFzc2lnbmluZ1Byb3BzIiwiZGlkV2FybkFib3V0UmV2ZWFsT3JkZXIiLCJkaWRXYXJuQWJvdXRUYWlsT3B0aW9ucyIsImRpZFdhcm5BYm91dERlZmF1bHRQcm9wc09uRnVuY3Rpb25Db21wb25lbnQiLCJyZWNvbmNpbGVDaGlsZHJlbiIsIm5leHRDaGlsZHJlbiIsImZvcmNlVW5tb3VudEN1cnJlbnRBbmRSZWNvbmNpbGUiLCJ1cGRhdGVGb3J3YXJkUmVmIiwiaW5uZXJQcm9wVHlwZXMiLCJoYXNJZCIsImJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsiLCJ1cGRhdGVNZW1vQ29tcG9uZW50IiwiaXNTaW1wbGVGdW5jdGlvbkNvbXBvbmVudCIsImNvbXBhcmUiLCJyZXNvbHZlZFR5cGUiLCJyZXNvbHZlRnVuY3Rpb25Gb3JIb3RSZWxvYWRpbmciLCJ2YWxpZGF0ZUZ1bmN0aW9uQ29tcG9uZW50SW5EZXYiLCJ1cGRhdGVTaW1wbGVNZW1vQ29tcG9uZW50IiwiY3JlYXRlRmliZXJGcm9tVHlwZUFuZFByb3BzIiwiX2lubmVyUHJvcFR5cGVzIiwiaGFzU2NoZWR1bGVkVXBkYXRlT3JDb250ZXh0IiwiY2hlY2tTY2hlZHVsZWRVcGRhdGVPckNvbnRleHQiLCJwcmV2UHJvcHMiLCJvdXRlck1lbW9UeXBlIiwib3V0ZXJQcm9wVHlwZXMiLCJ1cGRhdGVGdW5jdGlvbkNvbXBvbmVudCIsInVwZGF0ZU9mZnNjcmVlbkNvbXBvbmVudCIsImJhc2VMYW5lcyIsImNhY2hlUG9vbCIsInRyYW5zaXRpb25zIiwicHVzaFJlbmRlckxhbmVzIiwic3Bhd25lZENhY2hlUG9vbCIsIm5leHRCYXNlTGFuZXMiLCJwcmV2QmFzZUxhbmVzIiwiX25leHRTdGF0ZSIsIl9uZXh0U3RhdGUyIiwic3VidHJlZVJlbmRlckxhbmVzIiwiX3N1YnRyZWVSZW5kZXJMYW5lcyIsInVwZGF0ZU1vZGUiLCJ1cGRhdGVQcm9maWxlciIsIm1hcmtSZWYiLCJ1cGRhdGVDbGFzc0NvbXBvbmVudCIsInNob3VsZEVycm9yIiwidGVtcEluc3RhbmNlIiwiaGFzQ29udGV4dCIsInJlc2V0U3VzcGVuZGVkQ3VycmVudE9uTW91bnRJbkxlZ2FjeU1vZGUiLCJuZXh0VW5pdE9mV29yayIsImZpbmlzaENsYXNzQ29tcG9uZW50IiwiZGlkQ2FwdHVyZUVycm9yIiwicHVzaEhvc3RSb290Q29udGV4dCIsInBlbmRpbmdDb250ZXh0IiwidXBkYXRlSG9zdFJvb3QiLCJwcmV2Q2hpbGRyZW4iLCJvdmVycmlkZVN0YXRlIiwiY2FjaGUiLCJwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzIiwicmVjb3ZlcmFibGVFcnJvciIsIm1vdW50SG9zdFJvb3RXaXRob3V0SHlkcmF0aW5nIiwiX3JlY292ZXJhYmxlRXJyb3IiLCJ1cGRhdGVIb3N0Q29tcG9uZW50IiwiaXNEaXJlY3RUZXh0Q2hpbGQiLCJ1cGRhdGVIb3N0VGV4dCIsIm1vdW50TGF6eUNvbXBvbmVudCIsIl9jdXJyZW50IiwicmVzb2x2ZWRUYWciLCJyZXNvbHZlTGF6eUNvbXBvbmVudFRhZyIsInJlc29sdmVkUHJvcHMiLCJyZXNvbHZlQ2xhc3NGb3JIb3RSZWxvYWRpbmciLCJyZXNvbHZlRm9yd2FyZFJlZkZvckhvdFJlbG9hZGluZyIsImhpbnQiLCJtb3VudEluY29tcGxldGVDbGFzc0NvbXBvbmVudCIsIm1vdW50SW5kZXRlcm1pbmF0ZUNvbXBvbmVudCIsIl9jb21wb25lbnROYW1lMiIsImRlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiX2NvbXBvbmVudE5hbWUzIiwiX2NvbXBvbmVudE5hbWU0IiwiU1VTUEVOREVEX01BUktFUiIsIm1vdW50U3VzcGVuc2VPZmZzY3JlZW5TdGF0ZSIsInVwZGF0ZVN1c3BlbnNlT2Zmc2NyZWVuU3RhdGUiLCJwcmV2T2Zmc2NyZWVuU3RhdGUiLCJzaG91bGRSZW1haW5PbkZhbGxiYWNrIiwic3VzcGVuc2VDb250ZXh0IiwiZ2V0UmVtYWluaW5nV29ya0luUHJpbWFyeVRyZWUiLCJ1cGRhdGVTdXNwZW5zZUNvbXBvbmVudCIsInNob3VsZFN1c3BlbmQiLCJzaG93RmFsbGJhY2siLCJtb3VudERlaHlkcmF0ZWRTdXNwZW5zZUNvbXBvbmVudCIsIm5leHRQcmltYXJ5Q2hpbGRyZW4iLCJuZXh0RmFsbGJhY2tDaGlsZHJlbiIsImZhbGxiYWNrIiwiZmFsbGJhY2tGcmFnbWVudCIsIm1vdW50U3VzcGVuc2VGYWxsYmFja0NoaWxkcmVuIiwicHJpbWFyeUNoaWxkRnJhZ21lbnQiLCJtb3VudFN1c3BlbnNlUHJpbWFyeUNoaWxkcmVuIiwiX2RlaHlkcmF0ZWQiLCJ1cGRhdGVEZWh5ZHJhdGVkU3VzcGVuc2VDb21wb25lbnQiLCJfbmV4dEZhbGxiYWNrQ2hpbGRyZW4iLCJfbmV4dFByaW1hcnlDaGlsZHJlbiIsImZhbGxiYWNrQ2hpbGRGcmFnbWVudCIsInVwZGF0ZVN1c3BlbnNlRmFsbGJhY2tDaGlsZHJlbiIsIl9wcmltYXJ5Q2hpbGRGcmFnbWVudDIiLCJfbmV4dFByaW1hcnlDaGlsZHJlbjIiLCJfcHJpbWFyeUNoaWxkRnJhZ21lbnQzIiwidXBkYXRlU3VzcGVuc2VQcmltYXJ5Q2hpbGRyZW4iLCJwcmltYXJ5Q2hpbGRyZW4iLCJwcmltYXJ5Q2hpbGRQcm9wcyIsIm1vdW50V29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlciIsImZhbGxiYWNrQ2hpbGRyZW4iLCJwcm9ncmVzc2VkUHJpbWFyeUZyYWdtZW50IiwidHJlZUJhc2VEdXJhdGlvbiIsIm9mZnNjcmVlblByb3BzIiwiY3JlYXRlRmliZXJGcm9tT2Zmc2NyZWVuIiwidXBkYXRlV29ya0luUHJvZ3Jlc3NPZmZzY3JlZW5GaWJlciIsImN1cnJlbnRQcmltYXJ5Q2hpbGRGcmFnbWVudCIsImN1cnJlbnRGYWxsYmFja0NoaWxkRnJhZ21lbnQiLCJzdWJ0cmVlRmxhZ3MiLCJyZXRyeVN1c3BlbnNlQ29tcG9uZW50V2l0aG91dEh5ZHJhdGluZyIsIm1vdW50U3VzcGVuc2VGYWxsYmFja0FmdGVyUmV0cnlXaXRob3V0SHlkcmF0aW5nIiwiZmliZXJNb2RlIiwiX2dldFN1c3BlbnNlSW5zdGFuY2VGIiwiY2FwdHVyZWRWYWx1ZSIsImF0dGVtcHRIeWRyYXRpb25BdExhbmUiLCJfY2FwdHVyZWRWYWx1ZSIsInJldHJ5IiwicmV0cnlEZWh5ZHJhdGVkU3VzcGVuc2VCb3VuZGFyeSIsIl9jYXB0dXJlZFZhbHVlMiIsIl9wcmltYXJ5Q2hpbGRGcmFnbWVudDQiLCJzY2hlZHVsZVN1c3BlbnNlV29ya09uRmliZXIiLCJwcm9wYWdhdGVTdXNwZW5zZUNvbnRleHRDaGFuZ2UiLCJmaW5kTGFzdENvbnRlbnRSb3ciLCJsYXN0Q29udGVudFJvdyIsImN1cnJlbnRSb3ciLCJ2YWxpZGF0ZVJldmVhbE9yZGVyIiwidmFsaWRhdGVUYWlsT3B0aW9ucyIsInRhaWxNb2RlIiwidmFsaWRhdGVTdXNwZW5zZUxpc3ROZXN0ZWRDaGlsZCIsImNoaWxkU2xvdCIsImlzQW5BcnJheSIsImlzSXRlcmFibGUiLCJ2YWxpZGF0ZVN1c3BlbnNlTGlzdENoaWxkcmVuIiwiY2hpbGRyZW5JdGVyYXRvciIsImluaXRTdXNwZW5zZUxpc3RSZW5kZXJTdGF0ZSIsImlzQmFja3dhcmRzIiwidGFpbCIsInJlbmRlclN0YXRlIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInVwZGF0ZVN1c3BlbnNlTGlzdENvbXBvbmVudCIsInNob3VsZEZvcmNlRmFsbGJhY2siLCJkaWRTdXNwZW5kQmVmb3JlIiwiX3RhaWwiLCJuZXh0Um93IiwidXBkYXRlUG9ydGFsQ29tcG9uZW50IiwiaGFzV2FybmVkQWJvdXRVc2luZ05vVmFsdWVQcm9wT25Db250ZXh0UHJvdmlkZXIiLCJ1cGRhdGVDb250ZXh0UHJvdmlkZXIiLCJwcm92aWRlclR5cGUiLCJwcm92aWRlclByb3BUeXBlcyIsIm9sZFZhbHVlIiwiaGFzV2FybmVkQWJvdXRVc2luZ0NvbnRleHRBc0NvbnN1bWVyIiwidXBkYXRlQ29udGV4dENvbnN1bWVyIiwiQ29uc3VtZXIiLCJyZW1vdW50RmliZXIiLCJvbGRXb3JrSW5Qcm9ncmVzcyIsIm5ld1dvcmtJblByb2dyZXNzIiwicHJldlNpYmxpbmciLCJ1cGRhdGVMYW5lcyIsImF0dGVtcHRFYXJseUJhaWxvdXRJZk5vU2NoZWR1bGVkVXBkYXRlIiwiaGFzQ2hpbGRXb3JrIiwicHJpbWFyeUNoaWxkTGFuZXMiLCJfaGFzQ2hpbGRXb3JrIiwiYmVnaW5Xb3JrIiwiX2RlYnVnTmVlZHNSZW1vdW50IiwidW5yZXNvbHZlZFByb3BzIiwiX0NvbXBvbmVudCIsIl91bnJlc29sdmVkUHJvcHMiLCJfcmVzb2x2ZWRQcm9wcyIsIl91bnJlc29sdmVkUHJvcHMyIiwiX3Jlc29sdmVkUHJvcHMyIiwiX3VucmVzb2x2ZWRQcm9wczMiLCJfcmVzb2x2ZWRQcm9wczMiLCJfQ29tcG9uZW50MiIsIl91bnJlc29sdmVkUHJvcHM0IiwiX3Jlc29sdmVkUHJvcHM0IiwibWFya1VwZGF0ZSIsIm1hcmtSZWYkMSIsImFwcGVuZEFsbENoaWxkcmVuIiwidXBkYXRlSG9zdENvbnRhaW5lciIsInVwZGF0ZUhvc3RDb21wb25lbnQkMSIsInVwZGF0ZUhvc3RUZXh0JDEiLCJuZWVkc1Zpc2liaWxpdHlUb2dnbGUiLCJpc0hpZGRlbiIsImN1cnJlbnRIb3N0Q29udGV4dCIsImN1dE9mZlRhaWxJZk5lZWRlZCIsImhhc1JlbmRlcmVkQVRhaWxGYWxsYmFjayIsInRhaWxOb2RlIiwibGFzdFRhaWxOb2RlIiwiX3RhaWxOb2RlIiwiX2xhc3RUYWlsTm9kZSIsImJ1YmJsZVByb3BlcnRpZXMiLCJjb21wbGV0ZWRXb3JrIiwiZGlkQmFpbG91dCIsIm5ld0NoaWxkTGFuZXMiLCJfdHJlZUJhc2VEdXJhdGlvbiIsIl9jaGlsZDIiLCJfY2hpbGQzIiwiY29tcGxldGVEZWh5ZHJhdGVkU3VzcGVuc2VCb3VuZGFyeSIsIndhc0h5ZHJhdGVkIiwiaXNUaW1lZE91dFN1c3BlbnNlIiwiX2lzVGltZWRPdXRTdXNwZW5zZSIsIl9wcmltYXJ5Q2hpbGRGcmFnbWVudCIsImNvbXBsZXRlV29yayIsImZpYmVyUm9vdCIsIl93YXNIeWRyYXRlZCIsIl9yb290Q29udGFpbmVySW5zdGFuY2UiLCJfY3VycmVudEhvc3RDb250ZXh0IiwiX3dhc0h5ZHJhdGVkMiIsImZhbGx0aHJvdWdoVG9Ob3JtYWxTdXNwZW5zZVBhdGgiLCJuZXh0RGlkVGltZW91dCIsInByZXZEaWRUaW1lb3V0IiwiX29mZnNjcmVlbkZpYmVyMiIsImhhc0ludmlzaWJsZUNoaWxkQ29udGV4dCIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwicmVuZGVyRGlkU3VzcGVuZCIsImRpZFN1c3BlbmRBbHJlYWR5IiwicmVuZGVyZWRUYWlsIiwiY2Fubm90QmVTdXNwZW5kZWQiLCJyZW5kZXJIYXNOb3RTdXNwZW5kZWRZZXQiLCJzdXNwZW5kZWQiLCJuZXdUaGVuYWJsZXMiLCJnZXRSZW5kZXJUYXJnZXRUaW1lIiwiX3N1c3BlbmRlZCIsIl9uZXdUaGVuYWJsZXMiLCJwb3BSZW5kZXJMYW5lcyIsIm5leHRJc0hpZGRlbiIsIl9wcmV2U3RhdGUiLCJwcmV2SXNIaWRkZW4iLCJ1bndpbmRXb3JrIiwiX2ZsYWdzIiwiX2ZsYWdzMiIsInVud2luZEludGVycnVwdGVkV29yayIsImludGVycnVwdGVkV29yayIsImRpZFdhcm5BYm91dFVuZGVmaW5lZFNuYXBzaG90QmVmb3JlVXBkYXRlIiwib2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuIiwib2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiIsIlBvc3NpYmx5V2Vha1NldCIsIldlYWtTZXQiLCJuZXh0RWZmZWN0IiwiaW5Qcm9ncmVzc0xhbmVzIiwiaW5Qcm9ncmVzc1Jvb3QiLCJyZXBvcnRVbmNhdWdodEVycm9ySW5ERVYiLCJjYWxsQ29tcG9uZW50V2lsbFVubW91bnRXaXRoVGltZXIiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsInNhZmVseUNhbGxDb21taXRIb29rTGF5b3V0RWZmZWN0TGlzdE1vdW50IiwibmVhcmVzdE1vdW50ZWRBbmNlc3RvciIsImNvbW1pdEhvb2tFZmZlY3RMaXN0TW91bnQiLCJjYXB0dXJlQ29tbWl0UGhhc2VFcnJvciIsInNhZmVseUNhbGxDb21wb25lbnRXaWxsVW5tb3VudCIsInNhZmVseUNhbGxDb21wb25lbnREaWRNb3VudCIsInNhZmVseUF0dGFjaFJlZiIsImNvbW1pdEF0dGFjaFJlZiIsInNhZmVseURldGFjaFJlZiIsInJldFZhbCIsInNhZmVseUNhbGxEZXN0cm95IiwiZm9jdXNlZEluc3RhbmNlSGFuZGxlIiwic2hvdWxkRmlyZUFmdGVyQWN0aXZlSW5zdGFuY2VCbHVyIiwiY29tbWl0QmVmb3JlTXV0YXRpb25FZmZlY3RzIiwiY29tbWl0QmVmb3JlTXV0YXRpb25FZmZlY3RzX2JlZ2luIiwic2hvdWxkRmlyZSIsImNvbW1pdEJlZm9yZU11dGF0aW9uRWZmZWN0c19jb21wbGV0ZSIsImNvbW1pdEJlZm9yZU11dGF0aW9uRWZmZWN0c09uRmliZXIiLCJzbmFwc2hvdCIsImRpZFdhcm5TZXQiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImNvbW1pdEhvb2tFZmZlY3RMaXN0VW5tb3VudCIsInNldElzUnVubmluZ0luc2VydGlvbkVmZmVjdCIsImNvbW1pdFBhc3NpdmVFZmZlY3REdXJhdGlvbnMiLCJmaW5pc2hlZFJvb3QiLCJfZmluaXNoZWRXb3JrJG1lbW9pemUiLCJvblBvc3RDb21taXQiLCJwaGFzZSIsImNvbW1pdExheW91dEVmZmVjdE9uRmliZXIiLCJjb21taXR0ZWRMYW5lcyIsIl91cGRhdGVRdWV1ZSIsIl9maW5pc2hlZFdvcmskbWVtb2l6ZTIiLCJvbkNvbW1pdCIsIm9uUmVuZGVyIiwiZW5xdWV1ZVBlbmRpbmdQYXNzaXZlUHJvZmlsZXJFZmZlY3QiLCJjb21taXRTdXNwZW5zZUh5ZHJhdGlvbkNhbGxiYWNrcyIsInJlYXBwZWFyTGF5b3V0RWZmZWN0c09uRmliZXIiLCJoaWRlT3JVbmhpZGVBbGxDaGlsZHJlbiIsImhvc3RTdWJ0cmVlUm9vdCIsImluc3RhbmNlVG9Vc2UiLCJkZXRhY2hGaWJlck11dGF0aW9uIiwiZGV0YWNoRmliZXJBZnRlckVmZmVjdHMiLCJob3N0SW5zdGFuY2UiLCJnZXRIb3N0UGFyZW50RmliZXIiLCJpc0hvc3RQYXJlbnQiLCJnZXRIb3N0U2libGluZyIsInNpYmxpbmdzIiwiY29tbWl0UGxhY2VtZW50IiwiYmVmb3JlIiwiaW5zZXJ0T3JBcHBlbmRQbGFjZW1lbnROb2RlIiwiX3BhcmVudCIsIl9iZWZvcmUiLCJpbnNlcnRPckFwcGVuZFBsYWNlbWVudE5vZGVJbnRvQ29udGFpbmVyIiwiaXNIb3N0IiwiaG9zdFBhcmVudCIsImhvc3RQYXJlbnRJc0NvbnRhaW5lciIsImNvbW1pdERlbGV0aW9uRWZmZWN0cyIsImRlbGV0ZWRGaWJlciIsImZpbmRQYXJlbnQiLCJjb21taXREZWxldGlvbkVmZmVjdHNPbkZpYmVyIiwicmVjdXJzaXZlbHlUcmF2ZXJzZURlbGV0aW9uRWZmZWN0cyIsInByZXZIb3N0UGFyZW50IiwicHJldkhvc3RQYXJlbnRJc0NvbnRhaW5lciIsIl9wcmV2SG9zdFBhcmVudCIsIl9wcmV2SG9zdFBhcmVudElzQ29udGFpbmVyIiwiX2VmZmVjdCIsInByZXZPZmZzY3JlZW5TdWJ0cmVlV2FzSGlkZGVuIiwiY29tbWl0U3VzcGVuc2VDYWxsYmFjayIsImF0dGFjaFN1c3BlbnNlUmV0cnlMaXN0ZW5lcnMiLCJyZXRyeUNhY2hlIiwicmVzb2x2ZVJldHJ5V2FrZWFibGUiLCJjb21taXRNdXRhdGlvbkVmZmVjdHMiLCJjb21taXRNdXRhdGlvbkVmZmVjdHNPbkZpYmVyIiwicmVjdXJzaXZlbHlUcmF2ZXJzZU11dGF0aW9uRWZmZWN0cyIsInByZXZEZWJ1Z0ZpYmVyIiwiY29tbWl0UmVjb25jaWxpYXRpb25FZmZlY3RzIiwicHJldlJvb3RTdGF0ZSIsIm9mZnNjcmVlbkZpYmVyIiwib2Zmc2NyZWVuSW5zdGFuY2UiLCJ3YXNIaWRkZW4iLCJtYXJrQ29tbWl0VGltZU9mRmFsbGJhY2siLCJfd2FzSGlkZGVuIiwiX29mZnNjcmVlbkluc3RhbmNlIiwiX25ld1N0YXRlIiwiX2lzSGlkZGVuIiwib2Zmc2NyZWVuQm91bmRhcnkiLCJvZmZzY3JlZW5DaGlsZCIsImRpc2FwcGVhckxheW91dEVmZmVjdHNfYmVnaW4iLCJjb21taXRMYXlvdXRFZmZlY3RzIiwiY29tbWl0TGF5b3V0RWZmZWN0c19iZWdpbiIsInN1YnRyZWVSb290IiwiaXNNb2Rlcm5Sb290IiwibmV3T2Zmc2NyZWVuU3VidHJlZUlzSGlkZGVuIiwiY29tbWl0TGF5b3V0TW91bnRFZmZlY3RzX2NvbXBsZXRlIiwibmV3T2Zmc2NyZWVuU3VidHJlZVdhc0hpZGRlbiIsInByZXZPZmZzY3JlZW5TdWJ0cmVlSXNIaWRkZW4iLCJyZWFwcGVhckxheW91dEVmZmVjdHNfYmVnaW4iLCJkaXNhcHBlYXJMYXlvdXRFZmZlY3RzX2NvbXBsZXRlIiwicmVhcHBlYXJMYXlvdXRFZmZlY3RzX2NvbXBsZXRlIiwiY29tbWl0UGFzc2l2ZU1vdW50RWZmZWN0cyIsImNvbW1pdHRlZFRyYW5zaXRpb25zIiwiY29tbWl0UGFzc2l2ZU1vdW50RWZmZWN0c19iZWdpbiIsImNvbW1pdFBhc3NpdmVNb3VudEVmZmVjdHNfY29tcGxldGUiLCJjb21taXRQYXNzaXZlTW91bnRPbkZpYmVyIiwiY29tbWl0UGFzc2l2ZVVubW91bnRFZmZlY3RzIiwiY29tbWl0UGFzc2l2ZVVubW91bnRFZmZlY3RzX2JlZ2luIiwiZmliZXJUb0RlbGV0ZSIsImNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c0luc2lkZU9mRGVsZXRlZFRyZWVfYmVnaW4iLCJwcmV2aW91c0ZpYmVyIiwiZGV0YWNoZWRDaGlsZCIsImRldGFjaGVkU2libGluZyIsImNvbW1pdFBhc3NpdmVVbm1vdW50RWZmZWN0c19jb21wbGV0ZSIsImNvbW1pdFBhc3NpdmVVbm1vdW50T25GaWJlciIsImRlbGV0ZWRTdWJ0cmVlUm9vdCIsImNvbW1pdFBhc3NpdmVVbm1vdW50SW5zaWRlRGVsZXRlZFRyZWVPbkZpYmVyIiwiY29tbWl0UGFzc2l2ZVVubW91bnRFZmZlY3RzSW5zaWRlT2ZEZWxldGVkVHJlZV9jb21wbGV0ZSIsImludm9rZUxheW91dEVmZmVjdE1vdW50SW5ERVYiLCJpbnZva2VQYXNzaXZlRWZmZWN0TW91bnRJbkRFViIsImludm9rZUxheW91dEVmZmVjdFVubW91bnRJbkRFViIsImludm9rZVBhc3NpdmVFZmZlY3RVbm1vdW50SW5ERVYiLCJDT01QT05FTlRfVFlQRSIsIkhBU19QU0VVRE9fQ0xBU1NfVFlQRSIsIlJPTEVfVFlQRSIsIlRFU1RfTkFNRV9UWVBFIiwiVEVYVF9UWVBFIiwic3ltYm9sRm9yIiwiY29tbWl0SG9va3MiLCJvbkNvbW1pdFJvb3QkMSIsImNvbW1pdEhvb2siLCJSZWFjdEN1cnJlbnRBY3RRdWV1ZSIsImlzTGVnYWN5QWN0RW52aXJvbm1lbnQiLCJpc1JlYWN0QWN0RW52aXJvbm1lbnRHbG9iYWwiLCJJU19SRUFDVF9BQ1RfRU5WSVJPTk1FTlQiLCJqZXN0SXNEZWZpbmVkIiwiamVzdCIsImlzQ29uY3VycmVudEFjdEVudmlyb25tZW50IiwiY2VpbCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIkMiIsIlJlYWN0Q3VycmVudE93bmVyJDIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyQzIiwiUmVhY3RDdXJyZW50QWN0UXVldWUkMSIsIk5vQ29udGV4dCIsIkJhdGNoZWRDb250ZXh0IiwiUmVuZGVyQ29udGV4dCIsIkNvbW1pdENvbnRleHQiLCJSb290SW5Qcm9ncmVzcyIsIlJvb3RGYXRhbEVycm9yZWQiLCJSb290RXJyb3JlZCIsIlJvb3RTdXNwZW5kZWQiLCJSb290U3VzcGVuZGVkV2l0aERlbGF5IiwiUm9vdENvbXBsZXRlZCIsIlJvb3REaWROb3RDb21wbGV0ZSIsImV4ZWN1dGlvbkNvbnRleHQiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3QiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJMYW5lcyIsInN1YnRyZWVSZW5kZXJMYW5lc0N1cnNvciIsIndvcmtJblByb2dyZXNzUm9vdEV4aXRTdGF0dXMiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RGYXRhbEVycm9yIiwid29ya0luUHJvZ3Jlc3NSb290SW5jbHVkZWRMYW5lcyIsIndvcmtJblByb2dyZXNzUm9vdFNraXBwZWRMYW5lcyIsIndvcmtJblByb2dyZXNzUm9vdEludGVybGVhdmVkVXBkYXRlZExhbmVzIiwid29ya0luUHJvZ3Jlc3NSb290UGluZ2VkTGFuZXMiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RDb25jdXJyZW50RXJyb3JzIiwid29ya0luUHJvZ3Jlc3NSb290UmVjb3ZlcmFibGVFcnJvcnMiLCJnbG9iYWxNb3N0UmVjZW50RmFsbGJhY2tUaW1lIiwiRkFMTEJBQ0tfVEhST1RUTEVfTVMiLCJ3b3JrSW5Qcm9ncmVzc1Jvb3RSZW5kZXJUYXJnZXRUaW1lIiwiSW5maW5pdHkiLCJSRU5ERVJfVElNRU9VVF9NUyIsIndvcmtJblByb2dyZXNzVHJhbnNpdGlvbnMiLCJyZXNldFJlbmRlclRpbWVyIiwiaGFzVW5jYXVnaHRFcnJvciIsImZpcnN0VW5jYXVnaHRFcnJvciIsImxlZ2FjeUVycm9yQm91bmRhcmllc1RoYXRBbHJlYWR5RmFpbGVkIiwicm9vdERvZXNIYXZlUGFzc2l2ZUVmZmVjdHMiLCJyb290V2l0aFBlbmRpbmdQYXNzaXZlRWZmZWN0cyIsInBlbmRpbmdQYXNzaXZlRWZmZWN0c0xhbmVzIiwicGVuZGluZ1Bhc3NpdmVQcm9maWxlckVmZmVjdHMiLCJwZW5kaW5nUGFzc2l2ZVRyYW5zaXRpb25zIiwiTkVTVEVEX1VQREFURV9MSU1JVCIsIm5lc3RlZFVwZGF0ZUNvdW50Iiwicm9vdFdpdGhOZXN0ZWRVcGRhdGVzIiwiaXNGbHVzaGluZ1Bhc3NpdmVFZmZlY3RzIiwiZGlkU2NoZWR1bGVVcGRhdGVEdXJpbmdQYXNzaXZlRWZmZWN0cyIsIk5FU1RFRF9QQVNTSVZFX1VQREFURV9MSU1JVCIsIm5lc3RlZFBhc3NpdmVVcGRhdGVDb3VudCIsInJvb3RXaXRoUGFzc2l2ZU5lc3RlZFVwZGF0ZXMiLCJjdXJyZW50RXZlbnRUaW1lIiwiY3VycmVudEV2ZW50VHJhbnNpdGlvbkxhbmUiLCJpc1J1bm5pbmdJbnNlcnRpb25FZmZlY3QiLCJpc1RyYW5zaXRpb24iLCJldmVudExhbmUiLCJyZXF1ZXN0UmV0cnlMYW5lIiwiY2hlY2tGb3JOZXN0ZWRVcGRhdGVzIiwid2FybkFib3V0UmVuZGVyUGhhc2VVcGRhdGVzSW5ERVYiLCJ3YXJuSWZVcGRhdGVzTm90V3JhcHBlZFdpdGhBY3RERVYiLCJtYXJrUm9vdFN1c3BlbmRlZCQxIiwiZW5zdXJlUm9vdElzU2NoZWR1bGVkIiwiaXNCYXRjaGluZ0xlZ2FjeSIsInNjaGVkdWxlSW5pdGlhbEh5ZHJhdGlvbk9uUm9vdCIsImV4aXN0aW5nQ2FsbGJhY2tOb2RlIiwiY2FsbGJhY2tOb2RlIiwiY2FuY2VsQ2FsbGJhY2skMSIsImNhbGxiYWNrUHJpb3JpdHkiLCJuZXdDYWxsYmFja1ByaW9yaXR5IiwiZXhpc3RpbmdDYWxsYmFja1ByaW9yaXR5IiwiZmFrZUFjdENhbGxiYWNrTm9kZSIsIm5ld0NhbGxiYWNrTm9kZSIsImRpZFNjaGVkdWxlTGVnYWN5VXBkYXRlIiwicGVyZm9ybVN5bmNXb3JrT25Sb290Iiwic2NoZWR1bGVyUHJpb3JpdHlMZXZlbCIsInNjaGVkdWxlQ2FsbGJhY2skMSIsInBlcmZvcm1Db25jdXJyZW50V29ya09uUm9vdCIsImRpZFRpbWVvdXQiLCJvcmlnaW5hbENhbGxiYWNrTm9kZSIsImRpZEZsdXNoUGFzc2l2ZUVmZmVjdHMiLCJmbHVzaFBhc3NpdmVFZmZlY3RzIiwic2hvdWxkVGltZVNsaWNlIiwiZXhpdFN0YXR1cyIsInJlbmRlclJvb3RDb25jdXJyZW50IiwicmVuZGVyUm9vdFN5bmMiLCJlcnJvclJldHJ5TGFuZXMiLCJyZWNvdmVyRnJvbUNvbmN1cnJlbnRFcnJvciIsImZhdGFsRXJyb3IiLCJwcmVwYXJlRnJlc2hTdGFjayIsInJlbmRlcldhc0NvbmN1cnJlbnQiLCJpc1JlbmRlckNvbnNpc3RlbnRXaXRoRXh0ZXJuYWxTdG9yZXMiLCJfZXJyb3JSZXRyeUxhbmVzIiwiX2ZhdGFsRXJyb3IiLCJmaW5pc2hlZExhbmVzIiwiZmluaXNoQ29uY3VycmVudFJlbmRlciIsImVycm9yc0Zyb21GaXJzdEF0dGVtcHQiLCJyb290V29ya0luUHJvZ3Jlc3MiLCJlcnJvcnNGcm9tU2Vjb25kQXR0ZW1wdCIsImVycm9ycyIsImNvbW1pdFJvb3QiLCJzaG91bGRGb3JjZUZsdXNoRmFsbGJhY2tzSW5ERVYiLCJtc1VudGlsVGltZW91dCIsInRpbWVvdXRIYW5kbGUiLCJldmVudFRpbWVNcyIsInRpbWVFbGFwc2VkTXMiLCJfbXNVbnRpbFRpbWVvdXQiLCJqbmQiLCJjaGVja3MiLCJyZW5kZXJlZFZhbHVlIiwiZmx1c2hSb290IiwiYmF0Y2hlZFVwZGF0ZXMkMSIsInByZXZFeGVjdXRpb25Db250ZXh0IiwiZGlzY3JldGVVcGRhdGVzIiwiZmx1c2hTeW5jIiwiaXNBbHJlYWR5UmVuZGVyaW5nIiwiaGFuZGxlRXJyb3IiLCJlcnJvcmVkV29yayIsImNvbXBsZXRlVW5pdE9mV29yayIsInlldEFub3RoZXJUaHJvd25WYWx1ZSIsInB1c2hEaXNwYXRjaGVyIiwicG9wRGlzcGF0Y2hlciIsIndvcmtMb29wU3luYyIsInBlcmZvcm1Vbml0T2ZXb3JrIiwid29ya0xvb3BDb25jdXJyZW50IiwidW5pdE9mV29yayIsImJlZ2luV29yayQxIiwiX25leHQiLCJzaWJsaW5nRmliZXIiLCJyZWNvdmVyYWJsZUVycm9ycyIsInByZXZpb3VzVXBkYXRlTGFuZVByaW9yaXR5IiwiY29tbWl0Um9vdEltcGwiLCJyZW5kZXJQcmlvcml0eUxldmVsIiwiZmx1c2hSZW5kZXJQaGFzZVN0cmljdE1vZGVXYXJuaW5nc0luREVWIiwic3VidHJlZUhhc0VmZmVjdHMiLCJyb290SGFzRWZmZWN0Iiwicm9vdERpZEhhdmVQYXNzaXZlRWZmZWN0cyIsImNvbW1pdERvdWJsZUludm9rZUVmZmVjdHNJbkRFViIsIm9uUmVjb3ZlcmFibGVFcnJvciIsInJlbmRlclByaW9yaXR5IiwiZmx1c2hQYXNzaXZlRWZmZWN0c0ltcGwiLCJwcm9maWxlckVmZmVjdHMiLCJfZmliZXIiLCJwcmVwYXJlVG9UaHJvd1VuY2F1Z2h0RXJyb3IiLCJjYXB0dXJlQ29tbWl0UGhhc2VFcnJvck9uUm9vdCIsInJvb3RGaWJlciIsIndhcm5JZlN1c3BlbnNlUmVzb2x1dGlvbk5vdFdyYXBwZWRXaXRoQWN0REVWIiwicmV0cnlUaW1lZE91dEJvdW5kYXJ5IiwiYm91bmRhcnlGaWJlciIsInRpbWVFbGFwc2VkIiwiaGFzUGFzc2l2ZUVmZmVjdHMiLCJpbnZva2VFZmZlY3RzSW5EZXYiLCJpbnZva2VFZmZlY3RGbiIsInByaW1hcnlTdWJ0cmVlRmxhZyIsImRpZFdhcm5TdGF0ZVVwZGF0ZUZvck5vdFlldE1vdW50ZWRDb21wb25lbnQiLCJkdW1teUZpYmVyIiwib3JpZ2luYWxXb3JrSW5Qcm9ncmVzc0NvcHkiLCJhc3NpZ25GaWJlclByb3BlcnRpZXNJbkRFViIsIm9yaWdpbmFsRXJyb3IiLCJyZXBsYXlFcnJvciIsImRpZFdhcm5BYm91dFVwZGF0ZUluUmVuZGVyIiwiZGlkV2FybkFib3V0VXBkYXRlSW5SZW5kZXJGb3JBbm90aGVyQ29tcG9uZW50IiwicmVuZGVyaW5nQ29tcG9uZW50TmFtZSIsImRlZHVwZUtleSIsInNldFN0YXRlQ29tcG9uZW50TmFtZSIsInNjaGVkdWxpbmdGaWJlciIsInByaW9yaXR5TGV2ZWwiLCJhY3RRdWV1ZSIsImlzUnVubmluZyIsInJlc29sdmVGYW1pbHkiLCJmYWlsZWRCb3VuZGFyaWVzIiwic2V0UmVmcmVzaEhhbmRsZXIiLCJoYW5kbGVyIiwiZmFtaWx5IiwiY3VycmVudFJlbmRlciIsInN5bnRoZXRpY1R5cGUiLCJwcmV2VHlwZSIsIm5leHRUeXBlIiwibmVlZHNDb21wYXJlRmFtaWxpZXMiLCIkJHR5cGVvZk5leHRUeXBlIiwicHJldkZhbWlseSIsInNjaGVkdWxlUmVmcmVzaCIsInN0YWxlRmFtaWxpZXMiLCJ1cGRhdGVkRmFtaWxpZXMiLCJzY2hlZHVsZUZpYmVyc1dpdGhGYW1pbGllc1JlY3Vyc2l2ZWx5Iiwic2NoZWR1bGVSb290IiwidXBkYXRlQ29udGFpbmVyIiwiY2FuZGlkYXRlVHlwZSIsIm5lZWRzUmVuZGVyIiwibmVlZHNSZW1vdW50IiwiX3Jvb3QiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJmYW1pbGllcyIsImhvc3RJbnN0YW5jZXMiLCJ0eXBlcyIsImZpbmRIb3N0SW5zdGFuY2VzRm9yTWF0Y2hpbmdGaWJlcnNSZWN1cnNpdmVseSIsImRpZE1hdGNoIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JGaWJlclNoYWxsb3dseSIsImZvdW5kSG9zdEluc3RhbmNlcyIsImZpbmRDaGlsZEhvc3RJbnN0YW5jZXNGb3JGaWJlclNoYWxsb3dseSIsImhhc0JhZE1hcFBvbHlmaWxsIiwibm9uRXh0ZW5zaWJsZU9iamVjdCIsInByZXZlbnRFeHRlbnNpb25zIiwiRmliZXJOb2RlIiwiTnVtYmVyIiwiTmFOIiwiY3JlYXRlRmliZXIiLCJzaG91bGRDb25zdHJ1Y3QkMSIsImN1cnJlbnREZXBlbmRlbmNpZXMiLCJjcmVhdGVIb3N0Um9vdEZpYmVyIiwiaXNTdHJpY3RNb2RlIiwiY29uY3VycmVudFVwZGF0ZXNCeURlZmF1bHRPdmVycmlkZSIsImZpYmVyVGFnIiwiZ2V0VGFnIiwiY3JlYXRlRmliZXJGcm9tUHJvZmlsZXIiLCJjcmVhdGVGaWJlckZyb21TdXNwZW5zZSIsImNyZWF0ZUZpYmVyRnJvbVN1c3BlbnNlTGlzdCIsImVsZW1lbnRzIiwicHJpbWFyeUNoaWxkSW5zdGFuY2UiLCJkZWh5ZHJhdGVkTm9kZSIsInBlbmRpbmdDaGlsZHJlbiIsIkZpYmVyUm9vdE5vZGUiLCJoeWRyYXRlIiwiX2RlYnVnUm9vdFR5cGUiLCJjcmVhdGVGaWJlclJvb3QiLCJpbml0aWFsQ2hpbGRyZW4iLCJoeWRyYXRpb25DYWxsYmFja3MiLCJ0cmFuc2l0aW9uQ2FsbGJhY2tzIiwidW5pbml0aWFsaXplZEZpYmVyIiwiX2luaXRpYWxTdGF0ZSIsIlJlYWN0VmVyc2lvbiIsImNyZWF0ZVBvcnRhbCIsImRpZFdhcm5BYm91dE5lc3RlZFVwZGF0ZXMiLCJkaWRXYXJuQWJvdXRGaW5kTm9kZUluU3RyaWN0TW9kZSIsImdldENvbnRleHRGb3JTdWJ0cmVlIiwicGFyZW50Q29tcG9uZW50IiwiZmluZEhvc3RJbnN0YW5jZVdpdGhXYXJuaW5nIiwibWV0aG9kTmFtZSIsImhvc3RGaWJlciIsImNyZWF0ZUNvbnRhaW5lciIsImNyZWF0ZUh5ZHJhdGlvbkNvbnRhaW5lciIsImN1cnJlbnQkMSIsImdldFB1YmxpY1Jvb3RJbnN0YW5jZSIsImNvbnRhaW5lckZpYmVyIiwiYXR0ZW1wdFN5bmNocm9ub3VzSHlkcmF0aW9uJDEiLCJtYXJrUmV0cnlMYW5lSWZOb3RIeWRyYXRlZCIsIm1hcmtSZXRyeUxhbmVJbXBsIiwiYXR0ZW1wdENvbnRpbnVvdXNIeWRyYXRpb24kMSIsImF0dGVtcHRIeWRyYXRpb25BdEN1cnJlbnRQcmlvcml0eSQxIiwiZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMiLCJzaG91bGRFcnJvckltcGwiLCJzaG91bGRTdXNwZW5kSW1wbCIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVIb29rU3RhdGVEZWxldGVQYXRoIiwib3ZlcnJpZGVIb29rU3RhdGVSZW5hbWVQYXRoIiwib3ZlcnJpZGVQcm9wcyIsIm92ZXJyaWRlUHJvcHNEZWxldGVQYXRoIiwib3ZlcnJpZGVQcm9wc1JlbmFtZVBhdGgiLCJzY2hlZHVsZVVwZGF0ZSIsInNldEVycm9ySGFuZGxlciIsInNldFN1c3BlbnNlSGFuZGxlciIsImNvcHlXaXRoRGVsZXRlSW1wbCIsIm9iaiIsInBhdGgiLCJ1cGRhdGVkIiwiY29weVdpdGhEZWxldGUiLCJjb3B5V2l0aFJlbmFtZUltcGwiLCJvbGRQYXRoIiwibmV3UGF0aCIsIm9sZEtleSIsIm5ld0tleSIsImNvcHlXaXRoUmVuYW1lIiwiY29weVdpdGhTZXRJbXBsIiwiY29weVdpdGhTZXQiLCJmaW5kSG9vayIsIm5ld1Nob3VsZEVycm9ySW1wbCIsIm5ld1Nob3VsZFN1c3BlbmRJbXBsIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJlbXB0eUZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiZ2V0Q3VycmVudEZpYmVyRm9yRGV2VG9vbHMiLCJpbmplY3RJbnRvRGV2VG9vbHMiLCJkZXZUb29sc0NvbmZpZyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJyZW5kZXJlckNvbmZpZyIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwicmVjb25jaWxlclZlcnNpb24iLCJkZWZhdWx0T25SZWNvdmVyYWJsZUVycm9yIiwicmVwb3J0RXJyb3IiLCJSZWFjdERPTVJvb3QiLCJpbnRlcm5hbFJvb3QiLCJfaW50ZXJuYWxSb290IiwiUmVhY3RET01IeWRyYXRpb25Sb290IiwiaXNWYWxpZENvbnRhaW5lciIsInVubW91bnQiLCJjcmVhdGVSb290Iiwid2FybklmUmVhY3RET01Db250YWluZXJJbkRFViIsInVuc3RhYmxlX3N0cmljdE1vZGUiLCJzY2hlZHVsZUh5ZHJhdGlvbiIsInVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uIiwiaHlkcmF0ZVJvb3QiLCJtdXRhYmxlU291cmNlcyIsImh5ZHJhdGVkU291cmNlcyIsImlzVmFsaWRDb250YWluZXJMZWdhY3kiLCJSZWFjdEN1cnJlbnRPd25lciQzIiwidG9wTGV2ZWxVcGRhdGVXYXJuaW5ncyIsImlzUm9vdFJlbmRlcmVkQnlTb21lUmVhY3QiLCJyb290RWwiLCJnZXRSZWFjdFJvb3RFbGVtZW50SW5Db250YWluZXIiLCJoYXNOb25Sb290UmVhY3RDaGlsZCIsIm5vb3BPblJlY292ZXJhYmxlRXJyb3IiLCJsZWdhY3lDcmVhdGVSb290RnJvbURPTUNvbnRhaW5lciIsImlzSHlkcmF0aW9uQ29udGFpbmVyIiwib3JpZ2luYWxDYWxsYmFjayIsInJvb3RTaWJsaW5nIiwiX29yaWdpbmFsQ2FsbGJhY2siLCJfcm9vdENvbnRhaW5lckVsZW1lbnQiLCJ3YXJuT25JbnZhbGlkQ2FsbGJhY2skMSIsImxlZ2FjeVJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiZm9yY2VIeWRyYXRlIiwibWF5YmVSb290IiwiZGlkV2FybkFib3V0RmluZERPTU5vZGUiLCJmaW5kRE9NTm9kZSIsImNvbXBvbmVudE9yRWxlbWVudCIsIndhcm5lZEFib3V0UmVmc0luUmVuZGVyIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjb250YWluZXJOb2RlIiwiZGlkV2FybkFib3V0VW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJyZW5kZXJlZEJ5RGlmZmVyZW50UmVhY3QiLCJfcm9vdEVsIiwiaXNDb250YWluZXJSZWFjdFJvb3QiLCJjcmVhdGVQb3J0YWwkMSIsInJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiSW50ZXJuYWxzIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwiY3JlYXRlUm9vdCQxIiwiaHlkcmF0ZVJvb3QkMSIsImZsdXNoU3luYyQxIiwiZm91bmREZXZUb29scyIsInNlbGYiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJwcm90b2NvbCIsImV4cG9ydHMiLCJ1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcyIsInJlZ2lzdGVySW50ZXJuYWxNb2R1bGVTdG9wIiwibSIsImgiLCJtb2R1bGUiLCJlbmFibGVTY29wZUFQSSIsImVuYWJsZUNhY2hlRWxlbWVudCIsImVuYWJsZVRyYW5zaXRpb25UcmFjaW5nIiwiZW5hYmxlRGVidWdUcmFjaW5nIiwiUkVBQ1RfTU9EVUxFX1JFRkVSRU5DRSIsImlzVmFsaWRFbGVtZW50VHlwZSIsImdldE1vZHVsZUlkIiwiUkVTRVJWRURfUFJPUFMiLCJfX3NlbGYiLCJfX3NvdXJjZSIsInNwZWNpYWxQcm9wS2V5V2FybmluZ1Nob3duIiwic3BlY2lhbFByb3BSZWZXYXJuaW5nU2hvd24iLCJoYXNWYWxpZFJlZiIsImNvbmZpZyIsImdldHRlciIsImlzUmVhY3RXYXJuaW5nIiwiaGFzVmFsaWRLZXkiLCJ3YXJuSWZTdHJpbmdSZWZDYW5ub3RCZUF1dG9Db252ZXJ0ZWQiLCJkZWZpbmVLZXlQcm9wV2FybmluZ0dldHRlciIsIndhcm5BYm91dEFjY2Vzc2luZ0tleSIsImRlZmluZVJlZlByb3BXYXJuaW5nR2V0dGVyIiwid2FybkFib3V0QWNjZXNzaW5nUmVmIiwiUmVhY3RFbGVtZW50IiwianN4REVWIiwibWF5YmVLZXkiLCJzZXRDdXJyZW50bHlWYWxpZGF0aW5nRWxlbWVudCQxIiwicHJvcFR5cGVzTWlzc3BlbGxXYXJuaW5nU2hvd24iLCJpc1ZhbGlkRWxlbWVudCIsIm9iamVjdCIsImdldFNvdXJjZUluZm9FcnJvckFkZGVuZHVtIiwiZ2V0Q3VycmVudENvbXBvbmVudEVycm9ySW5mbyIsInBhcmVudE5hbWUiLCJ2YWxpZGF0ZUV4cGxpY2l0S2V5IiwiY3VycmVudENvbXBvbmVudEVycm9ySW5mbyIsImNoaWxkT3duZXIiLCJ2YWxpZGF0ZUNoaWxkS2V5cyIsInZhbGlkYXRlUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiX25hbWUiLCJ2YWxpZGF0ZUZyYWdtZW50UHJvcHMiLCJkaWRXYXJuQWJvdXRLZXlTcHJlYWQiLCJqc3hXaXRoVmFsaWRhdGlvbiIsImlzU3RhdGljQ2hpbGRyZW4iLCJ2YWxpZFR5cGUiLCJzb3VyY2VJbmZvIiwidHlwZVN0cmluZyIsImJlZm9yZUV4YW1wbGUiLCJhZnRlckV4YW1wbGUiLCJqc3hXaXRoVmFsaWRhdGlvblN0YXRpYyIsImpzeFdpdGhWYWxpZGF0aW9uRHluYW1pYyIsImpzeCIsImpzeHMiLCJjdXJyZW50RXh0cmFTdGFja0ZyYW1lIiwiZGlkV2FyblN0YXRlVXBkYXRlRm9yVW5tb3VudGVkQ29tcG9uZW50Iiwid2Fybk5vb3AiLCJwdWJsaWNJbnN0YW5jZSIsIl9jb25zdHJ1Y3RvciIsIlJlYWN0Tm9vcFVwZGF0ZVF1ZXVlIiwiY29tcGxldGVTdGF0ZSIsImVtcHR5T2JqZWN0Iiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsImRlcHJlY2F0ZWRBUElzIiwicmVwbGFjZVN0YXRlIiwiZGVmaW5lRGVwcmVjYXRpb25XYXJuaW5nIiwiZm5OYW1lIiwiQ29tcG9uZW50RHVtbXkiLCJQdXJlQ29tcG9uZW50IiwicHVyZUNvbXBvbmVudFByb3RvdHlwZSIsImNyZWF0ZVJlZiIsInNlYWwiLCJjaGlsZHJlbkxlbmd0aCIsImNoaWxkQXJyYXkiLCJjbG9uZUFuZFJlcGxhY2VLZXkiLCJvbGRFbGVtZW50IiwibmV3RWxlbWVudCIsImNsb25lRWxlbWVudCIsIlNFUEFSQVRPUiIsIlNVQlNFUEFSQVRPUiIsImVzY2FwZSIsImVzY2FwZVJlZ2V4IiwiZXNjYXBlckxvb2t1cCIsImVzY2FwZWRTdHJpbmciLCJ1c2VyUHJvdmlkZWRLZXlFc2NhcGVSZWdleCIsImVzY2FwZVVzZXJQcm92aWRlZEtleSIsImdldEVsZW1lbnRLZXkiLCJtYXBJbnRvQXJyYXkiLCJlc2NhcGVkUHJlZml4IiwibmFtZVNvRmFyIiwiaW52b2tlQ2FsbGJhY2siLCJtYXBwZWRDaGlsZCIsImNoaWxkS2V5IiwiZXNjYXBlZENoaWxkS2V5IiwibmV4dE5hbWUiLCJzdWJ0cmVlQ291bnQiLCJuZXh0TmFtZVByZWZpeCIsIml0ZXJhYmxlQ2hpbGRyZW4iLCJpaSIsImNoaWxkcmVuU3RyaW5nIiwibWFwQ2hpbGRyZW4iLCJjb3VudCIsImNvdW50Q2hpbGRyZW4iLCJuIiwiZm9yRWFjaENoaWxkcmVuIiwiZm9yRWFjaEZ1bmMiLCJmb3JFYWNoQ29udGV4dCIsInRvQXJyYXkiLCJvbmx5Q2hpbGQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIl9kZWZhdWx0VmFsdWUiLCJfZ2xvYmFsTmFtZSIsImhhc1dhcm5lZEFib3V0VXNpbmdOZXN0ZWRDb250ZXh0Q29uc3VtZXJzIiwiaGFzV2FybmVkQWJvdXRVc2luZ0NvbnN1bWVyUHJvdmlkZXIiLCJoYXNXYXJuZWRBYm91dERpc3BsYXlOYW1lT25Db25zdW1lciIsIl9Qcm92aWRlciIsIl9jdXJyZW50UmVuZGVyZXIyIiwiVW5pbml0aWFsaXplZCIsIlBlbmRpbmciLCJSZXNvbHZlZCIsIlJlamVjdGVkIiwibGF6eUluaXRpYWxpemVyIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJ0aGVuYWJsZSIsIm1vZHVsZU9iamVjdCIsInJlc29sdmVkIiwicmVqZWN0ZWQiLCJsYXp5IiwibmV3RGVmYXVsdFByb3BzIiwibmV3UHJvcFR5cGVzIiwiZm9yd2FyZFJlZiIsIm93bk5hbWUiLCJtZW1vIiwicmVzb2x2ZURpc3BhdGNoZXIiLCJkaXNwYXRjaGVyIiwiQ29udGV4dCIsInJlYWxDb250ZXh0IiwiZ2V0U291cmNlSW5mb0Vycm9yQWRkZW5kdW1Gb3JQcm9wcyIsImVsZW1lbnRQcm9wcyIsImNyZWF0ZUVsZW1lbnRXaXRoVmFsaWRhdGlvbiIsImRpZFdhcm5BYm91dERlcHJlY2F0ZWRDcmVhdGVGYWN0b3J5IiwiY3JlYXRlRmFjdG9yeVdpdGhWYWxpZGF0aW9uIiwidmFsaWRhdGVkRmFjdG9yeSIsImNsb25lRWxlbWVudFdpdGhWYWxpZGF0aW9uIiwiZGlkV2FybkFib3V0TWVzc2FnZUNoYW5uZWwiLCJlbnF1ZXVlVGFza0ltcGwiLCJlbnF1ZXVlVGFzayIsInRhc2siLCJyZXF1aXJlU3RyaW5nIiwibm9kZVJlcXVpcmUiLCJzZXRJbW1lZGlhdGUiLCJfZXJyIiwiTWVzc2FnZUNoYW5uZWwiLCJjaGFubmVsIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3J0MiIsInBvc3RNZXNzYWdlIiwiYWN0U2NvcGVEZXB0aCIsImRpZFdhcm5Ob0F3YWl0QWN0IiwiYWN0IiwicHJldkFjdFNjb3BlRGVwdGgiLCJwcmV2SXNCYXRjaGluZ0xlZ2FjeSIsImZsdXNoQWN0UXVldWUiLCJwb3BBY3RTY29wZSIsInRoZW5hYmxlUmVzdWx0Iiwid2FzQXdhaXRlZCIsInJlamVjdCIsInJlY3Vyc2l2ZWx5Rmx1c2hBc3luY0FjdFdvcmsiLCJfcXVldWUiLCJfdGhlbmFibGUiLCJfdGhlbmFibGUyIiwiaXNGbHVzaGluZyIsImNyZWF0ZUVsZW1lbnQkMSIsImNsb25lRWxlbWVudCQxIiwiY3JlYXRlRmFjdG9yeSIsIm9ubHkiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJ1bnN0YWJsZV9hY3QiXSwic291cmNlUm9vdCI6IiJ9