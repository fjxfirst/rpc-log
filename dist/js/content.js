/******/ (() => { // webpackBootstrap
/*!************************!*\
  !*** ./src/content.js ***!
  \************************/
function injectScript(path) {
  return new Promise(function (resolve, reject) {
    var s = document.createElement('script');
    s.src = window.chrome.runtime.getURL(path);
    s.onload = function () {
      this.remove();
      resolve();
    };
    s.onerror = reject;
    (document.head || document.documentElement).appendChild(s);
  });
}
injectScript('js/inject.js').then(function () {
  console.log('chrome插件相关脚本注入成功');
});
var destructor = function destructor() {
  window.removeEventListener('message', pageMessageHandle);
  window.removeEventListener('beforeunload', pageUnloadHandle);
};
// 每次执行content.js时，先移除事件
destructor();
var portContentToBackground = chrome.runtime.connect({
  name: 'content'
});
var pageMessageHandle = function pageMessageHandle(event) {
  var source = event.source,
    data = event.data;
  if (source === window && data.type === 'FROM_ATU_PAGE') {
    var payloadData = data.payloadData;
    portContentToBackground.postMessage({
      type: 'REQUEST_EVENT',
      data: payloadData
    });
  }
};
var pageUnloadHandle = function pageUnloadHandle(event) {
  try {
    portContentToBackground && portContentToBackground.postMessage({
      type: 'PAGE_UNLOAD'
    });
  } catch (err) {
    alert(err.toString());
  }
};
window.addEventListener('message', pageMessageHandle);
window.addEventListener('beforeunload', pageUnloadHandle);
var timer = setInterval(function () {
  portContentToBackground.postMessage({
    type: 'PING'
  });
}, 20000);
portContentToBackground.onMessage.addListener(function (event) {});
portContentToBackground.onDisconnect.addListener(function (e) {
  console.log('content掉线了', e);
  clearInterval(timer);
  portContentToBackground = chrome.runtime.connect({
    name: 'content'
  });
});
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDLEVBQUs7RUFDdER4QixPQUFPLENBQUNDLEdBQUcsQ0FBQyxZQUFZLEVBQUV1QixDQUFDLENBQUM7RUFDNUJDLGFBQWEsQ0FBQ04sS0FBSyxDQUFDO0VBQ3BCYix1QkFBdUIsR0FBR2hCLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDZ0IsT0FBTyxDQUFDO0lBQUVDLElBQUksRUFBRTtFQUFVLENBQUMsQ0FBQztBQUN2RSxDQUFDLENBQUMsQyIsInNvdXJjZXMiOlsid2VicGFjazovL3JwYy1sb2cvLi9zcmMvY29udGVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBpbmplY3RTY3JpcHQocGF0aCkge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICBjb25zdCBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XHJcbiAgICBzLnNyYyA9IHdpbmRvdy5jaHJvbWUucnVudGltZS5nZXRVUkwocGF0aCk7XHJcbiAgICBzLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgdGhpcy5yZW1vdmUoKTtcclxuICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgfTtcclxuICAgIHMub25lcnJvciA9IHJlamVjdDtcclxuICAgIChkb2N1bWVudC5oZWFkIHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQocyk7XHJcbiAgfSk7XHJcbn1cclxuaW5qZWN0U2NyaXB0KCdqcy9pbmplY3QuanMnKS50aGVuKCgpPT57XHJcbiAgY29uc29sZS5sb2coJ2Nocm9tZeaPkuS7tuebuOWFs+iEmuacrOazqOWFpeaIkOWKnycpO1xyXG59KTtcclxuY29uc3QgZGVzdHJ1Y3RvciA9ICgpID0+IHtcclxuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHBhZ2VNZXNzYWdlSGFuZGxlKTtcclxuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmVmb3JldW5sb2FkJywgcGFnZVVubG9hZEhhbmRsZSk7XHJcbn07XHJcbi8vIOavj+asoeaJp+ihjGNvbnRlbnQuanPml7bvvIzlhYjnp7vpmaTkuovku7ZcclxuZGVzdHJ1Y3RvcigpO1xyXG5sZXQgcG9ydENvbnRlbnRUb0JhY2tncm91bmQgPSBjaHJvbWUucnVudGltZS5jb25uZWN0KHsgbmFtZTogJ2NvbnRlbnQnIH0pO1xyXG5cclxuY29uc3QgcGFnZU1lc3NhZ2VIYW5kbGUgPSAoZXZlbnQpID0+IHtcclxuICBjb25zdCB7IHNvdXJjZSwgZGF0YSB9ID0gZXZlbnQ7XHJcbiAgaWYgKHNvdXJjZSA9PT0gd2luZG93ICYmIGRhdGEudHlwZSA9PT0gJ0ZST01fQVRVX1BBR0UnKSB7XHJcbiAgICBjb25zdCB7IHBheWxvYWREYXRhIH0gPSBkYXRhO1xyXG4gICAgcG9ydENvbnRlbnRUb0JhY2tncm91bmQucG9zdE1lc3NhZ2UoeyB0eXBlOiAnUkVRVUVTVF9FVkVOVCcsIGRhdGE6IHBheWxvYWREYXRhIH0pO1xyXG4gIH1cclxufTtcclxuY29uc3QgcGFnZVVubG9hZEhhbmRsZSA9IChldmVudCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBwb3J0Q29udGVudFRvQmFja2dyb3VuZCAmJiBwb3J0Q29udGVudFRvQmFja2dyb3VuZC5wb3N0TWVzc2FnZSh7IHR5cGU6ICdQQUdFX1VOTE9BRCcgfSk7XHJcbiAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICBhbGVydChlcnIudG9TdHJpbmcoKSk7XHJcbiAgfVxyXG59O1xyXG5cclxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBwYWdlTWVzc2FnZUhhbmRsZSk7XHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBwYWdlVW5sb2FkSGFuZGxlKTtcclxuXHJcbmxldCB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcclxuICBwb3J0Q29udGVudFRvQmFja2dyb3VuZC5wb3N0TWVzc2FnZSh7IHR5cGU6ICdQSU5HJyB9KTtcclxufSwgMjAwMDApO1xyXG5cclxucG9ydENvbnRlbnRUb0JhY2tncm91bmQub25NZXNzYWdlLmFkZExpc3RlbmVyKChldmVudCkgPT4ge1xyXG59KTtcclxuXHJcbnBvcnRDb250ZW50VG9CYWNrZ3JvdW5kLm9uRGlzY29ubmVjdC5hZGRMaXN0ZW5lcigoZSkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdjb250ZW505o6J57q/5LqGJywgZSk7XHJcbiAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XHJcbiAgcG9ydENvbnRlbnRUb0JhY2tncm91bmQgPSBjaHJvbWUucnVudGltZS5jb25uZWN0KHsgbmFtZTogJ2NvbnRlbnQnIH0pO1xyXG59KTtcclxuIl0sIm5hbWVzIjpbImluamVjdFNjcmlwdCIsInBhdGgiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzcmMiLCJ3aW5kb3ciLCJjaHJvbWUiLCJydW50aW1lIiwiZ2V0VVJMIiwib25sb2FkIiwicmVtb3ZlIiwib25lcnJvciIsImhlYWQiLCJkb2N1bWVudEVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsInRoZW4iLCJjb25zb2xlIiwibG9nIiwiZGVzdHJ1Y3RvciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJwYWdlTWVzc2FnZUhhbmRsZSIsInBhZ2VVbmxvYWRIYW5kbGUiLCJwb3J0Q29udGVudFRvQmFja2dyb3VuZCIsImNvbm5lY3QiLCJuYW1lIiwiZXZlbnQiLCJzb3VyY2UiLCJkYXRhIiwidHlwZSIsInBheWxvYWREYXRhIiwicG9zdE1lc3NhZ2UiLCJlcnIiLCJhbGVydCIsInRvU3RyaW5nIiwiYWRkRXZlbnRMaXN0ZW5lciIsInRpbWVyIiwic2V0SW50ZXJ2YWwiLCJvbk1lc3NhZ2UiLCJhZGRMaXN0ZW5lciIsIm9uRGlzY29ubmVjdCIsImUiLCJjbGVhckludGVydmFsIl0sInNvdXJjZVJvb3QiOiIifQ==